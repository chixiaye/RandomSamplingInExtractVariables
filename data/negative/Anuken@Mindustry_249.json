{
  "id" : 249,
  "expression" : "sector",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "86c2fe880585bab8824356d7ed2e11a41df2b5e0",
  "filePath" : "core/src/mindustry/game/Universe.java",
  "occurrences" : 28,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 136,
      "startColumnNumber" : 19,
      "endLineNumber" : 136,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 136,
        "startColumnNumber" : 19,
        "endLineNumber" : 136,
        "endColumnNumber" : 35
      },
      "nodeContext" : "sector.hasSave()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 136,
        "startColumnNumber" : 19,
        "endLineNumber" : 136,
        "endColumnNumber" : 35
      },
      "nodeContext" : "sector.hasSave()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 137,
      "startColumnNumber" : 38,
      "endLineNumber" : 137,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 137,
        "startColumnNumber" : 38,
        "endLineNumber" : 137,
        "endColumnNumber" : 59
      },
      "nodeContext" : "sector.getTimeSpent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 137,
        "startColumnNumber" : 38,
        "endLineNumber" : 137,
        "endColumnNumber" : 64
      },
      "nodeContext" : "sector.getTimeSpent() / 60",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 137,
        "startColumnNumber" : 37,
        "endLineNumber" : 137,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(sector.getTimeSpent() / 60)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 137,
        "startColumnNumber" : 32,
        "endLineNumber" : 137,
        "endColumnNumber" : 65
      },
      "nodeContext" : "(int)(sector.getTimeSpent() / 60)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 137,
        "startColumnNumber" : 24,
        "endLineNumber" : 137,
        "endColumnNumber" : 65
      },
      "nodeContext" : "spent=(int)(sector.getTimeSpent() / 60)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 137,
        "startColumnNumber" : 20,
        "endLineNumber" : 137,
        "endColumnNumber" : 66
      },
      "nodeContext" : "int spent=(int)(sector.getTimeSpent() / 60);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 137,
        "startColumnNumber" : 20,
        "endLineNumber" : 137,
        "endColumnNumber" : 66
      },
      "nodeContext" : "int spent=(int)(sector.getTimeSpent() / 60);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 141,
      "startColumnNumber" : 24,
      "endLineNumber" : 141,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 141,
        "startColumnNumber" : 24,
        "endLineNumber" : 141,
        "endColumnNumber" : 46
      },
      "nodeContext" : "sector.isBeingPlayed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 141,
        "startColumnNumber" : 23,
        "endLineNumber" : 141,
        "endColumnNumber" : 46
      },
      "nodeContext" : "!sector.isBeingPlayed()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 141,
        "startColumnNumber" : 23,
        "endLineNumber" : 141,
        "endColumnNumber" : 46
      },
      "nodeContext" : "!sector.isBeingPlayed()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 142,
      "startColumnNumber" : 40,
      "endLineNumber" : 142,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 142,
        "startColumnNumber" : 40,
        "endLineNumber" : 142,
        "endColumnNumber" : 65
      },
      "nodeContext" : "sector.getSecondsPassed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 142,
        "startColumnNumber" : 40,
        "endLineNumber" : 142,
        "endColumnNumber" : 82
      },
      "nodeContext" : "sector.getSecondsPassed() + actuallyPassed",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 142,
        "startColumnNumber" : 28,
        "endLineNumber" : 142,
        "endColumnNumber" : 82
      },
      "nodeContext" : "secPassed=sector.getSecondsPassed() + actuallyPassed",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 142,
        "startColumnNumber" : 24,
        "endLineNumber" : 142,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int secPassed=sector.getSecondsPassed() + actuallyPassed;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 142,
        "startColumnNumber" : 24,
        "endLineNumber" : 142,
        "endColumnNumber" : 83
      },
      "nodeContext" : "int secPassed=sector.getSecondsPassed() + actuallyPassed;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 144,
      "startColumnNumber" : 24,
      "endLineNumber" : 144,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 58
      },
      "nodeContext" : "sector.setSecondsPassed(secPassed)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 59
      },
      "nodeContext" : "sector.setSecondsPassed(secPassed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 59
      },
      "nodeContext" : "sector.setSecondsPassed(secPassed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 146,
      "startColumnNumber" : 43,
      "endLineNumber" : 146,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 146,
        "startColumnNumber" : 43,
        "endLineNumber" : 146,
        "endColumnNumber" : 65
      },
      "nodeContext" : "sector.isUnderAttack()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 146,
        "startColumnNumber" : 32,
        "endLineNumber" : 146,
        "endColumnNumber" : 65
      },
      "nodeContext" : "attacked=sector.isUnderAttack()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 146,
        "startColumnNumber" : 24,
        "endLineNumber" : 146,
        "endColumnNumber" : 66
      },
      "nodeContext" : "boolean attacked=sector.isUnderAttack();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 146,
        "startColumnNumber" : 24,
        "endLineNumber" : 146,
        "endColumnNumber" : 66
      },
      "nodeContext" : "boolean attacked=sector.isUnderAttack();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 148,
      "startColumnNumber" : 64,
      "endLineNumber" : 148,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 148,
        "startColumnNumber" : 64,
        "endLineNumber" : 148,
        "endColumnNumber" : 75
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 148,
        "startColumnNumber" : 64,
        "endLineNumber" : 148,
        "endColumnNumber" : 80
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 148,
        "startColumnNumber" : 64,
        "endLineNumber" : 148,
        "endColumnNumber" : 86
      },
      "nodeContext" : "sector.save.meta.rules",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 148,
        "startColumnNumber" : 64,
        "endLineNumber" : 148,
        "endColumnNumber" : 98
      },
      "nodeContext" : "sector.save.meta.rules.waveSpacing",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 148,
        "startColumnNumber" : 48,
        "endLineNumber" : 148,
        "endColumnNumber" : 98
      },
      "nodeContext" : "secPassed * 60f / sector.save.meta.rules.waveSpacing",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 148,
        "startColumnNumber" : 47,
        "endLineNumber" : 148,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(secPassed * 60f / sector.save.meta.rules.waveSpacing)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 148,
        "startColumnNumber" : 42,
        "endLineNumber" : 148,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 148,
        "startColumnNumber" : 28,
        "endLineNumber" : 148,
        "endColumnNumber" : 99
      },
      "nodeContext" : "wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 148,
        "startColumnNumber" : 24,
        "endLineNumber" : 148,
        "endColumnNumber" : 100
      },
      "nodeContext" : "int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 148,
        "startColumnNumber" : 24,
        "endLineNumber" : 148,
        "endColumnNumber" : 100
      },
      "nodeContext" : "int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 149,
      "startColumnNumber" : 73,
      "endLineNumber" : 149,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 149,
        "startColumnNumber" : 73,
        "endLineNumber" : 149,
        "endColumnNumber" : 84
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 149,
        "startColumnNumber" : 73,
        "endLineNumber" : 149,
        "endColumnNumber" : 89
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 149,
        "startColumnNumber" : 73,
        "endLineNumber" : 149,
        "endColumnNumber" : 97
      },
      "nodeContext" : "sector.save.meta.secinfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 149,
        "startColumnNumber" : 50,
        "endLineNumber" : 149,
        "endColumnNumber" : 170
      },
      "nodeContext" : "SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 149,
        "startColumnNumber" : 39,
        "endLineNumber" : 149,
        "endColumnNumber" : 175
      },
      "nodeContext" : "attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 149,
        "startColumnNumber" : 30,
        "endLineNumber" : 149,
        "endColumnNumber" : 175
      },
      "nodeContext" : "damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 176
      },
      "nodeContext" : "float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 176
      },
      "nodeContext" : "float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 149,
      "startColumnNumber" : 99,
      "endLineNumber" : 149,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 149,
        "startColumnNumber" : 99,
        "endLineNumber" : 149,
        "endColumnNumber" : 110
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 149,
        "startColumnNumber" : 99,
        "endLineNumber" : 149,
        "endColumnNumber" : 115
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 149,
        "startColumnNumber" : 99,
        "endLineNumber" : 149,
        "endColumnNumber" : 121
      },
      "nodeContext" : "sector.save.meta.rules",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 149,
        "startColumnNumber" : 99,
        "endLineNumber" : 149,
        "endColumnNumber" : 133
      },
      "nodeContext" : "sector.save.meta.rules.waveSpacing",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 149,
        "startColumnNumber" : 50,
        "endLineNumber" : 149,
        "endColumnNumber" : 170
      },
      "nodeContext" : "SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 149,
        "startColumnNumber" : 39,
        "endLineNumber" : 149,
        "endColumnNumber" : 175
      },
      "nodeContext" : "attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 149,
        "startColumnNumber" : 30,
        "endLineNumber" : 149,
        "endColumnNumber" : 175
      },
      "nodeContext" : "damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 176
      },
      "nodeContext" : "float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 176
      },
      "nodeContext" : "float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 149,
      "startColumnNumber" : 135,
      "endLineNumber" : 149,
      "endColumnNumber" : 141
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 149,
        "startColumnNumber" : 135,
        "endLineNumber" : 149,
        "endColumnNumber" : 146
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 149,
        "startColumnNumber" : 135,
        "endLineNumber" : 149,
        "endColumnNumber" : 151
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 149,
        "startColumnNumber" : 135,
        "endLineNumber" : 149,
        "endColumnNumber" : 156
      },
      "nodeContext" : "sector.save.meta.wave",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 149,
        "startColumnNumber" : 50,
        "endLineNumber" : 149,
        "endColumnNumber" : 170
      },
      "nodeContext" : "SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 149,
        "startColumnNumber" : 39,
        "endLineNumber" : 149,
        "endColumnNumber" : 175
      },
      "nodeContext" : "attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 149,
        "startColumnNumber" : 30,
        "endLineNumber" : 149,
        "endColumnNumber" : 175
      },
      "nodeContext" : "damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 176
      },
      "nodeContext" : "float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 176
      },
      "nodeContext" : "float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 152,
      "startColumnNumber" : 28,
      "endLineNumber" : 152,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 152,
        "startColumnNumber" : 28,
        "endLineNumber" : 152,
        "endColumnNumber" : 62
      },
      "nodeContext" : "sector.setWavesPassed(wavesPassed)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 152,
        "startColumnNumber" : 28,
        "endLineNumber" : 152,
        "endColumnNumber" : 63
      },
      "nodeContext" : "sector.setWavesPassed(wavesPassed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 151,
        "startColumnNumber" : 36,
        "endLineNumber" : 153,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  sector.setWavesPassed(wavesPassed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 151,
        "startColumnNumber" : 24,
        "endLineNumber" : 153,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked) {\n  sector.setWavesPassed(wavesPassed);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 152,
        "startColumnNumber" : 28,
        "endLineNumber" : 152,
        "endColumnNumber" : 63
      },
      "nodeContext" : "sector.setWavesPassed(wavesPassed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 155,
      "startColumnNumber" : 24,
      "endLineNumber" : 155,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 155,
        "startColumnNumber" : 24,
        "endLineNumber" : 155,
        "endColumnNumber" : 48
      },
      "nodeContext" : "sector.setDamage(damage)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 155,
        "startColumnNumber" : 24,
        "endLineNumber" : 155,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sector.setDamage(damage);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 155,
        "startColumnNumber" : 24,
        "endLineNumber" : 155,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sector.setDamage(damage);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 160,
      "startColumnNumber" : 60,
      "endLineNumber" : 160,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 160,
        "startColumnNumber" : 40,
        "endLineNumber" : 160,
        "endColumnNumber" : 67
      },
      "nodeContext" : "new SectorLoseEvent(sector)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Events.fire(new SectorLoseEvent(sector))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Events.fire(new SectorLoseEvent(sector));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 160,
        "startColumnNumber" : 28,
        "endLineNumber" : 160,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Events.fire(new SectorLoseEvent(sector));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 164,
      "startColumnNumber" : 28,
      "endLineNumber" : 164,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 164,
        "startColumnNumber" : 28,
        "endLineNumber" : 164,
        "endColumnNumber" : 39
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 164,
        "startColumnNumber" : 28,
        "endLineNumber" : 164,
        "endColumnNumber" : 48
      },
      "nodeContext" : "sector.save.delete()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 164,
        "startColumnNumber" : 28,
        "endLineNumber" : 164,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sector.save.delete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 164,
        "startColumnNumber" : 28,
        "endLineNumber" : 164,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sector.save.delete();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 166,
      "startColumnNumber" : 28,
      "endLineNumber" : 166,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 166,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 63
      },
      "nodeContext" : "sector.setExtraItems(new ItemSeq())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 166,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 64
      },
      "nodeContext" : "sector.setExtraItems(new ItemSeq());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 166,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 64
      },
      "nodeContext" : "sector.setExtraItems(new ItemSeq());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 167,
      "startColumnNumber" : 28,
      "endLineNumber" : 167,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 167,
        "startColumnNumber" : 28,
        "endLineNumber" : 167,
        "endColumnNumber" : 39
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 167,
        "startColumnNumber" : 28,
        "endLineNumber" : 167,
        "endColumnNumber" : 46
      },
      "nodeContext" : "sector.save=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 167,
        "startColumnNumber" : 28,
        "endLineNumber" : 167,
        "endColumnNumber" : 47
      },
      "nodeContext" : "sector.save=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 167,
        "startColumnNumber" : 28,
        "endLineNumber" : 167,
        "endColumnNumber" : 47
      },
      "nodeContext" : "sector.save=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 168,
      "startColumnNumber" : 28,
      "endLineNumber" : 168,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 168,
        "startColumnNumber" : 28,
        "endLineNumber" : 168,
        "endColumnNumber" : 48
      },
      "nodeContext" : "sector.setDamage(0f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 168,
        "startColumnNumber" : 28,
        "endLineNumber" : 168,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sector.setDamage(0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 158,
        "startColumnNumber" : 56,
        "endLineNumber" : 169,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 168,
        "startColumnNumber" : 28,
        "endLineNumber" : 168,
        "endColumnNumber" : 49
      },
      "nodeContext" : "sector.setDamage(0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 169,
      "startColumnNumber" : 64,
      "endLineNumber" : 169,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 169,
        "startColumnNumber" : 64,
        "endLineNumber" : 169,
        "endColumnNumber" : 75
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 169,
        "startColumnNumber" : 64,
        "endLineNumber" : 169,
        "endColumnNumber" : 80
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 169,
        "startColumnNumber" : 64,
        "endLineNumber" : 169,
        "endColumnNumber" : 85
      },
      "nodeContext" : "sector.save.meta.wave",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 169,
        "startColumnNumber" : 64,
        "endLineNumber" : 169,
        "endColumnNumber" : 99
      },
      "nodeContext" : "sector.save.meta.wave + wavesPassed",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 169,
        "startColumnNumber" : 64,
        "endLineNumber" : 169,
        "endColumnNumber" : 133
      },
      "nodeContext" : "sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 133
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 169,
        "startColumnNumber" : 30,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 169,
      "startColumnNumber" : 103,
      "endLineNumber" : 169,
      "endColumnNumber" : 109
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 169,
        "startColumnNumber" : 103,
        "endLineNumber" : 169,
        "endColumnNumber" : 114
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 169,
        "startColumnNumber" : 103,
        "endLineNumber" : 169,
        "endColumnNumber" : 119
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 169,
        "startColumnNumber" : 103,
        "endLineNumber" : 169,
        "endColumnNumber" : 125
      },
      "nodeContext" : "sector.save.meta.rules",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 169,
        "startColumnNumber" : 103,
        "endLineNumber" : 169,
        "endColumnNumber" : 133
      },
      "nodeContext" : "sector.save.meta.rules.winWave",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 169,
        "startColumnNumber" : 64,
        "endLineNumber" : 169,
        "endColumnNumber" : 133
      },
      "nodeContext" : "sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 133
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 169,
        "startColumnNumber" : 30,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 169,
      "startColumnNumber" : 138,
      "endLineNumber" : 169,
      "endColumnNumber" : 144
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 169,
        "startColumnNumber" : 138,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "sector.hasEnemyBase()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 169,
        "startColumnNumber" : 137,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "!sector.hasEnemyBase()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 169,
        "startColumnNumber" : 30,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 169,
        "startColumnNumber" : 33,
        "endLineNumber" : 169,
        "endColumnNumber" : 159
      },
      "nodeContext" : "attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 30,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 171,
      "startColumnNumber" : 28,
      "endLineNumber" : 171,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 171,
        "startColumnNumber" : 28,
        "endLineNumber" : 171,
        "endColumnNumber" : 56
      },
      "nodeContext" : "sector.setUnderAttack(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 171,
        "startColumnNumber" : 28,
        "endLineNumber" : 171,
        "endColumnNumber" : 57
      },
      "nodeContext" : "sector.setUnderAttack(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 169,
        "startColumnNumber" : 160,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 399,
        "startLineNumber" : 169,
        "startColumnNumber" : 30,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 996,
        "startLineNumber" : 158,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (attacked && damage >= 0.999f) {\n  Events.fire(new SectorLoseEvent(sector));\n  sector.save.delete();\n  sector.setExtraItems(new ItemSeq());\n  sector.save=null;\n  sector.setDamage(0f);\n}\n else if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n  sector.setUnderAttack(false);\n  Events.fire(new SectorCaptureEvent(state.rules.sector));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1799,
        "startLineNumber" : 141,
        "startColumnNumber" : 47,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1826,
        "startLineNumber" : 141,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!sector.isBeingPlayed()) {\n  int secPassed=sector.getSecondsPassed() + actuallyPassed;\n  sector.setSecondsPassed(secPassed);\n  boolean attacked=sector.isUnderAttack();\n  int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n  float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n  if (attacked) {\n    sector.setWavesPassed(wavesPassed);\n  }\n  sector.setDamage(damage);\n  if (attacked && damage >= 0.999f) {\n    Events.fire(new SectorLoseEvent(sector));\n    sector.save.delete();\n    sector.setExtraItems(new ItemSeq());\n    sector.save=null;\n    sector.setDamage(0f);\n  }\n else   if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n    sector.setUnderAttack(false);\n    Events.fire(new SectorCaptureEvent(state.rules.sector));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 171,
        "startColumnNumber" : 28,
        "endLineNumber" : 171,
        "endColumnNumber" : 57
      },
      "nodeContext" : "sector.setUnderAttack(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 179,
      "startColumnNumber" : 23,
      "endLineNumber" : 179,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 34
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 42
      },
      "nodeContext" : "sector.save != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 70
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 179,
      "startColumnNumber" : 46,
      "endLineNumber" : 179,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 46,
        "endLineNumber" : 179,
        "endColumnNumber" : 57
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 179,
        "startColumnNumber" : 46,
        "endLineNumber" : 179,
        "endColumnNumber" : 62
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 179,
        "startColumnNumber" : 46,
        "endLineNumber" : 179,
        "endColumnNumber" : 70
      },
      "nodeContext" : "sector.save.meta != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 70
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 179,
      "startColumnNumber" : 74,
      "endLineNumber" : 179,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 74,
        "endLineNumber" : 179,
        "endColumnNumber" : 85
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 179,
        "startColumnNumber" : 74,
        "endLineNumber" : 179,
        "endColumnNumber" : 90
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 179,
        "startColumnNumber" : 74,
        "endLineNumber" : 179,
        "endColumnNumber" : 98
      },
      "nodeContext" : "sector.save.meta.secinfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 179,
        "startColumnNumber" : 74,
        "endLineNumber" : 179,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sector.save.meta.secinfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 179,
      "startColumnNumber" : 110,
      "endLineNumber" : 179,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 110,
        "endLineNumber" : 179,
        "endColumnNumber" : 121
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 179,
        "startColumnNumber" : 110,
        "endLineNumber" : 179,
        "endColumnNumber" : 126
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 179,
        "startColumnNumber" : 110,
        "endLineNumber" : 179,
        "endColumnNumber" : 134
      },
      "nodeContext" : "sector.save.meta.secinfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 179,
        "startColumnNumber" : 110,
        "endLineNumber" : 179,
        "endColumnNumber" : 146
      },
      "nodeContext" : "sector.save.meta.secinfo.destination",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 179,
        "startColumnNumber" : 110,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 154
      },
      "nodeContext" : "sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 35,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 180,
      "startColumnNumber" : 36,
      "endLineNumber" : 180,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 180,
        "endColumnNumber" : 47
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 180,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 180,
        "endColumnNumber" : 60
      },
      "nodeContext" : "sector.save.meta.secinfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 180,
        "startColumnNumber" : 36,
        "endLineNumber" : 180,
        "endColumnNumber" : 72
      },
      "nodeContext" : "sector.save.meta.secinfo.destination",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 180,
        "startColumnNumber" : 31,
        "endLineNumber" : 180,
        "endColumnNumber" : 72
      },
      "nodeContext" : "to=sector.save.meta.secinfo.destination",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 180,
        "startColumnNumber" : 24,
        "endLineNumber" : 180,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Sector to=sector.save.meta.secinfo.destination;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 179,
        "startColumnNumber" : 155,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 180,
        "startColumnNumber" : 24,
        "endLineNumber" : 180,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Sector to=sector.save.meta.secinfo.destination;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 184,
      "startColumnNumber" : 28,
      "endLineNumber" : 184,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 39
      },
      "nodeContext" : "sector.save",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 44
      },
      "nodeContext" : "sector.save.meta",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sector.save.meta.secinfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 59
      },
      "nodeContext" : "sector.save.meta.secinfo.export",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 134
      },
      "nodeContext" : "sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 135
      },
      "nodeContext" : "sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 181,
        "startColumnNumber" : 43,
        "endLineNumber" : 186,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  ItemSeq items=new ItemSeq();\n  sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n  to.addItems(items);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 181,
        "startColumnNumber" : 24,
        "endLineNumber" : 186,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (to.save != null) {\n  ItemSeq items=new ItemSeq();\n  sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n  to.addItems(items);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 482,
        "startLineNumber" : 179,
        "startColumnNumber" : 155,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n  Sector to=sector.save.meta.secinfo.destination;\n  if (to.save != null) {\n    ItemSeq items=new ItemSeq();\n    sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n    to.addItems(items);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 184,
        "startColumnNumber" : 28,
        "endLineNumber" : 184,
        "endColumnNumber" : 135
      },
      "nodeContext" : "sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  }, {
    "nodeContext" : "sector",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 190,
      "startColumnNumber" : 20,
      "endLineNumber" : 190,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 190,
        "startColumnNumber" : 20,
        "endLineNumber" : 190,
        "endColumnNumber" : 43
      },
      "nodeContext" : "sector.setTimeSpent(0f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 190,
        "startColumnNumber" : 20,
        "endLineNumber" : 190,
        "endColumnNumber" : 44
      },
      "nodeContext" : "sector.setTimeSpent(0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 136,
        "startColumnNumber" : 36,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2917,
        "startLineNumber" : 136,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (sector.hasSave()) {\n  int spent=(int)(sector.getTimeSpent() / 60);\n  int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n  if (!sector.isBeingPlayed()) {\n    int secPassed=sector.getSecondsPassed() + actuallyPassed;\n    sector.setSecondsPassed(secPassed);\n    boolean attacked=sector.isUnderAttack();\n    int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n    float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n    if (attacked) {\n      sector.setWavesPassed(wavesPassed);\n    }\n    sector.setDamage(damage);\n    if (attacked && damage >= 0.999f) {\n      Events.fire(new SectorLoseEvent(sector));\n      sector.save.delete();\n      sector.setExtraItems(new ItemSeq());\n      sector.save=null;\n      sector.setDamage(0f);\n    }\n else     if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n      sector.setUnderAttack(false);\n      Events.fire(new SectorCaptureEvent(state.rules.sector));\n    }\n  }\n  if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n    Sector to=sector.save.meta.secinfo.destination;\n    if (to.save != null) {\n      ItemSeq items=new ItemSeq();\n      sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n      to.addItems(items);\n    }\n  }\n  sector.setTimeSpent(0f);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2949,
        "startLineNumber" : 135,
        "startColumnNumber" : 47,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2984,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Sector sector : planet.sectors) {\n  if (sector.hasSave()) {\n    int spent=(int)(sector.getTimeSpent() / 60);\n    int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n    if (!sector.isBeingPlayed()) {\n      int secPassed=sector.getSecondsPassed() + actuallyPassed;\n      sector.setSecondsPassed(secPassed);\n      boolean attacked=sector.isUnderAttack();\n      int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n      float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n      if (attacked) {\n        sector.setWavesPassed(wavesPassed);\n      }\n      sector.setDamage(damage);\n      if (attacked && damage >= 0.999f) {\n        Events.fire(new SectorLoseEvent(sector));\n        sector.save.delete();\n        sector.setExtraItems(new ItemSeq());\n        sector.save=null;\n        sector.setDamage(0f);\n      }\n else       if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n        sector.setUnderAttack(false);\n        Events.fire(new SectorCaptureEvent(state.rules.sector));\n      }\n    }\n    if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n      Sector to=sector.save.meta.secinfo.destination;\n      if (to.save != null) {\n        ItemSeq items=new ItemSeq();\n        sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n        to.addItems(items);\n      }\n    }\n    sector.setTimeSpent(0f);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 134,
        "startColumnNumber" : 46,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 325,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3046,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Planet planet : content.planets()) {\n  for (  Sector sector : planet.sectors) {\n    if (sector.hasSave()) {\n      int spent=(int)(sector.getTimeSpent() / 60);\n      int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n      if (!sector.isBeingPlayed()) {\n        int secPassed=sector.getSecondsPassed() + actuallyPassed;\n        sector.setSecondsPassed(secPassed);\n        boolean attacked=sector.isUnderAttack();\n        int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n        float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n        if (attacked) {\n          sector.setWavesPassed(wavesPassed);\n        }\n        sector.setDamage(damage);\n        if (attacked && damage >= 0.999f) {\n          Events.fire(new SectorLoseEvent(sector));\n          sector.save.delete();\n          sector.setExtraItems(new ItemSeq());\n          sector.save=null;\n          sector.setDamage(0f);\n        }\n else         if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n          sector.setUnderAttack(false);\n          Events.fire(new SectorCaptureEvent(state.rules.sector));\n        }\n      }\n      if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n        Sector to=sector.save.meta.secinfo.destination;\n        if (to.save != null) {\n          ItemSeq items=new ItemSeq();\n          sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n          to.addItems(items);\n        }\n      }\n      sector.setTimeSpent(0f);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 333,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 128,
        "startColumnNumber" : 25,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3303,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Runs possible events. Resets event counter. \n */\npublic void runTurn(){\n  turn++;\n  int newSecondsPassed=(int)(turnDuration / 60);\n  for (  Planet planet : content.planets()) {\n    for (    Sector sector : planet.sectors) {\n      if (sector.hasSave()) {\n        int spent=(int)(sector.getTimeSpent() / 60);\n        int actuallyPassed=Math.max(newSecondsPassed - spent,0);\n        if (!sector.isBeingPlayed()) {\n          int secPassed=sector.getSecondsPassed() + actuallyPassed;\n          sector.setSecondsPassed(secPassed);\n          boolean attacked=sector.isUnderAttack();\n          int wavesPassed=(int)(secPassed * 60f / sector.save.meta.rules.waveSpacing);\n          float damage=attacked ? SectorDamage.getDamage(sector.save.meta.secinfo,sector.save.meta.rules.waveSpacing,sector.save.meta.wave,wavesPassed) : 0f;\n          if (attacked) {\n            sector.setWavesPassed(wavesPassed);\n          }\n          sector.setDamage(damage);\n          if (attacked && damage >= 0.999f) {\n            Events.fire(new SectorLoseEvent(sector));\n            sector.save.delete();\n            sector.setExtraItems(new ItemSeq());\n            sector.save=null;\n            sector.setDamage(0f);\n          }\n else           if (attacked && wavesPassed > 0 && sector.save.meta.wave + wavesPassed >= sector.save.meta.rules.winWave && !sector.hasEnemyBase()) {\n            sector.setUnderAttack(false);\n            Events.fire(new SectorCaptureEvent(state.rules.sector));\n          }\n        }\n        if (sector.save != null && sector.save.meta != null && sector.save.meta.secinfo != null && sector.save.meta.secinfo.destination != null) {\n          Sector to=sector.save.meta.secinfo.destination;\n          if (to.save != null) {\n            ItemSeq items=new ItemSeq();\n            sector.save.meta.secinfo.export.each((item,stat) -> items.add(item,(int)(stat.mean * newSecondsPassed)));\n            to.addItems(items);\n          }\n        }\n        sector.setTimeSpent(0f);\n      }\n    }\n  }\n  Events.fire(new TurnEvent());\n  save();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 190,
        "startColumnNumber" : 20,
        "endLineNumber" : 190,
        "endColumnNumber" : 44
      },
      "nodeContext" : "sector.setTimeSpent(0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "mindustry.type.Sector"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 136,
    "startColumnNumber" : 19,
    "endLineNumber" : 136,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 137,
    "startColumnNumber" : 38,
    "endLineNumber" : 137,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 141,
    "startColumnNumber" : 24,
    "endLineNumber" : 141,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 142,
    "startColumnNumber" : 40,
    "endLineNumber" : 142,
    "endColumnNumber" : 46
  }, {
    "charLength" : 6,
    "startLineNumber" : 144,
    "startColumnNumber" : 24,
    "endLineNumber" : 144,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 146,
    "startColumnNumber" : 43,
    "endLineNumber" : 146,
    "endColumnNumber" : 49
  }, {
    "charLength" : 6,
    "startLineNumber" : 148,
    "startColumnNumber" : 64,
    "endLineNumber" : 148,
    "endColumnNumber" : 70
  }, {
    "charLength" : 6,
    "startLineNumber" : 149,
    "startColumnNumber" : 73,
    "endLineNumber" : 149,
    "endColumnNumber" : 79
  }, {
    "charLength" : 6,
    "startLineNumber" : 149,
    "startColumnNumber" : 99,
    "endLineNumber" : 149,
    "endColumnNumber" : 105
  }, {
    "charLength" : 6,
    "startLineNumber" : 149,
    "startColumnNumber" : 135,
    "endLineNumber" : 149,
    "endColumnNumber" : 141
  }, {
    "charLength" : 6,
    "startLineNumber" : 152,
    "startColumnNumber" : 28,
    "endLineNumber" : 152,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 155,
    "startColumnNumber" : 24,
    "endLineNumber" : 155,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 160,
    "startColumnNumber" : 60,
    "endLineNumber" : 160,
    "endColumnNumber" : 66
  }, {
    "charLength" : 6,
    "startLineNumber" : 164,
    "startColumnNumber" : 28,
    "endLineNumber" : 164,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 166,
    "startColumnNumber" : 28,
    "endLineNumber" : 166,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 167,
    "startColumnNumber" : 28,
    "endLineNumber" : 167,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 168,
    "startColumnNumber" : 28,
    "endLineNumber" : 168,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 169,
    "startColumnNumber" : 64,
    "endLineNumber" : 169,
    "endColumnNumber" : 70
  }, {
    "charLength" : 6,
    "startLineNumber" : 169,
    "startColumnNumber" : 103,
    "endLineNumber" : 169,
    "endColumnNumber" : 109
  }, {
    "charLength" : 6,
    "startLineNumber" : 169,
    "startColumnNumber" : 138,
    "endLineNumber" : 169,
    "endColumnNumber" : 144
  }, {
    "charLength" : 6,
    "startLineNumber" : 171,
    "startColumnNumber" : 28,
    "endLineNumber" : 171,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 179,
    "startColumnNumber" : 23,
    "endLineNumber" : 179,
    "endColumnNumber" : 29
  }, {
    "charLength" : 6,
    "startLineNumber" : 179,
    "startColumnNumber" : 46,
    "endLineNumber" : 179,
    "endColumnNumber" : 52
  }, {
    "charLength" : 6,
    "startLineNumber" : 179,
    "startColumnNumber" : 74,
    "endLineNumber" : 179,
    "endColumnNumber" : 80
  }, {
    "charLength" : 6,
    "startLineNumber" : 179,
    "startColumnNumber" : 110,
    "endLineNumber" : 179,
    "endColumnNumber" : 116
  }, {
    "charLength" : 6,
    "startLineNumber" : 180,
    "startColumnNumber" : 36,
    "endLineNumber" : 180,
    "endColumnNumber" : 42
  }, {
    "charLength" : 6,
    "startLineNumber" : 184,
    "startColumnNumber" : 28,
    "endLineNumber" : 184,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 190,
    "startColumnNumber" : 20,
    "endLineNumber" : 190,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 11
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 11
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 10
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 2
  } ]
}