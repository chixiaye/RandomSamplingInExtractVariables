{
  "id" : 206,
  "expression" : "key",
  "projectName" : "alibaba@fastjson",
  "commitID" : "9831423c25fe1de6abdc4501c8b669ca92a4705c",
  "filePath" : "src/main/java/com/alibaba/fastjson/serializer/JavaBeanSerializer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "key",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 187,
      "startColumnNumber" : 20,
      "endLineNumber" : 187,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 187,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 52
      },
      "nodeContext" : "key != fieldSerializer.getName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 187,
        "startColumnNumber" : 20,
        "endLineNumber" : 187,
        "endColumnNumber" : 52
      },
      "nodeContext" : "key != fieldSerializer.getName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "key",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 189,
      "startColumnNumber" : 43,
      "endLineNumber" : 189,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 189,
        "startColumnNumber" : 24,
        "endLineNumber" : 189,
        "endColumnNumber" : 47
      },
      "nodeContext" : "out.writeFieldName(key)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 189,
        "startColumnNumber" : 24,
        "endLineNumber" : 189,
        "endColumnNumber" : 48
      },
      "nodeContext" : "out.writeFieldName(key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 188,
        "startColumnNumber" : 39,
        "endLineNumber" : 190,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  out.writeFieldName(key);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 188,
        "startColumnNumber" : 20,
        "endLineNumber" : 190,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!writeAsArray) {\n  out.writeFieldName(key);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 187,
        "startColumnNumber" : 54,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 187,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key != fieldSerializer.getName()) {\n  if (!writeAsArray) {\n    out.writeFieldName(key);\n  }\n  serializer.write(propertyValue);\n}\n else if (originalValue != propertyValue) {\n  if (!writeAsArray) {\n    fieldSerializer.writePrefix(serializer);\n  }\n  serializer.write(propertyValue);\n}\n else {\n  if (!writeAsArray) {\n    fieldSerializer.writeProperty(serializer,propertyValue);\n  }\n else {\n    fieldSerializer.writeValue(serializer,propertyValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2479,
        "startLineNumber" : 146,
        "startColumnNumber" : 53,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2520,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < getters.length; ++i) {\n  FieldSerializer fieldSerializer=getters[i];\n  if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n    Field field=fieldSerializer.getField();\n    if (field != null) {\n      if (Modifier.isTransient(field.getModifiers())) {\n        continue;\n      }\n    }\n  }\n  if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n    continue;\n  }\n  Object propertyValue=fieldSerializer.getPropertyValue(object);\n  if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n    continue;\n  }\n  String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n  Object originalValue=propertyValue;\n  propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n  if (propertyValue == null && !writeAsArray) {\n    if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n      continue;\n    }\n  }\n  if (commaFlag) {\n    out.append(',');\n    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.println();\n    }\n  }\n  if (key != fieldSerializer.getName()) {\n    if (!writeAsArray) {\n      out.writeFieldName(key);\n    }\n    serializer.write(propertyValue);\n  }\n else   if (originalValue != propertyValue) {\n    if (!writeAsArray) {\n      fieldSerializer.writePrefix(serializer);\n    }\n    serializer.write(propertyValue);\n  }\n else {\n    if (!writeAsArray) {\n      fieldSerializer.writeProperty(serializer,propertyValue);\n    }\n else {\n      fieldSerializer.writeValue(serializer,propertyValue);\n    }\n  }\n  commaFlag=true;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 225,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3756,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3923,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final char startSeperator=writeAsArray ? '[' : '{';\n  final char endSeperator=writeAsArray ? ']' : '}';\n  out.append(startSeperator);\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.incrementIndent();\n    serializer.println();\n  }\n  boolean commaFlag=false;\n  if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n    Class<?> objClass=object.getClass();\n    if (objClass != fieldType) {\n      out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n      serializer.write(object.getClass());\n      commaFlag=true;\n    }\n  }\n  char seperator=commaFlag ? ',' : '\\0';\n  char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n  commaFlag=newSeperator == ',';\n  for (int i=0; i < getters.length; ++i) {\n    FieldSerializer fieldSerializer=getters[i];\n    if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n      Field field=fieldSerializer.getField();\n      if (field != null) {\n        if (Modifier.isTransient(field.getModifiers())) {\n          continue;\n        }\n      }\n    }\n    if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n      continue;\n    }\n    Object propertyValue=fieldSerializer.getPropertyValue(object);\n    if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n      continue;\n    }\n    String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n    Object originalValue=propertyValue;\n    propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n    if (propertyValue == null && !writeAsArray) {\n      if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n        continue;\n      }\n    }\n    if (commaFlag) {\n      out.append(',');\n      if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n        serializer.println();\n      }\n    }\n    if (key != fieldSerializer.getName()) {\n      if (!writeAsArray) {\n        out.writeFieldName(key);\n      }\n      serializer.write(propertyValue);\n    }\n else     if (originalValue != propertyValue) {\n      if (!writeAsArray) {\n        fieldSerializer.writePrefix(serializer);\n      }\n      serializer.write(propertyValue);\n    }\n else {\n      if (!writeAsArray) {\n        fieldSerializer.writeProperty(serializer,propertyValue);\n      }\n else {\n        fieldSerializer.writeValue(serializer,propertyValue);\n      }\n    }\n    commaFlag=true;\n  }\n  if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n    serializer.decrementIdent();\n    serializer.println();\n  }\n  out.append(endSeperator);\n}\n catch (Exception e) {\n  throw new JSONException(\"write javaBean error\",e);\n}\n finally {\n  serializer.setContext(parent);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 387,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4762,
        "startLineNumber" : 89,
        "startColumnNumber" : 117,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4875,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void write(JSONSerializer serializer,Object object,Object fieldName,Type fieldType) throws IOException {\n  SerializeWriter out=serializer.getWriter();\n  if (object == null) {\n    out.writeNull();\n    return;\n  }\n  if (serializer.containsReference(object)) {\n    writeReference(serializer,object);\n    return;\n  }\n  final FieldSerializer[] getters;\n  if (out.isEnabled(SerializerFeature.SortField)) {\n    getters=this.sortedGetters;\n  }\n else {\n    getters=this.getters;\n  }\n  SerialContext parent=serializer.getContext();\n  serializer.setContext(parent,object,fieldName);\n  boolean writeAsArray;\n  if (out.isEnabled(SerializerFeature.WriteJavaBeanAsArray)) {\n    writeAsArray=true;\n  }\n else {\n    writeAsArray=false;\n  }\n  try {\n    final char startSeperator=writeAsArray ? '[' : '{';\n    final char endSeperator=writeAsArray ? ']' : '}';\n    out.append(startSeperator);\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.incrementIndent();\n      serializer.println();\n    }\n    boolean commaFlag=false;\n    if (isWriteClassName(serializer,object,fieldType,fieldName)) {\n      Class<?> objClass=object.getClass();\n      if (objClass != fieldType) {\n        out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n        serializer.write(object.getClass());\n        commaFlag=true;\n      }\n    }\n    char seperator=commaFlag ? ',' : '\\0';\n    char newSeperator=FilterUtils.writeBefore(serializer,object,seperator);\n    commaFlag=newSeperator == ',';\n    for (int i=0; i < getters.length; ++i) {\n      FieldSerializer fieldSerializer=getters[i];\n      if (serializer.isEnabled(SerializerFeature.SkipTransientField)) {\n        Field field=fieldSerializer.getField();\n        if (field != null) {\n          if (Modifier.isTransient(field.getModifiers())) {\n            continue;\n          }\n        }\n      }\n      if (!FilterUtils.applyName(serializer,object,fieldSerializer.getName())) {\n        continue;\n      }\n      Object propertyValue=fieldSerializer.getPropertyValue(object);\n      if (!FilterUtils.apply(serializer,object,fieldSerializer.getName(),propertyValue)) {\n        continue;\n      }\n      String key=FilterUtils.processKey(serializer,object,fieldSerializer.getName(),propertyValue);\n      Object originalValue=propertyValue;\n      propertyValue=FilterUtils.processValue(serializer,object,fieldSerializer.getName(),propertyValue);\n      if (propertyValue == null && !writeAsArray) {\n        if ((!fieldSerializer.isWriteNull()) && (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))) {\n          continue;\n        }\n      }\n      if (commaFlag) {\n        out.append(',');\n        if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n          serializer.println();\n        }\n      }\n      if (key != fieldSerializer.getName()) {\n        if (!writeAsArray) {\n          out.writeFieldName(key);\n        }\n        serializer.write(propertyValue);\n      }\n else       if (originalValue != propertyValue) {\n        if (!writeAsArray) {\n          fieldSerializer.writePrefix(serializer);\n        }\n        serializer.write(propertyValue);\n      }\n else {\n        if (!writeAsArray) {\n          fieldSerializer.writeProperty(serializer,propertyValue);\n        }\n else {\n          fieldSerializer.writeValue(serializer,propertyValue);\n        }\n      }\n      commaFlag=true;\n    }\n    if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n      serializer.decrementIdent();\n      serializer.println();\n    }\n    out.append(endSeperator);\n  }\n catch (  Exception e) {\n    throw new JSONException(\"write javaBean error\",e);\n  }\n finally {\n    serializer.setContext(parent);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 505,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 189,
        "startColumnNumber" : 24,
        "endLineNumber" : 189,
        "endColumnNumber" : 48
      },
      "nodeContext" : "out.writeFieldName(key);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 187,
    "startColumnNumber" : 20,
    "endLineNumber" : 187,
    "endColumnNumber" : 23
  }, {
    "charLength" : 3,
    "startLineNumber" : 189,
    "startColumnNumber" : 43,
    "endLineNumber" : 189,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}