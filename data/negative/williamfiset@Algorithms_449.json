{
  "id" : 449,
  "expression" : "m[r][c]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/linearalgebra/Simplex.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "m[r][c]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 52,
      "startColumnNumber" : 17,
      "endLineNumber" : 52,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 52,
        "startColumnNumber" : 13,
        "endLineNumber" : 52,
        "endColumnNumber" : 24
      },
      "nodeContext" : "v=m[r][c]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 25
      },
      "nodeContext" : "double v=m[r][c];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 726,
        "startLineNumber" : 31,
        "startColumnNumber" : 17,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double min=-EPS;\n  int c=-1;\n  for (int j=1; j < m[0].length; j++) {\n    if (m[0][j] < min) {\n      min=m[0][j];\n      c=j;\n    }\n  }\n  if (c < 0)   break;\n  min=Double.MAX_VALUE;\n  int r=-1;\n  for (int i=1; i < m.length; i++) {\n    if (m[i][c] > EPS) {\n      double v=m[i][0] / m[i][c];\n      if (v < min) {\n        min=v;\n        r=i;\n      }\n    }\n  }\n  double v=m[r][c];\n  for (int j=0; j < m[r].length; j++)   m[r][j]/=v;\n  for (int i=0; i < m.length; i++) {\n    if (i != r) {\n      v=m[i][c];\n      for (int j=0; j < m[i].length; j++)       m[i][j]-=m[r][j] * v;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  double min=-EPS;\n  int c=-1;\n  for (int j=1; j < m[0].length; j++) {\n    if (m[0][j] < min) {\n      min=m[0][j];\n      c=j;\n    }\n  }\n  if (c < 0)   break;\n  min=Double.MAX_VALUE;\n  int r=-1;\n  for (int i=1; i < m.length; i++) {\n    if (m[i][c] > EPS) {\n      double v=m[i][0] / m[i][c];\n      if (v < min) {\n        min=v;\n        r=i;\n      }\n    }\n  }\n  double v=m[r][c];\n  for (int j=0; j < m[r].length; j++)   m[r][j]/=v;\n  for (int i=0; i < m.length; i++) {\n    if (i != r) {\n      v=m[i][c];\n      for (int j=0; j < m[i].length; j++)       m[i][j]-=m[r][j] * v;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 208,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 30,
        "startColumnNumber" : 45,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  while (true) {\n    double min=-EPS;\n    int c=-1;\n    for (int j=1; j < m[0].length; j++) {\n      if (m[0][j] < min) {\n        min=m[0][j];\n        c=j;\n      }\n    }\n    if (c < 0)     break;\n    min=Double.MAX_VALUE;\n    int r=-1;\n    for (int i=1; i < m.length; i++) {\n      if (m[i][c] > EPS) {\n        double v=m[i][0] / m[i][c];\n        if (v < min) {\n          min=v;\n          r=i;\n        }\n      }\n    }\n    double v=m[r][c];\n    for (int j=0; j < m[r].length; j++)     m[r][j]/=v;\n    for (int i=0; i < m.length; i++) {\n      if (i != r) {\n        v=m[i][c];\n        for (int j=0; j < m[i].length; j++)         m[i][j]-=m[r][j] * v;\n      }\n    }\n  }\n  return m[0][0];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static double simplex(double[][] m){\n  while (true) {\n    double min=-EPS;\n    int c=-1;\n    for (int j=1; j < m[0].length; j++) {\n      if (m[0][j] < min) {\n        min=m[0][j];\n        c=j;\n      }\n    }\n    if (c < 0)     break;\n    min=Double.MAX_VALUE;\n    int r=-1;\n    for (int i=1; i < m.length; i++) {\n      if (m[i][c] > EPS) {\n        double v=m[i][0] / m[i][c];\n        if (v < min) {\n          min=v;\n          r=i;\n        }\n      }\n    }\n    double v=m[r][c];\n    for (int j=0; j < m[r].length; j++)     m[r][j]/=v;\n    for (int i=0; i < m.length; i++) {\n      if (i != r) {\n        v=m[i][c];\n        for (int j=0; j < m[i].length; j++)         m[i][j]-=m[r][j] * v;\n      }\n    }\n  }\n  return m[0][0];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 25
      },
      "nodeContext" : "double v=m[r][c];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 52,
    "startColumnNumber" : 17,
    "endLineNumber" : 52,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}