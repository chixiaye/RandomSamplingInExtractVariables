{
  "id" : 33,
  "expression" : "TimeUnit.MILLISECONDS",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/traffic/ChannelTrafficShapingHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUnit.MILLISECONDS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 195,
      "startColumnNumber" : 75,
      "endLineNumber" : 195,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 97
      },
      "nodeContext" : "ctx.executor().schedule(() -> sendAllValid(ctx,futureNow),delay,TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ctx.executor().schedule(() -> sendAllValid(ctx,futureNow),delay,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 180,
        "startColumnNumber" : 41,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ToSend newToSend;\nsynchronized (this) {\n    if (delay == 0 && messagesQueue.isEmpty()) {\n      trafficCounter.bytesRealWriteFlowControl(size);\n      ctx.write(msg).cascadeTo(promise);\n      return;\n    }\n    newToSend=new ToSend(delay + now,msg,promise);\n    messagesQueue.addLast(newToSend);\n    queueSize+=size;\n    checkWriteSuspend(ctx,delay,queueSize);\n  }\n  final long futureNow=newToSend.relativeTimeAction;\n  ctx.executor().schedule(() -> sendAllValid(ctx,futureNow),delay,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 879,
        "startLineNumber" : 177,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override void submitWrite(final ChannelHandlerContext ctx,final Object msg,final long size,final long delay,final long now,final Promise<Void> promise){\n  final ToSend newToSend;\nsynchronized (this) {\n    if (delay == 0 && messagesQueue.isEmpty()) {\n      trafficCounter.bytesRealWriteFlowControl(size);\n      ctx.write(msg).cascadeTo(promise);\n      return;\n    }\n    newToSend=new ToSend(delay + now,msg,promise);\n    messagesQueue.addLast(newToSend);\n    queueSize+=size;\n    checkWriteSuspend(ctx,delay,queueSize);\n  }\n  final long futureNow=newToSend.relativeTimeAction;\n  ctx.executor().schedule(() -> sendAllValid(ctx,futureNow),delay,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 117,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 98
      },
      "nodeContext" : "ctx.executor().schedule(() -> sendAllValid(ctx,futureNow),delay,TimeUnit.MILLISECONDS);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.TimeUnit"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 195,
    "startColumnNumber" : 75,
    "endLineNumber" : 195,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}