{
  "id" : 513,
  "expression" : "\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr()",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/connection/pool/ConnectionPool.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 208,
      "startLineNumber" : 109,
      "startColumnNumber" : 20,
      "endLineNumber" : 110,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 11,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 108,
        "startColumnNumber" : 30,
        "endLineNumber" : 110,
        "endColumnNumber" : 70
      },
      "nodeContext" : "new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 108,
        "startColumnNumber" : 22,
        "endLineNumber" : 110,
        "endColumnNumber" : 70
      },
      "nodeContext" : "cause=new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Throwable cause=new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 459,
        "startLineNumber" : 106,
        "startColumnNumber" : 81,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int totalInitializedConnections=minimumIdleSize - initializedConnections.get();\n  Throwable cause=new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr());\n  initPromise.tryFailure(cause);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if ((checkFreezed && entry.isFreezed()) || !tryAcquireConnection(entry)) {\n  int totalInitializedConnections=minimumIdleSize - initializedConnections.get();\n  Throwable cause=new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr());\n  initPromise.tryFailure(cause);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 104,
        "startColumnNumber" : 71,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if ((checkFreezed && entry.isFreezed()) || !tryAcquireConnection(entry)) {\n    int totalInitializedConnections=minimumIdleSize - initializedConnections.get();\n    Throwable cause=new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr());\n    initPromise.tryFailure(cause);\n    return;\n  }\n  acquireConnection(entry,new Runnable(){\n    @Override public void run(){\n      RPromise<T> promise=new RedissonPromise<T>();\n      createConnection(entry,promise);\n      promise.onComplete((conn,e) -> {\n        if (e == null) {\n          if (!initPromise.isDone()) {\n            releaseConnection(entry,conn);\n          }\n else {\n            conn.closeAsync();\n          }\n        }\n        releaseConnection(entry);\n        if (e != null) {\n          if (initPromise.isDone()) {\n            return;\n          }\n          for (          RedisConnection connection : entry.getAllConnections()) {\n            if (!connection.isClosed()) {\n              connection.closeAsync();\n            }\n          }\n          entry.getAllConnections().clear();\n          for (          RedisConnection connection : entry.getAllSubscribeConnections()) {\n            if (!connection.isClosed()) {\n              connection.closeAsync();\n            }\n          }\n          entry.getAllSubscribeConnections().clear();\n          int totalInitializedConnections=minimumIdleSize - initializedConnections.get();\n          String errorMsg;\n          if (totalInitializedConnections == 0) {\n            errorMsg=\"Unable to connect to Redis server: \" + entry.getClient().getAddr();\n          }\n else {\n            errorMsg=\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Redis server: \"+ entry.getClient().getAddr();\n          }\n          Throwable cause=new RedisConnectionException(errorMsg,e);\n          initPromise.tryFailure(cause);\n          return;\n        }\n        int value=initializedConnections.decrementAndGet();\n        if (value == 0) {\n          if (initPromise.trySuccess(null)) {\n            log.info(\"{} connections initialized for {}\",minimumIdleSize,entry.getClient().getAddr());\n          }\n        }\n else         if (value > 0 && !initPromise.isDone()) {\n          if (requests.incrementAndGet() <= minimumIdleSize) {\n            createConnection(checkFreezed,requests,entry,initPromise,minimumIdleSize,initializedConnections);\n          }\n        }\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 293,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3960,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void createConnection(boolean checkFreezed,AtomicInteger requests,ClientConnectionsEntry entry,RPromise<Void> initPromise,int minimumIdleSize,AtomicInteger initializedConnections){\n  if ((checkFreezed && entry.isFreezed()) || !tryAcquireConnection(entry)) {\n    int totalInitializedConnections=minimumIdleSize - initializedConnections.get();\n    Throwable cause=new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr());\n    initPromise.tryFailure(cause);\n    return;\n  }\n  acquireConnection(entry,new Runnable(){\n    @Override public void run(){\n      RPromise<T> promise=new RedissonPromise<T>();\n      createConnection(entry,promise);\n      promise.onComplete((conn,e) -> {\n        if (e == null) {\n          if (!initPromise.isDone()) {\n            releaseConnection(entry,conn);\n          }\n else {\n            conn.closeAsync();\n          }\n        }\n        releaseConnection(entry);\n        if (e != null) {\n          if (initPromise.isDone()) {\n            return;\n          }\n          for (          RedisConnection connection : entry.getAllConnections()) {\n            if (!connection.isClosed()) {\n              connection.closeAsync();\n            }\n          }\n          entry.getAllConnections().clear();\n          for (          RedisConnection connection : entry.getAllSubscribeConnections()) {\n            if (!connection.isClosed()) {\n              connection.closeAsync();\n            }\n          }\n          entry.getAllSubscribeConnections().clear();\n          int totalInitializedConnections=minimumIdleSize - initializedConnections.get();\n          String errorMsg;\n          if (totalInitializedConnections == 0) {\n            errorMsg=\"Unable to connect to Redis server: \" + entry.getClient().getAddr();\n          }\n else {\n            errorMsg=\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Redis server: \"+ entry.getClient().getAddr();\n          }\n          Throwable cause=new RedisConnectionException(errorMsg,e);\n          initPromise.tryFailure(cause);\n          return;\n        }\n        int value=initializedConnections.decrementAndGet();\n        if (value == 0) {\n          if (initPromise.trySuccess(null)) {\n            log.info(\"{} connections initialized for {}\",minimumIdleSize,entry.getClient().getAddr());\n          }\n        }\n else         if (value > 0 && !initPromise.isDone()) {\n          if (requests.incrementAndGet() <= minimumIdleSize) {\n            createConnection(checkFreezed,requests,entry,initPromise,minimumIdleSize,initializedConnections);\n          }\n        }\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 108,
        "startColumnNumber" : 30,
        "endLineNumber" : 110,
        "endColumnNumber" : 70
      },
      "nodeContext" : "new RedisConnectionException(\"Unable to init enough connections amount! Only \" + totalInitializedConnections + \" of \"+ minimumIdleSize+ \" were initialized. Server: \"+ entry.getClient().getAddr())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 20,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 208,
    "startLineNumber" : 109,
    "startColumnNumber" : 20,
    "endLineNumber" : 110,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}