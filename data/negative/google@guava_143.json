{
  "id" : 143,
  "expression" : "mode",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/math/BigDecimalMath.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 54,
      "startColumnNumber" : 63,
      "endLineNumber" : 54,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 54,
        "startColumnNumber" : 11,
        "endLineNumber" : 54,
        "endColumnNumber" : 68
      },
      "nodeContext" : "BigDecimalToDoubleRounder.INSTANCE.roundToDouble(x,mode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 69
      },
      "nodeContext" : "return BigDecimalToDoubleRounder.INSTANCE.roundToDouble(x,mode);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 53,
        "startColumnNumber" : 70,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return BigDecimalToDoubleRounder.INSTANCE.roundToDouble(x,mode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1451,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns  {@code x}, rounded to a  {@code double} with the specified rounding mode. If {@code x}is precisely representable as a  {@code double}, its  {@code double} value will be returned;otherwise, the rounding will choose between the two nearest representable values with  {@code mode}. <p>For the case of  {@link RoundingMode#HALF_DOWN},  {@code HALF_UP}, and  {@code HALF_EVEN}, infinite  {@code double} values are considered infinitely far away. For example, 2^2000 is notrepresentable as a double, but  {@code roundToDouble(BigDecimal.valueOf(2).pow(2000), HALF_UP)}will return  {@code Double.MAX_VALUE}, not  {@code Double.POSITIVE_INFINITY}. <p>For the case of  {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754 default rounding mode: if the two nearest representable values are equally near, the one with the least significant bit zero is chosen. (In such cases, both of the nearest representable values are even integers; this method returns the one that is a multiple of a greater power of two.)\n * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}is not precisely representable as a  {@code double}\n * @since 30.0\n */\npublic static double roundToDouble(BigDecimal x,RoundingMode mode){\n  return BigDecimalToDoubleRounder.INSTANCE.roundToDouble(x,mode);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 23,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 69
      },
      "nodeContext" : "return BigDecimalToDoubleRounder.INSTANCE.roundToDouble(x,mode);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.math.RoundingMode"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 54,
    "startColumnNumber" : 63,
    "endLineNumber" : 54,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}