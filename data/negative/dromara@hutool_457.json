{
  "id" : 457,
  "expression" : "\"Mismatched close tag \" + token",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-json/src/main/java/cn/hutool/json/XML.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Mismatched close tag \" + token",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 184,
      "startColumnNumber" : 24,
      "endLineNumber" : 184,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 184,
        "startColumnNumber" : 10,
        "endLineNumber" : 184,
        "endColumnNumber" : 56
      },
      "nodeContext" : "x.syntaxError(\"Mismatched close tag \" + token)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 57
      },
      "nodeContext" : "throw x.syntaxError(\"Mismatched close tag \" + token);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 183,
        "startColumnNumber" : 21,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  throw x.syntaxError(\"Mismatched close tag \" + token);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 183,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (name == null) {\n  throw x.syntaxError(\"Mismatched close tag \" + token);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 178,
        "startColumnNumber" : 29,
        "endLineNumber" : 194,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  token=x.nextToken();\n  if (name == null) {\n    throw x.syntaxError(\"Mismatched close tag \" + token);\n  }\n  if (!token.equals(name)) {\n    throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);\n  }\n  if (x.nextToken() != GT) {\n    throw x.syntaxError(\"Misshaped close tag\");\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2403,
        "startLineNumber" : 178,
        "startColumnNumber" : 9,
        "endLineNumber" : 268,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (token == SLASH) {\n  token=x.nextToken();\n  if (name == null) {\n    throw x.syntaxError(\"Mismatched close tag \" + token);\n  }\n  if (!token.equals(name)) {\n    throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);\n  }\n  if (x.nextToken() != GT) {\n    throw x.syntaxError(\"Misshaped close tag\");\n  }\n  return true;\n}\n else if (token instanceof Character) {\n  throw x.syntaxError(\"Misshaped tag\");\n}\n else {\n  tagName=(String)token;\n  token=null;\n  jsonobject=new JSONObject();\n  for (; ; ) {\n    if (token == null) {\n      token=x.nextToken();\n    }\n    if (token instanceof String) {\n      string=(String)token;\n      token=x.nextToken();\n      if (token == EQ) {\n        token=x.nextToken();\n        if (!(token instanceof String)) {\n          throw x.syntaxError(\"Missing value\");\n        }\n        jsonobject.accumulate(string,keepStrings ? token : InternalJSONUtil.stringToValue((String)token));\n        token=null;\n      }\n else {\n        jsonobject.accumulate(string,\"\");\n      }\n    }\n else     if (token == SLASH) {\n      if (x.nextToken() != GT) {\n        throw x.syntaxError(\"Misshaped tag\");\n      }\n      if (jsonobject.size() > 0) {\n        context.accumulate(tagName,jsonobject);\n      }\n else {\n        context.accumulate(tagName,\"\");\n      }\n      return false;\n    }\n else     if (token == GT) {\n      for (; ; ) {\n        token=x.nextContent();\n        if (token == null) {\n          if (tagName != null) {\n            throw x.syntaxError(\"Unclosed tag \" + tagName);\n          }\n          return false;\n        }\n else         if (token instanceof String) {\n          string=(String)token;\n          if (string.length() > 0) {\n            jsonobject.accumulate(\"content\",keepStrings ? token : InternalJSONUtil.stringToValue(string));\n          }\n        }\n else         if (token == LT) {\n          if (parse(x,jsonobject,tagName,keepStrings)) {\n            if (jsonobject.size() == 0) {\n              context.accumulate(tagName,\"\");\n            }\n else             if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {\n              context.accumulate(tagName,jsonobject.get(\"content\"));\n            }\n else {\n              context.accumulate(tagName,jsonobject);\n            }\n            return false;\n          }\n        }\n      }\n    }\n else {\n      throw x.syntaxError(\"Misshaped tag\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 331,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2482,
        "startLineNumber" : 173,
        "startColumnNumber" : 9,
        "endLineNumber" : 268,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (token == QUEST) {\n  x.skipPast(\"?>\");\n  return false;\n}\n else if (token == SLASH) {\n  token=x.nextToken();\n  if (name == null) {\n    throw x.syntaxError(\"Mismatched close tag \" + token);\n  }\n  if (!token.equals(name)) {\n    throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);\n  }\n  if (x.nextToken() != GT) {\n    throw x.syntaxError(\"Misshaped close tag\");\n  }\n  return true;\n}\n else if (token instanceof Character) {\n  throw x.syntaxError(\"Misshaped tag\");\n}\n else {\n  tagName=(String)token;\n  token=null;\n  jsonobject=new JSONObject();\n  for (; ; ) {\n    if (token == null) {\n      token=x.nextToken();\n    }\n    if (token instanceof String) {\n      string=(String)token;\n      token=x.nextToken();\n      if (token == EQ) {\n        token=x.nextToken();\n        if (!(token instanceof String)) {\n          throw x.syntaxError(\"Missing value\");\n        }\n        jsonobject.accumulate(string,keepStrings ? token : InternalJSONUtil.stringToValue((String)token));\n        token=null;\n      }\n else {\n        jsonobject.accumulate(string,\"\");\n      }\n    }\n else     if (token == SLASH) {\n      if (x.nextToken() != GT) {\n        throw x.syntaxError(\"Misshaped tag\");\n      }\n      if (jsonobject.size() > 0) {\n        context.accumulate(tagName,jsonobject);\n      }\n else {\n        context.accumulate(tagName,\"\");\n      }\n      return false;\n    }\n else     if (token == GT) {\n      for (; ; ) {\n        token=x.nextContent();\n        if (token == null) {\n          if (tagName != null) {\n            throw x.syntaxError(\"Unclosed tag \" + tagName);\n          }\n          return false;\n        }\n else         if (token instanceof String) {\n          string=(String)token;\n          if (string.length() > 0) {\n            jsonobject.accumulate(\"content\",keepStrings ? token : InternalJSONUtil.stringToValue(string));\n          }\n        }\n else         if (token == LT) {\n          if (parse(x,jsonobject,tagName,keepStrings)) {\n            if (jsonobject.size() == 0) {\n              context.accumulate(tagName,\"\");\n            }\n else             if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {\n              context.accumulate(tagName,jsonobject.get(\"content\"));\n            }\n else {\n              context.accumulate(tagName,jsonobject);\n            }\n            return false;\n          }\n        }\n      }\n    }\n else {\n      throw x.syntaxError(\"Misshaped tag\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 343,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 140,
        "startColumnNumber" : 2,
        "endLineNumber" : 268,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (token == BANG) {\n  c=x.next();\n  if (c == '-') {\n    if (x.next() == '-') {\n      x.skipPast(\"-->\");\n      return false;\n    }\n    x.back();\n  }\n else   if (c == '[') {\n    token=x.nextToken();\n    if (\"CDATA\".equals(token)) {\n      if (x.next() == '[') {\n        string=x.nextCDATA();\n        if (string.length() > 0) {\n          context.accumulate(\"content\",string);\n        }\n        return false;\n      }\n    }\n    throw x.syntaxError(\"Expected 'CDATA['\");\n  }\n  i=1;\n  do {\n    token=x.nextMeta();\n    if (token == null) {\n      throw x.syntaxError(\"Missing '>' after '<!'.\");\n    }\n else     if (token == LT) {\n      i+=1;\n    }\n else     if (token == GT) {\n      i-=1;\n    }\n  }\n while (i > 0);\n  return false;\n}\n else if (token == QUEST) {\n  x.skipPast(\"?>\");\n  return false;\n}\n else if (token == SLASH) {\n  token=x.nextToken();\n  if (name == null) {\n    throw x.syntaxError(\"Mismatched close tag \" + token);\n  }\n  if (!token.equals(name)) {\n    throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);\n  }\n  if (x.nextToken() != GT) {\n    throw x.syntaxError(\"Misshaped close tag\");\n  }\n  return true;\n}\n else if (token instanceof Character) {\n  throw x.syntaxError(\"Misshaped tag\");\n}\n else {\n  tagName=(String)token;\n  token=null;\n  jsonobject=new JSONObject();\n  for (; ; ) {\n    if (token == null) {\n      token=x.nextToken();\n    }\n    if (token instanceof String) {\n      string=(String)token;\n      token=x.nextToken();\n      if (token == EQ) {\n        token=x.nextToken();\n        if (!(token instanceof String)) {\n          throw x.syntaxError(\"Missing value\");\n        }\n        jsonobject.accumulate(string,keepStrings ? token : InternalJSONUtil.stringToValue((String)token));\n        token=null;\n      }\n else {\n        jsonobject.accumulate(string,\"\");\n      }\n    }\n else     if (token == SLASH) {\n      if (x.nextToken() != GT) {\n        throw x.syntaxError(\"Misshaped tag\");\n      }\n      if (jsonobject.size() > 0) {\n        context.accumulate(tagName,jsonobject);\n      }\n else {\n        context.accumulate(tagName,\"\");\n      }\n      return false;\n    }\n else     if (token == GT) {\n      for (; ; ) {\n        token=x.nextContent();\n        if (token == null) {\n          if (tagName != null) {\n            throw x.syntaxError(\"Unclosed tag \" + tagName);\n          }\n          return false;\n        }\n else         if (token instanceof String) {\n          string=(String)token;\n          if (string.length() > 0) {\n            jsonobject.accumulate(\"content\",keepStrings ? token : InternalJSONUtil.stringToValue(string));\n          }\n        }\n else         if (token == LT) {\n          if (parse(x,jsonobject,tagName,keepStrings)) {\n            if (jsonobject.size() == 0) {\n              context.accumulate(tagName,\"\");\n            }\n else             if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {\n              context.accumulate(tagName,jsonobject.get(\"content\"));\n            }\n else {\n              context.accumulate(tagName,jsonobject);\n            }\n            return false;\n          }\n        }\n      }\n    }\n else {\n      throw x.syntaxError(\"Misshaped tag\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 472,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3508,
        "startLineNumber" : 118,
        "startColumnNumber" : 119,
        "endLineNumber" : 269,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  char c;\n  int i;\n  JSONObject jsonobject;\n  String string;\n  String tagName;\n  Object token;\n  token=x.nextToken();\n  if (token == BANG) {\n    c=x.next();\n    if (c == '-') {\n      if (x.next() == '-') {\n        x.skipPast(\"-->\");\n        return false;\n      }\n      x.back();\n    }\n else     if (c == '[') {\n      token=x.nextToken();\n      if (\"CDATA\".equals(token)) {\n        if (x.next() == '[') {\n          string=x.nextCDATA();\n          if (string.length() > 0) {\n            context.accumulate(\"content\",string);\n          }\n          return false;\n        }\n      }\n      throw x.syntaxError(\"Expected 'CDATA['\");\n    }\n    i=1;\n    do {\n      token=x.nextMeta();\n      if (token == null) {\n        throw x.syntaxError(\"Missing '>' after '<!'.\");\n      }\n else       if (token == LT) {\n        i+=1;\n      }\n else       if (token == GT) {\n        i-=1;\n      }\n    }\n while (i > 0);\n    return false;\n  }\n else   if (token == QUEST) {\n    x.skipPast(\"?>\");\n    return false;\n  }\n else   if (token == SLASH) {\n    token=x.nextToken();\n    if (name == null) {\n      throw x.syntaxError(\"Mismatched close tag \" + token);\n    }\n    if (!token.equals(name)) {\n      throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);\n    }\n    if (x.nextToken() != GT) {\n      throw x.syntaxError(\"Misshaped close tag\");\n    }\n    return true;\n  }\n else   if (token instanceof Character) {\n    throw x.syntaxError(\"Misshaped tag\");\n  }\n else {\n    tagName=(String)token;\n    token=null;\n    jsonobject=new JSONObject();\n    for (; ; ) {\n      if (token == null) {\n        token=x.nextToken();\n      }\n      if (token instanceof String) {\n        string=(String)token;\n        token=x.nextToken();\n        if (token == EQ) {\n          token=x.nextToken();\n          if (!(token instanceof String)) {\n            throw x.syntaxError(\"Missing value\");\n          }\n          jsonobject.accumulate(string,keepStrings ? token : InternalJSONUtil.stringToValue((String)token));\n          token=null;\n        }\n else {\n          jsonobject.accumulate(string,\"\");\n        }\n      }\n else       if (token == SLASH) {\n        if (x.nextToken() != GT) {\n          throw x.syntaxError(\"Misshaped tag\");\n        }\n        if (jsonobject.size() > 0) {\n          context.accumulate(tagName,jsonobject);\n        }\n else {\n          context.accumulate(tagName,\"\");\n        }\n        return false;\n      }\n else       if (token == GT) {\n        for (; ; ) {\n          token=x.nextContent();\n          if (token == null) {\n            if (tagName != null) {\n              throw x.syntaxError(\"Unclosed tag \" + tagName);\n            }\n            return false;\n          }\n else           if (token instanceof String) {\n            string=(String)token;\n            if (string.length() > 0) {\n              jsonobject.accumulate(\"content\",keepStrings ? token : InternalJSONUtil.stringToValue(string));\n            }\n          }\n else           if (token == LT) {\n            if (parse(x,jsonobject,tagName,keepStrings)) {\n              if (jsonobject.size() == 0) {\n                context.accumulate(tagName,\"\");\n              }\n else               if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {\n                context.accumulate(tagName,jsonobject.get(\"content\"));\n              }\n else {\n                context.accumulate(tagName,jsonobject);\n              }\n              return false;\n            }\n          }\n        }\n      }\n else {\n        throw x.syntaxError(\"Misshaped tag\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 507,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3963,
        "startLineNumber" : 109,
        "startColumnNumber" : 1,
        "endLineNumber" : 269,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Scan the content following the named tag, attaching it to the context.\n * @param x       The XMLTokener containing the source string.\n * @param context The JSONObject that will include the new material.\n * @param name    The tag name.\n * @return true if the close tag is processed.\n * @throws JSONException JSON异常\n */\nprivate static boolean parse(XMLTokener x,JSONObject context,String name,boolean keepStrings) throws JSONException {\n  char c;\n  int i;\n  JSONObject jsonobject;\n  String string;\n  String tagName;\n  Object token;\n  token=x.nextToken();\n  if (token == BANG) {\n    c=x.next();\n    if (c == '-') {\n      if (x.next() == '-') {\n        x.skipPast(\"-->\");\n        return false;\n      }\n      x.back();\n    }\n else     if (c == '[') {\n      token=x.nextToken();\n      if (\"CDATA\".equals(token)) {\n        if (x.next() == '[') {\n          string=x.nextCDATA();\n          if (string.length() > 0) {\n            context.accumulate(\"content\",string);\n          }\n          return false;\n        }\n      }\n      throw x.syntaxError(\"Expected 'CDATA['\");\n    }\n    i=1;\n    do {\n      token=x.nextMeta();\n      if (token == null) {\n        throw x.syntaxError(\"Missing '>' after '<!'.\");\n      }\n else       if (token == LT) {\n        i+=1;\n      }\n else       if (token == GT) {\n        i-=1;\n      }\n    }\n while (i > 0);\n    return false;\n  }\n else   if (token == QUEST) {\n    x.skipPast(\"?>\");\n    return false;\n  }\n else   if (token == SLASH) {\n    token=x.nextToken();\n    if (name == null) {\n      throw x.syntaxError(\"Mismatched close tag \" + token);\n    }\n    if (!token.equals(name)) {\n      throw x.syntaxError(\"Mismatched \" + name + \" and \"+ token);\n    }\n    if (x.nextToken() != GT) {\n      throw x.syntaxError(\"Misshaped close tag\");\n    }\n    return true;\n  }\n else   if (token instanceof Character) {\n    throw x.syntaxError(\"Misshaped tag\");\n  }\n else {\n    tagName=(String)token;\n    token=null;\n    jsonobject=new JSONObject();\n    for (; ; ) {\n      if (token == null) {\n        token=x.nextToken();\n      }\n      if (token instanceof String) {\n        string=(String)token;\n        token=x.nextToken();\n        if (token == EQ) {\n          token=x.nextToken();\n          if (!(token instanceof String)) {\n            throw x.syntaxError(\"Missing value\");\n          }\n          jsonobject.accumulate(string,keepStrings ? token : InternalJSONUtil.stringToValue((String)token));\n          token=null;\n        }\n else {\n          jsonobject.accumulate(string,\"\");\n        }\n      }\n else       if (token == SLASH) {\n        if (x.nextToken() != GT) {\n          throw x.syntaxError(\"Misshaped tag\");\n        }\n        if (jsonobject.size() > 0) {\n          context.accumulate(tagName,jsonobject);\n        }\n else {\n          context.accumulate(tagName,\"\");\n        }\n        return false;\n      }\n else       if (token == GT) {\n        for (; ; ) {\n          token=x.nextContent();\n          if (token == null) {\n            if (tagName != null) {\n              throw x.syntaxError(\"Unclosed tag \" + tagName);\n            }\n            return false;\n          }\n else           if (token instanceof String) {\n            string=(String)token;\n            if (string.length() > 0) {\n              jsonobject.accumulate(\"content\",keepStrings ? token : InternalJSONUtil.stringToValue(string));\n            }\n          }\n else           if (token == LT) {\n            if (parse(x,jsonobject,tagName,keepStrings)) {\n              if (jsonobject.size() == 0) {\n                context.accumulate(tagName,\"\");\n              }\n else               if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {\n                context.accumulate(tagName,jsonobject.get(\"content\"));\n              }\n else {\n                context.accumulate(tagName,jsonobject);\n              }\n              return false;\n            }\n          }\n        }\n      }\n else {\n        throw x.syntaxError(\"Misshaped tag\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 530,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 57
      },
      "nodeContext" : "throw x.syntaxError(\"Mismatched close tag \" + token);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 184,
    "startColumnNumber" : 24,
    "endLineNumber" : 184,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}