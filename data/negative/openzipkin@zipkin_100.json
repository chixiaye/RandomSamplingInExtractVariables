{
  "id" : 100,
  "expression" : "new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations)",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "ff4c073df242c93e8f6f65b6d757e74e4e5a2114",
  "filePath" : "zipkin-java-core/src/main/java/io/zipkin/internal/CorrectForClockSkew.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 83,
      "startLineNumber" : 90,
      "startColumnNumber" : 11,
      "endLineNumber" : 90,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 15,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 90,
        "startColumnNumber" : 11,
        "endLineNumber" : 90,
        "endColumnNumber" : 102
      },
      "nodeContext" : "new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 103
      },
      "nodeContext" : "return new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations).build();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 825,
        "startLineNumber" : 74,
        "startColumnNumber" : 71,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Annotation[] annotations=null;\n  int length=span.annotations.size();\n  for (int i=0; i < length; i++) {\n    Annotation a=span.annotations.get(i);\n    if (a.endpoint == null)     continue;\n    if (clockSkew.endpoint.ipv4 == a.endpoint.ipv4) {\n      if (annotations == null)       annotations=span.annotations.toArray(new Annotation[length]);\n      annotations[i]=new Annotation.Builder(a).timestamp(a.timestamp - clockSkew.skew).build();\n    }\n  }\n  if (annotations == null)   return span;\n  long first=annotations[0].timestamp;\n  long last=annotations[length - 1].timestamp;\n  long duration=last - first;\n  return new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 91,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * If any annotation has an IP with skew associated, adjust accordingly. \n */\nprivate static Span adjustTimestamps(Span span,ClockSkew clockSkew){\n  Annotation[] annotations=null;\n  int length=span.annotations.size();\n  for (int i=0; i < length; i++) {\n    Annotation a=span.annotations.get(i);\n    if (a.endpoint == null)     continue;\n    if (clockSkew.endpoint.ipv4 == a.endpoint.ipv4) {\n      if (annotations == null)       annotations=span.annotations.toArray(new Annotation[length]);\n      annotations[i]=new Annotation.Builder(a).timestamp(a.timestamp - clockSkew.skew).build();\n    }\n  }\n  if (annotations == null)   return span;\n  long first=annotations[0].timestamp;\n  long last=annotations[length - 1].timestamp;\n  long duration=last - first;\n  return new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 103
      },
      "nodeContext" : "return new Span.Builder(span).timestamp(first).duration(duration).annotations(annotations).build();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    },
    "tokenLength" : 9,
    "type" : "io.zipkin.Span.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 83,
    "startLineNumber" : 90,
    "startColumnNumber" : 11,
    "endLineNumber" : 90,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}