{
  "id" : 2,
  "expression" : "subscription == null",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/main/java/org/apache/pulsar/broker/transaction/pendingack/impl/MLPendingAckStoreProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subscription == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 45,
      "startColumnNumber" : 12,
      "endLineNumber" : 45,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (subscription == null) {\n  pendingAckStoreFuture.completeExceptionally(new TransactionPendingAckStoreProviderException(\"The subscription is null.\"));\n  return pendingAckStoreFuture;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2717,
        "startLineNumber" : 42,
        "startColumnNumber" : 102,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CompletableFuture<PendingAckStore> pendingAckStoreFuture=new CompletableFuture<>();\n  if (subscription == null) {\n    pendingAckStoreFuture.completeExceptionally(new TransactionPendingAckStoreProviderException(\"The subscription is null.\"));\n    return pendingAckStoreFuture;\n  }\n  PersistentTopic originPersistentTopic=(PersistentTopic)subscription.getTopic();\n  String pendingAckTopicName=MLPendingAckStore.getTransactionPendingAckStoreSuffix(originPersistentTopic.getName(),subscription.getName());\n  originPersistentTopic.getBrokerService().getManagedLedgerFactory().asyncOpen(TopicName.get(pendingAckTopicName).getPersistenceNamingEncoding(),originPersistentTopic.getManagedLedger().getConfig(),new AsyncCallbacks.OpenLedgerCallback(){\n    @Override public void openLedgerComplete(    ManagedLedger ledger,    Object ctx){\n      ledger.asyncOpenCursor(MLPendingAckStore.getTransactionPendingAckStoreCursorName(),InitialPosition.Earliest,new AsyncCallbacks.OpenCursorCallback(){\n        @Override public void openCursorComplete(        ManagedCursor cursor,        Object ctx){\n          pendingAckStoreFuture.complete(new MLPendingAckStore(ledger,cursor,subscription.getCursor()));\n        }\n        @Override public void openCursorFailed(        ManagedLedgerException exception,        Object ctx){\n          log.error(\"Open MLPendingAckStore cursor failed.\",exception);\n          pendingAckStoreFuture.completeExceptionally(exception);\n        }\n      }\n,null);\n    }\n    @Override public void openLedgerFailed(    ManagedLedgerException exception,    Object ctx){\n      log.error(\"Open MLPendingAckStore managedLedger failed.\",exception);\n      pendingAckStoreFuture.completeExceptionally(exception);\n    }\n  }\n,() -> true,null);\n  return pendingAckStoreFuture;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 194,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2829,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CompletableFuture<PendingAckStore> newPendingAckStore(PersistentSubscription subscription){\n  CompletableFuture<PendingAckStore> pendingAckStoreFuture=new CompletableFuture<>();\n  if (subscription == null) {\n    pendingAckStoreFuture.completeExceptionally(new TransactionPendingAckStoreProviderException(\"The subscription is null.\"));\n    return pendingAckStoreFuture;\n  }\n  PersistentTopic originPersistentTopic=(PersistentTopic)subscription.getTopic();\n  String pendingAckTopicName=MLPendingAckStore.getTransactionPendingAckStoreSuffix(originPersistentTopic.getName(),subscription.getName());\n  originPersistentTopic.getBrokerService().getManagedLedgerFactory().asyncOpen(TopicName.get(pendingAckTopicName).getPersistenceNamingEncoding(),originPersistentTopic.getManagedLedger().getConfig(),new AsyncCallbacks.OpenLedgerCallback(){\n    @Override public void openLedgerComplete(    ManagedLedger ledger,    Object ctx){\n      ledger.asyncOpenCursor(MLPendingAckStore.getTransactionPendingAckStoreCursorName(),InitialPosition.Earliest,new AsyncCallbacks.OpenCursorCallback(){\n        @Override public void openCursorComplete(        ManagedCursor cursor,        Object ctx){\n          pendingAckStoreFuture.complete(new MLPendingAckStore(ledger,cursor,subscription.getCursor()));\n        }\n        @Override public void openCursorFailed(        ManagedLedgerException exception,        Object ctx){\n          log.error(\"Open MLPendingAckStore cursor failed.\",exception);\n          pendingAckStoreFuture.completeExceptionally(exception);\n        }\n      }\n,null);\n    }\n    @Override public void openLedgerFailed(    ManagedLedgerException exception,    Object ctx){\n      log.error(\"Open MLPendingAckStore managedLedger failed.\",exception);\n      pendingAckStoreFuture.completeExceptionally(exception);\n    }\n  }\n,() -> true,null);\n  return pendingAckStoreFuture;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (subscription == null) {\n  pendingAckStoreFuture.completeExceptionally(new TransactionPendingAckStoreProviderException(\"The subscription is null.\"));\n  return pendingAckStoreFuture;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 45,
    "startColumnNumber" : 12,
    "endLineNumber" : 45,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}