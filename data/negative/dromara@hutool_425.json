{
  "id" : 425,
  "expression" : "SmUtil.sm2()",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-crypto/src/test/java/cn/hutool/crypto/test/asymmetric/SM2Test.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SmUtil.sm2()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 64,
      "startColumnNumber" : 18,
      "endLineNumber" : 64,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 30
      },
      "nodeContext" : "sm2=SmUtil.sm2()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 31
      },
      "nodeContext" : "final SM2 sm2=SmUtil.sm2();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 63,
        "startColumnNumber" : 23,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final SM2 sm2=SmUtil.sm2();\n  Assert.assertNotNull(sm2.getPrivateKey());\n  Assert.assertNotNull(sm2.getPrivateKeyBase64());\n  Assert.assertNotNull(sm2.getPublicKey());\n  Assert.assertNotNull(sm2.getPrivateKeyBase64());\n  byte[] encrypt=sm2.encrypt(StrUtil.bytes(\"我是一段测试aaaa\",CharsetUtil.CHARSET_UTF_8),KeyType.PublicKey);\n  byte[] decrypt=sm2.decrypt(encrypt,KeyType.PrivateKey);\n  Assert.assertEquals(\"我是一段测试aaaa\",StrUtil.str(decrypt,CharsetUtil.CHARSET_UTF_8));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 554,
        "startLineNumber" : 62,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void sm2Test(){\n  final SM2 sm2=SmUtil.sm2();\n  Assert.assertNotNull(sm2.getPrivateKey());\n  Assert.assertNotNull(sm2.getPrivateKeyBase64());\n  Assert.assertNotNull(sm2.getPublicKey());\n  Assert.assertNotNull(sm2.getPrivateKeyBase64());\n  byte[] encrypt=sm2.encrypt(StrUtil.bytes(\"我是一段测试aaaa\",CharsetUtil.CHARSET_UTF_8),KeyType.PublicKey);\n  byte[] decrypt=sm2.decrypt(encrypt,KeyType.PrivateKey);\n  Assert.assertEquals(\"我是一段测试aaaa\",StrUtil.str(decrypt,CharsetUtil.CHARSET_UTF_8));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 88,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 31
      },
      "nodeContext" : "final SM2 sm2=SmUtil.sm2();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "cn.hutool.crypto.asymmetric.SM2"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 64,
    "startColumnNumber" : 18,
    "endLineNumber" : 64,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}