{
  "id" : 431,
  "expression" : "\"\\\"中国\\\"\"",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/JSONTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\\"中国\\\"\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 54,
      "startColumnNumber" : 45,
      "endLineNumber" : 54,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 54,
        "startColumnNumber" : 34,
        "endLineNumber" : 54,
        "endColumnNumber" : 54
      },
      "nodeContext" : "JSON.parse(\"\\\"中国\\\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 54,
        "startColumnNumber" : 34,
        "endLineNumber" : 54,
        "endColumnNumber" : 65
      },
      "nodeContext" : "JSON.parse(\"\\\"中国\\\"\").toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(\"中国\",JSON.parse(\"\\\"中国\\\"\").toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(\"中国\",JSON.parse(\"\\\"中国\\\"\").toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 972,
        "startLineNumber" : 43,
        "startColumnNumber" : 47,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(\"\",JSON.parse(\"\\\"\\\"\").toString());\n  Assert.assertEquals(\"3\",JSON.parse(\"\\\"3\\\"\").toString());\n  Assert.assertEquals(\"34\",JSON.parse(\"\\\"34\\\"\").toString());\n  Assert.assertEquals(\"3\\\\4\",JSON.parse(\"\\\"3\\\\\\\\4\\\"\").toString());\n  Assert.assertEquals(\"3\\\"4\",JSON.parse(\"\\\"3\\\\\\\"4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\b4\",JSON.parse(\"\\\"3\\\\\\\\b4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\f4\",JSON.parse(\"\\\"3\\\\\\\\f4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\n4\",JSON.parse(\"\\\"3\\\\\\\\n4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\r4\",JSON.parse(\"\\\"3\\\\\\\\r4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\t4\",JSON.parse(\"\\\"3\\\\\\\\t4\\\"\").toString());\n  Assert.assertEquals(\"中国\",JSON.parse(\"\\\"中国\\\"\").toString());\n  Assert.assertEquals(\"中国\",JSON.parse(\"\\\"\\\\u4E2D\\\\u56FD\\\"\").toString());\n  Assert.assertEquals(\"\\u001F\",JSON.parse(\"\\\"\\\\u001F\\\"\").toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_string() throws Exception {\n  Assert.assertEquals(\"\",JSON.parse(\"\\\"\\\"\").toString());\n  Assert.assertEquals(\"3\",JSON.parse(\"\\\"3\\\"\").toString());\n  Assert.assertEquals(\"34\",JSON.parse(\"\\\"34\\\"\").toString());\n  Assert.assertEquals(\"3\\\\4\",JSON.parse(\"\\\"3\\\\\\\\4\\\"\").toString());\n  Assert.assertEquals(\"3\\\"4\",JSON.parse(\"\\\"3\\\\\\\"4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\b4\",JSON.parse(\"\\\"3\\\\\\\\b4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\f4\",JSON.parse(\"\\\"3\\\\\\\\f4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\n4\",JSON.parse(\"\\\"3\\\\\\\\n4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\r4\",JSON.parse(\"\\\"3\\\\\\\\r4\\\"\").toString());\n  Assert.assertEquals(\"3\\\\t4\",JSON.parse(\"\\\"3\\\\\\\\t4\\\"\").toString());\n  Assert.assertEquals(\"中国\",JSON.parse(\"\\\"中国\\\"\").toString());\n  Assert.assertEquals(\"中国\",JSON.parse(\"\\\"\\\\u4E2D\\\\u56FD\\\"\").toString());\n  Assert.assertEquals(\"\\u001F\",JSON.parse(\"\\\"\\\\u001F\\\"\").toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Assert.assertEquals(\"中国\",JSON.parse(\"\\\"中国\\\"\").toString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 54,
    "startColumnNumber" : 45,
    "endLineNumber" : 54,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}