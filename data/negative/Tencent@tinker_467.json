{
  "id" : 467,
  "expression" : "!SharePatchFileUtil.isLegalFile(dexFile)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!SharePatchFileUtil.isLegalFile(dexFile)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 271,
      "startColumnNumber" : 16,
      "endLineNumber" : 271,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 271,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!SharePatchFileUtil.isLegalFile(dexFile)) {\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());\n  ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1239,
        "startLineNumber" : 268,
        "startColumnNumber" : 43,
        "endLineNumber" : 290,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  File dexFile=new File(dexDirectory + name);\n  if (!SharePatchFileUtil.isLegalFile(dexFile)) {\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);\n    return false;\n  }\n  File dexOptFile=new File(SharePatchFileUtil.optimizedPathFor(dexFile,optimizeDexDirectoryFile));\n  if (!SharePatchFileUtil.isLegalFile(dexOptFile)) {\n    if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(dexOptFile)) {\n      continue;\n    }\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexOptFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST);\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 268,
        "startColumnNumber" : 8,
        "endLineNumber" : 290,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String name : dexes.keySet()) {\n  File dexFile=new File(dexDirectory + name);\n  if (!SharePatchFileUtil.isLegalFile(dexFile)) {\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);\n    return false;\n  }\n  File dexOptFile=new File(SharePatchFileUtil.optimizedPathFor(dexFile,optimizeDexDirectoryFile));\n  if (!SharePatchFileUtil.isLegalFile(dexOptFile)) {\n    if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(dexOptFile)) {\n      continue;\n    }\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexOptFile.getAbsolutePath());\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST);\n    return false;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 208,
        "startColumnNumber" : 128,
        "endLineNumber" : 295,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String meta=securityCheck.getMetaContentMap().get(DEX_MEAT_FILE);\n  if (meta == null) {\n    return true;\n  }\n  LOAD_DEX_LIST.clear();\n  classNDexInfo.clear();\n  ArrayList<ShareDexDiffPatchInfo> allDexInfo=new ArrayList<>();\n  ShareDexDiffPatchInfo.parseDexDiffPatchInfo(meta,allDexInfo);\n  if (allDexInfo.isEmpty()) {\n    return true;\n  }\n  HashMap<String,String> dexes=new HashMap<>();\n  ShareDexDiffPatchInfo testInfo=null;\n  for (  ShareDexDiffPatchInfo info : allDexInfo) {\n    if (isJustArtSupportDex(info)) {\n      continue;\n    }\n    if (!ShareDexDiffPatchInfo.checkDexDiffPatchInfo(info)) {\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n      return false;\n    }\n    if (isVmArt && info.rawName.startsWith(ShareConstants.TEST_DEX_NAME)) {\n      testInfo=info;\n    }\n else     if (isVmArt && ShareConstants.CLASS_N_PATTERN.matcher(info.realName).matches()) {\n      classNDexInfo.add(info);\n    }\n else {\n      dexes.put(info.realName,getInfoMd5(info));\n      LOAD_DEX_LIST.add(info);\n    }\n  }\n  if (isVmArt && (testInfo != null || !classNDexInfo.isEmpty())) {\n    if (testInfo != null) {\n      classNDexInfo.add(ShareTinkerInternals.changeTestDexToClassN(testInfo,classNDexInfo.size() + 1));\n    }\n    dexes.put(ShareConstants.CLASS_N_APK_NAME,\"\");\n  }\n  String dexDirectory=directory + \"/\" + DEX_PATH+ \"/\";\n  File dexDir=new File(dexDirectory);\n  if (!dexDir.exists() || !dexDir.isDirectory()) {\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_DIRECTORY_NOT_EXIST);\n    return false;\n  }\n  String optimizeDexDirectory=directory + \"/\" + oatDir+ \"/\";\n  File optimizeDexDirectoryFile=new File(optimizeDexDirectory);\n  for (  String name : dexes.keySet()) {\n    File dexFile=new File(dexDirectory + name);\n    if (!SharePatchFileUtil.isLegalFile(dexFile)) {\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);\n      return false;\n    }\n    File dexOptFile=new File(SharePatchFileUtil.optimizedPathFor(dexFile,optimizeDexDirectoryFile));\n    if (!SharePatchFileUtil.isLegalFile(dexOptFile)) {\n      if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(dexOptFile)) {\n        continue;\n      }\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexOptFile.getAbsolutePath());\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST);\n      return false;\n    }\n  }\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_DEXES_PATH,dexes);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 365,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4116,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 295,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * all the dex files in meta file exist? fast check, only check whether exist\n * @return boolean\n */\npublic static boolean checkComplete(String directory,ShareSecurityCheck securityCheck,String oatDir,Intent intentResult){\n  String meta=securityCheck.getMetaContentMap().get(DEX_MEAT_FILE);\n  if (meta == null) {\n    return true;\n  }\n  LOAD_DEX_LIST.clear();\n  classNDexInfo.clear();\n  ArrayList<ShareDexDiffPatchInfo> allDexInfo=new ArrayList<>();\n  ShareDexDiffPatchInfo.parseDexDiffPatchInfo(meta,allDexInfo);\n  if (allDexInfo.isEmpty()) {\n    return true;\n  }\n  HashMap<String,String> dexes=new HashMap<>();\n  ShareDexDiffPatchInfo testInfo=null;\n  for (  ShareDexDiffPatchInfo info : allDexInfo) {\n    if (isJustArtSupportDex(info)) {\n      continue;\n    }\n    if (!ShareDexDiffPatchInfo.checkDexDiffPatchInfo(info)) {\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n      return false;\n    }\n    if (isVmArt && info.rawName.startsWith(ShareConstants.TEST_DEX_NAME)) {\n      testInfo=info;\n    }\n else     if (isVmArt && ShareConstants.CLASS_N_PATTERN.matcher(info.realName).matches()) {\n      classNDexInfo.add(info);\n    }\n else {\n      dexes.put(info.realName,getInfoMd5(info));\n      LOAD_DEX_LIST.add(info);\n    }\n  }\n  if (isVmArt && (testInfo != null || !classNDexInfo.isEmpty())) {\n    if (testInfo != null) {\n      classNDexInfo.add(ShareTinkerInternals.changeTestDexToClassN(testInfo,classNDexInfo.size() + 1));\n    }\n    dexes.put(ShareConstants.CLASS_N_APK_NAME,\"\");\n  }\n  String dexDirectory=directory + \"/\" + DEX_PATH+ \"/\";\n  File dexDir=new File(dexDirectory);\n  if (!dexDir.exists() || !dexDir.isDirectory()) {\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_DIRECTORY_NOT_EXIST);\n    return false;\n  }\n  String optimizeDexDirectory=directory + \"/\" + oatDir+ \"/\";\n  File optimizeDexDirectoryFile=new File(optimizeDexDirectory);\n  for (  String name : dexes.keySet()) {\n    File dexFile=new File(dexDirectory + name);\n    if (!SharePatchFileUtil.isLegalFile(dexFile)) {\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);\n      return false;\n    }\n    File dexOptFile=new File(SharePatchFileUtil.optimizedPathFor(dexFile,optimizeDexDirectoryFile));\n    if (!SharePatchFileUtil.isLegalFile(dexOptFile)) {\n      if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(dexOptFile)) {\n        continue;\n      }\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexOptFile.getAbsolutePath());\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_OPT_FILE_NOT_EXIST);\n      return false;\n    }\n  }\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_DEXES_PATH,dexes);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 387,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 271,
        "startColumnNumber" : 12,
        "endLineNumber" : 275,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!SharePatchFileUtil.isLegalFile(dexFile)) {\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_DEX_PATH,dexFile.getAbsolutePath());\n  ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_FILE_NOT_EXIST);\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 271,
    "startColumnNumber" : 16,
    "endLineNumber" : 271,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}