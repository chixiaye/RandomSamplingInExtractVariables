{
  "id" : 446,
  "expression" : "System.currentTimeMillis() - beginStartTime",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/remoting/src/main/java/org/apache/rocketmq/remoting/netty/NettyRemotingAbstract.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System.currentTimeMillis() - beginStartTime",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 517,
      "startColumnNumber" : 28,
      "endLineNumber" : 517,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 517,
        "startColumnNumber" : 17,
        "endLineNumber" : 517,
        "endColumnNumber" : 71
      },
      "nodeContext" : "costTime=System.currentTimeMillis() - beginStartTime",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 517,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 72
      },
      "nodeContext" : "long costTime=System.currentTimeMillis() - beginStartTime;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2347,
        "startLineNumber" : 515,
        "startColumnNumber" : 22,
        "endLineNumber" : 556,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SemaphoreReleaseOnlyOnce once=new SemaphoreReleaseOnlyOnce(semaphoreAsync);\n  long costTime=System.currentTimeMillis() - beginStartTime;\n  if (timeoutMillis < costTime) {\n    once.release();\n    throw new RemotingTimeoutException(\"InvokeAsyncImpl call timeout\");\n  }\n  final int opaque=request.getOpaque();\n  final ResponseFuture responseFuture=new ResponseFuture(currentChannel,opaque,timeoutMillis,invokeCallback,once);\n  responseTable.put(opaque,responseFuture);\n  asyncExecuteService.submit(new Runnable(){\n    @Override public void run(){\n      Channel channel=currentChannel;\n      final String remotingAddr=RemotingHelper.parseChannelRemoteAddr(channel);\n      try {\n        if (channel == null) {\n          RemotingChannel remotingChannel=getAndCreateChannel(addr,timeoutMillis);\n          if (remotingChannel != null && remotingChannel instanceof NettyChannelImpl) {\n            channel=((NettyChannelImpl)remotingChannel).getChannel();\n          }\n          responseFuture.setProcessChannel(channel);\n        }\n        channel.writeAndFlush(request).addListener(new ChannelFutureListener(){\n          @Override public void operationComplete(          ChannelFuture f) throws Exception {\n            if (f.isSuccess()) {\n              responseFuture.setSendRequestOK(true);\n              return;\n            }\n            requestFail(opaque);\n            log.warn(\"send a request command to channel <{}> failed.\",remotingAddr);\n          }\n        }\n);\n      }\n catch (      Exception ex) {\n        responseFuture.release();\n        requestFail(opaque);\n        log.warn(\"send a request command to channel <\" + RemotingHelper.parseChannelRemoteAddr(channel) + \"> Exception\",ex);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2989,
        "startLineNumber" : 515,
        "startColumnNumber" : 8,
        "endLineNumber" : 569,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (acquired) {\n  SemaphoreReleaseOnlyOnce once=new SemaphoreReleaseOnlyOnce(semaphoreAsync);\n  long costTime=System.currentTimeMillis() - beginStartTime;\n  if (timeoutMillis < costTime) {\n    once.release();\n    throw new RemotingTimeoutException(\"InvokeAsyncImpl call timeout\");\n  }\n  final int opaque=request.getOpaque();\n  final ResponseFuture responseFuture=new ResponseFuture(currentChannel,opaque,timeoutMillis,invokeCallback,once);\n  responseTable.put(opaque,responseFuture);\n  asyncExecuteService.submit(new Runnable(){\n    @Override public void run(){\n      Channel channel=currentChannel;\n      final String remotingAddr=RemotingHelper.parseChannelRemoteAddr(channel);\n      try {\n        if (channel == null) {\n          RemotingChannel remotingChannel=getAndCreateChannel(addr,timeoutMillis);\n          if (remotingChannel != null && remotingChannel instanceof NettyChannelImpl) {\n            channel=((NettyChannelImpl)remotingChannel).getChannel();\n          }\n          responseFuture.setProcessChannel(channel);\n        }\n        channel.writeAndFlush(request).addListener(new ChannelFutureListener(){\n          @Override public void operationComplete(          ChannelFuture f) throws Exception {\n            if (f.isSuccess()) {\n              responseFuture.setSendRequestOK(true);\n              return;\n            }\n            requestFail(opaque);\n            log.warn(\"send a request command to channel <{}> failed.\",remotingAddr);\n          }\n        }\n);\n      }\n catch (      Exception ex) {\n        responseFuture.release();\n        requestFail(opaque);\n        log.warn(\"send a request command to channel <\" + RemotingHelper.parseChannelRemoteAddr(channel) + \"> Exception\",ex);\n      }\n    }\n  }\n);\n}\n else {\n  if (timeoutMillis <= 0) {\n    throw new RemotingTooMuchRequestException(\"invokeAsyncImpl invoke too fast\");\n  }\n else {\n    String info=String.format(\"invokeAsyncImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d\",timeoutMillis,this.semaphoreAsync.getQueueLength(),this.semaphoreAsync.availablePermits());\n    log.warn(info);\n    throw new RemotingTimeoutException(info);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 248,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3161,
        "startLineNumber" : 512,
        "startColumnNumber" : 95,
        "endLineNumber" : 570,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long beginStartTime=System.currentTimeMillis();\n  boolean acquired=semaphoreAsync.tryAcquire(timeoutMillis,TimeUnit.MILLISECONDS);\n  if (acquired) {\n    SemaphoreReleaseOnlyOnce once=new SemaphoreReleaseOnlyOnce(semaphoreAsync);\n    long costTime=System.currentTimeMillis() - beginStartTime;\n    if (timeoutMillis < costTime) {\n      once.release();\n      throw new RemotingTimeoutException(\"InvokeAsyncImpl call timeout\");\n    }\n    final int opaque=request.getOpaque();\n    final ResponseFuture responseFuture=new ResponseFuture(currentChannel,opaque,timeoutMillis,invokeCallback,once);\n    responseTable.put(opaque,responseFuture);\n    asyncExecuteService.submit(new Runnable(){\n      @Override public void run(){\n        Channel channel=currentChannel;\n        final String remotingAddr=RemotingHelper.parseChannelRemoteAddr(channel);\n        try {\n          if (channel == null) {\n            RemotingChannel remotingChannel=getAndCreateChannel(addr,timeoutMillis);\n            if (remotingChannel != null && remotingChannel instanceof NettyChannelImpl) {\n              channel=((NettyChannelImpl)remotingChannel).getChannel();\n            }\n            responseFuture.setProcessChannel(channel);\n          }\n          channel.writeAndFlush(request).addListener(new ChannelFutureListener(){\n            @Override public void operationComplete(            ChannelFuture f) throws Exception {\n              if (f.isSuccess()) {\n                responseFuture.setSendRequestOK(true);\n                return;\n              }\n              requestFail(opaque);\n              log.warn(\"send a request command to channel <{}> failed.\",remotingAddr);\n            }\n          }\n);\n        }\n catch (        Exception ex) {\n          responseFuture.release();\n          requestFail(opaque);\n          log.warn(\"send a request command to channel <\" + RemotingHelper.parseChannelRemoteAddr(channel) + \"> Exception\",ex);\n        }\n      }\n    }\n);\n  }\n else {\n    if (timeoutMillis <= 0) {\n      throw new RemotingTooMuchRequestException(\"invokeAsyncImpl invoke too fast\");\n    }\n else {\n      String info=String.format(\"invokeAsyncImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d\",timeoutMillis,this.semaphoreAsync.getQueueLength(),this.semaphoreAsync.availablePermits());\n      log.warn(info);\n      throw new RemotingTimeoutException(info);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 509,
        "startColumnNumber" : 4,
        "endLineNumber" : 570,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void invokeAsyncImpl(final String addr,final Channel currentChannel,final RemotingCommand request,final long timeoutMillis,final InvokeCallback invokeCallback) throws InterruptedException, RemotingTooMuchRequestException, RemotingTimeoutException {\n  final long beginStartTime=System.currentTimeMillis();\n  boolean acquired=semaphoreAsync.tryAcquire(timeoutMillis,TimeUnit.MILLISECONDS);\n  if (acquired) {\n    SemaphoreReleaseOnlyOnce once=new SemaphoreReleaseOnlyOnce(semaphoreAsync);\n    long costTime=System.currentTimeMillis() - beginStartTime;\n    if (timeoutMillis < costTime) {\n      once.release();\n      throw new RemotingTimeoutException(\"InvokeAsyncImpl call timeout\");\n    }\n    final int opaque=request.getOpaque();\n    final ResponseFuture responseFuture=new ResponseFuture(currentChannel,opaque,timeoutMillis,invokeCallback,once);\n    responseTable.put(opaque,responseFuture);\n    asyncExecuteService.submit(new Runnable(){\n      @Override public void run(){\n        Channel channel=currentChannel;\n        final String remotingAddr=RemotingHelper.parseChannelRemoteAddr(channel);\n        try {\n          if (channel == null) {\n            RemotingChannel remotingChannel=getAndCreateChannel(addr,timeoutMillis);\n            if (remotingChannel != null && remotingChannel instanceof NettyChannelImpl) {\n              channel=((NettyChannelImpl)remotingChannel).getChannel();\n            }\n            responseFuture.setProcessChannel(channel);\n          }\n          channel.writeAndFlush(request).addListener(new ChannelFutureListener(){\n            @Override public void operationComplete(            ChannelFuture f) throws Exception {\n              if (f.isSuccess()) {\n                responseFuture.setSendRequestOK(true);\n                return;\n              }\n              requestFail(opaque);\n              log.warn(\"send a request command to channel <{}> failed.\",remotingAddr);\n            }\n          }\n);\n        }\n catch (        Exception ex) {\n          responseFuture.release();\n          requestFail(opaque);\n          log.warn(\"send a request command to channel <\" + RemotingHelper.parseChannelRemoteAddr(channel) + \"> Exception\",ex);\n        }\n      }\n    }\n);\n  }\n else {\n    if (timeoutMillis <= 0) {\n      throw new RemotingTooMuchRequestException(\"invokeAsyncImpl invoke too fast\");\n    }\n else {\n      String info=String.format(\"invokeAsyncImpl tryAcquire semaphore timeout, %dms, waiting thread nums: %d semaphoreAsyncValue: %d\",timeoutMillis,this.semaphoreAsync.getQueueLength(),this.semaphoreAsync.availablePermits());\n      log.warn(info);\n      throw new RemotingTimeoutException(info);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 517,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 72
      },
      "nodeContext" : "long costTime=System.currentTimeMillis() - beginStartTime;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 517,
    "startColumnNumber" : 28,
    "endLineNumber" : 517,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}