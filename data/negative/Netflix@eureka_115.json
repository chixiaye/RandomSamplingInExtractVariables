{
  "id" : 115,
  "expression" : "this",
  "projectName" : "Netflix@eureka",
  "commitID" : "22bc1adac3dcb2b896e853ba0febf2a649755e57",
  "filePath" : "eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 91,
      "startColumnNumber" : 8,
      "endLineNumber" : 91,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 23
      },
      "nodeContext" : "this.serviceUrl",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 45
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 46
      },
      "nodeContext" : "this.serviceUrl=serviceUrl.intern();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 92,
      "startColumnNumber" : 8,
      "endLineNumber" : 92,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 17
      },
      "nodeContext" : "this.name",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 93,
      "startColumnNumber" : 8,
      "endLineNumber" : 93,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 29
      },
      "nodeContext" : "this.heartBeatBatcher",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 94,
      "startColumnNumber" : 8,
      "endLineNumber" : 94,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 26
      },
      "nodeContext" : "this.statusBatcher",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 80
      },
      "nodeContext" : "this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 95,
      "startColumnNumber" : 8,
      "endLineNumber" : 95,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 29
      },
      "nodeContext" : "this.asgStatusBatcher",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 91
      },
      "nodeContext" : "this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 92
      },
      "nodeContext" : "this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 92
      },
      "nodeContext" : "this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 96,
      "startColumnNumber" : 8,
      "endLineNumber" : 96,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 28
      },
      "nodeContext" : "this.registerBatcher",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 77
      },
      "nodeContext" : "this.registerBatcher=getBatcher(serviceUrl,Action.Register.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 97,
      "startColumnNumber" : 8,
      "endLineNumber" : 97,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 26
      },
      "nodeContext" : "this.cancelBatcher",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 73
      },
      "nodeContext" : "this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 74
      },
      "nodeContext" : "this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 74
      },
      "nodeContext" : "this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 99,
      "startColumnNumber" : 22,
      "endLineNumber" : 99,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 99,
        "startColumnNumber" : 22,
        "endLineNumber" : 99,
        "endColumnNumber" : 37
      },
      "nodeContext" : "this.serviceUrl",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1148,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this.serviceUrl) {\n  if (jerseyApacheClient == null) {\n    try {\n      String hostname;\n      try {\n        hostname=new URL(serviceUrl).getHost();\n      }\n catch (      MalformedURLException e) {\n        hostname=serviceUrl;\n      }\n      String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n      jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n      jerseyApacheClient=jerseyClient.getClient();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 87,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 99,
        "startColumnNumber" : 22,
        "endLineNumber" : 99,
        "endColumnNumber" : 37
      },
      "nodeContext" : "this.serviceUrl",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 125,
      "startColumnNumber" : 52,
      "endLineNumber" : 125,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Monitors.registerObject(serviceUrlHost,this)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Monitors.registerObject(serviceUrlHost,this);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String serviceUrlHost=new URL(serviceUrl).getHost();\n  Monitors.registerObject(serviceUrlHost,this);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  String serviceUrlHost=new URL(serviceUrl).getHost();\n  Monitors.registerObject(serviceUrlHost,this);\n}\n catch (Throwable e) {\n  logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1996,
        "startLineNumber" : 90,
        "startColumnNumber" : 45,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 209,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2037,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public PeerEurekaNode(String serviceUrl){\n  this.serviceUrl=serviceUrl.intern();\n  this.name=getClass().getSimpleName() + \": \" + serviceUrl+ \"apps/: \";\n  this.heartBeatBatcher=getBatcher(serviceUrl,Action.Heartbeat.name());\n  this.statusBatcher=getBatcher(serviceUrl,Action.StatusUpdate.name());\n  this.asgStatusBatcher=getBatcher(serviceUrl,\"ASG_\" + Action.StatusUpdate.name());\n  this.registerBatcher=getBatcher(serviceUrl,Action.Register.name());\n  this.cancelBatcher=getBatcher(serviceUrl,Action.Cancel.name());\nsynchronized (this.serviceUrl) {\n    if (jerseyApacheClient == null) {\n      try {\n        String hostname;\n        try {\n          hostname=new URL(serviceUrl).getHost();\n        }\n catch (        MalformedURLException e) {\n          hostname=serviceUrl;\n        }\n        String jerseyClientName=\"Discovery-PeerNodeClient-\" + hostname;\n        jerseyClient=EurekaJerseyClient.createJerseyClient(jerseyClientName,config.getPeerNodeConnectTimeoutMs(),config.getPeerNodeReadTimeoutMs(),config.getPeerNodeTotalConnections(),config.getPeerNodeTotalConnectionsPerHost(),config.getPeerNodeConnectionIdleTimeoutSeconds());\n        jerseyApacheClient=jerseyClient.getClient();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(\"Cannot Create new Replica Node :\" + name);\n      }\n    }\n  }\n  try {\n    String serviceUrlHost=new URL(serviceUrl).getHost();\n    Monitors.registerObject(serviceUrlHost,this);\n  }\n catch (  Throwable e) {\n    logger.error(\"Cannot register monitors for Peer eureka node :\" + serviceUrl,e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Monitors.registerObject(serviceUrlHost,this);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka.cluster.PeerEurekaNode"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 91,
    "startColumnNumber" : 8,
    "endLineNumber" : 91,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 92,
    "startColumnNumber" : 8,
    "endLineNumber" : 92,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 93,
    "startColumnNumber" : 8,
    "endLineNumber" : 93,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 94,
    "startColumnNumber" : 8,
    "endLineNumber" : 94,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 95,
    "startColumnNumber" : 8,
    "endLineNumber" : 95,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 96,
    "startColumnNumber" : 8,
    "endLineNumber" : 96,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 97,
    "startColumnNumber" : 8,
    "endLineNumber" : 97,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 99,
    "startColumnNumber" : 22,
    "endLineNumber" : 99,
    "endColumnNumber" : 26
  }, {
    "charLength" : 4,
    "startLineNumber" : 125,
    "startColumnNumber" : 52,
    "endLineNumber" : 125,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  } ]
}