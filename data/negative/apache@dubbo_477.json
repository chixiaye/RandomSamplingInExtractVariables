{
  "id" : 477,
  "expression" : "MigrationStep.class",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/client/migration/MigrationRuleHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MigrationStep.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 62,
      "startColumnNumber" : 32,
      "endLineNumber" : 62,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 62,
        "startColumnNumber" : 19,
        "endLineNumber" : 62,
        "endColumnNumber" : 144
      },
      "nodeContext" : "Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 144
      },
      "nodeContext" : "step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 145
      },
      "nodeContext" : "step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 61,
        "startColumnNumber" : 40,
        "endLineNumber" : 63,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1748,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (rule == MigrationRule.INIT) {\n  step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()));\n}\n else {\n  try {\n    String serviceKey=consumerURL.getDisplayServiceKey();\n    Set<String> apps=writableMetadataService.getCachedMapping(consumerURL);\n    if (CollectionUtils.isNotEmpty(apps)) {\n      if (CollectionUtils.isEmpty(rule.getTargetIps())) {\n        setMigrationRule(rule);\n        step=getMigrationStep(rule,step,serviceKey,apps);\n        threshold=getMigrationThreshold(rule,threshold,serviceKey,apps);\n      }\n else {\n        if (rule.getTargetIps().contains(consumerURL.getHost())) {\n          setMigrationRule(rule);\n          step=getMigrationStep(rule,step,serviceKey,apps);\n          threshold=getMigrationThreshold(rule,threshold,serviceKey,apps);\n        }\n else {\n          setMigrationRule(null);\n          logger.info(\"New migration rule ignored and previous migration rule cleared, new target ips \" + rule.getTargetIps() + \" and local ip \"+ consumerURL.getHost()+ \" do not match\");\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    logger.error(\"Failed to get step and threshold info from rule: \" + rule,e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2326,
        "startLineNumber" : 49,
        "startColumnNumber" : 79,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (migrationInvoker instanceof ServiceDiscoveryMigrationInvoker) {\n    if (!isCallback) {\n      initInvoker(MigrationStep.FORCE_APPLICATION,1.0f);\n    }\n else {\n      migrationInvoker.refreshServiceDiscoveryInvokerOnMappingCallback(true);\n    }\n    return;\n  }\n  MigrationStep step=MigrationStep.INTERFACE_FIRST;\n  Float threshold=-1f;\n  if (rule == MigrationRule.INIT) {\n    step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()));\n  }\n else {\n    try {\n      String serviceKey=consumerURL.getDisplayServiceKey();\n      Set<String> apps=writableMetadataService.getCachedMapping(consumerURL);\n      if (CollectionUtils.isNotEmpty(apps)) {\n        if (CollectionUtils.isEmpty(rule.getTargetIps())) {\n          setMigrationRule(rule);\n          step=getMigrationStep(rule,step,serviceKey,apps);\n          threshold=getMigrationThreshold(rule,threshold,serviceKey,apps);\n        }\n else {\n          if (rule.getTargetIps().contains(consumerURL.getHost())) {\n            setMigrationRule(rule);\n            step=getMigrationStep(rule,step,serviceKey,apps);\n            threshold=getMigrationThreshold(rule,threshold,serviceKey,apps);\n          }\n else {\n            setMigrationRule(null);\n            logger.info(\"New migration rule ignored and previous migration rule cleared, new target ips \" + rule.getTargetIps() + \" and local ip \"+ consumerURL.getHost()+ \" do not match\");\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n      logger.error(\"Failed to get step and threshold info from rule: \" + rule,e);\n    }\n  }\n  if (!isCallback) {\n    initInvoker(step,threshold);\n  }\n else {\n    refreshInvoker(step,threshold);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2401,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public synchronized void doMigrate(MigrationRule rule,boolean isCallback){\n  if (migrationInvoker instanceof ServiceDiscoveryMigrationInvoker) {\n    if (!isCallback) {\n      initInvoker(MigrationStep.FORCE_APPLICATION,1.0f);\n    }\n else {\n      migrationInvoker.refreshServiceDiscoveryInvokerOnMappingCallback(true);\n    }\n    return;\n  }\n  MigrationStep step=MigrationStep.INTERFACE_FIRST;\n  Float threshold=-1f;\n  if (rule == MigrationRule.INIT) {\n    step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()));\n  }\n else {\n    try {\n      String serviceKey=consumerURL.getDisplayServiceKey();\n      Set<String> apps=writableMetadataService.getCachedMapping(consumerURL);\n      if (CollectionUtils.isNotEmpty(apps)) {\n        if (CollectionUtils.isEmpty(rule.getTargetIps())) {\n          setMigrationRule(rule);\n          step=getMigrationStep(rule,step,serviceKey,apps);\n          threshold=getMigrationThreshold(rule,threshold,serviceKey,apps);\n        }\n else {\n          if (rule.getTargetIps().contains(consumerURL.getHost())) {\n            setMigrationRule(rule);\n            step=getMigrationStep(rule,step,serviceKey,apps);\n            threshold=getMigrationThreshold(rule,threshold,serviceKey,apps);\n          }\n else {\n            setMigrationRule(null);\n            logger.info(\"New migration rule ignored and previous migration rule cleared, new target ips \" + rule.getTargetIps() + \" and local ip \"+ consumerURL.getHost()+ \" do not match\");\n          }\n        }\n      }\n    }\n catch (    Exception e) {\n      logger.error(\"Failed to get step and threshold info from rule: \" + rule,e);\n    }\n  }\n  if (!isCallback) {\n    initInvoker(step,threshold);\n  }\n else {\n    refreshInvoker(step,threshold);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 215,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 145
      },
      "nodeContext" : "step=Enum.valueOf(MigrationStep.class,ConfigurationUtils.getCachedDynamicProperty(DUBBO_SERVICEDISCOVERY_MIGRATION,step.name()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.dubbo.registry.client.migration.model.MigrationStep>"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 62,
    "startColumnNumber" : 32,
    "endLineNumber" : 62,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}