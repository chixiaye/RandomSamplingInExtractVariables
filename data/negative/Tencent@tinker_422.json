{
  "id" : 422,
  "expression" : "true",
  "projectName" : "Tencent@tinker",
  "commitID" : "40c15bbab73f52238c63408df2772e45075ef921",
  "filePath" : "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 87,
      "startColumnNumber" : 19,
      "endLineNumber" : 87,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 24
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 86,
        "startColumnNumber" : 32,
        "endLineNumber" : 88,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (optFiles.isEmpty()) {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 24
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 160,
      "startColumnNumber" : 15,
      "endLineNumber" : 160,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 160,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3187,
        "startLineNumber" : 85,
        "startColumnNumber" : 84,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 311,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3267,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=optFiles.size() * 6;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  TinkerLog.i(TAG,\"dex count: %d, final wait time: %d\",optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        TinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    TinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getName(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file)) {\n      TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      TinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          TinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          if (elfFile != null) {\n            try {\n              elfFile.close();\n            }\n catch (            IOException ignore) {\n            }\n          }\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 160,
        "startColumnNumber" : 8,
        "endLineNumber" : 160,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 87,
    "startColumnNumber" : 19,
    "endLineNumber" : 87,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 160,
    "startColumnNumber" : 15,
    "endLineNumber" : 160,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}