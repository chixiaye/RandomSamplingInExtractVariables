{
  "id" : 6,
  "expression" : "\"k5\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/ResetPartitionTimeIntegrationTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"k5\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 159,
      "startColumnNumber" : 44,
      "endLineNumber" : 159,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 159,
        "startColumnNumber" : 20,
        "endLineNumber" : 159,
        "endColumnNumber" : 61
      },
      "nodeContext" : "new KeyValueTimestamp<>(\"k5\",\"v5\",4999)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 158,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 17
      },
      "nodeContext" : "Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 13
      },
      "nodeContext" : "produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 156,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 14
      },
      "nodeContext" : "produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1316,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  assertThat(lastRecordedTimestamp,is(-1L));\n  lastRecordedTimestamp=-2L;\n  kafkaStreams.close();\n  assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n  kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  assertThat(lastRecordedTimestamp,is(5000L));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1437,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  assertThat(lastRecordedTimestamp,is(-1L));\n  lastRecordedTimestamp=-2L;\n  kafkaStreams.close();\n  assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n  kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  assertThat(lastRecordedTimestamp,is(5000L));\n}\n  finally {\n  kafkaStreams.close();\n  quietlyCleanStateAfterTest(CLUSTER,kafkaStreams);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 111,
        "startColumnNumber" : 66,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String appId=\"app-\" + safeUniqueTestName(getClass(),testName);\n  final String input=\"input\";\n  final String outputRaw=\"output-raw\";\n  cleanStateBeforeTest(CLUSTER,2,input,outputRaw);\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.stream(input,Consumed.with(STRING_SERDE,STRING_SERDE)).to(outputRaw);\n  final Properties streamsConfig=new Properties();\n  streamsConfig.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG,MaxTimestampExtractor.class);\n  streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  streamsConfig.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());\n  streamsConfig.put(StreamsConfig.POLL_MS_CONFIG,Integer.toString(DEFAULT_TIMEOUT));\n  streamsConfig.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,(long)DEFAULT_TIMEOUT);\n  streamsConfig.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,processingGuarantee);\n  streamsConfig.put(StreamsConfig.STATE_DIR_CONFIG,TestUtils.tempDirectory().getPath());\n  KafkaStreams kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  try {\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    assertThat(lastRecordedTimestamp,is(-1L));\n    lastRecordedTimestamp=-2L;\n    kafkaStreams.close();\n    assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n    kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    assertThat(lastRecordedTimestamp,is(5000L));\n  }\n  finally {\n    kafkaStreams.close();\n    quietlyCleanStateAfterTest(CLUSTER,kafkaStreams);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2722,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldPreservePartitionTimeOnKafkaStreamRestart(){\n  final String appId=\"app-\" + safeUniqueTestName(getClass(),testName);\n  final String input=\"input\";\n  final String outputRaw=\"output-raw\";\n  cleanStateBeforeTest(CLUSTER,2,input,outputRaw);\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.stream(input,Consumed.with(STRING_SERDE,STRING_SERDE)).to(outputRaw);\n  final Properties streamsConfig=new Properties();\n  streamsConfig.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG,MaxTimestampExtractor.class);\n  streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  streamsConfig.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());\n  streamsConfig.put(StreamsConfig.POLL_MS_CONFIG,Integer.toString(DEFAULT_TIMEOUT));\n  streamsConfig.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,(long)DEFAULT_TIMEOUT);\n  streamsConfig.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,processingGuarantee);\n  streamsConfig.put(StreamsConfig.STATE_DIR_CONFIG,TestUtils.tempDirectory().getPath());\n  KafkaStreams kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  try {\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    assertThat(lastRecordedTimestamp,is(-1L));\n    lastRecordedTimestamp=-2L;\n    kafkaStreams.close();\n    assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n    kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    assertThat(lastRecordedTimestamp,is(5000L));\n  }\n  finally {\n    kafkaStreams.close();\n    quietlyCleanStateAfterTest(CLUSTER,kafkaStreams);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 264,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 159,
        "startColumnNumber" : 20,
        "endLineNumber" : 159,
        "endColumnNumber" : 61
      },
      "nodeContext" : "new KeyValueTimestamp<>(\"k5\",\"v5\",4999)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"k5\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 165,
      "startColumnNumber" : 44,
      "endLineNumber" : 165,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 20,
        "endLineNumber" : 165,
        "endColumnNumber" : 61
      },
      "nodeContext" : "new KeyValueTimestamp<>(\"k5\",\"v5\",4999)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 166,
        "endColumnNumber" : 17
      },
      "nodeContext" : "Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 14
      },
      "nodeContext" : "verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1316,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 169,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  assertThat(lastRecordedTimestamp,is(-1L));\n  lastRecordedTimestamp=-2L;\n  kafkaStreams.close();\n  assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n  kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  assertThat(lastRecordedTimestamp,is(5000L));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1437,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n  assertThat(lastRecordedTimestamp,is(-1L));\n  lastRecordedTimestamp=-2L;\n  kafkaStreams.close();\n  assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n  kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n  assertThat(lastRecordedTimestamp,is(5000L));\n}\n  finally {\n  kafkaStreams.close();\n  quietlyCleanStateAfterTest(CLUSTER,kafkaStreams);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 111,
        "startColumnNumber" : 66,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String appId=\"app-\" + safeUniqueTestName(getClass(),testName);\n  final String input=\"input\";\n  final String outputRaw=\"output-raw\";\n  cleanStateBeforeTest(CLUSTER,2,input,outputRaw);\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.stream(input,Consumed.with(STRING_SERDE,STRING_SERDE)).to(outputRaw);\n  final Properties streamsConfig=new Properties();\n  streamsConfig.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG,MaxTimestampExtractor.class);\n  streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  streamsConfig.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());\n  streamsConfig.put(StreamsConfig.POLL_MS_CONFIG,Integer.toString(DEFAULT_TIMEOUT));\n  streamsConfig.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,(long)DEFAULT_TIMEOUT);\n  streamsConfig.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,processingGuarantee);\n  streamsConfig.put(StreamsConfig.STATE_DIR_CONFIG,TestUtils.tempDirectory().getPath());\n  KafkaStreams kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  try {\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    assertThat(lastRecordedTimestamp,is(-1L));\n    lastRecordedTimestamp=-2L;\n    kafkaStreams.close();\n    assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n    kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    assertThat(lastRecordedTimestamp,is(5000L));\n  }\n  finally {\n    kafkaStreams.close();\n    quietlyCleanStateAfterTest(CLUSTER,kafkaStreams);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2722,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldPreservePartitionTimeOnKafkaStreamRestart(){\n  final String appId=\"app-\" + safeUniqueTestName(getClass(),testName);\n  final String input=\"input\";\n  final String outputRaw=\"output-raw\";\n  cleanStateBeforeTest(CLUSTER,2,input,outputRaw);\n  final StreamsBuilder builder=new StreamsBuilder();\n  builder.stream(input,Consumed.with(STRING_SERDE,STRING_SERDE)).to(outputRaw);\n  final Properties streamsConfig=new Properties();\n  streamsConfig.put(StreamsConfig.DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG,MaxTimestampExtractor.class);\n  streamsConfig.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  streamsConfig.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers());\n  streamsConfig.put(StreamsConfig.POLL_MS_CONFIG,Integer.toString(DEFAULT_TIMEOUT));\n  streamsConfig.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,(long)DEFAULT_TIMEOUT);\n  streamsConfig.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,processingGuarantee);\n  streamsConfig.put(StreamsConfig.STATE_DIR_CONFIG,TestUtils.tempDirectory().getPath());\n  KafkaStreams kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n  try {\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k3\",\"v3\",5000)));\n    assertThat(lastRecordedTimestamp,is(-1L));\n    lastRecordedTimestamp=-2L;\n    kafkaStreams.close();\n    assertThat(kafkaStreams.state(),is(KafkaStreams.State.NOT_RUNNING));\n    kafkaStreams=getStartedStreams(streamsConfig,builder,true);\n    produceSynchronouslyToPartitionZero(input,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    verifyOutput(outputRaw,Collections.singletonList(new KeyValueTimestamp<>(\"k5\",\"v5\",4999)));\n    assertThat(lastRecordedTimestamp,is(5000L));\n  }\n  finally {\n    kafkaStreams.close();\n    quietlyCleanStateAfterTest(CLUSTER,kafkaStreams);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 264,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 165,
        "startColumnNumber" : 20,
        "endLineNumber" : 165,
        "endColumnNumber" : 61
      },
      "nodeContext" : "new KeyValueTimestamp<>(\"k5\",\"v5\",4999)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 159,
    "startColumnNumber" : 44,
    "endLineNumber" : 159,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 165,
    "startColumnNumber" : 44,
    "endLineNumber" : 165,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}