{
  "id" : 180,
  "expression" : "\"@ToString is only supported on a class or enum.\"",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleToString.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"@ToString is only supported on a class or enum.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 49,
      "startLineNumber" : 133,
      "startColumnNumber" : 22,
      "endLineNumber" : 133,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 133,
        "startColumnNumber" : 3,
        "endLineNumber" : 133,
        "endColumnNumber" : 72
      },
      "nodeContext" : "errorNode.addError(\"@ToString is only supported on a class or enum.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 133,
        "startColumnNumber" : 3,
        "endLineNumber" : 133,
        "endColumnNumber" : 73
      },
      "nodeContext" : "errorNode.addError(\"@ToString is only supported on a class or enum.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 132,
        "startColumnNumber" : 37,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  errorNode.addError(\"@ToString is only supported on a class or enum.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (typeDecl == null || notAClass) {\n  errorNode.addError(\"@ToString is only supported on a class or enum.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1788,
        "startLineNumber" : 124,
        "startColumnNumber" : 97,
        "endLineNumber" : 175,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\n  if (typeDecl == null || notAClass) {\n    errorNode.addError(\"@ToString is only supported on a class or enum.\");\n  }\n  if (callSuper == null) {\n    try {\n      callSuper=((Boolean)ToString.class.getMethod(\"callSuper\").getDefaultValue()).booleanValue();\n    }\n catch (    Exception ignore) {\n    }\n  }\n  List<EclipseNode> nodesForToString=new ArrayList<EclipseNode>();\n  if (includes != null) {\n    for (    EclipseNode child : typeNode.down()) {\n      if (child.getKind() != Kind.FIELD)       continue;\n      FieldDeclaration fieldDecl=(FieldDeclaration)child.get();\n      if (includes.contains(new String(fieldDecl.name)))       nodesForToString.add(child);\n    }\n  }\n else {\n    for (    EclipseNode child : typeNode.down()) {\n      if (child.getKind() != Kind.FIELD)       continue;\n      FieldDeclaration fieldDecl=(FieldDeclaration)child.get();\n      if (!filterField(fieldDecl))       continue;\n      if (excludes != null && excludes.contains(new String(fieldDecl.name)))       continue;\n      nodesForToString.add(child);\n    }\n  }\nswitch (methodExists(\"toString\",typeNode,0)) {\ncase NOT_EXISTS:    MethodDeclaration toString=createToString(typeNode,nodesForToString,includeFieldNames,callSuper,errorNode.get(),fieldAccess);\n  injectMethod(typeNode,toString);\nbreak;\ncase EXISTS_BY_LOMBOK:break;\ndefault:case EXISTS_BY_USER:if (whineIfExists) {\nerrorNode.addWarning(\"Not generating toString(): A method with that name already exists\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 123,
        "startColumnNumber" : 1,
        "endLineNumber" : 175,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void generateToString(EclipseNode typeNode,EclipseNode errorNode,List<String> excludes,List<String> includes,boolean includeFieldNames,Boolean callSuper,boolean whineIfExists,FieldAccess fieldAccess){\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\n  if (typeDecl == null || notAClass) {\n    errorNode.addError(\"@ToString is only supported on a class or enum.\");\n  }\n  if (callSuper == null) {\n    try {\n      callSuper=((Boolean)ToString.class.getMethod(\"callSuper\").getDefaultValue()).booleanValue();\n    }\n catch (    Exception ignore) {\n    }\n  }\n  List<EclipseNode> nodesForToString=new ArrayList<EclipseNode>();\n  if (includes != null) {\n    for (    EclipseNode child : typeNode.down()) {\n      if (child.getKind() != Kind.FIELD)       continue;\n      FieldDeclaration fieldDecl=(FieldDeclaration)child.get();\n      if (includes.contains(new String(fieldDecl.name)))       nodesForToString.add(child);\n    }\n  }\n else {\n    for (    EclipseNode child : typeNode.down()) {\n      if (child.getKind() != Kind.FIELD)       continue;\n      FieldDeclaration fieldDecl=(FieldDeclaration)child.get();\n      if (!filterField(fieldDecl))       continue;\n      if (excludes != null && excludes.contains(new String(fieldDecl.name)))       continue;\n      nodesForToString.add(child);\n    }\n  }\nswitch (methodExists(\"toString\",typeNode,0)) {\ncase NOT_EXISTS:    MethodDeclaration toString=createToString(typeNode,nodesForToString,includeFieldNames,callSuper,errorNode.get(),fieldAccess);\n  injectMethod(typeNode,toString);\nbreak;\ncase EXISTS_BY_LOMBOK:break;\ndefault:case EXISTS_BY_USER:if (whineIfExists) {\nerrorNode.addWarning(\"Not generating toString(): A method with that name already exists\");\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 296,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 133,
        "startColumnNumber" : 3,
        "endLineNumber" : 133,
        "endColumnNumber" : 73
      },
      "nodeContext" : "errorNode.addError(\"@ToString is only supported on a class or enum.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 49,
    "startLineNumber" : 133,
    "startColumnNumber" : 22,
    "endLineNumber" : 133,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}