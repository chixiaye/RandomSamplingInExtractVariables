{
  "id" : 69,
  "expression" : "num",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Others/LowestBasePalindrome.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "num",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 41,
      "startColumnNumber" : 17,
      "endLineNumber" : 41,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 41,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 20
      },
      "nodeContext" : "num2=num",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 21
      },
      "nodeContext" : "int base, num2=num;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 40,
        "startColumnNumber" : 49,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given a number in base 10, returns the lowest base in which the number is represented by a palindrome (read the same left-to-right and right-to-left).\n * @param num A number in base 10.\n * @return The lowest base in which num is a palindrome.\n */\npublic static int lowestBasePalindrome(int num){\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 21
      },
      "nodeContext" : "int base, num2=num;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "num",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 52,
      "startColumnNumber" : 10,
      "endLineNumber" : 52,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 52,
        "startColumnNumber" : 10,
        "endLineNumber" : 52,
        "endColumnNumber" : 15
      },
      "nodeContext" : "num > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1018,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (num > 0) {\n  digit=(num % base);\n  num/=base;\n  if (digit >= digits.length()) {\n    digitC=(char)(digit);\n    newNum+=digitC;\n    continue;\n  }\n  newNum+=digits.charAt(digit);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1407,
        "startLineNumber" : 50,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  newNum=\"\";\n  while (num > 0) {\n    digit=(num % base);\n    num/=base;\n    if (digit >= digits.length()) {\n      digitC=(char)(digit);\n      newNum+=digitC;\n      continue;\n    }\n    newNum+=digits.charAt(digit);\n  }\n  num=num2;\n  String reverse=reverse(newNum);\n  if (reverse.equals(newNum)) {\n    foundBase=true;\n    return base;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1439,
        "startLineNumber" : 50,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (base=2; base < num2; base++) {\n  newNum=\"\";\n  while (num > 0) {\n    digit=(num % base);\n    num/=base;\n    if (digit >= digits.length()) {\n      digitC=(char)(digit);\n      newNum+=digitC;\n      continue;\n    }\n    newNum+=digits.charAt(digit);\n  }\n  num=num2;\n  String reverse=reverse(newNum);\n  if (reverse.equals(newNum)) {\n    foundBase=true;\n    return base;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1480,
        "startLineNumber" : 48,
        "startColumnNumber" : 21,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (base=2; base < num2; base++) {\n    newNum=\"\";\n    while (num > 0) {\n      digit=(num % base);\n      num/=base;\n      if (digit >= digits.length()) {\n        digitC=(char)(digit);\n        newNum+=digitC;\n        continue;\n      }\n      newNum+=digits.charAt(digit);\n    }\n    num=num2;\n    String reverse=reverse(newNum);\n    if (reverse.equals(newNum)) {\n      foundBase=true;\n      return base;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (!foundBase) {\n  for (base=2; base < num2; base++) {\n    newNum=\"\";\n    while (num > 0) {\n      digit=(num % base);\n      num/=base;\n      if (digit >= digits.length()) {\n        digitC=(char)(digit);\n        newNum+=digitC;\n        continue;\n      }\n      newNum+=digits.charAt(digit);\n    }\n    num=num2;\n    String reverse=reverse(newNum);\n    if (reverse.equals(newNum)) {\n      foundBase=true;\n      return base;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 40,
        "startColumnNumber" : 49,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given a number in base 10, returns the lowest base in which the number is represented by a palindrome (read the same left-to-right and right-to-left).\n * @param num A number in base 10.\n * @return The lowest base in which num is a palindrome.\n */\npublic static int lowestBasePalindrome(int num){\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 52,
        "startColumnNumber" : 10,
        "endLineNumber" : 52,
        "endColumnNumber" : 15
      },
      "nodeContext" : "num > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "num",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 58,
      "startColumnNumber" : 14,
      "endLineNumber" : 58,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 58,
        "startColumnNumber" : 14,
        "endLineNumber" : 58,
        "endColumnNumber" : 24
      },
      "nodeContext" : "num % base",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 58,
        "startColumnNumber" : 13,
        "endLineNumber" : 58,
        "endColumnNumber" : 25
      },
      "nodeContext" : "(num % base)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 58,
        "startColumnNumber" : 5,
        "endLineNumber" : 58,
        "endColumnNumber" : 25
      },
      "nodeContext" : "digit=(num % base)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 58,
        "startColumnNumber" : 5,
        "endLineNumber" : 58,
        "endColumnNumber" : 26
      },
      "nodeContext" : "digit=(num % base);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1005,
        "startLineNumber" : 52,
        "startColumnNumber" : 17,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  digit=(num % base);\n  num/=base;\n  if (digit >= digits.length()) {\n    digitC=(char)(digit);\n    newNum+=digitC;\n    continue;\n  }\n  newNum+=digits.charAt(digit);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1018,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (num > 0) {\n  digit=(num % base);\n  num/=base;\n  if (digit >= digits.length()) {\n    digitC=(char)(digit);\n    newNum+=digitC;\n    continue;\n  }\n  newNum+=digits.charAt(digit);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1407,
        "startLineNumber" : 50,
        "startColumnNumber" : 35,
        "endLineNumber" : 86,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  newNum=\"\";\n  while (num > 0) {\n    digit=(num % base);\n    num/=base;\n    if (digit >= digits.length()) {\n      digitC=(char)(digit);\n      newNum+=digitC;\n      continue;\n    }\n    newNum+=digits.charAt(digit);\n  }\n  num=num2;\n  String reverse=reverse(newNum);\n  if (reverse.equals(newNum)) {\n    foundBase=true;\n    return base;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1439,
        "startLineNumber" : 50,
        "startColumnNumber" : 3,
        "endLineNumber" : 86,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (base=2; base < num2; base++) {\n  newNum=\"\";\n  while (num > 0) {\n    digit=(num % base);\n    num/=base;\n    if (digit >= digits.length()) {\n      digitC=(char)(digit);\n      newNum+=digitC;\n      continue;\n    }\n    newNum+=digits.charAt(digit);\n  }\n  num=num2;\n  String reverse=reverse(newNum);\n  if (reverse.equals(newNum)) {\n    foundBase=true;\n    return base;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1480,
        "startLineNumber" : 48,
        "startColumnNumber" : 21,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (base=2; base < num2; base++) {\n    newNum=\"\";\n    while (num > 0) {\n      digit=(num % base);\n      num/=base;\n      if (digit >= digits.length()) {\n        digitC=(char)(digit);\n        newNum+=digitC;\n        continue;\n      }\n      newNum+=digits.charAt(digit);\n    }\n    num=num2;\n    String reverse=reverse(newNum);\n    if (reverse.equals(newNum)) {\n      foundBase=true;\n      return base;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1499,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (!foundBase) {\n  for (base=2; base < num2; base++) {\n    newNum=\"\";\n    while (num > 0) {\n      digit=(num % base);\n      num/=base;\n      if (digit >= digits.length()) {\n        digitC=(char)(digit);\n        newNum+=digitC;\n        continue;\n      }\n      newNum+=digits.charAt(digit);\n    }\n    num=num2;\n    String reverse=reverse(newNum);\n    if (reverse.equals(newNum)) {\n      foundBase=true;\n      return base;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 84,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 40,
        "startColumnNumber" : 49,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given a number in base 10, returns the lowest base in which the number is represented by a palindrome (read the same left-to-right and right-to-left).\n * @param num A number in base 10.\n * @return The lowest base in which num is a palindrome.\n */\npublic static int lowestBasePalindrome(int num){\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 58,
        "startColumnNumber" : 5,
        "endLineNumber" : 58,
        "endColumnNumber" : 26
      },
      "nodeContext" : "digit=(num % base);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "num",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 89,
      "startColumnNumber" : 9,
      "endLineNumber" : 89,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 89,
        "startColumnNumber" : 9,
        "endLineNumber" : 89,
        "endColumnNumber" : 14
      },
      "nodeContext" : "num - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return num - 1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1751,
        "startLineNumber" : 40,
        "startColumnNumber" : 49,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 33,
        "startColumnNumber" : 1,
        "endLineNumber" : 90,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given a number in base 10, returns the lowest base in which the number is represented by a palindrome (read the same left-to-right and right-to-left).\n * @param num A number in base 10.\n * @return The lowest base in which num is a palindrome.\n */\npublic static int lowestBasePalindrome(int num){\n  int base, num2=num;\n  int digit;\n  char digitC;\n  boolean foundBase=false;\n  String newNum=\"\";\n  String digits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  while (!foundBase) {\n    for (base=2; base < num2; base++) {\n      newNum=\"\";\n      while (num > 0) {\n        digit=(num % base);\n        num/=base;\n        if (digit >= digits.length()) {\n          digitC=(char)(digit);\n          newNum+=digitC;\n          continue;\n        }\n        newNum+=digits.charAt(digit);\n      }\n      num=num2;\n      String reverse=reverse(newNum);\n      if (reverse.equals(newNum)) {\n        foundBase=true;\n        return base;\n      }\n    }\n  }\n  return num - 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 15
      },
      "nodeContext" : "return num - 1;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 41,
    "startColumnNumber" : 17,
    "endLineNumber" : 41,
    "endColumnNumber" : 20
  }, {
    "charLength" : 3,
    "startLineNumber" : 52,
    "startColumnNumber" : 10,
    "endLineNumber" : 52,
    "endColumnNumber" : 13
  }, {
    "charLength" : 3,
    "startLineNumber" : 58,
    "startColumnNumber" : 14,
    "endLineNumber" : 58,
    "endColumnNumber" : 17
  }, {
    "charLength" : 3,
    "startLineNumber" : 89,
    "startColumnNumber" : 9,
    "endLineNumber" : 89,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}