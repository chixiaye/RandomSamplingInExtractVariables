{
  "id" : 666,
  "expression" : "method",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "d1025dcc8c34d4a6bf510b427f3fb826dc28a4bb",
  "filePath" : "butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 445,
      "startColumnNumber" : 10,
      "endLineNumber" : 445,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 445,
        "startColumnNumber" : 10,
        "endLineNumber" : 445,
        "endColumnNumber" : 24
      },
      "nodeContext" : "method == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 445,
        "startColumnNumber" : 6,
        "endLineNumber" : 450,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (method == null) {\n  throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 440,
        "startColumnNumber" : 11,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n  Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n  Field callbackField=callback.getDeclaringClass().getField(callback.name());\n  method=callbackField.getAnnotation(ListenerMethod.class);\n  if (method == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 433,
        "startColumnNumber" : 11,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methods.length == 1) {\n  if (listener.callbacks() != ListenerClass.NONE.class) {\n    throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n  }\n  method=methods[0];\n}\n else {\n  Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n  Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n  Field callbackField=callback.getDeclaringClass().getField(callback.name());\n  method=callbackField.getAnnotation(ListenerMethod.class);\n  if (method == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1099,
        "startLineNumber" : 430,
        "startColumnNumber" : 4,
        "endLineNumber" : 451,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methods.length > 1) {\n  throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n}\n else if (methods.length == 1) {\n  if (listener.callbacks() != ListenerClass.NONE.class) {\n    throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n  }\n  method=methods[0];\n}\n else {\n  Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n  Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n  Field callbackField=callback.getDeclaringClass().getField(callback.name());\n  method=callbackField.getAnnotation(ListenerMethod.class);\n  if (method == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 445,
        "startColumnNumber" : 10,
        "endLineNumber" : 445,
        "endColumnNumber" : 24
      },
      "nodeContext" : "method == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 455,
      "startColumnNumber" : 34,
      "endLineNumber" : 455,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 455,
        "startColumnNumber" : 34,
        "endLineNumber" : 455,
        "endColumnNumber" : 53
      },
      "nodeContext" : "method.parameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 455,
        "startColumnNumber" : 34,
        "endLineNumber" : 455,
        "endColumnNumber" : 60
      },
      "nodeContext" : "method.parameters().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 60
      },
      "nodeContext" : "methodParameters.size() > method.parameters().length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 455,
        "startColumnNumber" : 4,
        "endLineNumber" : 460,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameters.size() > method.parameters().length) {\n  error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 455,
        "startColumnNumber" : 8,
        "endLineNumber" : 455,
        "endColumnNumber" : 60
      },
      "nodeContext" : "methodParameters.size() > method.parameters().length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 457,
      "startColumnNumber" : 43,
      "endLineNumber" : 457,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 457,
        "startColumnNumber" : 43,
        "endLineNumber" : 457,
        "endColumnNumber" : 62
      },
      "nodeContext" : "method.parameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 457,
        "startColumnNumber" : 43,
        "endLineNumber" : 457,
        "endColumnNumber" : 69
      },
      "nodeContext" : "method.parameters().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 456,
        "startColumnNumber" : 6,
        "endLineNumber" : 458,
        "endColumnNumber" : 71
      },
      "nodeContext" : "error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 456,
        "startColumnNumber" : 6,
        "endLineNumber" : 458,
        "endColumnNumber" : 72
      },
      "nodeContext" : "error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 455,
        "startColumnNumber" : 62,
        "endLineNumber" : 460,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 310,
        "startLineNumber" : 455,
        "startColumnNumber" : 4,
        "endLineNumber" : 460,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (methodParameters.size() > method.parameters().length) {\n  error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 457,
        "startColumnNumber" : 43,
        "endLineNumber" : 457,
        "endColumnNumber" : 69
      },
      "nodeContext" : "method.parameters().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 468,
      "startColumnNumber" : 38,
      "endLineNumber" : 468,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 468,
        "startColumnNumber" : 38,
        "endLineNumber" : 468,
        "endColumnNumber" : 57
      },
      "nodeContext" : "method.returnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 468,
        "startColumnNumber" : 9,
        "endLineNumber" : 468,
        "endColumnNumber" : 58
      },
      "nodeContext" : "returnType.toString().equals(method.returnType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 468,
        "startColumnNumber" : 8,
        "endLineNumber" : 468,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!returnType.toString().equals(method.returnType())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 468,
        "startColumnNumber" : 4,
        "endLineNumber" : 473,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!returnType.toString().equals(method.returnType())) {\n  error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 468,
        "startColumnNumber" : 8,
        "endLineNumber" : 468,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!returnType.toString().equals(method.returnType())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 470,
      "startColumnNumber" : 43,
      "endLineNumber" : 470,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 470,
        "startColumnNumber" : 43,
        "endLineNumber" : 470,
        "endColumnNumber" : 62
      },
      "nodeContext" : "method.returnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 469,
        "startColumnNumber" : 6,
        "endLineNumber" : 471,
        "endColumnNumber" : 71
      },
      "nodeContext" : "error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 469,
        "startColumnNumber" : 6,
        "endLineNumber" : 471,
        "endColumnNumber" : 72
      },
      "nodeContext" : "error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 468,
        "startColumnNumber" : 60,
        "endLineNumber" : 473,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 468,
        "startColumnNumber" : 4,
        "endLineNumber" : 473,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!returnType.toString().equals(method.returnType())) {\n  error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 470,
        "startColumnNumber" : 43,
        "endLineNumber" : 470,
        "endColumnNumber" : 62
      },
      "nodeContext" : "method.returnType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 483,
      "startColumnNumber" : 32,
      "endLineNumber" : 483,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 483,
        "startColumnNumber" : 32,
        "endLineNumber" : 483,
        "endColumnNumber" : 51
      },
      "nodeContext" : "method.parameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 483,
        "startColumnNumber" : 15,
        "endLineNumber" : 483,
        "endColumnNumber" : 51
      },
      "nodeContext" : "parameterTypes=method.parameters()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 483,
        "startColumnNumber" : 6,
        "endLineNumber" : 483,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String[] parameterTypes=method.parameters();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2532,
        "startLineNumber" : 480,
        "startColumnNumber" : 37,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  String[] parameterTypes=method.parameters();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    if (methodParameterType instanceof TypeVariable) {\n      TypeVariable typeVariable=(TypeVariable)methodParameterType;\n      methodParameterType=typeVariable.getUpperBound();\n    }\n    for (int j=0; j < parameterTypes.length; j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n      for (      String parameterType : method.parameters()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2565,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  String[] parameterTypes=method.parameters();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    if (methodParameterType instanceof TypeVariable) {\n      TypeVariable typeVariable=(TypeVariable)methodParameterType;\n      methodParameterType=typeVariable.getUpperBound();\n    }\n    for (int j=0; j < parameterTypes.length; j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n      for (      String parameterType : method.parameters()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 305,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 483,
        "startColumnNumber" : 6,
        "endLineNumber" : 483,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String[] parameterTypes=method.parameters();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 528,
      "startColumnNumber" : 22,
      "endLineNumber" : 528,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 528,
        "startColumnNumber" : 22,
        "endLineNumber" : 528,
        "endColumnNumber" : 41
      },
      "nodeContext" : "method.parameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 528,
        "startColumnNumber" : 22,
        "endLineNumber" : 528,
        "endColumnNumber" : 48
      },
      "nodeContext" : "method.parameters().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 527,
        "startColumnNumber" : 10,
        "endLineNumber" : 528,
        "endColumnNumber" : 49
      },
      "nodeContext" : "builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 527,
        "startColumnNumber" : 10,
        "endLineNumber" : 529,
        "endColumnNumber" : 41
      },
      "nodeContext" : "builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 527,
        "startColumnNumber" : 10,
        "endLineNumber" : 529,
        "endColumnNumber" : 42
      },
      "nodeContext" : "builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 502,
        "startColumnNumber" : 35,
        "endLineNumber" : 537,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n  for (  String parameterType : method.parameters()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 502,
        "startColumnNumber" : 8,
        "endLineNumber" : 537,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n  for (  String parameterType : method.parameters()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 484,
        "startColumnNumber" : 56,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  if (methodParameterType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)methodParameterType;\n    methodParameterType=typeVariable.getUpperBound();\n  }\n  for (int j=0; j < parameterTypes.length; j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n    for (    String parameterType : method.parameters()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2334,
        "startLineNumber" : 484,
        "startColumnNumber" : 6,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  if (methodParameterType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)methodParameterType;\n    methodParameterType=typeVariable.getUpperBound();\n  }\n  for (int j=0; j < parameterTypes.length; j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n    for (    String parameterType : method.parameters()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 267,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2532,
        "startLineNumber" : 480,
        "startColumnNumber" : 37,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  String[] parameterTypes=method.parameters();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    if (methodParameterType instanceof TypeVariable) {\n      TypeVariable typeVariable=(TypeVariable)methodParameterType;\n      methodParameterType=typeVariable.getUpperBound();\n    }\n    for (int j=0; j < parameterTypes.length; j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n      for (      String parameterType : method.parameters()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2565,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  String[] parameterTypes=method.parameters();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    if (methodParameterType instanceof TypeVariable) {\n      TypeVariable typeVariable=(TypeVariable)methodParameterType;\n      methodParameterType=typeVariable.getUpperBound();\n    }\n    for (int j=0; j < parameterTypes.length; j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n      for (      String parameterType : method.parameters()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 305,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 528,
        "startColumnNumber" : 22,
        "endLineNumber" : 528,
        "endColumnNumber" : 48
      },
      "nodeContext" : "method.parameters().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 530,
      "startColumnNumber" : 38,
      "endLineNumber" : 530,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 530,
        "startColumnNumber" : 38,
        "endLineNumber" : 530,
        "endColumnNumber" : 57
      },
      "nodeContext" : "method.parameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 530,
        "startColumnNumber" : 10,
        "endLineNumber" : 532,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (String parameterType : method.parameters()) {\n  builder.append(\"\\n  \").append(parameterType);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1531,
        "startLineNumber" : 502,
        "startColumnNumber" : 35,
        "endLineNumber" : 537,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n  for (  String parameterType : method.parameters()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 502,
        "startColumnNumber" : 8,
        "endLineNumber" : 537,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (parameters[i] == null) {\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n  for (int j=0; j < parameters.length; j++) {\n    Parameter parameter=parameters[j];\n    builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n    if (parameter == null) {\n      builder.append(\"did not match any listener parameters\");\n    }\n else {\n      builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n    }\n  }\n  builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n  for (  String parameterType : method.parameters()) {\n    builder.append(\"\\n  \").append(parameterType);\n  }\n  builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n  error(executableElement,builder.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 168,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2284,
        "startLineNumber" : 484,
        "startColumnNumber" : 56,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  if (methodParameterType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)methodParameterType;\n    methodParameterType=typeVariable.getUpperBound();\n  }\n  for (int j=0; j < parameterTypes.length; j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n    for (    String parameterType : method.parameters()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 254,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2334,
        "startLineNumber" : 484,
        "startColumnNumber" : 6,
        "endLineNumber" : 538,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < methodParameters.size(); i++) {\n  VariableElement methodParameter=methodParameters.get(i);\n  TypeMirror methodParameterType=methodParameter.asType();\n  if (methodParameterType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)methodParameterType;\n    methodParameterType=typeVariable.getUpperBound();\n  }\n  for (int j=0; j < parameterTypes.length; j++) {\n    if (methodParameterUsed.get(j)) {\n      continue;\n    }\n    if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n      parameters[i]=new Parameter(j,methodParameterType.toString());\n      methodParameterUsed.set(j);\n      break;\n    }\n  }\n  if (parameters[i] == null) {\n    StringBuilder builder=new StringBuilder();\n    builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n    for (int j=0; j < parameters.length; j++) {\n      Parameter parameter=parameters[j];\n      builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n      if (parameter == null) {\n        builder.append(\"did not match any listener parameters\");\n      }\n else {\n        builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n      }\n    }\n    builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n    for (    String parameterType : method.parameters()) {\n      builder.append(\"\\n  \").append(parameterType);\n    }\n    builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n    error(executableElement,builder.toString());\n    return;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 267,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2532,
        "startLineNumber" : 480,
        "startColumnNumber" : 37,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  String[] parameterTypes=method.parameters();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    if (methodParameterType instanceof TypeVariable) {\n      TypeVariable typeVariable=(TypeVariable)methodParameterType;\n      methodParameterType=typeVariable.getUpperBound();\n    }\n    for (int j=0; j < parameterTypes.length; j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n      for (      String parameterType : method.parameters()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2565,
        "startLineNumber" : 480,
        "startColumnNumber" : 4,
        "endLineNumber" : 539,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!methodParameters.isEmpty()) {\n  parameters=new Parameter[methodParameters.size()];\n  BitSet methodParameterUsed=new BitSet(methodParameters.size());\n  String[] parameterTypes=method.parameters();\n  for (int i=0; i < methodParameters.size(); i++) {\n    VariableElement methodParameter=methodParameters.get(i);\n    TypeMirror methodParameterType=methodParameter.asType();\n    if (methodParameterType instanceof TypeVariable) {\n      TypeVariable typeVariable=(TypeVariable)methodParameterType;\n      methodParameterType=typeVariable.getUpperBound();\n    }\n    for (int j=0; j < parameterTypes.length; j++) {\n      if (methodParameterUsed.get(j)) {\n        continue;\n      }\n      if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n        parameters[i]=new Parameter(j,methodParameterType.toString());\n        methodParameterUsed.set(j);\n        break;\n      }\n    }\n    if (parameters[i] == null) {\n      StringBuilder builder=new StringBuilder();\n      builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n      for (int j=0; j < parameters.length; j++) {\n        Parameter parameter=parameters[j];\n        builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n        if (parameter == null) {\n          builder.append(\"did not match any listener parameters\");\n        }\n else {\n          builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n        }\n      }\n      builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n      for (      String parameterType : method.parameters()) {\n        builder.append(\"\\n  \").append(parameterType);\n      }\n      builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n      error(executableElement,builder.toString());\n      return;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 305,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 530,
        "startColumnNumber" : 38,
        "endLineNumber" : 530,
        "endColumnNumber" : 57
      },
      "nodeContext" : "method.parameters()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  }, {
    "nodeContext" : "method",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 544,
      "startColumnNumber" : 50,
      "endLineNumber" : 544,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 544,
        "startColumnNumber" : 11,
        "endLineNumber" : 544,
        "endColumnNumber" : 66
      },
      "nodeContext" : "viewInjector.addListener(id,listener,method,binding)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 544,
        "startColumnNumber" : 10,
        "endLineNumber" : 544,
        "endColumnNumber" : 66
      },
      "nodeContext" : "!viewInjector.addListener(id,listener,method,binding)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 544,
        "startColumnNumber" : 6,
        "endLineNumber" : 548,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!viewInjector.addListener(id,listener,method,binding)) {\n  error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 543,
        "startColumnNumber" : 23,
        "endLineNumber" : 549,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!viewInjector.addListener(id,listener,method,binding)) {\n    error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 280,
        "startLineNumber" : 543,
        "startColumnNumber" : 4,
        "endLineNumber" : 549,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int id : ids) {\n  if (!viewInjector.addListener(id,listener,method,binding)) {\n    error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n    return;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7436,
        "startLineNumber" : 387,
        "startColumnNumber" : 23,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 829,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7642,
        "startLineNumber" : 385,
        "startColumnNumber" : 2,
        "endLineNumber" : 553,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseListenerAnnotation(Class<? extends Annotation> annotationClass,Element element,Map<TypeElement,ViewInjector> targetClassMap,Set<String> erasedTargetNames) throws Exception {\n  if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {\n    throw new IllegalStateException(String.format(\"@%s annotation must be on a method.\",annotationClass.getSimpleName()));\n  }\n  ExecutableElement executableElement=(ExecutableElement)element;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  Annotation annotation=element.getAnnotation(annotationClass);\n  Method annotationValue=annotationClass.getDeclaredMethod(\"value\");\n  if (annotationValue.getReturnType() != int[].class) {\n    throw new IllegalStateException(String.format(\"@%s annotation value() type not int[].\",annotationClass));\n  }\n  int[] ids=(int[])annotationValue.invoke(annotation);\n  String name=executableElement.getSimpleName().toString();\n  boolean required=element.getAnnotation(Optional.class) == null;\n  boolean hasError=isValidForGeneratedCode(annotationClass,\"methods\",element);\n  hasError|=isBindingInWrongPackage(annotationClass,element);\n  Integer duplicateId=findDuplicate(ids);\n  if (duplicateId != null) {\n    error(element,\"@%s annotation for method contains duplicate ID %d. (%s.%s)\",annotationClass.getSimpleName(),duplicateId,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  ListenerClass listener=annotationClass.getAnnotation(ListenerClass.class);\n  if (listener == null) {\n    throw new IllegalStateException(String.format(\"No @%s defined on @%s.\",ListenerClass.class.getSimpleName(),annotationClass.getSimpleName()));\n  }\n  ListenerMethod method;\n  ListenerMethod[] methods=listener.method();\n  if (methods.length > 1) {\n    throw new IllegalStateException(String.format(\"Multiple listener methods specified on @%s.\",annotationClass.getSimpleName()));\n  }\n else   if (methods.length == 1) {\n    if (listener.callbacks() != ListenerClass.NONE.class) {\n      throw new IllegalStateException(String.format(\"Both method() and callback() defined on @%s.\",annotationClass.getSimpleName()));\n    }\n    method=methods[0];\n  }\n else {\n    Method annotationCallback=annotationClass.getDeclaredMethod(\"callback\");\n    Enum<?> callback=(Enum<?>)annotationCallback.invoke(annotation);\n    Field callbackField=callback.getDeclaringClass().getField(callback.name());\n    method=callbackField.getAnnotation(ListenerMethod.class);\n    if (method == null) {\n      throw new IllegalStateException(String.format(\"No @%s defined on @%s's %s.%s.\",ListenerMethod.class.getSimpleName(),annotationClass.getSimpleName(),callback.getDeclaringClass().getSimpleName(),callback.name()));\n    }\n  }\n  List<? extends VariableElement> methodParameters=executableElement.getParameters();\n  if (methodParameters.size() > method.parameters().length) {\n    error(element,\"@%s methods can have at most %s parameter(s). (%s.%s)\",annotationClass.getSimpleName(),method.parameters().length,enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  TypeMirror returnType=executableElement.getReturnType();\n  if (returnType instanceof TypeVariable) {\n    TypeVariable typeVariable=(TypeVariable)returnType;\n    returnType=typeVariable.getUpperBound();\n  }\n  if (!returnType.toString().equals(method.returnType())) {\n    error(element,\"@%s methods must have a '%s' return type. (%s.%s)\",annotationClass.getSimpleName(),method.returnType(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  Parameter[] parameters=Parameter.NONE;\n  if (!methodParameters.isEmpty()) {\n    parameters=new Parameter[methodParameters.size()];\n    BitSet methodParameterUsed=new BitSet(methodParameters.size());\n    String[] parameterTypes=method.parameters();\n    for (int i=0; i < methodParameters.size(); i++) {\n      VariableElement methodParameter=methodParameters.get(i);\n      TypeMirror methodParameterType=methodParameter.asType();\n      if (methodParameterType instanceof TypeVariable) {\n        TypeVariable typeVariable=(TypeVariable)methodParameterType;\n        methodParameterType=typeVariable.getUpperBound();\n      }\n      for (int j=0; j < parameterTypes.length; j++) {\n        if (methodParameterUsed.get(j)) {\n          continue;\n        }\n        if (isSubtypeOfType(methodParameterType,parameterTypes[j])) {\n          parameters[i]=new Parameter(j,methodParameterType.toString());\n          methodParameterUsed.set(j);\n          break;\n        }\n      }\n      if (parameters[i] == null) {\n        StringBuilder builder=new StringBuilder();\n        builder.append(\"Unable to match @\").append(annotationClass.getSimpleName()).append(\" method arguments. (\").append(enclosingElement.getQualifiedName()).append('.').append(element.getSimpleName()).append(')');\n        for (int j=0; j < parameters.length; j++) {\n          Parameter parameter=parameters[j];\n          builder.append(\"\\n\\n  Parameter #\").append(j + 1).append(\": \").append(methodParameters.get(j).asType().toString()).append(\"\\n    \");\n          if (parameter == null) {\n            builder.append(\"did not match any listener parameters\");\n          }\n else {\n            builder.append(\"matched listener parameter #\").append(parameter.getListenerPosition() + 1).append(\": \").append(parameter.getType());\n          }\n        }\n        builder.append(\"\\n\\nMethods may have up to \").append(method.parameters().length).append(\" parameter(s):\\n\");\n        for (        String parameterType : method.parameters()) {\n          builder.append(\"\\n  \").append(parameterType);\n        }\n        builder.append(\"\\n\\nThese may be listed in any order but will be searched for from top to bottom.\");\n        error(executableElement,builder.toString());\n        return;\n      }\n    }\n  }\n  ListenerBinding binding=new ListenerBinding(name,Arrays.asList(parameters),required);\n  ViewInjector viewInjector=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  for (  int id : ids) {\n    if (!viewInjector.addListener(id,listener,method,binding)) {\n      error(element,\"Multiple @%s methods declared for ID %s in %s.\",annotationClass.getSimpleName(),id,enclosingElement.getQualifiedName());\n      return;\n    }\n  }\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 544,
        "startColumnNumber" : 10,
        "endLineNumber" : 544,
        "endColumnNumber" : 66
      },
      "nodeContext" : "!viewInjector.addListener(id,listener,method,binding)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "butterknife.internal.ListenerMethod"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 445,
    "startColumnNumber" : 10,
    "endLineNumber" : 445,
    "endColumnNumber" : 16
  }, {
    "charLength" : 6,
    "startLineNumber" : 455,
    "startColumnNumber" : 34,
    "endLineNumber" : 455,
    "endColumnNumber" : 40
  }, {
    "charLength" : 6,
    "startLineNumber" : 457,
    "startColumnNumber" : 43,
    "endLineNumber" : 457,
    "endColumnNumber" : 49
  }, {
    "charLength" : 6,
    "startLineNumber" : 468,
    "startColumnNumber" : 38,
    "endLineNumber" : 468,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 470,
    "startColumnNumber" : 43,
    "endLineNumber" : 470,
    "endColumnNumber" : 49
  }, {
    "charLength" : 6,
    "startLineNumber" : 483,
    "startColumnNumber" : 32,
    "endLineNumber" : 483,
    "endColumnNumber" : 38
  }, {
    "charLength" : 6,
    "startLineNumber" : 528,
    "startColumnNumber" : 22,
    "endLineNumber" : 528,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 530,
    "startColumnNumber" : 38,
    "endLineNumber" : 530,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 544,
    "startColumnNumber" : 50,
    "endLineNumber" : 544,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  } ]
}