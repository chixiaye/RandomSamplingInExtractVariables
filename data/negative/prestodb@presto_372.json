{
  "id" : 372,
  "expression" : "new CounterStat()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/execution/scheduler/NodeScheduler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CounterStat()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 150,
      "startColumnNumber" : 28,
      "endLineNumber" : 150,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 46
      },
      "nodeContext" : "builder.add(new CounterStat())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.add(new CounterStat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 149,
        "startColumnNumber" : 77,
        "endLineNumber" : 151,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  builder.add(new CounterStat());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 149,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < networkLocationSegmentNames.size() + 1; i++) {\n  builder.add(new CounterStat());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 147,
        "startColumnNumber" : 32,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  networkLocationSegmentNames=ImmutableList.copyOf(networkTopology.getLocationSegmentNames());\n  for (int i=0; i < networkLocationSegmentNames.size() + 1; i++) {\n    builder.add(new CounterStat());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (useNetworkTopology) {\n  networkLocationSegmentNames=ImmutableList.copyOf(networkTopology.getLocationSegmentNames());\n  for (int i=0; i < networkLocationSegmentNames.size() + 1; i++) {\n    builder.add(new CounterStat());\n  }\n}\n else {\n  networkLocationSegmentNames=ImmutableList.of();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2062,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.networkLocationCache=networkLocationCache;\n  this.nodeManager=nodeManager;\n  this.nodeSelectionStats=requireNonNull(nodeSelectionStats,\"nodeSelectionStats is null\");\n  this.minCandidates=config.getMinCandidates();\n  this.includeCoordinator=config.isIncludeCoordinator();\n  int maxSplitsPerNode=config.getMaxSplitsPerNode();\n  int maxPendingSplitsPerTask=config.getMaxPendingSplitsPerTask();\n  checkArgument(maxSplitsPerNode >= maxPendingSplitsPerTask,\"maxSplitsPerNode must be > maxPendingSplitsPerTask\");\n  this.maxSplitsWeightPerNode=SplitWeight.rawValueForStandardSplitCount(maxSplitsPerNode);\n  this.maxPendingSplitsWeightPerTask=SplitWeight.rawValueForStandardSplitCount(maxPendingSplitsPerTask);\n  this.nodeTaskMap=requireNonNull(nodeTaskMap,\"nodeTaskMap is null\");\n  this.useNetworkTopology=!config.getNetworkTopology().equals(NetworkTopologyType.LEGACY);\n  ImmutableList.Builder<CounterStat> builder=ImmutableList.builder();\n  if (useNetworkTopology) {\n    networkLocationSegmentNames=ImmutableList.copyOf(networkTopology.getLocationSegmentNames());\n    for (int i=0; i < networkLocationSegmentNames.size() + 1; i++) {\n      builder.add(new CounterStat());\n    }\n  }\n else {\n    networkLocationSegmentNames=ImmutableList.of();\n  }\n  topologicalSplitCounters=builder.build();\n  this.nodeMapRefreshInterval=requireNonNull(nodeMapRefreshInterval,\"nodeMapRefreshInterval is null\");\n  this.nodeTtlFetcherManager=requireNonNull(nodeTtlFetcherManager,\"nodeTtlFetcherManager is null\");\n  this.queryManager=requireNonNull(queryManager,\"queryManager is null\");\n  this.simpleTtlNodeSelectorConfig=requireNonNull(simpleTtlNodeSelectorConfig,\"simpleTtlNodeSelectorConfig is null\");\n  this.nodeSelectionHashStrategy=config.getNodeSelectionHashStrategy();\n  this.minVirtualNodeCount=config.getMinVirtualNodeCount();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2571,
        "startLineNumber" : 121,
        "startColumnNumber" : 4,
        "endLineNumber" : 163,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public NodeScheduler(NetworkLocationCache networkLocationCache,NetworkTopology networkTopology,InternalNodeManager nodeManager,NodeSelectionStats nodeSelectionStats,NodeSchedulerConfig config,NodeTaskMap nodeTaskMap,Duration nodeMapRefreshInterval,NodeTtlFetcherManager nodeTtlFetcherManager,QueryManager queryManager,SimpleTtlNodeSelectorConfig simpleTtlNodeSelectorConfig){\n  this.networkLocationCache=networkLocationCache;\n  this.nodeManager=nodeManager;\n  this.nodeSelectionStats=requireNonNull(nodeSelectionStats,\"nodeSelectionStats is null\");\n  this.minCandidates=config.getMinCandidates();\n  this.includeCoordinator=config.isIncludeCoordinator();\n  int maxSplitsPerNode=config.getMaxSplitsPerNode();\n  int maxPendingSplitsPerTask=config.getMaxPendingSplitsPerTask();\n  checkArgument(maxSplitsPerNode >= maxPendingSplitsPerTask,\"maxSplitsPerNode must be > maxPendingSplitsPerTask\");\n  this.maxSplitsWeightPerNode=SplitWeight.rawValueForStandardSplitCount(maxSplitsPerNode);\n  this.maxPendingSplitsWeightPerTask=SplitWeight.rawValueForStandardSplitCount(maxPendingSplitsPerTask);\n  this.nodeTaskMap=requireNonNull(nodeTaskMap,\"nodeTaskMap is null\");\n  this.useNetworkTopology=!config.getNetworkTopology().equals(NetworkTopologyType.LEGACY);\n  ImmutableList.Builder<CounterStat> builder=ImmutableList.builder();\n  if (useNetworkTopology) {\n    networkLocationSegmentNames=ImmutableList.copyOf(networkTopology.getLocationSegmentNames());\n    for (int i=0; i < networkLocationSegmentNames.size() + 1; i++) {\n      builder.add(new CounterStat());\n    }\n  }\n else {\n    networkLocationSegmentNames=ImmutableList.of();\n  }\n  topologicalSplitCounters=builder.build();\n  this.nodeMapRefreshInterval=requireNonNull(nodeMapRefreshInterval,\"nodeMapRefreshInterval is null\");\n  this.nodeTtlFetcherManager=requireNonNull(nodeTtlFetcherManager,\"nodeTtlFetcherManager is null\");\n  this.queryManager=requireNonNull(queryManager,\"queryManager is null\");\n  this.simpleTtlNodeSelectorConfig=requireNonNull(simpleTtlNodeSelectorConfig,\"simpleTtlNodeSelectorConfig is null\");\n  this.nodeSelectionHashStrategy=config.getNodeSelectionHashStrategy();\n  this.minVirtualNodeCount=config.getMinVirtualNodeCount();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 256,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.add(new CounterStat());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.execution.scheduler.CounterStat"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 150,
    "startColumnNumber" : 28,
    "endLineNumber" : 150,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}