{
  "id" : 164,
  "expression" : "(!field.versions().contains(version)) || field.taggedVersions().contains(version)",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/generator/src/main/java/org/apache/kafka/message/SchemaGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(!field.versions().contains(version)) || field.taggedVersions().contains(version)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 101,
      "startLineNumber" : 154,
      "startColumnNumber" : 16,
      "endLineNumber" : 155,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 15,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((!field.versions().contains(version)) || field.taggedVersions().contains(version)) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 152,
        "startColumnNumber" : 50,
        "endLineNumber" : 166,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FieldSpec field=struct.fields().get(i);\n  if ((!field.versions().contains(version)) || field.taggedVersions().contains(version)) {\n    continue;\n  }\n  Versions fieldFlexibleVersions=field.flexibleVersions().orElse(messageFlexibleVersions);\n  headerGenerator.addImport(MessageGenerator.FIELD_CLASS);\n  buffer.printf(\"new Field(\\\"%s\\\", %s, \\\"%s\\\")%s%n\",field.snakeCaseName(),fieldTypeToSchemaType(field,version,fieldFlexibleVersions),field.about(),i == finalLine ? \"\" : \",\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 711,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 166,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i <= lastValidIndex; i++) {\n  FieldSpec field=struct.fields().get(i);\n  if ((!field.versions().contains(version)) || field.taggedVersions().contains(version)) {\n    continue;\n  }\n  Versions fieldFlexibleVersions=field.flexibleVersions().orElse(messageFlexibleVersions);\n  headerGenerator.addImport(MessageGenerator.FIELD_CLASS);\n  buffer.printf(\"new Field(\\\"%s\\\", %s, \\\"%s\\\")%s%n\",field.snakeCaseName(),fieldTypeToSchemaType(field,version,fieldFlexibleVersions),field.about(),i == finalLine ? \"\" : \",\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 130,
        "startColumnNumber" : 78,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int lastValidIndex=struct.fields().size() - 1;\n  while (true) {\n    if (lastValidIndex < 0) {\n      break;\n    }\n    FieldSpec field=struct.fields().get(lastValidIndex);\n    if ((!field.taggedVersions().contains(version)) && field.versions().contains(version)) {\n      break;\n    }\n    lastValidIndex--;\n  }\n  int finalLine=lastValidIndex;\n  if (messageFlexibleVersions.contains(version)) {\n    finalLine++;\n  }\n  headerGenerator.addImport(MessageGenerator.SCHEMA_CLASS);\n  buffer.printf(\"new Schema(%n\");\n  buffer.incrementIndent();\n  for (int i=0; i <= lastValidIndex; i++) {\n    FieldSpec field=struct.fields().get(i);\n    if ((!field.versions().contains(version)) || field.taggedVersions().contains(version)) {\n      continue;\n    }\n    Versions fieldFlexibleVersions=field.flexibleVersions().orElse(messageFlexibleVersions);\n    headerGenerator.addImport(MessageGenerator.FIELD_CLASS);\n    buffer.printf(\"new Field(\\\"%s\\\", %s, \\\"%s\\\")%s%n\",field.snakeCaseName(),fieldTypeToSchemaType(field,version,fieldFlexibleVersions),field.about(),i == finalLine ? \"\" : \",\");\n  }\n  if (messageFlexibleVersions.contains(version)) {\n    generateTaggedFieldsSchemaForVersion(struct,version,buffer);\n  }\n  buffer.decrementIndent();\n  buffer.printf(\");%n\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 185,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1863,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void generateSchemaForVersion(StructSpec struct,short version,CodeBuffer buffer) throws Exception {\n  int lastValidIndex=struct.fields().size() - 1;\n  while (true) {\n    if (lastValidIndex < 0) {\n      break;\n    }\n    FieldSpec field=struct.fields().get(lastValidIndex);\n    if ((!field.taggedVersions().contains(version)) && field.versions().contains(version)) {\n      break;\n    }\n    lastValidIndex--;\n  }\n  int finalLine=lastValidIndex;\n  if (messageFlexibleVersions.contains(version)) {\n    finalLine++;\n  }\n  headerGenerator.addImport(MessageGenerator.SCHEMA_CLASS);\n  buffer.printf(\"new Schema(%n\");\n  buffer.incrementIndent();\n  for (int i=0; i <= lastValidIndex; i++) {\n    FieldSpec field=struct.fields().get(i);\n    if ((!field.versions().contains(version)) || field.taggedVersions().contains(version)) {\n      continue;\n    }\n    Versions fieldFlexibleVersions=field.flexibleVersions().orElse(messageFlexibleVersions);\n    headerGenerator.addImport(MessageGenerator.FIELD_CLASS);\n    buffer.printf(\"new Field(\\\"%s\\\", %s, \\\"%s\\\")%s%n\",field.snakeCaseName(),fieldTypeToSchemaType(field,version,fieldFlexibleVersions),field.about(),i == finalLine ? \"\" : \",\");\n  }\n  if (messageFlexibleVersions.contains(version)) {\n    generateTaggedFieldsSchemaForVersion(struct,version,buffer);\n  }\n  buffer.decrementIndent();\n  buffer.printf(\");%n\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 154,
        "startColumnNumber" : 12,
        "endLineNumber" : 157,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((!field.versions().contains(version)) || field.taggedVersions().contains(version)) {\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 101,
    "startLineNumber" : 154,
    "startColumnNumber" : 16,
    "endLineNumber" : 155,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}