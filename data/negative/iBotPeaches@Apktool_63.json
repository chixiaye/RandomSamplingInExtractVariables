{
  "id" : 63,
  "expression" : "pos == -1",
  "projectName" : "iBotPeaches@Apktool",
  "commitID" : "719a25afd69d2211259a65d4fce197340cbae819",
  "filePath" : "/src/brut/androlib/src/TypeName.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pos == -1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 177,
      "startColumnNumber" : 20,
      "endLineNumber" : 177,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 180,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pos == -1) {\n  throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (internal.charAt(0)) {\ncase 'B':  type=\"byte\";\nbreak;\ncase 'C':type=\"char\";\nbreak;\ncase 'D':type=\"double\";\nbreak;\ncase 'F':type=\"float\";\nbreak;\ncase 'I':type=\"int\";\nbreak;\ncase 'J':type=\"long\";\nbreak;\ncase 'S':type=\"short\";\nbreak;\ncase 'Z':type=\"boolean\";\nbreak;\ncase 'V':type=\"void\";\nbreak;\ncase 'L':int pos=internal.indexOf(';');\nif (pos == -1) {\nthrow new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nlength+=pos;\ninternal=internal.substring(1,pos);\npos=internal.lastIndexOf('/');\nif (pos == -1) {\npackage_=\"\";\ntype=internal;\n}\n else {\npackage_=internal.substring(0,pos).replace('/','.');\ntype=internal.substring(pos + 1);\n}\npos=type.indexOf('$');\nif (pos != -1) {\ninnerType=type.substring(pos + 1);\ntype=type.substring(0,pos);\n}\nbreak;\ndefault:throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 185,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 126,
        "startColumnNumber" : 37,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String origInternal=internal;\n  int array=0;\n  boolean isArray=false;\n  do {\n    if (internal.isEmpty()) {\n      throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n    }\n    isArray=internal.charAt(0) == '[';\n    if (isArray) {\n      array++;\n      internal=internal.substring(1);\n    }\n  }\n while (isArray);\n  int length=array + 1;\n  String package_=null;\n  String type=null;\n  String innerType=null;\nswitch (internal.charAt(0)) {\ncase 'B':    type=\"byte\";\n  break;\ncase 'C':type=\"char\";\nbreak;\ncase 'D':type=\"double\";\nbreak;\ncase 'F':type=\"float\";\nbreak;\ncase 'I':type=\"int\";\nbreak;\ncase 'J':type=\"long\";\nbreak;\ncase 'S':type=\"short\";\nbreak;\ncase 'Z':type=\"boolean\";\nbreak;\ncase 'V':type=\"void\";\nbreak;\ncase 'L':int pos=internal.indexOf(';');\nif (pos == -1) {\nthrow new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nlength+=pos;\ninternal=internal.substring(1,pos);\npos=internal.lastIndexOf('/');\nif (pos == -1) {\npackage_=\"\";\ntype=internal;\n}\n else {\npackage_=internal.substring(0,pos).replace('/','.');\ntype=internal.substring(pos + 1);\n}\npos=type.indexOf('$');\nif (pos != -1) {\ninnerType=type.substring(pos + 1);\ntype=type.substring(0,pos);\n}\nbreak;\ndefault:throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nreturn new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2567,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Duo<TypeName,Integer> fetchFromInternalName(String internal) throws AndrolibException {\n  String origInternal=internal;\n  int array=0;\n  boolean isArray=false;\n  do {\n    if (internal.isEmpty()) {\n      throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n    }\n    isArray=internal.charAt(0) == '[';\n    if (isArray) {\n      array++;\n      internal=internal.substring(1);\n    }\n  }\n while (isArray);\n  int length=array + 1;\n  String package_=null;\n  String type=null;\n  String innerType=null;\nswitch (internal.charAt(0)) {\ncase 'B':    type=\"byte\";\n  break;\ncase 'C':type=\"char\";\nbreak;\ncase 'D':type=\"double\";\nbreak;\ncase 'F':type=\"float\";\nbreak;\ncase 'I':type=\"int\";\nbreak;\ncase 'J':type=\"long\";\nbreak;\ncase 'S':type=\"short\";\nbreak;\ncase 'Z':type=\"boolean\";\nbreak;\ncase 'V':type=\"void\";\nbreak;\ncase 'L':int pos=internal.indexOf(';');\nif (pos == -1) {\nthrow new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nlength+=pos;\ninternal=internal.substring(1,pos);\npos=internal.lastIndexOf('/');\nif (pos == -1) {\npackage_=\"\";\ntype=internal;\n}\n else {\npackage_=internal.substring(0,pos).replace('/','.');\ntype=internal.substring(pos + 1);\n}\npos=type.indexOf('$');\nif (pos != -1) {\ninnerType=type.substring(pos + 1);\ntype=type.substring(0,pos);\n}\nbreak;\ndefault:throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nreturn new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 180,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pos == -1) {\n  throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "pos == -1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 185,
      "startColumnNumber" : 20,
      "endLineNumber" : 185,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pos == -1) {\n  package_=\"\";\n  type=internal;\n}\n else {\n  package_=internal.substring(0,pos).replace('/','.');\n  type=internal.substring(pos + 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1737,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (internal.charAt(0)) {\ncase 'B':  type=\"byte\";\nbreak;\ncase 'C':type=\"char\";\nbreak;\ncase 'D':type=\"double\";\nbreak;\ncase 'F':type=\"float\";\nbreak;\ncase 'I':type=\"int\";\nbreak;\ncase 'J':type=\"long\";\nbreak;\ncase 'S':type=\"short\";\nbreak;\ncase 'Z':type=\"boolean\";\nbreak;\ncase 'V':type=\"void\";\nbreak;\ncase 'L':int pos=internal.indexOf(';');\nif (pos == -1) {\nthrow new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nlength+=pos;\ninternal=internal.substring(1,pos);\npos=internal.lastIndexOf('/');\nif (pos == -1) {\npackage_=\"\";\ntype=internal;\n}\n else {\npackage_=internal.substring(0,pos).replace('/','.');\ntype=internal.substring(pos + 1);\n}\npos=type.indexOf('$');\nif (pos != -1) {\ninnerType=type.substring(pos + 1);\ntype=type.substring(0,pos);\n}\nbreak;\ndefault:throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 185,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2454,
        "startLineNumber" : 126,
        "startColumnNumber" : 37,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String origInternal=internal;\n  int array=0;\n  boolean isArray=false;\n  do {\n    if (internal.isEmpty()) {\n      throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n    }\n    isArray=internal.charAt(0) == '[';\n    if (isArray) {\n      array++;\n      internal=internal.substring(1);\n    }\n  }\n while (isArray);\n  int length=array + 1;\n  String package_=null;\n  String type=null;\n  String innerType=null;\nswitch (internal.charAt(0)) {\ncase 'B':    type=\"byte\";\n  break;\ncase 'C':type=\"char\";\nbreak;\ncase 'D':type=\"double\";\nbreak;\ncase 'F':type=\"float\";\nbreak;\ncase 'I':type=\"int\";\nbreak;\ncase 'J':type=\"long\";\nbreak;\ncase 'S':type=\"short\";\nbreak;\ncase 'Z':type=\"boolean\";\nbreak;\ncase 'V':type=\"void\";\nbreak;\ncase 'L':int pos=internal.indexOf(';');\nif (pos == -1) {\nthrow new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nlength+=pos;\ninternal=internal.substring(1,pos);\npos=internal.lastIndexOf('/');\nif (pos == -1) {\npackage_=\"\";\ntype=internal;\n}\n else {\npackage_=internal.substring(0,pos).replace('/','.');\ntype=internal.substring(pos + 1);\n}\npos=type.indexOf('$');\nif (pos != -1) {\ninnerType=type.substring(pos + 1);\ntype=type.substring(0,pos);\n}\nbreak;\ndefault:throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nreturn new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 281,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2567,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static Duo<TypeName,Integer> fetchFromInternalName(String internal) throws AndrolibException {\n  String origInternal=internal;\n  int array=0;\n  boolean isArray=false;\n  do {\n    if (internal.isEmpty()) {\n      throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n    }\n    isArray=internal.charAt(0) == '[';\n    if (isArray) {\n      array++;\n      internal=internal.substring(1);\n    }\n  }\n while (isArray);\n  int length=array + 1;\n  String package_=null;\n  String type=null;\n  String innerType=null;\nswitch (internal.charAt(0)) {\ncase 'B':    type=\"byte\";\n  break;\ncase 'C':type=\"char\";\nbreak;\ncase 'D':type=\"double\";\nbreak;\ncase 'F':type=\"float\";\nbreak;\ncase 'I':type=\"int\";\nbreak;\ncase 'J':type=\"long\";\nbreak;\ncase 'S':type=\"short\";\nbreak;\ncase 'Z':type=\"boolean\";\nbreak;\ncase 'V':type=\"void\";\nbreak;\ncase 'L':int pos=internal.indexOf(';');\nif (pos == -1) {\nthrow new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nlength+=pos;\ninternal=internal.substring(1,pos);\npos=internal.lastIndexOf('/');\nif (pos == -1) {\npackage_=\"\";\ntype=internal;\n}\n else {\npackage_=internal.substring(0,pos).replace('/','.');\ntype=internal.substring(pos + 1);\n}\npos=type.indexOf('$');\nif (pos != -1) {\ninnerType=type.substring(pos + 1);\ntype=type.substring(0,pos);\n}\nbreak;\ndefault:throw new AndrolibException(\"Invalid internal name: \" + origInternal);\n}\nreturn new Duo<TypeName,Integer>(new TypeName(package_,type,innerType,array),length);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pos == -1) {\n  package_=\"\";\n  type=internal;\n}\n else {\n  package_=internal.substring(0,pos).replace('/','.');\n  type=internal.substring(pos + 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 177,
    "startColumnNumber" : 20,
    "endLineNumber" : 177,
    "endColumnNumber" : 29
  }, {
    "charLength" : 9,
    "startLineNumber" : 185,
    "startColumnNumber" : 20,
    "endLineNumber" : 185,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}