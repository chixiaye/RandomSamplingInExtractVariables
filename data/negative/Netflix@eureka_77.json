{
  "id" : 77,
  "expression" : "columnComparatorAscMap",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-contrib/eureka-karyon-admin/src/main/java/netflix/admin/eureka/RegistryTableComparatorFactory.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "columnComparatorAscMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 14,
      "startColumnNumber" : 8,
      "endLineNumber" : 14,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 633,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n      return o1.getApp().compareToIgnoreCase(o2.getApp());\n    }\n    if (o1 != null && o1.getApp() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getApp() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 11
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n      return o1.getApp().compareToIgnoreCase(o2.getApp());\n    }\n    if (o1 != null && o1.getApp() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getApp() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 5475,
        "startLineNumber" : 13,
        "startColumnNumber" : 11,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 721,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5482,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 723,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 633,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n      return o1.getApp().compareToIgnoreCase(o2.getApp());\n    }\n    if (o1 != null && o1.getApp() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getApp() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 89,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<netflix.admin.eureka.RegistryTableView.Column,java.util.Comparator<com.netflix.eureka2.registry.instance.InstanceInfo>>"
  }, {
    "nodeContext" : "columnComparatorAscMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 30,
      "startColumnNumber" : 8,
      "endLineNumber" : 30,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    final String hostName1=RegistryTableView.extractHostname(o1);\n    final String hostName2=RegistryTableView.extractHostname(o2);\n    if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n      return hostName1.compareTo(hostName2);\n    }\n    if (!hostName1.isEmpty()) {\n      return 1;\n    }\n    if (!hostName2.isEmpty()) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 85,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 725,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 11
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    final String hostName1=RegistryTableView.extractHostname(o1);\n    final String hostName2=RegistryTableView.extractHostname(o2);\n    if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n      return hostName1.compareTo(hostName2);\n    }\n    if (!hostName1.isEmpty()) {\n      return 1;\n    }\n    if (!hostName2.isEmpty()) {\n      return -1;\n    }\n    return 0;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 86,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 5475,
        "startLineNumber" : 13,
        "startColumnNumber" : 11,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 721,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5482,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 723,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    final String hostName1=RegistryTableView.extractHostname(o1);\n    final String hostName2=RegistryTableView.extractHostname(o2);\n    if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n      return hostName1.compareTo(hostName2);\n    }\n    if (!hostName1.isEmpty()) {\n      return 1;\n    }\n    if (!hostName2.isEmpty()) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 85,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<netflix.admin.eureka.RegistryTableView.Column,java.util.Comparator<com.netflix.eureka2.registry.instance.InstanceInfo>>"
  }, {
    "nodeContext" : "columnComparatorAscMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 48,
      "startColumnNumber" : 8,
      "endLineNumber" : 48,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n      return o1.getStatus().name().compareTo(o2.getStatus().name());\n    }\n    if (o1 != null && o1.getStatus() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getStatus() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 11
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n      return o1.getStatus().name().compareTo(o2.getStatus().name());\n    }\n    if (o1 != null && o1.getStatus() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getStatus() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 5475,
        "startLineNumber" : 13,
        "startColumnNumber" : 11,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 721,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5482,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 723,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 650,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n      return o1.getStatus().name().compareTo(o2.getStatus().name());\n    }\n    if (o1 != null && o1.getStatus() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getStatus() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 93,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<netflix.admin.eureka.RegistryTableView.Column,java.util.Comparator<com.netflix.eureka2.registry.instance.InstanceInfo>>"
  }, {
    "nodeContext" : "columnComparatorAscMap",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 64,
      "startColumnNumber" : 8,
      "endLineNumber" : 64,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n      return o1.getVipAddress().compareTo(o2.getVipAddress());\n    }\n    if (o1 != null && o1.getVipAddress() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getVipAddress() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 665,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 11
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n      return o1.getVipAddress().compareTo(o2.getVipAddress());\n    }\n    if (o1 != null && o1.getVipAddress() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getVipAddress() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 5475,
        "startLineNumber" : 13,
        "startColumnNumber" : 11,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 721,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5482,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 146,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  columnComparatorAscMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o1.getApp().compareToIgnoreCase(o2.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName1.compareTo(hostName2);\n      }\n      if (!hostName1.isEmpty()) {\n        return 1;\n      }\n      if (!hostName2.isEmpty()) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o1.getStatus().name().compareTo(o2.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o1.getVipAddress().compareTo(o2.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return 1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return -1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Application,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getApp() != null && o2.getApp() != null) {\n        return o2.getApp().compareToIgnoreCase(o1.getApp());\n      }\n      if (o1 != null && o1.getApp() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getApp() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Hostname,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      final String hostName1=RegistryTableView.extractHostname(o1);\n      final String hostName2=RegistryTableView.extractHostname(o2);\n      if (!hostName1.isEmpty() && !hostName2.isEmpty()) {\n        return hostName2.compareTo(hostName1);\n      }\n      if (!hostName1.isEmpty()) {\n        return -1;\n      }\n      if (!hostName2.isEmpty()) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.Status,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getStatus() != null && o2.getStatus() != null) {\n        return o2.getStatus().name().compareTo(o1.getStatus().name());\n      }\n      if (o1 != null && o1.getStatus() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getStatus() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n  columnComparatorDescMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n    @Override public int compare(    InstanceInfo o1,    InstanceInfo o2){\n      if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n        return o2.getVipAddress().compareTo(o1.getVipAddress());\n      }\n      if (o1 != null && o1.getVipAddress() != null) {\n        return -1;\n      }\n      if (o2 != null && o2.getVipAddress() != null) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 723,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 10
      },
      "nodeContext" : "columnComparatorAscMap.put(RegistryTableView.Column.VipAddress,new Comparator<InstanceInfo>(){\n  @Override public int compare(  InstanceInfo o1,  InstanceInfo o2){\n    if (o1 != null && o2 != null && o1.getVipAddress() != null && o2.getVipAddress() != null) {\n      return o1.getVipAddress().compareTo(o2.getVipAddress());\n    }\n    if (o1 != null && o1.getVipAddress() != null) {\n      return 1;\n    }\n    if (o2 != null && o2.getVipAddress() != null) {\n      return -1;\n    }\n    return 0;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 89,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<netflix.admin.eureka.RegistryTableView.Column,java.util.Comparator<com.netflix.eureka2.registry.instance.InstanceInfo>>"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 14,
    "startColumnNumber" : 8,
    "endLineNumber" : 14,
    "endColumnNumber" : 30
  }, {
    "charLength" : 22,
    "startLineNumber" : 30,
    "startColumnNumber" : 8,
    "endLineNumber" : 30,
    "endColumnNumber" : 30
  }, {
    "charLength" : 22,
    "startLineNumber" : 48,
    "startColumnNumber" : 8,
    "endLineNumber" : 48,
    "endColumnNumber" : 30
  }, {
    "charLength" : 22,
    "startLineNumber" : 64,
    "startColumnNumber" : 8,
    "endLineNumber" : 64,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}