{
  "id" : 413,
  "expression" : "this",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/main/java/io/netty/handler/ipfilter/RuleBasedIpFilter.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 73,
      "startColumnNumber" : 8,
      "endLineNumber" : 73,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 29
      },
      "nodeContext" : "this.acceptIfNotFound",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 48
      },
      "nodeContext" : "this.acceptIfNotFound=acceptIfNotFound",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "this.acceptIfNotFound=acceptIfNotFound;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 70,
        "startColumnNumber" : 78,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  requireNonNull(rules,\"rules\");\n  this.acceptIfNotFound=acceptIfNotFound;\n  this.rules=new ArrayList<>(rules.length);\n  for (  IpFilterRule rule : rules) {\n    if (rule != null) {\n      this.rules.add(rule);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create new Instance of  {@link RuleBasedIpFilter} and filter incoming connectionsbased on their IP address and  {@code rules} applied.\n * @param acceptIfNotFound If {@code true} then accept connection from IP Address if itdoesn't match any rule.\n * @param rules            An array of {@link IpFilterRule} containing all rules.\n */\npublic RuleBasedIpFilter(boolean acceptIfNotFound,IpFilterRule... rules){\n  requireNonNull(rules,\"rules\");\n  this.acceptIfNotFound=acceptIfNotFound;\n  this.rules=new ArrayList<>(rules.length);\n  for (  IpFilterRule rule : rules) {\n    if (rule != null) {\n      this.rules.add(rule);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 54,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "this.acceptIfNotFound=acceptIfNotFound;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.ipfilter.RuleBasedIpFilter"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 18
      },
      "nodeContext" : "this.rules",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 50
      },
      "nodeContext" : "this.rules=new ArrayList<>(rules.length)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 51
      },
      "nodeContext" : "this.rules=new ArrayList<>(rules.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 70,
        "startColumnNumber" : 78,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  requireNonNull(rules,\"rules\");\n  this.acceptIfNotFound=acceptIfNotFound;\n  this.rules=new ArrayList<>(rules.length);\n  for (  IpFilterRule rule : rules) {\n    if (rule != null) {\n      this.rules.add(rule);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create new Instance of  {@link RuleBasedIpFilter} and filter incoming connectionsbased on their IP address and  {@code rules} applied.\n * @param acceptIfNotFound If {@code true} then accept connection from IP Address if itdoesn't match any rule.\n * @param rules            An array of {@link IpFilterRule} containing all rules.\n */\npublic RuleBasedIpFilter(boolean acceptIfNotFound,IpFilterRule... rules){\n  requireNonNull(rules,\"rules\");\n  this.acceptIfNotFound=acceptIfNotFound;\n  this.rules=new ArrayList<>(rules.length);\n  for (  IpFilterRule rule : rules) {\n    if (rule != null) {\n      this.rules.add(rule);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 54,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 51
      },
      "nodeContext" : "this.rules=new ArrayList<>(rules.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.ipfilter.RuleBasedIpFilter"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 78,
      "startColumnNumber" : 16,
      "endLineNumber" : 78,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 26
      },
      "nodeContext" : "this.rules",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 36
      },
      "nodeContext" : "this.rules.add(rule)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 37
      },
      "nodeContext" : "this.rules.add(rule);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 77,
        "startColumnNumber" : 30,
        "endLineNumber" : 79,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  this.rules.add(rule);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (rule != null) {\n  this.rules.add(rule);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 76,
        "startColumnNumber" : 40,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (rule != null) {\n    this.rules.add(rule);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (IpFilterRule rule : rules) {\n  if (rule != null) {\n    this.rules.add(rule);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 298,
        "startLineNumber" : 70,
        "startColumnNumber" : 78,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  requireNonNull(rules,\"rules\");\n  this.acceptIfNotFound=acceptIfNotFound;\n  this.rules=new ArrayList<>(rules.length);\n  for (  IpFilterRule rule : rules) {\n    if (rule != null) {\n      this.rules.add(rule);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create new Instance of  {@link RuleBasedIpFilter} and filter incoming connectionsbased on their IP address and  {@code rules} applied.\n * @param acceptIfNotFound If {@code true} then accept connection from IP Address if itdoesn't match any rule.\n * @param rules            An array of {@link IpFilterRule} containing all rules.\n */\npublic RuleBasedIpFilter(boolean acceptIfNotFound,IpFilterRule... rules){\n  requireNonNull(rules,\"rules\");\n  this.acceptIfNotFound=acceptIfNotFound;\n  this.rules=new ArrayList<>(rules.length);\n  for (  IpFilterRule rule : rules) {\n    if (rule != null) {\n      this.rules.add(rule);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 54,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 78,
        "startColumnNumber" : 16,
        "endLineNumber" : 78,
        "endColumnNumber" : 37
      },
      "nodeContext" : "this.rules.add(rule);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.ipfilter.RuleBasedIpFilter"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 73,
    "startColumnNumber" : 8,
    "endLineNumber" : 73,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 78,
    "startColumnNumber" : 16,
    "endLineNumber" : 78,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  } ]
}