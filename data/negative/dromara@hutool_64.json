{
  "id" : 64,
  "expression" : "DateUtil.parse(\"2017-01-02\")",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/test/java/cn/hutool/core/lang/RangeTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DateUtil.parse(\"2017-01-02\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 19,
      "startColumnNumber" : 17,
      "endLineNumber" : 19,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 19,
        "startColumnNumber" : 11,
        "endLineNumber" : 19,
        "endColumnNumber" : 45
      },
      "nodeContext" : "end=DateUtil.parse(\"2017-01-02\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 19,
        "endColumnNumber" : 46
      },
      "nodeContext" : "DateTime end=DateUtil.parse(\"2017-01-02\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 17,
        "startColumnNumber" : 29,
        "endLineNumber" : 33,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  DateTime start=DateUtil.parse(\"2017-01-01\");\n  DateTime end=DateUtil.parse(\"2017-01-02\");\n  final Range<DateTime> range=new Range<>(start,end,(current,end1,index) -> {\n    if (current.isAfterOrEquals(end1)) {\n      return null;\n    }\n    return current.offsetNew(DateField.DAY_OF_YEAR,1);\n  }\n);\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-01\"));\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"));\n  Assert.assertFalse(range.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 16,
        "startColumnNumber" : 1,
        "endLineNumber" : 33,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void dateRangeTest(){\n  DateTime start=DateUtil.parse(\"2017-01-01\");\n  DateTime end=DateUtil.parse(\"2017-01-02\");\n  final Range<DateTime> range=new Range<>(start,end,(current,end1,index) -> {\n    if (current.isAfterOrEquals(end1)) {\n      return null;\n    }\n    return current.offsetNew(DateField.DAY_OF_YEAR,1);\n  }\n);\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-01\"));\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"));\n  Assert.assertFalse(range.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 19,
        "endColumnNumber" : 46
      },
      "nodeContext" : "DateTime end=DateUtil.parse(\"2017-01-02\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "cn.hutool.core.date.DateTime"
  }, {
    "nodeContext" : "DateUtil.parse(\"2017-01-02\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 31,
      "startColumnNumber" : 36,
      "endLineNumber" : 31,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 17,
        "startColumnNumber" : 29,
        "endLineNumber" : 33,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  DateTime start=DateUtil.parse(\"2017-01-01\");\n  DateTime end=DateUtil.parse(\"2017-01-02\");\n  final Range<DateTime> range=new Range<>(start,end,(current,end1,index) -> {\n    if (current.isAfterOrEquals(end1)) {\n      return null;\n    }\n    return current.offsetNew(DateField.DAY_OF_YEAR,1);\n  }\n);\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-01\"));\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"));\n  Assert.assertFalse(range.hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 614,
        "startLineNumber" : 16,
        "startColumnNumber" : 1,
        "endLineNumber" : 33,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void dateRangeTest(){\n  DateTime start=DateUtil.parse(\"2017-01-01\");\n  DateTime end=DateUtil.parse(\"2017-01-02\");\n  final Range<DateTime> range=new Range<>(start,end,(current,end1,index) -> {\n    if (current.isAfterOrEquals(end1)) {\n      return null;\n    }\n    return current.offsetNew(DateField.DAY_OF_YEAR,1);\n  }\n);\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-01\"));\n  Assert.assertTrue(range.hasNext());\n  Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"));\n  Assert.assertFalse(range.hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 31,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Assert.assertEquals(range.next(),DateUtil.parse(\"2017-01-02\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "cn.hutool.core.date.DateTime"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 19,
    "startColumnNumber" : 17,
    "endLineNumber" : 19,
    "endColumnNumber" : 45
  }, {
    "charLength" : 28,
    "startLineNumber" : 31,
    "startColumnNumber" : 36,
    "endLineNumber" : 31,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}