{
  "id" : 229,
  "expression" : "compositeIterable",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/misc/CompositeIteratorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "compositeIterable",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 20,
      "startColumnNumber" : 14,
      "endLineNumber" : 20,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 20,
        "startColumnNumber" : 14,
        "endLineNumber" : 20,
        "endColumnNumber" : 42
      },
      "nodeContext" : "compositeIterable.iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 20,
        "startColumnNumber" : 14,
        "endLineNumber" : 20,
        "endColumnNumber" : 52
      },
      "nodeContext" : "compositeIterable.iterator().hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 20,
        "startColumnNumber" : 2,
        "endLineNumber" : 20,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertFalse(compositeIterable.iterator().hasNext())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 20,
        "startColumnNumber" : 2,
        "endLineNumber" : 20,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertFalse(compositeIterable.iterator().hasNext());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 16,
        "startColumnNumber" : 36,
        "endLineNumber" : 21,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Integer> emptyList=new ArrayList<Integer>();\n  CompositeIterable<Integer> compositeIterable=new CompositeIterable<Integer>(emptyList);\n  assertFalse(compositeIterable.iterator().hasNext());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 15,
        "startColumnNumber" : 1,
        "endLineNumber" : 21,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testHasNextWithEmpty(){\n  List<Integer> emptyList=new ArrayList<Integer>();\n  CompositeIterable<Integer> compositeIterable=new CompositeIterable<Integer>(emptyList);\n  assertFalse(compositeIterable.iterator().hasNext());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 20,
        "startColumnNumber" : 2,
        "endLineNumber" : 20,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertFalse(compositeIterable.iterator().hasNext());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.redisson.misc.CompositeIterable<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 20,
    "startColumnNumber" : 14,
    "endLineNumber" : 20,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}