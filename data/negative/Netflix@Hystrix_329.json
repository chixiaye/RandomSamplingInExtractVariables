{
  "id" : 329,
  "expression" : "cacheKey",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "5c9601ea4bb0230b6c19f71bfd1f24af565645a0",
  "filePath" : "hystrix-core/src/main/java/com/netflix/hystrix/HystrixRequestCache.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cacheKey",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 126,
      "startColumnNumber" : 47,
      "endLineNumber" : 126,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 126,
        "startColumnNumber" : 28,
        "endLineNumber" : 126,
        "endColumnNumber" : 56
      },
      "nodeContext" : "getRequestCacheKey(cacheKey)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 126,
        "startColumnNumber" : 22,
        "endLineNumber" : 126,
        "endColumnNumber" : 56
      },
      "nodeContext" : "key=getRequestCacheKey(cacheKey)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ValueCacheKey key=getRequestCacheKey(cacheKey);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 795,
        "startLineNumber" : 125,
        "startColumnNumber" : 81,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ValueCacheKey key=getRequestCacheKey(cacheKey);\n  if (key != null) {\n    ConcurrentHashMap<ValueCacheKey,Observable<?>> cacheInstance=requestVariableForCache.get(concurrencyStrategy);\n    if (cacheInstance == null) {\n      throw new IllegalStateException(\"Request caching is not available.  Maybe you need to initialize the HystrixRequestContext?\");\n    }\n    Observable<T> alreadySet=(Observable<T>)cacheInstance.putIfAbsent(key,f);\n    if (alreadySet != null) {\n      return alreadySet;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1625,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Put the Future in the cache if it does not already exist. <p> If this method returns a non-null value then another thread won the race and it should be returned instead of proceeding with execution of the new Future.\n * @param cacheKey key as defined by  {@link HystrixCommand#getCacheKey()}\n * @param f Future to be cached\n * @return null if nothing else was in the cache (or this {@link HystrixCommand} does not have a cacheKey) or previous value if another thread beat us to adding to the cache\n */\n@SuppressWarnings({\"unchecked\"}) <T>Observable<T> putIfAbsent(String cacheKey,Observable<T> f){\n  ValueCacheKey key=getRequestCacheKey(cacheKey);\n  if (key != null) {\n    ConcurrentHashMap<ValueCacheKey,Observable<?>> cacheInstance=requestVariableForCache.get(concurrencyStrategy);\n    if (cacheInstance == null) {\n      throw new IllegalStateException(\"Request caching is not available.  Maybe you need to initialize the HystrixRequestContext?\");\n    }\n    Observable<T> alreadySet=(Observable<T>)cacheInstance.putIfAbsent(key,f);\n    if (alreadySet != null) {\n      return alreadySet;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ValueCacheKey key=getRequestCacheKey(cacheKey);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 126,
    "startColumnNumber" : 47,
    "endLineNumber" : 126,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}