{
  "id" : 14,
  "expression" : "i != 9",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i != 9",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 416,
      "startColumnNumber" : 20,
      "endLineNumber" : 416,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 416,
        "startColumnNumber" : 16,
        "endLineNumber" : 418,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (i != 9) {\n  fail(\"Realm.where should fail with illegal argument\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 414,
        "startColumnNumber" : 16,
        "endLineNumber" : 419,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  realm.where(AllTypes.class).equalTo(columnData.get(i),UUID.fromString(TestHelper.generateUUIDString(i))).findAll();\n  if (i != 9) {\n    fail(\"Realm.where should fail with illegal argument\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 414,
        "startColumnNumber" : 12,
        "endLineNumber" : 420,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  realm.where(AllTypes.class).equalTo(columnData.get(i),UUID.fromString(TestHelper.generateUUIDString(i))).findAll();\n  if (i != 9) {\n    fail(\"Realm.where should fail with illegal argument\");\n  }\n}\n catch (IllegalArgumentException ignored) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3183,
        "startLineNumber" : 341,
        "startColumnNumber" : 52,
        "endLineNumber" : 421,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),true).findAll();\n    if (i != 0) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new Date()).findAll();\n    if (i != 1) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),13.37D).findAll();\n    if (i != 2) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),13.3711F).findAll();\n    if (i != 3) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),\"test\").findAll();\n    if (i != 4) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),1337).findAll();\n    if (i != 5) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new byte[]{1,2,3}).findAll();\n    if (i != 6) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new Decimal128(new BigDecimal(i + \"12345\"))).findAll();\n    if (i != 7) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new ObjectId(TestHelper.generateObjectIdHexString(i))).findAll();\n    if (i != 8) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),UUID.fromString(TestHelper.generateUUIDString(i))).findAll();\n    if (i != 9) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 360,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3227,
        "startLineNumber" : 341,
        "startColumnNumber" : 8,
        "endLineNumber" : 421,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < columnData.size(); i++) {\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),true).findAll();\n    if (i != 0) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new Date()).findAll();\n    if (i != 1) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),13.37D).findAll();\n    if (i != 2) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),13.3711F).findAll();\n    if (i != 3) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),\"test\").findAll();\n    if (i != 4) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),1337).findAll();\n    if (i != 5) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new byte[]{1,2,3}).findAll();\n    if (i != 6) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new Decimal128(new BigDecimal(i + \"12345\"))).findAll();\n    if (i != 7) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),new ObjectId(TestHelper.generateObjectIdHexString(i))).findAll();\n    if (i != 8) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    realm.where(AllTypes.class).equalTo(columnData.get(i),UUID.fromString(TestHelper.generateUUIDString(i))).findAll();\n    if (i != 9) {\n      fail(\"Realm.where should fail with illegal argument\");\n    }\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 373,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3273,
        "startLineNumber" : 338,
        "startColumnNumber" : 73,
        "endLineNumber" : 422,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  populateTestRealm();\n  for (int i=0; i < columnData.size(); i++) {\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),true).findAll();\n      if (i != 0) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new Date()).findAll();\n      if (i != 1) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),13.37D).findAll();\n      if (i != 2) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),13.3711F).findAll();\n      if (i != 3) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),\"test\").findAll();\n      if (i != 4) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),1337).findAll();\n      if (i != 5) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new byte[]{1,2,3}).findAll();\n      if (i != 6) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new Decimal128(new BigDecimal(i + \"12345\"))).findAll();\n      if (i != 7) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new ObjectId(TestHelper.generateObjectIdHexString(i))).findAll();\n      if (i != 8) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),UUID.fromString(TestHelper.generateUUIDString(i))).findAll();\n      if (i != 9) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 336,
        "startColumnNumber" : 4,
        "endLineNumber" : 422,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test @Ignore(\"FIXME: See https://github.com/realm/realm-core/issues/4469\") public void where_equalTo_wrongFieldTypeAsInput() throws IOException {\n  populateTestRealm();\n  for (int i=0; i < columnData.size(); i++) {\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),true).findAll();\n      if (i != 0) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new Date()).findAll();\n      if (i != 1) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),13.37D).findAll();\n      if (i != 2) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),13.3711F).findAll();\n      if (i != 3) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),\"test\").findAll();\n      if (i != 4) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),1337).findAll();\n      if (i != 5) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new byte[]{1,2,3}).findAll();\n      if (i != 6) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new Decimal128(new BigDecimal(i + \"12345\"))).findAll();\n      if (i != 7) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),new ObjectId(TestHelper.generateObjectIdHexString(i))).findAll();\n      if (i != 8) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n    try {\n      realm.where(AllTypes.class).equalTo(columnData.get(i),UUID.fromString(TestHelper.generateUUIDString(i))).findAll();\n      if (i != 9) {\n        fail(\"Realm.where should fail with illegal argument\");\n      }\n    }\n catch (    IllegalArgumentException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 388,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 416,
        "startColumnNumber" : 16,
        "endLineNumber" : 418,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (i != 9) {\n  fail(\"Realm.where should fail with illegal argument\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 416,
    "startColumnNumber" : 20,
    "endLineNumber" : 416,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}