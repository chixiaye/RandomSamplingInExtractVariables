{
  "id" : 238,
  "expression" : "results.size()",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/serializer/MultiFieldIntTest_writer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "results.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 35,
      "startColumnNumber" : 41,
      "endLineNumber" : 35,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertEquals(list.size(),results.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Assert.assertEquals(list.size(),results.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 17,
        "startColumnNumber" : 55,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Model> list=new ArrayList<Model>();\n  for (int i=0; i < 1024 * 10; ++i) {\n    Model model=new Model();\n    model.id=1000000 + i;\n    list.add(model);\n  }\n  StringWriter out=new StringWriter();\n  JSONWriter writer=new JSONWriter(out);\n  writer.writeObject(list);\n  writer.close();\n  String text=out.toString();\n  System.out.println(text);\n  List<Model> results=JSON.parseObject(text,new TypeReference<List<Model>>(){\n  }\n);\n  Assert.assertEquals(list.size(),results.size());\n  for (int i=0; i < results.size(); ++i) {\n    Assert.assertEquals(list.get(i).id,results.get(i).id);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_for_big_writer() throws Exception {\n  List<Model> list=new ArrayList<Model>();\n  for (int i=0; i < 1024 * 10; ++i) {\n    Model model=new Model();\n    model.id=1000000 + i;\n    list.add(model);\n  }\n  StringWriter out=new StringWriter();\n  JSONWriter writer=new JSONWriter(out);\n  writer.writeObject(list);\n  writer.close();\n  String text=out.toString();\n  System.out.println(text);\n  List<Model> results=JSON.parseObject(text,new TypeReference<List<Model>>(){\n  }\n);\n  Assert.assertEquals(list.size(),results.size());\n  for (int i=0; i < results.size(); ++i) {\n    Assert.assertEquals(list.get(i).id,results.get(i).id);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Assert.assertEquals(list.size(),results.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "results.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 36,
      "startColumnNumber" : 28,
      "endLineNumber" : 36,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 36,
        "startColumnNumber" : 24,
        "endLineNumber" : 36,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < results.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < results.size(); ++i) {\n  Assert.assertEquals(list.get(i).id,results.get(i).id);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 17,
        "startColumnNumber" : 55,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Model> list=new ArrayList<Model>();\n  for (int i=0; i < 1024 * 10; ++i) {\n    Model model=new Model();\n    model.id=1000000 + i;\n    list.add(model);\n  }\n  StringWriter out=new StringWriter();\n  JSONWriter writer=new JSONWriter(out);\n  writer.writeObject(list);\n  writer.close();\n  String text=out.toString();\n  System.out.println(text);\n  List<Model> results=JSON.parseObject(text,new TypeReference<List<Model>>(){\n  }\n);\n  Assert.assertEquals(list.size(),results.size());\n  for (int i=0; i < results.size(); ++i) {\n    Assert.assertEquals(list.get(i).id,results.get(i).id);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 39,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_for_big_writer() throws Exception {\n  List<Model> list=new ArrayList<Model>();\n  for (int i=0; i < 1024 * 10; ++i) {\n    Model model=new Model();\n    model.id=1000000 + i;\n    list.add(model);\n  }\n  StringWriter out=new StringWriter();\n  JSONWriter writer=new JSONWriter(out);\n  writer.writeObject(list);\n  writer.close();\n  String text=out.toString();\n  System.out.println(text);\n  List<Model> results=JSON.parseObject(text,new TypeReference<List<Model>>(){\n  }\n);\n  Assert.assertEquals(list.size(),results.size());\n  for (int i=0; i < results.size(); ++i) {\n    Assert.assertEquals(list.get(i).id,results.get(i).id);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 36,
        "startColumnNumber" : 24,
        "endLineNumber" : 36,
        "endColumnNumber" : 42
      },
      "nodeContext" : "i < results.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 35,
    "startColumnNumber" : 41,
    "endLineNumber" : 35,
    "endColumnNumber" : 55
  }, {
    "charLength" : 14,
    "startLineNumber" : 36,
    "startColumnNumber" : 28,
    "endLineNumber" : 36,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}