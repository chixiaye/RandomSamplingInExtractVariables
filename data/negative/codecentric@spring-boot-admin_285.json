{
  "id" : 285,
  "expression" : "Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline())",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/InfoUpdaterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 189,
      "startLineNumber" : 75,
      "startColumnNumber" : 30,
      "endLineNumber" : 77,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 15,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 199,
        "startLineNumber" : 75,
        "startColumnNumber" : 20,
        "endLineNumber" : 77,
        "endColumnNumber" : 80
      },
      "nodeContext" : "offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Application offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2596,
        "startLineNumber" : 61,
        "startColumnNumber" : 67,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Registration registration=Registration.create(\"foo\",\"http://health\").build();\n  Application application=Application.create(ApplicationId.of(\"onl\")).register(registration).withEndpoints(Endpoints.single(\"info\",\"info\")).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(application)).verifyComplete();\n  Application noInfo=Application.create(ApplicationId.of(\"noinfo\")).register(registration).withEndpoints(Endpoints.single(\"beans\",\"beans\")).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(noInfo)).verifyComplete();\n  Application offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline());\n  StepVerifier.create(repository.save(offline)).verifyComplete();\n  Application unknown=Application.create(ApplicationId.of(\"unk\")).register(registration).withStatusInfo(StatusInfo.ofUnknown());\n  StepVerifier.create(repository.save(unknown)).verifyComplete();\n  when(applicationOps.getInfo(any(Application.class))).thenReturn(Mono.just(ResponseEntity.ok(singletonMap(\"foo\",\"bar\"))));\n  StepVerifier.create(eventStore).expectSubscription().then(() -> StepVerifier.create(updater.updateInfo(offline.getId())).verifyComplete()).then(() -> StepVerifier.create(updater.updateInfo(unknown.getId())).verifyComplete()).then(() -> StepVerifier.create(updater.updateInfo(noInfo.getId())).verifyComplete()).expectNoEvent(Duration.ofMillis(10L)).then(() -> StepVerifier.create(updater.updateInfo(application.getId())).verifyComplete()).assertNext(event -> assertThat(event).isInstanceOf(ClientApplicationInfoChangedEvent.class)).thenCancel().verify(Duration.ofMillis(500L));\n  StepVerifier.create(repository.find(application.getId())).assertNext(app -> assertThat(app.getInfo()).isEqualTo(Info.from(singletonMap(\"foo\",\"bar\")))).verifyComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 291,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2669,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_update_info_for_online_with_endpoint_only(){\n  Registration registration=Registration.create(\"foo\",\"http://health\").build();\n  Application application=Application.create(ApplicationId.of(\"onl\")).register(registration).withEndpoints(Endpoints.single(\"info\",\"info\")).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(application)).verifyComplete();\n  Application noInfo=Application.create(ApplicationId.of(\"noinfo\")).register(registration).withEndpoints(Endpoints.single(\"beans\",\"beans\")).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(noInfo)).verifyComplete();\n  Application offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline());\n  StepVerifier.create(repository.save(offline)).verifyComplete();\n  Application unknown=Application.create(ApplicationId.of(\"unk\")).register(registration).withStatusInfo(StatusInfo.ofUnknown());\n  StepVerifier.create(repository.save(unknown)).verifyComplete();\n  when(applicationOps.getInfo(any(Application.class))).thenReturn(Mono.just(ResponseEntity.ok(singletonMap(\"foo\",\"bar\"))));\n  StepVerifier.create(eventStore).expectSubscription().then(() -> StepVerifier.create(updater.updateInfo(offline.getId())).verifyComplete()).then(() -> StepVerifier.create(updater.updateInfo(unknown.getId())).verifyComplete()).then(() -> StepVerifier.create(updater.updateInfo(noInfo.getId())).verifyComplete()).expectNoEvent(Duration.ofMillis(10L)).then(() -> StepVerifier.create(updater.updateInfo(application.getId())).verifyComplete()).assertNext(event -> assertThat(event).isInstanceOf(ClientApplicationInfoChangedEvent.class)).thenCancel().verify(Duration.ofMillis(500L));\n  StepVerifier.create(repository.find(application.getId())).assertNext(app -> assertThat(app.getInfo()).isEqualTo(Info.from(singletonMap(\"foo\",\"bar\")))).verifyComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Application offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 10,
    "type" : "de.codecentric.boot.admin.server.domain.entities.Application"
  } ],
  "positionList" : [ {
    "charLength" : 189,
    "startLineNumber" : 75,
    "startColumnNumber" : 30,
    "endLineNumber" : 77,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}