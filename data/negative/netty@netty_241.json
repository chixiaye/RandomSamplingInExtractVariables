{
  "id" : 241,
  "expression" : "\"verification passed.\"",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/test/java/io/netty/handler/ssl/SslContextTrustManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"verification passed.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 93,
      "startColumnNumber" : 38,
      "endLineNumber" : 93,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 60
      },
      "nodeContext" : "\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 91,
        "startColumnNumber" : 25,
        "endLineNumber" : 94,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 56
      },
      "nodeContext" : "fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 261,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 57
      },
      "nodeContext" : "fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 90,
        "startColumnNumber" : 38,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 90,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!expectations[i]) {\n  fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tm.checkServerTrusted(new X509Certificate[]{eecCert},\"RSA\");\n  if (!expectations[i]) {\n    fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 831,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  tm.checkServerTrusted(new X509Certificate[]{eecCert},\"RSA\");\n  if (!expectations[i]) {\n    fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n  }\n}\n catch (CertificateException e) {\n  if (expectations[i]) {\n    fail(String.format(\"Certificate %s was expected to be valid when using CAs %s, but its \" + \"verification failed.\",eecResources[i],Arrays.asList(caResources)));\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 63,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 984,
        "startLineNumber" : 85,
        "startColumnNumber" : 54,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  X509Certificate eecCert=eecCerts[i];\n  assertNotNull(eecCert,\"Cannot use cert \" + eecResources[i]);\n  try {\n    tm.checkServerTrusted(new X509Certificate[]{eecCert},\"RSA\");\n    if (!expectations[i]) {\n      fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n    }\n  }\n catch (  CertificateException e) {\n    if (expectations[i]) {\n      fail(String.format(\"Certificate %s was expected to be valid when using CAs %s, but its \" + \"verification failed.\",eecResources[i],Arrays.asList(caResources)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < eecResources.length; i++) {\n  X509Certificate eecCert=eecCerts[i];\n  assertNotNull(eecCert,\"Cannot use cert \" + eecResources[i]);\n  try {\n    tm.checkServerTrusted(new X509Certificate[]{eecCert},\"RSA\");\n    if (!expectations[i]) {\n      fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n    }\n  }\n catch (  CertificateException e) {\n    if (expectations[i]) {\n      fail(String.format(\"Certificate %s was expected to be valid when using CAs %s, but its \" + \"verification failed.\",eecResources[i],Arrays.asList(caResources)));\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1185,
        "startLineNumber" : 80,
        "startColumnNumber" : 53,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  X509TrustManager tm=getTrustManager(caResources);\n  X509Certificate[] eecCerts=loadCertCollection(eecResources);\n  for (int i=0; i < eecResources.length; i++) {\n    X509Certificate eecCert=eecCerts[i];\n    assertNotNull(eecCert,\"Cannot use cert \" + eecResources[i]);\n    try {\n      tm.checkServerTrusted(new X509Certificate[]{eecCert},\"RSA\");\n      if (!expectations[i]) {\n        fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n      }\n    }\n catch (    CertificateException e) {\n      if (expectations[i]) {\n        fail(String.format(\"Certificate %s was expected to be valid when using CAs %s, but its \" + \"verification failed.\",eecResources[i],Arrays.asList(caResources)));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param caResources an array of paths to CA Certificates in PEM format to load from the classpath (relative to this class).\n * @param eecResources an array of paths to Server Certificates in PEM format in to load from the classpath (relative to this class).\n * @param expectations an array of expecting results for each EEC Server Certificate (the array is expected to have the same length the previous argument, and be arrange in matching order: true means expected to be valid, false otherwise.\n */\nprivate static void runTests(String[] caResources,String[] eecResources,boolean[] expectations) throws Exception {\n  X509TrustManager tm=getTrustManager(caResources);\n  X509Certificate[] eecCerts=loadCertCollection(eecResources);\n  for (int i=0; i < eecResources.length; i++) {\n    X509Certificate eecCert=eecCerts[i];\n    assertNotNull(eecCert,\"Cannot use cert \" + eecResources[i]);\n    try {\n      tm.checkServerTrusted(new X509Certificate[]{eecCert},\"RSA\");\n      if (!expectations[i]) {\n        fail(String.format(\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\",eecResources[i],Arrays.asList(caResources)));\n      }\n    }\n catch (    CertificateException e) {\n      if (expectations[i]) {\n        fail(String.format(\"Certificate %s was expected to be valid when using CAs %s, but its \" + \"verification failed.\",eecResources[i],Arrays.asList(caResources)));\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 60
      },
      "nodeContext" : "\"Certificate %s was expected not to be valid when using CAs %s, but its \" + \"verification passed.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 93,
    "startColumnNumber" : 38,
    "endLineNumber" : 93,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}