{
  "id" : 370,
  "expression" : "System",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowWithBellmanFord.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 102,
      "startColumnNumber" : 4,
      "endLineNumber" : 102,
      "endColumnNumber" : 10
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 14
      },
      "nodeContext" : "System.out",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 95
      },
      "nodeContext" : "System.out.printf(\"Max flow: %d, Min cost: %d\\n\",solver.getMaxFlow(),solver.getMinCost())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 96
      },
      "nodeContext" : "System.out.printf(\"Max flow: %d, Min cost: %d\\n\",solver.getMaxFlow(),solver.getMinCost());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 88,
        "startColumnNumber" : 41,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=6;\n  int s=n - 1;\n  int t=n - 2;\n  MinCostMaxFlowWithBellmanFord solver;\n  solver=new MinCostMaxFlowWithBellmanFord(n,s,t);\n  solver.addEdge(s,1,4,10);\n  solver.addEdge(s,2,2,30);\n  solver.addEdge(1,2,2,10);\n  solver.addEdge(1,t,0,9999);\n  solver.addEdge(2,t,4,10);\n  System.out.printf(\"Max flow: %d, Min cost: %d\\n\",solver.getMaxFlow(),solver.getMinCost());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 504,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void testSmallNetwork(){\n  int n=6;\n  int s=n - 1;\n  int t=n - 2;\n  MinCostMaxFlowWithBellmanFord solver;\n  solver=new MinCostMaxFlowWithBellmanFord(n,s,t);\n  solver.addEdge(s,1,4,10);\n  solver.addEdge(s,2,2,30);\n  solver.addEdge(1,2,2,10);\n  solver.addEdge(1,t,0,9999);\n  solver.addEdge(2,t,4,10);\n  System.out.printf(\"Max flow: %d, Min cost: %d\\n\",solver.getMaxFlow(),solver.getMinCost());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 92,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 96
      },
      "nodeContext" : "System.out.printf(\"Max flow: %d, Min cost: %d\\n\",solver.getMaxFlow(),solver.getMinCost());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.System"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 102,
    "startColumnNumber" : 4,
    "endLineNumber" : 102,
    "endColumnNumber" : 10
  } ],
  "layoutRelationDataList" : [ ]
}