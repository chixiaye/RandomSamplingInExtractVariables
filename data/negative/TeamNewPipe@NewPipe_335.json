{
  "id" : 335,
  "expression" : "length",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 63,
      "startColumnNumber" : 15,
      "endLineNumber" : 63,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 63,
        "startColumnNumber" : 15,
        "endLineNumber" : 63,
        "endColumnNumber" : 25
      },
      "nodeContext" : "length > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (length > 0) {\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  if (read < 1) {\n    amount-=length;\n    break;\n  }\n  out.writeProof(buffer,read);\n  length-=read;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 48,
        "startColumnNumber" : 63,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2398,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void flushAuxiliar(long amount) throws IOException {\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 63,
        "startColumnNumber" : 15,
        "endLineNumber" : 63,
        "endColumnNumber" : 25
      },
      "nodeContext" : "length > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 64,
      "startColumnNumber" : 38,
      "endLineNumber" : 64,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 64,
        "startColumnNumber" : 29,
        "endLineNumber" : 64,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Math.min(length,Integer.MAX_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 64,
        "startColumnNumber" : 23,
        "endLineNumber" : 64,
        "endColumnNumber" : 64
      },
      "nodeContext" : "(int)Math.min(length,Integer.MAX_VALUE)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 64,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 64
      },
      "nodeContext" : "read=(int)Math.min(length,Integer.MAX_VALUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 65
      },
      "nodeContext" : "int read=(int)Math.min(length,Integer.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 63,
        "startColumnNumber" : 27,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  if (read < 1) {\n    amount-=length;\n    break;\n  }\n  out.writeProof(buffer,read);\n  length-=read;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (length > 0) {\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  if (read < 1) {\n    amount-=length;\n    break;\n  }\n  out.writeProof(buffer,read);\n  length-=read;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 48,
        "startColumnNumber" : 63,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2398,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void flushAuxiliar(long amount) throws IOException {\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 65
      },
      "nodeContext" : "int read=(int)Math.min(length,Integer.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 68,
      "startColumnNumber" : 26,
      "endLineNumber" : 68,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 32
      },
      "nodeContext" : "amount-=length",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 33
      },
      "nodeContext" : "amount-=length;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 67,
        "startColumnNumber" : 26,
        "endLineNumber" : 70,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  amount-=length;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 67,
        "startColumnNumber" : 12,
        "endLineNumber" : 70,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (read < 1) {\n  amount-=length;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 63,
        "startColumnNumber" : 27,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  if (read < 1) {\n    amount-=length;\n    break;\n  }\n  out.writeProof(buffer,read);\n  length-=read;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (length > 0) {\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  if (read < 1) {\n    amount-=length;\n    break;\n  }\n  out.writeProof(buffer,read);\n  length-=read;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 48,
        "startColumnNumber" : 63,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2398,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void flushAuxiliar(long amount) throws IOException {\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 33
      },
      "nodeContext" : "amount-=length;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 108,
      "startColumnNumber" : 19,
      "endLineNumber" : 108,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 108,
        "startColumnNumber" : 19,
        "endLineNumber" : 108,
        "endColumnNumber" : 29
      },
      "nodeContext" : "length > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (length > 0) {\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  aux.target.seek(writeOffset);\n  aux.writeProof(buffer,read);\n  writeOffset+=read;\n  readOffset+=read;\n  length-=read;\n  aux.target.seek(readOffset);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 101,
        "startColumnNumber" : 33,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long readOffset=amount;\n  long writeOffset=0;\n  aux.length-=amount;\n  length=aux.length;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    aux.target.seek(writeOffset);\n    aux.writeProof(buffer,read);\n    writeOffset+=read;\n    readOffset+=read;\n    length-=read;\n    aux.target.seek(readOffset);\n  }\n  aux.target.setLength(aux.length);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 752,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (amount < aux.length) {\n  long readOffset=amount;\n  long writeOffset=0;\n  aux.length-=amount;\n  length=aux.length;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    aux.target.seek(writeOffset);\n    aux.writeProof(buffer,read);\n    writeOffset+=read;\n    readOffset+=read;\n    length-=read;\n    aux.target.seek(readOffset);\n  }\n  aux.target.setLength(aux.length);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 48,
        "startColumnNumber" : 63,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2398,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void flushAuxiliar(long amount) throws IOException {\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 108,
        "startColumnNumber" : 19,
        "endLineNumber" : 108,
        "endColumnNumber" : 29
      },
      "nodeContext" : "length > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "length",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 109,
      "startColumnNumber" : 42,
      "endLineNumber" : 109,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 109,
        "startColumnNumber" : 33,
        "endLineNumber" : 109,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Math.min(length,Integer.MAX_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 109,
        "endColumnNumber" : 68
      },
      "nodeContext" : "(int)Math.min(length,Integer.MAX_VALUE)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 68
      },
      "nodeContext" : "read=(int)Math.min(length,Integer.MAX_VALUE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 69
      },
      "nodeContext" : "int read=(int)Math.min(length,Integer.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 108,
        "startColumnNumber" : 31,
        "endLineNumber" : 120,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  aux.target.seek(writeOffset);\n  aux.writeProof(buffer,read);\n  writeOffset+=read;\n  readOffset+=read;\n  length-=read;\n  aux.target.seek(readOffset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (length > 0) {\n  int read=(int)Math.min(length,Integer.MAX_VALUE);\n  read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n  aux.target.seek(writeOffset);\n  aux.writeProof(buffer,read);\n  writeOffset+=read;\n  readOffset+=read;\n  length-=read;\n  aux.target.seek(readOffset);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 101,
        "startColumnNumber" : 33,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long readOffset=amount;\n  long writeOffset=0;\n  aux.length-=amount;\n  length=aux.length;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    aux.target.seek(writeOffset);\n    aux.writeProof(buffer,read);\n    writeOffset+=read;\n    readOffset+=read;\n    length-=read;\n    aux.target.seek(readOffset);\n  }\n  aux.target.setLength(aux.length);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 752,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (amount < aux.length) {\n  long readOffset=amount;\n  long writeOffset=0;\n  aux.length-=amount;\n  length=aux.length;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    aux.target.seek(writeOffset);\n    aux.writeProof(buffer,read);\n    writeOffset+=read;\n    readOffset+=read;\n    length-=read;\n    aux.target.seek(readOffset);\n  }\n  aux.target.setLength(aux.length);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2339,
        "startLineNumber" : 48,
        "startColumnNumber" : 63,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 345,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2398,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void flushAuxiliar(long amount) throws IOException {\n  if (aux.length < 1) {\n    return;\n  }\n  out.flush();\n  aux.flush();\n  boolean underflow=aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer=new byte[COPY_BUFFER_SIZE];\n  aux.target.seek(0);\n  out.target.seek(out.length);\n  long length=amount;\n  while (length > 0) {\n    int read=(int)Math.min(length,Integer.MAX_VALUE);\n    read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n    if (read < 1) {\n      amount-=length;\n      break;\n    }\n    out.writeProof(buffer,read);\n    length-=read;\n  }\n  if (underflow) {\n    if (out.offset >= out.length) {\n      if (aux.offset < amount) {\n        out.offset+=aux.offset;\n        aux.offset=0;\n        out.target.seek(out.offset);\n      }\n else {\n        aux.offset-=amount;\n        out.offset=out.length + amount;\n      }\n    }\n else {\n      aux.offset=0;\n    }\n  }\n else {\n    out.offset+=amount;\n    aux.offset-=amount;\n  }\n  out.length+=amount;\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown=out.length;\n  }\n  if (amount < aux.length) {\n    long readOffset=amount;\n    long writeOffset=0;\n    aux.length-=amount;\n    length=aux.length;\n    while (length > 0) {\n      int read=(int)Math.min(length,Integer.MAX_VALUE);\n      read=aux.target.read(buffer,0,Math.min(read,buffer.length));\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer,read);\n      writeOffset+=read;\n      readOffset+=read;\n      length-=read;\n      aux.target.seek(readOffset);\n    }\n    aux.target.setLength(aux.length);\n    return;\n  }\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH);\n  }\n  aux.reset();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 109,
        "startColumnNumber" : 16,
        "endLineNumber" : 109,
        "endColumnNumber" : 69
      },
      "nodeContext" : "int read=(int)Math.min(length,Integer.MAX_VALUE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 63,
    "startColumnNumber" : 15,
    "endLineNumber" : 63,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 64,
    "startColumnNumber" : 38,
    "endLineNumber" : 64,
    "endColumnNumber" : 44
  }, {
    "charLength" : 6,
    "startLineNumber" : 68,
    "startColumnNumber" : 26,
    "endLineNumber" : 68,
    "endColumnNumber" : 32
  }, {
    "charLength" : 6,
    "startLineNumber" : 108,
    "startColumnNumber" : 19,
    "endLineNumber" : 108,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 109,
    "startColumnNumber" : 42,
    "endLineNumber" : 109,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  } ]
}