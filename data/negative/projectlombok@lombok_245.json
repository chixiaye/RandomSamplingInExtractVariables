{
  "id" : 245,
  "expression" : "\" does not exist.\"",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleSynchronized.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" does not exist.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 83,
      "startColumnNumber" : 54,
      "endLineNumber" : 83,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 83,
        "startColumnNumber" : 28,
        "endLineNumber" : 83,
        "endColumnNumber" : 72
      },
      "nodeContext" : "\"The field \" + lockName + \" does not exist.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 73
      },
      "nodeContext" : "annotationNode.addError(\"The field \" + lockName + \" does not exist.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 74
      },
      "nodeContext" : "annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 82,
        "startColumnNumber" : 18,
        "endLineNumber" : 85,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 82,
        "startColumnNumber" : 3,
        "endLineNumber" : 85,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!autoMake) {\n  annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 81,
        "startColumnNumber" : 74,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!autoMake) {\n    annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n    return;\n  }\n  JCExpression objectType=chainDots(methodNode,\"java\",\"lang\",\"Object\");\n  JCNewArray newObjectArray=maker.NewArray(chainDots(methodNode,\"java\",\"lang\",\"Object\"),List.<JCExpression>of(maker.Literal(Javac.getCtcInt(TypeTags.class,\"INT\"),0)),null);\n  JCVariableDecl fieldDecl=recursiveSetGeneratedBy(maker.VarDef(maker.Modifiers(Flags.PRIVATE | Flags.FINAL | (isStatic ? Flags.STATIC : 0)),methodNode.toName(lockName),objectType,newObjectArray),ast);\n  injectFieldSuppressWarnings(methodNode.up(),fieldDecl);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 829,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 94,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (fieldExists(lockName,methodNode) == MemberExistsResult.NOT_EXISTS) {\n  if (!autoMake) {\n    annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n    return;\n  }\n  JCExpression objectType=chainDots(methodNode,\"java\",\"lang\",\"Object\");\n  JCNewArray newObjectArray=maker.NewArray(chainDots(methodNode,\"java\",\"lang\",\"Object\"),List.<JCExpression>of(maker.Literal(Javac.getCtcInt(TypeTags.class,\"INT\"),0)),null);\n  JCVariableDecl fieldDecl=recursiveSetGeneratedBy(maker.VarDef(maker.Modifiers(Flags.PRIVATE | Flags.FINAL | (isStatic ? Flags.STATIC : 0)),methodNode.toName(lockName),objectType,newObjectArray),ast);\n  injectFieldSuppressWarnings(methodNode.up(),fieldDecl);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2167,
        "startLineNumber" : 54,
        "startColumnNumber" : 117,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,Synchronized.class);\n  JavacNode methodNode=annotationNode.up();\n  if (methodNode == null || methodNode.getKind() != Kind.METHOD || !(methodNode.get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Synchronized is legal only on methods.\");\n    return;\n  }\n  JCMethodDecl method=(JCMethodDecl)methodNode.get();\n  if ((method.mods.flags & Flags.ABSTRACT) != 0) {\n    annotationNode.addError(\"@Synchronized is legal only on concrete methods.\");\n    return;\n  }\n  boolean isStatic=(method.mods.flags & Flags.STATIC) != 0;\n  String lockName=annotation.getInstance().value();\n  boolean autoMake=false;\n  if (lockName.length() == 0) {\n    autoMake=true;\n    lockName=isStatic ? STATIC_LOCK_NAME : INSTANCE_LOCK_NAME;\n  }\n  TreeMaker maker=methodNode.getTreeMaker();\n  if (fieldExists(lockName,methodNode) == MemberExistsResult.NOT_EXISTS) {\n    if (!autoMake) {\n      annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n      return;\n    }\n    JCExpression objectType=chainDots(methodNode,\"java\",\"lang\",\"Object\");\n    JCNewArray newObjectArray=maker.NewArray(chainDots(methodNode,\"java\",\"lang\",\"Object\"),List.<JCExpression>of(maker.Literal(Javac.getCtcInt(TypeTags.class,\"INT\"),0)),null);\n    JCVariableDecl fieldDecl=recursiveSetGeneratedBy(maker.VarDef(maker.Modifiers(Flags.PRIVATE | Flags.FINAL | (isStatic ? Flags.STATIC : 0)),methodNode.toName(lockName),objectType,newObjectArray),ast);\n    injectFieldSuppressWarnings(methodNode.up(),fieldDecl);\n  }\n  if (method.body == null)   return;\n  JCExpression lockNode;\n  if (isStatic) {\n    lockNode=chainDots(methodNode,methodNode.up().getName(),lockName);\n  }\n else {\n    lockNode=maker.Select(maker.Ident(methodNode.toName(\"this\")),methodNode.toName(lockName));\n  }\n  recursiveSetGeneratedBy(lockNode,ast);\n  method.body=setGeneratedBy(maker.Block(0,List.<JCStatement>of(setGeneratedBy(maker.Synchronized(lockNode,method.body),ast))),ast);\n  methodNode.rebuild();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 319,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2283,
        "startLineNumber" : 54,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<Synchronized> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,Synchronized.class);\n  JavacNode methodNode=annotationNode.up();\n  if (methodNode == null || methodNode.getKind() != Kind.METHOD || !(methodNode.get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Synchronized is legal only on methods.\");\n    return;\n  }\n  JCMethodDecl method=(JCMethodDecl)methodNode.get();\n  if ((method.mods.flags & Flags.ABSTRACT) != 0) {\n    annotationNode.addError(\"@Synchronized is legal only on concrete methods.\");\n    return;\n  }\n  boolean isStatic=(method.mods.flags & Flags.STATIC) != 0;\n  String lockName=annotation.getInstance().value();\n  boolean autoMake=false;\n  if (lockName.length() == 0) {\n    autoMake=true;\n    lockName=isStatic ? STATIC_LOCK_NAME : INSTANCE_LOCK_NAME;\n  }\n  TreeMaker maker=methodNode.getTreeMaker();\n  if (fieldExists(lockName,methodNode) == MemberExistsResult.NOT_EXISTS) {\n    if (!autoMake) {\n      annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n      return;\n    }\n    JCExpression objectType=chainDots(methodNode,\"java\",\"lang\",\"Object\");\n    JCNewArray newObjectArray=maker.NewArray(chainDots(methodNode,\"java\",\"lang\",\"Object\"),List.<JCExpression>of(maker.Literal(Javac.getCtcInt(TypeTags.class,\"INT\"),0)),null);\n    JCVariableDecl fieldDecl=recursiveSetGeneratedBy(maker.VarDef(maker.Modifiers(Flags.PRIVATE | Flags.FINAL | (isStatic ? Flags.STATIC : 0)),methodNode.toName(lockName),objectType,newObjectArray),ast);\n    injectFieldSuppressWarnings(methodNode.up(),fieldDecl);\n  }\n  if (method.body == null)   return;\n  JCExpression lockNode;\n  if (isStatic) {\n    lockNode=chainDots(methodNode,methodNode.up().getName(),lockName);\n  }\n else {\n    lockNode=maker.Select(maker.Ident(methodNode.toName(\"this\")),methodNode.toName(lockName));\n  }\n  recursiveSetGeneratedBy(lockNode,ast);\n  method.body=setGeneratedBy(maker.Block(0,List.<JCStatement>of(setGeneratedBy(maker.Synchronized(lockNode,method.body),ast))),ast);\n  methodNode.rebuild();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 74
      },
      "nodeContext" : "annotationNode.addError(\"The field \" + lockName + \" does not exist.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 83,
    "startColumnNumber" : 54,
    "endLineNumber" : 83,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}