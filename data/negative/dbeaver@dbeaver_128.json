{
  "id" : 128,
  "expression" : "e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/sql/task/SQLScriptExecuteHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 97,
      "startLineNumber" : 135,
      "startColumnNumber" : 34,
      "endLineNumber" : 135,
      "endColumnNumber" : 131
    },
    "astNodeNumber" : 13,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 135,
        "startColumnNumber" : 26,
        "endLineNumber" : 135,
        "endColumnNumber" : 131
      },
      "nodeContext" : "error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 132
      },
      "nodeContext" : "Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 134,
        "startColumnNumber" : 34,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n  throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 134,
        "startColumnNumber" : 14,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Throwable e) {\n  Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n  throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 33,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2414,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (InputStream sqlStream=sqlFile.getContents(true)){\n  try (Reader fileReader=new InputStreamReader(sqlStream,sqlFile.getCharset())){\n    String sqlScriptContent=IOUtils.readToString(fileReader);\n    try {\n      for (      DBPDataSourceContainer dataSourceContainer : dataSources) {\n        if (!dataSourceContainer.isConnected()) {\n          dataSourceContainer.connect(monitor,true,true);\n        }\n        DBPDataSource dataSource=dataSourceContainer.getDataSource();\n        if (dataSource == null) {\n          throw new DBException(\"Can't obtain data source connection\");\n        }\n        DBCExecutionContext executionContext=dataSource.getDefaultInstance().getDefaultContext(monitor,false);\n        log.debug(\"> Execute script [\" + filePath + \"] in [\"+ dataSourceContainer.getName()+ \"]\");\n        DBCExecutionContextDefaults contextDefaults=executionContext.getContextDefaults();\n        if (contextDefaults != null) {\n          DBSCatalog defaultCatalog=contextDefaults.getDefaultCatalog();\n          if (defaultCatalog != null) {\n            log.debug(\"> Default catalog: \" + defaultCatalog.getName());\n          }\n          DBSSchema defaultSchema=contextDefaults.getDefaultSchema();\n          if (defaultSchema != null) {\n            log.debug(\"> Default schema: \" + defaultSchema.getName());\n          }\n        }\n        processScript(monitor,task,settings,executionContext,filePath,sqlScriptContent,log,logStream);\n      }\n    }\n catch (    Exception e) {\n      throw new InvocationTargetException(e);\n    }\n  }\n }\n catch (Throwable e) {\n  Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n  throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 210,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2519,
        "startLineNumber" : 99,
        "startColumnNumber" : 58,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  IFile sqlFile=SQLScriptExecuteSettings.getWorkspaceFile(filePath);\n  try (InputStream sqlStream=sqlFile.getContents(true)){\n    try (Reader fileReader=new InputStreamReader(sqlStream,sqlFile.getCharset())){\n      String sqlScriptContent=IOUtils.readToString(fileReader);\n      try {\n        for (        DBPDataSourceContainer dataSourceContainer : dataSources) {\n          if (!dataSourceContainer.isConnected()) {\n            dataSourceContainer.connect(monitor,true,true);\n          }\n          DBPDataSource dataSource=dataSourceContainer.getDataSource();\n          if (dataSource == null) {\n            throw new DBException(\"Can't obtain data source connection\");\n          }\n          DBCExecutionContext executionContext=dataSource.getDefaultInstance().getDefaultContext(monitor,false);\n          log.debug(\"> Execute script [\" + filePath + \"] in [\"+ dataSourceContainer.getName()+ \"]\");\n          DBCExecutionContextDefaults contextDefaults=executionContext.getContextDefaults();\n          if (contextDefaults != null) {\n            DBSCatalog defaultCatalog=contextDefaults.getDefaultCatalog();\n            if (defaultCatalog != null) {\n              log.debug(\"> Default catalog: \" + defaultCatalog.getName());\n            }\n            DBSSchema defaultSchema=contextDefaults.getDefaultSchema();\n            if (defaultSchema != null) {\n              log.debug(\"> Default schema: \" + defaultSchema.getName());\n            }\n          }\n          processScript(monitor,task,settings,executionContext,filePath,sqlScriptContent,log,logStream);\n        }\n      }\n catch (      Exception e) {\n        throw new InvocationTargetException(e);\n      }\n    }\n   }\n catch (  Throwable e) {\n    Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n    throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2569,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String filePath : settings.getScriptFiles()) {\n  IFile sqlFile=SQLScriptExecuteSettings.getWorkspaceFile(filePath);\n  try (InputStream sqlStream=sqlFile.getContents(true)){\n    try (Reader fileReader=new InputStreamReader(sqlStream,sqlFile.getCharset())){\n      String sqlScriptContent=IOUtils.readToString(fileReader);\n      try {\n        for (        DBPDataSourceContainer dataSourceContainer : dataSources) {\n          if (!dataSourceContainer.isConnected()) {\n            dataSourceContainer.connect(monitor,true,true);\n          }\n          DBPDataSource dataSource=dataSourceContainer.getDataSource();\n          if (dataSource == null) {\n            throw new DBException(\"Can't obtain data source connection\");\n          }\n          DBCExecutionContext executionContext=dataSource.getDefaultInstance().getDefaultContext(monitor,false);\n          log.debug(\"> Execute script [\" + filePath + \"] in [\"+ dataSourceContainer.getName()+ \"]\");\n          DBCExecutionContextDefaults contextDefaults=executionContext.getContextDefaults();\n          if (contextDefaults != null) {\n            DBSCatalog defaultCatalog=contextDefaults.getDefaultCatalog();\n            if (defaultCatalog != null) {\n              log.debug(\"> Default catalog: \" + defaultCatalog.getName());\n            }\n            DBSSchema defaultSchema=contextDefaults.getDefaultSchema();\n            if (defaultSchema != null) {\n              log.debug(\"> Default schema: \" + defaultSchema.getName());\n            }\n          }\n          processScript(monitor,task,settings,executionContext,filePath,sqlScriptContent,log,logStream);\n        }\n      }\n catch (      Exception e) {\n        throw new InvocationTargetException(e);\n      }\n    }\n   }\n catch (  Throwable e) {\n    Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n    throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 228,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2664,
        "startLineNumber" : 96,
        "startColumnNumber" : 156,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<DBPDataSourceContainer> dataSources=settings.getDataSources();\n  for (  String filePath : settings.getScriptFiles()) {\n    IFile sqlFile=SQLScriptExecuteSettings.getWorkspaceFile(filePath);\n    try (InputStream sqlStream=sqlFile.getContents(true)){\n      try (Reader fileReader=new InputStreamReader(sqlStream,sqlFile.getCharset())){\n        String sqlScriptContent=IOUtils.readToString(fileReader);\n        try {\n          for (          DBPDataSourceContainer dataSourceContainer : dataSources) {\n            if (!dataSourceContainer.isConnected()) {\n              dataSourceContainer.connect(monitor,true,true);\n            }\n            DBPDataSource dataSource=dataSourceContainer.getDataSource();\n            if (dataSource == null) {\n              throw new DBException(\"Can't obtain data source connection\");\n            }\n            DBCExecutionContext executionContext=dataSource.getDefaultInstance().getDefaultContext(monitor,false);\n            log.debug(\"> Execute script [\" + filePath + \"] in [\"+ dataSourceContainer.getName()+ \"]\");\n            DBCExecutionContextDefaults contextDefaults=executionContext.getContextDefaults();\n            if (contextDefaults != null) {\n              DBSCatalog defaultCatalog=contextDefaults.getDefaultCatalog();\n              if (defaultCatalog != null) {\n                log.debug(\"> Default catalog: \" + defaultCatalog.getName());\n              }\n              DBSSchema defaultSchema=contextDefaults.getDefaultSchema();\n              if (defaultSchema != null) {\n                log.debug(\"> Default schema: \" + defaultSchema.getName());\n              }\n            }\n            processScript(monitor,task,settings,executionContext,filePath,sqlScriptContent,log,logStream);\n          }\n        }\n catch (        Exception e) {\n          throw new InvocationTargetException(e);\n        }\n      }\n     }\n catch (    Throwable e) {\n      Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n      throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2816,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 139,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void runScripts(DBRProgressMonitor monitor,DBTTask task,SQLScriptExecuteSettings settings,Log log,PrintStream logStream) throws DBException {\n  List<DBPDataSourceContainer> dataSources=settings.getDataSources();\n  for (  String filePath : settings.getScriptFiles()) {\n    IFile sqlFile=SQLScriptExecuteSettings.getWorkspaceFile(filePath);\n    try (InputStream sqlStream=sqlFile.getContents(true)){\n      try (Reader fileReader=new InputStreamReader(sqlStream,sqlFile.getCharset())){\n        String sqlScriptContent=IOUtils.readToString(fileReader);\n        try {\n          for (          DBPDataSourceContainer dataSourceContainer : dataSources) {\n            if (!dataSourceContainer.isConnected()) {\n              dataSourceContainer.connect(monitor,true,true);\n            }\n            DBPDataSource dataSource=dataSourceContainer.getDataSource();\n            if (dataSource == null) {\n              throw new DBException(\"Can't obtain data source connection\");\n            }\n            DBCExecutionContext executionContext=dataSource.getDefaultInstance().getDefaultContext(monitor,false);\n            log.debug(\"> Execute script [\" + filePath + \"] in [\"+ dataSourceContainer.getName()+ \"]\");\n            DBCExecutionContextDefaults contextDefaults=executionContext.getContextDefaults();\n            if (contextDefaults != null) {\n              DBSCatalog defaultCatalog=contextDefaults.getDefaultCatalog();\n              if (defaultCatalog != null) {\n                log.debug(\"> Default catalog: \" + defaultCatalog.getName());\n              }\n              DBSSchema defaultSchema=contextDefaults.getDefaultSchema();\n              if (defaultSchema != null) {\n                log.debug(\"> Default schema: \" + defaultSchema.getName());\n              }\n            }\n            processScript(monitor,task,settings,executionContext,filePath,sqlScriptContent,log,logStream);\n          }\n        }\n catch (        Exception e) {\n          throw new InvocationTargetException(e);\n        }\n      }\n     }\n catch (    Throwable e) {\n      Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n      throw new DBException(\"Error executing script '\" + filePath + \"'\",error);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 266,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 132
      },
      "nodeContext" : "Throwable error=e instanceof InvocationTargetException ? ((InvocationTargetException)e).getTargetException() : e;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    },
    "tokenLength" : 6,
    "type" : "java.lang.Throwable"
  } ],
  "positionList" : [ {
    "charLength" : 97,
    "startLineNumber" : 135,
    "startColumnNumber" : 34,
    "endLineNumber" : 135,
    "endColumnNumber" : 131
  } ],
  "layoutRelationDataList" : [ ]
}