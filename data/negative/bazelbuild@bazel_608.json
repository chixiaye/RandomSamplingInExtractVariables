{
  "id" : 608,
  "expression" : "AspectDefinition.Builder",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "14292d176cb85d1cf6e20f79fde0249b0fe6ba24",
  "filePath" : "src/main/java/com/google/devtools/build/lib/packages/StarlarkDefinedAspect.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AspectDefinition.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 134,
      "startColumnNumber" : 4,
      "endLineNumber" : 134,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 28
      },
      "nodeContext" : "AspectDefinition.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 81
      },
      "nodeContext" : "AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2259,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attrName=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n      Preconditions.checkState(!Attribute.isImplicit(attrName));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2328,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attrName=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n      Preconditions.checkState(!Attribute.isImplicit(attrName));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 81
      },
      "nodeContext" : "AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.devtools.build.lib.packages.AspectDefinition.Builder"
  }, {
    "nodeContext" : "AspectDefinition.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 134,
      "startColumnNumber" : 43,
      "endLineNumber" : 134,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 134,
        "startColumnNumber" : 43,
        "endLineNumber" : 134,
        "endColumnNumber" : 67
      },
      "nodeContext" : "AspectDefinition.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 134,
        "startColumnNumber" : 39,
        "endLineNumber" : 134,
        "endColumnNumber" : 80
      },
      "nodeContext" : "new AspectDefinition.Builder(aspectClass)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 134,
        "startColumnNumber" : 29,
        "endLineNumber" : 134,
        "endColumnNumber" : 80
      },
      "nodeContext" : "builder=new AspectDefinition.Builder(aspectClass)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 81
      },
      "nodeContext" : "AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2259,
        "startLineNumber" : 133,
        "startColumnNumber" : 71,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attrName=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n      Preconditions.checkState(!Attribute.isImplicit(attrName));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2328,
        "startLineNumber" : 133,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AspectDefinition getDefinition(AspectParameters aspectParams){\n  AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n  if (ALL_ATTR_ASPECTS.equals(attributeAspects)) {\n    builder.propagateAlongAllAttributes();\n  }\n else {\n    for (    String attributeAspect : attributeAspects) {\n      builder.propagateAlongAttribute(attributeAspect);\n    }\n  }\n  for (  Attribute attribute : attributes) {\n    Attribute attr=attribute;\n    if (!aspectParams.getAttribute(attr.getName()).isEmpty()) {\n      Type<?> attrType=attr.getType();\n      String attrName=attr.getName();\n      String attrValue=aspectParams.getOnlyValueOfAttribute(attrName);\n      Preconditions.checkState(!Attribute.isImplicit(attrName));\n      Preconditions.checkState(attrType == Type.STRING || attrType == Type.INTEGER);\n      Preconditions.checkArgument(aspectParams.getAttribute(attrName).size() == 1,\"Aspect %s parameter %s has %s values (must have exactly 1).\",getName(),attrName,aspectParams.getAttribute(attrName).size());\n      attr=addAttrValue(attr,attrValue);\n    }\n    builder.add(attr);\n  }\n  builder.requireStarlarkProviderSets(requiredProviders);\n  builder.requireAspectsWithProviders(requiredAspectProviders);\n  ImmutableList.Builder<StarlarkProviderIdentifier> advertisedStarlarkProviders=ImmutableList.builder();\n  for (  StarlarkProviderIdentifier provider : provides) {\n    advertisedStarlarkProviders.add(provider);\n  }\n  builder.advertiseProvider(advertisedStarlarkProviders.build());\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(fragments);\n  builder.requiresConfigurationFragmentsByStarlarkBuiltinName(hostTransition,hostFragments);\n  builder.addRequiredToolchains(requiredToolchains);\n  builder.useToolchainTransition(useToolchainTransition);\n  builder.applyToGeneratingRules(applyToGeneratingRules);\n  ImmutableSet.Builder<AspectClass> requiredAspectsClasses=ImmutableSet.builder();\n  for (  StarlarkAspect requiredAspect : requiredAspects) {\n    requiredAspectsClasses.add(requiredAspect.getAspectClass());\n  }\n  builder.requiredAspectClasses(requiredAspectsClasses.build());\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 261,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 81
      },
      "nodeContext" : "AspectDefinition.Builder builder=new AspectDefinition.Builder(aspectClass);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "com.google.devtools.build.lib.packages.AspectDefinition.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 134,
    "startColumnNumber" : 4,
    "endLineNumber" : 134,
    "endColumnNumber" : 28
  }, {
    "charLength" : 24,
    "startLineNumber" : 134,
    "startColumnNumber" : 43,
    "endLineNumber" : 134,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}