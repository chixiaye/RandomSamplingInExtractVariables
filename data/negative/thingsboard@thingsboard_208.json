{
  "id" : 208,
  "expression" : "\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\"",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/service/install/SqlDatabaseUpgradeService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 98,
      "startLineNumber" : 428,
      "startColumnNumber" : 55,
      "endLineNumber" : 428,
      "endColumnNumber" : 153
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 428,
        "startColumnNumber" : 24,
        "endLineNumber" : 428,
        "endColumnNumber" : 154
      },
      "nodeContext" : "conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 428,
        "startColumnNumber" : 24,
        "endLineNumber" : 428,
        "endColumnNumber" : 155
      },
      "nodeContext" : "conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 427,
        "startColumnNumber" : 24,
        "endLineNumber" : 431,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\n  conn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\n  conn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 427,
        "startColumnNumber" : 20,
        "endLineNumber" : 433,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\n  conn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\n  conn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n}\n catch (Exception e) {\n  log.error(\"Failed updating schema!!!\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 425,
        "startColumnNumber" : 99,
        "endLineNumber" : 435,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  log.info(\"Updating schema ...\");\n  try {\n    conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\n    conn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\n    conn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n  }\n catch (  Exception e) {\n    log.error(\"Failed updating schema!!!\",e);\n  }\n  log.info(\"Schema updated.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 425,
        "startColumnNumber" : 16,
        "endLineNumber" : 435,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\n  log.info(\"Updating schema ...\");\n  try {\n    conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\n    conn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\n    conn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n  }\n catch (  Exception e) {\n    log.error(\"Failed updating schema!!!\",e);\n  }\n  log.info(\"Schema updated.\");\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22376,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 474,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (fromVersion) {\ncase \"1.3.0\":  log.info(\"Updating schema ...\");\nPath schemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"1.3.1\",SCHEMA_UPDATE_SQL);\ntry (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nloadSql(schemaUpdateFile,conn);\n}\n log.info(\"Schema updated.\");\nbreak;\ncase \"1.3.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Dumping dashboards ...\");\nPath dashboardsDump=SqlDbHelper.dumpTableIfExists(conn,DASHBOARD,new String[]{ID,TENANT_ID,CUSTOMER_ID,TITLE,SEARCH_TEXT,ASSIGNED_CUSTOMERS,CONFIGURATION},new String[]{\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\"tb-dashboards\",true);\nlog.info(\"Dashboards dumped.\");\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"1.4.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\nlog.info(\"Restoring dashboards ...\");\nif (dashboardsDump != null) {\nSqlDbHelper.loadTable(conn,DASHBOARD,new String[]{ID,TENANT_ID,TITLE,SEARCH_TEXT,CONFIGURATION},dashboardsDump,true);\nDatabaseHelper.upgradeTo40_assignDashboards(dashboardsDump,dashboardService,true);\nFiles.deleteIfExists(dashboardsDump);\n}\nlog.info(\"Dashboards restored.\");\n}\n break;\ncase \"1.4.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.0.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.0.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.1.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.1.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Dumping entity views ...\");\nPath entityViewsDump=SqlDbHelper.dumpTableIfExists(conn,ENTITY_VIEWS,new String[]{ID,ENTITY_ID,ENTITY_TYPE,TENANT_ID,CUSTOMER_ID,TYPE,NAME,KEYS,START_TS,END_TS,SEARCH_TEXT,ADDITIONAL_INFO},new String[]{\"\",\"\",\"\",\"\",\"\",\"default\",\"\",\"\",\"0\",\"0\",\"\",\"\"},\"tb-entity-views\",true);\nlog.info(\"Entity views dumped.\");\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.1.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\nlog.info(\"Restoring entity views ...\");\nif (entityViewsDump != null) {\nSqlDbHelper.loadTable(conn,ENTITY_VIEW,new String[]{ID,ENTITY_ID,ENTITY_TYPE,TENANT_ID,CUSTOMER_ID,TYPE,NAME,KEYS,START_TS,END_TS,SEARCH_TEXT,ADDITIONAL_INFO},entityViewsDump,true);\nFiles.deleteIfExists(entityViewsDump);\n}\nlog.info(\"Entity views restored.\");\n}\n break;\ncase \"2.1.3\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.2.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.3.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.3.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.3.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.4.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD COLUMN label varchar(255)\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE asset ADD COLUMN label varchar(255)\");\n}\n catch (Exception e) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.4.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD CONSTRAINT device_name_unq_key UNIQUE (tenant_id, name)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE device_credentials ADD CONSTRAINT device_credentials_id_unq_key UNIQUE (credentials_id)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE asset ADD CONSTRAINT asset_name_unq_key UNIQUE (tenant_id, name)\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.2\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE alarm ADD COLUMN propagate_relation_types varchar\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.3\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE attribute_kv ADD COLUMN json_v json;\");\n}\n catch (Exception e) {\nif (e instanceof SQLSyntaxErrorException) {\ntry {\nconn.createStatement().execute(\"ALTER TABLE attribute_kv ADD COLUMN json_v varchar(10000000);\");\n}\n catch (Exception e1) {\n}\n}\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE tenant ADD COLUMN isolated_tb_core boolean DEFAULT (false), ADD COLUMN isolated_tb_rule_engine boolean DEFAULT (false)\");\n}\n catch (Exception e) {\n}\ntry {\nlong ts=System.currentTimeMillis();\nconn.createStatement().execute(\"ALTER TABLE event ADD COLUMN ts bigint DEFAULT \" + ts + \";\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.0.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nif (isOldSchema(conn,3000001)) {\nString[] tables=new String[]{\"admin_settings\",\"alarm\",\"asset\",\"audit_log\",\"attribute_kv\",\"component_descriptor\",\"customer\",\"dashboard\",\"device\",\"device_credentials\",\"event\",\"relation\",\"tb_user\",\"tenant\",\"user_credentials\",\"widget_type\",\"widgets_bundle\",\"rule_chain\",\"rule_node\",\"entity_view\"};\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.0.1\",\"schema_update_to_uuid.sql\");\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"call drop_all_idx()\");\nlog.info(\"Optimizing alarm relations...\");\nconn.createStatement().execute(\"DELETE from relation WHERE relation_type_group = 'ALARM' AND relation_type <> 'ALARM_ANY';\");\nconn.createStatement().execute(\"DELETE from relation WHERE relation_type_group = 'ALARM' AND relation_type = 'ALARM_ANY' \" + \"AND exists(SELECT * FROM alarm WHERE alarm.id = relation.to_id AND alarm.originator_id = relation.from_id)\");\nlog.info(\"Alarm relations optimized.\");\nfor (String table : tables) {\nlog.info(\"Updating table {}.\",table);\nStatement statement=conn.createStatement();\nstatement.execute(\"call update_\" + table + \"();\");\nSQLWarning warnings=statement.getWarnings();\nif (warnings != null) {\nlog.info(\"{}\",warnings.getMessage());\nSQLWarning nextWarning=warnings.getNextWarning();\nwhile (nextWarning != null) {\nlog.info(\"{}\",nextWarning.getMessage());\nnextWarning=nextWarning.getNextWarning();\n}\n}\nconn.createStatement().execute(\"DROP PROCEDURE update_\" + table);\nlog.info(\"Table {} updated.\",table);\n}\nconn.createStatement().execute(\"call create_all_idx()\");\nconn.createStatement().execute(\"DROP PROCEDURE drop_all_idx\");\nconn.createStatement().execute(\"DROP PROCEDURE create_all_idx\");\nconn.createStatement().execute(\"DROP FUNCTION column_type_to_uuid\");\nlog.info(\"Updating alarm relations...\");\nconn.createStatement().execute(\"UPDATE relation SET relation_type = 'ANY' WHERE relation_type_group = 'ALARM' AND relation_type = 'ALARM_ANY';\");\nlog.info(\"Alarm relations updated.\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3001000;\");\nconn.createStatement().execute(\"VACUUM FULL\");\n}\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.1.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.1.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nif (isOldSchema(conn,3001000)) {\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD COLUMN device_profile_id uuid, ADD COLUMN device_data jsonb\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE tenant ADD COLUMN tenant_profile_id uuid\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS rule_node_state (\" + \" id uuid NOT NULL CONSTRAINT rule_node_state_pkey PRIMARY KEY,\" + \" created_time bigint NOT NULL,\"+ \" rule_node_id uuid NOT NULL,\"+ \" entity_type varchar(32) NOT NULL,\"+ \" entity_id uuid NOT NULL,\"+ \" state_data varchar(16384) NOT NULL,\"+ \" CONSTRAINT rule_node_state_unq_key UNIQUE (rule_node_id, entity_id),\"+ \" CONSTRAINT fk_rule_node_state_node_id FOREIGN KEY (rule_node_id) REFERENCES rule_node(id) ON DELETE CASCADE)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS api_usage_state (\" + \" id uuid NOT NULL CONSTRAINT usage_record_pkey PRIMARY KEY,\" + \" created_time bigint NOT NULL,\"+ \" tenant_id uuid,\"+ \" entity_type varchar(32),\"+ \" entity_id uuid,\"+ \" transport varchar(32),\"+ \" db_storage varchar(32),\"+ \" re_exec varchar(32),\"+ \" js_exec varchar(32),\"+ \" email_exec varchar(32),\"+ \" sms_exec varchar(32),\"+ \" CONSTRAINT api_usage_state_unq_key UNIQUE (tenant_id, entity_id)\\n\"+ \");\");\n}\n catch (Exception e) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.1\",\"schema_update_before.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Creating default tenant profiles...\");\nsystemDataLoaderService.createDefaultTenantProfiles();\nlog.info(\"Updating tenant profiles...\");\nconn.createStatement().execute(\"call update_tenant_profiles()\");\nlog.info(\"Creating default device profiles...\");\nPageLink pageLink=new PageLink(100);\nPageData<Tenant> pageData;\ndo {\npageData=tenantService.findTenants(pageLink);\nfor (Tenant tenant : pageData.getData()) {\ntry {\napiUsageStateService.createDefaultApiUsageState(tenant.getId(),null);\n}\n catch (Exception e) {\n}\nList<EntitySubtype> deviceTypes=deviceService.findDeviceTypesByTenantId(tenant.getId()).get();\ntry {\ndeviceProfileService.createDefaultDeviceProfile(tenant.getId());\n}\n catch (Exception e) {\n}\nfor (EntitySubtype deviceType : deviceTypes) {\ntry {\ndeviceProfileService.findOrCreateDeviceProfile(tenant.getId(),deviceType.getType());\n}\n catch (Exception e) {\n}\n}\n}\npageLink=pageLink.nextPageLink();\n}\n while (pageData.hasNext());\nlog.info(\"Updating device profiles...\");\nconn.createStatement().execute(\"call update_device_profiles()\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.1\",\"schema_update_after.sql\");\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002000;\");\n}\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.2.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\nconn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.2.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nconn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_audit_log_tenant_id_and_created_time ON audit_log(tenant_id, created_time);\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002002;\");\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.2.2\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE rule_chain ADD COLUMN type varchar(255) DEFAULT 'CORE'\");\n}\n catch (Exception ignored) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Load Edge TTL functions ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",\"schema_update_ttl.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Edge TTL functions successfully loaded!\");\nlog.info(\"Updating indexes and TTL procedure for event table...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",\"schema_update_event.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Updating schema settings...\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3003000;\");\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ndefault:throw new RuntimeException(\"Unable to upgrade SQL database, unsupported fromVersion: \" + fromVersion);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1719,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 22392,
        "startLineNumber" : 105,
        "startColumnNumber" : 69,
        "endLineNumber" : 475,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (fromVersion) {\ncase \"1.3.0\":    log.info(\"Updating schema ...\");\n  Path schemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"1.3.1\",SCHEMA_UPDATE_SQL);\ntry (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\n  loadSql(schemaUpdateFile,conn);\n}\n log.info(\"Schema updated.\");\nbreak;\ncase \"1.3.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Dumping dashboards ...\");\nPath dashboardsDump=SqlDbHelper.dumpTableIfExists(conn,DASHBOARD,new String[]{ID,TENANT_ID,CUSTOMER_ID,TITLE,SEARCH_TEXT,ASSIGNED_CUSTOMERS,CONFIGURATION},new String[]{\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\"tb-dashboards\",true);\nlog.info(\"Dashboards dumped.\");\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"1.4.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\nlog.info(\"Restoring dashboards ...\");\nif (dashboardsDump != null) {\nSqlDbHelper.loadTable(conn,DASHBOARD,new String[]{ID,TENANT_ID,TITLE,SEARCH_TEXT,CONFIGURATION},dashboardsDump,true);\nDatabaseHelper.upgradeTo40_assignDashboards(dashboardsDump,dashboardService,true);\nFiles.deleteIfExists(dashboardsDump);\n}\nlog.info(\"Dashboards restored.\");\n}\n break;\ncase \"1.4.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.0.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.0.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.1.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.1.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Dumping entity views ...\");\nPath entityViewsDump=SqlDbHelper.dumpTableIfExists(conn,ENTITY_VIEWS,new String[]{ID,ENTITY_ID,ENTITY_TYPE,TENANT_ID,CUSTOMER_ID,TYPE,NAME,KEYS,START_TS,END_TS,SEARCH_TEXT,ADDITIONAL_INFO},new String[]{\"\",\"\",\"\",\"\",\"\",\"default\",\"\",\"\",\"0\",\"0\",\"\",\"\"},\"tb-entity-views\",true);\nlog.info(\"Entity views dumped.\");\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.1.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\nlog.info(\"Restoring entity views ...\");\nif (entityViewsDump != null) {\nSqlDbHelper.loadTable(conn,ENTITY_VIEW,new String[]{ID,ENTITY_ID,ENTITY_TYPE,TENANT_ID,CUSTOMER_ID,TYPE,NAME,KEYS,START_TS,END_TS,SEARCH_TEXT,ADDITIONAL_INFO},entityViewsDump,true);\nFiles.deleteIfExists(entityViewsDump);\n}\nlog.info(\"Entity views restored.\");\n}\n break;\ncase \"2.1.3\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.2.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.3.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.3.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.3.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.4.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD COLUMN label varchar(255)\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE asset ADD COLUMN label varchar(255)\");\n}\n catch (Exception e) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.4.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD CONSTRAINT device_name_unq_key UNIQUE (tenant_id, name)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE device_credentials ADD CONSTRAINT device_credentials_id_unq_key UNIQUE (credentials_id)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE asset ADD CONSTRAINT asset_name_unq_key UNIQUE (tenant_id, name)\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.2\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE alarm ADD COLUMN propagate_relation_types varchar\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.3\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE attribute_kv ADD COLUMN json_v json;\");\n}\n catch (Exception e) {\nif (e instanceof SQLSyntaxErrorException) {\ntry {\nconn.createStatement().execute(\"ALTER TABLE attribute_kv ADD COLUMN json_v varchar(10000000);\");\n}\n catch (Exception e1) {\n}\n}\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE tenant ADD COLUMN isolated_tb_core boolean DEFAULT (false), ADD COLUMN isolated_tb_rule_engine boolean DEFAULT (false)\");\n}\n catch (Exception e) {\n}\ntry {\nlong ts=System.currentTimeMillis();\nconn.createStatement().execute(\"ALTER TABLE event ADD COLUMN ts bigint DEFAULT \" + ts + \";\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.0.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nif (isOldSchema(conn,3000001)) {\nString[] tables=new String[]{\"admin_settings\",\"alarm\",\"asset\",\"audit_log\",\"attribute_kv\",\"component_descriptor\",\"customer\",\"dashboard\",\"device\",\"device_credentials\",\"event\",\"relation\",\"tb_user\",\"tenant\",\"user_credentials\",\"widget_type\",\"widgets_bundle\",\"rule_chain\",\"rule_node\",\"entity_view\"};\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.0.1\",\"schema_update_to_uuid.sql\");\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"call drop_all_idx()\");\nlog.info(\"Optimizing alarm relations...\");\nconn.createStatement().execute(\"DELETE from relation WHERE relation_type_group = 'ALARM' AND relation_type <> 'ALARM_ANY';\");\nconn.createStatement().execute(\"DELETE from relation WHERE relation_type_group = 'ALARM' AND relation_type = 'ALARM_ANY' \" + \"AND exists(SELECT * FROM alarm WHERE alarm.id = relation.to_id AND alarm.originator_id = relation.from_id)\");\nlog.info(\"Alarm relations optimized.\");\nfor (String table : tables) {\nlog.info(\"Updating table {}.\",table);\nStatement statement=conn.createStatement();\nstatement.execute(\"call update_\" + table + \"();\");\nSQLWarning warnings=statement.getWarnings();\nif (warnings != null) {\nlog.info(\"{}\",warnings.getMessage());\nSQLWarning nextWarning=warnings.getNextWarning();\nwhile (nextWarning != null) {\nlog.info(\"{}\",nextWarning.getMessage());\nnextWarning=nextWarning.getNextWarning();\n}\n}\nconn.createStatement().execute(\"DROP PROCEDURE update_\" + table);\nlog.info(\"Table {} updated.\",table);\n}\nconn.createStatement().execute(\"call create_all_idx()\");\nconn.createStatement().execute(\"DROP PROCEDURE drop_all_idx\");\nconn.createStatement().execute(\"DROP PROCEDURE create_all_idx\");\nconn.createStatement().execute(\"DROP FUNCTION column_type_to_uuid\");\nlog.info(\"Updating alarm relations...\");\nconn.createStatement().execute(\"UPDATE relation SET relation_type = 'ANY' WHERE relation_type_group = 'ALARM' AND relation_type = 'ALARM_ANY';\");\nlog.info(\"Alarm relations updated.\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3001000;\");\nconn.createStatement().execute(\"VACUUM FULL\");\n}\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.1.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.1.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nif (isOldSchema(conn,3001000)) {\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD COLUMN device_profile_id uuid, ADD COLUMN device_data jsonb\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE tenant ADD COLUMN tenant_profile_id uuid\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS rule_node_state (\" + \" id uuid NOT NULL CONSTRAINT rule_node_state_pkey PRIMARY KEY,\" + \" created_time bigint NOT NULL,\"+ \" rule_node_id uuid NOT NULL,\"+ \" entity_type varchar(32) NOT NULL,\"+ \" entity_id uuid NOT NULL,\"+ \" state_data varchar(16384) NOT NULL,\"+ \" CONSTRAINT rule_node_state_unq_key UNIQUE (rule_node_id, entity_id),\"+ \" CONSTRAINT fk_rule_node_state_node_id FOREIGN KEY (rule_node_id) REFERENCES rule_node(id) ON DELETE CASCADE)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS api_usage_state (\" + \" id uuid NOT NULL CONSTRAINT usage_record_pkey PRIMARY KEY,\" + \" created_time bigint NOT NULL,\"+ \" tenant_id uuid,\"+ \" entity_type varchar(32),\"+ \" entity_id uuid,\"+ \" transport varchar(32),\"+ \" db_storage varchar(32),\"+ \" re_exec varchar(32),\"+ \" js_exec varchar(32),\"+ \" email_exec varchar(32),\"+ \" sms_exec varchar(32),\"+ \" CONSTRAINT api_usage_state_unq_key UNIQUE (tenant_id, entity_id)\\n\"+ \");\");\n}\n catch (Exception e) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.1\",\"schema_update_before.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Creating default tenant profiles...\");\nsystemDataLoaderService.createDefaultTenantProfiles();\nlog.info(\"Updating tenant profiles...\");\nconn.createStatement().execute(\"call update_tenant_profiles()\");\nlog.info(\"Creating default device profiles...\");\nPageLink pageLink=new PageLink(100);\nPageData<Tenant> pageData;\ndo {\npageData=tenantService.findTenants(pageLink);\nfor (Tenant tenant : pageData.getData()) {\ntry {\napiUsageStateService.createDefaultApiUsageState(tenant.getId(),null);\n}\n catch (Exception e) {\n}\nList<EntitySubtype> deviceTypes=deviceService.findDeviceTypesByTenantId(tenant.getId()).get();\ntry {\ndeviceProfileService.createDefaultDeviceProfile(tenant.getId());\n}\n catch (Exception e) {\n}\nfor (EntitySubtype deviceType : deviceTypes) {\ntry {\ndeviceProfileService.findOrCreateDeviceProfile(tenant.getId(),deviceType.getType());\n}\n catch (Exception e) {\n}\n}\n}\npageLink=pageLink.nextPageLink();\n}\n while (pageData.hasNext());\nlog.info(\"Updating device profiles...\");\nconn.createStatement().execute(\"call update_device_profiles()\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.1\",\"schema_update_after.sql\");\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002000;\");\n}\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.2.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\nconn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.2.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nconn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_audit_log_tenant_id_and_created_time ON audit_log(tenant_id, created_time);\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002002;\");\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.2.2\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE rule_chain ADD COLUMN type varchar(255) DEFAULT 'CORE'\");\n}\n catch (Exception ignored) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Load Edge TTL functions ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",\"schema_update_ttl.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Edge TTL functions successfully loaded!\");\nlog.info(\"Updating indexes and TTL procedure for event table...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",\"schema_update_event.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Updating schema settings...\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3003000;\");\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ndefault:throw new RuntimeException(\"Unable to upgrade SQL database, unsupported fromVersion: \" + fromVersion);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1720,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 22471,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 475,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void upgradeDatabase(String fromVersion) throws Exception {\nswitch (fromVersion) {\ncase \"1.3.0\":    log.info(\"Updating schema ...\");\n  Path schemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"1.3.1\",SCHEMA_UPDATE_SQL);\ntry (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\n  loadSql(schemaUpdateFile,conn);\n}\n log.info(\"Schema updated.\");\nbreak;\ncase \"1.3.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Dumping dashboards ...\");\nPath dashboardsDump=SqlDbHelper.dumpTableIfExists(conn,DASHBOARD,new String[]{ID,TENANT_ID,CUSTOMER_ID,TITLE,SEARCH_TEXT,ASSIGNED_CUSTOMERS,CONFIGURATION},new String[]{\"\",\"\",\"\",\"\",\"\",\"\",\"\"},\"tb-dashboards\",true);\nlog.info(\"Dashboards dumped.\");\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"1.4.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\nlog.info(\"Restoring dashboards ...\");\nif (dashboardsDump != null) {\nSqlDbHelper.loadTable(conn,DASHBOARD,new String[]{ID,TENANT_ID,TITLE,SEARCH_TEXT,CONFIGURATION},dashboardsDump,true);\nDatabaseHelper.upgradeTo40_assignDashboards(dashboardsDump,dashboardService,true);\nFiles.deleteIfExists(dashboardsDump);\n}\nlog.info(\"Dashboards restored.\");\n}\n break;\ncase \"1.4.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.0.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.0.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.1.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.1.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Dumping entity views ...\");\nPath entityViewsDump=SqlDbHelper.dumpTableIfExists(conn,ENTITY_VIEWS,new String[]{ID,ENTITY_ID,ENTITY_TYPE,TENANT_ID,CUSTOMER_ID,TYPE,NAME,KEYS,START_TS,END_TS,SEARCH_TEXT,ADDITIONAL_INFO},new String[]{\"\",\"\",\"\",\"\",\"\",\"default\",\"\",\"\",\"0\",\"0\",\"\",\"\"},\"tb-entity-views\",true);\nlog.info(\"Entity views dumped.\");\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.1.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\nlog.info(\"Restoring entity views ...\");\nif (entityViewsDump != null) {\nSqlDbHelper.loadTable(conn,ENTITY_VIEW,new String[]{ID,ENTITY_ID,ENTITY_TYPE,TENANT_ID,CUSTOMER_ID,TYPE,NAME,KEYS,START_TS,END_TS,SEARCH_TEXT,ADDITIONAL_INFO},entityViewsDump,true);\nFiles.deleteIfExists(entityViewsDump);\n}\nlog.info(\"Entity views restored.\");\n}\n break;\ncase \"2.1.3\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.2.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.3.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.3.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.3.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.4.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD COLUMN label varchar(255)\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE asset ADD COLUMN label varchar(255)\");\n}\n catch (Exception e) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"2.4.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD CONSTRAINT device_name_unq_key UNIQUE (tenant_id, name)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE device_credentials ADD CONSTRAINT device_credentials_id_unq_key UNIQUE (credentials_id)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE asset ADD CONSTRAINT asset_name_unq_key UNIQUE (tenant_id, name)\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.2\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE alarm ADD COLUMN propagate_relation_types varchar\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"2.4.3\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE attribute_kv ADD COLUMN json_v json;\");\n}\n catch (Exception e) {\nif (e instanceof SQLSyntaxErrorException) {\ntry {\nconn.createStatement().execute(\"ALTER TABLE attribute_kv ADD COLUMN json_v varchar(10000000);\");\n}\n catch (Exception e1) {\n}\n}\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE tenant ADD COLUMN isolated_tb_core boolean DEFAULT (false), ADD COLUMN isolated_tb_rule_engine boolean DEFAULT (false)\");\n}\n catch (Exception e) {\n}\ntry {\nlong ts=System.currentTimeMillis();\nconn.createStatement().execute(\"ALTER TABLE event ADD COLUMN ts bigint DEFAULT \" + ts + \";\");\n}\n catch (Exception e) {\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.0.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nif (isOldSchema(conn,3000001)) {\nString[] tables=new String[]{\"admin_settings\",\"alarm\",\"asset\",\"audit_log\",\"attribute_kv\",\"component_descriptor\",\"customer\",\"dashboard\",\"device\",\"device_credentials\",\"event\",\"relation\",\"tb_user\",\"tenant\",\"user_credentials\",\"widget_type\",\"widgets_bundle\",\"rule_chain\",\"rule_node\",\"entity_view\"};\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.0.1\",\"schema_update_to_uuid.sql\");\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"call drop_all_idx()\");\nlog.info(\"Optimizing alarm relations...\");\nconn.createStatement().execute(\"DELETE from relation WHERE relation_type_group = 'ALARM' AND relation_type <> 'ALARM_ANY';\");\nconn.createStatement().execute(\"DELETE from relation WHERE relation_type_group = 'ALARM' AND relation_type = 'ALARM_ANY' \" + \"AND exists(SELECT * FROM alarm WHERE alarm.id = relation.to_id AND alarm.originator_id = relation.from_id)\");\nlog.info(\"Alarm relations optimized.\");\nfor (String table : tables) {\nlog.info(\"Updating table {}.\",table);\nStatement statement=conn.createStatement();\nstatement.execute(\"call update_\" + table + \"();\");\nSQLWarning warnings=statement.getWarnings();\nif (warnings != null) {\nlog.info(\"{}\",warnings.getMessage());\nSQLWarning nextWarning=warnings.getNextWarning();\nwhile (nextWarning != null) {\nlog.info(\"{}\",nextWarning.getMessage());\nnextWarning=nextWarning.getNextWarning();\n}\n}\nconn.createStatement().execute(\"DROP PROCEDURE update_\" + table);\nlog.info(\"Table {} updated.\",table);\n}\nconn.createStatement().execute(\"call create_all_idx()\");\nconn.createStatement().execute(\"DROP PROCEDURE drop_all_idx\");\nconn.createStatement().execute(\"DROP PROCEDURE create_all_idx\");\nconn.createStatement().execute(\"DROP FUNCTION column_type_to_uuid\");\nlog.info(\"Updating alarm relations...\");\nconn.createStatement().execute(\"UPDATE relation SET relation_type = 'ANY' WHERE relation_type_group = 'ALARM' AND relation_type = 'ALARM_ANY';\");\nlog.info(\"Alarm relations updated.\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3001000;\");\nconn.createStatement().execute(\"VACUUM FULL\");\n}\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.1.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.0\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.1.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nif (isOldSchema(conn,3001000)) {\ntry {\nconn.createStatement().execute(\"ALTER TABLE device ADD COLUMN device_profile_id uuid, ADD COLUMN device_data jsonb\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"ALTER TABLE tenant ADD COLUMN tenant_profile_id uuid\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS rule_node_state (\" + \" id uuid NOT NULL CONSTRAINT rule_node_state_pkey PRIMARY KEY,\" + \" created_time bigint NOT NULL,\"+ \" rule_node_id uuid NOT NULL,\"+ \" entity_type varchar(32) NOT NULL,\"+ \" entity_id uuid NOT NULL,\"+ \" state_data varchar(16384) NOT NULL,\"+ \" CONSTRAINT rule_node_state_unq_key UNIQUE (rule_node_id, entity_id),\"+ \" CONSTRAINT fk_rule_node_state_node_id FOREIGN KEY (rule_node_id) REFERENCES rule_node(id) ON DELETE CASCADE)\");\n}\n catch (Exception e) {\n}\ntry {\nconn.createStatement().execute(\"CREATE TABLE IF NOT EXISTS api_usage_state (\" + \" id uuid NOT NULL CONSTRAINT usage_record_pkey PRIMARY KEY,\" + \" created_time bigint NOT NULL,\"+ \" tenant_id uuid,\"+ \" entity_type varchar(32),\"+ \" entity_id uuid,\"+ \" transport varchar(32),\"+ \" db_storage varchar(32),\"+ \" re_exec varchar(32),\"+ \" js_exec varchar(32),\"+ \" email_exec varchar(32),\"+ \" sms_exec varchar(32),\"+ \" CONSTRAINT api_usage_state_unq_key UNIQUE (tenant_id, entity_id)\\n\"+ \");\");\n}\n catch (Exception e) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.1\",\"schema_update_before.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Creating default tenant profiles...\");\nsystemDataLoaderService.createDefaultTenantProfiles();\nlog.info(\"Updating tenant profiles...\");\nconn.createStatement().execute(\"call update_tenant_profiles()\");\nlog.info(\"Creating default device profiles...\");\nPageLink pageLink=new PageLink(100);\nPageData<Tenant> pageData;\ndo {\npageData=tenantService.findTenants(pageLink);\nfor (Tenant tenant : pageData.getData()) {\ntry {\napiUsageStateService.createDefaultApiUsageState(tenant.getId(),null);\n}\n catch (Exception e) {\n}\nList<EntitySubtype> deviceTypes=deviceService.findDeviceTypesByTenantId(tenant.getId()).get();\ntry {\ndeviceProfileService.createDefaultDeviceProfile(tenant.getId());\n}\n catch (Exception e) {\n}\nfor (EntitySubtype deviceType : deviceTypes) {\ntry {\ndeviceProfileService.findOrCreateDeviceProfile(tenant.getId(),deviceType.getType());\n}\n catch (Exception e) {\n}\n}\n}\npageLink=pageLink.nextPageLink();\n}\n while (pageData.hasNext());\nlog.info(\"Updating device profiles...\");\nconn.createStatement().execute(\"call update_device_profiles()\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.1.1\",\"schema_update_after.sql\");\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002000;\");\n}\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.2.0\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\nconn.createStatement().execute(\"ALTER TABLE dashboard ALTER COLUMN configuration TYPE varchar;\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002001;\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nlog.info(\"Schema updated.\");\n}\n break;\ncase \"3.2.1\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\nconn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_audit_log_tenant_id_and_created_time ON audit_log(tenant_id, created_time);\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.1\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3002002;\");\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ncase \"3.2.2\":try (Connection conn=DriverManager.getConnection(dbUrl,dbUserName,dbPassword)){\nlog.info(\"Updating schema ...\");\ntry {\nconn.createStatement().execute(\"ALTER TABLE rule_chain ADD COLUMN type varchar(255) DEFAULT 'CORE'\");\n}\n catch (Exception ignored) {\n}\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",SCHEMA_UPDATE_SQL);\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Load Edge TTL functions ...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",\"schema_update_ttl.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Edge TTL functions successfully loaded!\");\nlog.info(\"Updating indexes and TTL procedure for event table...\");\nschemaUpdateFile=Paths.get(installScripts.getDataDir(),\"upgrade\",\"3.2.2\",\"schema_update_event.sql\");\nloadSql(schemaUpdateFile,conn);\nlog.info(\"Updating schema settings...\");\nconn.createStatement().execute(\"UPDATE tb_schema_settings SET schema_version = 3003000;\");\nlog.info(\"Schema updated.\");\n}\n catch (Exception e) {\nlog.error(\"Failed updating schema!!!\",e);\n}\nbreak;\ndefault:throw new RuntimeException(\"Unable to upgrade SQL database, unsupported fromVersion: \" + fromVersion);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1732,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 428,
        "startColumnNumber" : 24,
        "endLineNumber" : 428,
        "endColumnNumber" : 155
      },
      "nodeContext" : "conn.createStatement().execute(\"CREATE INDEX IF NOT EXISTS idx_device_device_profile_id ON device(tenant_id, device_profile_id);\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 17,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 98,
    "startLineNumber" : 428,
    "startColumnNumber" : 55,
    "endLineNumber" : 428,
    "endColumnNumber" : 153
  } ],
  "layoutRelationDataList" : [ ]
}