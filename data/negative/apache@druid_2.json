{
  "id" : 2,
  "expression" : "ServerType.HISTORICAL",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/coordinator/BalanceSegmentsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ServerType.HISTORICAL",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 668,
      "startColumnNumber" : 53,
      "endLineNumber" : 668,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 668,
        "startColumnNumber" : 4,
        "endLineNumber" : 668,
        "endColumnNumber" : 75
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(ServerType.HISTORICAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 668,
        "startColumnNumber" : 4,
        "endLineNumber" : 668,
        "endColumnNumber" : 86
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(ServerType.HISTORICAL).anyTimes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 668,
        "startColumnNumber" : 4,
        "endLineNumber" : 668,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(ServerType.HISTORICAL).anyTimes();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 661,
        "startColumnNumber" : 2,
        "endLineNumber" : 676,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  EasyMock.expect(druidServer.getName()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getTier()).andReturn(tier).anyTimes();\n  EasyMock.expect(druidServer.getCurrSize()).andReturn(currentSize).atLeastOnce();\n  EasyMock.expect(druidServer.getMaxSize()).andReturn(maxSize).atLeastOnce();\n  ImmutableDruidServerTests.expectSegments(druidServer,segments);\n  EasyMock.expect(druidServer.getHost()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getType()).andReturn(ServerType.HISTORICAL).anyTimes();\n  if (!segments.isEmpty()) {\n    segments.forEach(s -> EasyMock.expect(druidServer.getSegment(s.getId())).andReturn(s).anyTimes());\n  }\n  EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n  EasyMock.replay(druidServer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1026,
        "startLineNumber" : 653,
        "startColumnNumber" : 2,
        "endLineNumber" : 676,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void mockDruidServer(ImmutableDruidServer druidServer,String name,String tier,long currentSize,long maxSize,List<DataSegment> segments){\n  EasyMock.expect(druidServer.getName()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getTier()).andReturn(tier).anyTimes();\n  EasyMock.expect(druidServer.getCurrSize()).andReturn(currentSize).atLeastOnce();\n  EasyMock.expect(druidServer.getMaxSize()).andReturn(maxSize).atLeastOnce();\n  ImmutableDruidServerTests.expectSegments(druidServer,segments);\n  EasyMock.expect(druidServer.getHost()).andReturn(name).anyTimes();\n  EasyMock.expect(druidServer.getType()).andReturn(ServerType.HISTORICAL).anyTimes();\n  if (!segments.isEmpty()) {\n    segments.forEach(s -> EasyMock.expect(druidServer.getSegment(s.getId())).andReturn(s).anyTimes());\n  }\n  EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n  EasyMock.replay(druidServer);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 668,
        "startColumnNumber" : 4,
        "endLineNumber" : 668,
        "endColumnNumber" : 87
      },
      "nodeContext" : "EasyMock.expect(druidServer.getType()).andReturn(ServerType.HISTORICAL).anyTimes();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "org.apache.druid.server.coordination.ServerType"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 668,
    "startColumnNumber" : 53,
    "endLineNumber" : 668,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}