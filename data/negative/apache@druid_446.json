{
  "id" : 446,
  "expression" : "logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/log/FileRequestLoggerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 74,
      "startLineNumber" : 69,
      "startColumnNumber" : 22,
      "endLineNumber" : 69,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Assert.assertTrue(logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Assert.assertTrue(logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ObjectMapper objectMapper=new ObjectMapper();\n  DateTime dateTime=DateTimes.nowUtc();\n  File logDir=temporaryFolder.newFolder();\n  String nativeQueryLogString=dateTime + \"\\t\" + HOST+ \"\\t\"+ \"native\";\n  String sqlQueryLogString=dateTime + \"\\t\" + HOST+ \"\\t\"+ \"sql\";\n  FileRequestLogger fileRequestLogger=new FileRequestLogger(objectMapper,scheduler,logDir,\"yyyy-MM-dd'.log'\");\n  fileRequestLogger.start();\n  RequestLogLine nativeRequestLogLine=EasyMock.createMock(RequestLogLine.class);\n  EasyMock.expect(nativeRequestLogLine.getNativeQueryLine(EasyMock.anyObject())).andReturn(nativeQueryLogString).anyTimes();\n  RequestLogLine sqlRequestLogLine=EasyMock.createMock(RequestLogLine.class);\n  EasyMock.expect(sqlRequestLogLine.getSqlQueryLine(EasyMock.anyObject())).andReturn(sqlQueryLogString).anyTimes();\n  EasyMock.replay(nativeRequestLogLine,sqlRequestLogLine);\n  fileRequestLogger.logNativeQuery(nativeRequestLogLine);\n  fileRequestLogger.logSqlQuery(sqlRequestLogLine);\n  File logFile=new File(logDir,dateTime.toString(\"yyyy-MM-dd'.log'\"));\n  String logString=CharStreams.toString(Files.newBufferedReader(logFile.toPath(),StandardCharsets.UTF_8));\n  Assert.assertTrue(logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\"));\n  fileRequestLogger.stop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1399,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testLog() throws Exception {\n  ObjectMapper objectMapper=new ObjectMapper();\n  DateTime dateTime=DateTimes.nowUtc();\n  File logDir=temporaryFolder.newFolder();\n  String nativeQueryLogString=dateTime + \"\\t\" + HOST+ \"\\t\"+ \"native\";\n  String sqlQueryLogString=dateTime + \"\\t\" + HOST+ \"\\t\"+ \"sql\";\n  FileRequestLogger fileRequestLogger=new FileRequestLogger(objectMapper,scheduler,logDir,\"yyyy-MM-dd'.log'\");\n  fileRequestLogger.start();\n  RequestLogLine nativeRequestLogLine=EasyMock.createMock(RequestLogLine.class);\n  EasyMock.expect(nativeRequestLogLine.getNativeQueryLine(EasyMock.anyObject())).andReturn(nativeQueryLogString).anyTimes();\n  RequestLogLine sqlRequestLogLine=EasyMock.createMock(RequestLogLine.class);\n  EasyMock.expect(sqlRequestLogLine.getSqlQueryLine(EasyMock.anyObject())).andReturn(sqlQueryLogString).anyTimes();\n  EasyMock.replay(nativeRequestLogLine,sqlRequestLogLine);\n  fileRequestLogger.logNativeQuery(nativeRequestLogLine);\n  fileRequestLogger.logSqlQuery(sqlRequestLogLine);\n  File logFile=new File(logDir,dateTime.toString(\"yyyy-MM-dd'.log'\"));\n  String logString=CharStreams.toString(Files.newBufferedReader(logFile.toPath(),StandardCharsets.UTF_8));\n  Assert.assertTrue(logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\"));\n  fileRequestLogger.stop();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Assert.assertTrue(logString.contains(nativeQueryLogString + \"\\n\" + sqlQueryLogString+ \"\\n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 74,
    "startLineNumber" : 69,
    "startColumnNumber" : 22,
    "endLineNumber" : 69,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}