{
  "id" : 14,
  "expression" : "c == ','",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/thirdparty/publicsuffix/TrieParser.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "c == ','",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 65,
      "startColumnNumber" : 58,
      "endLineNumber" : 65,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "c == '&' || c == '?' || c == '!' || c == ':' || c == ','",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 65,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  c=encoded.charAt(idx);\n  if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (; idx < encodedLen; idx++) {\n  c=encoded.charAt(idx);\n  if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 56,
        "startColumnNumber" : 62,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int encodedLen=encoded.length();\n  int idx=start;\n  char c='\\0';\n  for (; idx < encodedLen; idx++) {\n    c=encoded.charAt(idx);\n    if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n      break;\n    }\n  }\n  stack.push(reverse(encoded.subSequence(start,idx)));\n  if (c == '!' || c == '?' || c == ':' || c == ',') {\n    String domain=PREFIX_JOINER.join(stack);\n    if (domain.length() > 0) {\n      builder.put(domain,PublicSuffixType.fromCode(c));\n    }\n  }\n  idx++;\n  if (c != '?' && c != ',') {\n    while (idx < encodedLen) {\n      idx+=doParseTrieToBuilder(stack,encoded,idx,builder);\n      if (encoded.charAt(idx) == '?' || encoded.charAt(idx) == ',') {\n        idx++;\n        break;\n      }\n    }\n  }\n  stack.pop();\n  return idx - start;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2088,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trie node and returns the number of characters consumed.\n * @param stack The prefixes that precede the characters represented by this node. Each entry ofthe stack is in reverse order.\n * @param encoded The serialized trie.\n * @param start An index in the encoded serialized trie to begin reading characters from.\n * @param builder A map builder to which all entries will be added.\n * @return The number of characters consumed from {@code encoded}.\n */\nprivate static int doParseTrieToBuilder(Deque<CharSequence> stack,CharSequence encoded,int start,ImmutableMap.Builder<String,PublicSuffixType> builder){\n  int encodedLen=encoded.length();\n  int idx=start;\n  char c='\\0';\n  for (; idx < encodedLen; idx++) {\n    c=encoded.charAt(idx);\n    if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n      break;\n    }\n  }\n  stack.push(reverse(encoded.subSequence(start,idx)));\n  if (c == '!' || c == '?' || c == ':' || c == ',') {\n    String domain=PREFIX_JOINER.join(stack);\n    if (domain.length() > 0) {\n      builder.put(domain,PublicSuffixType.fromCode(c));\n    }\n  }\n  idx++;\n  if (c != '?' && c != ',') {\n    while (idx < encodedLen) {\n      idx+=doParseTrieToBuilder(stack,encoded,idx,builder);\n      if (encoded.charAt(idx) == '?' || encoded.charAt(idx) == ',') {\n        idx++;\n        break;\n      }\n    }\n  }\n  stack.pop();\n  return idx - start;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 66
      },
      "nodeContext" : "c == '&' || c == '?' || c == '!' || c == ':' || c == ','",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  }, {
    "nodeContext" : "c == ','",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 72,
      "startColumnNumber" : 44,
      "endLineNumber" : 72,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 52
      },
      "nodeContext" : "c == '!' || c == '?' || c == ':' || c == ','",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 546,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (c == '!' || c == '?' || c == ':' || c == ',') {\n  String domain=PREFIX_JOINER.join(stack);\n  if (domain.length() > 0) {\n    builder.put(domain,PublicSuffixType.fromCode(c));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 56,
        "startColumnNumber" : 62,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int encodedLen=encoded.length();\n  int idx=start;\n  char c='\\0';\n  for (; idx < encodedLen; idx++) {\n    c=encoded.charAt(idx);\n    if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n      break;\n    }\n  }\n  stack.push(reverse(encoded.subSequence(start,idx)));\n  if (c == '!' || c == '?' || c == ':' || c == ',') {\n    String domain=PREFIX_JOINER.join(stack);\n    if (domain.length() > 0) {\n      builder.put(domain,PublicSuffixType.fromCode(c));\n    }\n  }\n  idx++;\n  if (c != '?' && c != ',') {\n    while (idx < encodedLen) {\n      idx+=doParseTrieToBuilder(stack,encoded,idx,builder);\n      if (encoded.charAt(idx) == '?' || encoded.charAt(idx) == ',') {\n        idx++;\n        break;\n      }\n    }\n  }\n  stack.pop();\n  return idx - start;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2088,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 97,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trie node and returns the number of characters consumed.\n * @param stack The prefixes that precede the characters represented by this node. Each entry ofthe stack is in reverse order.\n * @param encoded The serialized trie.\n * @param start An index in the encoded serialized trie to begin reading characters from.\n * @param builder A map builder to which all entries will be added.\n * @return The number of characters consumed from {@code encoded}.\n */\nprivate static int doParseTrieToBuilder(Deque<CharSequence> stack,CharSequence encoded,int start,ImmutableMap.Builder<String,PublicSuffixType> builder){\n  int encodedLen=encoded.length();\n  int idx=start;\n  char c='\\0';\n  for (; idx < encodedLen; idx++) {\n    c=encoded.charAt(idx);\n    if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {\n      break;\n    }\n  }\n  stack.push(reverse(encoded.subSequence(start,idx)));\n  if (c == '!' || c == '?' || c == ':' || c == ',') {\n    String domain=PREFIX_JOINER.join(stack);\n    if (domain.length() > 0) {\n      builder.put(domain,PublicSuffixType.fromCode(c));\n    }\n  }\n  idx++;\n  if (c != '?' && c != ',') {\n    while (idx < encodedLen) {\n      idx+=doParseTrieToBuilder(stack,encoded,idx,builder);\n      if (encoded.charAt(idx) == '?' || encoded.charAt(idx) == ',') {\n        idx++;\n        break;\n      }\n    }\n  }\n  stack.pop();\n  return idx - start;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 52
      },
      "nodeContext" : "c == '!' || c == '?' || c == ':' || c == ','",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 65,
    "startColumnNumber" : 58,
    "endLineNumber" : 65,
    "endColumnNumber" : 66
  }, {
    "charLength" : 8,
    "startLineNumber" : 72,
    "startColumnNumber" : 44,
    "endLineNumber" : 72,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}