{
  "id" : 122,
  "expression" : "args",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/CountSqlAggregator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "args",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 113,
      "startColumnNumber" : 8,
      "endLineNumber" : 113,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 20
      },
      "nodeContext" : "args == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (args == null) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DruidExpression> args=Aggregations.getArgumentsForSimpleAggregator(plannerContext,rowSignature,aggregateCall,project);\n  if (args == null) {\n    return null;\n  }\n  if (args.isEmpty()) {\n    return Aggregation.create(new CountAggregatorFactory(name));\n  }\n else   if (aggregateCall.isDistinct()) {\n    if (plannerContext.getPlannerConfig().isUseApproximateCountDistinct()) {\n      return APPROX_COUNT_DISTINCT.toDruidAggregation(plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,name,aggregateCall,project,existingAggregations,finalizeAggregations);\n    }\n else {\n      return null;\n    }\n  }\n else {\n    AggregatorFactory theCount=createCountAggregatorFactory(name,plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,aggregateCall,project);\n    return Aggregation.create(theCount);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1656,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public Aggregation toDruidAggregation(final PlannerContext plannerContext,final RowSignature rowSignature,final VirtualColumnRegistry virtualColumnRegistry,final RexBuilder rexBuilder,final String name,final AggregateCall aggregateCall,final Project project,final List<Aggregation> existingAggregations,final boolean finalizeAggregations){\n  final List<DruidExpression> args=Aggregations.getArgumentsForSimpleAggregator(plannerContext,rowSignature,aggregateCall,project);\n  if (args == null) {\n    return null;\n  }\n  if (args.isEmpty()) {\n    return Aggregation.create(new CountAggregatorFactory(name));\n  }\n else   if (aggregateCall.isDistinct()) {\n    if (plannerContext.getPlannerConfig().isUseApproximateCountDistinct()) {\n      return APPROX_COUNT_DISTINCT.toDruidAggregation(plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,name,aggregateCall,project,existingAggregations,finalizeAggregations);\n    }\n else {\n      return null;\n    }\n  }\n else {\n    AggregatorFactory theCount=createCountAggregatorFactory(name,plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,aggregateCall,project);\n    return Aggregation.create(theCount);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 20
      },
      "nodeContext" : "args == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.sql.calcite.expression.DruidExpression>"
  }, {
    "nodeContext" : "args",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 117,
      "startColumnNumber" : 8,
      "endLineNumber" : 117,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 22
      },
      "nodeContext" : "args.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (args.isEmpty()) {\n  return Aggregation.create(new CountAggregatorFactory(name));\n}\n else if (aggregateCall.isDistinct()) {\n  if (plannerContext.getPlannerConfig().isUseApproximateCountDistinct()) {\n    return APPROX_COUNT_DISTINCT.toDruidAggregation(plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,name,aggregateCall,project,existingAggregations,finalizeAggregations);\n  }\n else {\n    return null;\n  }\n}\n else {\n  AggregatorFactory theCount=createCountAggregatorFactory(name,plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,aggregateCall,project);\n  return Aggregation.create(theCount);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1225,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DruidExpression> args=Aggregations.getArgumentsForSimpleAggregator(plannerContext,rowSignature,aggregateCall,project);\n  if (args == null) {\n    return null;\n  }\n  if (args.isEmpty()) {\n    return Aggregation.create(new CountAggregatorFactory(name));\n  }\n else   if (aggregateCall.isDistinct()) {\n    if (plannerContext.getPlannerConfig().isUseApproximateCountDistinct()) {\n      return APPROX_COUNT_DISTINCT.toDruidAggregation(plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,name,aggregateCall,project,existingAggregations,finalizeAggregations);\n    }\n else {\n      return null;\n    }\n  }\n else {\n    AggregatorFactory theCount=createCountAggregatorFactory(name,plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,aggregateCall,project);\n    return Aggregation.create(theCount);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1656,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Nullable @Override public Aggregation toDruidAggregation(final PlannerContext plannerContext,final RowSignature rowSignature,final VirtualColumnRegistry virtualColumnRegistry,final RexBuilder rexBuilder,final String name,final AggregateCall aggregateCall,final Project project,final List<Aggregation> existingAggregations,final boolean finalizeAggregations){\n  final List<DruidExpression> args=Aggregations.getArgumentsForSimpleAggregator(plannerContext,rowSignature,aggregateCall,project);\n  if (args == null) {\n    return null;\n  }\n  if (args.isEmpty()) {\n    return Aggregation.create(new CountAggregatorFactory(name));\n  }\n else   if (aggregateCall.isDistinct()) {\n    if (plannerContext.getPlannerConfig().isUseApproximateCountDistinct()) {\n      return APPROX_COUNT_DISTINCT.toDruidAggregation(plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,name,aggregateCall,project,existingAggregations,finalizeAggregations);\n    }\n else {\n      return null;\n    }\n  }\n else {\n    AggregatorFactory theCount=createCountAggregatorFactory(name,plannerContext,rowSignature,virtualColumnRegistry,rexBuilder,aggregateCall,project);\n    return Aggregation.create(theCount);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 22
      },
      "nodeContext" : "args.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.sql.calcite.expression.DruidExpression>"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 113,
    "startColumnNumber" : 8,
    "endLineNumber" : 113,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 117,
    "startColumnNumber" : 8,
    "endLineNumber" : 117,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}