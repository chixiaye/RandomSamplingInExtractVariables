{
  "id" : 438,
  "expression" : "annotation.annotationType().getName()",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/security/stapler/DoActionFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotation.annotationType().getName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 99,
      "startColumnNumber" : 86,
      "endLineNumber" : 99,
      "endColumnNumber" : 123
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 99,
        "startColumnNumber" : 20,
        "endLineNumber" : 99,
        "endColumnNumber" : 124
      },
      "nodeContext" : "WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 99,
        "startColumnNumber" : 16,
        "endLineNumber" : 101,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 98,
        "startColumnNumber" : 65,
        "endLineNumber" : 102,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 98,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Annotation annotation : perParameterAnnotation) {\n  if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n    return true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 97,
        "startColumnNumber" : 80,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Annotation annotation : perParameterAnnotation) {\n    if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Annotation[] perParameterAnnotation : m.getParameterAnnotations()) {\n  for (  Annotation annotation : perParameterAnnotation) {\n    if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n      return true;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3400,
        "startLineNumber" : 52,
        "startColumnNumber" : 45,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (m.getAnnotation(StaplerNotDispatchable.class) != null) {\n    return false;\n  }\n  if (m.getAnnotation(StaplerDispatchable.class) != null) {\n    return true;\n  }\n  String methodName=m.getName();\n  String signature=m.getSignature();\n  ExtensionList<RoutingDecisionProvider> whitelistProviders=ExtensionList.lookup(RoutingDecisionProvider.class);\n  if (whitelistProviders.size() > 0) {\n    for (    RoutingDecisionProvider provider : whitelistProviders) {\n      RoutingDecisionProvider.Decision methodDecision=provider.decide(signature);\n      if (methodDecision == RoutingDecisionProvider.Decision.ACCEPTED) {\n        LOGGER.log(Level.CONFIG,\"Action \" + signature + \" is acceptable because it is whitelisted by \"+ provider);\n        return true;\n      }\n      if (methodDecision == RoutingDecisionProvider.Decision.REJECTED) {\n        LOGGER.log(Level.CONFIG,\"Action \" + signature + \" is not acceptable because it is blacklisted by \"+ provider);\n        return false;\n      }\n    }\n  }\n  if (methodName.equals(\"doDynamic\")) {\n    return false;\n  }\n  for (  Annotation a : m.getAnnotations()) {\n    if (WebMethodConstants.WEB_METHOD_ANNOTATION_NAMES.contains(a.annotationType().getName())) {\n      return true;\n    }\n    if (a.annotationType().getAnnotation(InterceptorAnnotation.class) != null) {\n      return true;\n    }\n  }\n  for (  Annotation[] perParameterAnnotation : m.getParameterAnnotations()) {\n    for (    Annotation annotation : perParameterAnnotation) {\n      if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n        return true;\n      }\n    }\n  }\n  if (!DO_METHOD_REGEX.matcher(methodName).matches()) {\n    return false;\n  }\n  for (  Class<?> parameterType : m.getParameterTypes()) {\n    if (WebMethodConstants.WEB_METHOD_PARAMETERS_NAMES.contains(parameterType.getName())) {\n      return true;\n    }\n  }\n  Class<?> returnType=m.getReturnType();\n  if (HttpResponse.class.isAssignableFrom(returnType)) {\n    return true;\n  }\n  Class<?>[] checkedExceptionTypes=m.getCheckedExceptionTypes();\n  for (  Class<?> checkedExceptionType : checkedExceptionTypes) {\n    if (HttpResponse.class.isAssignableFrom(checkedExceptionType)) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3441,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean keep(@NonNull Function m){\n  if (m.getAnnotation(StaplerNotDispatchable.class) != null) {\n    return false;\n  }\n  if (m.getAnnotation(StaplerDispatchable.class) != null) {\n    return true;\n  }\n  String methodName=m.getName();\n  String signature=m.getSignature();\n  ExtensionList<RoutingDecisionProvider> whitelistProviders=ExtensionList.lookup(RoutingDecisionProvider.class);\n  if (whitelistProviders.size() > 0) {\n    for (    RoutingDecisionProvider provider : whitelistProviders) {\n      RoutingDecisionProvider.Decision methodDecision=provider.decide(signature);\n      if (methodDecision == RoutingDecisionProvider.Decision.ACCEPTED) {\n        LOGGER.log(Level.CONFIG,\"Action \" + signature + \" is acceptable because it is whitelisted by \"+ provider);\n        return true;\n      }\n      if (methodDecision == RoutingDecisionProvider.Decision.REJECTED) {\n        LOGGER.log(Level.CONFIG,\"Action \" + signature + \" is not acceptable because it is blacklisted by \"+ provider);\n        return false;\n      }\n    }\n  }\n  if (methodName.equals(\"doDynamic\")) {\n    return false;\n  }\n  for (  Annotation a : m.getAnnotations()) {\n    if (WebMethodConstants.WEB_METHOD_ANNOTATION_NAMES.contains(a.annotationType().getName())) {\n      return true;\n    }\n    if (a.annotationType().getAnnotation(InterceptorAnnotation.class) != null) {\n      return true;\n    }\n  }\n  for (  Annotation[] perParameterAnnotation : m.getParameterAnnotations()) {\n    for (    Annotation annotation : perParameterAnnotation) {\n      if (WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {\n        return true;\n      }\n    }\n  }\n  if (!DO_METHOD_REGEX.matcher(methodName).matches()) {\n    return false;\n  }\n  for (  Class<?> parameterType : m.getParameterTypes()) {\n    if (WebMethodConstants.WEB_METHOD_PARAMETERS_NAMES.contains(parameterType.getName())) {\n      return true;\n    }\n  }\n  Class<?> returnType=m.getReturnType();\n  if (HttpResponse.class.isAssignableFrom(returnType)) {\n    return true;\n  }\n  Class<?>[] checkedExceptionTypes=m.getCheckedExceptionTypes();\n  for (  Class<?> checkedExceptionType : checkedExceptionTypes) {\n    if (HttpResponse.class.isAssignableFrom(checkedExceptionType)) {\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 300,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 99,
        "startColumnNumber" : 20,
        "endLineNumber" : 99,
        "endColumnNumber" : 124
      },
      "nodeContext" : "WebMethodConstants.WEB_METHOD_PARAMETER_ANNOTATION_NAMES.contains(annotation.annotationType().getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 99,
    "startColumnNumber" : 86,
    "endLineNumber" : 99,
    "endColumnNumber" : 123
  } ],
  "layoutRelationDataList" : [ ]
}