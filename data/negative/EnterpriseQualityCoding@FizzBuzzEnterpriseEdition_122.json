{
  "id" : 122,
  "expression" : "dbQuotient",
  "projectName" : "EnterpriseQualityCoding@FizzBuzzEnterpriseEdition",
  "commitID" : "27e040318cdbe460fe08f50659402a428041879b",
  "filePath" : "/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/math/arithmetics/IntegerDivider.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dbQuotient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 38,
      "startColumnNumber" : 78,
      "endLineNumber" : 38,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 38,
        "startColumnNumber" : 7,
        "endLineNumber" : 39,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 38,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.ceil(dbQuotient);\n}\n else if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 33,
        "startColumnNumber" : 9,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (denominatorEqualsZero) {\n  throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n}\n else {\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 28,
        "startColumnNumber" : 70,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1117,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public int divide(final int nFirstInteger,final int nSecondInteger){\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 38,
        "startColumnNumber" : 7,
        "endLineNumber" : 39,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "double"
  }, {
    "nodeContext" : "dbQuotient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 40,
      "startColumnNumber" : 34,
      "endLineNumber" : 40,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 40,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Math.ceil(dbQuotient)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 45
      },
      "nodeContext" : "dbRoundedQuotient=Math.ceil(dbQuotient)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 46
      },
      "nodeContext" : "dbRoundedQuotient=Math.ceil(dbQuotient);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 39,
        "startColumnNumber" : 42,
        "endLineNumber" : 41,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  dbRoundedQuotient=Math.ceil(dbQuotient);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 38,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.ceil(dbQuotient);\n}\n else if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 33,
        "startColumnNumber" : 9,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (denominatorEqualsZero) {\n  throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n}\n else {\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 28,
        "startColumnNumber" : 70,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1117,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public int divide(final int nFirstInteger,final int nSecondInteger){\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 46
      },
      "nodeContext" : "dbRoundedQuotient=Math.ceil(dbQuotient);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "double"
  }, {
    "nodeContext" : "dbQuotient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 41,
      "startColumnNumber" : 83,
      "endLineNumber" : 41,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 41,
        "startColumnNumber" : 14,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 41,
        "startColumnNumber" : 10,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 38,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.ceil(dbQuotient);\n}\n else if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 33,
        "startColumnNumber" : 9,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (denominatorEqualsZero) {\n  throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n}\n else {\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 28,
        "startColumnNumber" : 70,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1117,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public int divide(final int nFirstInteger,final int nSecondInteger){\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 41,
        "startColumnNumber" : 14,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "double"
  }, {
    "nodeContext" : "dbQuotient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 43,
      "startColumnNumber" : 35,
      "endLineNumber" : 43,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 43,
        "startColumnNumber" : 24,
        "endLineNumber" : 43,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Math.floor(dbQuotient)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 46
      },
      "nodeContext" : "dbRoundedQuotient=Math.floor(dbQuotient)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 47
      },
      "nodeContext" : "dbRoundedQuotient=Math.floor(dbQuotient);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 42,
        "startColumnNumber" : 42,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 41,
        "startColumnNumber" : 10,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 38,
        "startColumnNumber" : 3,
        "endLineNumber" : 44,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.ceil(dbQuotient);\n}\n else if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n  dbRoundedQuotient=Math.floor(dbQuotient);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 33,
        "startColumnNumber" : 9,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 900,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (denominatorEqualsZero) {\n  throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n}\n else {\n  final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n  final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n  final double dbQuotient=dbFirstNumber / dbSecondNumber;\n  double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n  if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.ceil(dbQuotient);\n  }\n else   if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n    dbRoundedQuotient=Math.floor(dbQuotient);\n  }\n  final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n  return nIntegerQuotient;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 28,
        "startColumnNumber" : 70,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1117,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 48,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public int divide(final int nFirstInteger,final int nSecondInteger){\n  final boolean denominatorEqualsZero=IntegerForEqualityComparator.areTwoIntegersEqual(nSecondInteger,INTEGER_DIVIDE_ZERO_VALUE);\n  if (denominatorEqualsZero) {\n    throw new ArithmeticException(\"An attempt was made to divide by zero.\");\n  }\n else {\n    final double dbFirstNumber=IntToDoubleConverter.Convert(nFirstInteger);\n    final double dbSecondNumber=IntToDoubleConverter.Convert(nSecondInteger);\n    final double dbQuotient=dbFirstNumber / dbSecondNumber;\n    double dbRoundedQuotient=(double)INTEGER_ORIGIN_ZERO_VALUE;\n    if (this.firstIsSmallerThanSecondDoubleComparator.FirstIsSmallerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.ceil(dbQuotient);\n    }\n else     if (this.firstIsLargerThanSecondDoubleComparator.FirstIsLargerThanSecond(dbQuotient,(double)INTEGER_ORIGIN_ZERO_VALUE)) {\n      dbRoundedQuotient=Math.floor(dbQuotient);\n    }\n    final int nIntegerQuotient=DoubleToIntConverter.Convert(dbRoundedQuotient);\n    return nIntegerQuotient;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 47
      },
      "nodeContext" : "dbRoundedQuotient=Math.floor(dbQuotient);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 38,
    "startColumnNumber" : 78,
    "endLineNumber" : 38,
    "endColumnNumber" : 88
  }, {
    "charLength" : 10,
    "startLineNumber" : 40,
    "startColumnNumber" : 34,
    "endLineNumber" : 40,
    "endColumnNumber" : 44
  }, {
    "charLength" : 10,
    "startLineNumber" : 41,
    "startColumnNumber" : 83,
    "endLineNumber" : 41,
    "endColumnNumber" : 93
  }, {
    "charLength" : 10,
    "startLineNumber" : 43,
    "startColumnNumber" : 35,
    "endLineNumber" : 43,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}