{
  "id" : 326,
  "expression" : "AnnotationConfigUtils.attributesFor(importingClassMetadata,annType)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AnnotationConfigUtils.attributesFor(importingClassMetadata,annType)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 68,
      "startLineNumber" : 70,
      "startColumnNumber" : 36,
      "endLineNumber" : 70,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 70,
        "startColumnNumber" : 23,
        "endLineNumber" : 70,
        "endColumnNumber" : 104
      },
      "nodeContext" : "attributes=AnnotationConfigUtils.attributesFor(importingClassMetadata,annType)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 105
      },
      "nodeContext" : "AnnotationAttributes attributes=AnnotationConfigUtils.attributesFor(importingClassMetadata,annType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 66,
        "startColumnNumber" : 80,
        "endLineNumber" : 83,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Class<?> annType=GenericTypeResolver.resolveTypeArgument(getClass(),AdviceModeImportSelector.class);\n  Assert.state(annType != null,\"Unresolvable type argument for AdviceModeImportSelector\");\n  AnnotationAttributes attributes=AnnotationConfigUtils.attributesFor(importingClassMetadata,annType);\n  if (attributes == null) {\n    throw new IllegalArgumentException(String.format(\"@%s is not present on importing class '%s' as expected\",annType.getSimpleName(),importingClassMetadata.getClassName()));\n  }\n  AdviceMode adviceMode=attributes.getEnum(getAdviceModeAttributeName());\n  String[] imports=selectImports(adviceMode);\n  if (imports == null) {\n    throw new IllegalArgumentException(\"Unknown AdviceMode: \" + adviceMode);\n  }\n  return imports;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1571,
        "startLineNumber" : 53,
        "startColumnNumber" : 1,
        "endLineNumber" : 83,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This implementation resolves the type of annotation from generic metadata and validates that (a) the annotation is in fact present on the importing {@code @Configuration} class and (b) that the given annotation has an{@linkplain #getAdviceModeAttributeName() advice mode attribute} of type{@link AdviceMode}. <p>The  {@link #selectImports(AdviceMode)} method is then invoked, allowing theconcrete implementation to choose imports in a safe and convenient fashion.\n * @throws IllegalArgumentException if expected annotation {@code A} is not presenton the importing  {@code @Configuration} class or if {@link #selectImports(AdviceMode)}returns  {@code null}\n */\n@Override public final String[] selectImports(AnnotationMetadata importingClassMetadata){\n  Class<?> annType=GenericTypeResolver.resolveTypeArgument(getClass(),AdviceModeImportSelector.class);\n  Assert.state(annType != null,\"Unresolvable type argument for AdviceModeImportSelector\");\n  AnnotationAttributes attributes=AnnotationConfigUtils.attributesFor(importingClassMetadata,annType);\n  if (attributes == null) {\n    throw new IllegalArgumentException(String.format(\"@%s is not present on importing class '%s' as expected\",annType.getSimpleName(),importingClassMetadata.getClassName()));\n  }\n  AdviceMode adviceMode=attributes.getEnum(getAdviceModeAttributeName());\n  String[] imports=selectImports(adviceMode);\n  if (imports == null) {\n    throw new IllegalArgumentException(\"Unknown AdviceMode: \" + adviceMode);\n  }\n  return imports;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 105
      },
      "nodeContext" : "AnnotationAttributes attributes=AnnotationConfigUtils.attributesFor(importingClassMetadata,annType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "org.springframework.core.annotation.AnnotationAttributes"
  } ],
  "positionList" : [ {
    "charLength" : 68,
    "startLineNumber" : 70,
    "startColumnNumber" : 36,
    "endLineNumber" : 70,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ ]
}