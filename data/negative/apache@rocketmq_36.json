{
  "id" : 36,
  "expression" : "null",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/common/src/main/java/org/apache/rocketmq/common/message/MessageBatch.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 43,
      "startColumnNumber" : 27,
      "endLineNumber" : 43,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.AssertStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 43,
        "startColumnNumber" : 15,
        "endLineNumber" : 43,
        "endColumnNumber" : 31
      },
      "nodeContext" : "messages != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assert messages != null;\n",
      "nodeType" : "AssertStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 42,
        "startColumnNumber" : 78,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assert messages != null;\n  assert messages.size() > 0;\n  List<Message> messageList=new ArrayList<Message>(messages.size());\n  Message first=null;\n  for (  Message message : messages) {\n    if (message.getDelayTimeLevel() > 0) {\n      throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n    }\n    if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n      throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n    }\n    if (first == null) {\n      first=message;\n    }\n else {\n      if (!first.getTopic().equals(message.getTopic())) {\n        throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n      }\n      if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n        throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n      }\n    }\n    messageList.add(message);\n  }\n  MessageBatch messageBatch=new MessageBatch(messageList);\n  messageBatch.setTopic(first.getTopic());\n  messageBatch.setWaitStoreMsgOK(first.isWaitStoreMsgOK());\n  return messageBatch;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1461,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static MessageBatch generateFromList(Collection<Message> messages){\n  assert messages != null;\n  assert messages.size() > 0;\n  List<Message> messageList=new ArrayList<Message>(messages.size());\n  Message first=null;\n  for (  Message message : messages) {\n    if (message.getDelayTimeLevel() > 0) {\n      throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n    }\n    if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n      throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n    }\n    if (first == null) {\n      first=message;\n    }\n else {\n      if (!first.getTopic().equals(message.getTopic())) {\n        throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n      }\n      if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n        throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n      }\n    }\n    messageList.add(message);\n  }\n  MessageBatch messageBatch=new MessageBatch(messageList);\n  messageBatch.setTopic(first.getTopic());\n  messageBatch.setWaitStoreMsgOK(first.isWaitStoreMsgOK());\n  return messageBatch;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assert messages != null;\n",
      "nodeType" : "AssertStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 46,
      "startColumnNumber" : 24,
      "endLineNumber" : 46,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 46,
        "endColumnNumber" : 28
      },
      "nodeContext" : "first=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Message first=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 42,
        "startColumnNumber" : 78,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assert messages != null;\n  assert messages.size() > 0;\n  List<Message> messageList=new ArrayList<Message>(messages.size());\n  Message first=null;\n  for (  Message message : messages) {\n    if (message.getDelayTimeLevel() > 0) {\n      throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n    }\n    if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n      throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n    }\n    if (first == null) {\n      first=message;\n    }\n else {\n      if (!first.getTopic().equals(message.getTopic())) {\n        throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n      }\n      if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n        throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n      }\n    }\n    messageList.add(message);\n  }\n  MessageBatch messageBatch=new MessageBatch(messageList);\n  messageBatch.setTopic(first.getTopic());\n  messageBatch.setWaitStoreMsgOK(first.isWaitStoreMsgOK());\n  return messageBatch;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1461,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static MessageBatch generateFromList(Collection<Message> messages){\n  assert messages != null;\n  assert messages.size() > 0;\n  List<Message> messageList=new ArrayList<Message>(messages.size());\n  Message first=null;\n  for (  Message message : messages) {\n    if (message.getDelayTimeLevel() > 0) {\n      throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n    }\n    if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n      throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n    }\n    if (first == null) {\n      first=message;\n    }\n else {\n      if (!first.getTopic().equals(message.getTopic())) {\n        throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n      }\n      if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n        throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n      }\n    }\n    messageList.add(message);\n  }\n  MessageBatch messageBatch=new MessageBatch(messageList);\n  messageBatch.setTopic(first.getTopic());\n  messageBatch.setWaitStoreMsgOK(first.isWaitStoreMsgOK());\n  return messageBatch;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Message first=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 54,
      "startColumnNumber" : 25,
      "endLineNumber" : 54,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 54,
        "startColumnNumber" : 16,
        "endLineNumber" : 54,
        "endColumnNumber" : 29
      },
      "nodeContext" : "first == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (first == null) {\n  first=message;\n}\n else {\n  if (!first.getTopic().equals(message.getTopic())) {\n    throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n  }\n  if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n    throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 47,
        "startColumnNumber" : 41,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (message.getDelayTimeLevel() > 0) {\n    throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n  }\n  if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n    throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n  }\n  if (first == null) {\n    first=message;\n  }\n else {\n    if (!first.getTopic().equals(message.getTopic())) {\n      throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n    }\n    if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n      throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n    }\n  }\n  messageList.add(message);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 983,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Message message : messages) {\n  if (message.getDelayTimeLevel() > 0) {\n    throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n  }\n  if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n    throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n  }\n  if (first == null) {\n    first=message;\n  }\n else {\n    if (!first.getTopic().equals(message.getTopic())) {\n      throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n    }\n    if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n      throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n    }\n  }\n  messageList.add(message);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 42,
        "startColumnNumber" : 78,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assert messages != null;\n  assert messages.size() > 0;\n  List<Message> messageList=new ArrayList<Message>(messages.size());\n  Message first=null;\n  for (  Message message : messages) {\n    if (message.getDelayTimeLevel() > 0) {\n      throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n    }\n    if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n      throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n    }\n    if (first == null) {\n      first=message;\n    }\n else {\n      if (!first.getTopic().equals(message.getTopic())) {\n        throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n      }\n      if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n        throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n      }\n    }\n    messageList.add(message);\n  }\n  MessageBatch messageBatch=new MessageBatch(messageList);\n  messageBatch.setTopic(first.getTopic());\n  messageBatch.setWaitStoreMsgOK(first.isWaitStoreMsgOK());\n  return messageBatch;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1461,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static MessageBatch generateFromList(Collection<Message> messages){\n  assert messages != null;\n  assert messages.size() > 0;\n  List<Message> messageList=new ArrayList<Message>(messages.size());\n  Message first=null;\n  for (  Message message : messages) {\n    if (message.getDelayTimeLevel() > 0) {\n      throw new UnsupportedOperationException(\"TimeDelayLevel in not supported for batching\");\n    }\n    if (message.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n      throw new UnsupportedOperationException(\"Retry Group is not supported for batching\");\n    }\n    if (first == null) {\n      first=message;\n    }\n else {\n      if (!first.getTopic().equals(message.getTopic())) {\n        throw new UnsupportedOperationException(\"The topic of the messages in one batch should be the same\");\n      }\n      if (first.isWaitStoreMsgOK() != message.isWaitStoreMsgOK()) {\n        throw new UnsupportedOperationException(\"The waitStoreMsgOK of the messages in one batch should the same\");\n      }\n    }\n    messageList.add(message);\n  }\n  MessageBatch messageBatch=new MessageBatch(messageList);\n  messageBatch.setTopic(first.getTopic());\n  messageBatch.setWaitStoreMsgOK(first.isWaitStoreMsgOK());\n  return messageBatch;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 54,
        "startColumnNumber" : 16,
        "endLineNumber" : 54,
        "endColumnNumber" : 29
      },
      "nodeContext" : "first == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 43,
    "startColumnNumber" : 27,
    "endLineNumber" : 43,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 46,
    "startColumnNumber" : 24,
    "endLineNumber" : 46,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 54,
    "startColumnNumber" : 25,
    "endLineNumber" : 54,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}