{
  "id" : 7,
  "expression" : "j < PRIMES.length",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/bloomfilter/AnagramSet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j < PRIMES.length",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 57,
      "startColumnNumber" : 22,
      "endLineNumber" : 57,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 57,
        "startColumnNumber" : 6,
        "endLineNumber" : 60,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < PRIMES.length; j++) {\n  java.math.BigInteger prime=new java.math.BigInteger(String.valueOf(PRIMES[j]));\n  MOD_INVERSES[i][j]=prime.modInverse(mod).intValue();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 55,
        "startColumnNumber" : 39,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  java.math.BigInteger mod=new java.math.BigInteger(String.valueOf(MODS[i]));\n  for (int j=0; j < PRIMES.length; j++) {\n    java.math.BigInteger prime=new java.math.BigInteger(String.valueOf(PRIMES[j]));\n    MOD_INVERSES[i][j]=prime.modInverse(mod).intValue();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < N_HASHES; i++) {\n  java.math.BigInteger mod=new java.math.BigInteger(String.valueOf(MODS[i]));\n  for (int j=0; j < PRIMES.length; j++) {\n    java.math.BigInteger prime=new java.math.BigInteger(String.valueOf(PRIMES[j]));\n    MOD_INVERSES[i][j]=prime.modInverse(mod).intValue();\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 45,
        "startColumnNumber" : 32,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MODS=mods.clone();\n  N_HASHES=mods.length;\n  MOD_INVERSES=new int[N_HASHES][PRIMES.length];\n  rollingHashes=new long[N_HASHES];\n  bloomFilter=new BloomFilter(mods);\n  for (int i=0; i < N_HASHES; i++) {\n    java.math.BigInteger mod=new java.math.BigInteger(String.valueOf(MODS[i]));\n    for (int j=0; j < PRIMES.length; j++) {\n      java.math.BigInteger prime=new java.math.BigInteger(String.valueOf(PRIMES[j]));\n      MOD_INVERSES[i][j]=prime.modInverse(mod).intValue();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AnagramSet(int[] mods){\n  MODS=mods.clone();\n  N_HASHES=mods.length;\n  MOD_INVERSES=new int[N_HASHES][PRIMES.length];\n  rollingHashes=new long[N_HASHES];\n  bloomFilter=new BloomFilter(mods);\n  for (int i=0; i < N_HASHES; i++) {\n    java.math.BigInteger mod=new java.math.BigInteger(String.valueOf(MODS[i]));\n    for (int j=0; j < PRIMES.length; j++) {\n      java.math.BigInteger prime=new java.math.BigInteger(String.valueOf(PRIMES[j]));\n      MOD_INVERSES[i][j]=prime.modInverse(mod).intValue();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 131,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 57,
        "startColumnNumber" : 6,
        "endLineNumber" : 60,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < PRIMES.length; j++) {\n  java.math.BigInteger prime=new java.math.BigInteger(String.valueOf(PRIMES[j]));\n  MOD_INVERSES[i][j]=prime.modInverse(mod).intValue();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 57,
    "startColumnNumber" : 22,
    "endLineNumber" : 57,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}