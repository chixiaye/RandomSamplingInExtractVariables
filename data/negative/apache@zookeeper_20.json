{
  "id" : 20,
  "expression" : "\"#ifndef __\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/compiler/CGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"#ifndef __\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 63,
      "startColumnNumber" : 16,
      "endLineNumber" : 63,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 72
      },
      "nodeContext" : "\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 73
      },
      "nodeContext" : "h.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 74
      },
      "nodeContext" : "h.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter c=new FileWriter(new File(outputDirectory,mName + \".c\"));\n  FileWriter h=new FileWriter(new File(outputDirectory,mName + \".h\"));\n  h.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  h.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  h.write(\"#include \\\"recordio.h\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    h.write(\"#include \\\"\" + f.getName() + \".h\\\"\\n\");\n  }\n  h.write(\"\\n#ifdef __cplusplus\\nextern \\\"C\\\" {\\n#endif\\n\\n\");\n  c.write(\"#include <stdlib.h>\\n\");\n  c.write(\"#include \\\"\" + mName + \".h\\\"\\n\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCCode(h,c);\n  }\n  h.write(\"\\n#ifdef __cplusplus\\n}\\n#endif\\n\\n\");\n  h.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  h.close();\n  c.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter c=new FileWriter(new File(outputDirectory,mName + \".c\"));\n  FileWriter h=new FileWriter(new File(outputDirectory,mName + \".h\"));\n  h.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  h.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  h.write(\"#include \\\"recordio.h\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    h.write(\"#include \\\"\" + f.getName() + \".h\\\"\\n\");\n  }\n  h.write(\"\\n#ifdef __cplusplus\\nextern \\\"C\\\" {\\n#endif\\n\\n\");\n  c.write(\"#include <stdlib.h>\\n\");\n  c.write(\"#include \\\"\" + mName + \".h\\\"\\n\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCCode(h,c);\n  }\n  h.write(\"\\n#ifdef __cplusplus\\n}\\n#endif\\n\\n\");\n  h.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  h.close();\n  c.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 74
      },
      "nodeContext" : "h.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 63,
    "startColumnNumber" : 16,
    "endLineNumber" : 63,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}