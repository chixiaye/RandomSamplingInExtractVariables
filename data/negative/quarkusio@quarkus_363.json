{
  "id" : 363,
  "expression" : "\" in class \"",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/smallrye-metrics/deployment/src/main/java/io/quarkus/smallrye/metrics/deployment/SmallRyeMetricsProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" in class \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 384,
      "startColumnNumber" : 40,
      "endLineNumber" : 384,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 383,
        "startColumnNumber" : 44,
        "endLineNumber" : 386,
        "endColumnNumber" : 70
      },
      "nodeContext" : "\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 383,
        "startColumnNumber" : 32,
        "endLineNumber" : 386,
        "endColumnNumber" : 71
      },
      "nodeContext" : "LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 383,
        "startColumnNumber" : 32,
        "endLineNumber" : 386,
        "endColumnNumber" : 72
      },
      "nodeContext" : "LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 382,
        "startColumnNumber" : 35,
        "endLineNumber" : 387,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 579,
        "startLineNumber" : 380,
        "startColumnNumber" : 28,
        "endLineNumber" : 387,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (!Modifier.isPrivate(method.flags())) {\n  collectedMetricsMethods.add(method);\n}\n else {\n  LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 379,
        "startColumnNumber" : 106,
        "endLineNumber" : 388,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (!Modifier.isPrivate(method.flags())) {\n    collectedMetricsMethods.add(method);\n  }\n else {\n    LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 379,
        "startColumnNumber" : 24,
        "endLineNumber" : 388,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n  if (!Modifier.isPrivate(method.flags())) {\n    collectedMetricsMethods.add(method);\n  }\n else {\n    LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 376,
        "startColumnNumber" : 16,
        "endLineNumber" : 398,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (metricAnnotationTarget.kind()) {\ncase METHOD:  MethodInfo method=metricAnnotationTarget.asMethod();\nif (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n  if (!Modifier.isPrivate(method.flags())) {\n    collectedMetricsMethods.add(method);\n  }\n else {\n    LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n  }\n}\nbreak;\ncase CLASS:ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\ncollectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1484,
        "startLineNumber" : 374,
        "startColumnNumber" : 90,
        "endLineNumber" : 399,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  AnnotationTarget metricAnnotationTarget=metricAnnotationInstance.target();\nswitch (metricAnnotationTarget.kind()) {\ncase METHOD:    MethodInfo method=metricAnnotationTarget.asMethod();\n  if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n    if (!Modifier.isPrivate(method.flags())) {\n      collectedMetricsMethods.add(method);\n    }\n else {\n      LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n    }\n  }\nbreak;\ncase CLASS:ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\ncollectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1562,
        "startLineNumber" : 374,
        "startColumnNumber" : 12,
        "endLineNumber" : 399,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (AnnotationInstance metricAnnotationInstance : metricAnnotationInstances) {\n  AnnotationTarget metricAnnotationTarget=metricAnnotationInstance.target();\nswitch (metricAnnotationTarget.kind()) {\ncase METHOD:    MethodInfo method=metricAnnotationTarget.asMethod();\n  if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n    if (!Modifier.isPrivate(method.flags())) {\n      collectedMetricsMethods.add(method);\n    }\n else {\n      LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n    }\n  }\nbreak;\ncase CLASS:ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\ncollectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 104,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1697,
        "startLineNumber" : 372,
        "startColumnNumber" : 72,
        "endLineNumber" : 400,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Collection<AnnotationInstance> metricAnnotationInstances=index.getAnnotations(metricAnnotation);\n  for (  AnnotationInstance metricAnnotationInstance : metricAnnotationInstances) {\n    AnnotationTarget metricAnnotationTarget=metricAnnotationInstance.target();\nswitch (metricAnnotationTarget.kind()) {\ncase METHOD:      MethodInfo method=metricAnnotationTarget.asMethod();\n    if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n      if (!Modifier.isPrivate(method.flags())) {\n        collectedMetricsMethods.add(method);\n      }\n else {\n        LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n      }\n    }\n  break;\ncase CLASS:ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\ncollectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1761,
        "startLineNumber" : 372,
        "startColumnNumber" : 8,
        "endLineNumber" : 400,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DotName metricAnnotation : metricAndStereotypeAnnotations) {\n  Collection<AnnotationInstance> metricAnnotationInstances=index.getAnnotations(metricAnnotation);\n  for (  AnnotationInstance metricAnnotationInstance : metricAnnotationInstances) {\n    AnnotationTarget metricAnnotationTarget=metricAnnotationInstance.target();\nswitch (metricAnnotationTarget.kind()) {\ncase METHOD:      MethodInfo method=metricAnnotationTarget.asMethod();\n    if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n      if (!Modifier.isPrivate(method.flags())) {\n        collectedMetricsMethods.add(method);\n      }\n else {\n        LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n      }\n    }\n  break;\ncase CLASS:ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\ncollectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5215,
        "startLineNumber" : 349,
        "startColumnNumber" : 54,
        "endLineNumber" : 438,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  IndexView index=beanArchiveIndex.getIndex();\n  JandexBeanInfoAdapter beanInfoAdapter=new JandexBeanInfoAdapter(index,transformedAnnotations);\n  JandexMemberInfoAdapter memberInfoAdapter=new JandexMemberInfoAdapter(index,transformedAnnotations);\n  Set<MethodInfo> collectedMetricsMethods=new HashSet<>();\n  Map<DotName,ClassInfo> collectedMetricsClasses=new HashMap<>();\n  Set<DotName> metricAndStereotypeAnnotations=new HashSet<>();\n  metricAndStereotypeAnnotations.addAll(METRICS_ANNOTATIONS);\n  for (  ClassInfo candidate : beanArchiveIndex.getIndex().getKnownClasses()) {\n    if (transformedAnnotations.getAnnotation(candidate,DotNames.STEREOTYPE) != null && transformedAnnotations.getAnnotations(candidate).stream().anyMatch(SmallRyeMetricsDotNames::isMetricAnnotation)) {\n      metricAndStereotypeAnnotations.add(candidate.name());\n    }\n  }\n  validationPhase.getContext().beans().classBeans().filter(this::hasMetricsInterceptorAssociated).forEach(b -> collectMetricsClassAndSubClasses(index,collectedMetricsClasses,b.getTarget().get().asClass()));\n  for (  DotName metricAnnotation : metricAndStereotypeAnnotations) {\n    Collection<AnnotationInstance> metricAnnotationInstances=index.getAnnotations(metricAnnotation);\n    for (    AnnotationInstance metricAnnotationInstance : metricAnnotationInstances) {\n      AnnotationTarget metricAnnotationTarget=metricAnnotationInstance.target();\nswitch (metricAnnotationTarget.kind()) {\ncase METHOD:        MethodInfo method=metricAnnotationTarget.asMethod();\n      if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n        if (!Modifier.isPrivate(method.flags())) {\n          collectedMetricsMethods.add(method);\n        }\n else {\n          LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n        }\n      }\n    break;\ncase CLASS:  ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\n  collectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n}\n}\nfor (ClassInfo clazz : collectedMetricsClasses.values()) {\nBeanInfo beanInfo=beanInfoAdapter.convert(clazz);\nClassInfo superclass=clazz;\nSet<String> alreadyRegisteredNames=new HashSet<>();\nwhile (superclass != null && superclass.superName() != null) {\nfor (MethodInfo method : superclass.methods()) {\nif (!Modifier.isPrivate(method.flags()) && !alreadyRegisteredNames.contains(method.toString())) {\nmetrics.registerMetrics(beanInfo,memberInfoAdapter.convert(method));\nalreadyRegisteredNames.add(method.toString());\n}\n}\nsuperclass=index.getClassByName(superclass.superName());\n}\nsuperclass=clazz;\nwhile (superclass != null && superclass.superName() != null) {\nfor (Type interfaceType : superclass.interfaceTypes()) {\nClassInfo ifaceInfo=beanArchiveIndex.getIndex().getClassByName(interfaceType.name());\nif (ifaceInfo != null) {\nfindNonOverriddenDefaultMethods(ifaceInfo,alreadyRegisteredNames,metrics,beanArchiveIndex,memberInfoAdapter,beanInfo);\n}\n}\nsuperclass=index.getClassByName(superclass.superName());\n}\n}\nfor (MethodInfo method : collectedMetricsMethods) {\nClassInfo declaringClazz=method.declaringClass();\nif (!collectedMetricsClasses.containsKey(declaringClazz.name())) {\nBeanInfo beanInfo=beanInfoAdapter.convert(declaringClazz);\nmetrics.registerMetrics(beanInfo,memberInfoAdapter.convert(method));\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 465,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5495,
        "startLineNumber" : 345,
        "startColumnNumber" : 4,
        "endLineNumber" : 438,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BuildStep @Record(STATIC_INIT) void registerMetricsFromAnnotatedMethods(SmallRyeMetricsRecorder metrics,BeanArchiveIndexBuildItem beanArchiveIndex,TransformedAnnotationsBuildItem transformedAnnotations,ValidationPhaseBuildItem validationPhase){\n  IndexView index=beanArchiveIndex.getIndex();\n  JandexBeanInfoAdapter beanInfoAdapter=new JandexBeanInfoAdapter(index,transformedAnnotations);\n  JandexMemberInfoAdapter memberInfoAdapter=new JandexMemberInfoAdapter(index,transformedAnnotations);\n  Set<MethodInfo> collectedMetricsMethods=new HashSet<>();\n  Map<DotName,ClassInfo> collectedMetricsClasses=new HashMap<>();\n  Set<DotName> metricAndStereotypeAnnotations=new HashSet<>();\n  metricAndStereotypeAnnotations.addAll(METRICS_ANNOTATIONS);\n  for (  ClassInfo candidate : beanArchiveIndex.getIndex().getKnownClasses()) {\n    if (transformedAnnotations.getAnnotation(candidate,DotNames.STEREOTYPE) != null && transformedAnnotations.getAnnotations(candidate).stream().anyMatch(SmallRyeMetricsDotNames::isMetricAnnotation)) {\n      metricAndStereotypeAnnotations.add(candidate.name());\n    }\n  }\n  validationPhase.getContext().beans().classBeans().filter(this::hasMetricsInterceptorAssociated).forEach(b -> collectMetricsClassAndSubClasses(index,collectedMetricsClasses,b.getTarget().get().asClass()));\n  for (  DotName metricAnnotation : metricAndStereotypeAnnotations) {\n    Collection<AnnotationInstance> metricAnnotationInstances=index.getAnnotations(metricAnnotation);\n    for (    AnnotationInstance metricAnnotationInstance : metricAnnotationInstances) {\n      AnnotationTarget metricAnnotationTarget=metricAnnotationInstance.target();\nswitch (metricAnnotationTarget.kind()) {\ncase METHOD:        MethodInfo method=metricAnnotationTarget.asMethod();\n      if (!method.declaringClass().name().toString().startsWith(\"io.smallrye.metrics\")) {\n        if (!Modifier.isPrivate(method.flags())) {\n          collectedMetricsMethods.add(method);\n        }\n else {\n          LOGGER.warn(\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\");\n        }\n      }\n    break;\ncase CLASS:  ClassInfo clazz=metricAnnotationTarget.asClass();\nif (!clazz.name().toString().startsWith(\"io.smallrye.metrics\")) {\n  collectMetricsClassAndSubClasses(index,collectedMetricsClasses,clazz);\n}\nbreak;\ndefault:break;\n}\n}\n}\nfor (ClassInfo clazz : collectedMetricsClasses.values()) {\nBeanInfo beanInfo=beanInfoAdapter.convert(clazz);\nClassInfo superclass=clazz;\nSet<String> alreadyRegisteredNames=new HashSet<>();\nwhile (superclass != null && superclass.superName() != null) {\nfor (MethodInfo method : superclass.methods()) {\nif (!Modifier.isPrivate(method.flags()) && !alreadyRegisteredNames.contains(method.toString())) {\nmetrics.registerMetrics(beanInfo,memberInfoAdapter.convert(method));\nalreadyRegisteredNames.add(method.toString());\n}\n}\nsuperclass=index.getClassByName(superclass.superName());\n}\nsuperclass=clazz;\nwhile (superclass != null && superclass.superName() != null) {\nfor (Type interfaceType : superclass.interfaceTypes()) {\nClassInfo ifaceInfo=beanArchiveIndex.getIndex().getClassByName(interfaceType.name());\nif (ifaceInfo != null) {\nfindNonOverriddenDefaultMethods(ifaceInfo,alreadyRegisteredNames,metrics,beanArchiveIndex,memberInfoAdapter,beanInfo);\n}\n}\nsuperclass=index.getClassByName(superclass.superName());\n}\n}\nfor (MethodInfo method : collectedMetricsMethods) {\nClassInfo declaringClazz=method.declaringClass();\nif (!collectedMetricsClasses.containsKey(declaringClazz.name())) {\nBeanInfo beanInfo=beanInfoAdapter.convert(declaringClazz);\nmetrics.registerMetrics(beanInfo,memberInfoAdapter.convert(method));\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 489,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 383,
        "startColumnNumber" : 44,
        "endLineNumber" : 386,
        "endColumnNumber" : 70
      },
      "nodeContext" : "\"Private method is annotated with a metric: \" + method + \" in class \"+ method.declaringClass().name()+ \". Metrics \"+ \"are not collected for private methods. To enable metrics for this method, make \"+ \"it at least package-private.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 384,
    "startColumnNumber" : 40,
    "endLineNumber" : 384,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}