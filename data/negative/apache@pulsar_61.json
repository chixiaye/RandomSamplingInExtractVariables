{
  "id" : 61,
  "expression" : "Thread",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-zookeeper-utils/src/main/java/org/apache/pulsar/zookeeper/ZooKeeperCache.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Thread",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 572,
      "startColumnNumber" : 12,
      "endLineNumber" : 572,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 572,
        "startColumnNumber" : 12,
        "endLineNumber" : 572,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Thread.currentThread()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 572,
        "startColumnNumber" : 12,
        "endLineNumber" : 572,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Thread.currentThread().interrupt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 572,
        "startColumnNumber" : 12,
        "endLineNumber" : 572,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Thread.currentThread().interrupt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 571,
        "startColumnNumber" : 42,
        "endLineNumber" : 576,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Thread.currentThread().interrupt();\n  log.error(\"Interrupted checking and wait ephemeral znode {} expired : \",regPath,ie);\n  throw new IOException(\"Interrupted checking and wait ephemeral znode \" + regPath + \" expired\",ie);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 571,
        "startColumnNumber" : 10,
        "endLineNumber" : 576,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (InterruptedException ie) {\n  Thread.currentThread().interrupt();\n  log.error(\"Interrupted checking and wait ephemeral znode {} expired : \",regPath,ie);\n  throw new IOException(\"Interrupted checking and wait ephemeral znode \" + regPath + \" expired\",ie);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1567,
        "startLineNumber" : 548,
        "startColumnNumber" : 8,
        "endLineNumber" : 576,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Stat stat=getZooKeeper().exists(regPath,zkPrevRegNodewatcher);\n  if (null != stat) {\n    if (stat.getEphemeralOwner() != getZooKeeper().getSessionId()) {\n      log.info(\"Previous bookie registration znode: {} exists, so waiting zk sessiontimeout:\" + \" {} ms for znode deletion\",regPath,getZooKeeper().getSessionTimeout());\n      if (!prevNodeLatch.await(getZooKeeper().getSessionTimeout(),TimeUnit.MILLISECONDS)) {\n        throw new NodeExistsException(regPath);\n      }\n else {\n        return false;\n      }\n    }\n    return true;\n  }\n else {\n    return false;\n  }\n}\n catch (KeeperException ke) {\n  log.error(\"ZK exception checking and wait ephemeral znode {} expired : \",regPath,ke);\n  throw new IOException(\"ZK exception checking and wait ephemeral znode \" + regPath + \" expired\",ke);\n}\ncatch (InterruptedException ie) {\n  Thread.currentThread().interrupt();\n  log.error(\"Interrupted checking and wait ephemeral znode {} expired : \",regPath,ie);\n  throw new IOException(\"Interrupted checking and wait ephemeral znode \" + regPath + \" expired\",ie);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2080,
        "startLineNumber" : 536,
        "startColumnNumber" : 81,
        "endLineNumber" : 577,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CountDownLatch prevNodeLatch=new CountDownLatch(1);\n  Watcher zkPrevRegNodewatcher=new Watcher(){\n    @Override public void process(    WatchedEvent event){\n      if (EventType.NodeDeleted == event.getType()) {\n        prevNodeLatch.countDown();\n      }\n    }\n  }\n;\n  try {\n    Stat stat=getZooKeeper().exists(regPath,zkPrevRegNodewatcher);\n    if (null != stat) {\n      if (stat.getEphemeralOwner() != getZooKeeper().getSessionId()) {\n        log.info(\"Previous bookie registration znode: {} exists, so waiting zk sessiontimeout:\" + \" {} ms for znode deletion\",regPath,getZooKeeper().getSessionTimeout());\n        if (!prevNodeLatch.await(getZooKeeper().getSessionTimeout(),TimeUnit.MILLISECONDS)) {\n          throw new NodeExistsException(regPath);\n        }\n else {\n          return false;\n        }\n      }\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n catch (  KeeperException ke) {\n    log.error(\"ZK exception checking and wait ephemeral znode {} expired : \",regPath,ke);\n    throw new IOException(\"ZK exception checking and wait ephemeral znode \" + regPath + \" expired\",ke);\n  }\ncatch (  InterruptedException ie) {\n    Thread.currentThread().interrupt();\n    log.error(\"Interrupted checking and wait ephemeral znode {} expired : \",regPath,ie);\n    throw new IOException(\"Interrupted checking and wait ephemeral znode \" + regPath + \" expired\",ie);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2157,
        "startLineNumber" : 536,
        "startColumnNumber" : 4,
        "endLineNumber" : 577,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean checkRegNodeAndWaitExpired(String regPath) throws IOException {\n  final CountDownLatch prevNodeLatch=new CountDownLatch(1);\n  Watcher zkPrevRegNodewatcher=new Watcher(){\n    @Override public void process(    WatchedEvent event){\n      if (EventType.NodeDeleted == event.getType()) {\n        prevNodeLatch.countDown();\n      }\n    }\n  }\n;\n  try {\n    Stat stat=getZooKeeper().exists(regPath,zkPrevRegNodewatcher);\n    if (null != stat) {\n      if (stat.getEphemeralOwner() != getZooKeeper().getSessionId()) {\n        log.info(\"Previous bookie registration znode: {} exists, so waiting zk sessiontimeout:\" + \" {} ms for znode deletion\",regPath,getZooKeeper().getSessionTimeout());\n        if (!prevNodeLatch.await(getZooKeeper().getSessionTimeout(),TimeUnit.MILLISECONDS)) {\n          throw new NodeExistsException(regPath);\n        }\n else {\n          return false;\n        }\n      }\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n catch (  KeeperException ke) {\n    log.error(\"ZK exception checking and wait ephemeral znode {} expired : \",regPath,ke);\n    throw new IOException(\"ZK exception checking and wait ephemeral znode \" + regPath + \" expired\",ke);\n  }\ncatch (  InterruptedException ie) {\n    Thread.currentThread().interrupt();\n    log.error(\"Interrupted checking and wait ephemeral znode {} expired : \",regPath,ie);\n    throw new IOException(\"Interrupted checking and wait ephemeral znode \" + regPath + \" expired\",ie);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 572,
        "startColumnNumber" : 12,
        "endLineNumber" : 572,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Thread.currentThread().interrupt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 572,
    "startColumnNumber" : 12,
    "endLineNumber" : 572,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}