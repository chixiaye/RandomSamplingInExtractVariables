{
  "id" : 240,
  "expression" : "i < actual.size()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/processor/internals/StateRestoreCallbackAdapterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < actual.size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 134,
      "startColumnNumber" : 24,
      "endLineNumber" : 134,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < actual.size(); i++) {\n  final ConsumerRecord<byte[],byte[]> actual1=actual.get(i);\n  final ConsumerRecord<byte[],byte[]> expected1=expected.get(i);\n  assertThat(actual1.topic(),is(expected1.topic()));\n  assertThat(actual1.partition(),is(expected1.partition()));\n  assertThat(actual1.offset(),is(expected1.offset()));\n  assertThat(actual1.key(),is(expected1.key()));\n  assertThat(actual1.value(),is(expected1.value()));\n  assertThat(actual1.timestamp(),is(expected1.timestamp()));\n  assertThat(actual1.headers(),is(expected1.headers()));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 125,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 132,
        "startColumnNumber" : 79,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThat(actual.size(),is(expected.size()));\n  for (int i=0; i < actual.size(); i++) {\n    final ConsumerRecord<byte[],byte[]> actual1=actual.get(i);\n    final ConsumerRecord<byte[],byte[]> expected1=expected.get(i);\n    assertThat(actual1.topic(),is(expected1.topic()));\n    assertThat(actual1.partition(),is(expected1.partition()));\n    assertThat(actual1.offset(),is(expected1.offset()));\n    assertThat(actual1.key(),is(expected1.key()));\n    assertThat(actual1.value(),is(expected1.value()));\n    assertThat(actual1.timestamp(),is(expected1.timestamp()));\n    assertThat(actual1.headers(),is(expected1.headers()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 893,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validate(final List<ConsumerRecord<byte[],byte[]>> actual,final List<ConsumerRecord<byte[],byte[]>> expected){\n  assertThat(actual.size(),is(expected.size()));\n  for (int i=0; i < actual.size(); i++) {\n    final ConsumerRecord<byte[],byte[]> actual1=actual.get(i);\n    final ConsumerRecord<byte[],byte[]> expected1=expected.get(i);\n    assertThat(actual1.topic(),is(expected1.topic()));\n    assertThat(actual1.partition(),is(expected1.partition()));\n    assertThat(actual1.offset(),is(expected1.offset()));\n    assertThat(actual1.key(),is(expected1.key()));\n    assertThat(actual1.value(),is(expected1.value()));\n    assertThat(actual1.timestamp(),is(expected1.timestamp()));\n    assertThat(actual1.headers(),is(expected1.headers()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < actual.size(); i++) {\n  final ConsumerRecord<byte[],byte[]> actual1=actual.get(i);\n  final ConsumerRecord<byte[],byte[]> expected1=expected.get(i);\n  assertThat(actual1.topic(),is(expected1.topic()));\n  assertThat(actual1.partition(),is(expected1.partition()));\n  assertThat(actual1.offset(),is(expected1.offset()));\n  assertThat(actual1.key(),is(expected1.key()));\n  assertThat(actual1.value(),is(expected1.value()));\n  assertThat(actual1.timestamp(),is(expected1.timestamp()));\n  assertThat(actual1.headers(),is(expected1.headers()));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 125,
      "astHeight" : 7
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 134,
    "startColumnNumber" : 24,
    "endLineNumber" : 134,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}