{
  "id" : 128,
  "expression" : "ai",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "6807b589a333a4204e542f811dfdf2cc82d0a8d4",
  "filePath" : "core/src/mindustry/logic/LExecutor.java",
  "occurrences" : 33,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 332,
      "startColumnNumber" : 47,
      "endLineNumber" : 332,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 332,
        "startColumnNumber" : 47,
        "endLineNumber" : 332,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ai != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 332,
        "startColumnNumber" : 15,
        "endLineNumber" : 332,
        "endColumnNumber" : 57
      },
      "nodeContext" : "unitObj instanceof Unit unit && ai != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 332,
        "startColumnNumber" : 15,
        "endLineNumber" : 332,
        "endColumnNumber" : 57
      },
      "nodeContext" : "unitObj instanceof Unit unit && ai != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 333,
      "startColumnNumber" : 16,
      "endLineNumber" : 333,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 333,
        "startColumnNumber" : 16,
        "endLineNumber" : 333,
        "endColumnNumber" : 31
      },
      "nodeContext" : "ai.controlTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 333,
        "startColumnNumber" : 16,
        "endLineNumber" : 333,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ai.controlTimer=LogicAI.logicControlTimeout",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 333,
        "startColumnNumber" : 16,
        "endLineNumber" : 333,
        "endColumnNumber" : 62
      },
      "nodeContext" : "ai.controlTimer=LogicAI.logicControlTimeout;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 333,
        "startColumnNumber" : 16,
        "endLineNumber" : 333,
        "endColumnNumber" : 62
      },
      "nodeContext" : "ai.controlTimer=LogicAI.logicControlTimeout;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 337,
      "startColumnNumber" : 24,
      "endLineNumber" : 337,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 337,
        "startColumnNumber" : 24,
        "endLineNumber" : 337,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ai.control",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 337,
        "startColumnNumber" : 24,
        "endLineNumber" : 337,
        "endColumnNumber" : 41
      },
      "nodeContext" : "ai.control=type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 337,
        "startColumnNumber" : 24,
        "endLineNumber" : 337,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.control=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 336,
        "startColumnNumber" : 49,
        "endLineNumber" : 353,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.control=type;\n  ai.moveX=exec.numf(p1);\n  ai.moveY=exec.numf(p2);\n  if (type == LUnitControl.approach) {\n    ai.moveRad=exec.numf(p3);\n  }\n  if (type == LUnitControl.stop) {\n    if (unit instanceof     Minerc miner) {\n      miner.mineTile(null);\n    }\n    if (unit instanceof     Builderc build) {\n      build.clearBuilding();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 337,
        "startColumnNumber" : 24,
        "endLineNumber" : 337,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.control=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 338,
      "startColumnNumber" : 24,
      "endLineNumber" : 338,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 338,
        "startColumnNumber" : 24,
        "endLineNumber" : 338,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ai.moveX",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 338,
        "startColumnNumber" : 24,
        "endLineNumber" : 338,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ai.moveX=exec.numf(p1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 338,
        "startColumnNumber" : 24,
        "endLineNumber" : 338,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.moveX=exec.numf(p1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 336,
        "startColumnNumber" : 49,
        "endLineNumber" : 353,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.control=type;\n  ai.moveX=exec.numf(p1);\n  ai.moveY=exec.numf(p2);\n  if (type == LUnitControl.approach) {\n    ai.moveRad=exec.numf(p3);\n  }\n  if (type == LUnitControl.stop) {\n    if (unit instanceof     Minerc miner) {\n      miner.mineTile(null);\n    }\n    if (unit instanceof     Builderc build) {\n      build.clearBuilding();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 338,
        "startColumnNumber" : 24,
        "endLineNumber" : 338,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.moveX=exec.numf(p1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 339,
      "startColumnNumber" : 24,
      "endLineNumber" : 339,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 339,
        "startColumnNumber" : 24,
        "endLineNumber" : 339,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ai.moveY",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 339,
        "startColumnNumber" : 24,
        "endLineNumber" : 339,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ai.moveY=exec.numf(p2)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 339,
        "startColumnNumber" : 24,
        "endLineNumber" : 339,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.moveY=exec.numf(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 336,
        "startColumnNumber" : 49,
        "endLineNumber" : 353,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.control=type;\n  ai.moveX=exec.numf(p1);\n  ai.moveY=exec.numf(p2);\n  if (type == LUnitControl.approach) {\n    ai.moveRad=exec.numf(p3);\n  }\n  if (type == LUnitControl.stop) {\n    if (unit instanceof     Minerc miner) {\n      miner.mineTile(null);\n    }\n    if (unit instanceof     Builderc build) {\n      build.clearBuilding();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 339,
        "startColumnNumber" : 24,
        "endLineNumber" : 339,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.moveY=exec.numf(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 341,
      "startColumnNumber" : 28,
      "endLineNumber" : 341,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 341,
        "startColumnNumber" : 28,
        "endLineNumber" : 341,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ai.moveRad",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 341,
        "startColumnNumber" : 28,
        "endLineNumber" : 341,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ai.moveRad=exec.numf(p3)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 341,
        "startColumnNumber" : 28,
        "endLineNumber" : 341,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ai.moveRad=exec.numf(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 340,
        "startColumnNumber" : 57,
        "endLineNumber" : 342,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  ai.moveRad=exec.numf(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 340,
        "startColumnNumber" : 24,
        "endLineNumber" : 342,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (type == LUnitControl.approach) {\n  ai.moveRad=exec.numf(p3);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 731,
        "startLineNumber" : 336,
        "startColumnNumber" : 49,
        "endLineNumber" : 353,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.control=type;\n  ai.moveX=exec.numf(p1);\n  ai.moveY=exec.numf(p2);\n  if (type == LUnitControl.approach) {\n    ai.moveRad=exec.numf(p3);\n  }\n  if (type == LUnitControl.stop) {\n    if (unit instanceof     Minerc miner) {\n      miner.mineTile(null);\n    }\n    if (unit instanceof     Builderc build) {\n      build.clearBuilding();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 341,
        "startColumnNumber" : 28,
        "endLineNumber" : 341,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ai.moveRad=exec.numf(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 358,
      "startColumnNumber" : 24,
      "endLineNumber" : 358,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 358,
        "startColumnNumber" : 24,
        "endLineNumber" : 358,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ai.control",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 358,
        "startColumnNumber" : 24,
        "endLineNumber" : 358,
        "endColumnNumber" : 41
      },
      "nodeContext" : "ai.control=type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 358,
        "startColumnNumber" : 24,
        "endLineNumber" : 358,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.control=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 357,
        "startColumnNumber" : 37,
        "endLineNumber" : 359,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.control=type;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 358,
        "startColumnNumber" : 24,
        "endLineNumber" : 358,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.control=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 361,
      "startColumnNumber" : 24,
      "endLineNumber" : 361,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 361,
        "startColumnNumber" : 24,
        "endLineNumber" : 361,
        "endColumnNumber" : 36
      },
      "nodeContext" : "ai.posTarget",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 361,
        "startColumnNumber" : 24,
        "endLineNumber" : 361,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ai.posTarget.set(exec.numf(p1),exec.numf(p2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 361,
        "startColumnNumber" : 24,
        "endLineNumber" : 361,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 360,
        "startColumnNumber" : 35,
        "endLineNumber" : 365,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 361,
        "startColumnNumber" : 24,
        "endLineNumber" : 361,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 362,
      "startColumnNumber" : 24,
      "endLineNumber" : 362,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 362,
        "startColumnNumber" : 24,
        "endLineNumber" : 362,
        "endColumnNumber" : 37
      },
      "nodeContext" : "ai.aimControl",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 362,
        "startColumnNumber" : 24,
        "endLineNumber" : 362,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ai.aimControl=type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 362,
        "startColumnNumber" : 24,
        "endLineNumber" : 362,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.aimControl=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 360,
        "startColumnNumber" : 35,
        "endLineNumber" : 365,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 362,
        "startColumnNumber" : 24,
        "endLineNumber" : 362,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.aimControl=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 363,
      "startColumnNumber" : 24,
      "endLineNumber" : 363,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 363,
        "startColumnNumber" : 24,
        "endLineNumber" : 363,
        "endColumnNumber" : 37
      },
      "nodeContext" : "ai.mainTarget",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 363,
        "startColumnNumber" : 24,
        "endLineNumber" : 363,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ai.mainTarget=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 363,
        "startColumnNumber" : 24,
        "endLineNumber" : 363,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.mainTarget=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 360,
        "startColumnNumber" : 35,
        "endLineNumber" : 365,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 363,
        "startColumnNumber" : 24,
        "endLineNumber" : 363,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.mainTarget=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 364,
      "startColumnNumber" : 24,
      "endLineNumber" : 364,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 364,
        "startColumnNumber" : 24,
        "endLineNumber" : 364,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ai.shoot",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 364,
        "startColumnNumber" : 24,
        "endLineNumber" : 364,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ai.shoot=exec.bool(p3)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 364,
        "startColumnNumber" : 24,
        "endLineNumber" : 364,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.shoot=exec.bool(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 360,
        "startColumnNumber" : 35,
        "endLineNumber" : 365,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 364,
        "startColumnNumber" : 24,
        "endLineNumber" : 364,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.shoot=exec.bool(p3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 367,
      "startColumnNumber" : 24,
      "endLineNumber" : 367,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 367,
        "startColumnNumber" : 24,
        "endLineNumber" : 367,
        "endColumnNumber" : 37
      },
      "nodeContext" : "ai.aimControl",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 367,
        "startColumnNumber" : 24,
        "endLineNumber" : 367,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ai.aimControl=type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 367,
        "startColumnNumber" : 24,
        "endLineNumber" : 367,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.aimControl=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 366,
        "startColumnNumber" : 36,
        "endLineNumber" : 370,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.aimControl=type;\n  ai.mainTarget=exec.obj(p1) instanceof   Teamc t ? t : null;\n  ai.shoot=exec.bool(p2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 367,
        "startColumnNumber" : 24,
        "endLineNumber" : 367,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.aimControl=type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 368,
      "startColumnNumber" : 24,
      "endLineNumber" : 368,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 368,
        "startColumnNumber" : 24,
        "endLineNumber" : 368,
        "endColumnNumber" : 37
      },
      "nodeContext" : "ai.mainTarget",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 368,
        "startColumnNumber" : 24,
        "endLineNumber" : 368,
        "endColumnNumber" : 82
      },
      "nodeContext" : "ai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 368,
        "startColumnNumber" : 24,
        "endLineNumber" : 368,
        "endColumnNumber" : 83
      },
      "nodeContext" : "ai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 366,
        "startColumnNumber" : 36,
        "endLineNumber" : 370,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.aimControl=type;\n  ai.mainTarget=exec.obj(p1) instanceof   Teamc t ? t : null;\n  ai.shoot=exec.bool(p2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 368,
        "startColumnNumber" : 24,
        "endLineNumber" : 368,
        "endColumnNumber" : 83
      },
      "nodeContext" : "ai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 369,
      "startColumnNumber" : 24,
      "endLineNumber" : 369,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 369,
        "startColumnNumber" : 24,
        "endLineNumber" : 369,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ai.shoot",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 369,
        "startColumnNumber" : 24,
        "endLineNumber" : 369,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ai.shoot=exec.bool(p2)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 369,
        "startColumnNumber" : 24,
        "endLineNumber" : 369,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.shoot=exec.bool(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 366,
        "startColumnNumber" : 36,
        "endLineNumber" : 370,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.aimControl=type;\n  ai.mainTarget=exec.obj(p1) instanceof   Teamc t ? t : null;\n  ai.shoot=exec.bool(p2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 369,
        "startColumnNumber" : 24,
        "endLineNumber" : 369,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.shoot=exec.bool(p2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 372,
      "startColumnNumber" : 24,
      "endLineNumber" : 372,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 372,
        "startColumnNumber" : 24,
        "endLineNumber" : 372,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ai.boost",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 372,
        "startColumnNumber" : 24,
        "endLineNumber" : 372,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ai.boost=exec.bool(p1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 372,
        "startColumnNumber" : 24,
        "endLineNumber" : 372,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.boost=exec.bool(p1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 371,
        "startColumnNumber" : 34,
        "endLineNumber" : 373,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ai.boost=exec.bool(p1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 372,
        "startColumnNumber" : 24,
        "endLineNumber" : 372,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.boost=exec.bool(p1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 384,
      "startColumnNumber" : 27,
      "endLineNumber" : 384,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 384,
        "startColumnNumber" : 27,
        "endLineNumber" : 384,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ai.payTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 384,
        "startColumnNumber" : 27,
        "endLineNumber" : 384,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.payTimer > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 384,
        "startColumnNumber" : 24,
        "endLineNumber" : 384,
        "endColumnNumber" : 51
      },
      "nodeContext" : "if (ai.payTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 383,
        "startColumnNumber" : 36,
        "endLineNumber" : 390,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.payTimer > 0)   return;\n  if (unit instanceof   Payloadc pay && pay.hasPayload()) {\n    Call.payloadDropped(unit,unit.x,unit.y);\n    ai.payTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 384,
        "startColumnNumber" : 24,
        "endLineNumber" : 384,
        "endColumnNumber" : 51
      },
      "nodeContext" : "if (ai.payTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 388,
      "startColumnNumber" : 28,
      "endLineNumber" : 388,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 388,
        "startColumnNumber" : 28,
        "endLineNumber" : 388,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.payTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 388,
        "startColumnNumber" : 28,
        "endLineNumber" : 388,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ai.payTimer=LogicAI.transferDelay",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 388,
        "startColumnNumber" : 28,
        "endLineNumber" : 388,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ai.payTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 386,
        "startColumnNumber" : 76,
        "endLineNumber" : 389,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  Call.payloadDropped(unit,unit.x,unit.y);\n  ai.payTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 386,
        "startColumnNumber" : 24,
        "endLineNumber" : 389,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Payloadc pay && pay.hasPayload()) {\n  Call.payloadDropped(unit,unit.x,unit.y);\n  ai.payTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 383,
        "startColumnNumber" : 36,
        "endLineNumber" : 390,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.payTimer > 0)   return;\n  if (unit instanceof   Payloadc pay && pay.hasPayload()) {\n    Call.payloadDropped(unit,unit.x,unit.y);\n    ai.payTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 388,
        "startColumnNumber" : 28,
        "endLineNumber" : 388,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ai.payTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 392,
      "startColumnNumber" : 27,
      "endLineNumber" : 392,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 392,
        "startColumnNumber" : 27,
        "endLineNumber" : 392,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ai.payTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 392,
        "startColumnNumber" : 27,
        "endLineNumber" : 392,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.payTimer > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 392,
        "startColumnNumber" : 24,
        "endLineNumber" : 392,
        "endColumnNumber" : 51
      },
      "nodeContext" : "if (ai.payTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1639,
        "startLineNumber" : 391,
        "startColumnNumber" : 36,
        "endLineNumber" : 419,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.payTimer > 0)   return;\n  if (unit instanceof   Payloadc pay) {\n    if (exec.bool(p1)) {\n      Unit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\n      if (result != null) {\n        Call.pickedUnitPayload(unit,result);\n      }\n    }\n else {\n      Building tile=world.buildWorld(unit.x,unit.y);\n      if (tile != null && tile.team == unit.team) {\n        if (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\n          Call.pickedBuildPayload(unit,tile,true);\n        }\n else {\n          Payload current=tile.getPayload();\n          if (current != null && pay.canPickupPayload(current)) {\n            Call.pickedBuildPayload(unit,tile,false);\n          }\n        }\n      }\n    }\n    ai.payTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 392,
        "startColumnNumber" : 24,
        "endLineNumber" : 392,
        "endColumnNumber" : 51
      },
      "nodeContext" : "if (ai.payTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 417,
      "startColumnNumber" : 28,
      "endLineNumber" : 417,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 417,
        "startColumnNumber" : 28,
        "endLineNumber" : 417,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.payTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 417,
        "startColumnNumber" : 28,
        "endLineNumber" : 417,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ai.payTimer=LogicAI.transferDelay",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 417,
        "startColumnNumber" : 28,
        "endLineNumber" : 417,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ai.payTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 394,
        "startColumnNumber" : 56,
        "endLineNumber" : 418,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (exec.bool(p1)) {\n    Unit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\n    if (result != null) {\n      Call.pickedUnitPayload(unit,result);\n    }\n  }\n else {\n    Building tile=world.buildWorld(unit.x,unit.y);\n    if (tile != null && tile.team == unit.team) {\n      if (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\n        Call.pickedBuildPayload(unit,tile,true);\n      }\n else {\n        Payload current=tile.getPayload();\n        if (current != null && pay.canPickupPayload(current)) {\n          Call.pickedBuildPayload(unit,tile,false);\n        }\n      }\n    }\n  }\n  ai.payTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1538,
        "startLineNumber" : 394,
        "startColumnNumber" : 24,
        "endLineNumber" : 418,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Payloadc pay) {\n  if (exec.bool(p1)) {\n    Unit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\n    if (result != null) {\n      Call.pickedUnitPayload(unit,result);\n    }\n  }\n else {\n    Building tile=world.buildWorld(unit.x,unit.y);\n    if (tile != null && tile.team == unit.team) {\n      if (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\n        Call.pickedBuildPayload(unit,tile,true);\n      }\n else {\n        Payload current=tile.getPayload();\n        if (current != null && pay.canPickupPayload(current)) {\n          Call.pickedBuildPayload(unit,tile,false);\n        }\n      }\n    }\n  }\n  ai.payTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 165,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1639,
        "startLineNumber" : 391,
        "startColumnNumber" : 36,
        "endLineNumber" : 419,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.payTimer > 0)   return;\n  if (unit instanceof   Payloadc pay) {\n    if (exec.bool(p1)) {\n      Unit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\n      if (result != null) {\n        Call.pickedUnitPayload(unit,result);\n      }\n    }\n else {\n      Building tile=world.buildWorld(unit.x,unit.y);\n      if (tile != null && tile.team == unit.team) {\n        if (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\n          Call.pickedBuildPayload(unit,tile,true);\n        }\n else {\n          Payload current=tile.getPayload();\n          if (current != null && pay.canPickupPayload(current)) {\n            Call.pickedBuildPayload(unit,tile,false);\n          }\n        }\n      }\n    }\n    ai.payTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 417,
        "startColumnNumber" : 28,
        "endLineNumber" : 417,
        "endColumnNumber" : 64
      },
      "nodeContext" : "ai.payTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 426,
      "startColumnNumber" : 31,
      "endLineNumber" : 426,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 40
      },
      "nodeContext" : "ai.plan.x",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.plan.x != x",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 426,
        "startColumnNumber" : 28,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 426,
      "startColumnNumber" : 49,
      "endLineNumber" : 426,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 426,
        "startColumnNumber" : 49,
        "endLineNumber" : 426,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 426,
        "startColumnNumber" : 49,
        "endLineNumber" : 426,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ai.plan.y",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 426,
        "startColumnNumber" : 49,
        "endLineNumber" : 426,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ai.plan.y != y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 63
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 426,
        "startColumnNumber" : 28,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 426,
      "startColumnNumber" : 67,
      "endLineNumber" : 426,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 426,
        "startColumnNumber" : 67,
        "endLineNumber" : 426,
        "endColumnNumber" : 74
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 426,
        "startColumnNumber" : 67,
        "endLineNumber" : 426,
        "endColumnNumber" : 80
      },
      "nodeContext" : "ai.plan.block",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 426,
        "startColumnNumber" : 67,
        "endLineNumber" : 426,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ai.plan.block != block",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 89
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 426,
        "startColumnNumber" : 28,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 426,
        "startColumnNumber" : 31,
        "endLineNumber" : 426,
        "endColumnNumber" : 118
      },
      "nodeContext" : "ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 29,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 427,
      "startColumnNumber" : 32,
      "endLineNumber" : 427,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 427,
        "startColumnNumber" : 32,
        "endLineNumber" : 427,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 427,
        "startColumnNumber" : 32,
        "endLineNumber" : 427,
        "endColumnNumber" : 48
      },
      "nodeContext" : "ai.plan.progress",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 427,
        "startColumnNumber" : 32,
        "endLineNumber" : 427,
        "endColumnNumber" : 52
      },
      "nodeContext" : "ai.plan.progress=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 427,
        "startColumnNumber" : 32,
        "endLineNumber" : 427,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ai.plan.progress=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 426,
        "startColumnNumber" : 119,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 426,
        "startColumnNumber" : 28,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 427,
        "startColumnNumber" : 32,
        "endLineNumber" : 427,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ai.plan.progress=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 428,
      "startColumnNumber" : 32,
      "endLineNumber" : 428,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 428,
        "startColumnNumber" : 32,
        "endLineNumber" : 428,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 428,
        "startColumnNumber" : 32,
        "endLineNumber" : 428,
        "endColumnNumber" : 51
      },
      "nodeContext" : "ai.plan.initialized",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 428,
        "startColumnNumber" : 32,
        "endLineNumber" : 428,
        "endColumnNumber" : 59
      },
      "nodeContext" : "ai.plan.initialized=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 428,
        "startColumnNumber" : 32,
        "endLineNumber" : 428,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ai.plan.initialized=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 426,
        "startColumnNumber" : 119,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 426,
        "startColumnNumber" : 28,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 428,
        "startColumnNumber" : 32,
        "endLineNumber" : 428,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ai.plan.initialized=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 429,
      "startColumnNumber" : 32,
      "endLineNumber" : 429,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 429,
        "startColumnNumber" : 32,
        "endLineNumber" : 429,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 429,
        "startColumnNumber" : 32,
        "endLineNumber" : 429,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.plan.stuck",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 429,
        "startColumnNumber" : 32,
        "endLineNumber" : 429,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ai.plan.stuck=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 429,
        "startColumnNumber" : 32,
        "endLineNumber" : 429,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ai.plan.stuck=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 426,
        "startColumnNumber" : 119,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 426,
        "startColumnNumber" : 28,
        "endLineNumber" : 430,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n  ai.plan.progress=0;\n  ai.plan.initialized=false;\n  ai.plan.stuck=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 429,
        "startColumnNumber" : 32,
        "endLineNumber" : 429,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ai.plan.stuck=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 432,
      "startColumnNumber" : 28,
      "endLineNumber" : 432,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 432,
        "startColumnNumber" : 28,
        "endLineNumber" : 432,
        "endColumnNumber" : 35
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 432,
        "startColumnNumber" : 28,
        "endLineNumber" : 432,
        "endColumnNumber" : 57
      },
      "nodeContext" : "ai.plan.set(x,y,rot,block)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 432,
        "startColumnNumber" : 28,
        "endLineNumber" : 432,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ai.plan.set(x,y,rot,block);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 432,
        "startColumnNumber" : 28,
        "endLineNumber" : 432,
        "endColumnNumber" : 58
      },
      "nodeContext" : "ai.plan.set(x,y,rot,block);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 433,
      "startColumnNumber" : 28,
      "endLineNumber" : 433,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 433,
        "startColumnNumber" : 28,
        "endLineNumber" : 433,
        "endColumnNumber" : 35
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 433,
        "startColumnNumber" : 28,
        "endLineNumber" : 433,
        "endColumnNumber" : 42
      },
      "nodeContext" : "ai.plan.config",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 433,
        "startColumnNumber" : 28,
        "endLineNumber" : 433,
        "endColumnNumber" : 49
      },
      "nodeContext" : "ai.plan.config=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 433,
        "startColumnNumber" : 28,
        "endLineNumber" : 433,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ai.plan.config=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 433,
        "startColumnNumber" : 28,
        "endLineNumber" : 433,
        "endColumnNumber" : 50
      },
      "nodeContext" : "ai.plan.config=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 435,
      "startColumnNumber" : 31,
      "endLineNumber" : 435,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 435,
        "startColumnNumber" : 31,
        "endLineNumber" : 435,
        "endColumnNumber" : 38
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 435,
        "startColumnNumber" : 31,
        "endLineNumber" : 435,
        "endColumnNumber" : 45
      },
      "nodeContext" : "ai.plan.tile()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 435,
        "startColumnNumber" : 31,
        "endLineNumber" : 435,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ai.plan.tile() != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 435,
        "startColumnNumber" : 28,
        "endLineNumber" : 439,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.tile() != null) {\n  builder.clearBuilding();\n  builder.updateBuilding(true);\n  builder.addBuild(ai.plan);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 435,
        "startColumnNumber" : 31,
        "endLineNumber" : 435,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ai.plan.tile() != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 438,
      "startColumnNumber" : 49,
      "endLineNumber" : 438,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 438,
        "startColumnNumber" : 49,
        "endLineNumber" : 438,
        "endColumnNumber" : 56
      },
      "nodeContext" : "ai.plan",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 438,
        "startColumnNumber" : 32,
        "endLineNumber" : 438,
        "endColumnNumber" : 57
      },
      "nodeContext" : "builder.addBuild(ai.plan)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 438,
        "startColumnNumber" : 32,
        "endLineNumber" : 438,
        "endColumnNumber" : 58
      },
      "nodeContext" : "builder.addBuild(ai.plan);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 435,
        "startColumnNumber" : 54,
        "endLineNumber" : 439,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  builder.clearBuilding();\n  builder.updateBuilding(true);\n  builder.addBuild(ai.plan);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 435,
        "startColumnNumber" : 28,
        "endLineNumber" : 439,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (ai.plan.tile() != null) {\n  builder.clearBuilding();\n  builder.updateBuilding(true);\n  builder.addBuild(ai.plan);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 421,
        "startColumnNumber" : 99,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1024,
        "startLineNumber" : 421,
        "startColumnNumber" : 24,
        "endLineNumber" : 440,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\n  int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n  int rot=exec.numi(p4);\n  if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n    ai.plan.progress=0;\n    ai.plan.initialized=false;\n    ai.plan.stuck=false;\n  }\n  ai.plan.set(x,y,rot,block);\n  ai.plan.config=null;\n  if (ai.plan.tile() != null) {\n    builder.clearBuilding();\n    builder.updateBuilding(true);\n    builder.addBuild(ai.plan);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 420,
        "startColumnNumber" : 34,
        "endLineNumber" : 441,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (unit instanceof   Builderc builder && exec.obj(p3) instanceof   Block block) {\n    int x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\n    int rot=exec.numi(p4);\n    if (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\n      ai.plan.progress=0;\n      ai.plan.initialized=false;\n      ai.plan.stuck=false;\n    }\n    ai.plan.set(x,y,rot,block);\n    ai.plan.config=null;\n    if (ai.plan.tile() != null) {\n      builder.clearBuilding();\n      builder.updateBuilding(true);\n      builder.addBuild(ai.plan);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 438,
        "startColumnNumber" : 32,
        "endLineNumber" : 438,
        "endColumnNumber" : 58
      },
      "nodeContext" : "builder.addBuild(ai.plan);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 457,
      "startColumnNumber" : 27,
      "endLineNumber" : 457,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 457,
        "startColumnNumber" : 27,
        "endLineNumber" : 457,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.itemTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 457,
        "startColumnNumber" : 27,
        "endLineNumber" : 457,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ai.itemTimer > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 457,
        "startColumnNumber" : 24,
        "endLineNumber" : 457,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 456,
        "startColumnNumber" : 37,
        "endLineNumber" : 469,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.itemTimer > 0)   return;\n  Building build=exec.building(p1);\n  int amount=exec.numi(p2);\n  int dropped=Math.min(unit.stack.amount,amount);\n  if (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\n    int accepted=build.acceptStack(unit.item(),dropped,unit);\n    if (accepted > 0) {\n      Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n      ai.itemTimer=LogicAI.transferDelay;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 457,
        "startColumnNumber" : 24,
        "endLineNumber" : 457,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 466,
      "startColumnNumber" : 32,
      "endLineNumber" : 466,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 466,
        "startColumnNumber" : 32,
        "endLineNumber" : 466,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ai.itemTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 466,
        "startColumnNumber" : 32,
        "endLineNumber" : 466,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ai.itemTimer=LogicAI.transferDelay",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 466,
        "startColumnNumber" : 32,
        "endLineNumber" : 466,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ai.itemTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 464,
        "startColumnNumber" : 44,
        "endLineNumber" : 467,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n  ai.itemTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 464,
        "startColumnNumber" : 28,
        "endLineNumber" : 467,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (accepted > 0) {\n  Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n  ai.itemTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 368,
        "startLineNumber" : 462,
        "startColumnNumber" : 102,
        "endLineNumber" : 468,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int accepted=build.acceptStack(unit.item(),dropped,unit);\n  if (accepted > 0) {\n    Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n    ai.itemTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 446,
        "startLineNumber" : 462,
        "startColumnNumber" : 24,
        "endLineNumber" : 468,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\n  int accepted=build.acceptStack(unit.item(),dropped,unit);\n  if (accepted > 0) {\n    Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n    ai.itemTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 456,
        "startColumnNumber" : 37,
        "endLineNumber" : 469,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.itemTimer > 0)   return;\n  Building build=exec.building(p1);\n  int amount=exec.numi(p2);\n  int dropped=Math.min(unit.stack.amount,amount);\n  if (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\n    int accepted=build.acceptStack(unit.item(),dropped,unit);\n    if (accepted > 0) {\n      Call.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\n      ai.itemTimer=LogicAI.transferDelay;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 466,
        "startColumnNumber" : 32,
        "endLineNumber" : 466,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ai.itemTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 471,
      "startColumnNumber" : 27,
      "endLineNumber" : 471,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 471,
        "startColumnNumber" : 27,
        "endLineNumber" : 471,
        "endColumnNumber" : 39
      },
      "nodeContext" : "ai.itemTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 471,
        "startColumnNumber" : 27,
        "endLineNumber" : 471,
        "endColumnNumber" : 43
      },
      "nodeContext" : "ai.itemTimer > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 471,
        "startColumnNumber" : 24,
        "endLineNumber" : 471,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 675,
        "startLineNumber" : 470,
        "startColumnNumber" : 37,
        "endLineNumber" : 484,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.itemTimer > 0)   return;\n  Building build=exec.building(p1);\n  int amount=exec.numi(p3);\n  if (build != null && exec.obj(p2) instanceof   Item item && unit.within(build,logicItemTransferRange)) {\n    int taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\n    if (taken > 0) {\n      Call.takeItems(build,item,taken,unit);\n      ai.itemTimer=LogicAI.transferDelay;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 471,
        "startColumnNumber" : 24,
        "endLineNumber" : 471,
        "endColumnNumber" : 52
      },
      "nodeContext" : "if (ai.itemTimer > 0) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  }, {
    "nodeContext" : "ai",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 481,
      "startColumnNumber" : 32,
      "endLineNumber" : 481,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 481,
        "startColumnNumber" : 32,
        "endLineNumber" : 481,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ai.itemTimer",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 481,
        "startColumnNumber" : 32,
        "endLineNumber" : 481,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ai.itemTimer=LogicAI.transferDelay",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 481,
        "startColumnNumber" : 32,
        "endLineNumber" : 481,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ai.itemTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 479,
        "startColumnNumber" : 41,
        "endLineNumber" : 482,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Call.takeItems(build,item,taken,unit);\n  ai.itemTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 479,
        "startColumnNumber" : 28,
        "endLineNumber" : 482,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (taken > 0) {\n  Call.takeItems(build,item,taken,unit);\n  ai.itemTimer=LogicAI.transferDelay;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 360,
        "startLineNumber" : 476,
        "startColumnNumber" : 124,
        "endLineNumber" : 483,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  int taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\n  if (taken > 0) {\n    Call.takeItems(build,item,taken,unit);\n    ai.itemTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 460,
        "startLineNumber" : 476,
        "startColumnNumber" : 24,
        "endLineNumber" : 483,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\n  int taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\n  if (taken > 0) {\n    Call.takeItems(build,item,taken,unit);\n    ai.itemTimer=LogicAI.transferDelay;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 675,
        "startLineNumber" : 470,
        "startColumnNumber" : 37,
        "endLineNumber" : 484,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (ai.itemTimer > 0)   return;\n  Building build=exec.building(p1);\n  int amount=exec.numi(p3);\n  if (build != null && exec.obj(p2) instanceof   Item item && unit.within(build,logicItemTransferRange)) {\n    int taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\n    if (taken > 0) {\n      Call.takeItems(build,item,taken,unit);\n      ai.itemTimer=LogicAI.transferDelay;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7656,
        "startLineNumber" : 335,
        "startColumnNumber" : 16,
        "endLineNumber" : 486,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (type) {\ncase move, stop, approach ->{\n    ai.control=type;\n    ai.moveX=exec.numf(p1);\n    ai.moveY=exec.numf(p2);\n    if (type == LUnitControl.approach) {\n      ai.moveRad=exec.numf(p3);\n    }\n    if (type == LUnitControl.stop) {\n      if (unit instanceof       Minerc miner) {\n        miner.mineTile(null);\n      }\n      if (unit instanceof       Builderc build) {\n        build.clearBuilding();\n      }\n    }\n  }\ncase within ->{\n  exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n}\ncase pathfind ->{\nai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 916,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7752,
        "startLineNumber" : 332,
        "startColumnNumber" : 58,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 925,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7798,
        "startLineNumber" : 332,
        "startColumnNumber" : 12,
        "endLineNumber" : 487,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (unitObj instanceof Unit unit && ai != null) {\n  ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n      ai.control=type;\n      ai.moveX=exec.numf(p1);\n      ai.moveY=exec.numf(p2);\n      if (type == LUnitControl.approach) {\n        ai.moveRad=exec.numf(p3);\n      }\n      if (type == LUnitControl.stop) {\n        if (unit instanceof         Minerc miner) {\n          miner.mineTile(null);\n        }\n        if (unit instanceof         Builderc build) {\n          build.clearBuilding();\n        }\n      }\n    }\ncase within ->{\n    exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n  }\ncase pathfind ->{\n  ai.control=type;\n}\ncase target ->{\nai.posTarget.set(exec.numf(p1),exec.numf(p2));\nai.aimControl=type;\nai.mainTarget=null;\nai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 936,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7970,
        "startLineNumber" : 327,
        "startColumnNumber" : 39,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 955,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8019,
        "startLineNumber" : 326,
        "startColumnNumber" : 8,
        "endLineNumber" : 488,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(LExecutor exec){\n  Object unitObj=exec.obj(varUnit);\n  LogicAI ai=checkLogicAI(exec,unitObj);\n  if (unitObj instanceof   Unit unit && ai != null) {\n    ai.controlTimer=LogicAI.logicControlTimeout;\nswitch (type) {\ncase move, stop, approach ->{\n        ai.control=type;\n        ai.moveX=exec.numf(p1);\n        ai.moveY=exec.numf(p2);\n        if (type == LUnitControl.approach) {\n          ai.moveRad=exec.numf(p3);\n        }\n        if (type == LUnitControl.stop) {\n          if (unit instanceof           Minerc miner) {\n            miner.mineTile(null);\n          }\n          if (unit instanceof           Builderc build) {\n            build.clearBuilding();\n          }\n        }\n      }\ncase within ->{\n      exec.setnum(p4,unit.within(exec.numf(p1),exec.numf(p2),exec.numf(p3)) ? 1 : 0);\n    }\ncase pathfind ->{\n    ai.control=type;\n  }\ncase target ->{\n  ai.posTarget.set(exec.numf(p1),exec.numf(p2));\n  ai.aimControl=type;\n  ai.mainTarget=null;\n  ai.shoot=exec.bool(p3);\n}\ncase targetp ->{\nai.aimControl=type;\nai.mainTarget=exec.obj(p1) instanceof Teamc t ? t : null;\nai.shoot=exec.bool(p2);\n}\ncase boost ->{\nai.boost=exec.bool(p1);\n}\ncase flag ->{\nunit.flag=exec.num(p1);\n}\ncase mine ->{\nTile tile=world.tileWorld(exec.numf(p1),exec.numf(p2));\nif (unit instanceof Minerc miner) {\nminer.mineTile(miner.validMine(tile) ? tile : null);\n}\n}\ncase payDrop ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay && pay.hasPayload()) {\nCall.payloadDropped(unit,unit.x,unit.y);\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase payTake ->{\nif (ai.payTimer > 0) return;\nif (unit instanceof Payloadc pay) {\nif (exec.bool(p1)) {\nUnit result=Units.closest(unit.team,unit.x,unit.y,unit.type().hitSize * 2f,u -> u.isAI() && u.isGrounded() && pay.canPickup(u)&& u.within(unit,u.hitSize + unit.hitSize * 1.2f));\nif (result != null) {\nCall.pickedUnitPayload(unit,result);\n}\n}\n else {\nBuilding tile=world.buildWorld(unit.x,unit.y);\nif (tile != null && tile.team == unit.team) {\nif (tile.block.buildVisibility != BuildVisibility.hidden && tile.canPickup() && pay.canPickup(tile)) {\nCall.pickedBuildPayload(unit,tile,true);\n}\n else {\nPayload current=tile.getPayload();\nif (current != null && pay.canPickupPayload(current)) {\nCall.pickedBuildPayload(unit,tile,false);\n}\n}\n}\n}\nai.payTimer=LogicAI.transferDelay;\n}\n}\ncase build ->{\nif (unit instanceof Builderc builder && exec.obj(p3) instanceof Block block) {\nint x=world.toTile(exec.numf(p1)), y=world.toTile(exec.numf(p2));\nint rot=exec.numi(p4);\nif (ai.plan.x != x || ai.plan.y != y || ai.plan.block != block || builder.plans().isEmpty()) {\nai.plan.progress=0;\nai.plan.initialized=false;\nai.plan.stuck=false;\n}\nai.plan.set(x,y,rot,block);\nai.plan.config=null;\nif (ai.plan.tile() != null) {\nbuilder.clearBuilding();\nbuilder.updateBuilding(true);\nbuilder.addBuild(ai.plan);\n}\n}\n}\ncase getBlock ->{\nfloat x=exec.numf(p1), y=exec.numf(p2);\nfloat range=Math.max(unit.range(),buildingRange);\nif (!unit.within(x,y,range)) {\nexec.setobj(p3,null);\nexec.setnum(p4,0);\n}\n else {\nTile tile=world.tileWorld(x,y);\nBlock block=tile == null ? null : !tile.synthetic() ? (tile.solid() ? Blocks.stoneWall : Blocks.air) : tile.block();\nexec.setobj(p3,block);\nexec.setnum(p4,tile != null && tile.build != null ? tile.build.rotation : 0);\n}\n}\ncase itemDrop ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p2);\nint dropped=Math.min(unit.stack.amount,amount);\nif (build != null && dropped > 0 && unit.within(build,logicItemTransferRange)) {\nint accepted=build.acceptStack(unit.item(),dropped,unit);\nif (accepted > 0) {\nCall.transferItemTo(unit,unit.item(),accepted,unit.x,unit.y,build);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ncase itemTake ->{\nif (ai.itemTimer > 0) return;\nBuilding build=exec.building(p1);\nint amount=exec.numi(p3);\nif (build != null && exec.obj(p2) instanceof Item item && unit.within(build,logicItemTransferRange)) {\nint taken=Math.min(build.items.get(item),Math.min(amount,unit.maxAccepted(item)));\nif (taken > 0) {\nCall.takeItems(build,item,taken,unit);\nai.itemTimer=LogicAI.transferDelay;\n}\n}\n}\ndefault ->{\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 965,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 481,
        "startColumnNumber" : 32,
        "endLineNumber" : 481,
        "endColumnNumber" : 69
      },
      "nodeContext" : "ai.itemTimer=LogicAI.transferDelay;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "mindustry.ai.types.LogicAI"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 332,
    "startColumnNumber" : 47,
    "endLineNumber" : 332,
    "endColumnNumber" : 49
  }, {
    "charLength" : 2,
    "startLineNumber" : 333,
    "startColumnNumber" : 16,
    "endLineNumber" : 333,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 337,
    "startColumnNumber" : 24,
    "endLineNumber" : 337,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 338,
    "startColumnNumber" : 24,
    "endLineNumber" : 338,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 339,
    "startColumnNumber" : 24,
    "endLineNumber" : 339,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 341,
    "startColumnNumber" : 28,
    "endLineNumber" : 341,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 358,
    "startColumnNumber" : 24,
    "endLineNumber" : 358,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 361,
    "startColumnNumber" : 24,
    "endLineNumber" : 361,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 362,
    "startColumnNumber" : 24,
    "endLineNumber" : 362,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 363,
    "startColumnNumber" : 24,
    "endLineNumber" : 363,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 364,
    "startColumnNumber" : 24,
    "endLineNumber" : 364,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 367,
    "startColumnNumber" : 24,
    "endLineNumber" : 367,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 368,
    "startColumnNumber" : 24,
    "endLineNumber" : 368,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 369,
    "startColumnNumber" : 24,
    "endLineNumber" : 369,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 372,
    "startColumnNumber" : 24,
    "endLineNumber" : 372,
    "endColumnNumber" : 26
  }, {
    "charLength" : 2,
    "startLineNumber" : 384,
    "startColumnNumber" : 27,
    "endLineNumber" : 384,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 388,
    "startColumnNumber" : 28,
    "endLineNumber" : 388,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 392,
    "startColumnNumber" : 27,
    "endLineNumber" : 392,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 417,
    "startColumnNumber" : 28,
    "endLineNumber" : 417,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 426,
    "startColumnNumber" : 31,
    "endLineNumber" : 426,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 426,
    "startColumnNumber" : 49,
    "endLineNumber" : 426,
    "endColumnNumber" : 51
  }, {
    "charLength" : 2,
    "startLineNumber" : 426,
    "startColumnNumber" : 67,
    "endLineNumber" : 426,
    "endColumnNumber" : 69
  }, {
    "charLength" : 2,
    "startLineNumber" : 427,
    "startColumnNumber" : 32,
    "endLineNumber" : 427,
    "endColumnNumber" : 34
  }, {
    "charLength" : 2,
    "startLineNumber" : 428,
    "startColumnNumber" : 32,
    "endLineNumber" : 428,
    "endColumnNumber" : 34
  }, {
    "charLength" : 2,
    "startLineNumber" : 429,
    "startColumnNumber" : 32,
    "endLineNumber" : 429,
    "endColumnNumber" : 34
  }, {
    "charLength" : 2,
    "startLineNumber" : 432,
    "startColumnNumber" : 28,
    "endLineNumber" : 432,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 433,
    "startColumnNumber" : 28,
    "endLineNumber" : 433,
    "endColumnNumber" : 30
  }, {
    "charLength" : 2,
    "startLineNumber" : 435,
    "startColumnNumber" : 31,
    "endLineNumber" : 435,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 438,
    "startColumnNumber" : 49,
    "endLineNumber" : 438,
    "endColumnNumber" : 51
  }, {
    "charLength" : 2,
    "startLineNumber" : 457,
    "startColumnNumber" : 27,
    "endLineNumber" : 457,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 466,
    "startColumnNumber" : 32,
    "endLineNumber" : 466,
    "endColumnNumber" : 34
  }, {
    "charLength" : 2,
    "startLineNumber" : 471,
    "startColumnNumber" : 27,
    "endLineNumber" : 471,
    "endColumnNumber" : 29
  }, {
    "charLength" : 2,
    "startLineNumber" : 481,
    "startColumnNumber" : 32,
    "endLineNumber" : 481,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 10
  }, {
    "firstKey" : 19,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 10
  }, {
    "firstKey" : 20,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 21,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 32,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 32,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 32,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 27,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 28,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 29,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 32,
    "secondKey" : 31,
    "layout" : 7
  } ]
}