{
  "id" : 340,
  "expression" : "\"result: {}\"",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/interpreter/src/main/java/com/iluwatar/interpreter/App.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"result: {}\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 74,
      "startColumnNumber" : 16,
      "endLineNumber" : 74,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "LOGGER.info(\"result: {}\",stack.pop().interpret())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "LOGGER.info(\"result: {}\",stack.pop().interpret());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 51,
        "startColumnNumber" : 41,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  var tokenString=\"4 3 2 - 1 + *\";\n  var stack=new Stack<Expression>();\n  var tokenList=tokenString.split(\" \");\n  for (  var s : tokenList) {\n    if (isOperator(s)) {\n      var rightExpression=stack.pop();\n      var leftExpression=stack.pop();\n      LOGGER.info(\"popped from stack left: {} right: {}\",leftExpression.interpret(),rightExpression.interpret());\n      var operator=getOperatorInstance(s,leftExpression,rightExpression);\n      LOGGER.info(\"operator: {}\",operator);\n      var result=operator.interpret();\n      var resultExpression=new NumberExpression(result);\n      stack.push(resultExpression);\n      LOGGER.info(\"push result to stack: {}\",resultExpression.interpret());\n    }\n else {\n      var i=new NumberExpression(s);\n      stack.push(i);\n      LOGGER.info(\"push to stack: {}\",i.interpret());\n    }\n  }\n  LOGGER.info(\"result: {}\",stack.pop().interpret());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 75,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Program entry point. <p>Expressions can be evaluated using prefix, infix or postfix notations This sample uses postfix, where operator comes after the operands.\n * @param args command line args\n */\npublic static void main(String[] args){\n  var tokenString=\"4 3 2 - 1 + *\";\n  var stack=new Stack<Expression>();\n  var tokenList=tokenString.split(\" \");\n  for (  var s : tokenList) {\n    if (isOperator(s)) {\n      var rightExpression=stack.pop();\n      var leftExpression=stack.pop();\n      LOGGER.info(\"popped from stack left: {} right: {}\",leftExpression.interpret(),rightExpression.interpret());\n      var operator=getOperatorInstance(s,leftExpression,rightExpression);\n      LOGGER.info(\"operator: {}\",operator);\n      var result=operator.interpret();\n      var resultExpression=new NumberExpression(result);\n      stack.push(resultExpression);\n      LOGGER.info(\"push result to stack: {}\",resultExpression.interpret());\n    }\n else {\n      var i=new NumberExpression(s);\n      stack.push(i);\n      LOGGER.info(\"push to stack: {}\",i.interpret());\n    }\n  }\n  LOGGER.info(\"result: {}\",stack.pop().interpret());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 157,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "LOGGER.info(\"result: {}\",stack.pop().interpret());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 74,
    "startColumnNumber" : 16,
    "endLineNumber" : 74,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}