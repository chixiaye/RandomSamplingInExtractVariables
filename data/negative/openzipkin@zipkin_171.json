{
  "id" : 171,
  "expression" : "\"processing \" + current.value()",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/main/java/zipkin/internal/DependencyLinker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"processing \" + current.value()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 57,
      "startColumnNumber" : 20,
      "endLineNumber" : 57,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 52
      },
      "nodeContext" : "logger.fine(\"processing \" + current.value())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 53
      },
      "nodeContext" : "logger.fine(\"processing \" + current.value());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 56,
        "startColumnNumber" : 35,
        "endLineNumber" : 58,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  logger.fine(\"processing \" + current.value());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 58,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (logger.isLoggable(FINE)) {\n  logger.fine(\"processing \" + current.value());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 54,
        "startColumnNumber" : 80,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node<DependencyLinkSpan> current=i.next();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + current.value());\n  }\n  String child;\n  String parent;\nswitch (current.value().kind) {\ncase SERVER:    child=current.value().service;\n  parent=current.value().peerService;\nif (current == tree) {\n  if (parent == null) {\n    logger.fine(\"root's peer is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:child=current.value().peerService;\nparent=current.value().service;\nbreak;\ndefault:logger.fine(\"non-rpc span; skipping\");\ncontinue;\n}\nif (logger.isLoggable(FINE) && parent == null) {\nlogger.fine(\"cannot determine parent, looking for first server ancestor\");\n}\nNode<DependencyLinkSpan> ancestor=current.parent();\nwhile (ancestor != null && parent == null) {\nif (logger.isLoggable(FINE)) {\nlogger.fine(\"processing ancestor \" + ancestor.value());\n}\nif (ancestor.value().kind == DependencyLinkSpan.Kind.SERVER) {\nparent=ancestor.value().service;\n}\nancestor=ancestor.parent();\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find server ancestor; skipping\");\ncontinue;\n}\n else if (logger.isLoggable(FINE)) {\nlogger.fine(\"incrementing link \" + parent + \" -> \"+ child);\n}\nPair<String> key=Pair.create(parent,child);\nif (linkMap.containsKey(key)) {\nlinkMap.put(key,linkMap.get(key) + 1);\n}\n else {\nlinkMap.put(key,1L);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 248,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2022,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Iterator<Node<DependencyLinkSpan>> i=tree.traverse(); i.hasNext(); ) {\n  Node<DependencyLinkSpan> current=i.next();\n  if (logger.isLoggable(FINE)) {\n    logger.fine(\"processing \" + current.value());\n  }\n  String child;\n  String parent;\nswitch (current.value().kind) {\ncase SERVER:    child=current.value().service;\n  parent=current.value().peerService;\nif (current == tree) {\n  if (parent == null) {\n    logger.fine(\"root's peer is unknown; skipping\");\n    continue;\n  }\n}\nbreak;\ncase CLIENT:child=current.value().peerService;\nparent=current.value().service;\nbreak;\ndefault:logger.fine(\"non-rpc span; skipping\");\ncontinue;\n}\nif (logger.isLoggable(FINE) && parent == null) {\nlogger.fine(\"cannot determine parent, looking for first server ancestor\");\n}\nNode<DependencyLinkSpan> ancestor=current.parent();\nwhile (ancestor != null && parent == null) {\nif (logger.isLoggable(FINE)) {\nlogger.fine(\"processing ancestor \" + ancestor.value());\n}\nif (ancestor.value().kind == DependencyLinkSpan.Kind.SERVER) {\nparent=ancestor.value().service;\n}\nancestor=ancestor.parent();\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find server ancestor; skipping\");\ncontinue;\n}\n else if (logger.isLoggable(FINE)) {\nlogger.fine(\"incrementing link \" + parent + \" -> \"+ child);\n}\nPair<String> key=Pair.create(parent,child);\nif (linkMap.containsKey(key)) {\nlinkMap.put(key,linkMap.get(key) + 1);\n}\n else {\nlinkMap.put(key,1L);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 266,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2441,
        "startLineNumber" : 43,
        "startColumnNumber" : 71,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!spans.hasNext())   return this;\n  Node.TreeBuilder<DependencyLinkSpan> builder=new Node.TreeBuilder<>();\n  while (spans.hasNext()) {\n    DependencyLinkSpan next=spans.next();\n    builder.addNode(next.parentId,next.id,next);\n  }\n  Node<DependencyLinkSpan> tree=builder.build();\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<Node<DependencyLinkSpan>> i=tree.traverse(); i.hasNext(); ) {\n    Node<DependencyLinkSpan> current=i.next();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + current.value());\n    }\n    String child;\n    String parent;\nswitch (current.value().kind) {\ncase SERVER:      child=current.value().service;\n    parent=current.value().peerService;\n  if (current == tree) {\n    if (parent == null) {\n      logger.fine(\"root's peer is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:child=current.value().peerService;\nparent=current.value().service;\nbreak;\ndefault:logger.fine(\"non-rpc span; skipping\");\ncontinue;\n}\nif (logger.isLoggable(FINE) && parent == null) {\nlogger.fine(\"cannot determine parent, looking for first server ancestor\");\n}\nNode<DependencyLinkSpan> ancestor=current.parent();\nwhile (ancestor != null && parent == null) {\nif (logger.isLoggable(FINE)) {\nlogger.fine(\"processing ancestor \" + ancestor.value());\n}\nif (ancestor.value().kind == DependencyLinkSpan.Kind.SERVER) {\nparent=ancestor.value().service;\n}\nancestor=ancestor.parent();\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find server ancestor; skipping\");\ncontinue;\n}\n else if (logger.isLoggable(FINE)) {\nlogger.fine(\"incrementing link \" + parent + \" -> \"+ child);\n}\nPair<String> key=Pair.create(parent,child);\nif (linkMap.containsKey(key)) {\nlinkMap.put(key,linkMap.get(key) + 1);\n}\n else {\nlinkMap.put(key,1L);\n}\n}\nreturn this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2585,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @param spans spans where all spans have the same trace id\n */\npublic DependencyLinker putTrace(Iterator<DependencyLinkSpan> spans){\n  if (!spans.hasNext())   return this;\n  Node.TreeBuilder<DependencyLinkSpan> builder=new Node.TreeBuilder<>();\n  while (spans.hasNext()) {\n    DependencyLinkSpan next=spans.next();\n    builder.addNode(next.parentId,next.id,next);\n  }\n  Node<DependencyLinkSpan> tree=builder.build();\n  if (logger.isLoggable(FINE))   logger.fine(\"traversing trace tree, breadth-first\");\n  for (Iterator<Node<DependencyLinkSpan>> i=tree.traverse(); i.hasNext(); ) {\n    Node<DependencyLinkSpan> current=i.next();\n    if (logger.isLoggable(FINE)) {\n      logger.fine(\"processing \" + current.value());\n    }\n    String child;\n    String parent;\nswitch (current.value().kind) {\ncase SERVER:      child=current.value().service;\n    parent=current.value().peerService;\n  if (current == tree) {\n    if (parent == null) {\n      logger.fine(\"root's peer is unknown; skipping\");\n      continue;\n    }\n  }\nbreak;\ncase CLIENT:child=current.value().peerService;\nparent=current.value().service;\nbreak;\ndefault:logger.fine(\"non-rpc span; skipping\");\ncontinue;\n}\nif (logger.isLoggable(FINE) && parent == null) {\nlogger.fine(\"cannot determine parent, looking for first server ancestor\");\n}\nNode<DependencyLinkSpan> ancestor=current.parent();\nwhile (ancestor != null && parent == null) {\nif (logger.isLoggable(FINE)) {\nlogger.fine(\"processing ancestor \" + ancestor.value());\n}\nif (ancestor.value().kind == DependencyLinkSpan.Kind.SERVER) {\nparent=ancestor.value().service;\n}\nancestor=ancestor.parent();\n}\nif (parent == null || child == null) {\nlogger.fine(\"cannot find server ancestor; skipping\");\ncontinue;\n}\n else if (logger.isLoggable(FINE)) {\nlogger.fine(\"incrementing link \" + parent + \" -> \"+ child);\n}\nPair<String> key=Pair.create(parent,child);\nif (linkMap.containsKey(key)) {\nlinkMap.put(key,linkMap.get(key) + 1);\n}\n else {\nlinkMap.put(key,1L);\n}\n}\nreturn this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 350,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 57,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 53
      },
      "nodeContext" : "logger.fine(\"processing \" + current.value());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 57,
    "startColumnNumber" : 20,
    "endLineNumber" : 57,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}