{
  "id" : 227,
  "expression" : "\"UpgradePatch tryPatch: done, it is ok\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "8e8108e5cf1668bc4a4e33c5ac971e61f44a590d",
  "filePath" : "tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"UpgradePatch tryPatch: done, it is ok\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 193,
      "startColumnNumber" : 25,
      "endLineNumber" : 193,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 65
      },
      "nodeContext" : "TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 66
      },
      "nodeContext" : "TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7821,
        "startLineNumber" : 45,
        "startColumnNumber" : 92,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 651,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean tryPatch(Context context,String tempPatchPath,PatchResult patchResult){\n  Tinker manager=Tinker.with(context);\n  final File patchFile=new File(tempPatchPath);\n  if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch is disabled, just return\");\n    return false;\n  }\n  if (!SharePatchFileUtil.isLegalFile(patchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch file is not found, just return\");\n    return false;\n  }\n  ShareSecurityCheck signatureCheck=new ShareSecurityCheck(context);\n  int returnCode=ShareTinkerInternals.checkTinkerPackage(context,manager.getTinkerFlags(),patchFile,signatureCheck);\n  if (returnCode != ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchPackageCheckFail\");\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,returnCode);\n    return false;\n  }\n  String patchMd5=SharePatchFileUtil.getMD5(patchFile);\n  if (patchMd5 == null) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:patch md5 is null, just return\");\n    return false;\n  }\n  patchResult.patchVersion=patchMd5;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchMd5:%s\",patchMd5);\n  final String patchDirectory=manager.getPatchDirectory().getAbsolutePath();\n  File patchInfoLockFile=SharePatchFileUtil.getPatchInfoLockFile(patchDirectory);\n  File patchInfoFile=SharePatchFileUtil.getPatchInfoFile(patchDirectory);\n  final Map<String,String> pkgProps=signatureCheck.getPackagePropertiesIfPresent();\n  if (pkgProps == null) {\n    TinkerLog.e(TAG,\"UpgradePatch packageProperties is null, do we process a valid patch apk ?\");\n    return false;\n  }\n  final String isProtectedAppStr=pkgProps.get(ShareConstants.PKGMETA_KEY_IS_PROTECTED_APP);\n  final boolean isProtectedApp=(isProtectedAppStr != null && !isProtectedAppStr.isEmpty() && !\"0\".equals(isProtectedAppStr));\n  SharePatchInfo oldInfo=SharePatchInfo.readAndCheckPropertyWithLock(patchInfoFile,patchInfoLockFile);\n  SharePatchInfo newInfo;\n  if (oldInfo != null) {\n    if (oldInfo.oldVersion == null || oldInfo.newVersion == null || oldInfo.oatDir == null) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchInfoCorrupted\");\n      manager.getPatchReporter().onPatchInfoCorrupted(patchFile,oldInfo.oldVersion,oldInfo.newVersion);\n      return false;\n    }\n    if (!SharePatchFileUtil.checkIfMd5Valid(patchMd5)) {\n      TinkerLog.e(TAG,\"UpgradePatch tryPatch:onPatchVersionCheckFail md5 %s is valid\",patchMd5);\n      manager.getPatchReporter().onPatchVersionCheckFail(patchFile,oldInfo,patchMd5);\n      return false;\n    }\n    final boolean usingInterpret=oldInfo.oatDir.equals(ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);\n    if (!usingInterpret && !ShareTinkerInternals.isNullOrNil(oldInfo.newVersion) && oldInfo.newVersion.equals(patchMd5)&& !oldInfo.isRemoveNewVersion) {\n      TinkerLog.e(TAG,\"patch already applied, md5: %s\",patchMd5);\n      UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n      return true;\n    }\n    final String finalOatDir=usingInterpret ? ShareConstants.CHANING_DEX_OPTIMIZE_PATH : oldInfo.oatDir;\n    newInfo=new SharePatchInfo(oldInfo.oldVersion,patchMd5,isProtectedApp,false,Build.FINGERPRINT,finalOatDir);\n  }\n else {\n    newInfo=new SharePatchInfo(\"\",patchMd5,isProtectedApp,false,Build.FINGERPRINT,ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH);\n  }\n  final String patchName=SharePatchFileUtil.getPatchVersionDirectory(patchMd5);\n  final String patchVersionDirectory=patchDirectory + \"/\" + patchName;\n  TinkerLog.i(TAG,\"UpgradePatch tryPatch:patchVersionDirectory:%s\",patchVersionDirectory);\n  File destPatchFile=new File(patchVersionDirectory + \"/\" + SharePatchFileUtil.getPatchVersionFile(patchMd5));\n  try {\n    if (!patchMd5.equals(SharePatchFileUtil.getMD5(destPatchFile))) {\n      SharePatchFileUtil.copyFileUsingStream(patchFile,destPatchFile);\n      TinkerLog.w(TAG,\"UpgradePatch copy patch file, src file: %s size: %d, dest file: %s size:%d\",patchFile.getAbsolutePath(),patchFile.length(),destPatchFile.getAbsolutePath(),destPatchFile.length());\n    }\n  }\n catch (  IOException e) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:copy patch file fail from %s to %s\",patchFile.getPath(),destPatchFile.getPath());\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,destPatchFile,patchFile.getName(),ShareConstants.TYPE_PATCH_FILE);\n    return false;\n  }\n  if (!DexDiffPatchInternal.tryRecoverDexFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch dex failed\");\n    return false;\n  }\n  if (!ArkHotDiffPatchInternal.tryRecoverArkHotLibrary(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    return false;\n  }\n  if (!BsDiffPatchInternal.tryRecoverLibraryFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch library failed\");\n    return false;\n  }\n  if (!ResDiffPatchInternal.tryRecoverResourceFiles(manager,signatureCheck,context,patchVersionDirectory,destPatchFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, try patch resource failed\");\n    return false;\n  }\n  if (!DexDiffPatchInternal.waitAndCheckDexOptFile(patchFile,manager)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, check dex opt file failed\");\n    return false;\n  }\n  if (!SharePatchInfo.rewritePatchInfoFileWithLock(patchInfoFile,newInfo,patchInfoLockFile)) {\n    TinkerLog.e(TAG,\"UpgradePatch tryPatch:new patch recover, rewrite patch info failed\");\n    manager.getPatchReporter().onPatchInfoCorrupted(patchFile,newInfo.oldVersion,newInfo.newVersion);\n    return false;\n  }\n  UpgradePatchRetry.getInstance(context).onPatchResetMaxCheck(patchMd5);\n  TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 669,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 66
      },
      "nodeContext" : "TinkerLog.w(TAG,\"UpgradePatch tryPatch: done, it is ok\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 193,
    "startColumnNumber" : 25,
    "endLineNumber" : 193,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}