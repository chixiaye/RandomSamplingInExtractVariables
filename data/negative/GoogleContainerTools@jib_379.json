{
  "id" : 379,
  "expression" : "\"application/layers\"",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/configuration/BuildConfigurationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"application/layers\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 63,
      "startColumnNumber" : 45,
      "endLineNumber" : 63,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 35,
        "endLineNumber" : 63,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Paths.get(\"application/layers\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 67
      },
      "nodeContext" : "CacheConfiguration.forPath(Paths.get(\"application/layers\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 62,
        "startColumnNumber" : 23,
        "endLineNumber" : 63,
        "endColumnNumber" : 67
      },
      "nodeContext" : "expectedApplicationLayersCacheConfiguration=CacheConfiguration.forPath(Paths.get(\"application/layers\"))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 68
      },
      "nodeContext" : "CacheConfiguration expectedApplicationLayersCacheConfiguration=CacheConfiguration.forPath(Paths.get(\"application/layers\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6128,
        "startLineNumber" : 41,
        "startColumnNumber" : 28,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String expectedBaseImageServerUrl=\"someserver\";\n  String expectedBaseImageName=\"baseimage\";\n  String expectedBaseImageTag=\"baseimagetag\";\n  String expectedBaseImageCredentialHelperName=\"credentialhelper\";\n  RegistryCredentials expectedKnownBaseRegistryCredentials=Mockito.mock(RegistryCredentials.class);\n  String expectedTargetServerUrl=\"someotherserver\";\n  String expectedTargetImageName=\"targetimage\";\n  String expectedTargetTag=\"targettag\";\n  String expectedTargetImageCredentialHelperName=\"anotherCredentialHelper\";\n  RegistryCredentials expectedKnownTargetRegistryCredentials=Mockito.mock(RegistryCredentials.class);\n  Instant expectedCreationTime=Instant.ofEpochSecond(10000);\n  List<String> expectedEntrypoint=Arrays.asList(\"some\",\"entrypoint\");\n  List<String> expectedJavaArguments=Arrays.asList(\"arg1\",\"arg2\");\n  Map<String,String> expectedEnvironment=ImmutableMap.of(\"key\",\"value\");\n  ImmutableList<Port> expectedExposedPorts=ImmutableList.of(new Port(1000,Protocol.TCP),new Port(2000,Protocol.TCP));\n  Map<String,String> expectedLabels=ImmutableMap.of(\"key1\",\"value1\",\"key2\",\"value2\");\n  Class<? extends BuildableManifestTemplate> expectedTargetFormat=OCIManifestTemplate.class;\n  CacheConfiguration expectedApplicationLayersCacheConfiguration=CacheConfiguration.forPath(Paths.get(\"application/layers\"));\n  CacheConfiguration expectedBaseImageLayersCacheConfiguration=CacheConfiguration.forPath(Paths.get(\"base/image/layers\"));\n  List<LayerConfiguration> expectedLayerConfigurations=Collections.singletonList(LayerConfiguration.builder().addEntry(Collections.emptyList(),\"destination\").build());\n  ImageConfiguration baseImageConfiguration=ImageConfiguration.builder(ImageReference.of(expectedBaseImageServerUrl,expectedBaseImageName,expectedBaseImageTag)).setCredentialHelper(expectedBaseImageCredentialHelperName).setKnownRegistryCredentials(expectedKnownBaseRegistryCredentials).build();\n  ImageConfiguration targetImageConfiguration=ImageConfiguration.builder(ImageReference.of(expectedTargetServerUrl,expectedTargetImageName,expectedTargetTag)).setCredentialHelper(expectedTargetImageCredentialHelperName).setKnownRegistryCredentials(expectedKnownTargetRegistryCredentials).build();\n  ContainerConfiguration containerConfiguration=ContainerConfiguration.builder().setCreationTime(expectedCreationTime).setEntrypoint(expectedEntrypoint).setProgramArguments(expectedJavaArguments).setEnvironment(expectedEnvironment).setExposedPorts(expectedExposedPorts).setLabels(expectedLabels).build();\n  BuildConfiguration.Builder buildConfigurationBuilder=BuildConfiguration.builder(Mockito.mock(JibLogger.class)).setBaseImageConfiguration(baseImageConfiguration).setTargetImageConfiguration(targetImageConfiguration).setContainerConfiguration(containerConfiguration).setApplicationLayersCacheConfiguration(expectedApplicationLayersCacheConfiguration).setBaseImageLayersCacheConfiguration(expectedBaseImageLayersCacheConfiguration).setTargetFormat(OCIManifestTemplate.class).setAllowInsecureRegistries(true).setLayerConfigurations(expectedLayerConfigurations);\n  BuildConfiguration buildConfiguration=buildConfigurationBuilder.build();\n  Assert.assertNotNull(buildConfiguration.getContainerConfiguration());\n  Assert.assertEquals(expectedCreationTime,buildConfiguration.getContainerConfiguration().getCreationTime());\n  Assert.assertEquals(expectedBaseImageServerUrl,buildConfiguration.getBaseImageConfiguration().getImageRegistry());\n  Assert.assertEquals(expectedBaseImageName,buildConfiguration.getBaseImageConfiguration().getImageRepository());\n  Assert.assertEquals(expectedBaseImageTag,buildConfiguration.getBaseImageConfiguration().getImageTag());\n  Assert.assertEquals(expectedBaseImageCredentialHelperName,buildConfiguration.getBaseImageConfiguration().getCredentialHelper());\n  Assert.assertEquals(expectedTargetServerUrl,buildConfiguration.getTargetImageConfiguration().getImageRegistry());\n  Assert.assertEquals(expectedTargetImageName,buildConfiguration.getTargetImageConfiguration().getImageRepository());\n  Assert.assertEquals(expectedTargetTag,buildConfiguration.getTargetImageConfiguration().getImageTag());\n  Assert.assertEquals(expectedTargetImageCredentialHelperName,buildConfiguration.getTargetImageConfiguration().getCredentialHelper());\n  Assert.assertEquals(expectedJavaArguments,buildConfiguration.getContainerConfiguration().getProgramArguments());\n  Assert.assertEquals(expectedEnvironment,buildConfiguration.getContainerConfiguration().getEnvironmentMap());\n  Assert.assertEquals(expectedExposedPorts,buildConfiguration.getContainerConfiguration().getExposedPorts());\n  Assert.assertEquals(expectedLabels,buildConfiguration.getContainerConfiguration().getLabels());\n  Assert.assertEquals(expectedTargetFormat,buildConfiguration.getTargetFormat());\n  Assert.assertEquals(expectedApplicationLayersCacheConfiguration,buildConfiguration.getApplicationLayersCacheConfiguration());\n  Assert.assertEquals(expectedBaseImageLayersCacheConfiguration,buildConfiguration.getBaseImageLayersCacheConfiguration());\n  Assert.assertTrue(buildConfiguration.getAllowInsecureRegistries());\n  Assert.assertEquals(expectedLayerConfigurations,buildConfiguration.getLayerConfigurations());\n  Assert.assertEquals(expectedEntrypoint,buildConfiguration.getContainerConfiguration().getEntrypoint());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 529,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6162,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuilder(){\n  String expectedBaseImageServerUrl=\"someserver\";\n  String expectedBaseImageName=\"baseimage\";\n  String expectedBaseImageTag=\"baseimagetag\";\n  String expectedBaseImageCredentialHelperName=\"credentialhelper\";\n  RegistryCredentials expectedKnownBaseRegistryCredentials=Mockito.mock(RegistryCredentials.class);\n  String expectedTargetServerUrl=\"someotherserver\";\n  String expectedTargetImageName=\"targetimage\";\n  String expectedTargetTag=\"targettag\";\n  String expectedTargetImageCredentialHelperName=\"anotherCredentialHelper\";\n  RegistryCredentials expectedKnownTargetRegistryCredentials=Mockito.mock(RegistryCredentials.class);\n  Instant expectedCreationTime=Instant.ofEpochSecond(10000);\n  List<String> expectedEntrypoint=Arrays.asList(\"some\",\"entrypoint\");\n  List<String> expectedJavaArguments=Arrays.asList(\"arg1\",\"arg2\");\n  Map<String,String> expectedEnvironment=ImmutableMap.of(\"key\",\"value\");\n  ImmutableList<Port> expectedExposedPorts=ImmutableList.of(new Port(1000,Protocol.TCP),new Port(2000,Protocol.TCP));\n  Map<String,String> expectedLabels=ImmutableMap.of(\"key1\",\"value1\",\"key2\",\"value2\");\n  Class<? extends BuildableManifestTemplate> expectedTargetFormat=OCIManifestTemplate.class;\n  CacheConfiguration expectedApplicationLayersCacheConfiguration=CacheConfiguration.forPath(Paths.get(\"application/layers\"));\n  CacheConfiguration expectedBaseImageLayersCacheConfiguration=CacheConfiguration.forPath(Paths.get(\"base/image/layers\"));\n  List<LayerConfiguration> expectedLayerConfigurations=Collections.singletonList(LayerConfiguration.builder().addEntry(Collections.emptyList(),\"destination\").build());\n  ImageConfiguration baseImageConfiguration=ImageConfiguration.builder(ImageReference.of(expectedBaseImageServerUrl,expectedBaseImageName,expectedBaseImageTag)).setCredentialHelper(expectedBaseImageCredentialHelperName).setKnownRegistryCredentials(expectedKnownBaseRegistryCredentials).build();\n  ImageConfiguration targetImageConfiguration=ImageConfiguration.builder(ImageReference.of(expectedTargetServerUrl,expectedTargetImageName,expectedTargetTag)).setCredentialHelper(expectedTargetImageCredentialHelperName).setKnownRegistryCredentials(expectedKnownTargetRegistryCredentials).build();\n  ContainerConfiguration containerConfiguration=ContainerConfiguration.builder().setCreationTime(expectedCreationTime).setEntrypoint(expectedEntrypoint).setProgramArguments(expectedJavaArguments).setEnvironment(expectedEnvironment).setExposedPorts(expectedExposedPorts).setLabels(expectedLabels).build();\n  BuildConfiguration.Builder buildConfigurationBuilder=BuildConfiguration.builder(Mockito.mock(JibLogger.class)).setBaseImageConfiguration(baseImageConfiguration).setTargetImageConfiguration(targetImageConfiguration).setContainerConfiguration(containerConfiguration).setApplicationLayersCacheConfiguration(expectedApplicationLayersCacheConfiguration).setBaseImageLayersCacheConfiguration(expectedBaseImageLayersCacheConfiguration).setTargetFormat(OCIManifestTemplate.class).setAllowInsecureRegistries(true).setLayerConfigurations(expectedLayerConfigurations);\n  BuildConfiguration buildConfiguration=buildConfigurationBuilder.build();\n  Assert.assertNotNull(buildConfiguration.getContainerConfiguration());\n  Assert.assertEquals(expectedCreationTime,buildConfiguration.getContainerConfiguration().getCreationTime());\n  Assert.assertEquals(expectedBaseImageServerUrl,buildConfiguration.getBaseImageConfiguration().getImageRegistry());\n  Assert.assertEquals(expectedBaseImageName,buildConfiguration.getBaseImageConfiguration().getImageRepository());\n  Assert.assertEquals(expectedBaseImageTag,buildConfiguration.getBaseImageConfiguration().getImageTag());\n  Assert.assertEquals(expectedBaseImageCredentialHelperName,buildConfiguration.getBaseImageConfiguration().getCredentialHelper());\n  Assert.assertEquals(expectedTargetServerUrl,buildConfiguration.getTargetImageConfiguration().getImageRegistry());\n  Assert.assertEquals(expectedTargetImageName,buildConfiguration.getTargetImageConfiguration().getImageRepository());\n  Assert.assertEquals(expectedTargetTag,buildConfiguration.getTargetImageConfiguration().getImageTag());\n  Assert.assertEquals(expectedTargetImageCredentialHelperName,buildConfiguration.getTargetImageConfiguration().getCredentialHelper());\n  Assert.assertEquals(expectedJavaArguments,buildConfiguration.getContainerConfiguration().getProgramArguments());\n  Assert.assertEquals(expectedEnvironment,buildConfiguration.getContainerConfiguration().getEnvironmentMap());\n  Assert.assertEquals(expectedExposedPorts,buildConfiguration.getContainerConfiguration().getExposedPorts());\n  Assert.assertEquals(expectedLabels,buildConfiguration.getContainerConfiguration().getLabels());\n  Assert.assertEquals(expectedTargetFormat,buildConfiguration.getTargetFormat());\n  Assert.assertEquals(expectedApplicationLayersCacheConfiguration,buildConfiguration.getApplicationLayersCacheConfiguration());\n  Assert.assertEquals(expectedBaseImageLayersCacheConfiguration,buildConfiguration.getBaseImageLayersCacheConfiguration());\n  Assert.assertTrue(buildConfiguration.getAllowInsecureRegistries());\n  Assert.assertEquals(expectedLayerConfigurations,buildConfiguration.getLayerConfigurations());\n  Assert.assertEquals(expectedEntrypoint,buildConfiguration.getContainerConfiguration().getEntrypoint());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 535,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 67
      },
      "nodeContext" : "CacheConfiguration.forPath(Paths.get(\"application/layers\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 63,
    "startColumnNumber" : 45,
    "endLineNumber" : 63,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}