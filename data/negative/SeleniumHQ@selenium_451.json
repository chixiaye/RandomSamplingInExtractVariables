{
  "id" : 451,
  "expression" : "toEscape.split(\"\\\"\")",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/support/ui/Quotes.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "toEscape.split(\"\\\"\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 47,
      "startColumnNumber" : 41,
      "endLineNumber" : 47,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 47,
        "startColumnNumber" : 15,
        "endLineNumber" : 47,
        "endColumnNumber" : 61
      },
      "nodeContext" : "substringsWithoutQuotes=toEscape.split(\"\\\"\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 62
      },
      "nodeContext" : "String[] substringsWithoutQuotes=toEscape.split(\"\\\"\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 42,
        "startColumnNumber" : 59,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean quoteIsLast=false;\n  if (toEscape.lastIndexOf(\"\\\"\") == toEscape.length() - 1) {\n    quoteIsLast=true;\n  }\n  String[] substringsWithoutQuotes=toEscape.split(\"\\\"\");\n  StringBuilder quoted=new StringBuilder(\"concat(\");\n  for (int i=0; i < substringsWithoutQuotes.length; i++) {\n    quoted.append(\"\\\"\").append(substringsWithoutQuotes[i]).append(\"\\\"\");\n    quoted.append(((i == substringsWithoutQuotes.length - 1) ? (quoteIsLast ? \", '\\\"')\" : \")\") : \", '\\\"', \"));\n  }\n  return quoted.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toEscape.contains(\"\\\"\") && toEscape.contains(\"'\")) {\n  boolean quoteIsLast=false;\n  if (toEscape.lastIndexOf(\"\\\"\") == toEscape.length() - 1) {\n    quoteIsLast=true;\n  }\n  String[] substringsWithoutQuotes=toEscape.split(\"\\\"\");\n  StringBuilder quoted=new StringBuilder(\"concat(\");\n  for (int i=0; i < substringsWithoutQuotes.length; i++) {\n    quoted.append(\"\\\"\").append(substringsWithoutQuotes[i]).append(\"\\\"\");\n    quoted.append(((i == substringsWithoutQuotes.length - 1) ? (quoteIsLast ? \", '\\\"')\" : \")\") : \", '\\\"', \"));\n  }\n  return quoted.toString();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 41,
        "startColumnNumber" : 47,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toEscape.contains(\"\\\"\") && toEscape.contains(\"'\")) {\n    boolean quoteIsLast=false;\n    if (toEscape.lastIndexOf(\"\\\"\") == toEscape.length() - 1) {\n      quoteIsLast=true;\n    }\n    String[] substringsWithoutQuotes=toEscape.split(\"\\\"\");\n    StringBuilder quoted=new StringBuilder(\"concat(\");\n    for (int i=0; i < substringsWithoutQuotes.length; i++) {\n      quoted.append(\"\\\"\").append(substringsWithoutQuotes[i]).append(\"\\\"\");\n      quoted.append(((i == substringsWithoutQuotes.length - 1) ? (quoteIsLast ? \", '\\\"')\" : \")\") : \", '\\\"', \"));\n    }\n    return quoted.toString();\n  }\n  if (toEscape.contains(\"\\\"\")) {\n    return String.format(\"'%s'\",toEscape);\n  }\n  return String.format(\"\\\"%s\\\"\",toEscape);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1545,
        "startLineNumber" : 22,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Convert strings with both quotes and ticks into a valid xpath component For example, <p> {@code foo} will be converted to {@code \"foo\"}, </p> <p> {@code f\"oo} will be converted to {@code 'f\"oo'}, </p> <p> {@code foo'\"bar} will be converted to {@code concat(\"foo'\", '\"', \"bar\")}</p>\n * @param toEscape a text to escape quotes in, e.g. {@code \"f'oo\"}\n * @return the same text with escaped quoted, e.g. {@code \"\\\"f'oo\\\"\"}\n */\n@SuppressWarnings(\"JavaDoc\") public static String escape(String toEscape){\n  if (toEscape.contains(\"\\\"\") && toEscape.contains(\"'\")) {\n    boolean quoteIsLast=false;\n    if (toEscape.lastIndexOf(\"\\\"\") == toEscape.length() - 1) {\n      quoteIsLast=true;\n    }\n    String[] substringsWithoutQuotes=toEscape.split(\"\\\"\");\n    StringBuilder quoted=new StringBuilder(\"concat(\");\n    for (int i=0; i < substringsWithoutQuotes.length; i++) {\n      quoted.append(\"\\\"\").append(substringsWithoutQuotes[i]).append(\"\\\"\");\n      quoted.append(((i == substringsWithoutQuotes.length - 1) ? (quoteIsLast ? \", '\\\"')\" : \")\") : \", '\\\"', \"));\n    }\n    return quoted.toString();\n  }\n  if (toEscape.contains(\"\\\"\")) {\n    return String.format(\"'%s'\",toEscape);\n  }\n  return String.format(\"\\\"%s\\\"\",toEscape);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 62
      },
      "nodeContext" : "String[] substringsWithoutQuotes=toEscape.split(\"\\\"\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 47,
    "startColumnNumber" : 41,
    "endLineNumber" : 47,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}