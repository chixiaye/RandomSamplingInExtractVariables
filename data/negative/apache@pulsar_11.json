{
  "id" : 11,
  "expression" : "10",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/ProxyConnection.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 313,
      "startColumnNumber" : 70,
      "endLineNumber" : 313,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 313,
        "startColumnNumber" : 29,
        "endLineNumber" : 313,
        "endColumnNumber" : 73
      },
      "nodeContext" : "connect.getAuthMethod().name().substring(10)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 313,
        "startColumnNumber" : 29,
        "endLineNumber" : 313,
        "endColumnNumber" : 87
      },
      "nodeContext" : "connect.getAuthMethod().name().substring(10).toLowerCase()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 87
      },
      "nodeContext" : "authMethod=connect.getAuthMethod().name().substring(10).toLowerCase()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 88
      },
      "nodeContext" : "authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 311,
        "startColumnNumber" : 48,
        "endLineNumber" : 314,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 311,
        "startColumnNumber" : 19,
        "endLineNumber" : 316,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (connect.hasAuthMethod()) {\n  authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n}\n else {\n  authMethod=\"none\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 309,
        "startColumnNumber" : 12,
        "endLineNumber" : 316,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (connect.hasAuthMethodName()) {\n  authMethod=connect.getAuthMethodName();\n}\n else if (connect.hasAuthMethod()) {\n  authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n}\n else {\n  authMethod=\"none\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2383,
        "startLineNumber" : 292,
        "startColumnNumber" : 12,
        "endLineNumber" : 343,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.clientConf=createClientConfiguration();\n  this.clientAuthentication=clientConf.getAuthentication();\n  int protocolVersion=getProtocolVersionToAdvertise(connect);\n  if (!service.getConfiguration().isAuthenticationEnabled()) {\n    this.client=new PulsarClientImpl(clientConf,service.getWorkerGroup(),new ProxyConnectionPool(clientConf,service.getWorkerGroup(),() -> new ClientCnx(clientConf,service.getWorkerGroup(),protocolVersion)),service.getTimer());\n    completeConnect();\n    return;\n  }\n  AuthData clientData=AuthData.of(connect.getAuthData());\n  if (connect.hasAuthMethodName()) {\n    authMethod=connect.getAuthMethodName();\n  }\n else   if (connect.hasAuthMethod()) {\n    authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n  }\n else {\n    authMethod=\"none\";\n  }\n  authenticationProvider=service.getAuthenticationService().getAuthenticationProvider(authMethod);\n  if (authenticationProvider == null) {\n    clientAuthRole=service.getAuthenticationService().getAnonymousUserRole().orElseThrow(() -> new AuthenticationException(\"No anonymous role, and no authentication provider configured\"));\n    createClientAndCompleteConnect(clientData);\n    return;\n  }\n  ChannelHandler sslHandler=ctx.channel().pipeline().get(PulsarChannelInitializer.TLS_HANDLER);\n  SSLSession sslSession=null;\n  if (sslHandler != null) {\n    sslSession=((SslHandler)sslHandler).engine().getSession();\n  }\n  authState=authenticationProvider.newAuthState(clientData,remoteAddress,sslSession);\n  authenticationData=authState.getAuthDataSource();\n  doAuthentication(clientData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2646,
        "startLineNumber" : 292,
        "startColumnNumber" : 8,
        "endLineNumber" : 348,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.clientConf=createClientConfiguration();\n  this.clientAuthentication=clientConf.getAuthentication();\n  int protocolVersion=getProtocolVersionToAdvertise(connect);\n  if (!service.getConfiguration().isAuthenticationEnabled()) {\n    this.client=new PulsarClientImpl(clientConf,service.getWorkerGroup(),new ProxyConnectionPool(clientConf,service.getWorkerGroup(),() -> new ClientCnx(clientConf,service.getWorkerGroup(),protocolVersion)),service.getTimer());\n    completeConnect();\n    return;\n  }\n  AuthData clientData=AuthData.of(connect.getAuthData());\n  if (connect.hasAuthMethodName()) {\n    authMethod=connect.getAuthMethodName();\n  }\n else   if (connect.hasAuthMethod()) {\n    authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n  }\n else {\n    authMethod=\"none\";\n  }\n  authenticationProvider=service.getAuthenticationService().getAuthenticationProvider(authMethod);\n  if (authenticationProvider == null) {\n    clientAuthRole=service.getAuthenticationService().getAnonymousUserRole().orElseThrow(() -> new AuthenticationException(\"No anonymous role, and no authentication provider configured\"));\n    createClientAndCompleteConnect(clientData);\n    return;\n  }\n  ChannelHandler sslHandler=ctx.channel().pipeline().get(PulsarChannelInitializer.TLS_HANDLER);\n  SSLSession sslSession=null;\n  if (sslHandler != null) {\n    sslSession=((SslHandler)sslHandler).engine().getSession();\n  }\n  authState=authenticationProvider.newAuthState(clientData,remoteAddress,sslSession);\n  authenticationData=authState.getAuthDataSource();\n  doAuthentication(clientData);\n}\n catch (Exception e) {\n  LOG.warn(\"[{}] Unable to authenticate: \",remoteAddress,e);\n  ctx.writeAndFlush(Commands.newError(-1,ServerError.AuthenticationError,\"Failed to authenticate\"));\n  close();\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 233,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3710,
        "startLineNumber" : 271,
        "startColumnNumber" : 57,
        "endLineNumber" : 349,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArgument(state == State.Init);\n  this.setRemoteEndpointProtocolVersion(connect.getProtocolVersion());\n  this.hasProxyToBrokerUrl=connect.hasProxyToBrokerUrl();\n  this.protocolVersionToAdvertise=getProtocolVersionToAdvertise(connect);\n  this.proxyToBrokerUrl=connect.hasProxyToBrokerUrl() ? connect.getProxyToBrokerUrl() : \"null\";\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Received CONNECT from {} proxyToBroker={}\",remoteAddress,proxyToBrokerUrl);\n    LOG.debug(\"[{}] Protocol version to advertise to broker is {}, clientProtocolVersion={}, proxyProtocolVersion={}\",remoteAddress,protocolVersionToAdvertise,getRemoteEndpointProtocolVersion(),Commands.getCurrentProtocolVersion());\n  }\n  if (getRemoteEndpointProtocolVersion() < ProtocolVersion.v10.getValue()) {\n    LOG.warn(\"[{}] Client doesn't support connecting through proxy\",remoteAddress);\n    ctx.close();\n    return;\n  }\n  try {\n    this.clientConf=createClientConfiguration();\n    this.clientAuthentication=clientConf.getAuthentication();\n    int protocolVersion=getProtocolVersionToAdvertise(connect);\n    if (!service.getConfiguration().isAuthenticationEnabled()) {\n      this.client=new PulsarClientImpl(clientConf,service.getWorkerGroup(),new ProxyConnectionPool(clientConf,service.getWorkerGroup(),() -> new ClientCnx(clientConf,service.getWorkerGroup(),protocolVersion)),service.getTimer());\n      completeConnect();\n      return;\n    }\n    AuthData clientData=AuthData.of(connect.getAuthData());\n    if (connect.hasAuthMethodName()) {\n      authMethod=connect.getAuthMethodName();\n    }\n else     if (connect.hasAuthMethod()) {\n      authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n    }\n else {\n      authMethod=\"none\";\n    }\n    authenticationProvider=service.getAuthenticationService().getAuthenticationProvider(authMethod);\n    if (authenticationProvider == null) {\n      clientAuthRole=service.getAuthenticationService().getAnonymousUserRole().orElseThrow(() -> new AuthenticationException(\"No anonymous role, and no authentication provider configured\"));\n      createClientAndCompleteConnect(clientData);\n      return;\n    }\n    ChannelHandler sslHandler=ctx.channel().pipeline().get(PulsarChannelInitializer.TLS_HANDLER);\n    SSLSession sslSession=null;\n    if (sslHandler != null) {\n      sslSession=((SslHandler)sslHandler).engine().getSession();\n    }\n    authState=authenticationProvider.newAuthState(clientData,remoteAddress,sslSession);\n    authenticationData=authState.getAuthDataSource();\n    doAuthentication(clientData);\n  }\n catch (  Exception e) {\n    LOG.warn(\"[{}] Unable to authenticate: \",remoteAddress,e);\n    ctx.writeAndFlush(Commands.newError(-1,ServerError.AuthenticationError,\"Failed to authenticate\"));\n    close();\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3777,
        "startLineNumber" : 270,
        "startColumnNumber" : 4,
        "endLineNumber" : 349,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void handleConnect(CommandConnect connect){\n  checkArgument(state == State.Init);\n  this.setRemoteEndpointProtocolVersion(connect.getProtocolVersion());\n  this.hasProxyToBrokerUrl=connect.hasProxyToBrokerUrl();\n  this.protocolVersionToAdvertise=getProtocolVersionToAdvertise(connect);\n  this.proxyToBrokerUrl=connect.hasProxyToBrokerUrl() ? connect.getProxyToBrokerUrl() : \"null\";\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Received CONNECT from {} proxyToBroker={}\",remoteAddress,proxyToBrokerUrl);\n    LOG.debug(\"[{}] Protocol version to advertise to broker is {}, clientProtocolVersion={}, proxyProtocolVersion={}\",remoteAddress,protocolVersionToAdvertise,getRemoteEndpointProtocolVersion(),Commands.getCurrentProtocolVersion());\n  }\n  if (getRemoteEndpointProtocolVersion() < ProtocolVersion.v10.getValue()) {\n    LOG.warn(\"[{}] Client doesn't support connecting through proxy\",remoteAddress);\n    ctx.close();\n    return;\n  }\n  try {\n    this.clientConf=createClientConfiguration();\n    this.clientAuthentication=clientConf.getAuthentication();\n    int protocolVersion=getProtocolVersionToAdvertise(connect);\n    if (!service.getConfiguration().isAuthenticationEnabled()) {\n      this.client=new PulsarClientImpl(clientConf,service.getWorkerGroup(),new ProxyConnectionPool(clientConf,service.getWorkerGroup(),() -> new ClientCnx(clientConf,service.getWorkerGroup(),protocolVersion)),service.getTimer());\n      completeConnect();\n      return;\n    }\n    AuthData clientData=AuthData.of(connect.getAuthData());\n    if (connect.hasAuthMethodName()) {\n      authMethod=connect.getAuthMethodName();\n    }\n else     if (connect.hasAuthMethod()) {\n      authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n    }\n else {\n      authMethod=\"none\";\n    }\n    authenticationProvider=service.getAuthenticationService().getAuthenticationProvider(authMethod);\n    if (authenticationProvider == null) {\n      clientAuthRole=service.getAuthenticationService().getAnonymousUserRole().orElseThrow(() -> new AuthenticationException(\"No anonymous role, and no authentication provider configured\"));\n      createClientAndCompleteConnect(clientData);\n      return;\n    }\n    ChannelHandler sslHandler=ctx.channel().pipeline().get(PulsarChannelInitializer.TLS_HANDLER);\n    SSLSession sslSession=null;\n    if (sslHandler != null) {\n      sslSession=((SslHandler)sslHandler).engine().getSession();\n    }\n    authState=authenticationProvider.newAuthState(clientData,remoteAddress,sslSession);\n    authenticationData=authState.getAuthDataSource();\n    doAuthentication(clientData);\n  }\n catch (  Exception e) {\n    LOG.warn(\"[{}] Unable to authenticate: \",remoteAddress,e);\n    ctx.writeAndFlush(Commands.newError(-1,ServerError.AuthenticationError,\"Failed to authenticate\"));\n    close();\n    return;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 333,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 313,
        "startColumnNumber" : 16,
        "endLineNumber" : 313,
        "endColumnNumber" : 88
      },
      "nodeContext" : "authMethod=connect.getAuthMethod().name().substring(10).toLowerCase();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 313,
    "startColumnNumber" : 70,
    "endLineNumber" : 313,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}