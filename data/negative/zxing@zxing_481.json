{
  "id" : 481,
  "expression" : "1",
  "projectName" : "zxing@zxing",
  "commitID" : "6f5841d8bb70374fedfd6a336c19abd495e8f4ad",
  "filePath" : "android/src/com/google/zxing/client/android/ViewfinderView.java",
  "occurrences" : 15,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 92,
      "startColumnNumber" : 61,
      "endLineNumber" : 92,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 92,
        "startColumnNumber" : 46,
        "endLineNumber" : 92,
        "endColumnNumber" : 62
      },
      "nodeContext" : "frame.bottom + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 70
      },
      "nodeContext" : "canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 71
      },
      "nodeContext" : "canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 71
      },
      "nodeContext" : "canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 93,
      "startColumnNumber" : 34,
      "endLineNumber" : 93,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 93,
        "startColumnNumber" : 20,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "frame.right + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 79
      },
      "nodeContext" : "canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 93,
      "startColumnNumber" : 70,
      "endLineNumber" : 93,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 93,
        "startColumnNumber" : 55,
        "endLineNumber" : 93,
        "endColumnNumber" : 71
      },
      "nodeContext" : "frame.bottom + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 79
      },
      "nodeContext" : "canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 80
      },
      "nodeContext" : "canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 94,
      "startColumnNumber" : 38,
      "endLineNumber" : 94,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 94,
        "startColumnNumber" : 23,
        "endLineNumber" : 94,
        "endColumnNumber" : 39
      },
      "nodeContext" : "frame.bottom + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 62
      },
      "nodeContext" : "canvas.drawRect(0,frame.bottom + 1,width,height,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 63
      },
      "nodeContext" : "canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 63
      },
      "nodeContext" : "canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 104,
      "startColumnNumber" : 59,
      "endLineNumber" : 104,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 104,
        "startColumnNumber" : 45,
        "endLineNumber" : 104,
        "endColumnNumber" : 60
      },
      "nodeContext" : "frame.right + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 83
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 84
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 104,
        "endColumnNumber" : 84
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 105,
      "startColumnNumber" : 80,
      "endLineNumber" : 105,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 105,
        "startColumnNumber" : 65,
        "endLineNumber" : 105,
        "endColumnNumber" : 81
      },
      "nodeContext" : "frame.bottom - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 89
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 90
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 105,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 90
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 106,
      "startColumnNumber" : 36,
      "endLineNumber" : 106,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 106,
        "startColumnNumber" : 22,
        "endLineNumber" : 106,
        "endColumnNumber" : 37
      },
      "nodeContext" : "frame.right - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 91
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 106,
      "startColumnNumber" : 64,
      "endLineNumber" : 106,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 106,
        "startColumnNumber" : 50,
        "endLineNumber" : 106,
        "endColumnNumber" : 65
      },
      "nodeContext" : "frame.right + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 91
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 106,
      "startColumnNumber" : 82,
      "endLineNumber" : 106,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 106,
        "startColumnNumber" : 67,
        "endLineNumber" : 106,
        "endColumnNumber" : 83
      },
      "nodeContext" : "frame.bottom - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 91
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 106,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 92
      },
      "nodeContext" : "canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 107,
      "startColumnNumber" : 49,
      "endLineNumber" : 107,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 107,
        "startColumnNumber" : 34,
        "endLineNumber" : 107,
        "endColumnNumber" : 50
      },
      "nodeContext" : "frame.bottom - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 93
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 107,
      "startColumnNumber" : 66,
      "endLineNumber" : 107,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 107,
        "startColumnNumber" : 52,
        "endLineNumber" : 107,
        "endColumnNumber" : 67
      },
      "nodeContext" : "frame.right + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 93
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 107,
      "startColumnNumber" : 84,
      "endLineNumber" : 107,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 107,
        "startColumnNumber" : 69,
        "endLineNumber" : 107,
        "endColumnNumber" : 85
      },
      "nodeContext" : "frame.bottom + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 93
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 94
      },
      "nodeContext" : "canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 112,
      "startColumnNumber" : 37,
      "endLineNumber" : 112,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 112,
        "startColumnNumber" : 22,
        "endLineNumber" : 112,
        "endColumnNumber" : 38
      },
      "nodeContext" : "scannerAlpha + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 112,
        "startColumnNumber" : 21,
        "endLineNumber" : 112,
        "endColumnNumber" : 39
      },
      "nodeContext" : "(scannerAlpha + 1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 112,
        "startColumnNumber" : 21,
        "endLineNumber" : 112,
        "endColumnNumber" : 62
      },
      "nodeContext" : "(scannerAlpha + 1) % SCANNER_ALPHA.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 112,
        "endColumnNumber" : 62
      },
      "nodeContext" : "scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 112,
        "endColumnNumber" : 63
      },
      "nodeContext" : "scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 112,
        "endColumnNumber" : 63
      },
      "nodeContext" : "scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 114,
      "startColumnNumber" : 47,
      "endLineNumber" : 114,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 114,
        "startColumnNumber" : 38,
        "endLineNumber" : 114,
        "endColumnNumber" : 48
      },
      "nodeContext" : "middle - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 85
      },
      "nodeContext" : "canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 86
      },
      "nodeContext" : "canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 86
      },
      "nodeContext" : "canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 114,
      "startColumnNumber" : 64,
      "endLineNumber" : 114,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 114,
        "startColumnNumber" : 50,
        "endLineNumber" : 114,
        "endColumnNumber" : 65
      },
      "nodeContext" : "frame.right - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 85
      },
      "nodeContext" : "canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 86
      },
      "nodeContext" : "canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2709,
        "startLineNumber" : 100,
        "startColumnNumber" : 11,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 368,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2919,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 158,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (resultBitmap != null) {\n  paint.setAlpha(CURRENT_POINT_OPACITY);\n  canvas.drawBitmap(resultBitmap,null,frame,paint);\n}\n else {\n  paint.setColor(frameColor);\n  canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n  canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n  canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n  canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n  paint.setColor(laserColor);\n  paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n  scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n  int middle=frame.height() / 2 + frame.top;\n  canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n  Rect previewFrame=cameraManager.getFramingRectInPreview();\n  float scaleX=frame.width() / (float)previewFrame.width();\n  float scaleY=frame.height() / (float)previewFrame.height();\n  List<ResultPoint> currentPossible=possibleResultPoints;\n  List<ResultPoint> currentLast=lastPossibleResultPoints;\n  int frameLeft=frame.left;\n  int frameTop=frame.top;\n  if (currentPossible.isEmpty()) {\n    lastPossibleResultPoints=null;\n  }\n else {\n    possibleResultPoints=new ArrayList<ResultPoint>(5);\n    lastPossibleResultPoints=currentPossible;\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n      for (      ResultPoint point : currentPossible) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n      }\n    }\n  }\n  if (currentLast != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n    paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n      for (      ResultPoint point : currentLast) {\n        canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n      }\n    }\n  }\n  postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 386,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 499,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 76,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void onDraw(Canvas canvas){\n  CameraManager cameraManager=CameraManager.get();\n  if (cameraManager == null) {\n    return;\n  }\n  Rect frame=cameraManager.getFramingRect();\n  if (frame == null) {\n    return;\n  }\n  int width=canvas.getWidth();\n  int height=canvas.getHeight();\n  paint.setColor(resultBitmap != null ? resultColor : maskColor);\n  canvas.drawRect(0,0,width,frame.top,paint);\n  canvas.drawRect(0,frame.top,frame.left,frame.bottom + 1,paint);\n  canvas.drawRect(frame.right + 1,frame.top,width,frame.bottom + 1,paint);\n  canvas.drawRect(0,frame.bottom + 1,width,height,paint);\n  if (resultBitmap != null) {\n    paint.setAlpha(CURRENT_POINT_OPACITY);\n    canvas.drawBitmap(resultBitmap,null,frame,paint);\n  }\n else {\n    paint.setColor(frameColor);\n    canvas.drawRect(frame.left,frame.top,frame.right + 1,frame.top + 2,paint);\n    canvas.drawRect(frame.left,frame.top + 2,frame.left + 2,frame.bottom - 1,paint);\n    canvas.drawRect(frame.right - 1,frame.top,frame.right + 1,frame.bottom - 1,paint);\n    canvas.drawRect(frame.left,frame.bottom - 1,frame.right + 1,frame.bottom + 1,paint);\n    paint.setColor(laserColor);\n    paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);\n    scannerAlpha=(scannerAlpha + 1) % SCANNER_ALPHA.length;\n    int middle=frame.height() / 2 + frame.top;\n    canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n    Rect previewFrame=cameraManager.getFramingRectInPreview();\n    float scaleX=frame.width() / (float)previewFrame.width();\n    float scaleY=frame.height() / (float)previewFrame.height();\n    List<ResultPoint> currentPossible=possibleResultPoints;\n    List<ResultPoint> currentLast=lastPossibleResultPoints;\n    int frameLeft=frame.left;\n    int frameTop=frame.top;\n    if (currentPossible.isEmpty()) {\n      lastPossibleResultPoints=null;\n    }\n else {\n      possibleResultPoints=new ArrayList<ResultPoint>(5);\n      lastPossibleResultPoints=currentPossible;\n      paint.setAlpha(CURRENT_POINT_OPACITY);\n      paint.setColor(resultPointColor);\nsynchronized (currentPossible) {\n        for (        ResultPoint point : currentPossible) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE,paint);\n        }\n      }\n    }\n    if (currentLast != null) {\n      paint.setAlpha(CURRENT_POINT_OPACITY / 2);\n      paint.setColor(resultPointColor);\nsynchronized (currentLast) {\n        for (        ResultPoint point : currentLast) {\n          canvas.drawCircle(frameLeft + (int)(point.getX() * scaleX),frameTop + (int)(point.getY() * scaleY),POINT_SIZE / 2,paint);\n        }\n      }\n    }\n    postInvalidateDelayed(ANIMATION_DELAY,frame.left - POINT_SIZE,frame.top - POINT_SIZE,frame.right + POINT_SIZE,frame.bottom + POINT_SIZE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 114,
        "startColumnNumber" : 6,
        "endLineNumber" : 114,
        "endColumnNumber" : 86
      },
      "nodeContext" : "canvas.drawRect(frame.left + 2,middle - 1,frame.right - 1,middle + 2,paint);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 92,
    "startColumnNumber" : 61,
    "endLineNumber" : 92,
    "endColumnNumber" : 62
  }, {
    "charLength" : 1,
    "startLineNumber" : 93,
    "startColumnNumber" : 34,
    "endLineNumber" : 93,
    "endColumnNumber" : 35
  }, {
    "charLength" : 1,
    "startLineNumber" : 93,
    "startColumnNumber" : 70,
    "endLineNumber" : 93,
    "endColumnNumber" : 71
  }, {
    "charLength" : 1,
    "startLineNumber" : 94,
    "startColumnNumber" : 38,
    "endLineNumber" : 94,
    "endColumnNumber" : 39
  }, {
    "charLength" : 1,
    "startLineNumber" : 104,
    "startColumnNumber" : 59,
    "endLineNumber" : 104,
    "endColumnNumber" : 60
  }, {
    "charLength" : 1,
    "startLineNumber" : 105,
    "startColumnNumber" : 80,
    "endLineNumber" : 105,
    "endColumnNumber" : 81
  }, {
    "charLength" : 1,
    "startLineNumber" : 106,
    "startColumnNumber" : 36,
    "endLineNumber" : 106,
    "endColumnNumber" : 37
  }, {
    "charLength" : 1,
    "startLineNumber" : 106,
    "startColumnNumber" : 64,
    "endLineNumber" : 106,
    "endColumnNumber" : 65
  }, {
    "charLength" : 1,
    "startLineNumber" : 106,
    "startColumnNumber" : 82,
    "endLineNumber" : 106,
    "endColumnNumber" : 83
  }, {
    "charLength" : 1,
    "startLineNumber" : 107,
    "startColumnNumber" : 49,
    "endLineNumber" : 107,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 107,
    "startColumnNumber" : 66,
    "endLineNumber" : 107,
    "endColumnNumber" : 67
  }, {
    "charLength" : 1,
    "startLineNumber" : 107,
    "startColumnNumber" : 84,
    "endLineNumber" : 107,
    "endColumnNumber" : 85
  }, {
    "charLength" : 1,
    "startLineNumber" : 112,
    "startColumnNumber" : 37,
    "endLineNumber" : 112,
    "endColumnNumber" : 38
  }, {
    "charLength" : 1,
    "startLineNumber" : 114,
    "startColumnNumber" : 47,
    "endLineNumber" : 114,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 114,
    "startColumnNumber" : 64,
    "endLineNumber" : 114,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 1
  } ]
}