{
  "id" : 327,
  "expression" : "sqlProperty.getKey()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/SqlPartitionUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sqlProperty.getKey()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 57,
      "startColumnNumber" : 20,
      "endLineNumber" : 57,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 57,
        "startColumnNumber" : 20,
        "endLineNumber" : 57,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sqlProperty.getKey().getSimple()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ret.put(sqlProperty.getKey().getSimple(),value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ret.put(sqlProperty.getKey().getSimple(),value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 50,
        "startColumnNumber" : 53,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SqlProperty sqlProperty=(SqlProperty)node;\n  Comparable<?> comparable=SqlLiteral.value(sqlProperty.getValue());\n  String value=comparable instanceof NlsString ? ((NlsString)comparable).getValue() : comparable.toString();\n  ret.put(sqlProperty.getKey().getSimple(),value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (SqlNode node : partitionSpec.getList()) {\n  SqlProperty sqlProperty=(SqlProperty)node;\n  Comparable<?> comparable=SqlLiteral.value(sqlProperty.getValue());\n  String value=comparable instanceof NlsString ? ((NlsString)comparable).getValue() : comparable.toString();\n  ret.put(sqlProperty.getKey().getSimple(),value);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 42,
        "startColumnNumber" : 91,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (partitionSpec == null) {\n    return null;\n  }\n  LinkedHashMap<String,String> ret=new LinkedHashMap<>();\n  if (partitionSpec.size() == 0) {\n    return ret;\n  }\n  for (  SqlNode node : partitionSpec.getList()) {\n    SqlProperty sqlProperty=(SqlProperty)node;\n    Comparable<?> comparable=SqlLiteral.value(sqlProperty.getValue());\n    String value=comparable instanceof NlsString ? ((NlsString)comparable).getValue() : comparable.toString();\n    ret.put(sqlProperty.getKey().getSimple(),value);\n  }\n  return ret;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1217,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Get static partition key value pair as strings. <p>For character literals we return the unquoted and unescaped values. For other types we use {@link SqlLiteral#toString()} to get the string format of the value literal.\n * @return the mapping of column names to values of partition specifications, returns an emptymap if there is no partition specifications.\n */\npublic static LinkedHashMap<String,String> getPartitionKVs(SqlNodeList partitionSpec){\n  if (partitionSpec == null) {\n    return null;\n  }\n  LinkedHashMap<String,String> ret=new LinkedHashMap<>();\n  if (partitionSpec.size() == 0) {\n    return ret;\n  }\n  for (  SqlNode node : partitionSpec.getList()) {\n    SqlProperty sqlProperty=(SqlProperty)node;\n    Comparable<?> comparable=SqlLiteral.value(sqlProperty.getValue());\n    String value=comparable instanceof NlsString ? ((NlsString)comparable).getValue() : comparable.toString();\n    ret.put(sqlProperty.getKey().getSimple(),value);\n  }\n  return ret;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 110,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 57,
        "endColumnNumber" : 61
      },
      "nodeContext" : "ret.put(sqlProperty.getKey().getSimple(),value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.apache.flink.sql.parser.SqlIdentifier"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 57,
    "startColumnNumber" : 20,
    "endLineNumber" : 57,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}