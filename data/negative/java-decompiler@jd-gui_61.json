{
  "id" : 61,
  "expression" : "clazz.getName().replace('.','/') + \".properties\"",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/service/treenode/AbstractTreeNodeFactoryProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clazz.getName().replace('.','/') + \".properties\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 49,
      "startLineNumber" : 31,
      "startColumnNumber" : 73,
      "endLineNumber" : 31,
      "endColumnNumber" : 122
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 31,
        "startColumnNumber" : 30,
        "endLineNumber" : 31,
        "endColumnNumber" : 123
      },
      "nodeContext" : "clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 31,
        "startColumnNumber" : 25,
        "endLineNumber" : 31,
        "endColumnNumber" : 123
      },
      "nodeContext" : "is=clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 31,
        "startColumnNumber" : 13,
        "endLineNumber" : 31,
        "endColumnNumber" : 123
      },
      "nodeContext" : "InputStream is=clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (InputStream is=clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")){\n  if (is != null) {\n    properties.load(is);\n  }\n}\n catch (IOException e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 27,
        "startColumnNumber" : 45,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Properties properties=new Properties();\n  Class clazz=this.getClass();\n  try (InputStream is=clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")){\n    if (is != null) {\n      properties.load(is);\n    }\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n  init(properties);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 589,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Initialize \"selectors\" and \"pathPattern\" with optional external properties file\n */\npublic AbstractTreeNodeFactoryProvider(){\n  Properties properties=new Properties();\n  Class clazz=this.getClass();\n  try (InputStream is=clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")){\n    if (is != null) {\n      properties.load(is);\n    }\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n  init(properties);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 67,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 31,
        "startColumnNumber" : 13,
        "endLineNumber" : 31,
        "endColumnNumber" : 123
      },
      "nodeContext" : "InputStream is=clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.','/') + \".properties\")",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 19,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 49,
    "startLineNumber" : 31,
    "startColumnNumber" : 73,
    "endLineNumber" : 31,
    "endColumnNumber" : 122
  } ],
  "layoutRelationDataList" : [ ]
}