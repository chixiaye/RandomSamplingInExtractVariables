{
  "id" : 81,
  "expression" : "100",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/ConsistentHashingStickyKeyConsumerSelectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "100",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 44,
      "startColumnNumber" : 109,
      "endLineNumber" : 44,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 44,
        "startColumnNumber" : 62,
        "endLineNumber" : 44,
        "endColumnNumber" : 113
      },
      "nodeContext" : "new ConsistentHashingStickyKeyConsumerSelector(100)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 44,
        "startColumnNumber" : 51,
        "endLineNumber" : 44,
        "endColumnNumber" : 113
      },
      "nodeContext" : "selector=new ConsistentHashingStickyKeyConsumerSelector(100)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ConsistentHashingStickyKeyConsumerSelector selector=new ConsistentHashingStickyKeyConsumerSelector(100);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4675,
        "startLineNumber" : 42,
        "startColumnNumber" : 68,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ConsistentHashingStickyKeyConsumerSelector selector=new ConsistentHashingStickyKeyConsumerSelector(100);\n  String key1=\"anyKey\";\n  Assert.assertNull(selector.select(key1.getBytes()));\n  Consumer consumer1=mock(Consumer.class);\n  when(consumer1.consumerName()).thenReturn(\"c1\");\n  selector.addConsumer(consumer1);\n  Assert.assertEquals(selector.select(key1.getBytes()),consumer1);\n  Consumer consumer2=mock(Consumer.class);\n  when(consumer2.consumerName()).thenReturn(\"c2\");\n  selector.addConsumer(consumer2);\n  final int N=1000;\n  final double PERCENT_ERROR=0.20;\n  Map<String,Integer> selectionMap=new HashMap<>();\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c1\"),N / 2,N / 2 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 2,N / 2 * PERCENT_ERROR);\n  selectionMap.clear();\n  Consumer consumer3=mock(Consumer.class);\n  when(consumer3.consumerName()).thenReturn(\"c3\");\n  selector.addConsumer(consumer3);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c1\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 3,N / 3 * PERCENT_ERROR);\n  selectionMap.clear();\n  Consumer consumer4=mock(Consumer.class);\n  when(consumer4.consumerName()).thenReturn(\"c4\");\n  selector.addConsumer(consumer4);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c1\"),N / 4,N / 4 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 4,N / 4 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 4,N / 4 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c4\"),N / 4,N / 4 * PERCENT_ERROR);\n  selectionMap.clear();\n  selector.removeConsumer(consumer1);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c4\"),N / 3,N / 3 * PERCENT_ERROR);\n  selectionMap.clear();\n  selector.removeConsumer(consumer2);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  System.err.println(selectionMap);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 2,N / 2 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c4\"),N / 2,N / 2 * PERCENT_ERROR);\n  selectionMap.clear();\n  selector.removeConsumer(consumer3);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c4\").intValue(),N);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 778,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4749,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testConsumerSelect() throws ConsumerAssignException {\n  ConsistentHashingStickyKeyConsumerSelector selector=new ConsistentHashingStickyKeyConsumerSelector(100);\n  String key1=\"anyKey\";\n  Assert.assertNull(selector.select(key1.getBytes()));\n  Consumer consumer1=mock(Consumer.class);\n  when(consumer1.consumerName()).thenReturn(\"c1\");\n  selector.addConsumer(consumer1);\n  Assert.assertEquals(selector.select(key1.getBytes()),consumer1);\n  Consumer consumer2=mock(Consumer.class);\n  when(consumer2.consumerName()).thenReturn(\"c2\");\n  selector.addConsumer(consumer2);\n  final int N=1000;\n  final double PERCENT_ERROR=0.20;\n  Map<String,Integer> selectionMap=new HashMap<>();\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c1\"),N / 2,N / 2 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 2,N / 2 * PERCENT_ERROR);\n  selectionMap.clear();\n  Consumer consumer3=mock(Consumer.class);\n  when(consumer3.consumerName()).thenReturn(\"c3\");\n  selector.addConsumer(consumer3);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c1\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 3,N / 3 * PERCENT_ERROR);\n  selectionMap.clear();\n  Consumer consumer4=mock(Consumer.class);\n  when(consumer4.consumerName()).thenReturn(\"c4\");\n  selector.addConsumer(consumer4);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c1\"),N / 4,N / 4 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 4,N / 4 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 4,N / 4 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c4\"),N / 4,N / 4 * PERCENT_ERROR);\n  selectionMap.clear();\n  selector.removeConsumer(consumer1);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c2\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 3,N / 3 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c4\"),N / 3,N / 3 * PERCENT_ERROR);\n  selectionMap.clear();\n  selector.removeConsumer(consumer2);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  System.err.println(selectionMap);\n  Assert.assertEquals(selectionMap.get(\"c3\"),N / 2,N / 2 * PERCENT_ERROR);\n  Assert.assertEquals(selectionMap.get(\"c4\"),N / 2,N / 2 * PERCENT_ERROR);\n  selectionMap.clear();\n  selector.removeConsumer(consumer3);\n  for (int i=0; i < N; i++) {\n    String key=UUID.randomUUID().toString();\n    Consumer selectedConsumer=selector.select(key.getBytes());\n    int count=selectionMap.computeIfAbsent(selectedConsumer.consumerName(),c -> 0);\n    selectionMap.put(selectedConsumer.consumerName(),count + 1);\n  }\n  Assert.assertEquals(selectionMap.get(\"c4\").intValue(),N);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 786,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 114
      },
      "nodeContext" : "ConsistentHashingStickyKeyConsumerSelector selector=new ConsistentHashingStickyKeyConsumerSelector(100);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 44,
    "startColumnNumber" : 109,
    "endLineNumber" : 44,
    "endColumnNumber" : 112
  } ],
  "layoutRelationDataList" : [ ]
}