{
  "id" : 427,
  "expression" : "value1.get()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/processors/AsyncProcessorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value1.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 243,
      "startColumnNumber" : 34,
      "endLineNumber" : 243,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertEquals(\"value\",value1.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(\"value\",value1.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1856,
        "startLineNumber" : 195,
        "startColumnNumber" : 37,
        "endLineNumber" : 248,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final AsyncProcessor<String> subject=AsyncProcessor.create();\n  final AtomicReference<String> value1=new AtomicReference<String>();\n  subject.subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      try {\n        Thread.sleep(50);\n      }\n catch (      InterruptedException e) {\n        e.printStackTrace();\n      }\n      value1.set(t1);\n    }\n  }\n);\n  Thread t1=new Thread(new Runnable(){\n    @Override public void run(){\n      subject.onNext(\"value\");\n      subject.onComplete();\n    }\n  }\n);\n  SubjectSubscriberThread t2=new SubjectSubscriberThread(subject);\n  SubjectSubscriberThread t3=new SubjectSubscriberThread(subject);\n  SubjectSubscriberThread t4=new SubjectSubscriberThread(subject);\n  SubjectSubscriberThread t5=new SubjectSubscriberThread(subject);\n  t2.start();\n  t3.start();\n  t1.start();\n  t4.start();\n  t5.start();\n  try {\n    t1.join();\n    t2.join();\n    t3.join();\n    t4.join();\n    t5.join();\n  }\n catch (  InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n  assertEquals(\"value\",value1.get());\n  assertEquals(\"value\",t2.value.get());\n  assertEquals(\"value\",t3.value.get());\n  assertEquals(\"value\",t4.value.get());\n  assertEquals(\"value\",t5.value.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 232,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1885,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 248,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 50; i++) {\n  final AsyncProcessor<String> subject=AsyncProcessor.create();\n  final AtomicReference<String> value1=new AtomicReference<String>();\n  subject.subscribe(new Consumer<String>(){\n    @Override public void accept(    String t1){\n      try {\n        Thread.sleep(50);\n      }\n catch (      InterruptedException e) {\n        e.printStackTrace();\n      }\n      value1.set(t1);\n    }\n  }\n);\n  Thread t1=new Thread(new Runnable(){\n    @Override public void run(){\n      subject.onNext(\"value\");\n      subject.onComplete();\n    }\n  }\n);\n  SubjectSubscriberThread t2=new SubjectSubscriberThread(subject);\n  SubjectSubscriberThread t3=new SubjectSubscriberThread(subject);\n  SubjectSubscriberThread t4=new SubjectSubscriberThread(subject);\n  SubjectSubscriberThread t5=new SubjectSubscriberThread(subject);\n  t2.start();\n  t3.start();\n  t1.start();\n  t4.start();\n  t5.start();\n  try {\n    t1.join();\n    t2.join();\n    t3.join();\n    t4.join();\n    t5.join();\n  }\n catch (  InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n  assertEquals(\"value\",value1.get());\n  assertEquals(\"value\",t2.value.get());\n  assertEquals(\"value\",t3.value.get());\n  assertEquals(\"value\",t4.value.get());\n  assertEquals(\"value\",t5.value.get());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 243,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2207,
        "startLineNumber" : 188,
        "startColumnNumber" : 55,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < 50; i++) {\n    final AsyncProcessor<String> subject=AsyncProcessor.create();\n    final AtomicReference<String> value1=new AtomicReference<String>();\n    subject.subscribe(new Consumer<String>(){\n      @Override public void accept(      String t1){\n        try {\n          Thread.sleep(50);\n        }\n catch (        InterruptedException e) {\n          e.printStackTrace();\n        }\n        value1.set(t1);\n      }\n    }\n);\n    Thread t1=new Thread(new Runnable(){\n      @Override public void run(){\n        subject.onNext(\"value\");\n        subject.onComplete();\n      }\n    }\n);\n    SubjectSubscriberThread t2=new SubjectSubscriberThread(subject);\n    SubjectSubscriberThread t3=new SubjectSubscriberThread(subject);\n    SubjectSubscriberThread t4=new SubjectSubscriberThread(subject);\n    SubjectSubscriberThread t5=new SubjectSubscriberThread(subject);\n    t2.start();\n    t3.start();\n    t1.start();\n    t4.start();\n    t5.start();\n    try {\n      t1.join();\n      t2.join();\n      t3.join();\n      t4.join();\n      t5.join();\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    assertEquals(\"value\",value1.get());\n    assertEquals(\"value\",t2.value.get());\n    assertEquals(\"value\",t3.value.get());\n    assertEquals(\"value\",t4.value.get());\n    assertEquals(\"value\",t5.value.get());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2419,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Can receive timeout if subscribe never receives an onError/onCompleted ... which reveals a race condition.\n */\n@Test(timeout=10000) public void testSubscribeCompletionRaceCondition(){\n  for (int i=0; i < 50; i++) {\n    final AsyncProcessor<String> subject=AsyncProcessor.create();\n    final AtomicReference<String> value1=new AtomicReference<String>();\n    subject.subscribe(new Consumer<String>(){\n      @Override public void accept(      String t1){\n        try {\n          Thread.sleep(50);\n        }\n catch (        InterruptedException e) {\n          e.printStackTrace();\n        }\n        value1.set(t1);\n      }\n    }\n);\n    Thread t1=new Thread(new Runnable(){\n      @Override public void run(){\n        subject.onNext(\"value\");\n        subject.onComplete();\n      }\n    }\n);\n    SubjectSubscriberThread t2=new SubjectSubscriberThread(subject);\n    SubjectSubscriberThread t3=new SubjectSubscriberThread(subject);\n    SubjectSubscriberThread t4=new SubjectSubscriberThread(subject);\n    SubjectSubscriberThread t5=new SubjectSubscriberThread(subject);\n    t2.start();\n    t3.start();\n    t1.start();\n    t4.start();\n    t5.start();\n    try {\n      t1.join();\n      t2.join();\n      t3.join();\n      t4.join();\n      t5.join();\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    assertEquals(\"value\",value1.get());\n    assertEquals(\"value\",t2.value.get());\n    assertEquals(\"value\",t3.value.get());\n    assertEquals(\"value\",t4.value.get());\n    assertEquals(\"value\",t5.value.get());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 243,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(\"value\",value1.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 243,
    "startColumnNumber" : 34,
    "endLineNumber" : 243,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}