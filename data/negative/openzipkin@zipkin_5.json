{
  "id" : 5,
  "expression" : "spanStore",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "130e2851e5a2a36886cee4c066fc050ec1df530c",
  "filePath" : "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spanStore",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 41,
      "startColumnNumber" : 4,
      "endLineNumber" : 41,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 29
      },
      "nodeContext" : "spanStore.accept(sampled)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 30
      },
      "nodeContext" : "spanStore.accept(sampled);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 35,
        "startColumnNumber" : 59,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Iterator<Span> sampled=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n  spanStore.accept(sampled);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Asynchronously writes spans to storage, subject to sampling policy.\n */\n@Async public void write(SpanStore spanStore,List<Span> spans){\n  Iterator<Span> sampled=spans.stream().filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId)).iterator();\n  spanStore.accept(sampled);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 61,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 30
      },
      "nodeContext" : "spanStore.accept(sampled);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.zipkin.SpanStore"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 41,
    "startColumnNumber" : 4,
    "endLineNumber" : 41,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}