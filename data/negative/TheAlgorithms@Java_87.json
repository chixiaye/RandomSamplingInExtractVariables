{
  "id" : 87,
  "expression" : "pop",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Data Structures/Graphs/BFS.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pop",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 32,
      "startColumnNumber" : 5,
      "endLineNumber" : 32,
      "endColumnNumber" : 8
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 32,
        "startColumnNumber" : 3,
        "endLineNumber" : 32,
        "endColumnNumber" : 9
      },
      "nodeContext" : "b[pop]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 32,
        "startColumnNumber" : 3,
        "endLineNumber" : 32,
        "endColumnNumber" : 17
      },
      "nodeContext" : "b[pop]=(byte)1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 32,
        "startColumnNumber" : 3,
        "endLineNumber" : 32,
        "endColumnNumber" : 18
      },
      "nodeContext" : "b[pop]=(byte)1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 28,
        "startColumnNumber" : 22,
        "endLineNumber" : 38,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  b[st.peek()]=(byte)0;\n  System.out.println(st.peek());\n  int pop=st.peek();\n  b[pop]=(byte)1;\n  st.pop();\n  for (int i=0; i < vertices; i++) {\n    if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n      st.push(i);\n      b[i]=(byte)0;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 28,
        "startColumnNumber" : 2,
        "endLineNumber" : 38,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!st.isEmpty()) {\n  b[st.peek()]=(byte)0;\n  System.out.println(st.peek());\n  int pop=st.peek();\n  b[pop]=(byte)1;\n  st.pop();\n  for (int i=0; i < vertices; i++) {\n    if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n      st.push(i);\n      b[i]=(byte)0;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 899,
        "startLineNumber" : 18,
        "startColumnNumber" : 69,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  byte[] b=new byte[vertices];\n  Arrays.fill(b,(byte)-1);\n  Stack st=new Stack(vertices);\n  st.push(source);\n  while (!st.isEmpty()) {\n    b[st.peek()]=(byte)0;\n    System.out.println(st.peek());\n    int pop=st.peek();\n    b[pop]=(byte)1;\n    st.pop();\n    for (int i=0; i < vertices; i++) {\n      if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n        st.push(i);\n        b[i]=(byte)0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 11,
        "startColumnNumber" : 1,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * The BFS implemented in code to use.\n * @param a Structure to perform the search on a graph, adjacency matrix etc.\n * @param vertices The vertices to use\n * @param source The Source\n */\npublic static void bfsImplement(byte[][] a,int vertices,int source){\n  byte[] b=new byte[vertices];\n  Arrays.fill(b,(byte)-1);\n  Stack st=new Stack(vertices);\n  st.push(source);\n  while (!st.isEmpty()) {\n    b[st.peek()]=(byte)0;\n    System.out.println(st.peek());\n    int pop=st.peek();\n    b[pop]=(byte)1;\n    st.pop();\n    for (int i=0; i < vertices; i++) {\n      if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n        st.push(i);\n        b[i]=(byte)0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 32,
        "startColumnNumber" : 3,
        "endLineNumber" : 32,
        "endColumnNumber" : 18
      },
      "nodeContext" : "b[pop]=(byte)1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "pop",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 35,
      "startColumnNumber" : 9,
      "endLineNumber" : 35,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 35,
        "startColumnNumber" : 7,
        "endLineNumber" : 35,
        "endColumnNumber" : 13
      },
      "nodeContext" : "a[pop]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 35,
        "startColumnNumber" : 7,
        "endLineNumber" : 35,
        "endColumnNumber" : 16
      },
      "nodeContext" : "a[pop][i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 35,
        "startColumnNumber" : 7,
        "endLineNumber" : 35,
        "endColumnNumber" : 19
      },
      "nodeContext" : "a[pop][i] != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 35,
        "startColumnNumber" : 7,
        "endLineNumber" : 35,
        "endColumnNumber" : 36
      },
      "nodeContext" : "a[pop][i] != 0 && b[i] != (byte)0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 35,
        "startColumnNumber" : 7,
        "endLineNumber" : 35,
        "endColumnNumber" : 53
      },
      "nodeContext" : "a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 38,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n  st.push(i);\n  b[i]=(byte)0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 34,
        "startColumnNumber" : 30,
        "endLineNumber" : 38,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n    st.push(i);\n    b[i]=(byte)0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 34,
        "startColumnNumber" : 3,
        "endLineNumber" : 38,
        "endColumnNumber" : 6
      },
      "nodeContext" : "for (int i=0; i < vertices; i++) {\n  if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n    st.push(i);\n    b[i]=(byte)0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 28,
        "startColumnNumber" : 22,
        "endLineNumber" : 38,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  b[st.peek()]=(byte)0;\n  System.out.println(st.peek());\n  int pop=st.peek();\n  b[pop]=(byte)1;\n  st.pop();\n  for (int i=0; i < vertices; i++) {\n    if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n      st.push(i);\n      b[i]=(byte)0;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 467,
        "startLineNumber" : 28,
        "startColumnNumber" : 2,
        "endLineNumber" : 38,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!st.isEmpty()) {\n  b[st.peek()]=(byte)0;\n  System.out.println(st.peek());\n  int pop=st.peek();\n  b[pop]=(byte)1;\n  st.pop();\n  for (int i=0; i < vertices; i++) {\n    if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n      st.push(i);\n      b[i]=(byte)0;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 899,
        "startLineNumber" : 18,
        "startColumnNumber" : 69,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  byte[] b=new byte[vertices];\n  Arrays.fill(b,(byte)-1);\n  Stack st=new Stack(vertices);\n  st.push(source);\n  while (!st.isEmpty()) {\n    b[st.peek()]=(byte)0;\n    System.out.println(st.peek());\n    int pop=st.peek();\n    b[pop]=(byte)1;\n    st.pop();\n    for (int i=0; i < vertices; i++) {\n      if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n        st.push(i);\n        b[i]=(byte)0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 11,
        "startColumnNumber" : 1,
        "endLineNumber" : 39,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * The BFS implemented in code to use.\n * @param a Structure to perform the search on a graph, adjacency matrix etc.\n * @param vertices The vertices to use\n * @param source The Source\n */\npublic static void bfsImplement(byte[][] a,int vertices,int source){\n  byte[] b=new byte[vertices];\n  Arrays.fill(b,(byte)-1);\n  Stack st=new Stack(vertices);\n  st.push(source);\n  while (!st.isEmpty()) {\n    b[st.peek()]=(byte)0;\n    System.out.println(st.peek());\n    int pop=st.peek();\n    b[pop]=(byte)1;\n    st.pop();\n    for (int i=0; i < vertices; i++) {\n      if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n        st.push(i);\n        b[i]=(byte)0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 35,
        "startColumnNumber" : 7,
        "endLineNumber" : 35,
        "endColumnNumber" : 53
      },
      "nodeContext" : "a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 32,
    "startColumnNumber" : 5,
    "endLineNumber" : 32,
    "endColumnNumber" : 8
  }, {
    "charLength" : 3,
    "startLineNumber" : 35,
    "startColumnNumber" : 9,
    "endLineNumber" : 35,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 8
  } ]
}