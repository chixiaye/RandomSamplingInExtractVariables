{
  "id" : 388,
  "expression" : "CombineHint",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-optimizer/src/test/java/org/apache/flink/optimizer/java/ReduceCompilationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CombineHint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 316,
      "startColumnNumber" : 36,
      "endLineNumber" : 316,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 316,
        "startColumnNumber" : 36,
        "endLineNumber" : 316,
        "endColumnNumber" : 52
      },
      "nodeContext" : "CombineHint.HASH",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 316,
        "endColumnNumber" : 53
      },
      "nodeContext" : "data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n  public String getKey(  Tuple2<String,Double> value){\n    return value.f0;\n  }\n}\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n  @Override public Tuple2<String,Double> reduce(  Tuple2<String,Double> value1,  Tuple2<String,Double> value2){\n    return null;\n  }\n}\n).setCombineHint(CombineHint.HASH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 865,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 317,
        "endColumnNumber" : 36
      },
      "nodeContext" : "data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n  public String getKey(  Tuple2<String,Double> value){\n    return value.f0;\n  }\n}\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n  @Override public Tuple2<String,Double> reduce(  Tuple2<String,Double> value1,  Tuple2<String,Double> value2){\n    return null;\n  }\n}\n).setCombineHint(CombineHint.HASH).name(\"reducer\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 947,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 318,
        "endColumnNumber" : 81
      },
      "nodeContext" : "data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n  public String getKey(  Tuple2<String,Double> value){\n    return value.f0;\n  }\n}\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n  @Override public Tuple2<String,Double> reduce(  Tuple2<String,Double> value1,  Tuple2<String,Double> value2){\n    return null;\n  }\n}\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 104,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 981,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 319,
        "endColumnNumber" : 33
      },
      "nodeContext" : "data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n  public String getKey(  Tuple2<String,Double> value){\n    return value.f0;\n  }\n}\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n  @Override public Tuple2<String,Double> reduce(  Tuple2<String,Double> value1,  Tuple2<String,Double> value2){\n    return null;\n  }\n}\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>()).name(\"sink\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 107,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 301,
        "startColumnNumber" : 12,
        "endLineNumber" : 319,
        "endColumnNumber" : 34
      },
      "nodeContext" : "data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n  public String getKey(  Tuple2<String,Double> value){\n    return value.f0;\n  }\n}\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n  @Override public Tuple2<String,Double> reduce(  Tuple2<String,Double> value1,  Tuple2<String,Double> value2){\n    return null;\n  }\n}\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>()).name(\"sink\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 108,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3324,
        "startLineNumber" : 291,
        "startColumnNumber" : 12,
        "endLineNumber" : 362,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.setParallelism(8);\n  DataSet<Tuple2<String,Double>> data=env.readCsvFile(\"file:///will/never/be/read\").types(String.class,Double.class).name(\"source\").setParallelism(6);\n  data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n    public String getKey(    Tuple2<String,Double> value){\n      return value.f0;\n    }\n  }\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n    @Override public Tuple2<String,Double> reduce(    Tuple2<String,Double> value1,    Tuple2<String,Double> value2){\n      return null;\n    }\n  }\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>()).name(\"sink\");\n  Plan p=env.createProgramPlan();\n  OptimizedPlan op=compileNoStats(p);\n  OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);\n  SourcePlanNode sourceNode=resolver.getNode(\"source\");\n  SingleInputPlanNode reduceNode=resolver.getNode(\"reducer\");\n  SinkPlanNode sinkNode=resolver.getNode(\"sink\");\n  SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getInput().getSource();\n  SingleInputPlanNode keyExtractor=(SingleInputPlanNode)combineNode.getInput().getSource();\n  SingleInputPlanNode keyProjector=(SingleInputPlanNode)sinkNode.getInput().getSource();\n  assertEquals(sourceNode,keyExtractor.getInput().getSource());\n  assertEquals(keyProjector,sinkNode.getInput().getSource());\n  assertEquals(DriverStrategy.SORTED_REDUCE,reduceNode.getDriverStrategy());\n  assertEquals(DriverStrategy.HASHED_PARTIAL_REDUCE,combineNode.getDriverStrategy());\n  assertEquals(new FieldList(0),reduceNode.getKeys(0));\n  assertEquals(new FieldList(0),combineNode.getKeys(0));\n  assertEquals(new FieldList(0),reduceNode.getInput().getLocalStrategyKeys());\n  assertEquals(6,sourceNode.getParallelism());\n  assertEquals(6,keyExtractor.getParallelism());\n  assertEquals(6,combineNode.getParallelism());\n  assertEquals(8,reduceNode.getParallelism());\n  assertEquals(8,keyProjector.getParallelism());\n  assertEquals(8,sinkNode.getParallelism());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 355,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3521,
        "startLineNumber" : 291,
        "startColumnNumber" : 8,
        "endLineNumber" : 366,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n  env.setParallelism(8);\n  DataSet<Tuple2<String,Double>> data=env.readCsvFile(\"file:///will/never/be/read\").types(String.class,Double.class).name(\"source\").setParallelism(6);\n  data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n    public String getKey(    Tuple2<String,Double> value){\n      return value.f0;\n    }\n  }\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n    @Override public Tuple2<String,Double> reduce(    Tuple2<String,Double> value1,    Tuple2<String,Double> value2){\n      return null;\n    }\n  }\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>()).name(\"sink\");\n  Plan p=env.createProgramPlan();\n  OptimizedPlan op=compileNoStats(p);\n  OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);\n  SourcePlanNode sourceNode=resolver.getNode(\"source\");\n  SingleInputPlanNode reduceNode=resolver.getNode(\"reducer\");\n  SinkPlanNode sinkNode=resolver.getNode(\"sink\");\n  SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getInput().getSource();\n  SingleInputPlanNode keyExtractor=(SingleInputPlanNode)combineNode.getInput().getSource();\n  SingleInputPlanNode keyProjector=(SingleInputPlanNode)sinkNode.getInput().getSource();\n  assertEquals(sourceNode,keyExtractor.getInput().getSource());\n  assertEquals(keyProjector,sinkNode.getInput().getSource());\n  assertEquals(DriverStrategy.SORTED_REDUCE,reduceNode.getDriverStrategy());\n  assertEquals(DriverStrategy.HASHED_PARTIAL_REDUCE,combineNode.getDriverStrategy());\n  assertEquals(new FieldList(0),reduceNode.getKeys(0));\n  assertEquals(new FieldList(0),combineNode.getKeys(0));\n  assertEquals(new FieldList(0),reduceNode.getInput().getLocalStrategyKeys());\n  assertEquals(6,sourceNode.getParallelism());\n  assertEquals(6,keyExtractor.getParallelism());\n  assertEquals(6,combineNode.getParallelism());\n  assertEquals(8,reduceNode.getParallelism());\n  assertEquals(8,keyProjector.getParallelism());\n  assertEquals(8,sinkNode.getParallelism());\n}\n catch (Exception e) {\n  System.err.println(e.getMessage());\n  e.printStackTrace();\n  fail(e.getClass().getSimpleName() + \" in test: \" + e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 388,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 290,
        "startColumnNumber" : 44,
        "endLineNumber" : 367,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n    env.setParallelism(8);\n    DataSet<Tuple2<String,Double>> data=env.readCsvFile(\"file:///will/never/be/read\").types(String.class,Double.class).name(\"source\").setParallelism(6);\n    data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n      public String getKey(      Tuple2<String,Double> value){\n        return value.f0;\n      }\n    }\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n      @Override public Tuple2<String,Double> reduce(      Tuple2<String,Double> value1,      Tuple2<String,Double> value2){\n        return null;\n      }\n    }\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>()).name(\"sink\");\n    Plan p=env.createProgramPlan();\n    OptimizedPlan op=compileNoStats(p);\n    OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);\n    SourcePlanNode sourceNode=resolver.getNode(\"source\");\n    SingleInputPlanNode reduceNode=resolver.getNode(\"reducer\");\n    SinkPlanNode sinkNode=resolver.getNode(\"sink\");\n    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getInput().getSource();\n    SingleInputPlanNode keyExtractor=(SingleInputPlanNode)combineNode.getInput().getSource();\n    SingleInputPlanNode keyProjector=(SingleInputPlanNode)sinkNode.getInput().getSource();\n    assertEquals(sourceNode,keyExtractor.getInput().getSource());\n    assertEquals(keyProjector,sinkNode.getInput().getSource());\n    assertEquals(DriverStrategy.SORTED_REDUCE,reduceNode.getDriverStrategy());\n    assertEquals(DriverStrategy.HASHED_PARTIAL_REDUCE,combineNode.getDriverStrategy());\n    assertEquals(new FieldList(0),reduceNode.getKeys(0));\n    assertEquals(new FieldList(0),combineNode.getKeys(0));\n    assertEquals(new FieldList(0),reduceNode.getInput().getLocalStrategyKeys());\n    assertEquals(6,sourceNode.getParallelism());\n    assertEquals(6,keyExtractor.getParallelism());\n    assertEquals(6,combineNode.getParallelism());\n    assertEquals(8,reduceNode.getParallelism());\n    assertEquals(8,keyProjector.getParallelism());\n    assertEquals(8,sinkNode.getParallelism());\n  }\n catch (  Exception e) {\n    System.err.println(e.getMessage());\n    e.printStackTrace();\n    fail(e.getClass().getSimpleName() + \" in test: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 389,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3587,
        "startLineNumber" : 289,
        "startColumnNumber" : 4,
        "endLineNumber" : 367,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGroupedReduceWithHint(){\n  try {\n    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();\n    env.setParallelism(8);\n    DataSet<Tuple2<String,Double>> data=env.readCsvFile(\"file:///will/never/be/read\").types(String.class,Double.class).name(\"source\").setParallelism(6);\n    data.groupBy(new KeySelector<Tuple2<String,Double>,String>(){\n      public String getKey(      Tuple2<String,Double> value){\n        return value.f0;\n      }\n    }\n).reduce(new RichReduceFunction<Tuple2<String,Double>>(){\n      @Override public Tuple2<String,Double> reduce(      Tuple2<String,Double> value1,      Tuple2<String,Double> value2){\n        return null;\n      }\n    }\n).setCombineHint(CombineHint.HASH).name(\"reducer\").output(new DiscardingOutputFormat<Tuple2<String,Double>>()).name(\"sink\");\n    Plan p=env.createProgramPlan();\n    OptimizedPlan op=compileNoStats(p);\n    OptimizerPlanNodeResolver resolver=getOptimizerPlanNodeResolver(op);\n    SourcePlanNode sourceNode=resolver.getNode(\"source\");\n    SingleInputPlanNode reduceNode=resolver.getNode(\"reducer\");\n    SinkPlanNode sinkNode=resolver.getNode(\"sink\");\n    SingleInputPlanNode combineNode=(SingleInputPlanNode)reduceNode.getInput().getSource();\n    SingleInputPlanNode keyExtractor=(SingleInputPlanNode)combineNode.getInput().getSource();\n    SingleInputPlanNode keyProjector=(SingleInputPlanNode)sinkNode.getInput().getSource();\n    assertEquals(sourceNode,keyExtractor.getInput().getSource());\n    assertEquals(keyProjector,sinkNode.getInput().getSource());\n    assertEquals(DriverStrategy.SORTED_REDUCE,reduceNode.getDriverStrategy());\n    assertEquals(DriverStrategy.HASHED_PARTIAL_REDUCE,combineNode.getDriverStrategy());\n    assertEquals(new FieldList(0),reduceNode.getKeys(0));\n    assertEquals(new FieldList(0),combineNode.getKeys(0));\n    assertEquals(new FieldList(0),reduceNode.getInput().getLocalStrategyKeys());\n    assertEquals(6,sourceNode.getParallelism());\n    assertEquals(6,keyExtractor.getParallelism());\n    assertEquals(6,combineNode.getParallelism());\n    assertEquals(8,reduceNode.getParallelism());\n    assertEquals(8,keyProjector.getParallelism());\n    assertEquals(8,sinkNode.getParallelism());\n  }\n catch (  Exception e) {\n    System.err.println(e.getMessage());\n    e.printStackTrace();\n    fail(e.getClass().getSimpleName() + \" in test: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 395,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 316,
        "startColumnNumber" : 36,
        "endLineNumber" : 316,
        "endColumnNumber" : 52
      },
      "nodeContext" : "CombineHint.HASH",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.operators.base.ReduceOperatorBase.CombineHint"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 316,
    "startColumnNumber" : 36,
    "endLineNumber" : 316,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}