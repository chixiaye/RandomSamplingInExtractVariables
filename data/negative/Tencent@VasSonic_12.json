{
  "id" : 12,
  "expression" : "SonicConstants.ERROR_CODE_WRITE_FILE_FAIL",
  "projectName" : "Tencent@VasSonic",
  "commitID" : "a3e09c156adb93b4ebe6139def465c519069aa9e",
  "filePath" : "/sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SonicConstants.ERROR_CODE_WRITE_FILE_FAIL",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 41,
      "startLineNumber" : 452,
      "startColumnNumber" : 94,
      "endLineNumber" : 452,
      "endColumnNumber" : 135
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 452,
        "startColumnNumber" : 20,
        "endLineNumber" : 452,
        "endColumnNumber" : 136
      },
      "nodeContext" : "SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 452,
        "startColumnNumber" : 20,
        "endLineNumber" : 452,
        "endColumnNumber" : 137
      },
      "nodeContext" : "SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 450,
        "startColumnNumber" : 23,
        "endLineNumber" : 453,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n  SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 446,
        "startColumnNumber" : 16,
        "endLineNumber" : 453,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n  long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n  SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n}\n else {\n  SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n  SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5023,
        "startLineNumber" : 379,
        "startColumnNumber" : 16,
        "endLineNumber" : 455,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final String eTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_ETAG);\n  final String templateTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_TEMPLATE_TAG);\n  String cspContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP);\n  String cspReportOnlyContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP_REPORT_ONLY);\n  String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n  String serverRsp=output.toString(\"UTF-8\");\n  long startTime=System.currentTimeMillis();\n  JSONObject serverRspJson=new JSONObject(serverRsp);\n  final JSONObject serverDataJson=serverRspJson.optJSONObject(\"data\");\n  JSONObject diffDataJson=SonicUtils.getDiffData(id,serverDataJson);\n  Bundle diffDataBundle=new Bundle();\n  if (null != diffDataJson) {\n    diffDataBundle.putString(DATA_UPDATE_BUNDLE_PARAMS_DIFF,diffDataJson.toString());\n  }\n else {\n    SonicUtils.log(TAG,Log.ERROR,\"handleFlow_DataUpdate:getDiffData error.\");\n    SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_MERGE_DIFF_DATA_FAIL);\n  }\n  if (SonicUtils.shouldLog(Log.DEBUG)) {\n    SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:getDiffData cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n  }\n  if (SonicUtils.needRefreshWebView(cacheOffline)) {\n    if (SonicUtils.shouldLog(Log.INFO)) {\n      SonicUtils.log(TAG,Log.INFO,\"handleFlow_DataUpdate:loadData was invoked, quick notify web data update.\");\n    }\n    Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n    msg.arg1=msg.arg2=SONIC_RESULT_CODE_DATA_UPDATE;\n    msg.setData(diffDataBundle);\n    mainHandler.sendMessage(msg);\n  }\n  startTime=System.currentTimeMillis();\n  final String htmlSha1=serverRspJson.optString(\"html-sha1\");\n  final String htmlString=SonicUtils.buildHtml(id,serverDataJson,htmlSha1,serverRsp.length());\n  if (SonicUtils.shouldLog(Log.DEBUG)) {\n    SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:buildHtml cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n  }\n  if (!TextUtils.isEmpty(htmlString) && !wasInterceptInvoked.get() && SonicUtils.needRefreshWebView(cacheOffline)) {\nsynchronized (webResponseLock) {\n      pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n    }\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate:oh yeah, dataUpdate load hit 304.\");\n    mainHandler.removeMessages(CLIENT_MSG_NOTIFY_RESULT);\n    Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n    msg.arg1=SONIC_RESULT_CODE_DATA_UPDATE;\n    msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n    mainHandler.sendMessage(msg);\n  }\n  if (TextUtils.isEmpty(htmlString)) {\n    SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_BUILD_HTML_ERROR);\n  }\n  if (null == diffDataJson || null == htmlString || !SonicUtils.needSaveData(cacheOffline)) {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: clean session cache.\");\n    SonicUtils.removeSessionCache(id);\n  }\n  switchState(STATE_RUNNING,STATE_READY,true);\n  Thread.yield();\n  startTime=System.currentTimeMillis();\n  if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n    long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n    SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n  }\n else {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n    SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 498,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5463,
        "startLineNumber" : 379,
        "startColumnNumber" : 12,
        "endLineNumber" : 463,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  final String eTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_ETAG);\n  final String templateTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_TEMPLATE_TAG);\n  String cspContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP);\n  String cspReportOnlyContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP_REPORT_ONLY);\n  String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n  String serverRsp=output.toString(\"UTF-8\");\n  long startTime=System.currentTimeMillis();\n  JSONObject serverRspJson=new JSONObject(serverRsp);\n  final JSONObject serverDataJson=serverRspJson.optJSONObject(\"data\");\n  JSONObject diffDataJson=SonicUtils.getDiffData(id,serverDataJson);\n  Bundle diffDataBundle=new Bundle();\n  if (null != diffDataJson) {\n    diffDataBundle.putString(DATA_UPDATE_BUNDLE_PARAMS_DIFF,diffDataJson.toString());\n  }\n else {\n    SonicUtils.log(TAG,Log.ERROR,\"handleFlow_DataUpdate:getDiffData error.\");\n    SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_MERGE_DIFF_DATA_FAIL);\n  }\n  if (SonicUtils.shouldLog(Log.DEBUG)) {\n    SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:getDiffData cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n  }\n  if (SonicUtils.needRefreshWebView(cacheOffline)) {\n    if (SonicUtils.shouldLog(Log.INFO)) {\n      SonicUtils.log(TAG,Log.INFO,\"handleFlow_DataUpdate:loadData was invoked, quick notify web data update.\");\n    }\n    Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n    msg.arg1=msg.arg2=SONIC_RESULT_CODE_DATA_UPDATE;\n    msg.setData(diffDataBundle);\n    mainHandler.sendMessage(msg);\n  }\n  startTime=System.currentTimeMillis();\n  final String htmlSha1=serverRspJson.optString(\"html-sha1\");\n  final String htmlString=SonicUtils.buildHtml(id,serverDataJson,htmlSha1,serverRsp.length());\n  if (SonicUtils.shouldLog(Log.DEBUG)) {\n    SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:buildHtml cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n  }\n  if (!TextUtils.isEmpty(htmlString) && !wasInterceptInvoked.get() && SonicUtils.needRefreshWebView(cacheOffline)) {\nsynchronized (webResponseLock) {\n      pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n    }\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate:oh yeah, dataUpdate load hit 304.\");\n    mainHandler.removeMessages(CLIENT_MSG_NOTIFY_RESULT);\n    Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n    msg.arg1=SONIC_RESULT_CODE_DATA_UPDATE;\n    msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n    mainHandler.sendMessage(msg);\n  }\n  if (TextUtils.isEmpty(htmlString)) {\n    SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_BUILD_HTML_ERROR);\n  }\n  if (null == diffDataJson || null == htmlString || !SonicUtils.needSaveData(cacheOffline)) {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: clean session cache.\");\n    SonicUtils.removeSessionCache(id);\n  }\n  switchState(STATE_RUNNING,STATE_READY,true);\n  Thread.yield();\n  startTime=System.currentTimeMillis();\n  if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n    long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n    SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n  }\n else {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n    SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n  }\n}\n catch (Throwable e) {\n  SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate error:\"+ e.getMessage());\n}\n finally {\n  try {\n    output.close();\n  }\n catch (  Throwable e) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate close output stream error:\"+ e.getMessage());\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 548,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 5487,
        "startLineNumber" : 378,
        "startColumnNumber" : 28,
        "endLineNumber" : 464,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    final String eTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_ETAG);\n    final String templateTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_TEMPLATE_TAG);\n    String cspContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP);\n    String cspReportOnlyContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP_REPORT_ONLY);\n    String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n    String serverRsp=output.toString(\"UTF-8\");\n    long startTime=System.currentTimeMillis();\n    JSONObject serverRspJson=new JSONObject(serverRsp);\n    final JSONObject serverDataJson=serverRspJson.optJSONObject(\"data\");\n    JSONObject diffDataJson=SonicUtils.getDiffData(id,serverDataJson);\n    Bundle diffDataBundle=new Bundle();\n    if (null != diffDataJson) {\n      diffDataBundle.putString(DATA_UPDATE_BUNDLE_PARAMS_DIFF,diffDataJson.toString());\n    }\n else {\n      SonicUtils.log(TAG,Log.ERROR,\"handleFlow_DataUpdate:getDiffData error.\");\n      SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_MERGE_DIFF_DATA_FAIL);\n    }\n    if (SonicUtils.shouldLog(Log.DEBUG)) {\n      SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:getDiffData cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n    }\n    if (SonicUtils.needRefreshWebView(cacheOffline)) {\n      if (SonicUtils.shouldLog(Log.INFO)) {\n        SonicUtils.log(TAG,Log.INFO,\"handleFlow_DataUpdate:loadData was invoked, quick notify web data update.\");\n      }\n      Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n      msg.arg1=msg.arg2=SONIC_RESULT_CODE_DATA_UPDATE;\n      msg.setData(diffDataBundle);\n      mainHandler.sendMessage(msg);\n    }\n    startTime=System.currentTimeMillis();\n    final String htmlSha1=serverRspJson.optString(\"html-sha1\");\n    final String htmlString=SonicUtils.buildHtml(id,serverDataJson,htmlSha1,serverRsp.length());\n    if (SonicUtils.shouldLog(Log.DEBUG)) {\n      SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:buildHtml cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n    }\n    if (!TextUtils.isEmpty(htmlString) && !wasInterceptInvoked.get() && SonicUtils.needRefreshWebView(cacheOffline)) {\nsynchronized (webResponseLock) {\n        pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n      }\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate:oh yeah, dataUpdate load hit 304.\");\n      mainHandler.removeMessages(CLIENT_MSG_NOTIFY_RESULT);\n      Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n      msg.arg1=SONIC_RESULT_CODE_DATA_UPDATE;\n      msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n      mainHandler.sendMessage(msg);\n    }\n    if (TextUtils.isEmpty(htmlString)) {\n      SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_BUILD_HTML_ERROR);\n    }\n    if (null == diffDataJson || null == htmlString || !SonicUtils.needSaveData(cacheOffline)) {\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: clean session cache.\");\n      SonicUtils.removeSessionCache(id);\n    }\n    switchState(STATE_RUNNING,STATE_READY,true);\n    Thread.yield();\n    startTime=System.currentTimeMillis();\n    if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n      long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n      SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n    }\n else {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n      SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n    }\n  }\n catch (  Throwable e) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate error:\"+ e.getMessage());\n  }\n finally {\n    try {\n      output.close();\n    }\n catch (    Throwable e) {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate close output stream error:\"+ e.getMessage());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5507,
        "startLineNumber" : 378,
        "startColumnNumber" : 8,
        "endLineNumber" : 464,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (output != null) {\n  try {\n    final String eTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_ETAG);\n    final String templateTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_TEMPLATE_TAG);\n    String cspContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP);\n    String cspReportOnlyContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP_REPORT_ONLY);\n    String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n    String serverRsp=output.toString(\"UTF-8\");\n    long startTime=System.currentTimeMillis();\n    JSONObject serverRspJson=new JSONObject(serverRsp);\n    final JSONObject serverDataJson=serverRspJson.optJSONObject(\"data\");\n    JSONObject diffDataJson=SonicUtils.getDiffData(id,serverDataJson);\n    Bundle diffDataBundle=new Bundle();\n    if (null != diffDataJson) {\n      diffDataBundle.putString(DATA_UPDATE_BUNDLE_PARAMS_DIFF,diffDataJson.toString());\n    }\n else {\n      SonicUtils.log(TAG,Log.ERROR,\"handleFlow_DataUpdate:getDiffData error.\");\n      SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_MERGE_DIFF_DATA_FAIL);\n    }\n    if (SonicUtils.shouldLog(Log.DEBUG)) {\n      SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:getDiffData cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n    }\n    if (SonicUtils.needRefreshWebView(cacheOffline)) {\n      if (SonicUtils.shouldLog(Log.INFO)) {\n        SonicUtils.log(TAG,Log.INFO,\"handleFlow_DataUpdate:loadData was invoked, quick notify web data update.\");\n      }\n      Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n      msg.arg1=msg.arg2=SONIC_RESULT_CODE_DATA_UPDATE;\n      msg.setData(diffDataBundle);\n      mainHandler.sendMessage(msg);\n    }\n    startTime=System.currentTimeMillis();\n    final String htmlSha1=serverRspJson.optString(\"html-sha1\");\n    final String htmlString=SonicUtils.buildHtml(id,serverDataJson,htmlSha1,serverRsp.length());\n    if (SonicUtils.shouldLog(Log.DEBUG)) {\n      SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:buildHtml cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n    }\n    if (!TextUtils.isEmpty(htmlString) && !wasInterceptInvoked.get() && SonicUtils.needRefreshWebView(cacheOffline)) {\nsynchronized (webResponseLock) {\n        pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n      }\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate:oh yeah, dataUpdate load hit 304.\");\n      mainHandler.removeMessages(CLIENT_MSG_NOTIFY_RESULT);\n      Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n      msg.arg1=SONIC_RESULT_CODE_DATA_UPDATE;\n      msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n      mainHandler.sendMessage(msg);\n    }\n    if (TextUtils.isEmpty(htmlString)) {\n      SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_BUILD_HTML_ERROR);\n    }\n    if (null == diffDataJson || null == htmlString || !SonicUtils.needSaveData(cacheOffline)) {\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: clean session cache.\");\n      SonicUtils.removeSessionCache(id);\n    }\n    switchState(STATE_RUNNING,STATE_READY,true);\n    Thread.yield();\n    startTime=System.currentTimeMillis();\n    if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n      long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n      SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n    }\n else {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n      SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n    }\n  }\n catch (  Throwable e) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate error:\"+ e.getMessage());\n  }\n finally {\n    try {\n      output.close();\n    }\n catch (    Throwable e) {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate close output stream error:\"+ e.getMessage());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 553,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5692,
        "startLineNumber" : 375,
        "startColumnNumber" : 43,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: start.\");\n  ByteArrayOutputStream output=sessionConnection.getResponseData();\n  if (output != null) {\n    try {\n      final String eTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_ETAG);\n      final String templateTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_TEMPLATE_TAG);\n      String cspContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP);\n      String cspReportOnlyContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP_REPORT_ONLY);\n      String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n      String serverRsp=output.toString(\"UTF-8\");\n      long startTime=System.currentTimeMillis();\n      JSONObject serverRspJson=new JSONObject(serverRsp);\n      final JSONObject serverDataJson=serverRspJson.optJSONObject(\"data\");\n      JSONObject diffDataJson=SonicUtils.getDiffData(id,serverDataJson);\n      Bundle diffDataBundle=new Bundle();\n      if (null != diffDataJson) {\n        diffDataBundle.putString(DATA_UPDATE_BUNDLE_PARAMS_DIFF,diffDataJson.toString());\n      }\n else {\n        SonicUtils.log(TAG,Log.ERROR,\"handleFlow_DataUpdate:getDiffData error.\");\n        SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_MERGE_DIFF_DATA_FAIL);\n      }\n      if (SonicUtils.shouldLog(Log.DEBUG)) {\n        SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:getDiffData cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n      }\n      if (SonicUtils.needRefreshWebView(cacheOffline)) {\n        if (SonicUtils.shouldLog(Log.INFO)) {\n          SonicUtils.log(TAG,Log.INFO,\"handleFlow_DataUpdate:loadData was invoked, quick notify web data update.\");\n        }\n        Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n        msg.arg1=msg.arg2=SONIC_RESULT_CODE_DATA_UPDATE;\n        msg.setData(diffDataBundle);\n        mainHandler.sendMessage(msg);\n      }\n      startTime=System.currentTimeMillis();\n      final String htmlSha1=serverRspJson.optString(\"html-sha1\");\n      final String htmlString=SonicUtils.buildHtml(id,serverDataJson,htmlSha1,serverRsp.length());\n      if (SonicUtils.shouldLog(Log.DEBUG)) {\n        SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:buildHtml cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n      }\n      if (!TextUtils.isEmpty(htmlString) && !wasInterceptInvoked.get() && SonicUtils.needRefreshWebView(cacheOffline)) {\nsynchronized (webResponseLock) {\n          pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n        }\n        SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate:oh yeah, dataUpdate load hit 304.\");\n        mainHandler.removeMessages(CLIENT_MSG_NOTIFY_RESULT);\n        Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n        msg.arg1=SONIC_RESULT_CODE_DATA_UPDATE;\n        msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n        mainHandler.sendMessage(msg);\n      }\n      if (TextUtils.isEmpty(htmlString)) {\n        SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_BUILD_HTML_ERROR);\n      }\n      if (null == diffDataJson || null == htmlString || !SonicUtils.needSaveData(cacheOffline)) {\n        SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: clean session cache.\");\n        SonicUtils.removeSessionCache(id);\n      }\n      switchState(STATE_RUNNING,STATE_READY,true);\n      Thread.yield();\n      startTime=System.currentTimeMillis();\n      if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n        long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n        SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n        SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n      }\n else {\n        SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n        SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n      }\n    }\n catch (    Throwable e) {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate error:\"+ e.getMessage());\n    }\n finally {\n      try {\n        output.close();\n      }\n catch (      Throwable e) {\n        SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate close output stream error:\"+ e.getMessage());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 574,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6259,
        "startLineNumber" : 365,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Sonic obtains the difference data between the server and the local data first,then sonic will build the template and server data into html.If client did not load url before, the new html will be encapsulated as an inputStream {@link java.io.ByteArrayInputStream},When client initiates a resource interception, sonic provides the inputStream to the kernel. If client did load url before, sonic provides the diff data to page when page obtains the diff data.\n */\nprotected void handleFlow_DataUpdate(){\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: start.\");\n  ByteArrayOutputStream output=sessionConnection.getResponseData();\n  if (output != null) {\n    try {\n      final String eTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_ETAG);\n      final String templateTag=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_TEMPLATE_TAG);\n      String cspContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP);\n      String cspReportOnlyContent=sessionConnection.getResponseHeaderField(SonicSessionConnection.HTTP_HEAD_CSP_REPORT_ONLY);\n      String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n      String serverRsp=output.toString(\"UTF-8\");\n      long startTime=System.currentTimeMillis();\n      JSONObject serverRspJson=new JSONObject(serverRsp);\n      final JSONObject serverDataJson=serverRspJson.optJSONObject(\"data\");\n      JSONObject diffDataJson=SonicUtils.getDiffData(id,serverDataJson);\n      Bundle diffDataBundle=new Bundle();\n      if (null != diffDataJson) {\n        diffDataBundle.putString(DATA_UPDATE_BUNDLE_PARAMS_DIFF,diffDataJson.toString());\n      }\n else {\n        SonicUtils.log(TAG,Log.ERROR,\"handleFlow_DataUpdate:getDiffData error.\");\n        SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_MERGE_DIFF_DATA_FAIL);\n      }\n      if (SonicUtils.shouldLog(Log.DEBUG)) {\n        SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:getDiffData cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n      }\n      if (SonicUtils.needRefreshWebView(cacheOffline)) {\n        if (SonicUtils.shouldLog(Log.INFO)) {\n          SonicUtils.log(TAG,Log.INFO,\"handleFlow_DataUpdate:loadData was invoked, quick notify web data update.\");\n        }\n        Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n        msg.arg1=msg.arg2=SONIC_RESULT_CODE_DATA_UPDATE;\n        msg.setData(diffDataBundle);\n        mainHandler.sendMessage(msg);\n      }\n      startTime=System.currentTimeMillis();\n      final String htmlSha1=serverRspJson.optString(\"html-sha1\");\n      final String htmlString=SonicUtils.buildHtml(id,serverDataJson,htmlSha1,serverRsp.length());\n      if (SonicUtils.shouldLog(Log.DEBUG)) {\n        SonicUtils.log(TAG,Log.DEBUG,\"handleFlow_DataUpdate:buildHtml cost \" + (System.currentTimeMillis() - startTime) + \" ms.\");\n      }\n      if (!TextUtils.isEmpty(htmlString) && !wasInterceptInvoked.get() && SonicUtils.needRefreshWebView(cacheOffline)) {\nsynchronized (webResponseLock) {\n          pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n        }\n        SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate:oh yeah, dataUpdate load hit 304.\");\n        mainHandler.removeMessages(CLIENT_MSG_NOTIFY_RESULT);\n        Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n        msg.arg1=SONIC_RESULT_CODE_DATA_UPDATE;\n        msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n        mainHandler.sendMessage(msg);\n      }\n      if (TextUtils.isEmpty(htmlString)) {\n        SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_BUILD_HTML_ERROR);\n      }\n      if (null == diffDataJson || null == htmlString || !SonicUtils.needSaveData(cacheOffline)) {\n        SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: clean session cache.\");\n        SonicUtils.removeSessionCache(id);\n      }\n      switchState(STATE_RUNNING,STATE_READY,true);\n      Thread.yield();\n      startTime=System.currentTimeMillis();\n      if (SonicUtils.saveSessionFiles(id,htmlString,null,serverDataJson.toString())) {\n        long htmlSize=new File(SonicFileUtils.getSonicHtmlPath(id)).length();\n        SonicUtils.saveSonicData(id,eTag,templateTag,htmlSha1,htmlSize,cspContent,cspReportOnlyContent);\n        SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_DataUpdate: finish save session cache, cost \"+ (System.currentTimeMillis() - startTime)+ \" ms.\");\n      }\n else {\n        SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate: save session files fail.\");\n        SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n      }\n    }\n catch (    Throwable e) {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate error:\"+ e.getMessage());\n    }\n finally {\n      try {\n        output.close();\n      }\n catch (      Throwable e) {\n        SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_DataUpdate close output stream error:\"+ e.getMessage());\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 579,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 452,
        "startColumnNumber" : 20,
        "endLineNumber" : 452,
        "endColumnNumber" : 137
      },
      "nodeContext" : "SonicEngine.getInstance().getRuntime().notifyError(sessionClient,srcUrl,SonicConstants.ERROR_CODE_WRITE_FILE_FAIL);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 41,
    "startLineNumber" : 452,
    "startColumnNumber" : 94,
    "endLineNumber" : 452,
    "endColumnNumber" : 135
  } ],
  "layoutRelationDataList" : [ ]
}