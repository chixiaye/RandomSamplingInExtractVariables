{
  "id" : 295,
  "expression" : "AVERAGE",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/UnManagedRealmCollectionTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AVERAGE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 95,
      "startColumnNumber" : 25,
      "endLineNumber" : 95,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 95,
        "startColumnNumber" : 20,
        "endLineNumber" : 95,
        "endColumnNumber" : 33
      },
      "nodeContext" : "case AVERAGE:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1069,
        "startLineNumber" : 89,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (method) {\ncase WHERE:  collection.where();\nbreak;\ncase MIN:collection.min(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 88,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\nswitch (method) {\ncase WHERE:    collection.where();\n  break;\ncase MIN:collection.min(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\nfail(method + \" should have thrown an exception.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1235,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\nswitch (method) {\ncase WHERE:    collection.where();\n  break;\ncase MIN:collection.min(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\nfail(method + \" should have thrown an exception.\");\n}\n catch (UnsupportedOperationException ignored) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 124,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1259,
        "startLineNumber" : 87,
        "startColumnNumber" : 76,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\nswitch (method) {\ncase WHERE:      collection.where();\n    break;\ncase MIN:  collection.min(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\nfail(method + \" should have thrown an exception.\");\n}\n catch (UnsupportedOperationException ignored) {\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (RealmCollectionMethod method : RealmCollectionMethod.values()) {\n  try {\nswitch (method) {\ncase WHERE:      collection.where();\n    break;\ncase MIN:  collection.min(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\nfail(method + \" should have thrown an exception.\");\n}\n catch (UnsupportedOperationException ignored) {\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 133,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1379,
        "startLineNumber" : 85,
        "startColumnNumber" : 58,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  RealmCollectionMethod method : RealmCollectionMethod.values()) {\n    try {\nswitch (method) {\ncase WHERE:        collection.where();\n      break;\ncase MIN:    collection.min(AllJavaTypes.FIELD_LONG);\n  break;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\nfail(method + \" should have thrown an exception.\");\n}\n catch (UnsupportedOperationException ignored) {\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 134,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1443,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void unsupportedMethods_unManagedCollections(){\n  for (  RealmCollectionMethod method : RealmCollectionMethod.values()) {\n    try {\nswitch (method) {\ncase WHERE:        collection.where();\n      break;\ncase MIN:    collection.min(AllJavaTypes.FIELD_LONG);\n  break;\ncase MAX:collection.max(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SUM:collection.sum(AllJavaTypes.FIELD_LONG);\nbreak;\ncase AVERAGE:collection.average(AllJavaTypes.FIELD_LONG);\nbreak;\ncase MIN_DATE:collection.minDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase MAX_DATE:collection.maxDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase DELETE_ALL_FROM_REALM:collection.deleteAllFromRealm();\nbreak;\ncase FREEZE:collection.freeze();\nbreak;\ncase IS_VALID:assertTrue(collection.isValid());\ncontinue;\ncase IS_MANAGED:assertFalse(collection.isManaged());\ncontinue;\ncase IS_FROZEN:assertFalse(collection.isFrozen());\ncontinue;\n}\nfail(method + \" should have thrown an exception.\");\n}\n catch (UnsupportedOperationException ignored) {\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 140,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 95,
        "startColumnNumber" : 20,
        "endLineNumber" : 95,
        "endColumnNumber" : 33
      },
      "nodeContext" : "case AVERAGE:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.realm.CollectionTests.RealmCollectionMethod"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 95,
    "startColumnNumber" : 25,
    "endLineNumber" : 95,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}