{
  "id" : 55,
  "expression" : "Boolean",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "d5002f4bebce87eb2ad14efe9eb0f16ec7bf6592",
  "filePath" : "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java",
  "occurrences" : 14,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2310,
      "startColumnNumber" : 16,
      "endLineNumber" : 2310,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 2310,
        "startColumnNumber" : 16,
        "endLineNumber" : 2310,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Boolean.FALSE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 2310,
        "startColumnNumber" : 16,
        "endLineNumber" : 2310,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Boolean.FALSE.equals(schema.getNullable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 2310,
        "startColumnNumber" : 12,
        "endLineNumber" : 2312,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.FALSE.equals(schema.getNullable())) {\n  LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 2307,
        "startColumnNumber" : 37,
        "endLineNumber" : 2314,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Boolean.FALSE.equals(schema.getNullable())) {\n    LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n  }\n  m.isNullable=true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 2307,
        "startColumnNumber" : 8,
        "endLineNumber" : 2314,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isAnyTypeSchema(schema)) {\n  if (Boolean.FALSE.equals(schema.getNullable())) {\n    LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n  }\n  m.isNullable=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 2310,
        "startColumnNumber" : 16,
        "endLineNumber" : 2310,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Boolean.FALSE.equals(schema.getNullable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2497,
      "startColumnNumber" : 16,
      "endLineNumber" : 2497,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2497,
        "startColumnNumber" : 16,
        "endLineNumber" : 2497,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 2497,
        "startColumnNumber" : 16,
        "endLineNumber" : 2497,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Boolean.TRUE.equals(schema.getNullable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 2497,
        "startColumnNumber" : 12,
        "endLineNumber" : 2499,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.TRUE.equals(schema.getNullable())) {\n  m.isNullable=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 10020,
        "startLineNumber" : 2322,
        "startColumnNumber" : 53,
        "endLineNumber" : 2501,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 778,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 2497,
        "startColumnNumber" : 16,
        "endLineNumber" : 2497,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Boolean.TRUE.equals(schema.getNullable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2498,
      "startColumnNumber" : 31,
      "endLineNumber" : 2498,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2498,
        "startColumnNumber" : 31,
        "endLineNumber" : 2498,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2498,
        "startColumnNumber" : 16,
        "endLineNumber" : 2498,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isNullable=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 2498,
        "startColumnNumber" : 16,
        "endLineNumber" : 2498,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isNullable=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 2497,
        "startColumnNumber" : 59,
        "endLineNumber" : 2499,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  m.isNullable=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 2497,
        "startColumnNumber" : 12,
        "endLineNumber" : 2499,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.TRUE.equals(schema.getNullable())) {\n  m.isNullable=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 10020,
        "startLineNumber" : 2322,
        "startColumnNumber" : 53,
        "endLineNumber" : 2501,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 778,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 2498,
        "startColumnNumber" : 16,
        "endLineNumber" : 2498,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isNullable=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2517,
      "startColumnNumber" : 30,
      "endLineNumber" : 2517,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2517,
        "startColumnNumber" : 30,
        "endLineNumber" : 2517,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2517,
        "startColumnNumber" : 16,
        "endLineNumber" : 2517,
        "endColumnNumber" : 42
      },
      "nodeContext" : "m.isNumeric=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2517,
        "startColumnNumber" : 16,
        "endLineNumber" : 2517,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isNumeric=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 2512,
        "startColumnNumber" : 59,
        "endLineNumber" : 2523,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2517,
        "startColumnNumber" : 16,
        "endLineNumber" : 2517,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isNumeric=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2519,
      "startColumnNumber" : 31,
      "endLineNumber" : 2519,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2519,
        "startColumnNumber" : 31,
        "endLineNumber" : 2519,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 2519,
        "startColumnNumber" : 20,
        "endLineNumber" : 2519,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isLong=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 2519,
        "startColumnNumber" : 20,
        "endLineNumber" : 2519,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isLong=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 2518,
        "startColumnNumber" : 53,
        "endLineNumber" : 2520,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  m.isLong=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 2518,
        "startColumnNumber" : 16,
        "endLineNumber" : 2522,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isLongSchema(schema)) {\n  m.isLong=Boolean.TRUE;\n}\n else {\n  m.isInteger=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 2512,
        "startColumnNumber" : 59,
        "endLineNumber" : 2523,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 2519,
        "startColumnNumber" : 20,
        "endLineNumber" : 2519,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isLong=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2521,
      "startColumnNumber" : 34,
      "endLineNumber" : 2521,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2521,
        "startColumnNumber" : 34,
        "endLineNumber" : 2521,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2521,
        "startColumnNumber" : 20,
        "endLineNumber" : 2521,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m.isInteger=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2521,
        "startColumnNumber" : 20,
        "endLineNumber" : 2521,
        "endColumnNumber" : 47
      },
      "nodeContext" : "m.isInteger=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 2520,
        "startColumnNumber" : 23,
        "endLineNumber" : 2522,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  m.isInteger=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 2518,
        "startColumnNumber" : 16,
        "endLineNumber" : 2522,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isLongSchema(schema)) {\n  m.isLong=Boolean.TRUE;\n}\n else {\n  m.isInteger=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 604,
        "startLineNumber" : 2512,
        "startColumnNumber" : 59,
        "endLineNumber" : 2523,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2521,
        "startColumnNumber" : 20,
        "endLineNumber" : 2521,
        "endColumnNumber" : 47
      },
      "nodeContext" : "m.isInteger=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2527,
      "startColumnNumber" : 29,
      "endLineNumber" : 2527,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2527,
        "startColumnNumber" : 29,
        "endLineNumber" : 2527,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 2527,
        "startColumnNumber" : 16,
        "endLineNumber" : 2527,
        "endColumnNumber" : 41
      },
      "nodeContext" : "m.isString=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2527,
        "startColumnNumber" : 16,
        "endLineNumber" : 2527,
        "endColumnNumber" : 42
      },
      "nodeContext" : "m.isString=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 2523,
        "startColumnNumber" : 58,
        "endLineNumber" : 2528,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 2523,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2527,
        "startColumnNumber" : 16,
        "endLineNumber" : 2527,
        "endColumnNumber" : 42
      },
      "nodeContext" : "m.isString=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2532,
      "startColumnNumber" : 30,
      "endLineNumber" : 2532,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2532,
        "startColumnNumber" : 30,
        "endLineNumber" : 2532,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2532,
        "startColumnNumber" : 16,
        "endLineNumber" : 2532,
        "endColumnNumber" : 42
      },
      "nodeContext" : "m.isNumeric=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2532,
        "startColumnNumber" : 16,
        "endLineNumber" : 2532,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isNumeric=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 2528,
        "startColumnNumber" : 58,
        "endLineNumber" : 2540,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 2528,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 2523,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2532,
        "startColumnNumber" : 16,
        "endLineNumber" : 2532,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isNumeric=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2534,
      "startColumnNumber" : 32,
      "endLineNumber" : 2534,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2534,
        "startColumnNumber" : 32,
        "endLineNumber" : 2534,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 2534,
        "startColumnNumber" : 20,
        "endLineNumber" : 2534,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isFloat=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 2534,
        "startColumnNumber" : 20,
        "endLineNumber" : 2534,
        "endColumnNumber" : 45
      },
      "nodeContext" : "m.isFloat=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 2533,
        "startColumnNumber" : 54,
        "endLineNumber" : 2535,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  m.isFloat=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 2533,
        "startColumnNumber" : 16,
        "endLineNumber" : 2539,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isFloatSchema(schema)) {\n  m.isFloat=Boolean.TRUE;\n}\n else if (ModelUtils.isDoubleSchema(schema)) {\n  m.isDouble=Boolean.TRUE;\n}\n else {\n  m.isNumber=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 2528,
        "startColumnNumber" : 58,
        "endLineNumber" : 2540,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 2528,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 2523,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 2534,
        "startColumnNumber" : 20,
        "endLineNumber" : 2534,
        "endColumnNumber" : 45
      },
      "nodeContext" : "m.isFloat=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2536,
      "startColumnNumber" : 33,
      "endLineNumber" : 2536,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2536,
        "startColumnNumber" : 33,
        "endLineNumber" : 2536,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 2536,
        "startColumnNumber" : 20,
        "endLineNumber" : 2536,
        "endColumnNumber" : 45
      },
      "nodeContext" : "m.isDouble=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2536,
        "startColumnNumber" : 20,
        "endLineNumber" : 2536,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m.isDouble=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 2535,
        "startColumnNumber" : 62,
        "endLineNumber" : 2537,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  m.isDouble=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 2535,
        "startColumnNumber" : 23,
        "endLineNumber" : 2539,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isDoubleSchema(schema)) {\n  m.isDouble=Boolean.TRUE;\n}\n else {\n  m.isNumber=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 2533,
        "startColumnNumber" : 16,
        "endLineNumber" : 2539,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isFloatSchema(schema)) {\n  m.isFloat=Boolean.TRUE;\n}\n else if (ModelUtils.isDoubleSchema(schema)) {\n  m.isDouble=Boolean.TRUE;\n}\n else {\n  m.isNumber=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 2528,
        "startColumnNumber" : 58,
        "endLineNumber" : 2540,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 2528,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 2523,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2536,
        "startColumnNumber" : 20,
        "endLineNumber" : 2536,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m.isDouble=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2538,
      "startColumnNumber" : 33,
      "endLineNumber" : 2538,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2538,
        "startColumnNumber" : 33,
        "endLineNumber" : 2538,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 2538,
        "startColumnNumber" : 20,
        "endLineNumber" : 2538,
        "endColumnNumber" : 45
      },
      "nodeContext" : "m.isNumber=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2538,
        "startColumnNumber" : 20,
        "endLineNumber" : 2538,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m.isNumber=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 2537,
        "startColumnNumber" : 23,
        "endLineNumber" : 2539,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  m.isNumber=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 2535,
        "startColumnNumber" : 23,
        "endLineNumber" : 2539,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isDoubleSchema(schema)) {\n  m.isDouble=Boolean.TRUE;\n}\n else {\n  m.isNumber=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 342,
        "startLineNumber" : 2533,
        "startColumnNumber" : 16,
        "endLineNumber" : 2539,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ModelUtils.isFloatSchema(schema)) {\n  m.isFloat=Boolean.TRUE;\n}\n else if (ModelUtils.isDoubleSchema(schema)) {\n  m.isDouble=Boolean.TRUE;\n}\n else {\n  m.isNumber=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 716,
        "startLineNumber" : 2528,
        "startColumnNumber" : 58,
        "endLineNumber" : 2540,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 2528,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1355,
        "startLineNumber" : 2523,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2005,
        "startLineNumber" : 2512,
        "startColumnNumber" : 19,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 2509,
        "startColumnNumber" : 12,
        "endLineNumber" : 2543,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ModelUtils.isMapSchema(schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  m.isMapModel=true;\n}\n else if (ModelUtils.isIntegerSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isLongSchema(schema)) {\n    m.isLong=Boolean.TRUE;\n  }\n else {\n    m.isInteger=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isStringSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isString=Boolean.TRUE;\n}\n else if (ModelUtils.isNumberSchema(schema)) {\n  ModelUtils.syncValidationProperties(schema,m);\n  m.isNumeric=Boolean.TRUE;\n  if (ModelUtils.isFloatSchema(schema)) {\n    m.isFloat=Boolean.TRUE;\n  }\n else   if (ModelUtils.isDoubleSchema(schema)) {\n    m.isDouble=Boolean.TRUE;\n  }\n else {\n    m.isNumber=Boolean.TRUE;\n  }\n}\n else if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n  addAdditionPropertiesToCodeGenModel(m,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 2538,
        "startColumnNumber" : 20,
        "endLineNumber" : 2538,
        "endColumnNumber" : 46
      },
      "nodeContext" : "m.isNumber=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2545,
      "startColumnNumber" : 16,
      "endLineNumber" : 2545,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2545,
        "startColumnNumber" : 16,
        "endLineNumber" : 2545,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 2545,
        "startColumnNumber" : 16,
        "endLineNumber" : 2545,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Boolean.TRUE.equals(schema.getNullable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 2545,
        "startColumnNumber" : 12,
        "endLineNumber" : 2547,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.TRUE.equals(schema.getNullable())) {\n  m.isNullable=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 2545,
        "startColumnNumber" : 16,
        "endLineNumber" : 2545,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Boolean.TRUE.equals(schema.getNullable())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2546,
      "startColumnNumber" : 31,
      "endLineNumber" : 2546,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2546,
        "startColumnNumber" : 31,
        "endLineNumber" : 2546,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 2546,
        "startColumnNumber" : 16,
        "endLineNumber" : 2546,
        "endColumnNumber" : 43
      },
      "nodeContext" : "m.isNullable=Boolean.TRUE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 2546,
        "startColumnNumber" : 16,
        "endLineNumber" : 2546,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isNullable=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 2545,
        "startColumnNumber" : 59,
        "endLineNumber" : 2547,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  m.isNullable=Boolean.TRUE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 2545,
        "startColumnNumber" : 12,
        "endLineNumber" : 2547,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.TRUE.equals(schema.getNullable())) {\n  m.isNullable=Boolean.TRUE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2897,
        "startLineNumber" : 2501,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 12961,
        "startLineNumber" : 2322,
        "startColumnNumber" : 15,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1022,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13335,
        "startLineNumber" : 2315,
        "startColumnNumber" : 8,
        "endLineNumber" : 2551,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (ModelUtils.isArraySchema(schema)) {\n  m.isArrayModel=true;\n  CodegenProperty arrayProperty=fromProperty(name,schema);\n  m.setItems(arrayProperty.items);\n  m.arrayModelType=arrayProperty.complexType;\n  addParentContainer(m,name,schema);\n  ModelUtils.syncValidationProperties(schema,m);\n}\n else if (schema instanceof ComposedSchema) {\n  final ComposedSchema composed=(ComposedSchema)schema;\n  Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n  List<String> required=new ArrayList<String>();\n  Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n  List<String> allRequired=new ArrayList<String>();\n  if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n    if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n      LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n    }\n    addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n  }\n  final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n  final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n  final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n  if (supportsInheritance || supportsMixins) {\n    m.allVars=new ArrayList<CodegenProperty>();\n    if (composed.getAllOf() != null) {\n      int modelImplCnt=0;\n      int modelDiscriminators=0;\n      for (      Schema innerSchema : composed.getAllOf()) {\n        if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n          LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n          m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n          if (!this.getLegacyDiscriminatorBehavior()) {\n            m.addDiscriminatorMappedModelsImports();\n          }\n          modelDiscriminators++;\n        }\n        if (innerSchema.getXml() != null) {\n          m.xmlPrefix=innerSchema.getXml().getPrefix();\n          m.xmlNamespace=innerSchema.getXml().getNamespace();\n          m.xmlName=innerSchema.getXml().getName();\n        }\n        if (modelDiscriminators > 1) {\n          LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n        }\n        if (modelImplCnt++ > 1) {\n          LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n          break;\n        }\n      }\n    }\n  }\n  List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n  if (!interfaces.isEmpty()) {\n    if (m.interfaces == null)     m.interfaces=new ArrayList<String>();\n    for (    Schema interfaceSchema : interfaces) {\n      interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n      if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n        String languageType=getTypeDeclaration(interfaceSchema);\n        if (composed.getAnyOf() != null) {\n          if (m.anyOf.contains(languageType)) {\n            LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.anyOf.add(languageType);\n          }\n        }\n else         if (composed.getOneOf() != null) {\n          if (m.oneOf.contains(languageType)) {\n            LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n          }\n else {\n            m.oneOf.add(languageType);\n          }\n        }\n else         if (composed.getAllOf() != null) {\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n        continue;\n      }\n      Schema refSchema=null;\n      String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n      if (allDefinitions != null) {\n        refSchema=allDefinitions.get(ref);\n      }\n      final String modelName=toModelName(ref);\n      m.interfaces.add(modelName);\n      addImport(m,modelName);\n      if (allDefinitions != null && refSchema != null) {\n        if (allParents.contains(ref) && supportsMultipleInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else         if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n          addProperties(allProperties,allRequired,refSchema);\n        }\n else {\n          addProperties(properties,required,refSchema);\n          addProperties(allProperties,allRequired,refSchema);\n        }\n      }\n      if (composed.getAnyOf() != null) {\n        m.anyOf.add(modelName);\n      }\n else       if (composed.getOneOf() != null) {\n        m.oneOf.add(modelName);\n      }\n else       if (composed.getAllOf() != null) {\n        m.allOf.add(modelName);\n      }\n else {\n        LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n      }\n    }\n  }\n  if (parent != null && composed.getAllOf() != null) {\n    m.parentSchema=parentName;\n    m.parent=toModelName(parentName);\n    if (supportsMultipleInheritance) {\n      m.allParents=new ArrayList<String>();\n      for (      String pname : allParents) {\n        String pModelName=toModelName(pname);\n        m.allParents.add(pModelName);\n        addImport(m,pModelName);\n      }\n    }\n else {\n      addImport(m,m.parent);\n    }\n  }\n  for (  Schema component : interfaces) {\n    if (component.get$ref() == null) {\n      if (component != null) {\n        addProperties(properties,required,component);\n        addProperties(allProperties,allRequired,component);\n      }\n      break;\n    }\n  }\n  if (composed.getRequired() != null) {\n    required.addAll(composed.getRequired());\n    allRequired.addAll(composed.getRequired());\n  }\n  addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n  if (supportsAdditionalPropertiesWithComposedSchema) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n}\n else {\n  m.dataType=getSchemaType(schema);\n  if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n    m.isEnum=true;\n    m.allowableValues=new HashMap<String,Object>();\n    m.allowableValues.put(\"values\",schema.getEnum());\n  }\n  if (ModelUtils.isMapSchema(schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    m.isMapModel=true;\n  }\n else   if (ModelUtils.isIntegerSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isLongSchema(schema)) {\n      m.isLong=Boolean.TRUE;\n    }\n else {\n      m.isInteger=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isStringSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isString=Boolean.TRUE;\n  }\n else   if (ModelUtils.isNumberSchema(schema)) {\n    ModelUtils.syncValidationProperties(schema,m);\n    m.isNumeric=Boolean.TRUE;\n    if (ModelUtils.isFloatSchema(schema)) {\n      m.isFloat=Boolean.TRUE;\n    }\n else     if (ModelUtils.isDoubleSchema(schema)) {\n      m.isDouble=Boolean.TRUE;\n    }\n else {\n      m.isNumber=Boolean.TRUE;\n    }\n  }\n else   if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n    addAdditionPropertiesToCodeGenModel(m,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n  if (Boolean.TRUE.equals(schema.getNullable())) {\n    m.isNullable=Boolean.TRUE;\n  }\n  addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 1070,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 2546,
        "startColumnNumber" : 16,
        "endLineNumber" : 2546,
        "endColumnNumber" : 44
      },
      "nodeContext" : "m.isNullable=Boolean.TRUE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  }, {
    "nodeContext" : "Boolean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 2593,
      "startColumnNumber" : 16,
      "endLineNumber" : 2593,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 2593,
        "startColumnNumber" : 16,
        "endLineNumber" : 2593,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Boolean.TRUE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 2593,
        "startColumnNumber" : 16,
        "endLineNumber" : 2593,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Boolean.TRUE.equals(schema.getAdditionalProperties())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 2593,
        "startColumnNumber" : 12,
        "endLineNumber" : 2597,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n  m.isAdditionalPropertiesTrue=true;\n}\n else {\n  m.isAdditionalPropertiesTrue=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 2592,
        "startColumnNumber" : 72,
        "endLineNumber" : 2598,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n    m.isAdditionalPropertiesTrue=true;\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 2592,
        "startColumnNumber" : 15,
        "endLineNumber" : 2600,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema.getAdditionalProperties() instanceof Boolean) {\n  if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n    m.isAdditionalPropertiesTrue=true;\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n}\n else {\n  m.isAdditionalPropertiesTrue=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 2586,
        "startColumnNumber" : 8,
        "endLineNumber" : 2600,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (schema.getAdditionalProperties() == null) {\n  if (disallowAdditionalPropertiesIfNotPresent) {\n    m.isAdditionalPropertiesTrue=false;\n  }\n else {\n    m.isAdditionalPropertiesTrue=true;\n  }\n}\n else if (schema.getAdditionalProperties() instanceof Boolean) {\n  if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n    m.isAdditionalPropertiesTrue=true;\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n}\n else {\n  m.isAdditionalPropertiesTrue=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18137,
        "startLineNumber" : 2259,
        "startColumnNumber" : 62,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1635,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18392,
        "startLineNumber" : 2252,
        "startColumnNumber" : 4,
        "endLineNumber" : 2615,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Convert OAS Model object to Codegen Model object.\n * @param name   the name of the model\n * @param schema OAS Model object\n * @return Codegen Model object\n */\npublic CodegenModel fromModel(String name,Schema schema){\n  Map<String,Schema> allDefinitions=ModelUtils.getSchemas(this.openAPI);\n  if (typeAliases == null) {\n    typeAliases=getAllAliases(allDefinitions);\n  }\n  schema=unaliasSchema(schema,importMapping);\n  if (schema == null) {\n    LOGGER.warn(\"Schema {} not found\",name);\n    return null;\n  }\n  CodegenModel m=CodegenModelFactory.newInstance(CodegenModelType.MODEL);\n  if (reservedWords.contains(name)) {\n    m.name=escapeReservedWord(name);\n  }\n else {\n    m.name=name;\n  }\n  m.title=escapeText(schema.getTitle());\n  m.description=escapeText(schema.getDescription());\n  m.unescapedDescription=schema.getDescription();\n  m.classname=toModelName(name);\n  m.classVarName=toVarName(name);\n  m.classFilename=toModelFilename(name);\n  m.modelJson=Json.pretty(schema);\n  m.externalDocumentation=schema.getExternalDocs();\n  if (schema.getExtensions() != null && !schema.getExtensions().isEmpty()) {\n    m.getVendorExtensions().putAll(schema.getExtensions());\n  }\n  m.isAlias=(typeAliases.containsKey(name) || isAliasOfSimpleTypes(schema));\n  m.discriminator=createDiscriminator(name,schema,this.openAPI);\n  if (!this.getLegacyDiscriminatorBehavior()) {\n    m.addDiscriminatorMappedModelsImports();\n  }\n  if (schema.getDeprecated() != null) {\n    m.isDeprecated=schema.getDeprecated();\n  }\n  if (schema.getXml() != null) {\n    m.xmlPrefix=schema.getXml().getPrefix();\n    m.xmlNamespace=schema.getXml().getNamespace();\n    m.xmlName=schema.getXml().getName();\n  }\n  if (isAnyTypeSchema(schema)) {\n    if (Boolean.FALSE.equals(schema.getNullable())) {\n      LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\",name);\n    }\n    m.isNullable=true;\n  }\n  if (ModelUtils.isArraySchema(schema)) {\n    m.isArrayModel=true;\n    CodegenProperty arrayProperty=fromProperty(name,schema);\n    m.setItems(arrayProperty.items);\n    m.arrayModelType=arrayProperty.complexType;\n    addParentContainer(m,name,schema);\n    ModelUtils.syncValidationProperties(schema,m);\n  }\n else   if (schema instanceof ComposedSchema) {\n    final ComposedSchema composed=(ComposedSchema)schema;\n    Map<String,Schema> properties=new LinkedHashMap<String,Schema>();\n    List<String> required=new ArrayList<String>();\n    Map<String,Schema> allProperties=new LinkedHashMap<String,Schema>();\n    List<String> allRequired=new ArrayList<String>();\n    if (composed.getProperties() != null && !composed.getProperties().isEmpty()) {\n      if (composed.getOneOf() != null && !composed.getOneOf().isEmpty()) {\n        LOGGER.warn(\"'oneOf' is intended to include only the additional optional OAS extension discriminator object. \" + \"For more details, see https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.9.2.1.3 and the OAS section on 'Composition and Inheritance'.\");\n      }\n      addVars(m,unaliasPropertySchema(composed.getProperties()),composed.getRequired(),null,null);\n    }\n    final String parentName=ModelUtils.getParentName(composed,allDefinitions);\n    final List<String> allParents=ModelUtils.getAllParentsName(composed,allDefinitions,false);\n    final Schema parent=StringUtils.isBlank(parentName) || allDefinitions == null ? null : allDefinitions.get(parentName);\n    if (supportsInheritance || supportsMixins) {\n      m.allVars=new ArrayList<CodegenProperty>();\n      if (composed.getAllOf() != null) {\n        int modelImplCnt=0;\n        int modelDiscriminators=0;\n        for (        Schema innerSchema : composed.getAllOf()) {\n          if (m.discriminator == null && innerSchema.getDiscriminator() != null) {\n            LOGGER.debug(\"discriminator is set to null (not correctly set earlier): {}\",name);\n            m.discriminator=createDiscriminator(name,innerSchema,this.openAPI);\n            if (!this.getLegacyDiscriminatorBehavior()) {\n              m.addDiscriminatorMappedModelsImports();\n            }\n            modelDiscriminators++;\n          }\n          if (innerSchema.getXml() != null) {\n            m.xmlPrefix=innerSchema.getXml().getPrefix();\n            m.xmlNamespace=innerSchema.getXml().getNamespace();\n            m.xmlName=innerSchema.getXml().getName();\n          }\n          if (modelDiscriminators > 1) {\n            LOGGER.error(\"Allof composed schema is inheriting >1 discriminator. Only use one discriminator: {}\",composed);\n          }\n          if (modelImplCnt++ > 1) {\n            LOGGER.warn(\"More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.\");\n            break;\n          }\n        }\n      }\n    }\n    List<Schema> interfaces=ModelUtils.getInterfaces(composed);\n    if (!interfaces.isEmpty()) {\n      if (m.interfaces == null)       m.interfaces=new ArrayList<String>();\n      for (      Schema interfaceSchema : interfaces) {\n        interfaceSchema=unaliasSchema(interfaceSchema,importMapping);\n        if (StringUtils.isBlank(interfaceSchema.get$ref())) {\n          String languageType=getTypeDeclaration(interfaceSchema);\n          if (composed.getAnyOf() != null) {\n            if (m.anyOf.contains(languageType)) {\n              LOGGER.warn(\"{} (anyOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.anyOf.add(languageType);\n            }\n          }\n else           if (composed.getOneOf() != null) {\n            if (m.oneOf.contains(languageType)) {\n              LOGGER.warn(\"{} (oneOf schema) already has `{}` defined and therefore it's skipped.\",m.name,languageType);\n            }\n else {\n              m.oneOf.add(languageType);\n            }\n          }\n else           if (composed.getAllOf() != null) {\n          }\n else {\n            LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n          }\n          continue;\n        }\n        Schema refSchema=null;\n        String ref=ModelUtils.getSimpleRef(interfaceSchema.get$ref());\n        if (allDefinitions != null) {\n          refSchema=allDefinitions.get(ref);\n        }\n        final String modelName=toModelName(ref);\n        m.interfaces.add(modelName);\n        addImport(m,modelName);\n        if (allDefinitions != null && refSchema != null) {\n          if (allParents.contains(ref) && supportsMultipleInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else           if (parentName != null && parentName.equals(ref) && supportsInheritance) {\n            addProperties(allProperties,allRequired,refSchema);\n          }\n else {\n            addProperties(properties,required,refSchema);\n            addProperties(allProperties,allRequired,refSchema);\n          }\n        }\n        if (composed.getAnyOf() != null) {\n          m.anyOf.add(modelName);\n        }\n else         if (composed.getOneOf() != null) {\n          m.oneOf.add(modelName);\n        }\n else         if (composed.getAllOf() != null) {\n          m.allOf.add(modelName);\n        }\n else {\n          LOGGER.error(\"Composed schema has incorrect anyOf, allOf, oneOf defined: {}\",composed);\n        }\n      }\n    }\n    if (parent != null && composed.getAllOf() != null) {\n      m.parentSchema=parentName;\n      m.parent=toModelName(parentName);\n      if (supportsMultipleInheritance) {\n        m.allParents=new ArrayList<String>();\n        for (        String pname : allParents) {\n          String pModelName=toModelName(pname);\n          m.allParents.add(pModelName);\n          addImport(m,pModelName);\n        }\n      }\n else {\n        addImport(m,m.parent);\n      }\n    }\n    for (    Schema component : interfaces) {\n      if (component.get$ref() == null) {\n        if (component != null) {\n          addProperties(properties,required,component);\n          addProperties(allProperties,allRequired,component);\n        }\n        break;\n      }\n    }\n    if (composed.getRequired() != null) {\n      required.addAll(composed.getRequired());\n      allRequired.addAll(composed.getRequired());\n    }\n    addVars(m,unaliasPropertySchema(properties),required,unaliasPropertySchema(allProperties),allRequired);\n    if (supportsAdditionalPropertiesWithComposedSchema) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n  }\n else {\n    m.dataType=getSchemaType(schema);\n    if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n      m.isEnum=true;\n      m.allowableValues=new HashMap<String,Object>();\n      m.allowableValues.put(\"values\",schema.getEnum());\n    }\n    if (ModelUtils.isMapSchema(schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      m.isMapModel=true;\n    }\n else     if (ModelUtils.isIntegerSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isLongSchema(schema)) {\n        m.isLong=Boolean.TRUE;\n      }\n else {\n        m.isInteger=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isStringSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isString=Boolean.TRUE;\n    }\n else     if (ModelUtils.isNumberSchema(schema)) {\n      ModelUtils.syncValidationProperties(schema,m);\n      m.isNumeric=Boolean.TRUE;\n      if (ModelUtils.isFloatSchema(schema)) {\n        m.isFloat=Boolean.TRUE;\n      }\n else       if (ModelUtils.isDoubleSchema(schema)) {\n        m.isDouble=Boolean.TRUE;\n      }\n else {\n        m.isNumber=Boolean.TRUE;\n      }\n    }\n else     if (ModelUtils.isFreeFormObject(openAPI,schema)) {\n      addAdditionPropertiesToCodeGenModel(m,schema);\n      ModelUtils.syncValidationProperties(schema,m);\n    }\n    if (Boolean.TRUE.equals(schema.getNullable())) {\n      m.isNullable=Boolean.TRUE;\n    }\n    addVars(m,unaliasPropertySchema(schema.getProperties()),schema.getRequired(),null,null);\n  }\n  m.removeAllDuplicatedProperty();\n  if (m.discriminator != null) {\n    String discPropName=m.discriminator.getPropertyBaseName();\n    List<List<CodegenProperty>> listOLists=new ArrayList<List<CodegenProperty>>();\n    listOLists.add(m.requiredVars);\n    listOLists.add(m.vars);\n    listOLists.add(m.allVars);\n    for (    List<CodegenProperty> theseVars : listOLists) {\n      for (      CodegenProperty requiredVar : theseVars) {\n        if (discPropName.equals(requiredVar.baseName)) {\n          requiredVar.isDiscriminator=true;\n        }\n      }\n    }\n  }\n  if (sortModelPropertiesByRequiredFlag) {\n    Comparator<CodegenProperty> comparator=new Comparator<CodegenProperty>(){\n      @Override public int compare(      CodegenProperty one,      CodegenProperty another){\n        if (one.required == another.required)         return 0;\n else         if (one.required)         return -1;\n else         return 1;\n      }\n    }\n;\n    Collections.sort(m.vars,comparator);\n    Collections.sort(m.allVars,comparator);\n  }\n  if (schema.getAdditionalProperties() == null) {\n    if (disallowAdditionalPropertiesIfNotPresent) {\n      m.isAdditionalPropertiesTrue=false;\n    }\n else {\n      m.isAdditionalPropertiesTrue=true;\n    }\n  }\n else   if (schema.getAdditionalProperties() instanceof Boolean) {\n    if (Boolean.TRUE.equals(schema.getAdditionalProperties())) {\n      m.isAdditionalPropertiesTrue=true;\n    }\n else {\n      m.isAdditionalPropertiesTrue=false;\n    }\n  }\n else {\n    m.isAdditionalPropertiesTrue=false;\n  }\n  if (m.vars != null) {\n    for (    CodegenProperty prop : m.vars) {\n      postProcessModelProperty(m,prop);\n    }\n    m.hasVars=m.vars.size() > 0;\n  }\n  if (m.allVars != null) {\n    for (    CodegenProperty prop : m.allVars) {\n      postProcessModelProperty(m,prop);\n    }\n  }\n  return m;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1649,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 2593,
        "startColumnNumber" : 16,
        "endLineNumber" : 2593,
        "endColumnNumber" : 69
      },
      "nodeContext" : "Boolean.TRUE.equals(schema.getAdditionalProperties())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Boolean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 2310,
    "startColumnNumber" : 16,
    "endLineNumber" : 2310,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 2497,
    "startColumnNumber" : 16,
    "endLineNumber" : 2497,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 2498,
    "startColumnNumber" : 31,
    "endLineNumber" : 2498,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 2517,
    "startColumnNumber" : 30,
    "endLineNumber" : 2517,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 2519,
    "startColumnNumber" : 31,
    "endLineNumber" : 2519,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 2521,
    "startColumnNumber" : 34,
    "endLineNumber" : 2521,
    "endColumnNumber" : 41
  }, {
    "charLength" : 7,
    "startLineNumber" : 2527,
    "startColumnNumber" : 29,
    "endLineNumber" : 2527,
    "endColumnNumber" : 36
  }, {
    "charLength" : 7,
    "startLineNumber" : 2532,
    "startColumnNumber" : 30,
    "endLineNumber" : 2532,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 2534,
    "startColumnNumber" : 32,
    "endLineNumber" : 2534,
    "endColumnNumber" : 39
  }, {
    "charLength" : 7,
    "startLineNumber" : 2536,
    "startColumnNumber" : 33,
    "endLineNumber" : 2536,
    "endColumnNumber" : 40
  }, {
    "charLength" : 7,
    "startLineNumber" : 2538,
    "startColumnNumber" : 33,
    "endLineNumber" : 2538,
    "endColumnNumber" : 40
  }, {
    "charLength" : 7,
    "startLineNumber" : 2545,
    "startColumnNumber" : 16,
    "endLineNumber" : 2545,
    "endColumnNumber" : 23
  }, {
    "charLength" : 7,
    "startLineNumber" : 2546,
    "startColumnNumber" : 31,
    "endLineNumber" : 2546,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 2593,
    "startColumnNumber" : 16,
    "endLineNumber" : 2593,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 14
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 14
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 6
  } ]
}