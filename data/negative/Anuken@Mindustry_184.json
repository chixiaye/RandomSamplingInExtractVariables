{
  "id" : 184,
  "expression" : "cont",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/ui/dialogs/LaunchLoadoutDialog.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 34,
      "startColumnNumber" : 8,
      "endLineNumber" : 34,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 20
      },
      "nodeContext" : "cont.clear()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 21
      },
      "nodeContext" : "cont.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 34,
        "endColumnNumber" : 21
      },
      "nodeContext" : "cont.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 111,
      "startColumnNumber" : 8,
      "endLineNumber" : 111,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 66
      },
      "nodeContext" : "cont.add(Core.bundle.format(\"launch.from\",sector.name()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 72
      },
      "nodeContext" : "cont.add(Core.bundle.format(\"launch.from\",sector.name())).row()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 73
      },
      "nodeContext" : "cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 73
      },
      "nodeContext" : "cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 113,
      "startColumnNumber" : 8,
      "endLineNumber" : 113,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 10
      },
      "nodeContext" : "cont.pane(t -> {\n  int i=0;\n  for (  var entry : schematics.getLoadouts()) {\n    if (entry.key.size <= core.size) {\n      for (      Schematic s : entry.value) {\n        t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n          selected=s;\n          update.run();\n          rebuildItems.run();\n        }\n).group(group).pad(4).checked(s == selected).size(200f);\n        if (++i % cols == 0) {\n          t.row();\n        }\n      }\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 98,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 18
      },
      "nodeContext" : "cont.pane(t -> {\n  int i=0;\n  for (  var entry : schematics.getLoadouts()) {\n    if (entry.key.size <= core.size) {\n      for (      Schematic s : entry.value) {\n        t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n          selected=s;\n          update.run();\n          rebuildItems.run();\n        }\n).group(group).pad(4).checked(s == selected).size(200f);\n        if (++i % cols == 0) {\n          t.row();\n        }\n      }\n    }\n  }\n}\n).growX()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 100,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 693,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 24
      },
      "nodeContext" : "cont.pane(t -> {\n  int i=0;\n  for (  var entry : schematics.getLoadouts()) {\n    if (entry.key.size <= core.size) {\n      for (      Schematic s : entry.value) {\n        t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n          selected=s;\n          update.run();\n          rebuildItems.run();\n        }\n).group(group).pad(4).checked(s == selected).size(200f);\n        if (++i % cols == 0) {\n          t.row();\n        }\n      }\n    }\n  }\n}\n).growX().get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 102,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 58
      },
      "nodeContext" : "cont.pane(t -> {\n  int i=0;\n  for (  var entry : schematics.getLoadouts()) {\n    if (entry.key.size <= core.size) {\n      for (      Schematic s : entry.value) {\n        t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n          selected=s;\n          update.run();\n          rebuildItems.run();\n        }\n).group(group).pad(4).checked(s == selected).size(200f);\n        if (++i % cols == 0) {\n          t.row();\n        }\n      }\n    }\n  }\n}\n).growX().get().setScrollingDisabled(true,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 106,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 728,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 59
      },
      "nodeContext" : "cont.pane(t -> {\n  int i=0;\n  for (  var entry : schematics.getLoadouts()) {\n    if (entry.key.size <= core.size) {\n      for (      Schematic s : entry.value) {\n        t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n          selected=s;\n          update.run();\n          rebuildItems.run();\n        }\n).group(group).pad(4).checked(s == selected).size(200f);\n        if (++i % cols == 0) {\n          t.row();\n        }\n      }\n    }\n  }\n}\n).growX().get().setScrollingDisabled(true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 107,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 10
      },
      "nodeContext" : "cont.pane(t -> {\n  int i=0;\n  for (  var entry : schematics.getLoadouts()) {\n    if (entry.key.size <= core.size) {\n      for (      Schematic s : entry.value) {\n        t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n          selected=s;\n          update.run();\n          rebuildItems.run();\n        }\n).group(group).pad(4).checked(s == selected).size(200f);\n        if (++i % cols == 0) {\n          t.row();\n        }\n      }\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 98,
      "astHeight" : 20
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 136,
      "startColumnNumber" : 8,
      "endLineNumber" : 136,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 18
      },
      "nodeContext" : "cont.row()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cont.row();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cont.row();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 137,
      "startColumnNumber" : 8,
      "endLineNumber" : 137,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 24
      },
      "nodeContext" : "cont.pane(items)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 25
      },
      "nodeContext" : "cont.pane(items);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 25
      },
      "nodeContext" : "cont.pane(items);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 138,
      "startColumnNumber" : 8,
      "endLineNumber" : 138,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 18
      },
      "nodeContext" : "cont.row()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cont.row();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 138,
        "endColumnNumber" : 19
      },
      "nodeContext" : "cont.row();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "cont",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 139,
      "startColumnNumber" : 8,
      "endLineNumber" : 139,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 44
      },
      "nodeContext" : "cont.add(\"@sector.missingresources\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 66
      },
      "nodeContext" : "cont.add(\"@sector.missingresources\").visible(() -> !valid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 67
      },
      "nodeContext" : "cont.add(\"@sector.missingresources\").visible(() -> !valid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 33,
        "startColumnNumber" : 69,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3820,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void show(CoreBlock core,Sector sector,Runnable confirm){\n  cont.clear();\n  buttons.clear();\n  buttons.defaults().size(160f,64f);\n  buttons.button(\"@back\",Icon.left,this::hide);\n  addCloseListener();\n  ItemSeq sitems=sector.items();\n  Runnable update=() -> {\n    int cap=selected.findCore().itemCapacity;\n    ItemSeq resources=universe.getLaunchResources();\n    resources.min(cap);\n    universe.updateLaunchResources(resources);\n    total.clear();\n    selected.requirements().each(total::add);\n    universe.getLaunchResources().each(total::add);\n    valid=sitems.has(total);\n  }\n;\n  Cons<Table> rebuild=table -> {\n    table.clearChildren();\n    int i=0;\n    ItemSeq schems=selected.requirements();\n    ItemSeq launches=universe.getLaunchResources();\n    for (    ItemStack s : total) {\n      table.image(s.item.icon(Cicon.small)).left().size(Cicon.small.size);\n      int as=schems.get(s.item), al=launches.get(s.item);\n      String amountStr=(al + as) + \"[gray] (\" + (al + \" + \" + as+ \")\");\n      table.add(sitems.has(s.item,s.amount) ? amountStr : \"[scarlet]\" + (Math.min(sitems.get(s.item),s.amount) + \"[lightgray]/\" + amountStr)).padLeft(2).left().padRight(4);\n      if (++i % 4 == 0) {\n        table.row();\n      }\n    }\n  }\n;\n  Table items=new Table();\n  Runnable rebuildItems=() -> rebuild.get(items);\n  buttons.button(\"@resources\",Icon.terrain,() -> {\n    ItemSeq stacks=universe.getLaunchResources();\n    Seq<ItemStack> out=stacks.toSeq();\n    ItemSeq realItems=sitems.copy();\n    selected.requirements().each(realItems::remove);\n    loadout.show(selected.findCore().itemCapacity,realItems,out,UnlockableContent::unlocked,out::clear,() -> {\n    }\n,() -> {\n      universe.updateLaunchResources(new ItemSeq(out));\n      update.run();\n      rebuildItems.run();\n    }\n);\n  }\n).width(204);\n  buttons.button(\"@launch.text\",Icon.ok,() -> {\n    universe.updateLoadout(core,selected);\n    confirm.run();\n    hide();\n  }\n).disabled(b -> !valid);\n  int cols=Math.max((int)(Core.graphics.getWidth() / Scl.scl(230)),1);\n  ButtonGroup<Button> group=new ButtonGroup<>();\n  selected=universe.getLoadout(core);\n  if (selected == null)   selected=schematics.getLoadouts().get((CoreBlock)Blocks.coreShard).first();\n  cont.add(Core.bundle.format(\"launch.from\",sector.name())).row();\n  cont.pane(t -> {\n    int i=0;\n    for (    var entry : schematics.getLoadouts()) {\n      if (entry.key.size <= core.size) {\n        for (        Schematic s : entry.value) {\n          t.button(b -> b.add(new SchematicImage(s)),Styles.togglet,() -> {\n            selected=s;\n            update.run();\n            rebuildItems.run();\n          }\n).group(group).pad(4).checked(s == selected).size(200f);\n          if (++i % cols == 0) {\n            t.row();\n          }\n        }\n      }\n    }\n  }\n).growX().get().setScrollingDisabled(true,false);\n  cont.row();\n  cont.pane(items);\n  cont.row();\n  cont.add(\"@sector.missingresources\").visible(() -> !valid);\n  update.run();\n  rebuildItems.run();\n  show();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 621,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 139,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 67
      },
      "nodeContext" : "cont.add(\"@sector.missingresources\").visible(() -> !valid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 34,
    "startColumnNumber" : 8,
    "endLineNumber" : 34,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 111,
    "startColumnNumber" : 8,
    "endLineNumber" : 111,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 113,
    "startColumnNumber" : 8,
    "endLineNumber" : 113,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 136,
    "startColumnNumber" : 8,
    "endLineNumber" : 136,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 137,
    "startColumnNumber" : 8,
    "endLineNumber" : 137,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 138,
    "startColumnNumber" : 8,
    "endLineNumber" : 138,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 139,
    "startColumnNumber" : 8,
    "endLineNumber" : 139,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  } ]
}