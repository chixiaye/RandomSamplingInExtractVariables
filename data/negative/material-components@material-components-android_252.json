{
  "id" : 252,
  "expression" : "inactiveWidth * inactiveCount",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/bottomnavigation/BottomNavigationMenuView.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inactiveWidth * inactiveCount",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 153,
      "startColumnNumber" : 40,
      "endLineNumber" : 153,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 153,
        "startColumnNumber" : 18,
        "endLineNumber" : 153,
        "endColumnNumber" : 69
      },
      "nodeContext" : "width - activeWidth - inactiveWidth * inactiveCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 153,
        "startColumnNumber" : 10,
        "endLineNumber" : 153,
        "endColumnNumber" : 69
      },
      "nodeContext" : "extra=width - activeWidth - inactiveWidth * inactiveCount",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 70
      },
      "nodeContext" : "int extra=width - activeWidth - inactiveWidth * inactiveCount;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 136,
        "startColumnNumber" : 91,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final View activeChild=getChildAt(selectedItemPosition);\n  int activeItemWidth=activeItemMinWidth;\n  if (activeChild.getVisibility() != View.GONE) {\n    activeChild.measure(MeasureSpec.makeMeasureSpec(activeItemMaxWidth,MeasureSpec.AT_MOST),heightSpec);\n    activeItemWidth=Math.max(activeItemWidth,activeChild.getMeasuredWidth());\n  }\n  final int inactiveCount=visibleCount - (activeChild.getVisibility() != View.GONE ? 1 : 0);\n  final int activeMaxAvailable=width - inactiveCount * inactiveItemMinWidth;\n  final int activeWidth=Math.min(activeMaxAvailable,Math.min(activeItemWidth,activeItemMaxWidth));\n  final int inactiveMaxAvailable=(width - activeWidth) / (inactiveCount == 0 ? 1 : inactiveCount);\n  final int inactiveWidth=Math.min(inactiveMaxAvailable,inactiveItemMaxWidth);\n  int extra=width - activeWidth - inactiveWidth * inactiveCount;\n  for (int i=0; i < totalCount; i++) {\n    if (getChildAt(i).getVisibility() != View.GONE) {\n      tempChildWidths[i]=(i == selectedItemPosition) ? activeWidth : inactiveWidth;\n      if (extra > 0) {\n        tempChildWidths[i]++;\n        extra--;\n      }\n    }\n else {\n      tempChildWidths[i]=0;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2333,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isShifting(labelVisibilityMode,visibleCount) && itemHorizontalTranslationEnabled) {\n  final View activeChild=getChildAt(selectedItemPosition);\n  int activeItemWidth=activeItemMinWidth;\n  if (activeChild.getVisibility() != View.GONE) {\n    activeChild.measure(MeasureSpec.makeMeasureSpec(activeItemMaxWidth,MeasureSpec.AT_MOST),heightSpec);\n    activeItemWidth=Math.max(activeItemWidth,activeChild.getMeasuredWidth());\n  }\n  final int inactiveCount=visibleCount - (activeChild.getVisibility() != View.GONE ? 1 : 0);\n  final int activeMaxAvailable=width - inactiveCount * inactiveItemMinWidth;\n  final int activeWidth=Math.min(activeMaxAvailable,Math.min(activeItemWidth,activeItemMaxWidth));\n  final int inactiveMaxAvailable=(width - activeWidth) / (inactiveCount == 0 ? 1 : inactiveCount);\n  final int inactiveWidth=Math.min(inactiveMaxAvailable,inactiveItemMaxWidth);\n  int extra=width - activeWidth - inactiveWidth * inactiveCount;\n  for (int i=0; i < totalCount; i++) {\n    if (getChildAt(i).getVisibility() != View.GONE) {\n      tempChildWidths[i]=(i == selectedItemPosition) ? activeWidth : inactiveWidth;\n      if (extra > 0) {\n        tempChildWidths[i]++;\n        extra--;\n      }\n    }\n else {\n      tempChildWidths[i]=0;\n    }\n  }\n}\n else {\n  final int maxAvailable=width / (visibleCount == 0 ? 1 : visibleCount);\n  final int childWidth=Math.min(maxAvailable,activeItemMaxWidth);\n  int extra=width - childWidth * visibleCount;\n  for (int i=0; i < totalCount; i++) {\n    if (getChildAt(i).getVisibility() != View.GONE) {\n      tempChildWidths[i]=childWidth;\n      if (extra > 0) {\n        tempChildWidths[i]++;\n        extra--;\n      }\n    }\n else {\n      tempChildWidths[i]=0;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 270,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3363,
        "startLineNumber" : 127,
        "startColumnNumber" : 72,
        "endLineNumber" : 202,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int width=MeasureSpec.getSize(widthMeasureSpec);\n  final int visibleCount=menu.getVisibleItems().size();\n  final int totalCount=getChildCount();\n  final int heightSpec=MeasureSpec.makeMeasureSpec(itemHeight,MeasureSpec.EXACTLY);\n  if (isShifting(labelVisibilityMode,visibleCount) && itemHorizontalTranslationEnabled) {\n    final View activeChild=getChildAt(selectedItemPosition);\n    int activeItemWidth=activeItemMinWidth;\n    if (activeChild.getVisibility() != View.GONE) {\n      activeChild.measure(MeasureSpec.makeMeasureSpec(activeItemMaxWidth,MeasureSpec.AT_MOST),heightSpec);\n      activeItemWidth=Math.max(activeItemWidth,activeChild.getMeasuredWidth());\n    }\n    final int inactiveCount=visibleCount - (activeChild.getVisibility() != View.GONE ? 1 : 0);\n    final int activeMaxAvailable=width - inactiveCount * inactiveItemMinWidth;\n    final int activeWidth=Math.min(activeMaxAvailable,Math.min(activeItemWidth,activeItemMaxWidth));\n    final int inactiveMaxAvailable=(width - activeWidth) / (inactiveCount == 0 ? 1 : inactiveCount);\n    final int inactiveWidth=Math.min(inactiveMaxAvailable,inactiveItemMaxWidth);\n    int extra=width - activeWidth - inactiveWidth * inactiveCount;\n    for (int i=0; i < totalCount; i++) {\n      if (getChildAt(i).getVisibility() != View.GONE) {\n        tempChildWidths[i]=(i == selectedItemPosition) ? activeWidth : inactiveWidth;\n        if (extra > 0) {\n          tempChildWidths[i]++;\n          extra--;\n        }\n      }\n else {\n        tempChildWidths[i]=0;\n      }\n    }\n  }\n else {\n    final int maxAvailable=width / (visibleCount == 0 ? 1 : visibleCount);\n    final int childWidth=Math.min(maxAvailable,activeItemMaxWidth);\n    int extra=width - childWidth * visibleCount;\n    for (int i=0; i < totalCount; i++) {\n      if (getChildAt(i).getVisibility() != View.GONE) {\n        tempChildWidths[i]=childWidth;\n        if (extra > 0) {\n          tempChildWidths[i]++;\n          extra--;\n        }\n      }\n else {\n        tempChildWidths[i]=0;\n      }\n    }\n  }\n  int totalWidth=0;\n  for (int i=0; i < totalCount; i++) {\n    final View child=getChildAt(i);\n    if (child.getVisibility() == GONE) {\n      continue;\n    }\n    child.measure(MeasureSpec.makeMeasureSpec(tempChildWidths[i],MeasureSpec.EXACTLY),heightSpec);\n    ViewGroup.LayoutParams params=child.getLayoutParams();\n    params.width=child.getMeasuredWidth();\n    totalWidth+=child.getMeasuredWidth();\n  }\n  setMeasuredDimension(View.resolveSizeAndState(totalWidth,MeasureSpec.makeMeasureSpec(totalWidth,MeasureSpec.EXACTLY),0),View.resolveSizeAndState(itemHeight,heightSpec,0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 402,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3445,
        "startLineNumber" : 126,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  final int width=MeasureSpec.getSize(widthMeasureSpec);\n  final int visibleCount=menu.getVisibleItems().size();\n  final int totalCount=getChildCount();\n  final int heightSpec=MeasureSpec.makeMeasureSpec(itemHeight,MeasureSpec.EXACTLY);\n  if (isShifting(labelVisibilityMode,visibleCount) && itemHorizontalTranslationEnabled) {\n    final View activeChild=getChildAt(selectedItemPosition);\n    int activeItemWidth=activeItemMinWidth;\n    if (activeChild.getVisibility() != View.GONE) {\n      activeChild.measure(MeasureSpec.makeMeasureSpec(activeItemMaxWidth,MeasureSpec.AT_MOST),heightSpec);\n      activeItemWidth=Math.max(activeItemWidth,activeChild.getMeasuredWidth());\n    }\n    final int inactiveCount=visibleCount - (activeChild.getVisibility() != View.GONE ? 1 : 0);\n    final int activeMaxAvailable=width - inactiveCount * inactiveItemMinWidth;\n    final int activeWidth=Math.min(activeMaxAvailable,Math.min(activeItemWidth,activeItemMaxWidth));\n    final int inactiveMaxAvailable=(width - activeWidth) / (inactiveCount == 0 ? 1 : inactiveCount);\n    final int inactiveWidth=Math.min(inactiveMaxAvailable,inactiveItemMaxWidth);\n    int extra=width - activeWidth - inactiveWidth * inactiveCount;\n    for (int i=0; i < totalCount; i++) {\n      if (getChildAt(i).getVisibility() != View.GONE) {\n        tempChildWidths[i]=(i == selectedItemPosition) ? activeWidth : inactiveWidth;\n        if (extra > 0) {\n          tempChildWidths[i]++;\n          extra--;\n        }\n      }\n else {\n        tempChildWidths[i]=0;\n      }\n    }\n  }\n else {\n    final int maxAvailable=width / (visibleCount == 0 ? 1 : visibleCount);\n    final int childWidth=Math.min(maxAvailable,activeItemMaxWidth);\n    int extra=width - childWidth * visibleCount;\n    for (int i=0; i < totalCount; i++) {\n      if (getChildAt(i).getVisibility() != View.GONE) {\n        tempChildWidths[i]=childWidth;\n        if (extra > 0) {\n          tempChildWidths[i]++;\n          extra--;\n        }\n      }\n else {\n        tempChildWidths[i]=0;\n      }\n    }\n  }\n  int totalWidth=0;\n  for (int i=0; i < totalCount; i++) {\n    final View child=getChildAt(i);\n    if (child.getVisibility() == GONE) {\n      continue;\n    }\n    child.measure(MeasureSpec.makeMeasureSpec(tempChildWidths[i],MeasureSpec.EXACTLY),heightSpec);\n    ViewGroup.LayoutParams params=child.getLayoutParams();\n    params.width=child.getMeasuredWidth();\n    totalWidth+=child.getMeasuredWidth();\n  }\n  setMeasuredDimension(View.resolveSizeAndState(totalWidth,MeasureSpec.makeMeasureSpec(totalWidth,MeasureSpec.EXACTLY),0),View.resolveSizeAndState(itemHeight,heightSpec,0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 153,
        "startColumnNumber" : 6,
        "endLineNumber" : 153,
        "endColumnNumber" : 70
      },
      "nodeContext" : "int extra=width - activeWidth - inactiveWidth * inactiveCount;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 153,
    "startColumnNumber" : 40,
    "endLineNumber" : 153,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}