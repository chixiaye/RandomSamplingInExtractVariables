{
  "id" : 145,
  "expression" : "(viewHeight - height)",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Cells/ThemePreviewMessagesCell.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(viewHeight - height)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 198,
      "startColumnNumber" : 28,
      "endLineNumber" : 198,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 198,
        "startColumnNumber" : 28,
        "endLineNumber" : 198,
        "endColumnNumber" : 53
      },
      "nodeContext" : "(viewHeight - height) / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 198,
        "startColumnNumber" : 24,
        "endLineNumber" : 198,
        "endColumnNumber" : 53
      },
      "nodeContext" : "y=(viewHeight - height) / 2",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 198,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int y=(viewHeight - height) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 190,
        "startColumnNumber" : 23,
        "endLineNumber" : 202,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int viewHeight=getMeasuredHeight();\n  float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n  float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n  float scale=Math.max(scaleX,scaleY);\n  int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n  int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n  int x=(getMeasuredWidth() - width) / 2;\n  int y=(viewHeight - height) / 2;\n  canvas.save();\n  canvas.clipRect(0,0,width,getMeasuredHeight());\n  drawable.setBounds(x,y,x + width,y + height);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 202,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n  canvas.save();\n  float scale=2.0f / AndroidUtilities.density;\n  canvas.scale(scale,scale);\n  drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n}\n else {\n  int viewHeight=getMeasuredHeight();\n  float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n  float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n  float scale=Math.max(scaleX,scaleY);\n  int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n  int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n  int x=(getMeasuredWidth() - width) / 2;\n  int y=(viewHeight - height) / 2;\n  canvas.save();\n  canvas.clipRect(0,0,width,getMeasuredHeight());\n  drawable.setBounds(x,y,x + width,y + height);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 172,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1357,
        "startLineNumber" : 183,
        "startColumnNumber" : 59,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n    canvas.save();\n    float scale=2.0f / AndroidUtilities.density;\n    canvas.scale(scale,scale);\n    drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n  }\n else {\n    int viewHeight=getMeasuredHeight();\n    float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n    float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n    float scale=Math.max(scaleX,scaleY);\n    int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n    int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n    int x=(getMeasuredWidth() - width) / 2;\n    int y=(viewHeight - height) / 2;\n    canvas.save();\n    canvas.clipRect(0,0,width,getMeasuredHeight());\n    drawable.setBounds(x,y,x + width,y + height);\n  }\n  drawable.draw(canvas);\n  canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 191,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1397,
        "startLineNumber" : 183,
        "startColumnNumber" : 19,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n    canvas.save();\n    float scale=2.0f / AndroidUtilities.density;\n    canvas.scale(scale,scale);\n    drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n  }\n else {\n    int viewHeight=getMeasuredHeight();\n    float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n    float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n    float scale=Math.max(scaleX,scaleY);\n    int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n    int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n    int x=(getMeasuredWidth() - width) / 2;\n    int y=(viewHeight - height) / 2;\n    canvas.save();\n    canvas.clipRect(0,0,width,getMeasuredHeight());\n    drawable.setBounds(x,y,x + width,y + height);\n  }\n  drawable.draw(canvas);\n  canvas.restore();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 196,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1970,
        "startLineNumber" : 175,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (drawable instanceof ColorDrawable || drawable instanceof GradientDrawable) {\n  drawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n  if (drawable instanceof BackgroundGradientDrawable) {\n    final BackgroundGradientDrawable backgroundGradientDrawable=(BackgroundGradientDrawable)drawable;\n    backgroundGradientDisposable=backgroundGradientDrawable.drawExactBoundsSize(canvas,this);\n  }\n else {\n    drawable.draw(canvas);\n  }\n}\n else if (drawable instanceof BitmapDrawable) {\n  BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n  if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n    canvas.save();\n    float scale=2.0f / AndroidUtilities.density;\n    canvas.scale(scale,scale);\n    drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n  }\n else {\n    int viewHeight=getMeasuredHeight();\n    float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n    float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n    float scale=Math.max(scaleX,scaleY);\n    int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n    int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n    int x=(getMeasuredWidth() - width) / 2;\n    int y=(viewHeight - height) / 2;\n    canvas.save();\n    canvas.clipRect(0,0,width,getMeasuredHeight());\n    drawable.setBounds(x,y,x + width,y + height);\n  }\n  drawable.draw(canvas);\n  canvas.restore();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2767,
        "startLineNumber" : 165,
        "startColumnNumber" : 36,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Drawable drawable=a == 0 ? oldBackgroundDrawable : backgroundDrawable;\n  if (drawable == null) {\n    continue;\n  }\n  if (a == 1 && oldBackgroundDrawable != null && parentLayout != null) {\n    drawable.setAlpha((int)(255 * themeAnimationValue));\n  }\n else {\n    drawable.setAlpha(255);\n  }\n  if (drawable instanceof ColorDrawable || drawable instanceof GradientDrawable) {\n    drawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n    if (drawable instanceof BackgroundGradientDrawable) {\n      final BackgroundGradientDrawable backgroundGradientDrawable=(BackgroundGradientDrawable)drawable;\n      backgroundGradientDisposable=backgroundGradientDrawable.drawExactBoundsSize(canvas,this);\n    }\n else {\n      drawable.draw(canvas);\n    }\n  }\n else   if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n      canvas.save();\n      float scale=2.0f / AndroidUtilities.density;\n      canvas.scale(scale,scale);\n      drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n    }\n else {\n      int viewHeight=getMeasuredHeight();\n      float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n      float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n      float scale=Math.max(scaleX,scaleY);\n      int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n      int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n      int x=(getMeasuredWidth() - width) / 2;\n      int y=(viewHeight - height) / 2;\n      canvas.save();\n      canvas.clipRect(0,0,width,getMeasuredHeight());\n      drawable.setBounds(x,y,x + width,y + height);\n    }\n    drawable.draw(canvas);\n    canvas.restore();\n  }\n  if (a == 0 && oldBackgroundDrawable != null && themeAnimationValue >= 1.0f) {\n    if (oldBackgroundGradientDisposable != null) {\n      oldBackgroundGradientDisposable.dispose();\n      oldBackgroundGradientDisposable=null;\n    }\n    oldBackgroundDrawable=null;\n    invalidate();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 327,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2795,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int a=0; a < 2; a++) {\n  Drawable drawable=a == 0 ? oldBackgroundDrawable : backgroundDrawable;\n  if (drawable == null) {\n    continue;\n  }\n  if (a == 1 && oldBackgroundDrawable != null && parentLayout != null) {\n    drawable.setAlpha((int)(255 * themeAnimationValue));\n  }\n else {\n    drawable.setAlpha(255);\n  }\n  if (drawable instanceof ColorDrawable || drawable instanceof GradientDrawable) {\n    drawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n    if (drawable instanceof BackgroundGradientDrawable) {\n      final BackgroundGradientDrawable backgroundGradientDrawable=(BackgroundGradientDrawable)drawable;\n      backgroundGradientDisposable=backgroundGradientDrawable.drawExactBoundsSize(canvas,this);\n    }\n else {\n      drawable.draw(canvas);\n    }\n  }\n else   if (drawable instanceof BitmapDrawable) {\n    BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n    if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n      canvas.save();\n      float scale=2.0f / AndroidUtilities.density;\n      canvas.scale(scale,scale);\n      drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n    }\n else {\n      int viewHeight=getMeasuredHeight();\n      float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n      float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n      float scale=Math.max(scaleX,scaleY);\n      int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n      int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n      int x=(getMeasuredWidth() - width) / 2;\n      int y=(viewHeight - height) / 2;\n      canvas.save();\n      canvas.clipRect(0,0,width,getMeasuredHeight());\n      drawable.setBounds(x,y,x + width,y + height);\n    }\n    drawable.draw(canvas);\n    canvas.restore();\n  }\n  if (a == 0 && oldBackgroundDrawable != null && themeAnimationValue >= 1.0f) {\n    if (oldBackgroundGradientDisposable != null) {\n      oldBackgroundGradientDisposable.dispose();\n      oldBackgroundGradientDisposable=null;\n    }\n    oldBackgroundDrawable=null;\n    invalidate();\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 338,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3572,
        "startLineNumber" : 152,
        "startColumnNumber" : 41,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Drawable newDrawable=Theme.getCachedWallpaperNonBlocking();\n  if (newDrawable != backgroundDrawable && newDrawable != null) {\n    if (Theme.isAnimatingColor()) {\n      oldBackgroundDrawable=backgroundDrawable;\n      oldBackgroundGradientDisposable=backgroundGradientDisposable;\n    }\n else     if (backgroundGradientDisposable != null) {\n      backgroundGradientDisposable.dispose();\n      backgroundGradientDisposable=null;\n    }\n    backgroundDrawable=newDrawable;\n  }\n  float themeAnimationValue=parentLayout.getThemeAnimationValue();\n  for (int a=0; a < 2; a++) {\n    Drawable drawable=a == 0 ? oldBackgroundDrawable : backgroundDrawable;\n    if (drawable == null) {\n      continue;\n    }\n    if (a == 1 && oldBackgroundDrawable != null && parentLayout != null) {\n      drawable.setAlpha((int)(255 * themeAnimationValue));\n    }\n else {\n      drawable.setAlpha(255);\n    }\n    if (drawable instanceof ColorDrawable || drawable instanceof GradientDrawable) {\n      drawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n      if (drawable instanceof BackgroundGradientDrawable) {\n        final BackgroundGradientDrawable backgroundGradientDrawable=(BackgroundGradientDrawable)drawable;\n        backgroundGradientDisposable=backgroundGradientDrawable.drawExactBoundsSize(canvas,this);\n      }\n else {\n        drawable.draw(canvas);\n      }\n    }\n else     if (drawable instanceof BitmapDrawable) {\n      BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n      if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n        canvas.save();\n        float scale=2.0f / AndroidUtilities.density;\n        canvas.scale(scale,scale);\n        drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n      }\n else {\n        int viewHeight=getMeasuredHeight();\n        float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n        float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n        float scale=Math.max(scaleX,scaleY);\n        int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n        int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n        int x=(getMeasuredWidth() - width) / 2;\n        int y=(viewHeight - height) / 2;\n        canvas.save();\n        canvas.clipRect(0,0,width,getMeasuredHeight());\n        drawable.setBounds(x,y,x + width,y + height);\n      }\n      drawable.draw(canvas);\n      canvas.restore();\n    }\n    if (a == 0 && oldBackgroundDrawable != null && themeAnimationValue >= 1.0f) {\n      if (oldBackgroundGradientDisposable != null) {\n        oldBackgroundGradientDisposable.dispose();\n        oldBackgroundGradientDisposable=null;\n      }\n      oldBackgroundDrawable=null;\n      invalidate();\n    }\n  }\n  shadowDrawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n  shadowDrawable.draw(canvas);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 408,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3623,
        "startLineNumber" : 151,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void onDraw(Canvas canvas){\n  Drawable newDrawable=Theme.getCachedWallpaperNonBlocking();\n  if (newDrawable != backgroundDrawable && newDrawable != null) {\n    if (Theme.isAnimatingColor()) {\n      oldBackgroundDrawable=backgroundDrawable;\n      oldBackgroundGradientDisposable=backgroundGradientDisposable;\n    }\n else     if (backgroundGradientDisposable != null) {\n      backgroundGradientDisposable.dispose();\n      backgroundGradientDisposable=null;\n    }\n    backgroundDrawable=newDrawable;\n  }\n  float themeAnimationValue=parentLayout.getThemeAnimationValue();\n  for (int a=0; a < 2; a++) {\n    Drawable drawable=a == 0 ? oldBackgroundDrawable : backgroundDrawable;\n    if (drawable == null) {\n      continue;\n    }\n    if (a == 1 && oldBackgroundDrawable != null && parentLayout != null) {\n      drawable.setAlpha((int)(255 * themeAnimationValue));\n    }\n else {\n      drawable.setAlpha(255);\n    }\n    if (drawable instanceof ColorDrawable || drawable instanceof GradientDrawable) {\n      drawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n      if (drawable instanceof BackgroundGradientDrawable) {\n        final BackgroundGradientDrawable backgroundGradientDrawable=(BackgroundGradientDrawable)drawable;\n        backgroundGradientDisposable=backgroundGradientDrawable.drawExactBoundsSize(canvas,this);\n      }\n else {\n        drawable.draw(canvas);\n      }\n    }\n else     if (drawable instanceof BitmapDrawable) {\n      BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;\n      if (bitmapDrawable.getTileModeX() == Shader.TileMode.REPEAT) {\n        canvas.save();\n        float scale=2.0f / AndroidUtilities.density;\n        canvas.scale(scale,scale);\n        drawable.setBounds(0,0,(int)Math.ceil(getMeasuredWidth() / scale),(int)Math.ceil(getMeasuredHeight() / scale));\n      }\n else {\n        int viewHeight=getMeasuredHeight();\n        float scaleX=(float)getMeasuredWidth() / (float)drawable.getIntrinsicWidth();\n        float scaleY=(float)(viewHeight) / (float)drawable.getIntrinsicHeight();\n        float scale=Math.max(scaleX,scaleY);\n        int width=(int)Math.ceil(drawable.getIntrinsicWidth() * scale);\n        int height=(int)Math.ceil(drawable.getIntrinsicHeight() * scale);\n        int x=(getMeasuredWidth() - width) / 2;\n        int y=(viewHeight - height) / 2;\n        canvas.save();\n        canvas.clipRect(0,0,width,getMeasuredHeight());\n        drawable.setBounds(x,y,x + width,y + height);\n      }\n      drawable.draw(canvas);\n      canvas.restore();\n    }\n    if (a == 0 && oldBackgroundDrawable != null && themeAnimationValue >= 1.0f) {\n      if (oldBackgroundGradientDisposable != null) {\n        oldBackgroundGradientDisposable.dispose();\n        oldBackgroundGradientDisposable=null;\n      }\n      oldBackgroundDrawable=null;\n      invalidate();\n    }\n  }\n  shadowDrawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());\n  shadowDrawable.draw(canvas);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 418,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 198,
        "startColumnNumber" : 20,
        "endLineNumber" : 198,
        "endColumnNumber" : 54
      },
      "nodeContext" : "int y=(viewHeight - height) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 198,
    "startColumnNumber" : 28,
    "endLineNumber" : 198,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}