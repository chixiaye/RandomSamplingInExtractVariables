{
  "id" : 381,
  "expression" : "500",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-db-protocol/shardingsphere-db-protocol-mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/command/query/binary/execute/protocol/MySQLDateBinaryProtocolValueTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "500",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 76,
      "startColumnNumber" : 44,
      "endLineNumber" : 76,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 48
      },
      "nodeContext" : "when(payload.readInt4()).thenReturn(500)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 49
      },
      "nodeContext" : "when(payload.readInt4()).thenReturn(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 698,
        "startLineNumber" : 73,
        "startColumnNumber" : 64,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(payload.readInt1()).thenReturn(11,12,31,10,59,0);\n  when(payload.readInt2()).thenReturn(2018);\n  when(payload.readInt4()).thenReturn(500);\n  Calendar actual=Calendar.getInstance();\n  actual.setTimeInMillis(((Timestamp)new MySQLDateBinaryProtocolValue().read(payload)).getTime());\n  assertThat(actual.get(Calendar.YEAR),is(2018));\n  assertThat(actual.get(Calendar.MONTH),is(Calendar.DECEMBER));\n  assertThat(actual.get(Calendar.DAY_OF_MONTH),is(31));\n  assertThat(actual.get(Calendar.HOUR_OF_DAY),is(10));\n  assertThat(actual.get(Calendar.MINUTE),is(59));\n  assertThat(actual.get(Calendar.SECOND),is(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 768,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void assertReadWithElevenBytes() throws SQLException {\n  when(payload.readInt1()).thenReturn(11,12,31,10,59,0);\n  when(payload.readInt2()).thenReturn(2018);\n  when(payload.readInt4()).thenReturn(500);\n  Calendar actual=Calendar.getInstance();\n  actual.setTimeInMillis(((Timestamp)new MySQLDateBinaryProtocolValue().read(payload)).getTime());\n  assertThat(actual.get(Calendar.YEAR),is(2018));\n  assertThat(actual.get(Calendar.MONTH),is(Calendar.DECEMBER));\n  assertThat(actual.get(Calendar.DAY_OF_MONTH),is(31));\n  assertThat(actual.get(Calendar.HOUR_OF_DAY),is(10));\n  assertThat(actual.get(Calendar.MINUTE),is(59));\n  assertThat(actual.get(Calendar.SECOND),is(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 139,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 49
      },
      "nodeContext" : "when(payload.readInt4()).thenReturn(500);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 76,
    "startColumnNumber" : 44,
    "endLineNumber" : 76,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}