{
  "id" : 166,
  "expression" : "\"/foo-\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/ClientTest.java",
  "occurrences" : 17,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 178,
      "startColumnNumber" : 26,
      "endLineNumber" : 178,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 178,
        "startColumnNumber" : 26,
        "endLineNumber" : 178,
        "endColumnNumber" : 37
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 67
      },
      "nodeContext" : "zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 179,
        "endColumnNumber" : 68
      },
      "nodeContext" : "zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 175,
        "startColumnNumber" : 54,
        "endLineNumber" : 180,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  watchers[i]=new MyWatcher();\n  watchers2[i]=new MyWatcher();\n  zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 175,
        "startColumnNumber" : 12,
        "endLineNumber" : 180,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  watchers[i]=new MyWatcher();\n  watchers2[i]=new MyWatcher();\n  zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 178,
        "startColumnNumber" : 26,
        "endLineNumber" : 178,
        "endColumnNumber" : 37
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 188,
      "startColumnNumber" : 41,
      "endLineNumber" : 188,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 188,
        "startColumnNumber" : 41,
        "endLineNumber" : 188,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 188,
        "startColumnNumber" : 30,
        "endLineNumber" : 188,
        "endColumnNumber" : 72
      },
      "nodeContext" : "zk.getData(\"/foo-\" + i,watchers[i],stat)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 187,
        "startColumnNumber" : 54,
        "endLineNumber" : 189,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 189,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 188,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 191,
      "startColumnNumber" : 40,
      "endLineNumber" : 191,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 191,
        "startColumnNumber" : 40,
        "endLineNumber" : 191,
        "endColumnNumber" : 51
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 191,
        "startColumnNumber" : 30,
        "endLineNumber" : 191,
        "endColumnNumber" : 65
      },
      "nodeContext" : "zk.exists(\"/foo-\" + i,watchers[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 191,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 191,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 192,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 191,
        "startColumnNumber" : 16,
        "endLineNumber" : 191,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 195,
      "startColumnNumber" : 27,
      "endLineNumber" : 195,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 195,
        "startColumnNumber" : 27,
        "endLineNumber" : 195,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 195,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 195,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 194,
        "startColumnNumber" : 54,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 195,
        "startColumnNumber" : 16,
        "endLineNumber" : 195,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 196,
      "startColumnNumber" : 27,
      "endLineNumber" : 196,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 196,
        "startColumnNumber" : 27,
        "endLineNumber" : 196,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 196,
        "startColumnNumber" : 16,
        "endLineNumber" : 196,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 196,
        "startColumnNumber" : 16,
        "endLineNumber" : 196,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 194,
        "startColumnNumber" : 54,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 196,
        "startColumnNumber" : 16,
        "endLineNumber" : 196,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 201,
      "startColumnNumber" : 29,
      "endLineNumber" : 201,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 201,
        "startColumnNumber" : 29,
        "endLineNumber" : 201,
        "endColumnNumber" : 40
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 201,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 201,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 198,
        "startColumnNumber" : 54,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 198,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 201,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 216,
      "startColumnNumber" : 41,
      "endLineNumber" : 216,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 216,
        "startColumnNumber" : 41,
        "endLineNumber" : 216,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 216,
        "startColumnNumber" : 30,
        "endLineNumber" : 216,
        "endColumnNumber" : 72
      },
      "nodeContext" : "zk.getData(\"/foo-\" + i,watchers[i],stat)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 216,
        "startColumnNumber" : 16,
        "endLineNumber" : 216,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 216,
        "startColumnNumber" : 16,
        "endLineNumber" : 216,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 215,
        "startColumnNumber" : 54,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 216,
        "startColumnNumber" : 16,
        "endLineNumber" : 216,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 217,
      "startColumnNumber" : 40,
      "endLineNumber" : 217,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 217,
        "startColumnNumber" : 40,
        "endLineNumber" : 217,
        "endColumnNumber" : 51
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 217,
        "startColumnNumber" : 30,
        "endLineNumber" : 217,
        "endColumnNumber" : 65
      },
      "nodeContext" : "zk.exists(\"/foo-\" + i,watchers[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 217,
        "startColumnNumber" : 16,
        "endLineNumber" : 217,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 217,
        "startColumnNumber" : 16,
        "endLineNumber" : 217,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 215,
        "startColumnNumber" : 54,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 215,
        "startColumnNumber" : 12,
        "endLineNumber" : 218,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 217,
        "startColumnNumber" : 16,
        "endLineNumber" : 217,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 221,
      "startColumnNumber" : 27,
      "endLineNumber" : 221,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 221,
        "startColumnNumber" : 27,
        "endLineNumber" : 221,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 221,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 221,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 220,
        "startColumnNumber" : 54,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 221,
        "startColumnNumber" : 16,
        "endLineNumber" : 221,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 222,
      "startColumnNumber" : 27,
      "endLineNumber" : 222,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 222,
        "startColumnNumber" : 27,
        "endLineNumber" : 222,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 222,
        "startColumnNumber" : 16,
        "endLineNumber" : 222,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 222,
        "startColumnNumber" : 16,
        "endLineNumber" : 222,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 220,
        "startColumnNumber" : 54,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 223,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 222,
        "startColumnNumber" : 16,
        "endLineNumber" : 222,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 227,
      "startColumnNumber" : 29,
      "endLineNumber" : 227,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 227,
        "startColumnNumber" : 29,
        "endLineNumber" : 227,
        "endColumnNumber" : 40
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 227,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 227,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 570,
        "startLineNumber" : 224,
        "startColumnNumber" : 54,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 612,
        "startLineNumber" : 224,
        "startColumnNumber" : 12,
        "endLineNumber" : 235,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 227,
        "startColumnNumber" : 16,
        "endLineNumber" : 227,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 241,
      "startColumnNumber" : 41,
      "endLineNumber" : 241,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 241,
        "startColumnNumber" : 41,
        "endLineNumber" : 241,
        "endColumnNumber" : 52
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 241,
        "startColumnNumber" : 30,
        "endLineNumber" : 241,
        "endColumnNumber" : 72
      },
      "nodeContext" : "zk.getData(\"/foo-\" + i,watchers[i],stat)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 241,
        "startColumnNumber" : 16,
        "endLineNumber" : 241,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 241,
        "startColumnNumber" : 16,
        "endLineNumber" : 241,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 240,
        "startColumnNumber" : 54,
        "endLineNumber" : 243,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 241,
        "startColumnNumber" : 16,
        "endLineNumber" : 241,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 242,
      "startColumnNumber" : 40,
      "endLineNumber" : 242,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 242,
        "startColumnNumber" : 40,
        "endLineNumber" : 242,
        "endColumnNumber" : 51
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 242,
        "startColumnNumber" : 30,
        "endLineNumber" : 242,
        "endColumnNumber" : 66
      },
      "nodeContext" : "zk.exists(\"/foo-\" + i,watchers2[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 242,
        "startColumnNumber" : 16,
        "endLineNumber" : 242,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 242,
        "startColumnNumber" : 16,
        "endLineNumber" : 242,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 240,
        "startColumnNumber" : 54,
        "endLineNumber" : 243,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 243,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 242,
        "startColumnNumber" : 16,
        "endLineNumber" : 242,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 246,
      "startColumnNumber" : 27,
      "endLineNumber" : 246,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 246,
        "startColumnNumber" : 27,
        "endLineNumber" : 246,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 245,
        "startColumnNumber" : 54,
        "endLineNumber" : 248,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 246,
        "startColumnNumber" : 16,
        "endLineNumber" : 246,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 247,
      "startColumnNumber" : 27,
      "endLineNumber" : 247,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 247,
        "startColumnNumber" : 27,
        "endLineNumber" : 247,
        "endColumnNumber" : 38
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 73
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 245,
        "startColumnNumber" : 54,
        "endLineNumber" : 248,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n  zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 247,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 74
      },
      "nodeContext" : "zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 252,
      "startColumnNumber" : 29,
      "endLineNumber" : 252,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 252,
        "startColumnNumber" : 29,
        "endLineNumber" : 252,
        "endColumnNumber" : 40
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 252,
        "startColumnNumber" : 16,
        "endLineNumber" : 252,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 252,
        "startColumnNumber" : 16,
        "endLineNumber" : 252,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 249,
        "startColumnNumber" : 54,
        "endLineNumber" : 272,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n  WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event2.getPath());\n  assertEquals(EventType.NodeDataChanged,event2.getType());\n  assertEquals(KeeperState.SyncConnected,event2.getState());\n  assertEquals(0,watchers2[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1203,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n  WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event2.getPath());\n  assertEquals(EventType.NodeDataChanged,event2.getType());\n  assertEquals(KeeperState.SyncConnected,event2.getState());\n  assertEquals(0,watchers2[i].events.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 252,
        "startColumnNumber" : 16,
        "endLineNumber" : 252,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"/foo-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 264,
      "startColumnNumber" : 29,
      "endLineNumber" : 264,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 264,
        "startColumnNumber" : 29,
        "endLineNumber" : 264,
        "endColumnNumber" : 40
      },
      "nodeContext" : "\"/foo-\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 264,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event2.getPath())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 264,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event2.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 249,
        "startColumnNumber" : 54,
        "endLineNumber" : 272,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n  WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event2.getPath());\n  assertEquals(EventType.NodeDataChanged,event2.getType());\n  assertEquals(KeeperState.SyncConnected,event2.getState());\n  assertEquals(0,watchers2[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1203,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < watchers.length; i++) {\n  WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event.getPath());\n  assertEquals(EventType.NodeDataChanged,event.getType());\n  assertEquals(KeeperState.SyncConnected,event.getState());\n  assertEquals(0,watchers[i].events.size());\n  WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n  assertEquals(\"/foo-\" + i,event2.getPath());\n  assertEquals(EventType.NodeDataChanged,event2.getType());\n  assertEquals(KeeperState.SyncConnected,event2.getState());\n  assertEquals(0,watchers2[i].events.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4759,
        "startLineNumber" : 172,
        "startColumnNumber" : 12,
        "endLineNumber" : 274,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 605,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4855,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  MyWatcher watchers[]=new MyWatcher[100];\n  MyWatcher watchers2[]=new MyWatcher[watchers.length];\n  for (int i=0; i < watchers.length; i++) {\n    watchers[i]=new MyWatcher();\n    watchers2[i]=new MyWatcher();\n    zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  }\n  Stat stat=new Stat();\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n  }\n  for (int i=0; i < watchers.length; i++) {\n    assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n  }\n  for (int i=0; i < watchers.length; i++) {\n    zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n    zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n  }\n  for (int i=0; i < watchers.length; i++) {\n    WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event.getPath());\n    assertEquals(EventType.NodeDataChanged,event.getType());\n    assertEquals(KeeperState.SyncConnected,event.getState());\n    assertEquals(0,watchers[i].events.size());\n    WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n    assertEquals(\"/foo-\" + i,event2.getPath());\n    assertEquals(EventType.NodeDataChanged,event2.getType());\n    assertEquals(KeeperState.SyncConnected,event2.getState());\n    assertEquals(0,watchers2[i].events.size());\n  }\n}\n  finally {\n  if (zk != null) {\n    zk.close();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 616,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4942,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 628,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5178,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 279,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Register multiple watchers and verify that they all get notified and in the right order.\n */\n@Test public void testMutipleWatcherObjs() throws IOException, InterruptedException, KeeperException {\n  ZooKeeper zk=createClient(new CountdownWatcher(),hostPort);\n  try {\n    MyWatcher watchers[]=new MyWatcher[100];\n    MyWatcher watchers2[]=new MyWatcher[watchers.length];\n    for (int i=0; i < watchers.length; i++) {\n      watchers[i]=new MyWatcher();\n      watchers2[i]=new MyWatcher();\n      zk.create(\"/foo-\" + i,(\"foodata\" + i).getBytes(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n    Stat stat=new Stat();\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata2-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata3-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata4-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata5-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n    }\n    for (int i=0; i < watchers.length; i++) {\n      assertNotNull(zk.getData(\"/foo-\" + i,watchers[i],stat));\n      assertNotNull(zk.exists(\"/foo-\" + i,watchers2[i]));\n    }\n    for (int i=0; i < watchers.length; i++) {\n      zk.setData(\"/foo-\" + i,(\"foodata6-\" + i).getBytes(),-1);\n      zk.setData(\"/foo-\" + i,(\"foodata7-\" + i).getBytes(),-1);\n    }\n    for (int i=0; i < watchers.length; i++) {\n      WatchedEvent event=watchers[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event.getPath());\n      assertEquals(EventType.NodeDataChanged,event.getType());\n      assertEquals(KeeperState.SyncConnected,event.getState());\n      assertEquals(0,watchers[i].events.size());\n      WatchedEvent event2=watchers2[i].events.poll(10,TimeUnit.SECONDS);\n      assertEquals(\"/foo-\" + i,event2.getPath());\n      assertEquals(EventType.NodeDataChanged,event2.getType());\n      assertEquals(KeeperState.SyncConnected,event2.getState());\n      assertEquals(0,watchers2[i].events.size());\n    }\n  }\n  finally {\n    if (zk != null) {\n      zk.close();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 641,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 264,
        "startColumnNumber" : 16,
        "endLineNumber" : 264,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertEquals(\"/foo-\" + i,event2.getPath());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 178,
    "startColumnNumber" : 26,
    "endLineNumber" : 178,
    "endColumnNumber" : 33
  }, {
    "charLength" : 7,
    "startLineNumber" : 188,
    "startColumnNumber" : 41,
    "endLineNumber" : 188,
    "endColumnNumber" : 48
  }, {
    "charLength" : 7,
    "startLineNumber" : 191,
    "startColumnNumber" : 40,
    "endLineNumber" : 191,
    "endColumnNumber" : 47
  }, {
    "charLength" : 7,
    "startLineNumber" : 195,
    "startColumnNumber" : 27,
    "endLineNumber" : 195,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 196,
    "startColumnNumber" : 27,
    "endLineNumber" : 196,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 201,
    "startColumnNumber" : 29,
    "endLineNumber" : 201,
    "endColumnNumber" : 36
  }, {
    "charLength" : 7,
    "startLineNumber" : 216,
    "startColumnNumber" : 41,
    "endLineNumber" : 216,
    "endColumnNumber" : 48
  }, {
    "charLength" : 7,
    "startLineNumber" : 217,
    "startColumnNumber" : 40,
    "endLineNumber" : 217,
    "endColumnNumber" : 47
  }, {
    "charLength" : 7,
    "startLineNumber" : 221,
    "startColumnNumber" : 27,
    "endLineNumber" : 221,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 222,
    "startColumnNumber" : 27,
    "endLineNumber" : 222,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 227,
    "startColumnNumber" : 29,
    "endLineNumber" : 227,
    "endColumnNumber" : 36
  }, {
    "charLength" : 7,
    "startLineNumber" : 241,
    "startColumnNumber" : 41,
    "endLineNumber" : 241,
    "endColumnNumber" : 48
  }, {
    "charLength" : 7,
    "startLineNumber" : 242,
    "startColumnNumber" : 40,
    "endLineNumber" : 242,
    "endColumnNumber" : 47
  }, {
    "charLength" : 7,
    "startLineNumber" : 246,
    "startColumnNumber" : 27,
    "endLineNumber" : 246,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 247,
    "startColumnNumber" : 27,
    "endLineNumber" : 247,
    "endColumnNumber" : 34
  }, {
    "charLength" : 7,
    "startLineNumber" : 252,
    "startColumnNumber" : 29,
    "endLineNumber" : 252,
    "endColumnNumber" : 36
  }, {
    "charLength" : 7,
    "startLineNumber" : 264,
    "startColumnNumber" : 29,
    "endLineNumber" : 264,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  } ]
}