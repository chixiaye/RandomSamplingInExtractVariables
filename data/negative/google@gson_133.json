{
  "id" : 133,
  "expression" : "\"java.lang.\"",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/codegen/src/main/java/com/google/gson/codegen/JavaWriter.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"java.lang.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 120,
      "startColumnNumber" : 33,
      "endLineNumber" : 120,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 120,
        "startColumnNumber" : 17,
        "endLineNumber" : 120,
        "endColumnNumber" : 46
      },
      "nodeContext" : "name.startsWith(\"java.lang.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 120,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (name.startsWith(\"java.lang.\")) {\n  out.write(name.substring(\"java.lang.\".length()));\n}\n else {\n  out.write(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 117,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n  out.write(name.substring(packagePrefix.length()));\n}\n else if (name.startsWith(\"java.lang.\")) {\n  out.write(name.substring(\"java.lang.\".length()));\n}\n else {\n  out.write(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 115,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if ((imported=importedTypes.get(name)) != null) {\n  out.write(imported);\n}\n else if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n  out.write(name.substring(packagePrefix.length()));\n}\n else if (name.startsWith(\"java.lang.\")) {\n  out.write(name.substring(\"java.lang.\".length()));\n}\n else {\n  out.write(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 788,
        "startLineNumber" : 101,
        "startColumnNumber" : 17,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean found=m.find(pos);\n  int typeStart=found ? m.start() : type.length();\n  out.write(type,pos,typeStart - pos);\n  if (!found) {\n    break;\n  }\n  String name=m.group(0);\n  String imported;\n  if ((imported=importedTypes.get(name)) != null) {\n    out.write(imported);\n  }\n else   if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n    out.write(name.substring(packagePrefix.length()));\n  }\n else   if (name.startsWith(\"java.lang.\")) {\n    out.write(name.substring(\"java.lang.\".length()));\n  }\n else {\n    out.write(name);\n  }\n  pos=m.end();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  boolean found=m.find(pos);\n  int typeStart=found ? m.start() : type.length();\n  out.write(type,pos,typeStart - pos);\n  if (!found) {\n    break;\n  }\n  String name=m.group(0);\n  String imported;\n  if ((imported=importedTypes.get(name)) != null) {\n    out.write(imported);\n  }\n else   if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n    out.write(name.substring(packagePrefix.length()));\n  }\n else   if (name.startsWith(\"java.lang.\")) {\n    out.write(name.substring(\"java.lang.\".length()));\n  }\n else {\n    out.write(name);\n  }\n  pos=m.end();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 94,
        "startColumnNumber" : 52,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (this.packagePrefix == null) {\n    throw new IllegalStateException();\n  }\n  Matcher m=TYPE_PATTERN.matcher(type);\n  int pos=0;\n  while (true) {\n    boolean found=m.find(pos);\n    int typeStart=found ? m.start() : type.length();\n    out.write(type,pos,typeStart - pos);\n    if (!found) {\n      break;\n    }\n    String name=m.group(0);\n    String imported;\n    if ((imported=importedTypes.get(name)) != null) {\n      out.write(imported);\n    }\n else     if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n      out.write(name.substring(packagePrefix.length()));\n    }\n else     if (name.startsWith(\"java.lang.\")) {\n      out.write(name.substring(\"java.lang.\".length()));\n    }\n else {\n      out.write(name);\n    }\n    pos=m.end();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Emits a name like  {@code java.lang.String} or {@code java.util.List<java.lang.String>}, shorting it with imports if possible.\n */\nprivate void type(String type) throws IOException {\n  if (this.packagePrefix == null) {\n    throw new IllegalStateException();\n  }\n  Matcher m=TYPE_PATTERN.matcher(type);\n  int pos=0;\n  while (true) {\n    boolean found=m.find(pos);\n    int typeStart=found ? m.start() : type.length();\n    out.write(type,pos,typeStart - pos);\n    if (!found) {\n      break;\n    }\n    String name=m.group(0);\n    String imported;\n    if ((imported=importedTypes.get(name)) != null) {\n      out.write(imported);\n    }\n else     if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n      out.write(name.substring(packagePrefix.length()));\n    }\n else     if (name.startsWith(\"java.lang.\")) {\n      out.write(name.substring(\"java.lang.\".length()));\n    }\n else {\n      out.write(name);\n    }\n    pos=m.end();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 120,
        "startColumnNumber" : 17,
        "endLineNumber" : 120,
        "endColumnNumber" : 46
      },
      "nodeContext" : "name.startsWith(\"java.lang.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"java.lang.\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 121,
      "startColumnNumber" : 33,
      "endLineNumber" : 121,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 121,
        "startColumnNumber" : 33,
        "endLineNumber" : 121,
        "endColumnNumber" : 54
      },
      "nodeContext" : "\"java.lang.\".length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 121,
        "startColumnNumber" : 18,
        "endLineNumber" : 121,
        "endColumnNumber" : 55
      },
      "nodeContext" : "name.substring(\"java.lang.\".length())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 56
      },
      "nodeContext" : "out.write(name.substring(\"java.lang.\".length()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 57
      },
      "nodeContext" : "out.write(name.substring(\"java.lang.\".length()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 120,
        "startColumnNumber" : 48,
        "endLineNumber" : 122,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  out.write(name.substring(\"java.lang.\".length()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 120,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (name.startsWith(\"java.lang.\")) {\n  out.write(name.substring(\"java.lang.\".length()));\n}\n else {\n  out.write(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 117,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n  out.write(name.substring(packagePrefix.length()));\n}\n else if (name.startsWith(\"java.lang.\")) {\n  out.write(name.substring(\"java.lang.\".length()));\n}\n else {\n  out.write(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 115,
        "startColumnNumber" : 6,
        "endLineNumber" : 124,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if ((imported=importedTypes.get(name)) != null) {\n  out.write(imported);\n}\n else if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n  out.write(name.substring(packagePrefix.length()));\n}\n else if (name.startsWith(\"java.lang.\")) {\n  out.write(name.substring(\"java.lang.\".length()));\n}\n else {\n  out.write(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 788,
        "startLineNumber" : 101,
        "startColumnNumber" : 17,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean found=m.find(pos);\n  int typeStart=found ? m.start() : type.length();\n  out.write(type,pos,typeStart - pos);\n  if (!found) {\n    break;\n  }\n  String name=m.group(0);\n  String imported;\n  if ((imported=importedTypes.get(name)) != null) {\n    out.write(imported);\n  }\n else   if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n    out.write(name.substring(packagePrefix.length()));\n  }\n else   if (name.startsWith(\"java.lang.\")) {\n    out.write(name.substring(\"java.lang.\".length()));\n  }\n else {\n    out.write(name);\n  }\n  pos=m.end();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  boolean found=m.find(pos);\n  int typeStart=found ? m.start() : type.length();\n  out.write(type,pos,typeStart - pos);\n  if (!found) {\n    break;\n  }\n  String name=m.group(0);\n  String imported;\n  if ((imported=importedTypes.get(name)) != null) {\n    out.write(imported);\n  }\n else   if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n    out.write(name.substring(packagePrefix.length()));\n  }\n else   if (name.startsWith(\"java.lang.\")) {\n    out.write(name.substring(\"java.lang.\".length()));\n  }\n else {\n    out.write(name);\n  }\n  pos=m.end();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 94,
        "startColumnNumber" : 52,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (this.packagePrefix == null) {\n    throw new IllegalStateException();\n  }\n  Matcher m=TYPE_PATTERN.matcher(type);\n  int pos=0;\n  while (true) {\n    boolean found=m.find(pos);\n    int typeStart=found ? m.start() : type.length();\n    out.write(type,pos,typeStart - pos);\n    if (!found) {\n      break;\n    }\n    String name=m.group(0);\n    String imported;\n    if ((imported=importedTypes.get(name)) != null) {\n      out.write(imported);\n    }\n else     if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n      out.write(name.substring(packagePrefix.length()));\n    }\n else     if (name.startsWith(\"java.lang.\")) {\n      out.write(name.substring(\"java.lang.\".length()));\n    }\n else {\n      out.write(name);\n    }\n    pos=m.end();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Emits a name like  {@code java.lang.String} or {@code java.util.List<java.lang.String>}, shorting it with imports if possible.\n */\nprivate void type(String type) throws IOException {\n  if (this.packagePrefix == null) {\n    throw new IllegalStateException();\n  }\n  Matcher m=TYPE_PATTERN.matcher(type);\n  int pos=0;\n  while (true) {\n    boolean found=m.find(pos);\n    int typeStart=found ? m.start() : type.length();\n    out.write(type,pos,typeStart - pos);\n    if (!found) {\n      break;\n    }\n    String name=m.group(0);\n    String imported;\n    if ((imported=importedTypes.get(name)) != null) {\n      out.write(imported);\n    }\n else     if (name.startsWith(packagePrefix) && name.indexOf('.',packagePrefix.length()) == -1) {\n      out.write(name.substring(packagePrefix.length()));\n    }\n else     if (name.startsWith(\"java.lang.\")) {\n      out.write(name.substring(\"java.lang.\".length()));\n    }\n else {\n      out.write(name);\n    }\n    pos=m.end();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 57
      },
      "nodeContext" : "out.write(name.substring(\"java.lang.\".length()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 120,
    "startColumnNumber" : 33,
    "endLineNumber" : 120,
    "endColumnNumber" : 45
  }, {
    "charLength" : 12,
    "startLineNumber" : 121,
    "startColumnNumber" : 33,
    "endLineNumber" : 121,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}