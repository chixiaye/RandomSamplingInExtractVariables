{
  "id" : 21,
  "expression" : "PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax())",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotPlanOptimizerSql.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 314,
      "startLineNumber" : 74,
      "startColumnNumber" : 16,
      "endLineNumber" : 79,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 17,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PlanBuilder planBuilder=createPlanBuilder(defaultSessionHolder);\n  PlanNode originalPlan=distinctLimit(planBuilder,ImmutableList.of(new VariableReferenceExpression(Optional.empty(),\"regionid\",BIGINT)),50L,tableScan(planBuilder,pinotTable,regionId));\n  PlanNode optimized=getOptimizedPlan(planBuilder,originalPlan);\n  assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId FROM hybrid GROUP BY regionId LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider);\n  planBuilder=createPlanBuilder(defaultSessionHolder);\n  originalPlan=distinctLimit(planBuilder,ImmutableList.of(new VariableReferenceExpression(Optional.empty(),\"regionid\",BIGINT),new VariableReferenceExpression(Optional.empty(),\"city\",VARCHAR)),50L,tableScan(planBuilder,pinotTable,regionId,city));\n  optimized=getOptimizedPlan(planBuilder,originalPlan);\n  assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1801,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testDistinctLimitPushdown(){\n  PlanBuilder planBuilder=createPlanBuilder(defaultSessionHolder);\n  PlanNode originalPlan=distinctLimit(planBuilder,ImmutableList.of(new VariableReferenceExpression(Optional.empty(),\"regionid\",BIGINT)),50L,tableScan(planBuilder,pinotTable,regionId));\n  PlanNode optimized=getOptimizedPlan(planBuilder,originalPlan);\n  assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId FROM hybrid GROUP BY regionId LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider);\n  planBuilder=createPlanBuilder(defaultSessionHolder);\n  originalPlan=distinctLimit(planBuilder,ImmutableList.of(new VariableReferenceExpression(Optional.empty(),\"regionid\",BIGINT),new VariableReferenceExpression(Optional.empty(),\"city\",VARCHAR)),50L,tableScan(planBuilder,pinotTable,regionId,city));\n  optimized=getOptimizedPlan(planBuilder,originalPlan);\n  assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 138,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertPlanMatch(optimized,PinotTableScanMatcher.match(pinotTable,Optional.of(\"SELECT regionId, city FROM hybrid GROUP BY regionId, city LIMIT 50\"),Optional.of(false),originalPlan.getOutputVariables(),useSqlSyntax()),typeProvider)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    },
    "tokenLength" : 22,
    "type" : "com.facebook.presto.sql.planner.assertions.PlanMatchPattern"
  } ],
  "positionList" : [ {
    "charLength" : 314,
    "startLineNumber" : 74,
    "startColumnNumber" : 16,
    "endLineNumber" : 79,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}