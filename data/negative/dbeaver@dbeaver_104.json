{
  "id" : 104,
  "expression" : "null",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/plan/AbstractExecutionPlanSerializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 62,
      "startColumnNumber" : 54,
      "endLineNumber" : 62,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 62,
        "startColumnNumber" : 32,
        "endLineNumber" : 62,
        "endColumnNumber" : 58
      },
      "nodeContext" : "node.getNodeKind() == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 62,
        "startColumnNumber" : 32,
        "endLineNumber" : 62,
        "endColumnNumber" : 155
      },
      "nodeContext" : "node.getNodeKind() == null ? new JsonPrimitive(\"\") : new JsonPrimitive(CommonUtils.notEmpty(node.getNodeKind().getTitle()))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 156
      },
      "nodeContext" : "nodeJson.add(PROP_KIND,node.getNodeKind() == null ? new JsonPrimitive(\"\") : new JsonPrimitive(CommonUtils.notEmpty(node.getNodeKind().getTitle())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 157
      },
      "nodeContext" : "nodeJson.add(PROP_KIND,node.getNodeKind() == null ? new JsonPrimitive(\"\") : new JsonPrimitive(CommonUtils.notEmpty(node.getNodeKind().getTitle())));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 967,
        "startLineNumber" : 57,
        "startColumnNumber" : 87,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JsonObject nodeJson=new JsonObject();\n  nodeJson.add(PROP_NAME,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeName())));\n  nodeJson.add(PROP_KIND,node.getNodeKind() == null ? new JsonPrimitive(\"\") : new JsonPrimitive(CommonUtils.notEmpty(node.getNodeKind().getTitle())));\n  nodeJson.add(PROP_TYPE,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeType())));\n  nodeJson.add(PROP_COND,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeCondition())));\n  nodeJson.add(PROP_DESC,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeDescription())));\n  info.addNodeProperties(node,nodeJson);\n  if (!CommonUtils.isEmpty(node.getNested())) {\n    JsonArray nodes=new JsonArray();\n    for (    DBCPlanNode childNode : node.getNested()) {\n      nodes.add(serializeNode(childNode,info));\n    }\n    nodeJson.add(PROP_CHILD,nodes);\n  }\n  return nodeJson;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1050,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private JsonElement serializeNode(DBCPlanNode node,DBCQueryPlannerSerialInfo info){\n  JsonObject nodeJson=new JsonObject();\n  nodeJson.add(PROP_NAME,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeName())));\n  nodeJson.add(PROP_KIND,node.getNodeKind() == null ? new JsonPrimitive(\"\") : new JsonPrimitive(CommonUtils.notEmpty(node.getNodeKind().getTitle())));\n  nodeJson.add(PROP_TYPE,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeType())));\n  nodeJson.add(PROP_COND,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeCondition())));\n  nodeJson.add(PROP_DESC,new JsonPrimitive(CommonUtils.notEmpty(node.getNodeDescription())));\n  info.addNodeProperties(node,nodeJson);\n  if (!CommonUtils.isEmpty(node.getNested())) {\n    JsonArray nodes=new JsonArray();\n    for (    DBCPlanNode childNode : node.getNested()) {\n      nodes.add(serializeNode(childNode,info));\n    }\n    nodeJson.add(PROP_CHILD,nodes);\n  }\n  return nodeJson;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 157
      },
      "nodeContext" : "nodeJson.add(PROP_KIND,node.getNodeKind() == null ? new JsonPrimitive(\"\") : new JsonPrimitive(CommonUtils.notEmpty(node.getNodeKind().getTitle())));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 62,
    "startColumnNumber" : 54,
    "endLineNumber" : 62,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}