{
  "id" : 8,
  "expression" : "-1",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/AlignedZipOutputStream.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 303,
      "startColumnNumber" : 22,
      "endLineNumber" : 303,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 24
      },
      "nodeContext" : "method == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 303,
        "startColumnNumber" : 8,
        "endLineNumber" : 305,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (method == -1) {\n  method=defaultCompressionMethod;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 303,
        "startColumnNumber" : 12,
        "endLineNumber" : 303,
        "endColumnNumber" : 24
      },
      "nodeContext" : "method == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 309,
      "startColumnNumber" : 42,
      "endLineNumber" : 309,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 309,
        "startColumnNumber" : 16,
        "endLineNumber" : 309,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ze.getCompressedSize() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 309,
        "startColumnNumber" : 12,
        "endLineNumber" : 313,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ze.getCompressedSize() == -1) {\n  ze.setCompressedSize(ze.getSize());\n}\n else if (ze.getSize() == -1) {\n  ze.setSize(ze.getCompressedSize());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 308,
        "startColumnNumber" : 30,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (method == STORED) {\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 309,
        "startColumnNumber" : 16,
        "endLineNumber" : 309,
        "endColumnNumber" : 44
      },
      "nodeContext" : "ze.getCompressedSize() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 311,
      "startColumnNumber" : 39,
      "endLineNumber" : 311,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 311,
        "startColumnNumber" : 23,
        "endLineNumber" : 311,
        "endColumnNumber" : 41
      },
      "nodeContext" : "ze.getSize() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 311,
        "startColumnNumber" : 19,
        "endLineNumber" : 313,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ze.getSize() == -1) {\n  ze.setSize(ze.getCompressedSize());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 202,
        "startLineNumber" : 309,
        "startColumnNumber" : 12,
        "endLineNumber" : 313,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ze.getCompressedSize() == -1) {\n  ze.setCompressedSize(ze.getSize());\n}\n else if (ze.getSize() == -1) {\n  ze.setSize(ze.getCompressedSize());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 308,
        "startColumnNumber" : 30,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (method == STORED) {\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 311,
        "startColumnNumber" : 23,
        "endLineNumber" : 311,
        "endColumnNumber" : 41
      },
      "nodeContext" : "ze.getSize() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 314,
      "startColumnNumber" : 31,
      "endLineNumber" : 314,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 314,
        "startColumnNumber" : 16,
        "endLineNumber" : 314,
        "endColumnNumber" : 33
      },
      "nodeContext" : "ze.getCrc() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 314,
        "startColumnNumber" : 12,
        "endLineNumber" : 316,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ze.getCrc() == -1) {\n  throw new ZipException(\"STORED entry missing CRC\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 308,
        "startColumnNumber" : 30,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (method == STORED) {\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 314,
        "startColumnNumber" : 16,
        "endLineNumber" : 314,
        "endColumnNumber" : 33
      },
      "nodeContext" : "ze.getCrc() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 317,
      "startColumnNumber" : 32,
      "endLineNumber" : 317,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 317,
        "startColumnNumber" : 16,
        "endLineNumber" : 317,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ze.getSize() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 317,
        "startColumnNumber" : 12,
        "endLineNumber" : 319,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ze.getSize() == -1) {\n  throw new ZipException(\"STORED entry missing size\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 308,
        "startColumnNumber" : 30,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (method == STORED) {\n  if (ze.getCompressedSize() == -1) {\n    ze.setCompressedSize(ze.getSize());\n  }\n else   if (ze.getSize() == -1) {\n    ze.setSize(ze.getCompressedSize());\n  }\n  if (ze.getCrc() == -1) {\n    throw new ZipException(\"STORED entry missing CRC\");\n  }\n  if (ze.getSize() == -1) {\n    throw new ZipException(\"STORED entry missing size\");\n  }\n  if (ze.getSize() != ze.getCompressedSize()) {\n    throw new ZipException(\"STORED entry size/compressed size mismatch\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 317,
        "startColumnNumber" : 16,
        "endLineNumber" : 317,
        "endColumnNumber" : 34
      },
      "nodeContext" : "ze.getSize() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 355,
      "startColumnNumber" : 38,
      "endLineNumber" : 355,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 355,
        "startColumnNumber" : 12,
        "endLineNumber" : 355,
        "endColumnNumber" : 40
      },
      "nodeContext" : "currentEntry.getTime() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 355,
        "startColumnNumber" : 8,
        "endLineNumber" : 357,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (currentEntry.getTime() == -1) {\n  currentEntry.setTime(System.currentTimeMillis());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 296,
        "startColumnNumber" : 61,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 373,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4029,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 383,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(ZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.getSize() != ze.getCompressedSize()) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  if (entries.contains(ze.getName())) {\n    throw new ZipException(\"Entry already exists: \" + ze.getName());\n  }\n  if (entries.size() == 64 * 1024 - 1) {\n    throw new ZipException(\"Too many entries for the zip file format's 16-bit entry count\");\n  }\n  nameBytes=ze.getName().getBytes(Charset.forName(\"UTF-8\"));\n  nameLength=nameBytes.length;\n  if (nameLength > 0xffff) {\n    throw new IllegalArgumentException(\"Name too long: \" + nameLength + \" UTF-8 bytes\");\n  }\n  def.setLevel(compressionLevel);\n  ze.setMethod(method);\n  currentEntry=ze;\n  entries.add(currentEntry.getName());\n  int flags=(method == STORED) ? 0 : GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=GPBF_UTF8_FLAG;\n  writeLong(out,LOCSIG);\n  writeShort(out,ZIPLocalHeaderVersionNeeded);\n  writeShort(out,flags);\n  writeShort(out,method);\n  if (currentEntry.getTime() == -1) {\n    currentEntry.setTime(System.currentTimeMillis());\n  }\n  writeShort(out,TIME_CONST);\n  writeShort(out,MOD_DATE_CONST);\n  if (method == STORED) {\n    writeLong(out,currentEntry.getCrc());\n    writeLong(out,currentEntry.getSize());\n    writeLong(out,currentEntry.getSize());\n  }\n else {\n    writeLong(out,0);\n    writeLong(out,0);\n    writeLong(out,0);\n  }\n  writeShort(out,nameLength);\n  final int currDataOffset=offset + LOCHDR + nameLength+ (currentEntry.getExtra() != null ? currentEntry.getExtra().length : 0);\n  padding=getPaddingByteCount(currentEntry,currDataOffset);\n  if (currentEntry.getExtra() != null) {\n    writeShort(out,currentEntry.getExtra().length + padding);\n  }\n else {\n    writeShort(out,padding);\n  }\n  out.write(nameBytes);\n  if (currentEntry.getExtra() != null) {\n    out.write(currentEntry.getExtra());\n  }\n  makePaddingToStream(out,padding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 355,
        "startColumnNumber" : 12,
        "endLineNumber" : 355,
        "endColumnNumber" : 40
      },
      "nodeContext" : "currentEntry.getTime() == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 303,
    "startColumnNumber" : 22,
    "endLineNumber" : 303,
    "endColumnNumber" : 24
  }, {
    "charLength" : 2,
    "startLineNumber" : 309,
    "startColumnNumber" : 42,
    "endLineNumber" : 309,
    "endColumnNumber" : 44
  }, {
    "charLength" : 2,
    "startLineNumber" : 311,
    "startColumnNumber" : 39,
    "endLineNumber" : 311,
    "endColumnNumber" : 41
  }, {
    "charLength" : 2,
    "startLineNumber" : 314,
    "startColumnNumber" : 31,
    "endLineNumber" : 314,
    "endColumnNumber" : 33
  }, {
    "charLength" : 2,
    "startLineNumber" : 317,
    "startColumnNumber" : 32,
    "endLineNumber" : 317,
    "endColumnNumber" : 34
  }, {
    "charLength" : 2,
    "startLineNumber" : 355,
    "startColumnNumber" : 38,
    "endLineNumber" : 355,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}