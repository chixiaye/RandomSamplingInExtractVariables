{
  "id" : 45,
  "expression" : "toolChest",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/query/metadata/SegmentMetadataQueryQueryToolChestTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "toolChest",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 287,
      "startColumnNumber" : 50,
      "endLineNumber" : 287,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 287,
        "startColumnNumber" : 50,
        "endLineNumber" : 312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "toolChest.filterSegments(Druids.newSegmentMetadataQueryBuilder().dataSource(\"foo\").merge(true).build(),ImmutableList.of(\"2000-01-01/P1D\",\"2000-01-04/P1D\",\"2000-01-09/P1D\",\"2000-01-09/P1D\").stream().map(interval -> new LogicalSegment(){\n  @Override public Interval getInterval(){\n    return Intervals.of(interval);\n  }\n  @Override public Interval getTrueInterval(){\n    return Intervals.of(interval);\n  }\n}\n).collect(Collectors.toList()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 287,
        "startColumnNumber" : 31,
        "endLineNumber" : 312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "filteredSegments=toolChest.filterSegments(Druids.newSegmentMetadataQueryBuilder().dataSource(\"foo\").merge(true).build(),ImmutableList.of(\"2000-01-01/P1D\",\"2000-01-04/P1D\",\"2000-01-09/P1D\",\"2000-01-09/P1D\").stream().map(interval -> new LogicalSegment(){\n  @Override public Interval getInterval(){\n    return Intervals.of(interval);\n  }\n  @Override public Interval getTrueInterval(){\n    return Intervals.of(interval);\n  }\n}\n).collect(Collectors.toList()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 65,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 795,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 312,
        "endColumnNumber" : 6
      },
      "nodeContext" : "final List<LogicalSegment> filteredSegments=toolChest.filterSegments(Druids.newSegmentMetadataQueryBuilder().dataSource(\"foo\").merge(true).build(),ImmutableList.of(\"2000-01-01/P1D\",\"2000-01-04/P1D\",\"2000-01-09/P1D\",\"2000-01-09/P1D\").stream().map(interval -> new LogicalSegment(){\n  @Override public Interval getInterval(){\n    return Intervals.of(interval);\n  }\n  @Override public Interval getTrueInterval(){\n    return Intervals.of(interval);\n  }\n}\n).collect(Collectors.toList()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 72,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 283,
        "startColumnNumber" : 2,
        "endLineNumber" : 323,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final SegmentMetadataQueryConfig config=new SegmentMetadataQueryConfig();\n  final SegmentMetadataQueryQueryToolChest toolChest=new SegmentMetadataQueryQueryToolChest(config);\n  final List<LogicalSegment> filteredSegments=toolChest.filterSegments(Druids.newSegmentMetadataQueryBuilder().dataSource(\"foo\").merge(true).build(),ImmutableList.of(\"2000-01-01/P1D\",\"2000-01-04/P1D\",\"2000-01-09/P1D\",\"2000-01-09/P1D\").stream().map(interval -> new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(interval);\n    }\n    @Override public Interval getTrueInterval(){\n      return Intervals.of(interval);\n    }\n  }\n).collect(Collectors.toList()));\n  Assert.assertEquals(Period.weeks(1),config.getDefaultHistory());\n  Assert.assertEquals(ImmutableList.of(Intervals.of(\"2000-01-04/P1D\"),Intervals.of(\"2000-01-09/P1D\"),Intervals.of(\"2000-01-09/P1D\")),filteredSegments.stream().map(LogicalSegment::getInterval).collect(Collectors.toList()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1401,
        "startLineNumber" : 281,
        "startColumnNumber" : 2,
        "endLineNumber" : 323,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFilterSegments(){\n  final SegmentMetadataQueryConfig config=new SegmentMetadataQueryConfig();\n  final SegmentMetadataQueryQueryToolChest toolChest=new SegmentMetadataQueryQueryToolChest(config);\n  final List<LogicalSegment> filteredSegments=toolChest.filterSegments(Druids.newSegmentMetadataQueryBuilder().dataSource(\"foo\").merge(true).build(),ImmutableList.of(\"2000-01-01/P1D\",\"2000-01-04/P1D\",\"2000-01-09/P1D\",\"2000-01-09/P1D\").stream().map(interval -> new LogicalSegment(){\n    @Override public Interval getInterval(){\n      return Intervals.of(interval);\n    }\n    @Override public Interval getTrueInterval(){\n      return Intervals.of(interval);\n    }\n  }\n).collect(Collectors.toList()));\n  Assert.assertEquals(Period.weeks(1),config.getDefaultHistory());\n  Assert.assertEquals(ImmutableList.of(Intervals.of(\"2000-01-04/P1D\"),Intervals.of(\"2000-01-09/P1D\"),Intervals.of(\"2000-01-09/P1D\")),filteredSegments.stream().map(LogicalSegment::getInterval).collect(Collectors.toList()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 287,
        "startColumnNumber" : 50,
        "endLineNumber" : 312,
        "endColumnNumber" : 5
      },
      "nodeContext" : "toolChest.filterSegments(Druids.newSegmentMetadataQueryBuilder().dataSource(\"foo\").merge(true).build(),ImmutableList.of(\"2000-01-01/P1D\",\"2000-01-04/P1D\",\"2000-01-09/P1D\",\"2000-01-09/P1D\").stream().map(interval -> new LogicalSegment(){\n  @Override public Interval getInterval(){\n    return Intervals.of(interval);\n  }\n  @Override public Interval getTrueInterval(){\n    return Intervals.of(interval);\n  }\n}\n).collect(Collectors.toList()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 63,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.query.metadata.SegmentMetadataQueryQueryToolChest"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 287,
    "startColumnNumber" : 50,
    "endLineNumber" : 287,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}