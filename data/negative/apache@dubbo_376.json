{
  "id" : 376,
  "expression" : "future",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-remoting/dubbo-remoting-netty4/src/test/java/org/apache/dubbo/remoting/transport/netty4/ReplierDispatcherTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "future",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 108,
      "startColumnNumber" : 36,
      "endLineNumber" : 108,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 108,
        "startColumnNumber" : 36,
        "endLineNumber" : 108,
        "endColumnNumber" : 48
      },
      "nodeContext" : "future.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 108,
        "startColumnNumber" : 36,
        "endLineNumber" : 108,
        "endColumnNumber" : 59
      },
      "nodeContext" : "future.get().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Assertions.assertEquals(future.get().toString(),\"hello world\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assertions.assertEquals(future.get().toString(),\"hello world\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 106,
        "startColumnNumber" : 38,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  CompletableFuture<Object> future=client.request(new Data());\n  Assertions.assertEquals(future.get().toString(),\"hello world\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  CompletableFuture<Object> future=client.request(new Data());\n  Assertions.assertEquals(future.get().toString(),\"hello world\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 98,
        "startColumnNumber" : 55,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ExchangeChannel client=Exchangers.connect(URL.valueOf(\"exchange://localhost:\" + port + \"?\"+ CommonConstants.TIMEOUT_KEY+ \"=5000\"));\n  clients.put(Thread.currentThread().getName(),client);\n  MockResult result=(MockResult)client.request(new RpcMessage(DemoService.class.getName(),\"plus\",new Class<?>[]{int.class,int.class},new Object[]{55,25})).get();\n  Assertions.assertEquals(result.getResult(),80);\n  for (int i=0; i < 100; i++) {\n    client.request(new RpcMessage(DemoService.class.getName(),\"sayHello\",new Class<?>[]{String.class},new Object[]{\"qianlei\" + i}));\n  }\n  for (int i=0; i < 100; i++) {\n    CompletableFuture<Object> future=client.request(new Data());\n    Assertions.assertEquals(future.get().toString(),\"hello world\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void clientExchangeInfo(int port) throws Exception {\n  ExchangeChannel client=Exchangers.connect(URL.valueOf(\"exchange://localhost:\" + port + \"?\"+ CommonConstants.TIMEOUT_KEY+ \"=5000\"));\n  clients.put(Thread.currentThread().getName(),client);\n  MockResult result=(MockResult)client.request(new RpcMessage(DemoService.class.getName(),\"plus\",new Class<?>[]{int.class,int.class},new Object[]{55,25})).get();\n  Assertions.assertEquals(result.getResult(),80);\n  for (int i=0; i < 100; i++) {\n    client.request(new RpcMessage(DemoService.class.getName(),\"sayHello\",new Class<?>[]{String.class},new Object[]{\"qianlei\" + i}));\n  }\n  for (int i=0; i < 100; i++) {\n    CompletableFuture<Object> future=client.request(new Data());\n    Assertions.assertEquals(future.get().toString(),\"hello world\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 169,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 108,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assertions.assertEquals(future.get().toString(),\"hello world\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.CompletableFuture<java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 108,
    "startColumnNumber" : 36,
    "endLineNumber" : 108,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}