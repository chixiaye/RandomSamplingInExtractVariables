{
  "id" : 90,
  "expression" : "TestingUtils.TESTING_DURATION.toMillis()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/CancelPartitionRequestTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TestingUtils.TESTING_DURATION.toMillis()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 112,
      "startColumnNumber" : 28,
      "endLineNumber" : 112,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 112,
        "startColumnNumber" : 17,
        "endLineNumber" : 112,
        "endColumnNumber" : 92
      },
      "nodeContext" : "sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 112,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 92
      },
      "nodeContext" : "!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n  fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2214,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n  ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n  ResultPartitionID pid=new ResultPartitionID();\n  CountDownLatch sync=new CountDownLatch(1);\n  final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n  when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n    @Override public ResultSubpartitionView answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n      listener.notifyDataAvailable();\n      return view;\n    }\n  }\n);\n  NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n  serverAndClient=initServerAndClient(protocol);\n  Channel ch=connect(serverAndClient);\n  ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n  if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n    fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n  }\n  verify(view,times(1)).releaseAllResources();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n  ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n  ResultPartitionID pid=new ResultPartitionID();\n  CountDownLatch sync=new CountDownLatch(1);\n  final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n  when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n    @Override public ResultSubpartitionView answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n      listener.notifyDataAvailable();\n      return view;\n    }\n  }\n);\n  NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n  serverAndClient=initServerAndClient(protocol);\n  Channel ch=connect(serverAndClient);\n  ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n  if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n    fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n  }\n  verify(view,times(1)).releaseAllResources();\n}\n  finally {\n  shutdown(serverAndClient);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 194,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2348,
        "startLineNumber" : 69,
        "startColumnNumber" : 62,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NettyServerAndClient serverAndClient=null;\n  try {\n    TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n    ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n    ResultPartitionID pid=new ResultPartitionID();\n    CountDownLatch sync=new CountDownLatch(1);\n    final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n    when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n      @Override public ResultSubpartitionView answer(      InvocationOnMock invocationOnMock) throws Throwable {\n        BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n        listener.notifyDataAvailable();\n        return view;\n      }\n    }\n);\n    NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n    serverAndClient=initServerAndClient(protocol);\n    Channel ch=connect(serverAndClient);\n    ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n    if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n      fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n    }\n    verify(view,times(1)).releaseAllResources();\n  }\n  finally {\n    shutdown(serverAndClient);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2662,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies that requests for non-existing (failed/cancelled) input channels are properly cancelled. The receiver receives data, but there is no input channel to receive the data. This should cancel the request.\n */\n@Test public void testCancelPartitionRequest() throws Exception {\n  NettyServerAndClient serverAndClient=null;\n  try {\n    TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n    ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n    ResultPartitionID pid=new ResultPartitionID();\n    CountDownLatch sync=new CountDownLatch(1);\n    final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n    when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n      @Override public ResultSubpartitionView answer(      InvocationOnMock invocationOnMock) throws Throwable {\n        BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n        listener.notifyDataAvailable();\n        return view;\n      }\n    }\n);\n    NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n    serverAndClient=initServerAndClient(protocol);\n    Channel ch=connect(serverAndClient);\n    ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n    if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n      fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n    }\n    verify(view,times(1)).releaseAllResources();\n  }\n  finally {\n    shutdown(serverAndClient);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 112,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 92
      },
      "nodeContext" : "!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "long"
  }, {
    "nodeContext" : "TestingUtils.TESTING_DURATION.toMillis()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 115,
      "startColumnNumber" : 34,
      "endLineNumber" : 115,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 114,
        "startColumnNumber" : 24,
        "endLineNumber" : 116,
        "endColumnNumber" : 81
      },
      "nodeContext" : "\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 82
      },
      "nodeContext" : "fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 113,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 112,
        "startColumnNumber" : 94,
        "endLineNumber" : 117,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n  fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2214,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n  ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n  ResultPartitionID pid=new ResultPartitionID();\n  CountDownLatch sync=new CountDownLatch(1);\n  final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n  when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n    @Override public ResultSubpartitionView answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n      listener.notifyDataAvailable();\n      return view;\n    }\n  }\n);\n  NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n  serverAndClient=initServerAndClient(protocol);\n  Channel ch=connect(serverAndClient);\n  ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n  if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n    fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n  }\n  verify(view,times(1)).releaseAllResources();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2277,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n  ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n  ResultPartitionID pid=new ResultPartitionID();\n  CountDownLatch sync=new CountDownLatch(1);\n  final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n  when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n    @Override public ResultSubpartitionView answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n      listener.notifyDataAvailable();\n      return view;\n    }\n  }\n);\n  NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n  serverAndClient=initServerAndClient(protocol);\n  Channel ch=connect(serverAndClient);\n  ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n  if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n    fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n  }\n  verify(view,times(1)).releaseAllResources();\n}\n  finally {\n  shutdown(serverAndClient);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 194,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2348,
        "startLineNumber" : 69,
        "startColumnNumber" : 62,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NettyServerAndClient serverAndClient=null;\n  try {\n    TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n    ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n    ResultPartitionID pid=new ResultPartitionID();\n    CountDownLatch sync=new CountDownLatch(1);\n    final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n    when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n      @Override public ResultSubpartitionView answer(      InvocationOnMock invocationOnMock) throws Throwable {\n        BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n        listener.notifyDataAvailable();\n        return view;\n      }\n    }\n);\n    NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n    serverAndClient=initServerAndClient(protocol);\n    Channel ch=connect(serverAndClient);\n    ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n    if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n      fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n    }\n    verify(view,times(1)).releaseAllResources();\n  }\n  finally {\n    shutdown(serverAndClient);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2662,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Verifies that requests for non-existing (failed/cancelled) input channels are properly cancelled. The receiver receives data, but there is no input channel to receive the data. This should cancel the request.\n */\n@Test public void testCancelPartitionRequest() throws Exception {\n  NettyServerAndClient serverAndClient=null;\n  try {\n    TestPooledBufferProvider outboundBuffers=new TestPooledBufferProvider(16);\n    ResultPartitionManager partitions=mock(ResultPartitionManager.class);\n    ResultPartitionID pid=new ResultPartitionID();\n    CountDownLatch sync=new CountDownLatch(1);\n    final ResultSubpartitionView view=spy(new InfiniteSubpartitionView(outboundBuffers,sync));\n    when(partitions.createSubpartitionView(eq(pid),eq(0),any(BufferAvailabilityListener.class))).thenAnswer(new Answer<ResultSubpartitionView>(){\n      @Override public ResultSubpartitionView answer(      InvocationOnMock invocationOnMock) throws Throwable {\n        BufferAvailabilityListener listener=(BufferAvailabilityListener)invocationOnMock.getArguments()[2];\n        listener.notifyDataAvailable();\n        return view;\n      }\n    }\n);\n    NettyProtocol protocol=new NettyProtocol(partitions,mock(TaskEventDispatcher.class));\n    serverAndClient=initServerAndClient(protocol);\n    Channel ch=connect(serverAndClient);\n    ch.writeAndFlush(new PartitionRequest(pid,0,new InputChannelID(),Integer.MAX_VALUE)).await();\n    if (!sync.await(TestingUtils.TESTING_DURATION.toMillis(),TimeUnit.MILLISECONDS)) {\n      fail(\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\");\n    }\n    verify(view,times(1)).releaseAllResources();\n  }\n  finally {\n    shutdown(serverAndClient);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 114,
        "startColumnNumber" : 24,
        "endLineNumber" : 116,
        "endColumnNumber" : 81
      },
      "nodeContext" : "\"Timed out after waiting for \" + TestingUtils.TESTING_DURATION.toMillis() + \" ms to be notified about cancelled partition.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 112,
    "startColumnNumber" : 28,
    "endLineNumber" : 112,
    "endColumnNumber" : 68
  }, {
    "charLength" : 40,
    "startLineNumber" : 115,
    "startColumnNumber" : 34,
    "endLineNumber" : 115,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}