{
  "id" : 55,
  "expression" : "name",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "d596df37371dcf6acc585d631af9a57c59a2279d",
  "filePath" : "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "name",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 350,
      "startColumnNumber" : 44,
      "endLineNumber" : 350,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 350,
        "startColumnNumber" : 24,
        "endLineNumber" : 350,
        "endColumnNumber" : 49
      },
      "nodeContext" : "paramNames.contains(name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 350,
        "startColumnNumber" : 23,
        "endLineNumber" : 350,
        "endColumnNumber" : 49
      },
      "nodeContext" : "!paramNames.contains(name)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 349,
        "startColumnNumber" : 52,
        "endLineNumber" : 350,
        "endColumnNumber" : 49
      },
      "nodeContext" : "firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 349,
        "startColumnNumber" : 51,
        "endLineNumber" : 350,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 349,
        "startColumnNumber" : 16,
        "endLineNumber" : 350,
        "endColumnNumber" : 50
      },
      "nodeContext" : "firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 761,
        "startLineNumber" : 349,
        "startColumnNumber" : 12,
        "endLineNumber" : 359,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n  incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n}\n else {\n  usedParamNames.add(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 345,
        "startColumnNumber" : 40,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Expression.Part firstPart=expression.getParts().get(0);\n  String name=firstPart.getName();\n  if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!expression.hasNamespace()) {\n  Expression.Part firstPart=expression.getParts().get(0);\n  String name=firstPart.getName();\n  if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 341,
        "startColumnNumber" : 40,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part firstPart=expression.getParts().get(0);\n    String name=firstPart.getName();\n    if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateExpression(BuildProducer<IncorrectExpressionBuildItem> incorrectExpressions,MessageBundleMethodBuildItem messageBundleMethod,Expression expression,Set<String> paramNames,Set<String> usedParamNames){\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part firstPart=expression.getParts().get(0);\n    String name=firstPart.getName();\n    if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 350,
        "startColumnNumber" : 23,
        "endLineNumber" : 350,
        "endColumnNumber" : 49
      },
      "nodeContext" : "!paramNames.contains(name)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "name",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 353,
      "startColumnNumber" : 24,
      "endLineNumber" : 353,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 353,
        "startColumnNumber" : 24,
        "endLineNumber" : 355,
        "endColumnNumber" : 79
      },
      "nodeContext" : "name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 352,
        "startColumnNumber" : 45,
        "endLineNumber" : 356,
        "endColumnNumber" : 47
      },
      "nodeContext" : "new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 352,
        "startColumnNumber" : 16,
        "endLineNumber" : 356,
        "endColumnNumber" : 48
      },
      "nodeContext" : "incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 352,
        "startColumnNumber" : 16,
        "endLineNumber" : 356,
        "endColumnNumber" : 49
      },
      "nodeContext" : "incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 350,
        "startColumnNumber" : 52,
        "endLineNumber" : 357,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 761,
        "startLineNumber" : 349,
        "startColumnNumber" : 12,
        "endLineNumber" : 359,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n  incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n}\n else {\n  usedParamNames.add(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 345,
        "startColumnNumber" : 40,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Expression.Part firstPart=expression.getParts().get(0);\n  String name=firstPart.getName();\n  if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!expression.hasNamespace()) {\n  Expression.Part firstPart=expression.getParts().get(0);\n  String name=firstPart.getName();\n  if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 341,
        "startColumnNumber" : 40,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part firstPart=expression.getParts().get(0);\n    String name=firstPart.getName();\n    if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateExpression(BuildProducer<IncorrectExpressionBuildItem> incorrectExpressions,MessageBundleMethodBuildItem messageBundleMethod,Expression expression,Set<String> paramNames,Set<String> usedParamNames){\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part firstPart=expression.getParts().get(0);\n    String name=firstPart.getName();\n    if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 353,
        "startColumnNumber" : 24,
        "endLineNumber" : 355,
        "endColumnNumber" : 79
      },
      "nodeContext" : "name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "name",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 358,
      "startColumnNumber" : 35,
      "endLineNumber" : 358,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 358,
        "startColumnNumber" : 16,
        "endLineNumber" : 358,
        "endColumnNumber" : 40
      },
      "nodeContext" : "usedParamNames.add(name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 358,
        "startColumnNumber" : 16,
        "endLineNumber" : 358,
        "endColumnNumber" : 41
      },
      "nodeContext" : "usedParamNames.add(name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 357,
        "startColumnNumber" : 19,
        "endLineNumber" : 359,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  usedParamNames.add(name);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 761,
        "startLineNumber" : 349,
        "startColumnNumber" : 12,
        "endLineNumber" : 359,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n  incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n}\n else {\n  usedParamNames.add(name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 345,
        "startColumnNumber" : 40,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Expression.Part firstPart=expression.getParts().get(0);\n  String name=firstPart.getName();\n  if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 345,
        "startColumnNumber" : 8,
        "endLineNumber" : 360,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!expression.hasNamespace()) {\n  Expression.Part firstPart=expression.getParts().get(0);\n  String name=firstPart.getName();\n  if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n    incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n  }\n else {\n    usedParamNames.add(name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 341,
        "startColumnNumber" : 40,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part firstPart=expression.getParts().get(0);\n    String name=firstPart.getName();\n    if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1753,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 369,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateExpression(BuildProducer<IncorrectExpressionBuildItem> incorrectExpressions,MessageBundleMethodBuildItem messageBundleMethod,Expression expression,Set<String> paramNames,Set<String> usedParamNames){\n  if (expression.isLiteral()) {\n    return;\n  }\n  if (!expression.hasNamespace()) {\n    Expression.Part firstPart=expression.getParts().get(0);\n    String name=firstPart.getName();\n    if (firstPart.getTypeInfo() == null || (firstPart.getTypeInfo().startsWith(\"\" + Expressions.TYPE_INFO_SEPARATOR) && !paramNames.contains(name))) {\n      incorrectExpressions.produce(new IncorrectExpressionBuildItem(expression.toOriginalString(),name + \" is not a parameter of the message bundle method \" + messageBundleMethod.getMethod().declaringClass().name()+ \"#\"+ messageBundleMethod.getMethod().name()+ \"()\",expression.getOrigin()));\n    }\n else {\n      usedParamNames.add(name);\n    }\n  }\n  for (  Part part : expression.getParts()) {\n    if (part.isVirtualMethod()) {\n      for (      Expression param : part.asVirtualMethod().getParameters()) {\n        validateExpression(incorrectExpressions,messageBundleMethod,param,paramNames,usedParamNames);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 358,
        "startColumnNumber" : 16,
        "endLineNumber" : 358,
        "endColumnNumber" : 41
      },
      "nodeContext" : "usedParamNames.add(name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 350,
    "startColumnNumber" : 44,
    "endLineNumber" : 350,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 353,
    "startColumnNumber" : 24,
    "endLineNumber" : 353,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 358,
    "startColumnNumber" : 35,
    "endLineNumber" : 358,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}