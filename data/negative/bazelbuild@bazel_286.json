{
  "id" : 286,
  "expression" : "listOfLists.stream().flatMap(List::stream)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/bazel/rules/ninja/file/ParallelFileProcessing.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "listOfLists.stream().flatMap(List::stream)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 118,
      "startColumnNumber" : 8,
      "endLineNumber" : 118,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 79
      },
      "nodeContext" : "listOfLists.stream().flatMap(List::stream).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 117,
        "startColumnNumber" : 23,
        "endLineNumber" : 118,
        "endColumnNumber" : 79
      },
      "nodeContext" : "fragments=listOfLists.stream().flatMap(List::stream).collect(Collectors.toList())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 117,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 80
      },
      "nodeContext" : "List<FileFragment> fragments=listOfLists.stream().flatMap(List::stream).collect(Collectors.toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 95,
        "startColumnNumber" : 99,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (parameters.readBlockSize == 0) {\n    return;\n  }\n  DeclarationAssembler assembler=new DeclarationAssembler(tokenConsumerFactory.get());\n  CollectingListFuture<List<FileFragment>,GenericParsingException> future=new CollectingListFuture<>(GenericParsingException.class);\n  List<List<FileFragment>> listOfLists;\n  long offset=0;\n  boolean keepReading=true;\n  while (keepReading) {\n    ByteBuffer bb=ByteBuffer.allocateDirect(parameters.getReadBlockSize());\n    keepReading=readFromChannel(channel,bb);\n    if (bb.position() > 0) {\n      bb.flip();\n      tokenizeFragments(bb.asReadOnlyBuffer(),offset,future);\n      offset+=bb.limit();\n    }\n  }\n  listOfLists=future.getResult();\n  List<FileFragment> fragments=listOfLists.stream().flatMap(List::stream).collect(Collectors.toList());\n  assembler.wrapUp(fragments);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void processFileImpl() throws InterruptedException, IOException, GenericParsingException {\n  if (parameters.readBlockSize == 0) {\n    return;\n  }\n  DeclarationAssembler assembler=new DeclarationAssembler(tokenConsumerFactory.get());\n  CollectingListFuture<List<FileFragment>,GenericParsingException> future=new CollectingListFuture<>(GenericParsingException.class);\n  List<List<FileFragment>> listOfLists;\n  long offset=0;\n  boolean keepReading=true;\n  while (keepReading) {\n    ByteBuffer bb=ByteBuffer.allocateDirect(parameters.getReadBlockSize());\n    keepReading=readFromChannel(channel,bb);\n    if (bb.position() > 0) {\n      bb.flip();\n      tokenizeFragments(bb.asReadOnlyBuffer(),offset,future);\n      offset+=bb.limit();\n    }\n  }\n  listOfLists=future.getResult();\n  List<FileFragment> fragments=listOfLists.stream().flatMap(List::stream).collect(Collectors.toList());\n  assembler.wrapUp(fragments);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 79
      },
      "nodeContext" : "listOfLists.stream().flatMap(List::stream).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.util.stream.Stream<com.google.devtools.build.lib.bazel.rules.ninja.file.FileFragment>"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 118,
    "startColumnNumber" : 8,
    "endLineNumber" : 118,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}