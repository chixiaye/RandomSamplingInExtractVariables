{
  "id" : 59,
  "expression" : "lexer.token()",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/serializer/ArrayCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "lexer.token()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 136,
      "startColumnNumber" : 20,
      "endLineNumber" : 136,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 136,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 33
      },
      "nodeContext" : "token=lexer.token()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 34
      },
      "nodeContext" : "int token=lexer.token();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1310,
        "startLineNumber" : 133,
        "startColumnNumber" : 83,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.NULL) {\n    lexer.nextToken(JSONToken.COMMA);\n    return null;\n  }\n  if (type == char[].class) {\n    if (token == JSONToken.LITERAL_STRING) {\n      String val=lexer.stringVal();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)val.toCharArray();\n    }\n    if (token == JSONToken.LITERAL_INT) {\n      Number val=lexer.integerValue();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)val.toString().toCharArray();\n    }\n    Object value=parser.parse();\n    return (T)JSON.toJSONString(value).toCharArray();\n  }\n  if (token == JSONToken.LITERAL_STRING) {\n    byte[] bytes=lexer.bytesValue();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)bytes;\n  }\n  Class clazz=(Class)type;\n  Class componentClass=clazz.getComponentType();\n  JSONArray array=new JSONArray();\n  parser.parseArray(componentClass,array,fieldName);\n  return (T)toObjectArray(parser,componentClass,array);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1441,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public <T>T deserialze(DefaultJSONParser parser,Type type,Object fieldName){\n  final JSONLexer lexer=parser.lexer;\n  int token=lexer.token();\n  if (token == JSONToken.NULL) {\n    lexer.nextToken(JSONToken.COMMA);\n    return null;\n  }\n  if (type == char[].class) {\n    if (token == JSONToken.LITERAL_STRING) {\n      String val=lexer.stringVal();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)val.toCharArray();\n    }\n    if (token == JSONToken.LITERAL_INT) {\n      Number val=lexer.integerValue();\n      lexer.nextToken(JSONToken.COMMA);\n      return (T)val.toString().toCharArray();\n    }\n    Object value=parser.parse();\n    return (T)JSON.toJSONString(value).toCharArray();\n  }\n  if (token == JSONToken.LITERAL_STRING) {\n    byte[] bytes=lexer.bytesValue();\n    lexer.nextToken(JSONToken.COMMA);\n    return (T)bytes;\n  }\n  Class clazz=(Class)type;\n  Class componentClass=clazz.getComponentType();\n  JSONArray array=new JSONArray();\n  parser.parseArray(componentClass,array,fieldName);\n  return (T)toObjectArray(parser,componentClass,array);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 136,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 34
      },
      "nodeContext" : "int token=lexer.token();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 136,
    "startColumnNumber" : 20,
    "endLineNumber" : 136,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}