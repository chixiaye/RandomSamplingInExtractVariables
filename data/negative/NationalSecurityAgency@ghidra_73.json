{
  "id" : 73,
  "expression" : "new MDVFAdjustor(dmang)",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/MicrosoftDmang/src/main/java/mdemangler/typeinfo/MDTypeInfoParser.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new MDVFAdjustor(dmang)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 169,
      "startColumnNumber" : 15,
      "endLineNumber" : 169,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 169,
        "startColumnNumber" : 4,
        "endLineNumber" : 169,
        "endColumnNumber" : 38
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 169,
        "startColumnNumber" : 4,
        "endLineNumber" : 169,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5511,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 243,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (code) {\ncase '$':  dmang.increment();\ntypeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 542,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5888,
        "startLineNumber" : 44,
        "startColumnNumber" : 78,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MDTypeInfo typeInfo;\n  boolean isBased=false;\n  if (dmang.peek() == '_') {\n    isBased=true;\n    dmang.increment();\n  }\n  char code=dmang.peek();\nswitch (code) {\ncase '$':    dmang.increment();\n  typeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\nif (isBased && (typeInfo instanceof MDFunctionInfo)) {\nMDBasedAttribute based=new MDBasedAttribute(dmang);\nbased.parse();\n((MDFunctionInfo)typeInfo).setBased(based);\n}\nreturn typeInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 608,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6433,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This method parses the data sequence to determine the appropriate MDTypeInfo to continue parsing.  The method can be recursive, so rttiNum is passed into the recursion.\n * @param dmang The MDMang demangler control.\n * @param rttiNum The RTTI number currently seen in the processing (-1 if none)\n * @return The MDTypeInfo created for the data sequence being parsed.\n * @throws MDException For a host of data-driven parsing reasons.\n */\npublic static MDTypeInfo parse(MDMang dmang,int rttiNum) throws MDException {\n  MDTypeInfo typeInfo;\n  boolean isBased=false;\n  if (dmang.peek() == '_') {\n    isBased=true;\n    dmang.increment();\n  }\n  char code=dmang.peek();\nswitch (code) {\ncase '$':    dmang.increment();\n  typeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\nif (isBased && (typeInfo instanceof MDFunctionInfo)) {\nMDBasedAttribute based=new MDBasedAttribute(dmang);\nbased.parse();\n((MDFunctionInfo)typeInfo).setBased(based);\n}\nreturn typeInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 624,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 169,
        "startColumnNumber" : 4,
        "endLineNumber" : 169,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mdemangler.typeinfo.MDVFAdjustor"
  }, {
    "nodeContext" : "new MDVFAdjustor(dmang)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 195,
      "startColumnNumber" : 15,
      "endLineNumber" : 195,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 38
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5511,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 243,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (code) {\ncase '$':  dmang.increment();\ntypeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 542,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5888,
        "startLineNumber" : 44,
        "startColumnNumber" : 78,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MDTypeInfo typeInfo;\n  boolean isBased=false;\n  if (dmang.peek() == '_') {\n    isBased=true;\n    dmang.increment();\n  }\n  char code=dmang.peek();\nswitch (code) {\ncase '$':    dmang.increment();\n  typeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\nif (isBased && (typeInfo instanceof MDFunctionInfo)) {\nMDBasedAttribute based=new MDBasedAttribute(dmang);\nbased.parse();\n((MDFunctionInfo)typeInfo).setBased(based);\n}\nreturn typeInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 608,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6433,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This method parses the data sequence to determine the appropriate MDTypeInfo to continue parsing.  The method can be recursive, so rttiNum is passed into the recursion.\n * @param dmang The MDMang demangler control.\n * @param rttiNum The RTTI number currently seen in the processing (-1 if none)\n * @return The MDTypeInfo created for the data sequence being parsed.\n * @throws MDException For a host of data-driven parsing reasons.\n */\npublic static MDTypeInfo parse(MDMang dmang,int rttiNum) throws MDException {\n  MDTypeInfo typeInfo;\n  boolean isBased=false;\n  if (dmang.peek() == '_') {\n    isBased=true;\n    dmang.increment();\n  }\n  char code=dmang.peek();\nswitch (code) {\ncase '$':    dmang.increment();\n  typeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\nif (isBased && (typeInfo instanceof MDFunctionInfo)) {\nMDBasedAttribute based=new MDBasedAttribute(dmang);\nbased.parse();\n((MDFunctionInfo)typeInfo).setBased(based);\n}\nreturn typeInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 624,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 195,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mdemangler.typeinfo.MDVFAdjustor"
  }, {
    "nodeContext" : "new MDVFAdjustor(dmang)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 221,
      "startColumnNumber" : 15,
      "endLineNumber" : 221,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 38
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5511,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 243,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (code) {\ncase '$':  dmang.increment();\ntypeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 542,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5888,
        "startLineNumber" : 44,
        "startColumnNumber" : 78,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MDTypeInfo typeInfo;\n  boolean isBased=false;\n  if (dmang.peek() == '_') {\n    isBased=true;\n    dmang.increment();\n  }\n  char code=dmang.peek();\nswitch (code) {\ncase '$':    dmang.increment();\n  typeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\nif (isBased && (typeInfo instanceof MDFunctionInfo)) {\nMDBasedAttribute based=new MDBasedAttribute(dmang);\nbased.parse();\n((MDFunctionInfo)typeInfo).setBased(based);\n}\nreturn typeInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 608,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6433,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 250,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * This method parses the data sequence to determine the appropriate MDTypeInfo to continue parsing.  The method can be recursive, so rttiNum is passed into the recursion.\n * @param dmang The MDMang demangler control.\n * @param rttiNum The RTTI number currently seen in the processing (-1 if none)\n * @return The MDTypeInfo created for the data sequence being parsed.\n * @throws MDException For a host of data-driven parsing reasons.\n */\npublic static MDTypeInfo parse(MDMang dmang,int rttiNum) throws MDException {\n  MDTypeInfo typeInfo;\n  boolean isBased=false;\n  if (dmang.peek() == '_') {\n    isBased=true;\n    dmang.increment();\n  }\n  char code=dmang.peek();\nswitch (code) {\ncase '$':    dmang.increment();\n  typeInfo=parseSpecialHandlingFunction(dmang,rttiNum);\nbreak;\ncase '0':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase '1':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase '2':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase '3':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '4':dmang.increment();\ntypeInfo=new MDVariableInfo(dmang);\nbreak;\ncase '5':dmang.increment();\ntypeInfo=new MDGuard(dmang);\nbreak;\ncase '6':dmang.increment();\nif (rttiNum == 4) {\ntypeInfo=new MDRTTI4(dmang);\n}\n else {\ntypeInfo=new MDVFTable(dmang);\n}\nbreak;\ncase '7':dmang.increment();\ntypeInfo=new MDVBTable(dmang);\nbreak;\ncase '8':dmang.increment();\nswitch (rttiNum) {\ncase 0:typeInfo=new MDRTTI0(dmang);\nbreak;\ncase 1:typeInfo=new MDRTTI1(dmang);\nbreak;\ncase 2:typeInfo=new MDRTTI2(dmang);\nbreak;\ncase 3:typeInfo=new MDRTTI3(dmang);\nbreak;\ndefault:typeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nbreak;\ncase '9':dmang.increment();\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\ncase 'A':case 'B':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'C':case 'D':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setStatic();\nbreak;\ncase 'E':case 'F':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPrivate();\ntypeInfo.setVirtual();\nbreak;\ncase 'G':case 'H':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPrivate();\nbreak;\ncase 'I':case 'J':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'K':case 'L':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setStatic();\nbreak;\ncase 'M':case 'N':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setProtected();\ntypeInfo.setVirtual();\nbreak;\ncase 'O':case 'P':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setProtected();\nbreak;\ncase 'Q':case 'R':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'S':case 'T':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setStatic();\nbreak;\ncase 'U':case 'V':dmang.increment();\ntypeInfo=new MDMemberFunctionInfo(dmang);\ntypeInfo.setPublic();\ntypeInfo.setVirtual();\nbreak;\ncase 'W':case 'X':dmang.increment();\ntypeInfo=new MDVFAdjustor(dmang);\ntypeInfo.setPublic();\nbreak;\ncase 'Y':case 'Z':dmang.increment();\ntypeInfo=new MDFunctionInfo(dmang);\ntypeInfo.setNonMember();\nbreak;\ndefault:if (dmang.allowMDTypeInfoParserDefault()) {\ntypeInfo=new MDTypeInfo(dmang);\nbreak;\n}\nthrow new MDException(\"Invalid MDTypeInfo, unknown case: \" + code);\n}\nif (isBased && (typeInfo instanceof MDFunctionInfo)) {\nMDBasedAttribute based=new MDBasedAttribute(dmang);\nbased.parse();\n((MDFunctionInfo)typeInfo).setBased(based);\n}\nreturn typeInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 624,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 221,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 39
      },
      "nodeContext" : "typeInfo=new MDVFAdjustor(dmang);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mdemangler.typeinfo.MDVFAdjustor"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 169,
    "startColumnNumber" : 15,
    "endLineNumber" : 169,
    "endColumnNumber" : 38
  }, {
    "charLength" : 23,
    "startLineNumber" : 195,
    "startColumnNumber" : 15,
    "endLineNumber" : 195,
    "endColumnNumber" : 38
  }, {
    "charLength" : 23,
    "startLineNumber" : 221,
    "startColumnNumber" : 15,
    "endLineNumber" : 221,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}