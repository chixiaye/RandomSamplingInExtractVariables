{
  "id" : 278,
  "expression" : "transitionsBetween(bottomRight,c1).getTransitions()",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/datamatrix/detector/Detector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "transitionsBetween(bottomRight,c1).getTransitions()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 251,
      "startColumnNumber" : 31,
      "endLineNumber" : 251,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 251,
        "startColumnNumber" : 14,
        "endLineNumber" : 251,
        "endColumnNumber" : 83
      },
      "nodeContext" : "dimensionRight - transitionsBetween(bottomRight,c1).getTransitions()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 251,
        "startColumnNumber" : 5,
        "endLineNumber" : 251,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 250,
        "startColumnNumber" : 13,
        "endLineNumber" : 251,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 250,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 84
      },
      "nodeContext" : "l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 250,
        "startColumnNumber" : 4,
        "endLineNumber" : 251,
        "endColumnNumber" : 85
      },
      "nodeContext" : "int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1222,
        "startLineNumber" : 224,
        "startColumnNumber" : 69,
        "endLineNumber" : 260,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;\n  int norm=distance(topLeft,topRight);\n  float cos=(topRight.getX() - topLeft.getX()) / norm;\n  float sin=(topRight.getY() - topLeft.getY()) / norm;\n  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);\n  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;\n  norm=distance(bottomRight,topRight);\n  cos=(topRight.getX() - bottomRight.getX()) / norm;\n  sin=(topRight.getY() - bottomRight.getY()) / norm;\n  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);\n  if (!isValid(c1)) {\n    if (isValid(c2)) {\n      return c2;\n    }\n    return null;\n  }\n  if (!isValid(c2)) {\n    return c1;\n  }\n  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());\n  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());\n  if (l1 <= l2) {\n    return c1;\n  }\n  return c2;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1797,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 260,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Calculates the position of the white top right module using the output of the rectangle detector for a rectangular matrix\n */\nprivate ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){\n  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;\n  int norm=distance(topLeft,topRight);\n  float cos=(topRight.getX() - topLeft.getX()) / norm;\n  float sin=(topRight.getY() - topLeft.getY()) / norm;\n  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);\n  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;\n  norm=distance(bottomRight,topRight);\n  cos=(topRight.getX() - bottomRight.getX()) / norm;\n  sin=(topRight.getY() - bottomRight.getY()) / norm;\n  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);\n  if (!isValid(c1)) {\n    if (isValid(c2)) {\n      return c2;\n    }\n    return null;\n  }\n  if (!isValid(c2)) {\n    return c1;\n  }\n  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());\n  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());\n  if (l1 <= l2) {\n    return c1;\n  }\n  return c2;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 251,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 251,
        "startColumnNumber" : 5,
        "endLineNumber" : 251,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 251,
    "startColumnNumber" : 31,
    "endLineNumber" : 251,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}