{
  "id" : 120,
  "expression" : "Math",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator-cli/src/main/java/org/openapitools/codegen/cmd/GenerateBatch.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 167,
      "startColumnNumber" : 27,
      "endLineNumber" : 167,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 167,
        "startColumnNumber" : 27,
        "endLineNumber" : 167,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Math.min(Math.max(timeout,1),30)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 167,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 61
      },
      "nodeContext" : "awaitFor=Math.min(Math.max(timeout,1),30)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 62
      },
      "nodeContext" : "int awaitFor=Math.min(Math.max(timeout,1),30);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (timeout == null)   timeout=10;\n  int awaitFor=Math.min(Math.max(timeout,1),30);\n  executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n  int failCount=failures.intValue();\n  if (failCount > 0) {\n    System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n    System.exit(1);\n  }\n else {\n    System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 164,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (timeout == null)   timeout=10;\n  int awaitFor=Math.min(Math.max(timeout,1),30);\n  executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n  int failCount=failures.intValue();\n  if (failCount > 0) {\n    System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n    System.exit(1);\n  }\n else {\n    System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n  }\n}\n catch (InterruptedException e) {\n  e.printStackTrace();\n  Thread.currentThread().interrupt();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3767,
        "startLineNumber" : 106,
        "startColumnNumber" : 26,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (configs.size() < 1) {\n    LOGGER.error(\"No configuration file inputs specified\");\n    System.exit(1);\n  }\n  int cores=Runtime.getRuntime().availableProcessors();\n  int numThreads=2 * cores;\n  if (null != threads && (threads > 0 && threads < Thread.activeCount())) {\n    numThreads=threads;\n  }\n  Path rootDir;\n  if (root != null) {\n    rootDir=Paths.get(root);\n  }\n else {\n    rootDir=Paths.get(System.getProperty(\"user.dir\"));\n  }\n  File includesDir;\n  if (includes != null) {\n    includesDir=new File(includes);\n  }\n else {\n    Path first=Paths.get(configs.get(0));\n    if (Files.isRegularFile(first) && !Files.isSymbolicLink(first)) {\n      includesDir=first.toAbsolutePath().getParent().toFile();\n    }\n else {\n      includesDir=rootDir.toFile();\n    }\n  }\n  LOGGER.info(String.format(Locale.ROOT,\"Batch generation using up to %d threads.\\nIncludes: %s\\nRoot: %s\",numThreads,includesDir.getAbsolutePath(),rootDir.toAbsolutePath().toString()));\n  SimpleModule module=getCustomDeserializationModel(includesDir);\n  List<CodegenConfigurator> configurators=configs.stream().map(config -> CodegenConfigurator.fromFile(config,module)).collect(Collectors.toList());\n  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();\n  Stream.of(Logger.ROOT_LOGGER_NAME,\"io.swagger\",\"org.openapitools\").map(lc::getLogger).forEach(logger -> logger.setLevel(Level.ERROR));\n  ExecutorService executor=Executors.newFixedThreadPool(numThreads);\n  configurators.forEach(configurator -> {\n    GenerationRunner runner=new GenerationRunner(configurator,rootDir,Boolean.TRUE.equals(failFast),Boolean.TRUE.equals(clean));\n    executor.execute(runner);\n  }\n);\n  executor.shutdown();\n  try {\n    if (timeout == null)     timeout=10;\n    int awaitFor=Math.min(Math.max(timeout,1),30);\n    executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n    int failCount=failures.intValue();\n    if (failCount > 0) {\n      System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n      System.exit(1);\n    }\n else {\n      System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n    }\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n    Thread.currentThread().interrupt();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4201,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * When an object implementing interface <code>Runnable</code> is used to create a thread, starting the thread causes the object's <code>run</code> method to be called in that separately executing thread. <p> The general contract of the method <code>run</code> is that it may take any action whatsoever.\n * @see Thread#run()\n */\n@Override public void execute(){\n  if (configs.size() < 1) {\n    LOGGER.error(\"No configuration file inputs specified\");\n    System.exit(1);\n  }\n  int cores=Runtime.getRuntime().availableProcessors();\n  int numThreads=2 * cores;\n  if (null != threads && (threads > 0 && threads < Thread.activeCount())) {\n    numThreads=threads;\n  }\n  Path rootDir;\n  if (root != null) {\n    rootDir=Paths.get(root);\n  }\n else {\n    rootDir=Paths.get(System.getProperty(\"user.dir\"));\n  }\n  File includesDir;\n  if (includes != null) {\n    includesDir=new File(includes);\n  }\n else {\n    Path first=Paths.get(configs.get(0));\n    if (Files.isRegularFile(first) && !Files.isSymbolicLink(first)) {\n      includesDir=first.toAbsolutePath().getParent().toFile();\n    }\n else {\n      includesDir=rootDir.toFile();\n    }\n  }\n  LOGGER.info(String.format(Locale.ROOT,\"Batch generation using up to %d threads.\\nIncludes: %s\\nRoot: %s\",numThreads,includesDir.getAbsolutePath(),rootDir.toAbsolutePath().toString()));\n  SimpleModule module=getCustomDeserializationModel(includesDir);\n  List<CodegenConfigurator> configurators=configs.stream().map(config -> CodegenConfigurator.fromFile(config,module)).collect(Collectors.toList());\n  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();\n  Stream.of(Logger.ROOT_LOGGER_NAME,\"io.swagger\",\"org.openapitools\").map(lc::getLogger).forEach(logger -> logger.setLevel(Level.ERROR));\n  ExecutorService executor=Executors.newFixedThreadPool(numThreads);\n  configurators.forEach(configurator -> {\n    GenerationRunner runner=new GenerationRunner(configurator,rootDir,Boolean.TRUE.equals(failFast),Boolean.TRUE.equals(clean));\n    executor.execute(runner);\n  }\n);\n  executor.shutdown();\n  try {\n    if (timeout == null)     timeout=10;\n    int awaitFor=Math.min(Math.max(timeout,1),30);\n    executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n    int failCount=failures.intValue();\n    if (failCount > 0) {\n      System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n      System.exit(1);\n    }\n else {\n      System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n    }\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n    Thread.currentThread().interrupt();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 62
      },
      "nodeContext" : "int awaitFor=Math.min(Math.max(timeout,1),30);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  }, {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 167,
      "startColumnNumber" : 36,
      "endLineNumber" : 167,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 167,
        "startColumnNumber" : 36,
        "endLineNumber" : 167,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Math.max(timeout,1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 167,
        "startColumnNumber" : 27,
        "endLineNumber" : 167,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Math.min(Math.max(timeout,1),30)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 167,
        "startColumnNumber" : 16,
        "endLineNumber" : 167,
        "endColumnNumber" : 61
      },
      "nodeContext" : "awaitFor=Math.min(Math.max(timeout,1),30)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 62
      },
      "nodeContext" : "int awaitFor=Math.min(Math.max(timeout,1),30);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 164,
        "startColumnNumber" : 12,
        "endLineNumber" : 178,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (timeout == null)   timeout=10;\n  int awaitFor=Math.min(Math.max(timeout,1),30);\n  executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n  int failCount=failures.intValue();\n  if (failCount > 0) {\n    System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n    System.exit(1);\n  }\n else {\n    System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 164,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (timeout == null)   timeout=10;\n  int awaitFor=Math.min(Math.max(timeout,1),30);\n  executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n  int failCount=failures.intValue();\n  if (failCount > 0) {\n    System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n    System.exit(1);\n  }\n else {\n    System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n  }\n}\n catch (InterruptedException e) {\n  e.printStackTrace();\n  Thread.currentThread().interrupt();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3767,
        "startLineNumber" : 106,
        "startColumnNumber" : 26,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (configs.size() < 1) {\n    LOGGER.error(\"No configuration file inputs specified\");\n    System.exit(1);\n  }\n  int cores=Runtime.getRuntime().availableProcessors();\n  int numThreads=2 * cores;\n  if (null != threads && (threads > 0 && threads < Thread.activeCount())) {\n    numThreads=threads;\n  }\n  Path rootDir;\n  if (root != null) {\n    rootDir=Paths.get(root);\n  }\n else {\n    rootDir=Paths.get(System.getProperty(\"user.dir\"));\n  }\n  File includesDir;\n  if (includes != null) {\n    includesDir=new File(includes);\n  }\n else {\n    Path first=Paths.get(configs.get(0));\n    if (Files.isRegularFile(first) && !Files.isSymbolicLink(first)) {\n      includesDir=first.toAbsolutePath().getParent().toFile();\n    }\n else {\n      includesDir=rootDir.toFile();\n    }\n  }\n  LOGGER.info(String.format(Locale.ROOT,\"Batch generation using up to %d threads.\\nIncludes: %s\\nRoot: %s\",numThreads,includesDir.getAbsolutePath(),rootDir.toAbsolutePath().toString()));\n  SimpleModule module=getCustomDeserializationModel(includesDir);\n  List<CodegenConfigurator> configurators=configs.stream().map(config -> CodegenConfigurator.fromFile(config,module)).collect(Collectors.toList());\n  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();\n  Stream.of(Logger.ROOT_LOGGER_NAME,\"io.swagger\",\"org.openapitools\").map(lc::getLogger).forEach(logger -> logger.setLevel(Level.ERROR));\n  ExecutorService executor=Executors.newFixedThreadPool(numThreads);\n  configurators.forEach(configurator -> {\n    GenerationRunner runner=new GenerationRunner(configurator,rootDir,Boolean.TRUE.equals(failFast),Boolean.TRUE.equals(clean));\n    executor.execute(runner);\n  }\n);\n  executor.shutdown();\n  try {\n    if (timeout == null)     timeout=10;\n    int awaitFor=Math.min(Math.max(timeout,1),30);\n    executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n    int failCount=failures.intValue();\n    if (failCount > 0) {\n      System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n      System.exit(1);\n    }\n else {\n      System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n    }\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n    Thread.currentThread().interrupt();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4201,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * When an object implementing interface <code>Runnable</code> is used to create a thread, starting the thread causes the object's <code>run</code> method to be called in that separately executing thread. <p> The general contract of the method <code>run</code> is that it may take any action whatsoever.\n * @see Thread#run()\n */\n@Override public void execute(){\n  if (configs.size() < 1) {\n    LOGGER.error(\"No configuration file inputs specified\");\n    System.exit(1);\n  }\n  int cores=Runtime.getRuntime().availableProcessors();\n  int numThreads=2 * cores;\n  if (null != threads && (threads > 0 && threads < Thread.activeCount())) {\n    numThreads=threads;\n  }\n  Path rootDir;\n  if (root != null) {\n    rootDir=Paths.get(root);\n  }\n else {\n    rootDir=Paths.get(System.getProperty(\"user.dir\"));\n  }\n  File includesDir;\n  if (includes != null) {\n    includesDir=new File(includes);\n  }\n else {\n    Path first=Paths.get(configs.get(0));\n    if (Files.isRegularFile(first) && !Files.isSymbolicLink(first)) {\n      includesDir=first.toAbsolutePath().getParent().toFile();\n    }\n else {\n      includesDir=rootDir.toFile();\n    }\n  }\n  LOGGER.info(String.format(Locale.ROOT,\"Batch generation using up to %d threads.\\nIncludes: %s\\nRoot: %s\",numThreads,includesDir.getAbsolutePath(),rootDir.toAbsolutePath().toString()));\n  SimpleModule module=getCustomDeserializationModel(includesDir);\n  List<CodegenConfigurator> configurators=configs.stream().map(config -> CodegenConfigurator.fromFile(config,module)).collect(Collectors.toList());\n  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();\n  Stream.of(Logger.ROOT_LOGGER_NAME,\"io.swagger\",\"org.openapitools\").map(lc::getLogger).forEach(logger -> logger.setLevel(Level.ERROR));\n  ExecutorService executor=Executors.newFixedThreadPool(numThreads);\n  configurators.forEach(configurator -> {\n    GenerationRunner runner=new GenerationRunner(configurator,rootDir,Boolean.TRUE.equals(failFast),Boolean.TRUE.equals(clean));\n    executor.execute(runner);\n  }\n);\n  executor.shutdown();\n  try {\n    if (timeout == null)     timeout=10;\n    int awaitFor=Math.min(Math.max(timeout,1),30);\n    executor.awaitTermination(awaitFor,TimeUnit.MINUTES);\n    int failCount=failures.intValue();\n    if (failCount > 0) {\n      System.err.println(String.format(Locale.ROOT,\"[FAIL] Completed with %d failures, %d successes\",failCount,successes.intValue()));\n      System.exit(1);\n    }\n else {\n      System.out.println(String.format(Locale.ROOT,\"[SUCCESS] Batch generation finished %d generators successfully.\",successes.intValue()));\n    }\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n    Thread.currentThread().interrupt();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 167,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 62
      },
      "nodeContext" : "int awaitFor=Math.min(Math.max(timeout,1),30);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 167,
    "startColumnNumber" : 27,
    "endLineNumber" : 167,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 167,
    "startColumnNumber" : 36,
    "endLineNumber" : 167,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}