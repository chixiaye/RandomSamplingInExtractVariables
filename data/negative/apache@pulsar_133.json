{
  "id" : 133,
  "expression" : "new ProducerRecord<>(kafkaTopicName,key,value)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/sources/KafkaSourceTester.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ProducerRecord<>(kafkaTopicName,key,value)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 110,
      "startLineNumber" : 133,
      "startColumnNumber" : 52,
      "endLineNumber" : 137,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 133,
        "startColumnNumber" : 43,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "record=new ProducerRecord<>(kafkaTopicName,key,value)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 14
      },
      "nodeContext" : "ProducerRecord<String,String> record=new ProducerRecord<>(kafkaTopicName,key,value);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 130,
        "startColumnNumber" : 46,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String key=\"key-\" + i;\n  String value=\"value-\" + i;\n  ProducerRecord<String,String> record=new ProducerRecord<>(kafkaTopicName,key,value);\n  kvs.put(key,value);\n  producer.send(record).get();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < numMessages; i++) {\n  String key=\"key-\" + i;\n  String value=\"value-\" + i;\n  ProducerRecord<String,String> record=new ProducerRecord<>(kafkaTopicName,key,value);\n  kvs.put(key,value);\n  producer.send(record).get();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 972,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 144,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KafkaProducer<String,String> producer=new KafkaProducer<>(ImmutableMap.of(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaContainer.getBootstrapServers(),ProducerConfig.CLIENT_ID_CONFIG,UUID.randomUUID().toString()),new StringSerializer(),new StringSerializer());\n  LinkedHashMap<String,String> kvs=new LinkedHashMap<>();\n  for (int i=0; i < numMessages; i++) {\n    String key=\"key-\" + i;\n    String value=\"value-\" + i;\n    ProducerRecord<String,String> record=new ProducerRecord<>(kafkaTopicName,key,value);\n    kvs.put(key,value);\n    producer.send(record).get();\n  }\n  log.info(\"Successfully produced {} messages to kafka topic {}\",numMessages,kafkaTopicName);\n  return kvs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1068,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Map<String,String> produceSourceMessages(int numMessages) throws Exception {\n  KafkaProducer<String,String> producer=new KafkaProducer<>(ImmutableMap.of(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaContainer.getBootstrapServers(),ProducerConfig.CLIENT_ID_CONFIG,UUID.randomUUID().toString()),new StringSerializer(),new StringSerializer());\n  LinkedHashMap<String,String> kvs=new LinkedHashMap<>();\n  for (int i=0; i < numMessages; i++) {\n    String key=\"key-\" + i;\n    String value=\"value-\" + i;\n    ProducerRecord<String,String> record=new ProducerRecord<>(kafkaTopicName,key,value);\n    kvs.put(key,value);\n    producer.send(record).get();\n  }\n  log.info(\"Successfully produced {} messages to kafka topic {}\",numMessages,kafkaTopicName);\n  return kvs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 133,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 14
      },
      "nodeContext" : "ProducerRecord<String,String> record=new ProducerRecord<>(kafkaTopicName,key,value);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "org.apache.pulsar.tests.integration.io.sources.ProducerRecord"
  } ],
  "positionList" : [ {
    "charLength" : 110,
    "startLineNumber" : 133,
    "startColumnNumber" : 52,
    "endLineNumber" : 137,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ ]
}