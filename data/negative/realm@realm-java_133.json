{
  "id" : 133,
  "expression" : "module",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "module",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 186,
      "startColumnNumber" : 21,
      "endLineNumber" : 186,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 186,
        "startColumnNumber" : 21,
        "endLineNumber" : 186,
        "endColumnNumber" : 38
      },
      "nodeContext" : "module.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 186,
        "startColumnNumber" : 21,
        "endLineNumber" : 186,
        "endColumnNumber" : 77
      },
      "nodeContext" : "module.getClass().isAnnotationPresent(RealmModule.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!module.getClass().isAnnotationPresent(RealmModule.class)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n  throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 185,
        "startColumnNumber" : 42,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n    throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n  }\n  validatedModules.add(module);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Object module : modules) {\n  if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n    throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n  }\n  validatedModules.add(module);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 184,
        "startColumnNumber" : 51,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Object module : modules) {\n    if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n      throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n    }\n    validatedModules.add(module);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 184,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (modules != null && modules.length > 0) {\n  for (  Object module : modules) {\n    if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n      throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n    }\n    validatedModules.add(module);\n  }\n}\n else {\n  if (Realm.getDefaultModule() != null) {\n    validatedModules.add(Realm.getDefaultModule());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 182,
        "startColumnNumber" : 132,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashSet<Object> validatedModules=new HashSet<>();\n  if (modules != null && modules.length > 0) {\n    for (    Object module : modules) {\n      if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n        throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n      }\n      validatedModules.add(module);\n    }\n  }\n else {\n    if (Realm.getDefaultModule() != null) {\n      validatedModules.add(Realm.getDefaultModule());\n    }\n  }\n  RealmProxyMediator schemaMediator=createSchemaMediator(validatedModules,Collections.<Class<? extends RealmModel>>emptySet(),false);\n  return RealmConfiguration.forRecovery(canonicalPath,encryptionKey,schemaMediator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a  {@link RealmConfiguration} appropriate to open a read-only, non-synced Realm to recover any pending changes.This is useful when trying to open a backup/recovery Realm (after a client reset).\n * @param canonicalPath the absolute path to the Realm file defined by this configuration.\n * @param encryptionKey the key used to encrypt/decrypt the Realm file.\n * @param modules if specified it will restricts Realm schema to the provided module.\n * @return RealmConfiguration that can be used offline\n */\npublic static RealmConfiguration forRecovery(String canonicalPath,@Nullable byte[] encryptionKey,@Nullable Object... modules){\n  HashSet<Object> validatedModules=new HashSet<>();\n  if (modules != null && modules.length > 0) {\n    for (    Object module : modules) {\n      if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n        throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n      }\n      validatedModules.add(module);\n    }\n  }\n else {\n    if (Realm.getDefaultModule() != null) {\n      validatedModules.add(Realm.getDefaultModule());\n    }\n  }\n  RealmProxyMediator schemaMediator=createSchemaMediator(validatedModules,Collections.<Class<? extends RealmModel>>emptySet(),false);\n  return RealmConfiguration.forRecovery(canonicalPath,encryptionKey,schemaMediator);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!module.getClass().isAnnotationPresent(RealmModule.class)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "module",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 187,
      "startColumnNumber" : 55,
      "endLineNumber" : 187,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 187,
        "startColumnNumber" : 55,
        "endLineNumber" : 187,
        "endColumnNumber" : 72
      },
      "nodeContext" : "module.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 187,
        "startColumnNumber" : 55,
        "endLineNumber" : 187,
        "endColumnNumber" : 91
      },
      "nodeContext" : "module.getClass().getCanonicalName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 187,
        "startColumnNumber" : 55,
        "endLineNumber" : 188,
        "endColumnNumber" : 71
      },
      "nodeContext" : "module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 187,
        "startColumnNumber" : 26,
        "endLineNumber" : 188,
        "endColumnNumber" : 72
      },
      "nodeContext" : "new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 187,
        "startColumnNumber" : 20,
        "endLineNumber" : 188,
        "endColumnNumber" : 73
      },
      "nodeContext" : "throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 186,
        "startColumnNumber" : 79,
        "endLineNumber" : 189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n  throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 185,
        "startColumnNumber" : 42,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n    throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n  }\n  validatedModules.add(module);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Object module : modules) {\n  if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n    throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n  }\n  validatedModules.add(module);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 184,
        "startColumnNumber" : 51,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Object module : modules) {\n    if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n      throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n    }\n    validatedModules.add(module);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 184,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (modules != null && modules.length > 0) {\n  for (  Object module : modules) {\n    if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n      throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n    }\n    validatedModules.add(module);\n  }\n}\n else {\n  if (Realm.getDefaultModule() != null) {\n    validatedModules.add(Realm.getDefaultModule());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 182,
        "startColumnNumber" : 132,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashSet<Object> validatedModules=new HashSet<>();\n  if (modules != null && modules.length > 0) {\n    for (    Object module : modules) {\n      if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n        throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n      }\n      validatedModules.add(module);\n    }\n  }\n else {\n    if (Realm.getDefaultModule() != null) {\n      validatedModules.add(Realm.getDefaultModule());\n    }\n  }\n  RealmProxyMediator schemaMediator=createSchemaMediator(validatedModules,Collections.<Class<? extends RealmModel>>emptySet(),false);\n  return RealmConfiguration.forRecovery(canonicalPath,encryptionKey,schemaMediator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a  {@link RealmConfiguration} appropriate to open a read-only, non-synced Realm to recover any pending changes.This is useful when trying to open a backup/recovery Realm (after a client reset).\n * @param canonicalPath the absolute path to the Realm file defined by this configuration.\n * @param encryptionKey the key used to encrypt/decrypt the Realm file.\n * @param modules if specified it will restricts Realm schema to the provided module.\n * @return RealmConfiguration that can be used offline\n */\npublic static RealmConfiguration forRecovery(String canonicalPath,@Nullable byte[] encryptionKey,@Nullable Object... modules){\n  HashSet<Object> validatedModules=new HashSet<>();\n  if (modules != null && modules.length > 0) {\n    for (    Object module : modules) {\n      if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n        throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n      }\n      validatedModules.add(module);\n    }\n  }\n else {\n    if (Realm.getDefaultModule() != null) {\n      validatedModules.add(Realm.getDefaultModule());\n    }\n  }\n  RealmProxyMediator schemaMediator=createSchemaMediator(validatedModules,Collections.<Class<? extends RealmModel>>emptySet(),false);\n  return RealmConfiguration.forRecovery(canonicalPath,encryptionKey,schemaMediator);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 187,
        "startColumnNumber" : 55,
        "endLineNumber" : 187,
        "endColumnNumber" : 91
      },
      "nodeContext" : "module.getClass().getCanonicalName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "module",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 190,
      "startColumnNumber" : 37,
      "endLineNumber" : 190,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 190,
        "startColumnNumber" : 16,
        "endLineNumber" : 190,
        "endColumnNumber" : 44
      },
      "nodeContext" : "validatedModules.add(module)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 190,
        "startColumnNumber" : 16,
        "endLineNumber" : 190,
        "endColumnNumber" : 45
      },
      "nodeContext" : "validatedModules.add(module);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 185,
        "startColumnNumber" : 42,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n    throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n  }\n  validatedModules.add(module);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Object module : modules) {\n  if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n    throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n  }\n  validatedModules.add(module);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 184,
        "startColumnNumber" : 51,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  Object module : modules) {\n    if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n      throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n    }\n    validatedModules.add(module);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 600,
        "startLineNumber" : 184,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (modules != null && modules.length > 0) {\n  for (  Object module : modules) {\n    if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n      throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n    }\n    validatedModules.add(module);\n  }\n}\n else {\n  if (Realm.getDefaultModule() != null) {\n    validatedModules.add(Realm.getDefaultModule());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 914,
        "startLineNumber" : 182,
        "startColumnNumber" : 132,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashSet<Object> validatedModules=new HashSet<>();\n  if (modules != null && modules.length > 0) {\n    for (    Object module : modules) {\n      if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n        throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n      }\n      validatedModules.add(module);\n    }\n  }\n else {\n    if (Realm.getDefaultModule() != null) {\n      validatedModules.add(Realm.getDefaultModule());\n    }\n  }\n  RealmProxyMediator schemaMediator=createSchemaMediator(validatedModules,Collections.<Class<? extends RealmModel>>emptySet(),false);\n  return RealmConfiguration.forRecovery(canonicalPath,encryptionKey,schemaMediator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a  {@link RealmConfiguration} appropriate to open a read-only, non-synced Realm to recover any pending changes.This is useful when trying to open a backup/recovery Realm (after a client reset).\n * @param canonicalPath the absolute path to the Realm file defined by this configuration.\n * @param encryptionKey the key used to encrypt/decrypt the Realm file.\n * @param modules if specified it will restricts Realm schema to the provided module.\n * @return RealmConfiguration that can be used offline\n */\npublic static RealmConfiguration forRecovery(String canonicalPath,@Nullable byte[] encryptionKey,@Nullable Object... modules){\n  HashSet<Object> validatedModules=new HashSet<>();\n  if (modules != null && modules.length > 0) {\n    for (    Object module : modules) {\n      if (!module.getClass().isAnnotationPresent(RealmModule.class)) {\n        throw new IllegalArgumentException(module.getClass().getCanonicalName() + \" is not a RealmModule. \" + \"Add @RealmModule to the class definition.\");\n      }\n      validatedModules.add(module);\n    }\n  }\n else {\n    if (Realm.getDefaultModule() != null) {\n      validatedModules.add(Realm.getDefaultModule());\n    }\n  }\n  RealmProxyMediator schemaMediator=createSchemaMediator(validatedModules,Collections.<Class<? extends RealmModel>>emptySet(),false);\n  return RealmConfiguration.forRecovery(canonicalPath,encryptionKey,schemaMediator);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 190,
        "startColumnNumber" : 16,
        "endLineNumber" : 190,
        "endColumnNumber" : 45
      },
      "nodeContext" : "validatedModules.add(module);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 186,
    "startColumnNumber" : 21,
    "endLineNumber" : 186,
    "endColumnNumber" : 27
  }, {
    "charLength" : 6,
    "startLineNumber" : 187,
    "startColumnNumber" : 55,
    "endLineNumber" : 187,
    "endColumnNumber" : 61
  }, {
    "charLength" : 6,
    "startLineNumber" : 190,
    "startColumnNumber" : 37,
    "endLineNumber" : 190,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}