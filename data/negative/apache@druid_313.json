{
  "id" : 313,
  "expression" : "numRows",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSerializerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numRows",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 214,
      "startColumnNumber" : 28,
      "endLineNumber" : 214,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 35
      },
      "nodeContext" : "i < numRows",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 214,
        "startColumnNumber" : 6,
        "endLineNumber" : 216,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (long i=0L; i < numRows; i++) {\n  serializer.addValue(ThreadLocalRandom.current().nextInt(0,Integer.MAX_VALUE));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 195,
        "startColumnNumber" : 6,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  GenericIndexedWriter genericIndexed=GenericIndexedWriter.ofCompressedByteBuffers(segmentWriteOutMedium,\"test\",compressionStrategy,Long.BYTES * 10000);\n  CompressedVSizeColumnarIntsSerializer serializer=new CompressedVSizeColumnarIntsSerializer(\"test\",segmentWriteOutMedium,maxValue,maxChunkSize,byteOrder,compressionStrategy,genericIndexed);\n  serializer.open();\n  final long numRows=Integer.MAX_VALUE + 100L;\n  for (long i=0L; i < numRows; i++) {\n    serializer.addValue(ThreadLocalRandom.current().nextInt(0,Integer.MAX_VALUE));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 192,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (SegmentWriteOutMedium segmentWriteOutMedium=TmpFileSegmentWriteOutMediumFactory.instance().makeSegmentWriteOutMedium(temporaryFolder.newFolder())){\n  GenericIndexedWriter genericIndexed=GenericIndexedWriter.ofCompressedByteBuffers(segmentWriteOutMedium,\"test\",compressionStrategy,Long.BYTES * 10000);\n  CompressedVSizeColumnarIntsSerializer serializer=new CompressedVSizeColumnarIntsSerializer(\"test\",segmentWriteOutMedium,maxValue,maxChunkSize,byteOrder,compressionStrategy,genericIndexed);\n  serializer.open();\n  final long numRows=Integer.MAX_VALUE + 100L;\n  for (long i=0L; i < numRows; i++) {\n    serializer.addValue(ThreadLocalRandom.current().nextInt(0,Integer.MAX_VALUE));\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 85,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1205,
        "startLineNumber" : 187,
        "startColumnNumber" : 2,
        "endLineNumber" : 218,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int maxValue=0x0FFFFFFF;\n  final int maxChunkSize=CompressedVSizeColumnarIntsSupplier.maxIntsInBufferForValue(maxValue);\n  expectedException.expect(ColumnCapacityExceededException.class);\n  expectedException.expectMessage(ColumnCapacityExceededException.formatMessage(\"test\"));\n  try (SegmentWriteOutMedium segmentWriteOutMedium=TmpFileSegmentWriteOutMediumFactory.instance().makeSegmentWriteOutMedium(temporaryFolder.newFolder())){\n    GenericIndexedWriter genericIndexed=GenericIndexedWriter.ofCompressedByteBuffers(segmentWriteOutMedium,\"test\",compressionStrategy,Long.BYTES * 10000);\n    CompressedVSizeColumnarIntsSerializer serializer=new CompressedVSizeColumnarIntsSerializer(\"test\",segmentWriteOutMedium,maxValue,maxChunkSize,byteOrder,compressionStrategy,genericIndexed);\n    serializer.open();\n    final long numRows=Integer.MAX_VALUE + 100L;\n    for (long i=0L; i < numRows; i++) {\n      serializer.addValue(ThreadLocalRandom.current().nextInt(0,Integer.MAX_VALUE));\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1276,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 218,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Ignore @Test public void testTooManyValues() throws IOException {\n  final int maxValue=0x0FFFFFFF;\n  final int maxChunkSize=CompressedVSizeColumnarIntsSupplier.maxIntsInBufferForValue(maxValue);\n  expectedException.expect(ColumnCapacityExceededException.class);\n  expectedException.expectMessage(ColumnCapacityExceededException.formatMessage(\"test\"));\n  try (SegmentWriteOutMedium segmentWriteOutMedium=TmpFileSegmentWriteOutMediumFactory.instance().makeSegmentWriteOutMedium(temporaryFolder.newFolder())){\n    GenericIndexedWriter genericIndexed=GenericIndexedWriter.ofCompressedByteBuffers(segmentWriteOutMedium,\"test\",compressionStrategy,Long.BYTES * 10000);\n    CompressedVSizeColumnarIntsSerializer serializer=new CompressedVSizeColumnarIntsSerializer(\"test\",segmentWriteOutMedium,maxValue,maxChunkSize,byteOrder,compressionStrategy,genericIndexed);\n    serializer.open();\n    final long numRows=Integer.MAX_VALUE + 100L;\n    for (long i=0L; i < numRows; i++) {\n      serializer.addValue(ThreadLocalRandom.current().nextInt(0,Integer.MAX_VALUE));\n    }\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 35
      },
      "nodeContext" : "i < numRows",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 214,
    "startColumnNumber" : 28,
    "endLineNumber" : 214,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}