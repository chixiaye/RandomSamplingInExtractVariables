{
  "id" : 60,
  "expression" : "exchangeClient",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvokerAvilableTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "exchangeClient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 140,
      "startColumnNumber" : 31,
      "endLineNumber" : 140,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 140,
        "startColumnNumber" : 31,
        "endLineNumber" : 140,
        "endColumnNumber" : 56
      },
      "nodeContext" : "exchangeClient.isClosed()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Assertions.assertFalse(exchangeClient.isClosed())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assertions.assertFalse(exchangeClient.isClosed());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 131,
        "startColumnNumber" : 61,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int port=NetUtils.getAvailablePort();\n  URL url=URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?lazy=true&connections=1&timeout=10000\");\n  ProtocolUtils.export(new DemoServiceImpl(),IDemoService.class,url);\n  Invoker<?> invoker=protocol.refer(IDemoService.class,url);\n  Assertions.assertTrue(invoker.isAvailable());\n  ExchangeClient exchangeClient=getClients((DubboInvoker<?>)invoker)[0];\n  Assertions.assertFalse(exchangeClient.isClosed());\n  try {\n    exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n    fail();\n  }\n catch (  IllegalStateException e) {\n  }\n  IDemoService service=(IDemoService)proxy.getProxy(invoker);\n  Assertions.assertEquals(\"ok\",service.get());\n  Assertions.assertTrue(invoker.isAvailable());\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  Assertions.assertFalse(invoker.isAvailable());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test_Lazy_ChannelReadOnly() throws Exception {\n  int port=NetUtils.getAvailablePort();\n  URL url=URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?lazy=true&connections=1&timeout=10000\");\n  ProtocolUtils.export(new DemoServiceImpl(),IDemoService.class,url);\n  Invoker<?> invoker=protocol.refer(IDemoService.class,url);\n  Assertions.assertTrue(invoker.isAvailable());\n  ExchangeClient exchangeClient=getClients((DubboInvoker<?>)invoker)[0];\n  Assertions.assertFalse(exchangeClient.isClosed());\n  try {\n    exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n    fail();\n  }\n catch (  IllegalStateException e) {\n  }\n  IDemoService service=(IDemoService)proxy.getProxy(invoker);\n  Assertions.assertEquals(\"ok\",service.get());\n  Assertions.assertTrue(invoker.isAvailable());\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  Assertions.assertFalse(invoker.isAvailable());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assertions.assertFalse(exchangeClient.isClosed());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.remoting.exchange.ExchangeClient"
  }, {
    "nodeContext" : "exchangeClient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 142,
      "startColumnNumber" : 12,
      "endLineNumber" : 142,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 95
      },
      "nodeContext" : "exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 96
      },
      "nodeContext" : "exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 144,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  fail();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  fail();\n}\n catch (IllegalStateException e) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 131,
        "startColumnNumber" : 61,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int port=NetUtils.getAvailablePort();\n  URL url=URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?lazy=true&connections=1&timeout=10000\");\n  ProtocolUtils.export(new DemoServiceImpl(),IDemoService.class,url);\n  Invoker<?> invoker=protocol.refer(IDemoService.class,url);\n  Assertions.assertTrue(invoker.isAvailable());\n  ExchangeClient exchangeClient=getClients((DubboInvoker<?>)invoker)[0];\n  Assertions.assertFalse(exchangeClient.isClosed());\n  try {\n    exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n    fail();\n  }\n catch (  IllegalStateException e) {\n  }\n  IDemoService service=(IDemoService)proxy.getProxy(invoker);\n  Assertions.assertEquals(\"ok\",service.get());\n  Assertions.assertTrue(invoker.isAvailable());\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  Assertions.assertFalse(invoker.isAvailable());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test_Lazy_ChannelReadOnly() throws Exception {\n  int port=NetUtils.getAvailablePort();\n  URL url=URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?lazy=true&connections=1&timeout=10000\");\n  ProtocolUtils.export(new DemoServiceImpl(),IDemoService.class,url);\n  Invoker<?> invoker=protocol.refer(IDemoService.class,url);\n  Assertions.assertTrue(invoker.isAvailable());\n  ExchangeClient exchangeClient=getClients((DubboInvoker<?>)invoker)[0];\n  Assertions.assertFalse(exchangeClient.isClosed());\n  try {\n    exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n    fail();\n  }\n catch (  IllegalStateException e) {\n  }\n  IDemoService service=(IDemoService)proxy.getProxy(invoker);\n  Assertions.assertEquals(\"ok\",service.get());\n  Assertions.assertTrue(invoker.isAvailable());\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  Assertions.assertFalse(invoker.isAvailable());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 96
      },
      "nodeContext" : "exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.remoting.exchange.ExchangeClient"
  }, {
    "nodeContext" : "exchangeClient",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 152,
      "startColumnNumber" : 8,
      "endLineNumber" : 152,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 91
      },
      "nodeContext" : "exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 92
      },
      "nodeContext" : "exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1106,
        "startLineNumber" : 131,
        "startColumnNumber" : 61,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int port=NetUtils.getAvailablePort();\n  URL url=URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?lazy=true&connections=1&timeout=10000\");\n  ProtocolUtils.export(new DemoServiceImpl(),IDemoService.class,url);\n  Invoker<?> invoker=protocol.refer(IDemoService.class,url);\n  Assertions.assertTrue(invoker.isAvailable());\n  ExchangeClient exchangeClient=getClients((DubboInvoker<?>)invoker)[0];\n  Assertions.assertFalse(exchangeClient.isClosed());\n  try {\n    exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n    fail();\n  }\n catch (  IllegalStateException e) {\n  }\n  IDemoService service=(IDemoService)proxy.getProxy(invoker);\n  Assertions.assertEquals(\"ok\",service.get());\n  Assertions.assertTrue(invoker.isAvailable());\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  Assertions.assertFalse(invoker.isAvailable());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void test_Lazy_ChannelReadOnly() throws Exception {\n  int port=NetUtils.getAvailablePort();\n  URL url=URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/org.apache.dubbo.rpc.protocol.dubbo.IDemoService?lazy=true&connections=1&timeout=10000\");\n  ProtocolUtils.export(new DemoServiceImpl(),IDemoService.class,url);\n  Invoker<?> invoker=protocol.refer(IDemoService.class,url);\n  Assertions.assertTrue(invoker.isAvailable());\n  ExchangeClient exchangeClient=getClients((DubboInvoker<?>)invoker)[0];\n  Assertions.assertFalse(exchangeClient.isClosed());\n  try {\n    exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n    fail();\n  }\n catch (  IllegalStateException e) {\n  }\n  IDemoService service=(IDemoService)proxy.getProxy(invoker);\n  Assertions.assertEquals(\"ok\",service.get());\n  Assertions.assertTrue(invoker.isAvailable());\n  exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n  Assertions.assertFalse(invoker.isAvailable());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 152,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 92
      },
      "nodeContext" : "exchangeClient.setAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY,Boolean.TRUE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.dubbo.remoting.exchange.ExchangeClient"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 140,
    "startColumnNumber" : 31,
    "endLineNumber" : 140,
    "endColumnNumber" : 45
  }, {
    "charLength" : 14,
    "startLineNumber" : 142,
    "startColumnNumber" : 12,
    "endLineNumber" : 142,
    "endColumnNumber" : 26
  }, {
    "charLength" : 14,
    "startLineNumber" : 152,
    "startColumnNumber" : 8,
    "endLineNumber" : 152,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}