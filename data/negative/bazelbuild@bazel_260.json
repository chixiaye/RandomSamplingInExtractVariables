{
  "id" : 260,
  "expression" : "psOutput",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "40c9b756d7f8bac20801e2a54e3d83b2112c80c6",
  "filePath" : "src/main/java/com/google/devtools/build/lib/worker/WorkerSpawnRunner.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "psOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 594,
      "startColumnNumber" : 23,
      "endLineNumber" : 594,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 594,
        "startColumnNumber" : 23,
        "endLineNumber" : 594,
        "endColumnNumber" : 42
      },
      "nodeContext" : "psOutput.readLine()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 594,
        "startColumnNumber" : 14,
        "endLineNumber" : 594,
        "endColumnNumber" : 42
      },
      "nodeContext" : "output=psOutput.readLine()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 594,
        "startColumnNumber" : 13,
        "endLineNumber" : 594,
        "endColumnNumber" : 43
      },
      "nodeContext" : "(output=psOutput.readLine())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 594,
        "startColumnNumber" : 13,
        "endLineNumber" : 594,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(output=psOutput.readLine()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 582,
        "startLineNumber" : 594,
        "startColumnNumber" : 6,
        "endLineNumber" : 610,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while ((output=psOutput.readLine()) != null) {\n  if (isFirst) {\n    isFirst=false;\n    continue;\n  }\n  List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n  if (line.size() != 2) {\n    logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n    continue;\n  }\n  long pid=Long.parseLong(line.get(0));\n  int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n  pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 92,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 584,
        "startColumnNumber" : 8,
        "endLineNumber" : 611,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Instant now=Instant.now();\n  String output=null;\n  boolean isFirst=true;\n  while ((output=psOutput.readLine()) != null) {\n    if (isFirst) {\n      isFirst=false;\n      continue;\n    }\n    List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n    if (line.size() != 2) {\n      logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n      continue;\n    }\n    long pid=Long.parseLong(line.get(0));\n    int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n    pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 584,
        "startColumnNumber" : 4,
        "endLineNumber" : 613,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Instant now=Instant.now();\n  String output=null;\n  boolean isFirst=true;\n  while ((output=psOutput.readLine()) != null) {\n    if (isFirst) {\n      isFirst=false;\n      continue;\n    }\n    List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n    if (line.size() != 2) {\n      logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n      continue;\n    }\n    long pid=Long.parseLong(line.get(0));\n    int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n    pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n  }\n}\n catch (IllegalArgumentException|IOException e) {\n  logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 561,
        "startColumnNumber" : 87,
        "endLineNumber" : 615,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<Long,WorkerMetric.WorkerStat> pidResults=new HashMap<>();\n  if (os != OS.LINUX && os != OS.DARWIN) {\n    return pidResults;\n  }\n  List<Long> filteredProcessIds=processIds.stream().filter(p -> p > 0).collect(Collectors.toList());\n  String pids=Joiner.on(\",\").join(filteredProcessIds);\n  BufferedReader psOutput;\n  try {\n    String command=\"ps -o pid,rss -p \" + pids;\n    psOutput=new BufferedReader(new InputStreamReader(runtime.exec(new String[]{\"bash\",\"-c\",command}).getInputStream(),\"UTF-8\"));\n  }\n catch (  IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while executing command for pids: %s\",pids);\n    return pidResults;\n  }\n  try {\n    Instant now=Instant.now();\n    String output=null;\n    boolean isFirst=true;\n    while ((output=psOutput.readLine()) != null) {\n      if (isFirst) {\n        isFirst=false;\n        continue;\n      }\n      List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n      if (line.size() != 2) {\n        logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n        continue;\n      }\n      long pid=Long.parseLong(line.get(0));\n      int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n      pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n    }\n  }\n catch (  IllegalArgumentException|IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n  }\n  return pidResults;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1981,
        "startLineNumber" : 560,
        "startColumnNumber" : 2,
        "endLineNumber" : 615,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@VisibleForTesting public Map<Long,WorkerMetric.WorkerStat> collectStats(OS os,List<Long> processIds){\n  Map<Long,WorkerMetric.WorkerStat> pidResults=new HashMap<>();\n  if (os != OS.LINUX && os != OS.DARWIN) {\n    return pidResults;\n  }\n  List<Long> filteredProcessIds=processIds.stream().filter(p -> p > 0).collect(Collectors.toList());\n  String pids=Joiner.on(\",\").join(filteredProcessIds);\n  BufferedReader psOutput;\n  try {\n    String command=\"ps -o pid,rss -p \" + pids;\n    psOutput=new BufferedReader(new InputStreamReader(runtime.exec(new String[]{\"bash\",\"-c\",command}).getInputStream(),\"UTF-8\"));\n  }\n catch (  IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while executing command for pids: %s\",pids);\n    return pidResults;\n  }\n  try {\n    Instant now=Instant.now();\n    String output=null;\n    boolean isFirst=true;\n    while ((output=psOutput.readLine()) != null) {\n      if (isFirst) {\n        isFirst=false;\n        continue;\n      }\n      List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n      if (line.size() != 2) {\n        logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n        continue;\n      }\n      long pid=Long.parseLong(line.get(0));\n      int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n      pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n    }\n  }\n catch (  IllegalArgumentException|IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n  }\n  return pidResults;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 286,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 594,
        "startColumnNumber" : 13,
        "endLineNumber" : 594,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(output=psOutput.readLine()) != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.BufferedReader"
  }, {
    "nodeContext" : "psOutput",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 612,
      "startColumnNumber" : 78,
      "endLineNumber" : 612,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 612,
        "startColumnNumber" : 6,
        "endLineNumber" : 612,
        "endColumnNumber" : 87
      },
      "nodeContext" : "logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 612,
        "startColumnNumber" : 6,
        "endLineNumber" : 612,
        "endColumnNumber" : 88
      },
      "nodeContext" : "logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 611,
        "startColumnNumber" : 55,
        "endLineNumber" : 613,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 611,
        "startColumnNumber" : 6,
        "endLineNumber" : 613,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (IllegalArgumentException|IOException e) {\n  logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1093,
        "startLineNumber" : 584,
        "startColumnNumber" : 4,
        "endLineNumber" : 613,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Instant now=Instant.now();\n  String output=null;\n  boolean isFirst=true;\n  while ((output=psOutput.readLine()) != null) {\n    if (isFirst) {\n      isFirst=false;\n      continue;\n    }\n    List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n    if (line.size() != 2) {\n      logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n      continue;\n    }\n    long pid=Long.parseLong(line.get(0));\n    int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n    pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n  }\n}\n catch (IllegalArgumentException|IOException e) {\n  logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 561,
        "startColumnNumber" : 87,
        "endLineNumber" : 615,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<Long,WorkerMetric.WorkerStat> pidResults=new HashMap<>();\n  if (os != OS.LINUX && os != OS.DARWIN) {\n    return pidResults;\n  }\n  List<Long> filteredProcessIds=processIds.stream().filter(p -> p > 0).collect(Collectors.toList());\n  String pids=Joiner.on(\",\").join(filteredProcessIds);\n  BufferedReader psOutput;\n  try {\n    String command=\"ps -o pid,rss -p \" + pids;\n    psOutput=new BufferedReader(new InputStreamReader(runtime.exec(new String[]{\"bash\",\"-c\",command}).getInputStream(),\"UTF-8\"));\n  }\n catch (  IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while executing command for pids: %s\",pids);\n    return pidResults;\n  }\n  try {\n    Instant now=Instant.now();\n    String output=null;\n    boolean isFirst=true;\n    while ((output=psOutput.readLine()) != null) {\n      if (isFirst) {\n        isFirst=false;\n        continue;\n      }\n      List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n      if (line.size() != 2) {\n        logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n        continue;\n      }\n      long pid=Long.parseLong(line.get(0));\n      int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n      pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n    }\n  }\n catch (  IllegalArgumentException|IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n  }\n  return pidResults;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1981,
        "startLineNumber" : 560,
        "startColumnNumber" : 2,
        "endLineNumber" : 615,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@VisibleForTesting public Map<Long,WorkerMetric.WorkerStat> collectStats(OS os,List<Long> processIds){\n  Map<Long,WorkerMetric.WorkerStat> pidResults=new HashMap<>();\n  if (os != OS.LINUX && os != OS.DARWIN) {\n    return pidResults;\n  }\n  List<Long> filteredProcessIds=processIds.stream().filter(p -> p > 0).collect(Collectors.toList());\n  String pids=Joiner.on(\",\").join(filteredProcessIds);\n  BufferedReader psOutput;\n  try {\n    String command=\"ps -o pid,rss -p \" + pids;\n    psOutput=new BufferedReader(new InputStreamReader(runtime.exec(new String[]{\"bash\",\"-c\",command}).getInputStream(),\"UTF-8\"));\n  }\n catch (  IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while executing command for pids: %s\",pids);\n    return pidResults;\n  }\n  try {\n    Instant now=Instant.now();\n    String output=null;\n    boolean isFirst=true;\n    while ((output=psOutput.readLine()) != null) {\n      if (isFirst) {\n        isFirst=false;\n        continue;\n      }\n      List<String> line=Splitter.on(\" \").trimResults().omitEmptyStrings().splitToList(output);\n      if (line.size() != 2) {\n        logger.atWarning().log(\"Unexpected length of split line %s %d\",output,line.size());\n        continue;\n      }\n      long pid=Long.parseLong(line.get(0));\n      int memoryInKb=Integer.parseInt(line.get(1)) / 1000;\n      pidResults.put(pid,new WorkerMetric.WorkerStat(memoryInKb,now));\n    }\n  }\n catch (  IllegalArgumentException|IOException e) {\n    logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n  }\n  return pidResults;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 286,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 612,
        "startColumnNumber" : 6,
        "endLineNumber" : 612,
        "endColumnNumber" : 88
      },
      "nodeContext" : "logger.atWarning().withCause(e).log(\"Error while parsing psOutput: %s\",psOutput);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.BufferedReader"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 594,
    "startColumnNumber" : 23,
    "endLineNumber" : 594,
    "endColumnNumber" : 31
  }, {
    "charLength" : 8,
    "startLineNumber" : 612,
    "startColumnNumber" : 78,
    "endLineNumber" : 612,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}