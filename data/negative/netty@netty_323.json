{
  "id" : 323,
  "expression" : "new AtomicReference<Throwable>()",
  "projectName" : "netty@netty",
  "commitID" : "5e11c007f7dd66fefa2fe1ebbf0115de89c48398",
  "filePath" : "transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollDatagramUnicastTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new AtomicReference<Throwable>()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 96,
      "startColumnNumber" : 50,
      "endLineNumber" : 96,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 96,
        "startColumnNumber" : 39,
        "endLineNumber" : 96,
        "endColumnNumber" : 82
      },
      "nodeContext" : "errorRef=new AtomicReference<Throwable>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 83
      },
      "nodeContext" : "AtomicReference<Throwable> errorRef=new AtomicReference<Throwable>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2051,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  cb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msgs) throws Exception {\n    }\n  }\n);\n  cc=cb.bind(newSocketAddress()).sync().channel();\n  final int numBuffers=16;\n  final int segmentSize=512;\n  int bufferCapacity=numBuffers * segmentSize;\n  final CountDownLatch latch=new CountDownLatch(numBuffers);\n  AtomicReference<Throwable> errorRef=new AtomicReference<Throwable>();\n  sc=sb.handler(new SimpleChannelInboundHandler<DatagramPacket>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    DatagramPacket packet){\n      if (packet.content().readableBytes() == segmentSize) {\n        latch.countDown();\n      }\n    }\n  }\n).bind(newSocketAddress()).sync().channel();\n  InetSocketAddress addr=sendToAddress((InetSocketAddress)sc.localAddress());\n  final ByteBuf buffer;\n  if (composite) {\n    CompositeByteBuf compositeBuffer=Unpooled.compositeBuffer();\n    for (int i=0; i < numBuffers; i++) {\n      compositeBuffer.addComponent(true,Unpooled.directBuffer(segmentSize).writeZero(segmentSize));\n    }\n    buffer=compositeBuffer;\n  }\n else {\n    buffer=Unpooled.directBuffer(bufferCapacity).writeZero(bufferCapacity);\n  }\n  cc.writeAndFlush(new SegmentedDatagramPacket(buffer,segmentSize,addr)).sync();\n  if (!latch.await(10,TimeUnit.SECONDS)) {\n    Throwable error=errorRef.get();\n    if (error != null) {\n      throw error;\n    }\n    fail();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2240,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  cb.handler(new SimpleChannelInboundHandler<Object>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    Object msgs) throws Exception {\n    }\n  }\n);\n  cc=cb.bind(newSocketAddress()).sync().channel();\n  final int numBuffers=16;\n  final int segmentSize=512;\n  int bufferCapacity=numBuffers * segmentSize;\n  final CountDownLatch latch=new CountDownLatch(numBuffers);\n  AtomicReference<Throwable> errorRef=new AtomicReference<Throwable>();\n  sc=sb.handler(new SimpleChannelInboundHandler<DatagramPacket>(){\n    @Override public void messageReceived(    ChannelHandlerContext ctx,    DatagramPacket packet){\n      if (packet.content().readableBytes() == segmentSize) {\n        latch.countDown();\n      }\n    }\n  }\n).bind(newSocketAddress()).sync().channel();\n  InetSocketAddress addr=sendToAddress((InetSocketAddress)sc.localAddress());\n  final ByteBuf buffer;\n  if (composite) {\n    CompositeByteBuf compositeBuffer=Unpooled.compositeBuffer();\n    for (int i=0; i < numBuffers; i++) {\n      compositeBuffer.addComponent(true,Unpooled.directBuffer(segmentSize).writeZero(segmentSize));\n    }\n    buffer=compositeBuffer;\n  }\n else {\n    buffer=Unpooled.directBuffer(bufferCapacity).writeZero(bufferCapacity);\n  }\n  cc.writeAndFlush(new SegmentedDatagramPacket(buffer,segmentSize,addr)).sync();\n  if (!latch.await(10,TimeUnit.SECONDS)) {\n    Throwable error=errorRef.get();\n    if (error != null) {\n      throw error;\n    }\n    fail();\n  }\n}\n  finally {\n  if (cc != null) {\n    cc.close().sync();\n  }\n  if (sc != null) {\n    sc.close().sync();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 266,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 73,
        "startColumnNumber" : 29,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(cb.group() instanceof EpollEventLoopGroup)) {\n    return;\n  }\n  Assume.assumeTrue(SegmentedDatagramPacket.isSupported());\n  Channel sc=null;\n  Channel cc=null;\n  try {\n    cb.handler(new SimpleChannelInboundHandler<Object>(){\n      @Override public void messageReceived(      ChannelHandlerContext ctx,      Object msgs) throws Exception {\n      }\n    }\n);\n    cc=cb.bind(newSocketAddress()).sync().channel();\n    final int numBuffers=16;\n    final int segmentSize=512;\n    int bufferCapacity=numBuffers * segmentSize;\n    final CountDownLatch latch=new CountDownLatch(numBuffers);\n    AtomicReference<Throwable> errorRef=new AtomicReference<Throwable>();\n    sc=sb.handler(new SimpleChannelInboundHandler<DatagramPacket>(){\n      @Override public void messageReceived(      ChannelHandlerContext ctx,      DatagramPacket packet){\n        if (packet.content().readableBytes() == segmentSize) {\n          latch.countDown();\n        }\n      }\n    }\n).bind(newSocketAddress()).sync().channel();\n    InetSocketAddress addr=sendToAddress((InetSocketAddress)sc.localAddress());\n    final ByteBuf buffer;\n    if (composite) {\n      CompositeByteBuf compositeBuffer=Unpooled.compositeBuffer();\n      for (int i=0; i < numBuffers; i++) {\n        compositeBuffer.addComponent(true,Unpooled.directBuffer(segmentSize).writeZero(segmentSize));\n      }\n      buffer=compositeBuffer;\n    }\n else {\n      buffer=Unpooled.directBuffer(bufferCapacity).writeZero(bufferCapacity);\n    }\n    cc.writeAndFlush(new SegmentedDatagramPacket(buffer,segmentSize,addr)).sync();\n    if (!latch.await(10,TimeUnit.SECONDS)) {\n      Throwable error=errorRef.get();\n      if (error != null) {\n        throw error;\n      }\n      fail();\n    }\n  }\n  finally {\n    if (cc != null) {\n      cc.close().sync();\n    }\n    if (sc != null) {\n      sc.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2661,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testSendSegmentedDatagramPacket(Bootstrap sb,Bootstrap cb,boolean composite) throws Throwable {\n  if (!(cb.group() instanceof EpollEventLoopGroup)) {\n    return;\n  }\n  Assume.assumeTrue(SegmentedDatagramPacket.isSupported());\n  Channel sc=null;\n  Channel cc=null;\n  try {\n    cb.handler(new SimpleChannelInboundHandler<Object>(){\n      @Override public void messageReceived(      ChannelHandlerContext ctx,      Object msgs) throws Exception {\n      }\n    }\n);\n    cc=cb.bind(newSocketAddress()).sync().channel();\n    final int numBuffers=16;\n    final int segmentSize=512;\n    int bufferCapacity=numBuffers * segmentSize;\n    final CountDownLatch latch=new CountDownLatch(numBuffers);\n    AtomicReference<Throwable> errorRef=new AtomicReference<Throwable>();\n    sc=sb.handler(new SimpleChannelInboundHandler<DatagramPacket>(){\n      @Override public void messageReceived(      ChannelHandlerContext ctx,      DatagramPacket packet){\n        if (packet.content().readableBytes() == segmentSize) {\n          latch.countDown();\n        }\n      }\n    }\n).bind(newSocketAddress()).sync().channel();\n    InetSocketAddress addr=sendToAddress((InetSocketAddress)sc.localAddress());\n    final ByteBuf buffer;\n    if (composite) {\n      CompositeByteBuf compositeBuffer=Unpooled.compositeBuffer();\n      for (int i=0; i < numBuffers; i++) {\n        compositeBuffer.addComponent(true,Unpooled.directBuffer(segmentSize).writeZero(segmentSize));\n      }\n      buffer=compositeBuffer;\n    }\n else {\n      buffer=Unpooled.directBuffer(bufferCapacity).writeZero(bufferCapacity);\n    }\n    cc.writeAndFlush(new SegmentedDatagramPacket(buffer,segmentSize,addr)).sync();\n    if (!latch.await(10,TimeUnit.SECONDS)) {\n      Throwable error=errorRef.get();\n      if (error != null) {\n        throw error;\n      }\n      fail();\n    }\n  }\n  finally {\n    if (cc != null) {\n      cc.close().sync();\n    }\n    if (sc != null) {\n      sc.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 314,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 96,
        "endColumnNumber" : 83
      },
      "nodeContext" : "AtomicReference<Throwable> errorRef=new AtomicReference<Throwable>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 96,
    "startColumnNumber" : 50,
    "endLineNumber" : 96,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}