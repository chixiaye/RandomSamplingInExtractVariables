{
  "id" : 5,
  "expression" : "tail >= bufferLength",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/main/java/com/termux/terminal/ByteQueue.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tail >= bufferLength",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 85,
      "startColumnNumber" : 24,
      "endLineNumber" : 85,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 96,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (tail >= bufferLength) {\n  tail=tail - bufferLength;\n  oneRun=mHead - tail;\n}\n else {\n  oneRun=bufferLength - tail;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 950,
        "startLineNumber" : 82,
        "startColumnNumber" : 54,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int tail=mHead + mStoredBytes;\n  int oneRun;\n  if (tail >= bufferLength) {\n    tail=tail - bufferLength;\n    oneRun=mHead - tail;\n  }\n else {\n    oneRun=bufferLength - tail;\n  }\n  int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n  System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n  offset+=bytesToCopy;\n  bytesToWriteBeforeWaiting-=bytesToCopy;\n  mStoredBytes+=bytesToCopy;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (bytesToWriteBeforeWaiting > 0) {\n  int tail=mHead + mStoredBytes;\n  int oneRun;\n  if (tail >= bufferLength) {\n    tail=tail - bufferLength;\n    oneRun=mHead - tail;\n  }\n else {\n    oneRun=bufferLength - tail;\n  }\n  int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n  System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n  offset+=bytesToCopy;\n  bytesToWriteBeforeWaiting-=bytesToCopy;\n  mStoredBytes+=bytesToCopy;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 70,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1577,
        "startLineNumber" : 69,
        "startColumnNumber" : 38,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  while (bufferLength == mStoredBytes && mOpen) {\n    try {\n      wait();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  if (!mOpen)   return false;\n  final boolean wasEmpty=mStoredBytes == 0;\n  int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);\n  lengthToWrite-=bytesToWriteBeforeWaiting;\n  while (bytesToWriteBeforeWaiting > 0) {\n    int tail=mHead + mStoredBytes;\n    int oneRun;\n    if (tail >= bufferLength) {\n      tail=tail - bufferLength;\n      oneRun=mHead - tail;\n    }\n else {\n      oneRun=bufferLength - tail;\n    }\n    int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n    System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n    offset+=bytesToCopy;\n    bytesToWriteBeforeWaiting-=bytesToCopy;\n    mStoredBytes+=bytesToCopy;\n  }\n  if (wasEmpty)   notify();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1603,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (lengthToWrite > 0) {\n  while (bufferLength == mStoredBytes && mOpen) {\n    try {\n      wait();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  if (!mOpen)   return false;\n  final boolean wasEmpty=mStoredBytes == 0;\n  int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);\n  lengthToWrite-=bytesToWriteBeforeWaiting;\n  while (bytesToWriteBeforeWaiting > 0) {\n    int tail=mHead + mStoredBytes;\n    int oneRun;\n    if (tail >= bufferLength) {\n      tail=tail - bufferLength;\n      oneRun=mHead - tail;\n    }\n else {\n      oneRun=bufferLength - tail;\n    }\n    int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n    System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n    offset+=bytesToCopy;\n    bytesToWriteBeforeWaiting-=bytesToCopy;\n    mStoredBytes+=bytesToCopy;\n  }\n  if (wasEmpty)   notify();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 126,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1627,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  while (lengthToWrite > 0) {\n    while (bufferLength == mStoredBytes && mOpen) {\n      try {\n        wait();\n      }\n catch (      InterruptedException e) {\n      }\n    }\n    if (!mOpen)     return false;\n    final boolean wasEmpty=mStoredBytes == 0;\n    int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);\n    lengthToWrite-=bytesToWriteBeforeWaiting;\n    while (bytesToWriteBeforeWaiting > 0) {\n      int tail=mHead + mStoredBytes;\n      int oneRun;\n      if (tail >= bufferLength) {\n        tail=tail - bufferLength;\n        oneRun=mHead - tail;\n      }\n else {\n        oneRun=bufferLength - tail;\n      }\n      int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n      System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n      offset+=bytesToCopy;\n      bytesToWriteBeforeWaiting-=bytesToCopy;\n      mStoredBytes+=bytesToCopy;\n    }\n    if (wasEmpty)     notify();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this) {\n  while (lengthToWrite > 0) {\n    while (bufferLength == mStoredBytes && mOpen) {\n      try {\n        wait();\n      }\n catch (      InterruptedException e) {\n      }\n    }\n    if (!mOpen)     return false;\n    final boolean wasEmpty=mStoredBytes == 0;\n    int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);\n    lengthToWrite-=bytesToWriteBeforeWaiting;\n    while (bytesToWriteBeforeWaiting > 0) {\n      int tail=mHead + mStoredBytes;\n      int oneRun;\n      if (tail >= bufferLength) {\n        tail=tail - bufferLength;\n        oneRun=mHead - tail;\n      }\n else {\n        oneRun=bufferLength - tail;\n      }\n      int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n      System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n      offset+=bytesToCopy;\n      bytesToWriteBeforeWaiting-=bytesToCopy;\n      mStoredBytes+=bytesToCopy;\n    }\n    if (wasEmpty)     notify();\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 129,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1986,
        "startLineNumber" : 59,
        "startColumnNumber" : 71,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (lengthToWrite + offset > buffer.length) {\n    throw new IllegalArgumentException(\"length + offset > buffer.length\");\n  }\n else   if (lengthToWrite <= 0) {\n    throw new IllegalArgumentException(\"length <= 0\");\n  }\n  final int bufferLength=mBuffer.length;\nsynchronized (this) {\n    while (lengthToWrite > 0) {\n      while (bufferLength == mStoredBytes && mOpen) {\n        try {\n          wait();\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      if (!mOpen)       return false;\n      final boolean wasEmpty=mStoredBytes == 0;\n      int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);\n      lengthToWrite-=bytesToWriteBeforeWaiting;\n      while (bytesToWriteBeforeWaiting > 0) {\n        int tail=mHead + mStoredBytes;\n        int oneRun;\n        if (tail >= bufferLength) {\n          tail=tail - bufferLength;\n          oneRun=mHead - tail;\n        }\n else {\n          oneRun=bufferLength - tail;\n        }\n        int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n        System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n        offset+=bytesToCopy;\n        bytesToWriteBeforeWaiting-=bytesToCopy;\n        mStoredBytes+=bytesToCopy;\n      }\n      if (wasEmpty)       notify();\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2250,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Attempt to write the specified portion of the provided buffer to the queue. <p/> Returns whether the output was totally written, false if it was closed before.\n */\npublic boolean write(byte[] buffer,int offset,int lengthToWrite){\n  if (lengthToWrite + offset > buffer.length) {\n    throw new IllegalArgumentException(\"length + offset > buffer.length\");\n  }\n else   if (lengthToWrite <= 0) {\n    throw new IllegalArgumentException(\"length <= 0\");\n  }\n  final int bufferLength=mBuffer.length;\nsynchronized (this) {\n    while (lengthToWrite > 0) {\n      while (bufferLength == mStoredBytes && mOpen) {\n        try {\n          wait();\n        }\n catch (        InterruptedException e) {\n        }\n      }\n      if (!mOpen)       return false;\n      final boolean wasEmpty=mStoredBytes == 0;\n      int bytesToWriteBeforeWaiting=Math.min(lengthToWrite,bufferLength - mStoredBytes);\n      lengthToWrite-=bytesToWriteBeforeWaiting;\n      while (bytesToWriteBeforeWaiting > 0) {\n        int tail=mHead + mStoredBytes;\n        int oneRun;\n        if (tail >= bufferLength) {\n          tail=tail - bufferLength;\n          oneRun=mHead - tail;\n        }\n else {\n          oneRun=bufferLength - tail;\n        }\n        int bytesToCopy=Math.min(oneRun,bytesToWriteBeforeWaiting);\n        System.arraycopy(buffer,offset,mBuffer,tail,bytesToCopy);\n        offset+=bytesToCopy;\n        bytesToWriteBeforeWaiting-=bytesToCopy;\n        mStoredBytes+=bytesToCopy;\n      }\n      if (wasEmpty)       notify();\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 85,
        "startColumnNumber" : 20,
        "endLineNumber" : 96,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (tail >= bufferLength) {\n  tail=tail - bufferLength;\n  oneRun=mHead - tail;\n}\n else {\n  oneRun=bufferLength - tail;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 85,
    "startColumnNumber" : 24,
    "endLineNumber" : 85,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}