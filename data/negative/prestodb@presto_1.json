{
  "id" : 1,
  "expression" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/cost/TestCostCalculator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 110,
      "startLineNumber" : 356,
      "startColumnNumber" : 24,
      "endLineNumber" : 357,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 356,
        "startColumnNumber" : 24,
        "endLineNumber" : 358,
        "endColumnNumber" : 37
      },
      "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 354,
        "startColumnNumber" : 8,
        "endLineNumber" : 358,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 354,
        "startColumnNumber" : 8,
        "endLineNumber" : 361,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 354,
        "startColumnNumber" : 8,
        "endLineNumber" : 361,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 307,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableScanNode ts1=tableScan(\"ts1\",\"key1\");\n  TableScanNode ts2=tableScan(\"ts2\",\"key2\");\n  TableScanNode ts3=tableScan(\"ts3\",\"key3\");\n  JoinNode join23=join(\"join23\",ts2,ts3,JoinNode.DistributionType.PARTITIONED,\"key2\",\"key3\");\n  JoinNode join=join(\"join\",ts1,join23,JoinNode.DistributionType.PARTITIONED,\"key1\",\"key2\");\n  Map<String,PlanCostEstimate> costs=ImmutableMap.of(\"ts1\",new PlanCostEstimate(0,128,128,0),\"ts2\",new PlanCostEstimate(0,64,64,0),\"ts3\",new PlanCostEstimate(0,32,32,0));\n  Map<String,PlanNodeStatsEstimate> stats=ImmutableMap.of(\"join\",statsEstimate(join,10_000),\"join23\",statsEstimate(join23,2_000),\"ts1\",statsEstimate(ts1,10_000),\"ts2\",statsEstimate(ts2,1_000),\"ts3\",statsEstimate(ts3,100));\n  Map<String,Type> types=ImmutableMap.of(\"key1\",BIGINT,\"key2\",BIGINT,\"key3\",BIGINT);\n  assertCost(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostEstimatedExchanges(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostSingleStageFragmentedPlan(join23,costs,stats,types).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4132,
        "startLineNumber" : 305,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMemoryCostJoinAboveJoin(){\n  TableScanNode ts1=tableScan(\"ts1\",\"key1\");\n  TableScanNode ts2=tableScan(\"ts2\",\"key2\");\n  TableScanNode ts3=tableScan(\"ts3\",\"key3\");\n  JoinNode join23=join(\"join23\",ts2,ts3,JoinNode.DistributionType.PARTITIONED,\"key2\",\"key3\");\n  JoinNode join=join(\"join\",ts1,join23,JoinNode.DistributionType.PARTITIONED,\"key1\",\"key2\");\n  Map<String,PlanCostEstimate> costs=ImmutableMap.of(\"ts1\",new PlanCostEstimate(0,128,128,0),\"ts2\",new PlanCostEstimate(0,64,64,0),\"ts3\",new PlanCostEstimate(0,32,32,0));\n  Map<String,PlanNodeStatsEstimate> stats=ImmutableMap.of(\"join\",statsEstimate(join,10_000),\"join23\",statsEstimate(join23,2_000),\"ts1\",statsEstimate(ts1,10_000),\"ts2\",statsEstimate(ts2,1_000),\"ts3\",statsEstimate(ts3,100));\n  Map<String,Type> types=ImmutableMap.of(\"key1\",BIGINT,\"key2\",BIGINT,\"key3\",BIGINT);\n  assertCost(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostEstimatedExchanges(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostSingleStageFragmentedPlan(join23,costs,stats,types).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 356,
        "startColumnNumber" : 24,
        "endLineNumber" : 358,
        "endColumnNumber" : 37
      },
      "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 13,
    "type" : "double"
  }, {
    "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 110,
      "startLineNumber" : 373,
      "startColumnNumber" : 24,
      "endLineNumber" : 374,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 373,
        "startColumnNumber" : 24,
        "endLineNumber" : 375,
        "endColumnNumber" : 37
      },
      "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 375,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 378,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 371,
        "startColumnNumber" : 8,
        "endLineNumber" : 378,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 307,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableScanNode ts1=tableScan(\"ts1\",\"key1\");\n  TableScanNode ts2=tableScan(\"ts2\",\"key2\");\n  TableScanNode ts3=tableScan(\"ts3\",\"key3\");\n  JoinNode join23=join(\"join23\",ts2,ts3,JoinNode.DistributionType.PARTITIONED,\"key2\",\"key3\");\n  JoinNode join=join(\"join\",ts1,join23,JoinNode.DistributionType.PARTITIONED,\"key1\",\"key2\");\n  Map<String,PlanCostEstimate> costs=ImmutableMap.of(\"ts1\",new PlanCostEstimate(0,128,128,0),\"ts2\",new PlanCostEstimate(0,64,64,0),\"ts3\",new PlanCostEstimate(0,32,32,0));\n  Map<String,PlanNodeStatsEstimate> stats=ImmutableMap.of(\"join\",statsEstimate(join,10_000),\"join23\",statsEstimate(join23,2_000),\"ts1\",statsEstimate(ts1,10_000),\"ts2\",statsEstimate(ts2,1_000),\"ts3\",statsEstimate(ts3,100));\n  Map<String,Type> types=ImmutableMap.of(\"key1\",BIGINT,\"key2\",BIGINT,\"key3\",BIGINT);\n  assertCost(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostEstimatedExchanges(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostSingleStageFragmentedPlan(join23,costs,stats,types).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4132,
        "startLineNumber" : 305,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMemoryCostJoinAboveJoin(){\n  TableScanNode ts1=tableScan(\"ts1\",\"key1\");\n  TableScanNode ts2=tableScan(\"ts2\",\"key2\");\n  TableScanNode ts3=tableScan(\"ts3\",\"key3\");\n  JoinNode join23=join(\"join23\",ts2,ts3,JoinNode.DistributionType.PARTITIONED,\"key2\",\"key3\");\n  JoinNode join=join(\"join\",ts1,join23,JoinNode.DistributionType.PARTITIONED,\"key1\",\"key2\");\n  Map<String,PlanCostEstimate> costs=ImmutableMap.of(\"ts1\",new PlanCostEstimate(0,128,128,0),\"ts2\",new PlanCostEstimate(0,64,64,0),\"ts3\",new PlanCostEstimate(0,32,32,0));\n  Map<String,PlanNodeStatsEstimate> stats=ImmutableMap.of(\"join\",statsEstimate(join,10_000),\"join23\",statsEstimate(join23,2_000),\"ts1\",statsEstimate(ts1,10_000),\"ts2\",statsEstimate(ts2,1_000),\"ts3\",statsEstimate(ts3,100));\n  Map<String,Type> types=ImmutableMap.of(\"key1\",BIGINT,\"key2\",BIGINT,\"key3\",BIGINT);\n  assertCost(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostEstimatedExchanges(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostSingleStageFragmentedPlan(join23,costs,stats,types).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 373,
        "startColumnNumber" : 24,
        "endLineNumber" : 375,
        "endColumnNumber" : 37
      },
      "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 13,
    "type" : "double"
  }, {
    "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 110,
      "startLineNumber" : 390,
      "startColumnNumber" : 24,
      "endLineNumber" : 391,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 390,
        "startColumnNumber" : 24,
        "endLineNumber" : 392,
        "endColumnNumber" : 37
      },
      "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 388,
        "startColumnNumber" : 8,
        "endLineNumber" : 392,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 388,
        "startColumnNumber" : 8,
        "endLineNumber" : 395,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 388,
        "startColumnNumber" : 8,
        "endLineNumber" : 395,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 307,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableScanNode ts1=tableScan(\"ts1\",\"key1\");\n  TableScanNode ts2=tableScan(\"ts2\",\"key2\");\n  TableScanNode ts3=tableScan(\"ts3\",\"key3\");\n  JoinNode join23=join(\"join23\",ts2,ts3,JoinNode.DistributionType.PARTITIONED,\"key2\",\"key3\");\n  JoinNode join=join(\"join\",ts1,join23,JoinNode.DistributionType.PARTITIONED,\"key1\",\"key2\");\n  Map<String,PlanCostEstimate> costs=ImmutableMap.of(\"ts1\",new PlanCostEstimate(0,128,128,0),\"ts2\",new PlanCostEstimate(0,64,64,0),\"ts3\",new PlanCostEstimate(0,32,32,0));\n  Map<String,PlanNodeStatsEstimate> stats=ImmutableMap.of(\"join\",statsEstimate(join,10_000),\"join23\",statsEstimate(join23,2_000),\"ts1\",statsEstimate(ts1,10_000),\"ts2\",statsEstimate(ts2,1_000),\"ts3\",statsEstimate(ts3,100));\n  Map<String,Type> types=ImmutableMap.of(\"key1\",BIGINT,\"key2\",BIGINT,\"key3\",BIGINT);\n  assertCost(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostEstimatedExchanges(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostSingleStageFragmentedPlan(join23,costs,stats,types).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4132,
        "startLineNumber" : 305,
        "startColumnNumber" : 4,
        "endLineNumber" : 396,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMemoryCostJoinAboveJoin(){\n  TableScanNode ts1=tableScan(\"ts1\",\"key1\");\n  TableScanNode ts2=tableScan(\"ts2\",\"key2\");\n  TableScanNode ts3=tableScan(\"ts3\",\"key3\");\n  JoinNode join23=join(\"join23\",ts2,ts3,JoinNode.DistributionType.PARTITIONED,\"key2\",\"key3\");\n  JoinNode join=join(\"join\",ts1,join23,JoinNode.DistributionType.PARTITIONED,\"key1\",\"key2\");\n  Map<String,PlanCostEstimate> costs=ImmutableMap.of(\"ts1\",new PlanCostEstimate(0,128,128,0),\"ts2\",new PlanCostEstimate(0,64,64,0),\"ts3\",new PlanCostEstimate(0,32,32,0));\n  Map<String,PlanNodeStatsEstimate> stats=ImmutableMap.of(\"join\",statsEstimate(join,10_000),\"join23\",statsEstimate(join23,2_000),\"ts1\",statsEstimate(ts1,10_000),\"ts2\",statsEstimate(ts2,1_000),\"ts3\",statsEstimate(ts3,100));\n  Map<String,Type> types=ImmutableMap.of(\"key1\",BIGINT,\"key2\",BIGINT,\"key3\",BIGINT);\n  assertCost(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCost(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostEstimatedExchanges(join23,costs,stats).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostEstimatedExchanges(join,costs,stats).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n  assertCostSingleStageFragmentedPlan(join23,costs,stats,types).memory(100 * IS_NULL_OVERHEAD + 64 + 32).memoryWhenOutputting(100 * IS_NULL_OVERHEAD + 64);\n  assertCostSingleStageFragmentedPlan(join,costs,stats,types).memory(2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128).memoryWhenOutputting(2000 * IS_NULL_OVERHEAD + 128);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 390,
        "startColumnNumber" : 24,
        "endLineNumber" : 392,
        "endColumnNumber" : 37
      },
      "nodeContext" : "2000 * IS_NULL_OVERHEAD + 100 * IS_NULL_OVERHEAD + 64 + 128",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 13,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 110,
    "startLineNumber" : 356,
    "startColumnNumber" : 24,
    "endLineNumber" : 357,
    "endColumnNumber" : 61
  }, {
    "charLength" : 110,
    "startLineNumber" : 373,
    "startColumnNumber" : 24,
    "endLineNumber" : 374,
    "endColumnNumber" : 61
  }, {
    "charLength" : 110,
    "startLineNumber" : 390,
    "startColumnNumber" : 24,
    "endLineNumber" : 391,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}