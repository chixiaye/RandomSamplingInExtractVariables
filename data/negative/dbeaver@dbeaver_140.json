{
  "id" : 140,
  "expression" : "TabTransfer",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/controls/TabFolderReorder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TabTransfer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 48,
      "startColumnNumber" : 27,
      "endLineNumber" : 48,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 48,
        "startColumnNumber" : 27,
        "endLineNumber" : 48,
        "endColumnNumber" : 47
      },
      "nodeContext" : "TabTransfer.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 48
      },
      "nodeContext" : "source.setTransfer(TabTransfer.INSTANCE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 49
      },
      "nodeContext" : "source.setTransfer(TabTransfer.INSTANCE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3853,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.folder=folder;\n  final DragSource source=new DragSource(folder,DND.DROP_MOVE);\n  source.setTransfer(TabTransfer.INSTANCE);\n  source.addDragListener(new DragSourceListener(){\n    private Image dragImage;\n    @Override public void dragStart(    DragSourceEvent event){\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      dragItem=folder.getItem(point);\n      if (dragItem == null) {\n        return;\n      }\n      Rectangle columnBounds=dragItem.getBounds();\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n      GC gc=new GC(folder);\n      dragImage=new Image(Display.getCurrent(),columnBounds.width,columnBounds.height);\n      gc.copyArea(dragImage,columnBounds.x,columnBounds.y);\n      event.image=dragImage;\n      gc.dispose();\n    }\n    @Override public void dragSetData(    DragSourceEvent event){\n      event.data=dragItem;\n    }\n    @Override public void dragFinished(    DragSourceEvent event){\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n    }\n  }\n);\n  DropTarget dropTarget=new DropTarget(folder,DND.DROP_MOVE);\n  dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance());\n  dropTarget.addDropListener(new DropTargetListener(){\n    @Override public void dragEnter(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragLeave(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOperationChanged(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOver(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void drop(    DropTargetEvent event){\n      handleDragEvent(event);\n      if (event.detail == DND.DROP_MOVE) {\n        Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n        CTabItem item=folder.getItem(new Point(point.x,point.y));\n        if (item != null && dragItem != null) {\n          moveTab(folder,folder.indexOf(dragItem),folder.indexOf(item));\n        }\n      }\n    }\n    @Override public void dropAccept(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    private void handleDragEvent(    DropTargetEvent event){\n      if (!isDropSupported(folder,event)) {\n        event.detail=DND.DROP_NONE;\n      }\n else {\n        event.detail=DND.DROP_MOVE;\n      }\n      event.feedback=DND.FEEDBACK_SELECT;\n    }\n    private boolean isDropSupported(    CTabFolder folder,    DropTargetEvent event){\n      if (dragItem == null) {\n        return false;\n      }\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      CTabItem item=folder.getItem(new Point(point.x,point.y));\n      return item != null && dragItem.getShowClose() == item.getShowClose();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3896,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public TabFolderReorder(CTabFolder folder){\n  this.folder=folder;\n  final DragSource source=new DragSource(folder,DND.DROP_MOVE);\n  source.setTransfer(TabTransfer.INSTANCE);\n  source.addDragListener(new DragSourceListener(){\n    private Image dragImage;\n    @Override public void dragStart(    DragSourceEvent event){\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      dragItem=folder.getItem(point);\n      if (dragItem == null) {\n        return;\n      }\n      Rectangle columnBounds=dragItem.getBounds();\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n      GC gc=new GC(folder);\n      dragImage=new Image(Display.getCurrent(),columnBounds.width,columnBounds.height);\n      gc.copyArea(dragImage,columnBounds.x,columnBounds.y);\n      event.image=dragImage;\n      gc.dispose();\n    }\n    @Override public void dragSetData(    DragSourceEvent event){\n      event.data=dragItem;\n    }\n    @Override public void dragFinished(    DragSourceEvent event){\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n    }\n  }\n);\n  DropTarget dropTarget=new DropTarget(folder,DND.DROP_MOVE);\n  dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance());\n  dropTarget.addDropListener(new DropTargetListener(){\n    @Override public void dragEnter(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragLeave(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOperationChanged(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOver(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void drop(    DropTargetEvent event){\n      handleDragEvent(event);\n      if (event.detail == DND.DROP_MOVE) {\n        Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n        CTabItem item=folder.getItem(new Point(point.x,point.y));\n        if (item != null && dragItem != null) {\n          moveTab(folder,folder.indexOf(dragItem),folder.indexOf(item));\n        }\n      }\n    }\n    @Override public void dropAccept(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    private void handleDragEvent(    DropTargetEvent event){\n      if (!isDropSupported(folder,event)) {\n        event.detail=DND.DROP_NONE;\n      }\n else {\n        event.detail=DND.DROP_MOVE;\n      }\n      event.feedback=DND.FEEDBACK_SELECT;\n    }\n    private boolean isDropSupported(    CTabFolder folder,    DropTargetEvent event){\n      if (dragItem == null) {\n        return false;\n      }\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      CTabItem item=folder.getItem(new Point(point.x,point.y));\n      return item != null && dragItem.getShowClose() == item.getShowClose();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 475,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 49
      },
      "nodeContext" : "source.setTransfer(TabTransfer.INSTANCE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.TabFolderReorder.TabTransfer"
  }, {
    "nodeContext" : "TabTransfer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 88,
      "startColumnNumber" : 31,
      "endLineNumber" : 88,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 88,
        "startColumnNumber" : 31,
        "endLineNumber" : 88,
        "endColumnNumber" : 51
      },
      "nodeContext" : "TabTransfer.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 80
      },
      "nodeContext" : "dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 81
      },
      "nodeContext" : "dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3853,
        "startLineNumber" : 45,
        "startColumnNumber" : 47,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.folder=folder;\n  final DragSource source=new DragSource(folder,DND.DROP_MOVE);\n  source.setTransfer(TabTransfer.INSTANCE);\n  source.addDragListener(new DragSourceListener(){\n    private Image dragImage;\n    @Override public void dragStart(    DragSourceEvent event){\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      dragItem=folder.getItem(point);\n      if (dragItem == null) {\n        return;\n      }\n      Rectangle columnBounds=dragItem.getBounds();\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n      GC gc=new GC(folder);\n      dragImage=new Image(Display.getCurrent(),columnBounds.width,columnBounds.height);\n      gc.copyArea(dragImage,columnBounds.x,columnBounds.y);\n      event.image=dragImage;\n      gc.dispose();\n    }\n    @Override public void dragSetData(    DragSourceEvent event){\n      event.data=dragItem;\n    }\n    @Override public void dragFinished(    DragSourceEvent event){\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n    }\n  }\n);\n  DropTarget dropTarget=new DropTarget(folder,DND.DROP_MOVE);\n  dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance());\n  dropTarget.addDropListener(new DropTargetListener(){\n    @Override public void dragEnter(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragLeave(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOperationChanged(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOver(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void drop(    DropTargetEvent event){\n      handleDragEvent(event);\n      if (event.detail == DND.DROP_MOVE) {\n        Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n        CTabItem item=folder.getItem(new Point(point.x,point.y));\n        if (item != null && dragItem != null) {\n          moveTab(folder,folder.indexOf(dragItem),folder.indexOf(item));\n        }\n      }\n    }\n    @Override public void dropAccept(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    private void handleDragEvent(    DropTargetEvent event){\n      if (!isDropSupported(folder,event)) {\n        event.detail=DND.DROP_NONE;\n      }\n else {\n        event.detail=DND.DROP_MOVE;\n      }\n      event.feedback=DND.FEEDBACK_SELECT;\n    }\n    private boolean isDropSupported(    CTabFolder folder,    DropTargetEvent event){\n      if (dragItem == null) {\n        return false;\n      }\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      CTabItem item=folder.getItem(new Point(point.x,point.y));\n      return item != null && dragItem.getShowClose() == item.getShowClose();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 468,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3896,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 154,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public TabFolderReorder(CTabFolder folder){\n  this.folder=folder;\n  final DragSource source=new DragSource(folder,DND.DROP_MOVE);\n  source.setTransfer(TabTransfer.INSTANCE);\n  source.addDragListener(new DragSourceListener(){\n    private Image dragImage;\n    @Override public void dragStart(    DragSourceEvent event){\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      dragItem=folder.getItem(point);\n      if (dragItem == null) {\n        return;\n      }\n      Rectangle columnBounds=dragItem.getBounds();\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n      GC gc=new GC(folder);\n      dragImage=new Image(Display.getCurrent(),columnBounds.width,columnBounds.height);\n      gc.copyArea(dragImage,columnBounds.x,columnBounds.y);\n      event.image=dragImage;\n      gc.dispose();\n    }\n    @Override public void dragSetData(    DragSourceEvent event){\n      event.data=dragItem;\n    }\n    @Override public void dragFinished(    DragSourceEvent event){\n      if (dragImage != null) {\n        dragImage.dispose();\n        dragImage=null;\n      }\n    }\n  }\n);\n  DropTarget dropTarget=new DropTarget(folder,DND.DROP_MOVE);\n  dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance());\n  dropTarget.addDropListener(new DropTargetListener(){\n    @Override public void dragEnter(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragLeave(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOperationChanged(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void dragOver(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    @Override public void drop(    DropTargetEvent event){\n      handleDragEvent(event);\n      if (event.detail == DND.DROP_MOVE) {\n        Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n        CTabItem item=folder.getItem(new Point(point.x,point.y));\n        if (item != null && dragItem != null) {\n          moveTab(folder,folder.indexOf(dragItem),folder.indexOf(item));\n        }\n      }\n    }\n    @Override public void dropAccept(    DropTargetEvent event){\n      handleDragEvent(event);\n    }\n    private void handleDragEvent(    DropTargetEvent event){\n      if (!isDropSupported(folder,event)) {\n        event.detail=DND.DROP_NONE;\n      }\n else {\n        event.detail=DND.DROP_MOVE;\n      }\n      event.feedback=DND.FEEDBACK_SELECT;\n    }\n    private boolean isDropSupported(    CTabFolder folder,    DropTargetEvent event){\n      if (dragItem == null) {\n        return false;\n      }\n      Point point=folder.toControl(folder.getDisplay().getCursorLocation());\n      CTabItem item=folder.getItem(new Point(point.x,point.y));\n      return item != null && dragItem.getShowClose() == item.getShowClose();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 475,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 81
      },
      "nodeContext" : "dropTarget.setTransfer(TabTransfer.INSTANCE,TextTransfer.getInstance());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.jkiss.dbeaver.ui.controls.TabFolderReorder.TabTransfer"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 48,
    "startColumnNumber" : 27,
    "endLineNumber" : 48,
    "endColumnNumber" : 38
  }, {
    "charLength" : 11,
    "startLineNumber" : 88,
    "startColumnNumber" : 31,
    "endLineNumber" : 88,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}