{
  "id" : 417,
  "expression" : "defaultSampleValues",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp4/FragmentedMp4Extractor.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "defaultSampleValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 989,
      "startColumnNumber" : 27,
      "endLineNumber" : 989,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 989,
        "startColumnNumber" : 27,
        "endLineNumber" : 989,
        "endColumnNumber" : 52
      },
      "nodeContext" : "defaultSampleValues.flags",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 989,
        "startColumnNumber" : 8,
        "endLineNumber" : 989,
        "endColumnNumber" : 52
      },
      "nodeContext" : "firstSampleFlags=defaultSampleValues.flags",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 989,
        "startColumnNumber" : 4,
        "endLineNumber" : 989,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int firstSampleFlags=defaultSampleValues.flags;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 989,
        "startColumnNumber" : 4,
        "endLineNumber" : 989,
        "endColumnNumber" : 53
      },
      "nodeContext" : "int firstSampleFlags=defaultSampleValues.flags;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues"
  }, {
    "nodeContext" : "defaultSampleValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 1026,
      "startColumnNumber" : 69,
      "endLineNumber" : 1026,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 1026,
        "startColumnNumber" : 69,
        "endLineNumber" : 1026,
        "endColumnNumber" : 97
      },
      "nodeContext" : "defaultSampleValues.duration",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 1026,
        "startColumnNumber" : 27,
        "endLineNumber" : 1026,
        "endColumnNumber" : 97
      },
      "nodeContext" : "sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 1026,
        "startColumnNumber" : 10,
        "endLineNumber" : 1026,
        "endColumnNumber" : 98
      },
      "nodeContext" : "checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 1025,
        "startColumnNumber" : 10,
        "endLineNumber" : 1026,
        "endColumnNumber" : 98
      },
      "nodeContext" : "sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 1025,
        "startColumnNumber" : 6,
        "endLineNumber" : 1026,
        "endColumnNumber" : 99
      },
      "nodeContext" : "int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 1023,
        "startColumnNumber" : 54,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1768,
        "startLineNumber" : 1023,
        "startColumnNumber" : 4,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=trackRunStart; i < trackRunEnd; i++) {\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 1026,
        "startColumnNumber" : 10,
        "endLineNumber" : 1026,
        "endColumnNumber" : 98
      },
      "nodeContext" : "checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues"
  }, {
    "nodeContext" : "defaultSampleValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 1028,
      "startColumnNumber" : 65,
      "endLineNumber" : 1028,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 1028,
        "startColumnNumber" : 65,
        "endLineNumber" : 1028,
        "endColumnNumber" : 89
      },
      "nodeContext" : "defaultSampleValues.size",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1028,
        "startColumnNumber" : 27,
        "endLineNumber" : 1028,
        "endColumnNumber" : 89
      },
      "nodeContext" : "sampleSizesPresent ? trun.readInt() : defaultSampleValues.size",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 1028,
        "startColumnNumber" : 10,
        "endLineNumber" : 1028,
        "endColumnNumber" : 90
      },
      "nodeContext" : "checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 1027,
        "startColumnNumber" : 10,
        "endLineNumber" : 1028,
        "endColumnNumber" : 90
      },
      "nodeContext" : "sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 1027,
        "startColumnNumber" : 6,
        "endLineNumber" : 1028,
        "endColumnNumber" : 91
      },
      "nodeContext" : "int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 1023,
        "startColumnNumber" : 54,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1768,
        "startLineNumber" : 1023,
        "startColumnNumber" : 4,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=trackRunStart; i < trackRunEnd; i++) {\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 1028,
        "startColumnNumber" : 10,
        "endLineNumber" : 1028,
        "endColumnNumber" : 90
      },
      "nodeContext" : "checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues"
  }, {
    "nodeContext" : "defaultSampleValues",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 1032,
      "startColumnNumber" : 73,
      "endLineNumber" : 1032,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 1032,
        "startColumnNumber" : 73,
        "endLineNumber" : 1032,
        "endColumnNumber" : 98
      },
      "nodeContext" : "defaultSampleValues.flags",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 1032,
        "startColumnNumber" : 16,
        "endLineNumber" : 1032,
        "endColumnNumber" : 98
      },
      "nodeContext" : "(i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 1030,
        "startColumnNumber" : 10,
        "endLineNumber" : 1032,
        "endColumnNumber" : 98
      },
      "nodeContext" : "sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 1029,
        "startColumnNumber" : 10,
        "endLineNumber" : 1032,
        "endColumnNumber" : 98
      },
      "nodeContext" : "sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 1029,
        "startColumnNumber" : 6,
        "endLineNumber" : 1032,
        "endColumnNumber" : 99
      },
      "nodeContext" : "int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 1023,
        "startColumnNumber" : 54,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1768,
        "startLineNumber" : 1023,
        "startColumnNumber" : 4,
        "endLineNumber" : 1052,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=trackRunStart; i < trackRunEnd; i++) {\n  int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n  int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n  int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n  int sampleCompositionTimeOffset=0;\n  if (sampleCompositionTimeOffsetsPresent) {\n    sampleCompositionTimeOffset=trun.readInt();\n  }\n  long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n  samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n  if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n    samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n  }\n  sampleSizeTable[i]=sampleSize;\n  sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n  cumulativeTime+=sampleDuration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4151,
        "startLineNumber" : 973,
        "startColumnNumber" : 29,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4776,
        "startLineNumber" : 957,
        "startColumnNumber" : 2,
        "endLineNumber" : 1055,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a trun atom (defined in 14496-12).\n * @param trackBundle The {@link TrackBundle} that contains the {@link TrackFragment} into whichparsed data should be placed.\n * @param index Index of the track run in the fragment.\n * @param flags Flags to allow any required workaround to be executed.\n * @param trun The trun atom to decode.\n * @return The starting position of samples for the next run.\n */\nprivate static int parseTrun(TrackBundle trackBundle,int index,@Flags int flags,ParsableByteArray trun,int trackRunStart) throws ParserException {\n  trun.setPosition(Atom.HEADER_SIZE);\n  int fullAtom=trun.readInt();\n  int atomFlags=Atom.parseFullAtomFlags(fullAtom);\n  Track track=trackBundle.moovSampleTable.track;\n  TrackFragment fragment=trackBundle.fragment;\n  DefaultSampleValues defaultSampleValues=castNonNull(fragment.header);\n  fragment.trunLength[index]=trun.readUnsignedIntToInt();\n  fragment.trunDataPosition[index]=fragment.dataPosition;\n  if ((atomFlags & 0x01) != 0) {\n    fragment.trunDataPosition[index]+=trun.readInt();\n  }\n  boolean firstSampleFlagsPresent=(atomFlags & 0x04) != 0;\n  int firstSampleFlags=defaultSampleValues.flags;\n  if (firstSampleFlagsPresent) {\n    firstSampleFlags=trun.readInt();\n  }\n  boolean sampleDurationsPresent=(atomFlags & 0x100) != 0;\n  boolean sampleSizesPresent=(atomFlags & 0x200) != 0;\n  boolean sampleFlagsPresent=(atomFlags & 0x400) != 0;\n  boolean sampleCompositionTimeOffsetsPresent=(atomFlags & 0x800) != 0;\n  long edtsOffset=0;\n  if (track.editListDurations != null && track.editListDurations.length == 1 && track.editListDurations[0] == 0) {\n    edtsOffset=castNonNull(track.editListMediaTimes)[0];\n  }\n  int[] sampleSizeTable=fragment.sampleSizeTable;\n  long[] samplePresentationTimesUs=fragment.samplePresentationTimesUs;\n  boolean[] sampleIsSyncFrameTable=fragment.sampleIsSyncFrameTable;\n  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == C.TRACK_TYPE_VIDEO && (flags & FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) != 0;\n  int trackRunEnd=trackRunStart + fragment.trunLength[index];\n  long timescale=track.timescale;\n  long cumulativeTime=fragment.nextFragmentDecodeTime;\n  for (int i=trackRunStart; i < trackRunEnd; i++) {\n    int sampleDuration=checkNonNegative(sampleDurationsPresent ? trun.readInt() : defaultSampleValues.duration);\n    int sampleSize=checkNonNegative(sampleSizesPresent ? trun.readInt() : defaultSampleValues.size);\n    int sampleFlags=sampleFlagsPresent ? trun.readInt() : (i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags;\n    int sampleCompositionTimeOffset=0;\n    if (sampleCompositionTimeOffsetsPresent) {\n      sampleCompositionTimeOffset=trun.readInt();\n    }\n    long samplePresentationTime=cumulativeTime + sampleCompositionTimeOffset - edtsOffset;\n    samplePresentationTimesUs[i]=Util.scaleLargeTimestamp(samplePresentationTime,C.MICROS_PER_SECOND,timescale);\n    if (!fragment.nextFragmentDecodeTimeIncludesMoov) {\n      samplePresentationTimesUs[i]+=trackBundle.moovSampleTable.durationUs;\n    }\n    sampleSizeTable[i]=sampleSize;\n    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);\n    cumulativeTime+=sampleDuration;\n  }\n  fragment.nextFragmentDecodeTime=cumulativeTime;\n  return trackRunEnd;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 1032,
        "startColumnNumber" : 16,
        "endLineNumber" : 1032,
        "endColumnNumber" : 98
      },
      "nodeContext" : "(i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : defaultSampleValues.flags",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.extractor.mp4.DefaultSampleValues"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 989,
    "startColumnNumber" : 27,
    "endLineNumber" : 989,
    "endColumnNumber" : 46
  }, {
    "charLength" : 19,
    "startLineNumber" : 1026,
    "startColumnNumber" : 69,
    "endLineNumber" : 1026,
    "endColumnNumber" : 88
  }, {
    "charLength" : 19,
    "startLineNumber" : 1028,
    "startColumnNumber" : 65,
    "endLineNumber" : 1028,
    "endColumnNumber" : 84
  }, {
    "charLength" : 19,
    "startLineNumber" : 1032,
    "startColumnNumber" : 73,
    "endLineNumber" : 1032,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}