{
  "id" : 124,
  "expression" : "visited[at]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeDiameter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "visited[at]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 27,
      "startColumnNumber" : 8,
      "endLineNumber" : 27,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 36
      },
      "nodeContext" : "visited[at] == VISITED_TOKEN",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (visited[at] == VISITED_TOKEN) return new int[]{0,parent};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 525,
        "startLineNumber" : 24,
        "startColumnNumber" : 74,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (visited[at] == VISITED_TOKEN)   return new int[]{0,parent};\n  visited[at]=VISITED_TOKEN;\n  int bestDist=0, index=-1;\n  List<Integer> edges=graph.get(at);\n  if (edges != null) {\n    for (    Integer to : edges) {\n      int[] tuple=dfs(graph,to,at);\n      int dist=tuple[0] + 1;\n      if (dist > bestDist) {\n        bestDist=dist;\n        index=tuple[1];\n      }\n    }\n  }\n  return new int[]{bestDist,index};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 47,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static int[] dfs(List<List<Integer>> graph,int at,int parent){\n  if (visited[at] == VISITED_TOKEN)   return new int[]{0,parent};\n  visited[at]=VISITED_TOKEN;\n  int bestDist=0, index=-1;\n  List<Integer> edges=graph.get(at);\n  if (edges != null) {\n    for (    Integer to : edges) {\n      int[] tuple=dfs(graph,to,at);\n      int dist=tuple[0] + 1;\n      if (dist > bestDist) {\n        bestDist=dist;\n        index=tuple[1];\n      }\n    }\n  }\n  return new int[]{bestDist,index};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (visited[at] == VISITED_TOKEN) return new int[]{0,parent};\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 27,
    "startColumnNumber" : 8,
    "endLineNumber" : 27,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}