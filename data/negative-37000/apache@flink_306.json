{
  "id" : 306,
  "expression" : "HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles())",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 400,
      "startLineNumber" : 178,
      "startColumnNumber" : 24,
      "endLineNumber" : 183,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 20,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 183,
        "endColumnNumber" : 65
      },
      "nodeContext" : "handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 183,
        "endColumnNumber" : 66
      },
      "nodeContext" : "handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 184,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 874,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n}\n catch (HandlerRequestException hre) {\n  log.error(\"Could not create the handler request.\",hre);\n  throw new RestHandlerException(String.format(\"Bad request, could not parse parameters: %s\",hre.getMessage()),HttpResponseStatus.BAD_REQUEST,hre);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5000,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!inFlightRequestTracker.registerRequest()) {\n    log.debug(\"The handler instance for {} had already been closed.\",untypedResponseMessageHeaders.getTargetRestEndpointURL());\n    ctx.channel().close();\n    return;\n  }\n  if (!(httpRequest instanceof FullHttpRequest)) {\n    log.error(\"Implementation error: Received a request that wasn't a FullHttpRequest.\");\n    throw new RestHandlerException(\"Bad request received.\",HttpResponseStatus.BAD_REQUEST);\n  }\n  final ByteBuf msgContent=((FullHttpRequest)httpRequest).content();\n  uploadedFiles=FileUploadHandler.getMultipartFileUploads(ctx);\n  if (!untypedResponseMessageHeaders.acceptsFileUploads() && !uploadedFiles.getUploadedFiles().isEmpty()) {\n    throw new RestHandlerException(\"File uploads not allowed.\",HttpResponseStatus.BAD_REQUEST);\n  }\n  R request;\n  if (msgContent.capacity() == 0) {\n    try {\n      request=MAPPER.readValue(\"{}\",untypedResponseMessageHeaders.getRequestClass());\n    }\n catch (    JsonParseException|JsonMappingException je) {\n      throw new RestHandlerException(\"Bad request received. Request did not conform to expected format.\",HttpResponseStatus.BAD_REQUEST,je);\n    }\n  }\n else {\n    try {\n      InputStream in=new ByteBufInputStream(msgContent);\n      request=MAPPER.readValue(in,untypedResponseMessageHeaders.getRequestClass());\n    }\n catch (    JsonParseException|JsonMappingException je) {\n      throw new RestHandlerException(String.format(\"Request did not match expected format %s.\",untypedResponseMessageHeaders.getRequestClass().getSimpleName()),HttpResponseStatus.BAD_REQUEST,je);\n    }\n  }\n  final HandlerRequest<R> handlerRequest;\n  try {\n    handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n  }\n catch (  HandlerRequestException hre) {\n    log.error(\"Could not create the handler request.\",hre);\n    throw new RestHandlerException(String.format(\"Bad request, could not parse parameters: %s\",hre.getMessage()),HttpResponseStatus.BAD_REQUEST,hre);\n  }\n  log.trace(\"Starting request processing.\");\n  CompletableFuture<Void> requestProcessingFuture=respondToRequest(ctx,httpRequest,handlerRequest,gateway);\n  final FileUploads finalUploadedFiles=uploadedFiles;\n  requestProcessingFuture.handle((  Void ignored,  Throwable throwable) -> {\n    if (throwable != null) {\n      return handleException(ExceptionUtils.stripCompletionException(throwable),ctx,httpRequest);\n    }\n    return CompletableFuture.<Void>completedFuture(null);\n  }\n).thenCompose(Function.identity()).whenComplete((  Void ignored,  Throwable throwable) -> {\n    if (throwable != null) {\n      log.warn(\"An exception occurred while handling another exception.\",throwable);\n    }\n    finalizeRequestProcessing(finalUploadedFiles);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5337,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 225,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (!inFlightRequestTracker.registerRequest()) {\n    log.debug(\"The handler instance for {} had already been closed.\",untypedResponseMessageHeaders.getTargetRestEndpointURL());\n    ctx.channel().close();\n    return;\n  }\n  if (!(httpRequest instanceof FullHttpRequest)) {\n    log.error(\"Implementation error: Received a request that wasn't a FullHttpRequest.\");\n    throw new RestHandlerException(\"Bad request received.\",HttpResponseStatus.BAD_REQUEST);\n  }\n  final ByteBuf msgContent=((FullHttpRequest)httpRequest).content();\n  uploadedFiles=FileUploadHandler.getMultipartFileUploads(ctx);\n  if (!untypedResponseMessageHeaders.acceptsFileUploads() && !uploadedFiles.getUploadedFiles().isEmpty()) {\n    throw new RestHandlerException(\"File uploads not allowed.\",HttpResponseStatus.BAD_REQUEST);\n  }\n  R request;\n  if (msgContent.capacity() == 0) {\n    try {\n      request=MAPPER.readValue(\"{}\",untypedResponseMessageHeaders.getRequestClass());\n    }\n catch (    JsonParseException|JsonMappingException je) {\n      throw new RestHandlerException(\"Bad request received. Request did not conform to expected format.\",HttpResponseStatus.BAD_REQUEST,je);\n    }\n  }\n else {\n    try {\n      InputStream in=new ByteBufInputStream(msgContent);\n      request=MAPPER.readValue(in,untypedResponseMessageHeaders.getRequestClass());\n    }\n catch (    JsonParseException|JsonMappingException je) {\n      throw new RestHandlerException(String.format(\"Request did not match expected format %s.\",untypedResponseMessageHeaders.getRequestClass().getSimpleName()),HttpResponseStatus.BAD_REQUEST,je);\n    }\n  }\n  final HandlerRequest<R> handlerRequest;\n  try {\n    handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n  }\n catch (  HandlerRequestException hre) {\n    log.error(\"Could not create the handler request.\",hre);\n    throw new RestHandlerException(String.format(\"Bad request, could not parse parameters: %s\",hre.getMessage()),HttpResponseStatus.BAD_REQUEST,hre);\n  }\n  log.trace(\"Starting request processing.\");\n  CompletableFuture<Void> requestProcessingFuture=respondToRequest(ctx,httpRequest,handlerRequest,gateway);\n  final FileUploads finalUploadedFiles=uploadedFiles;\n  requestProcessingFuture.handle((  Void ignored,  Throwable throwable) -> {\n    if (throwable != null) {\n      return handleException(ExceptionUtils.stripCompletionException(throwable),ctx,httpRequest);\n    }\n    return CompletableFuture.<Void>completedFuture(null);\n  }\n).thenCompose(Function.identity()).whenComplete((  Void ignored,  Throwable throwable) -> {\n    if (throwable != null) {\n      log.warn(\"An exception occurred while handling another exception.\",throwable);\n    }\n    finalizeRequestProcessing(finalUploadedFiles);\n  }\n);\n}\n catch (Throwable e) {\n  final FileUploads finalUploadedFiles=uploadedFiles;\n  handleException(e,ctx,httpRequest).whenComplete((  Void ignored,  Throwable throwable) -> finalizeRequestProcessing(finalUploadedFiles));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 362,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5574,
        "startLineNumber" : 111,
        "startColumnNumber" : 79,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HttpRequest httpRequest=routedRequest.getRequest();\n  if (log.isTraceEnabled()) {\n    log.trace(\"Received request \" + httpRequest.uri() + '.');\n  }\n  FileUploads uploadedFiles=null;\n  try {\n    if (!inFlightRequestTracker.registerRequest()) {\n      log.debug(\"The handler instance for {} had already been closed.\",untypedResponseMessageHeaders.getTargetRestEndpointURL());\n      ctx.channel().close();\n      return;\n    }\n    if (!(httpRequest instanceof FullHttpRequest)) {\n      log.error(\"Implementation error: Received a request that wasn't a FullHttpRequest.\");\n      throw new RestHandlerException(\"Bad request received.\",HttpResponseStatus.BAD_REQUEST);\n    }\n    final ByteBuf msgContent=((FullHttpRequest)httpRequest).content();\n    uploadedFiles=FileUploadHandler.getMultipartFileUploads(ctx);\n    if (!untypedResponseMessageHeaders.acceptsFileUploads() && !uploadedFiles.getUploadedFiles().isEmpty()) {\n      throw new RestHandlerException(\"File uploads not allowed.\",HttpResponseStatus.BAD_REQUEST);\n    }\n    R request;\n    if (msgContent.capacity() == 0) {\n      try {\n        request=MAPPER.readValue(\"{}\",untypedResponseMessageHeaders.getRequestClass());\n      }\n catch (      JsonParseException|JsonMappingException je) {\n        throw new RestHandlerException(\"Bad request received. Request did not conform to expected format.\",HttpResponseStatus.BAD_REQUEST,je);\n      }\n    }\n else {\n      try {\n        InputStream in=new ByteBufInputStream(msgContent);\n        request=MAPPER.readValue(in,untypedResponseMessageHeaders.getRequestClass());\n      }\n catch (      JsonParseException|JsonMappingException je) {\n        throw new RestHandlerException(String.format(\"Request did not match expected format %s.\",untypedResponseMessageHeaders.getRequestClass().getSimpleName()),HttpResponseStatus.BAD_REQUEST,je);\n      }\n    }\n    final HandlerRequest<R> handlerRequest;\n    try {\n      handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n    }\n catch (    HandlerRequestException hre) {\n      log.error(\"Could not create the handler request.\",hre);\n      throw new RestHandlerException(String.format(\"Bad request, could not parse parameters: %s\",hre.getMessage()),HttpResponseStatus.BAD_REQUEST,hre);\n    }\n    log.trace(\"Starting request processing.\");\n    CompletableFuture<Void> requestProcessingFuture=respondToRequest(ctx,httpRequest,handlerRequest,gateway);\n    final FileUploads finalUploadedFiles=uploadedFiles;\n    requestProcessingFuture.handle((    Void ignored,    Throwable throwable) -> {\n      if (throwable != null) {\n        return handleException(ExceptionUtils.stripCompletionException(throwable),ctx,httpRequest);\n      }\n      return CompletableFuture.<Void>completedFuture(null);\n    }\n).thenCompose(Function.identity()).whenComplete((    Void ignored,    Throwable throwable) -> {\n      if (throwable != null) {\n        log.warn(\"An exception occurred while handling another exception.\",throwable);\n      }\n      finalizeRequestProcessing(finalUploadedFiles);\n    }\n);\n  }\n catch (  Throwable e) {\n    final FileUploads finalUploadedFiles=uploadedFiles;\n    handleException(e,ctx,httpRequest).whenComplete((    Void ignored,    Throwable throwable) -> finalizeRequestProcessing(finalUploadedFiles));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 392,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5699,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void respondAsLeader(ChannelHandlerContext ctx,RoutedRequest routedRequest,T gateway){\n  HttpRequest httpRequest=routedRequest.getRequest();\n  if (log.isTraceEnabled()) {\n    log.trace(\"Received request \" + httpRequest.uri() + '.');\n  }\n  FileUploads uploadedFiles=null;\n  try {\n    if (!inFlightRequestTracker.registerRequest()) {\n      log.debug(\"The handler instance for {} had already been closed.\",untypedResponseMessageHeaders.getTargetRestEndpointURL());\n      ctx.channel().close();\n      return;\n    }\n    if (!(httpRequest instanceof FullHttpRequest)) {\n      log.error(\"Implementation error: Received a request that wasn't a FullHttpRequest.\");\n      throw new RestHandlerException(\"Bad request received.\",HttpResponseStatus.BAD_REQUEST);\n    }\n    final ByteBuf msgContent=((FullHttpRequest)httpRequest).content();\n    uploadedFiles=FileUploadHandler.getMultipartFileUploads(ctx);\n    if (!untypedResponseMessageHeaders.acceptsFileUploads() && !uploadedFiles.getUploadedFiles().isEmpty()) {\n      throw new RestHandlerException(\"File uploads not allowed.\",HttpResponseStatus.BAD_REQUEST);\n    }\n    R request;\n    if (msgContent.capacity() == 0) {\n      try {\n        request=MAPPER.readValue(\"{}\",untypedResponseMessageHeaders.getRequestClass());\n      }\n catch (      JsonParseException|JsonMappingException je) {\n        throw new RestHandlerException(\"Bad request received. Request did not conform to expected format.\",HttpResponseStatus.BAD_REQUEST,je);\n      }\n    }\n else {\n      try {\n        InputStream in=new ByteBufInputStream(msgContent);\n        request=MAPPER.readValue(in,untypedResponseMessageHeaders.getRequestClass());\n      }\n catch (      JsonParseException|JsonMappingException je) {\n        throw new RestHandlerException(String.format(\"Request did not match expected format %s.\",untypedResponseMessageHeaders.getRequestClass().getSimpleName()),HttpResponseStatus.BAD_REQUEST,je);\n      }\n    }\n    final HandlerRequest<R> handlerRequest;\n    try {\n      handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles());\n    }\n catch (    HandlerRequestException hre) {\n      log.error(\"Could not create the handler request.\",hre);\n      throw new RestHandlerException(String.format(\"Bad request, could not parse parameters: %s\",hre.getMessage()),HttpResponseStatus.BAD_REQUEST,hre);\n    }\n    log.trace(\"Starting request processing.\");\n    CompletableFuture<Void> requestProcessingFuture=respondToRequest(ctx,httpRequest,handlerRequest,gateway);\n    final FileUploads finalUploadedFiles=uploadedFiles;\n    requestProcessingFuture.handle((    Void ignored,    Throwable throwable) -> {\n      if (throwable != null) {\n        return handleException(ExceptionUtils.stripCompletionException(throwable),ctx,httpRequest);\n      }\n      return CompletableFuture.<Void>completedFuture(null);\n    }\n).thenCompose(Function.identity()).whenComplete((    Void ignored,    Throwable throwable) -> {\n      if (throwable != null) {\n        log.warn(\"An exception occurred while handling another exception.\",throwable);\n      }\n      finalizeRequestProcessing(finalUploadedFiles);\n    }\n);\n  }\n catch (  Throwable e) {\n    final FileUploads finalUploadedFiles=uploadedFiles;\n    handleException(e,ctx,httpRequest).whenComplete((    Void ignored,    Throwable throwable) -> finalizeRequestProcessing(finalUploadedFiles));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 410,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 183,
        "endColumnNumber" : 65
      },
      "nodeContext" : "handlerRequest=HandlerRequest.resolveParametersAndCreate(request,untypedResponseMessageHeaders.getUnresolvedMessageParameters(),routedRequest.getRouteResult().pathParams(),routedRequest.getRouteResult().queryParams(),uploadedFiles.getUploadedFiles())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 22,
      "astHeight" : 5
    },
    "tokenLength" : 13,
    "type" : "org.apache.flink.runtime.rest.handler.HandlerRequest"
  } ],
  "positionList" : [ {
    "charLength" : 400,
    "startLineNumber" : 178,
    "startColumnNumber" : 24,
    "endLineNumber" : 183,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}