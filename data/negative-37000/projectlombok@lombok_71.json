{
  "id" : 71,
  "expression" : "new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/installer/lombok/installer/WindowsDriveInfo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 101,
      "startLineNumber" : 99,
      "startColumnNumber" : 40,
      "endLineNumber" : 100,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 72
      },
      "nodeContext" : "throw new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 99,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 72
      },
      "nodeContext" : "if (drive < 'A' || drive > 'Z') throw new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 346,
        "startLineNumber" : 96,
        "startColumnNumber" : 43,
        "endLineNumber" : 102,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (letter.length() != 1)   throw new IllegalArgumentException(\"Supply 1 letter, not: \" + letter);\n  char drive=Character.toUpperCase(letter.charAt(0));\n  if (drive < 'A' || drive > 'Z')   throw new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\n  return getDriveType(drive + \":\\\\\") == 3L;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 93,
        "startColumnNumber" : 1,
        "endLineNumber" : 102,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Feed it a drive letter (such as 'A') to see if it is a fixed disk.\n */\npublic boolean isFixedDisk(String letter){\n  if (letter.length() != 1)   throw new IllegalArgumentException(\"Supply 1 letter, not: \" + letter);\n  char drive=Character.toUpperCase(letter.charAt(0));\n  if (drive < 'A' || drive > 'Z')   throw new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\n  return getDriveType(drive + \":\\\\\") == 3L;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 57,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 99,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 72
      },
      "nodeContext" : "if (drive < 'A' || drive > 'Z') throw new IllegalArgumentException(\"A drive is indicated by a letter, so A-Z inclusive. Not \" + drive);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 14,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 101,
    "startLineNumber" : 99,
    "startColumnNumber" : 40,
    "endLineNumber" : 100,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}