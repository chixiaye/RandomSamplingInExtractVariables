{
  "id" : 121,
  "expression" : "\"Cannot generate implementation for method: \" + method.getName()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/StateCompiler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Cannot generate implementation for method: \" + method.getName()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 691,
      "startColumnNumber" : 51,
      "endLineNumber" : 691,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 691,
        "startColumnNumber" : 22,
        "endLineNumber" : 691,
        "endColumnNumber" : 116
      },
      "nodeContext" : "new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 691,
        "startColumnNumber" : 16,
        "endLineNumber" : 691,
        "endColumnNumber" : 117
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 690,
        "startColumnNumber" : 17,
        "endLineNumber" : 692,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 882,
        "startLineNumber" : 681,
        "startColumnNumber" : 17,
        "endLineNumber" : 692,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method.getName().startsWith(\"set\")) {\n  String name=method.getName().substring(3);\n  checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n  checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n  checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n  checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n  setters.add(name);\n}\n else {\n  throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1475,
        "startLineNumber" : 673,
        "startColumnNumber" : 17,
        "endLineNumber" : 692,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method.getName().startsWith(\"is\")) {\n  String name=method.getName().substring(2);\n  checkArgument(fieldTypes.get(name) == boolean.class,\"Expected %s to have type boolean, but found %s\",name,fieldTypes.get(name));\n  checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n  checkArgument(method.getReturnType() == boolean.class,\"Expected %s to return boolean\",method.getName());\n  isGetters.add(name);\n}\n else if (method.getName().startsWith(\"set\")) {\n  String name=method.getName().substring(3);\n  checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n  checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n  checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n  checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n  setters.add(name);\n}\n else {\n  throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1991,
        "startLineNumber" : 666,
        "startColumnNumber" : 12,
        "endLineNumber" : 692,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (method.getName().startsWith(\"get\")) {\n  String name=method.getName().substring(3);\n  checkArgument(fieldTypes.get(name).equals(method.getReturnType()),\"Expected %s to return type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getReturnType());\n  checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n  getters.add(name);\n}\n else if (method.getName().startsWith(\"is\")) {\n  String name=method.getName().substring(2);\n  checkArgument(fieldTypes.get(name) == boolean.class,\"Expected %s to have type boolean, but found %s\",name,fieldTypes.get(name));\n  checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n  checkArgument(method.getReturnType() == boolean.class,\"Expected %s to return boolean\",method.getName());\n  isGetters.add(name);\n}\n else if (method.getName().startsWith(\"set\")) {\n  String name=method.getName().substring(3);\n  checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n  checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n  checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n  checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n  setters.add(name);\n}\n else {\n  throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 223,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2446,
        "startLineNumber" : 655,
        "startColumnNumber" : 49,
        "endLineNumber" : 693,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getName().equals(\"getEstimatedSize\")) {\n    checkArgument(method.getReturnType().equals(long.class),\"getEstimatedSize must return long\");\n    checkArgument(method.getParameterTypes().length == 0,\"getEstimatedSize may not have parameters\");\n    continue;\n  }\n  if (method.getName().startsWith(\"get\")) {\n    String name=method.getName().substring(3);\n    checkArgument(fieldTypes.get(name).equals(method.getReturnType()),\"Expected %s to return type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getReturnType());\n    checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n    getters.add(name);\n  }\n else   if (method.getName().startsWith(\"is\")) {\n    String name=method.getName().substring(2);\n    checkArgument(fieldTypes.get(name) == boolean.class,\"Expected %s to have type boolean, but found %s\",name,fieldTypes.get(name));\n    checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n    checkArgument(method.getReturnType() == boolean.class,\"Expected %s to return boolean\",method.getName());\n    isGetters.add(name);\n  }\n else   if (method.getName().startsWith(\"set\")) {\n    String name=method.getName().substring(3);\n    checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n    checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n    checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n    checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n    setters.add(name);\n  }\n else {\n    throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 264,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2487,
        "startLineNumber" : 655,
        "startColumnNumber" : 8,
        "endLineNumber" : 693,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Method method : clazz.getMethods()) {\n  if (Modifier.isStatic(method.getModifiers())) {\n    continue;\n  }\n  if (method.getName().equals(\"getEstimatedSize\")) {\n    checkArgument(method.getReturnType().equals(long.class),\"getEstimatedSize must return long\");\n    checkArgument(method.getParameterTypes().length == 0,\"getEstimatedSize may not have parameters\");\n    continue;\n  }\n  if (method.getName().startsWith(\"get\")) {\n    String name=method.getName().substring(3);\n    checkArgument(fieldTypes.get(name).equals(method.getReturnType()),\"Expected %s to return type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getReturnType());\n    checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n    getters.add(name);\n  }\n else   if (method.getName().startsWith(\"is\")) {\n    String name=method.getName().substring(2);\n    checkArgument(fieldTypes.get(name) == boolean.class,\"Expected %s to have type boolean, but found %s\",name,fieldTypes.get(name));\n    checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n    checkArgument(method.getReturnType() == boolean.class,\"Expected %s to return boolean\",method.getName());\n    isGetters.add(name);\n  }\n else   if (method.getName().startsWith(\"set\")) {\n    String name=method.getName().substring(3);\n    checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n    checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n    checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n    checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n    setters.add(name);\n  }\n else {\n    throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 272,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3054,
        "startLineNumber" : 644,
        "startColumnNumber" : 4,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArgument(clazz.isInterface(),clazz.getName() + \" is not an interface\");\n  Set<String> setters=new HashSet<>();\n  Set<String> getters=new HashSet<>();\n  Set<String> isGetters=new HashSet<>();\n  Map<String,Class<?>> fieldTypes=new HashMap<>();\n  for (  StateField field : fields) {\n    fieldTypes.put(field.getName(),field.getType());\n  }\n  for (  Method method : clazz.getMethods()) {\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getName().equals(\"getEstimatedSize\")) {\n      checkArgument(method.getReturnType().equals(long.class),\"getEstimatedSize must return long\");\n      checkArgument(method.getParameterTypes().length == 0,\"getEstimatedSize may not have parameters\");\n      continue;\n    }\n    if (method.getName().startsWith(\"get\")) {\n      String name=method.getName().substring(3);\n      checkArgument(fieldTypes.get(name).equals(method.getReturnType()),\"Expected %s to return type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getReturnType());\n      checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n      getters.add(name);\n    }\n else     if (method.getName().startsWith(\"is\")) {\n      String name=method.getName().substring(2);\n      checkArgument(fieldTypes.get(name) == boolean.class,\"Expected %s to have type boolean, but found %s\",name,fieldTypes.get(name));\n      checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n      checkArgument(method.getReturnType() == boolean.class,\"Expected %s to return boolean\",method.getName());\n      isGetters.add(name);\n    }\n else     if (method.getName().startsWith(\"set\")) {\n      String name=method.getName().substring(3);\n      checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n      checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n      checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n      checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n      setters.add(name);\n    }\n else {\n      throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n    }\n  }\n  checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(),\"Wrong number of getters/setters\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 376,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3134,
        "startLineNumber" : 643,
        "startColumnNumber" : 4,
        "endLineNumber" : 695,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void checkInterface(Class<?> clazz,List<StateField> fields){\n  checkArgument(clazz.isInterface(),clazz.getName() + \" is not an interface\");\n  Set<String> setters=new HashSet<>();\n  Set<String> getters=new HashSet<>();\n  Set<String> isGetters=new HashSet<>();\n  Map<String,Class<?>> fieldTypes=new HashMap<>();\n  for (  StateField field : fields) {\n    fieldTypes.put(field.getName(),field.getType());\n  }\n  for (  Method method : clazz.getMethods()) {\n    if (Modifier.isStatic(method.getModifiers())) {\n      continue;\n    }\n    if (method.getName().equals(\"getEstimatedSize\")) {\n      checkArgument(method.getReturnType().equals(long.class),\"getEstimatedSize must return long\");\n      checkArgument(method.getParameterTypes().length == 0,\"getEstimatedSize may not have parameters\");\n      continue;\n    }\n    if (method.getName().startsWith(\"get\")) {\n      String name=method.getName().substring(3);\n      checkArgument(fieldTypes.get(name).equals(method.getReturnType()),\"Expected %s to return type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getReturnType());\n      checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n      getters.add(name);\n    }\n else     if (method.getName().startsWith(\"is\")) {\n      String name=method.getName().substring(2);\n      checkArgument(fieldTypes.get(name) == boolean.class,\"Expected %s to have type boolean, but found %s\",name,fieldTypes.get(name));\n      checkArgument(method.getParameterTypes().length == 0,\"Expected %s to have zero parameters\",method.getName());\n      checkArgument(method.getReturnType() == boolean.class,\"Expected %s to return boolean\",method.getName());\n      isGetters.add(name);\n    }\n else     if (method.getName().startsWith(\"set\")) {\n      String name=method.getName().substring(3);\n      checkArgument(method.getParameterTypes().length == 1,\"Expected setter to have one parameter\");\n      checkArgument(fieldTypes.get(name).equals(method.getParameterTypes()[0]),\"Expected %s to accept type %s, but found %s\",method.getName(),fieldTypes.get(name),method.getParameterTypes()[0]);\n      checkArgument(getInitialValue(method) == null,\"initial value annotation not allowed on setter\");\n      checkArgument(method.getReturnType().equals(void.class),\"%s may not return a value\",method.getName());\n      setters.add(name);\n    }\n else {\n      throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n    }\n  }\n  checkArgument(getters.size() + isGetters.size() == setters.size() && setters.size() == fields.size(),\"Wrong number of getters/setters\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 691,
        "startColumnNumber" : 16,
        "endLineNumber" : 691,
        "endColumnNumber" : 117
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Cannot generate implementation for method: \" + method.getName());\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 691,
    "startColumnNumber" : 51,
    "endLineNumber" : 691,
    "endColumnNumber" : 115
  } ],
  "layoutRelationDataList" : [ ]
}