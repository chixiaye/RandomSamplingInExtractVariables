{
  "id" : 428,
  "expression" : "0D",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/RealmObjectSchemaTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0D",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 794,
      "startColumnNumber" : 72,
      "endLineNumber" : 794,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 794,
        "startColumnNumber" : 24,
        "endLineNumber" : 794,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertEquals(0.0D,object.getDouble(fieldName),0D)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 794,
        "startColumnNumber" : 24,
        "endLineNumber" : 794,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(0.0D,object.getDouble(fieldName),0D);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 793,
        "startColumnNumber" : 62,
        "endLineNumber" : 795,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  assertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 793,
        "startColumnNumber" : 27,
        "endLineNumber" : 805,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldType == FieldType.DOUBLE) {\n  assertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\n  assertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\n  assertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\n  assertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\n  assertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\n  assertEquals(0,object.getInt(fieldName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1036,
        "startLineNumber" : 791,
        "startColumnNumber" : 27,
        "endLineNumber" : 805,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldType == FieldType.FLOAT) {\n  assertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\n  assertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\n  assertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\n  assertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\n  assertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\n  assertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\n  assertEquals(0,object.getInt(fieldName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1179,
        "startLineNumber" : 789,
        "startColumnNumber" : 27,
        "endLineNumber" : 805,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldType == FieldType.STRING) {\n  assertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\n  assertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\n  assertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\n  assertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\n  assertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\n  assertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\n  assertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\n  assertEquals(0,object.getInt(fieldName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1311,
        "startLineNumber" : 787,
        "startColumnNumber" : 27,
        "endLineNumber" : 805,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldType == FieldType.BOOLEAN) {\n  assertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\n  assertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\n  assertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\n  assertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\n  assertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\n  assertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\n  assertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\n  assertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\n  assertEquals(0,object.getInt(fieldName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1448,
        "startLineNumber" : 785,
        "startColumnNumber" : 20,
        "endLineNumber" : 805,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (fieldType == FieldType.BLOB) {\n  assertEquals(0,object.getBlob(fieldName).length);\n}\n else if (fieldType == FieldType.BOOLEAN) {\n  assertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\n  assertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\n  assertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\n  assertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\n  assertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\n  assertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\n  assertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\n  assertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\n  assertEquals(0,object.getInt(fieldName));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 161,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2194,
        "startLineNumber" : 770,
        "startColumnNumber" : 12,
        "endLineNumber" : 807,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (fieldType) {\ncase OBJECT:case MIXED:  break;\ndefault:if (!fieldType.isNullable()) {\n  break;\n}\nschema.addField(fieldName,fieldType.getType());\nDynamicRealmObject object=((DynamicRealm)realm).createObject(schema.getClassName());\nassertTrue(object.isNull(fieldName));\nschema.setRequired(fieldName,true);\nassertFalse(object.isNull(fieldName));\nif (fieldType == FieldType.BLOB) {\nassertEquals(0,object.getBlob(fieldName).length);\n}\n else if (fieldType == FieldType.BOOLEAN) {\nassertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\nassertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\nassertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\nassertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\nassertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\nassertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\nassertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\nassertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\nassertEquals(0,object.getInt(fieldName));\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 220,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2267,
        "startLineNumber" : 768,
        "startColumnNumber" : 55,
        "endLineNumber" : 808,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String fieldName=fieldType.name();\nswitch (fieldType) {\ncase OBJECT:case MIXED:    break;\ndefault:  if (!fieldType.isNullable()) {\n    break;\n  }\nschema.addField(fieldName,fieldType.getType());\nDynamicRealmObject object=((DynamicRealm)realm).createObject(schema.getClassName());\nassertTrue(object.isNull(fieldName));\nschema.setRequired(fieldName,true);\nassertFalse(object.isNull(fieldName));\nif (fieldType == FieldType.BLOB) {\nassertEquals(0,object.getBlob(fieldName).length);\n}\n else if (fieldType == FieldType.BOOLEAN) {\nassertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\nassertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\nassertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\nassertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\nassertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\nassertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\nassertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\nassertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\nassertEquals(0,object.getInt(fieldName));\n}\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 229,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 768,
        "startColumnNumber" : 8,
        "endLineNumber" : 808,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (FieldType fieldType : FieldType.values()) {\n  String fieldName=fieldType.name();\nswitch (fieldType) {\ncase OBJECT:case MIXED:    break;\ndefault:  if (!fieldType.isNullable()) {\n    break;\n  }\nschema.addField(fieldName,fieldType.getType());\nDynamicRealmObject object=((DynamicRealm)realm).createObject(schema.getClassName());\nassertTrue(object.isNull(fieldName));\nschema.setRequired(fieldName,true);\nassertFalse(object.isNull(fieldName));\nif (fieldType == FieldType.BLOB) {\nassertEquals(0,object.getBlob(fieldName).length);\n}\n else if (fieldType == FieldType.BOOLEAN) {\nassertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\nassertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\nassertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\nassertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\nassertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\nassertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\nassertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\nassertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\nassertEquals(0,object.getInt(fieldName));\n}\nbreak;\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 237,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 764,
        "startColumnNumber" : 59,
        "endLineNumber" : 867,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (type == ObjectSchemaType.IMMUTABLE) {\n    return;\n  }\n  for (  FieldType fieldType : FieldType.values()) {\n    String fieldName=fieldType.name();\nswitch (fieldType) {\ncase OBJECT:case MIXED:      break;\ndefault:    if (!fieldType.isNullable()) {\n      break;\n    }\n  schema.addField(fieldName,fieldType.getType());\nDynamicRealmObject object=((DynamicRealm)realm).createObject(schema.getClassName());\nassertTrue(object.isNull(fieldName));\nschema.setRequired(fieldName,true);\nassertFalse(object.isNull(fieldName));\nif (fieldType == FieldType.BLOB) {\nassertEquals(0,object.getBlob(fieldName).length);\n}\n else if (fieldType == FieldType.BOOLEAN) {\nassertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\nassertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\nassertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\nassertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\nassertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\nassertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\nassertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\nassertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\nassertEquals(0,object.getInt(fieldName));\n}\nbreak;\n}\n}\nfor (FieldListType fieldType : FieldListType.values()) {\nswitch (fieldType) {\ncase LIST:break;\ncase STRING_LIST:checkListValueConversionToDefaultValue(String.class,\"\");\nbreak;\ncase SHORT_LIST:checkListValueConversionToDefaultValue(Short.class,(short)0);\nbreak;\ncase INT_LIST:checkListValueConversionToDefaultValue(Integer.class,0);\nbreak;\ncase LONG_LIST:checkListValueConversionToDefaultValue(Long.class,0L);\nbreak;\ncase BYTE_LIST:checkListValueConversionToDefaultValue(Byte.class,(byte)0);\nbreak;\ncase BOOLEAN_LIST:checkListValueConversionToDefaultValue(Boolean.class,false);\nbreak;\ncase FLOAT_LIST:checkListValueConversionToDefaultValue(Float.class,0.0F);\nbreak;\ncase DOUBLE_LIST:checkListValueConversionToDefaultValue(Double.class,0.0D);\nbreak;\ncase BLOB_LIST:checkListValueConversionToDefaultValue(byte[].class,new byte[0]);\nbreak;\ncase DATE_LIST:checkListValueConversionToDefaultValue(Date.class,new Date(0));\nbreak;\ncase OBJECT_ID_LIST:checkListValueConversionToDefaultValue(ObjectId.class,new ObjectId(\"000000000000000000000000\"));\nbreak;\ncase DECIMAL128_LIST:checkListValueConversionToDefaultValue(Decimal128.class,Decimal128.parse(\"0\"));\nbreak;\ncase UUID_LIST:checkListValueConversionToDefaultValue(UUID.class,UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));\nbreak;\ncase PRIMITIVE_INT_LIST:case PRIMITIVE_LONG_LIST:case PRIMITIVE_BYTE_LIST:case PRIMITIVE_BOOLEAN_LIST:case PRIMITIVE_FLOAT_LIST:case PRIMITIVE_DOUBLE_LIST:case PRIMITIVE_SHORT_LIST:case MIXED_LIST:break;\ndefault:throw new IllegalArgumentException(\"Unknown type: \" + fieldType);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 436,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5170,
        "startLineNumber" : 763,
        "startColumnNumber" : 4,
        "endLineNumber" : 867,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void setRequired_nullValueBecomesDefaultValue(){\n  if (type == ObjectSchemaType.IMMUTABLE) {\n    return;\n  }\n  for (  FieldType fieldType : FieldType.values()) {\n    String fieldName=fieldType.name();\nswitch (fieldType) {\ncase OBJECT:case MIXED:      break;\ndefault:    if (!fieldType.isNullable()) {\n      break;\n    }\n  schema.addField(fieldName,fieldType.getType());\nDynamicRealmObject object=((DynamicRealm)realm).createObject(schema.getClassName());\nassertTrue(object.isNull(fieldName));\nschema.setRequired(fieldName,true);\nassertFalse(object.isNull(fieldName));\nif (fieldType == FieldType.BLOB) {\nassertEquals(0,object.getBlob(fieldName).length);\n}\n else if (fieldType == FieldType.BOOLEAN) {\nassertFalse(object.getBoolean(fieldName));\n}\n else if (fieldType == FieldType.STRING) {\nassertEquals(0,object.getString(fieldName).length());\n}\n else if (fieldType == FieldType.FLOAT) {\nassertEquals(0.0F,object.getFloat(fieldName),0F);\n}\n else if (fieldType == FieldType.DOUBLE) {\nassertEquals(0.0D,object.getDouble(fieldName),0D);\n}\n else if (fieldType == FieldType.DATE) {\nassertEquals(new Date(0),object.getDate(fieldName));\n}\n else if (fieldType == FieldType.OBJECT_ID) {\nassertEquals(new ObjectId(\"000000000000000000000000\"),object.getObjectId(fieldName));\n}\n else if (fieldType == FieldType.DECIMAL128) {\nassertEquals(Decimal128.parse(\"0\"),object.getDecimal128(fieldName));\n}\n else if (fieldType == FieldType.UUID) {\nassertEquals(UUID.fromString(\"00000000-0000-0000-0000-000000000000\"),object.getUUID(fieldName));\n}\n else {\nassertEquals(0,object.getInt(fieldName));\n}\nbreak;\n}\n}\nfor (FieldListType fieldType : FieldListType.values()) {\nswitch (fieldType) {\ncase LIST:break;\ncase STRING_LIST:checkListValueConversionToDefaultValue(String.class,\"\");\nbreak;\ncase SHORT_LIST:checkListValueConversionToDefaultValue(Short.class,(short)0);\nbreak;\ncase INT_LIST:checkListValueConversionToDefaultValue(Integer.class,0);\nbreak;\ncase LONG_LIST:checkListValueConversionToDefaultValue(Long.class,0L);\nbreak;\ncase BYTE_LIST:checkListValueConversionToDefaultValue(Byte.class,(byte)0);\nbreak;\ncase BOOLEAN_LIST:checkListValueConversionToDefaultValue(Boolean.class,false);\nbreak;\ncase FLOAT_LIST:checkListValueConversionToDefaultValue(Float.class,0.0F);\nbreak;\ncase DOUBLE_LIST:checkListValueConversionToDefaultValue(Double.class,0.0D);\nbreak;\ncase BLOB_LIST:checkListValueConversionToDefaultValue(byte[].class,new byte[0]);\nbreak;\ncase DATE_LIST:checkListValueConversionToDefaultValue(Date.class,new Date(0));\nbreak;\ncase OBJECT_ID_LIST:checkListValueConversionToDefaultValue(ObjectId.class,new ObjectId(\"000000000000000000000000\"));\nbreak;\ncase DECIMAL128_LIST:checkListValueConversionToDefaultValue(Decimal128.class,Decimal128.parse(\"0\"));\nbreak;\ncase UUID_LIST:checkListValueConversionToDefaultValue(UUID.class,UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));\nbreak;\ncase PRIMITIVE_INT_LIST:case PRIMITIVE_LONG_LIST:case PRIMITIVE_BYTE_LIST:case PRIMITIVE_BOOLEAN_LIST:case PRIMITIVE_FLOAT_LIST:case PRIMITIVE_DOUBLE_LIST:case PRIMITIVE_SHORT_LIST:case MIXED_LIST:break;\ndefault:throw new IllegalArgumentException(\"Unknown type: \" + fieldType);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 442,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 794,
        "startColumnNumber" : 24,
        "endLineNumber" : 794,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(0.0D,object.getDouble(fieldName),0D);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 794,
    "startColumnNumber" : 72,
    "endLineNumber" : 794,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}