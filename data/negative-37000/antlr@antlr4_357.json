{
  "id" : 357,
  "expression" : "\"Listener.dart\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/dart/BaseDartTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Listener.dart\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 122,
      "startColumnNumber" : 28,
      "endLineNumber" : 122,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 122,
        "startColumnNumber" : 14,
        "endLineNumber" : 122,
        "endColumnNumber" : 43
      },
      "nodeContext" : "grammarName + \"Listener.dart\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 44
      },
      "nodeContext" : "files.add(grammarName + \"Listener.dart\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 45
      },
      "nodeContext" : "files.add(grammarName + \"Listener.dart\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 121,
        "startColumnNumber" : 45,
        "endLineNumber" : 124,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  files.add(grammarName + \"Listener.dart\");\n  files.add(grammarName + \"BaseListener.dart\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 121,
        "startColumnNumber" : 3,
        "endLineNumber" : 124,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!optionsSet.contains(\"-no-listener\")) {\n  files.add(grammarName + \"Listener.dart\");\n  files.add(grammarName + \"BaseListener.dart\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 508,
        "startLineNumber" : 117,
        "startColumnNumber" : 26,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  files.add(parserName + \".dart\");\n  Set<String> optionsSet=new HashSet<String>(Arrays.asList(extraOptions));\n  String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n  if (!optionsSet.contains(\"-no-listener\")) {\n    files.add(grammarName + \"Listener.dart\");\n    files.add(grammarName + \"BaseListener.dart\");\n  }\n  if (optionsSet.contains(\"-visitor\")) {\n    files.add(grammarName + \"Visitor.dart\");\n    files.add(grammarName + \"BaseVisitor.dart\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 117,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (parserName != null) {\n  files.add(parserName + \".dart\");\n  Set<String> optionsSet=new HashSet<String>(Arrays.asList(extraOptions));\n  String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n  if (!optionsSet.contains(\"-no-listener\")) {\n    files.add(grammarName + \"Listener.dart\");\n    files.add(grammarName + \"BaseListener.dart\");\n  }\n  if (optionsSet.contains(\"-visitor\")) {\n    files.add(grammarName + \"Visitor.dart\");\n    files.add(grammarName + \"BaseVisitor.dart\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2518,
        "startLineNumber" : 106,
        "startColumnNumber" : 37,
        "endLineNumber" : 178,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ErrorQueue equeue=BaseRuntimeTest.antlrOnString(getTempDirPath(),\"Dart\",grammarFileName,grammarStr,defaultListener,extraOptions);\n  if (!equeue.errors.isEmpty()) {\n    return false;\n  }\n  List<String> files=new ArrayList<String>();\n  if (lexerName != null) {\n    files.add(lexerName + \".dart\");\n  }\n  if (parserName != null) {\n    files.add(parserName + \".dart\");\n    Set<String> optionsSet=new HashSet<String>(Arrays.asList(extraOptions));\n    String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n    if (!optionsSet.contains(\"-no-listener\")) {\n      files.add(grammarName + \"Listener.dart\");\n      files.add(grammarName + \"BaseListener.dart\");\n    }\n    if (optionsSet.contains(\"-visitor\")) {\n      files.add(grammarName + \"Visitor.dart\");\n      files.add(grammarName + \"BaseVisitor.dart\");\n    }\n  }\n  String runtime=locateRuntime();\n  writeFile(getTempDirPath(),\"pubspec.yaml\",\"name: \\\"test\\\"\\n\" + \"dependencies:\\n\" + \"  antlr4:\\n\"+ \"    path: \" + runtime + \"\\n\"+ \"environment:\\n\"+ \"  sdk: \\\">=2.12.0 <3.0.0\\\"\\n\");\n  final File dartToolDir=new File(getTempDirPath(),\".dart_tool\");\n  if (cacheDartPackages == null) {\n    try {\n      final Process process=Runtime.getRuntime().exec(new String[]{locateDart(),\"pub\",\"get\"},null,getTempTestDir());\n      StreamVacuum stderrVacuum=new StreamVacuum(process.getErrorStream());\n      stderrVacuum.start();\n      Timer timer=new Timer();\n      timer.schedule(new TimerTask(){\n        @Override public void run(){\n          try {\n            process.destroy();\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n,30_000);\n      process.waitFor();\n      timer.cancel();\n      stderrVacuum.join();\n      String stderrDuringPubGet=stderrVacuum.toString();\n      if (!stderrDuringPubGet.isEmpty()) {\n        System.out.println(\"Pub Get error: \" + stderrVacuum);\n      }\n    }\n catch (    IOException|InterruptedException e) {\n      e.printStackTrace();\n      return false;\n    }\n    cacheDartPackages=readFile(getTempDirPath(),\".packages\");\n    cacheDartPackageConfig=readFile(dartToolDir.getAbsolutePath(),\"package_config.json\");\n  }\n else {\n    writeFile(getTempDirPath(),\".packages\",cacheDartPackages);\n    dartToolDir.mkdir();\n    writeFile(dartToolDir.getAbsolutePath(),\"package_config.json\",cacheDartPackageConfig);\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2809,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 178,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Return true if all is well\n */\nprotected boolean rawGenerateAndBuildRecognizer(String grammarFileName,String grammarStr,String parserName,String lexerName,boolean defaultListener,String... extraOptions){\n  ErrorQueue equeue=BaseRuntimeTest.antlrOnString(getTempDirPath(),\"Dart\",grammarFileName,grammarStr,defaultListener,extraOptions);\n  if (!equeue.errors.isEmpty()) {\n    return false;\n  }\n  List<String> files=new ArrayList<String>();\n  if (lexerName != null) {\n    files.add(lexerName + \".dart\");\n  }\n  if (parserName != null) {\n    files.add(parserName + \".dart\");\n    Set<String> optionsSet=new HashSet<String>(Arrays.asList(extraOptions));\n    String grammarName=grammarFileName.substring(0,grammarFileName.lastIndexOf('.'));\n    if (!optionsSet.contains(\"-no-listener\")) {\n      files.add(grammarName + \"Listener.dart\");\n      files.add(grammarName + \"BaseListener.dart\");\n    }\n    if (optionsSet.contains(\"-visitor\")) {\n      files.add(grammarName + \"Visitor.dart\");\n      files.add(grammarName + \"BaseVisitor.dart\");\n    }\n  }\n  String runtime=locateRuntime();\n  writeFile(getTempDirPath(),\"pubspec.yaml\",\"name: \\\"test\\\"\\n\" + \"dependencies:\\n\" + \"  antlr4:\\n\"+ \"    path: \" + runtime + \"\\n\"+ \"environment:\\n\"+ \"  sdk: \\\">=2.12.0 <3.0.0\\\"\\n\");\n  final File dartToolDir=new File(getTempDirPath(),\".dart_tool\");\n  if (cacheDartPackages == null) {\n    try {\n      final Process process=Runtime.getRuntime().exec(new String[]{locateDart(),\"pub\",\"get\"},null,getTempTestDir());\n      StreamVacuum stderrVacuum=new StreamVacuum(process.getErrorStream());\n      stderrVacuum.start();\n      Timer timer=new Timer();\n      timer.schedule(new TimerTask(){\n        @Override public void run(){\n          try {\n            process.destroy();\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n,30_000);\n      process.waitFor();\n      timer.cancel();\n      stderrVacuum.join();\n      String stderrDuringPubGet=stderrVacuum.toString();\n      if (!stderrDuringPubGet.isEmpty()) {\n        System.out.println(\"Pub Get error: \" + stderrVacuum);\n      }\n    }\n catch (    IOException|InterruptedException e) {\n      e.printStackTrace();\n      return false;\n    }\n    cacheDartPackages=readFile(getTempDirPath(),\".packages\");\n    cacheDartPackageConfig=readFile(dartToolDir.getAbsolutePath(),\"package_config.json\");\n  }\n else {\n    writeFile(getTempDirPath(),\".packages\",cacheDartPackages);\n    dartToolDir.mkdir();\n    writeFile(dartToolDir.getAbsolutePath(),\"package_config.json\",cacheDartPackageConfig);\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 377,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 45
      },
      "nodeContext" : "files.add(grammarName + \"Listener.dart\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 122,
    "startColumnNumber" : 28,
    "endLineNumber" : 122,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}