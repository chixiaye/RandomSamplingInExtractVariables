{
  "id" : 176,
  "expression" : "true",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/logappender/src/test/java/org/apache/rocketmq/logappender/AbstractTestCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 53,
      "startColumnNumber" : 31,
      "endLineNumber" : 53,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 36
      },
      "nodeContext" : "instance.setAccessible(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 37
      },
      "nodeContext" : "instance.setAccessible(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 41,
        "startColumnNumber" : 54,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DefaultMQProducer defaultMQProducer=spy(new DefaultMQProducer(\"loggerAppender\"));\n  doAnswer(new Answer<Void>(){\n    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      Message message=(Message)invocationOnMock.getArgument(0);\n      messages.add(message);\n      return null;\n    }\n  }\n).when(defaultMQProducer).sendOneway(any(Message.class));\n  ProducerInstance spy=mock(ProducerInstance.class);\n  Field instance=ProducerInstance.class.getDeclaredField(\"instance\");\n  instance.setAccessible(true);\n  instance.set(ProducerInstance.class,spy);\n  doReturn(defaultMQProducer).when(spy).getInstance(anyString(),anyString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 845,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void mockLoggerAppender() throws Exception {\n  DefaultMQProducer defaultMQProducer=spy(new DefaultMQProducer(\"loggerAppender\"));\n  doAnswer(new Answer<Void>(){\n    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      Message message=(Message)invocationOnMock.getArgument(0);\n      messages.add(message);\n      return null;\n    }\n  }\n).when(defaultMQProducer).sendOneway(any(Message.class));\n  ProducerInstance spy=mock(ProducerInstance.class);\n  Field instance=ProducerInstance.class.getDeclaredField(\"instance\");\n  instance.setAccessible(true);\n  instance.set(ProducerInstance.class,spy);\n  doReturn(defaultMQProducer).when(spy).getInstance(anyString(),anyString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 37
      },
      "nodeContext" : "instance.setAccessible(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 53,
    "startColumnNumber" : 31,
    "endLineNumber" : 53,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}