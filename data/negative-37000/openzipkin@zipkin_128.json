{
  "id" : 128,
  "expression" : "IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build())",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/test/java/zipkin/SpanStoreTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 202,
      "startLineNumber" : 699,
      "startColumnNumber" : 28,
      "endLineNumber" : 701,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 43,
    "astHeight" : 11,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 699,
        "startColumnNumber" : 28,
        "endLineNumber" : 701,
        "endColumnNumber" : 79
      },
      "nodeContext" : "IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 47,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 699,
        "startColumnNumber" : 15,
        "endLineNumber" : 701,
        "endColumnNumber" : 79
      },
      "nodeContext" : "earlySpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 49,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 699,
        "startColumnNumber" : 4,
        "endLineNumber" : 701,
        "endColumnNumber" : 80
      },
      "nodeContext" : "List<Span> earlySpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 55,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1841,
        "startLineNumber" : 692,
        "startColumnNumber" : 47,
        "endLineNumber" : 731,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<BinaryAnnotation> annotations=IntStream.rangeClosed(1,10).mapToObj(i -> BinaryAnnotation.create(LOCAL_COMPONENT,\"serviceAnnotation\",Endpoint.create(\"service\" + i,127 << 24 | i,8080))).collect(Collectors.toList());\n  long gapBetweenSpans=100;\n  List<Span> earlySpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList());\n  List<Span> lateSpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"late\").traceId(i + 10).id(i + 10).timestamp((today + gapBetweenSpans - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList());\n  accept(earlySpans.toArray(new Span[10]));\n  accept(lateSpans.toArray(new Span[10]));\n  List<Span>[] earlyTraces=earlySpans.stream().map(Collections::singletonList).toArray(List[]::new);\n  List<Span>[] lateTraces=lateSpans.stream().map(Collections::singletonList).toArray(List[]::new);\n  assertThat(store().getTraces(QueryRequest.builder().serviceName(\"service1\").build())).containsExactly(lateTraces[0],earlyTraces[0]);\n  assertThat(store().getTraces(QueryRequest.builder().limit(20).build())).hasSize(20);\n  assertThat(store().getTraces(QueryRequest.builder().limit(10).build())).containsExactly(lateTraces);\n  assertThat(store().getTraces(QueryRequest.builder().limit(20).endTs(today + gapBetweenSpans).lookback(gapBetweenSpans).build())).containsExactly(lateTraces);\n  assertThat(store().getTraces(QueryRequest.builder().limit(20).endTs(today).build())).containsExactly(earlyTraces);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1886,
        "startLineNumber" : 692,
        "startColumnNumber" : 2,
        "endLineNumber" : 731,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void getTraces_acrossServices(){\n  List<BinaryAnnotation> annotations=IntStream.rangeClosed(1,10).mapToObj(i -> BinaryAnnotation.create(LOCAL_COMPONENT,\"serviceAnnotation\",Endpoint.create(\"service\" + i,127 << 24 | i,8080))).collect(Collectors.toList());\n  long gapBetweenSpans=100;\n  List<Span> earlySpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList());\n  List<Span> lateSpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"late\").traceId(i + 10).id(i + 10).timestamp((today + gapBetweenSpans - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList());\n  accept(earlySpans.toArray(new Span[10]));\n  accept(lateSpans.toArray(new Span[10]));\n  List<Span>[] earlyTraces=earlySpans.stream().map(Collections::singletonList).toArray(List[]::new);\n  List<Span>[] lateTraces=lateSpans.stream().map(Collections::singletonList).toArray(List[]::new);\n  assertThat(store().getTraces(QueryRequest.builder().serviceName(\"service1\").build())).containsExactly(lateTraces[0],earlyTraces[0]);\n  assertThat(store().getTraces(QueryRequest.builder().limit(20).build())).hasSize(20);\n  assertThat(store().getTraces(QueryRequest.builder().limit(10).build())).containsExactly(lateTraces);\n  assertThat(store().getTraces(QueryRequest.builder().limit(20).endTs(today + gapBetweenSpans).lookback(gapBetweenSpans).build())).containsExactly(lateTraces);\n  assertThat(store().getTraces(QueryRequest.builder().limit(20).endTs(today).build())).containsExactly(earlyTraces);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 348,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 245,
        "startLineNumber" : 699,
        "startColumnNumber" : 4,
        "endLineNumber" : 701,
        "endColumnNumber" : 80
      },
      "nodeContext" : "List<Span> earlySpans=IntStream.rangeClosed(1,10).mapToObj(i -> Span.builder().name(\"early\").traceId(i).id(i).timestamp((today - i) * 1000).duration(1L).addBinaryAnnotation(annotations.get(i - 1)).build()).collect(toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 55,
      "astHeight" : 14
    },
    "tokenLength" : 30,
    "type" : "java.util.stream.Stream<zipkin.Span>"
  } ],
  "positionList" : [ {
    "charLength" : 202,
    "startLineNumber" : 699,
    "startColumnNumber" : 28,
    "endLineNumber" : 701,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}