{
  "id" : 78,
  "expression" : "\"Application registered itself as {}\"",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-starter-client/src/main/java/de/codecentric/boot/admin/client/registration/ApplicationRegistrator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Application registered itself as {}\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 74,
      "startColumnNumber" : 36,
      "endLineNumber" : 74,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 74,
        "startColumnNumber" : 24,
        "endLineNumber" : 74,
        "endColumnNumber" : 94
      },
      "nodeContext" : "LOGGER.info(\"Application registered itself as {}\",response.getBody())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 74,
        "startColumnNumber" : 24,
        "endLineNumber" : 74,
        "endColumnNumber" : 95
      },
      "nodeContext" : "LOGGER.info(\"Application registered itself as {}\",response.getBody());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 73,
        "startColumnNumber" : 99,
        "endLineNumber" : 75,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  LOGGER.info(\"Application registered itself as {}\",response.getBody());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 323,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 77,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n  LOGGER.info(\"Application registered itself as {}\",response.getBody());\n}\n else {\n  LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 521,
        "startLineNumber" : 72,
        "startColumnNumber" : 64,
        "endLineNumber" : 83,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n    LOGGER.info(\"Application registered itself as {}\",response.getBody());\n  }\n else {\n    LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n  }\n  isRegistrationSuccessful=true;\n  if (client.isRegisterOnce()) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1100,
        "startLineNumber" : 72,
        "startColumnNumber" : 16,
        "endLineNumber" : 92,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (response.getStatusCode().is2xxSuccessful()) {\n  if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n    LOGGER.info(\"Application registered itself as {}\",response.getBody());\n  }\n else {\n    LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n  }\n  isRegistrationSuccessful=true;\n  if (client.isRegisterOnce()) {\n    break;\n  }\n}\n else {\n  if (unsuccessfulAttempts.get() == 0) {\n    LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n  }\n else {\n    LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1317,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response=template.postForEntity(adminUrl,new HttpEntity<>(self,HTTP_HEADERS),Map.class);\n  if (response.getStatusCode().is2xxSuccessful()) {\n    if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n      LOGGER.info(\"Application registered itself as {}\",response.getBody());\n    }\n else {\n      LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n    }\n    isRegistrationSuccessful=true;\n    if (client.isRegisterOnce()) {\n      break;\n    }\n  }\n else {\n    if (unsuccessfulAttempts.get() == 0) {\n      LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n    }\n else {\n      LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response=template.postForEntity(adminUrl,new HttpEntity<>(self,HTTP_HEADERS),Map.class);\n  if (response.getStatusCode().is2xxSuccessful()) {\n    if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n      LOGGER.info(\"Application registered itself as {}\",response.getBody());\n    }\n else {\n      LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n    }\n    isRegistrationSuccessful=true;\n    if (client.isRegisterOnce()) {\n      break;\n    }\n  }\n else {\n    if (unsuccessfulAttempts.get() == 0) {\n      LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n    }\n else {\n      LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n    }\n  }\n}\n catch (Exception ex) {\n  if (unsuccessfulAttempts.get() == 0) {\n    LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level\",self,client.getAdminUrl(),ex.getMessage());\n  }\n else {\n    LOGGER.debug(\"Failed to register application as {} at spring-boot-admin ({}): {}\",self,client.getAdminUrl(),ex.getMessage());\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1906,
        "startLineNumber" : 67,
        "startColumnNumber" : 53,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response=template.postForEntity(adminUrl,new HttpEntity<>(self,HTTP_HEADERS),Map.class);\n    if (response.getStatusCode().is2xxSuccessful()) {\n      if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n        LOGGER.info(\"Application registered itself as {}\",response.getBody());\n      }\n else {\n        LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n      }\n      isRegistrationSuccessful=true;\n      if (client.isRegisterOnce()) {\n        break;\n      }\n    }\n else {\n      if (unsuccessfulAttempts.get() == 0) {\n        LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n      }\n else {\n        LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n      }\n    }\n  }\n catch (  Exception ex) {\n    if (unsuccessfulAttempts.get() == 0) {\n      LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level\",self,client.getAdminUrl(),ex.getMessage());\n    }\n else {\n      LOGGER.debug(\"Failed to register application as {} at spring-boot-admin ({}): {}\",self,client.getAdminUrl(),ex.getMessage());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1951,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String adminUrl : client.getAdminUrl()) {\n  try {\n    @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response=template.postForEntity(adminUrl,new HttpEntity<>(self,HTTP_HEADERS),Map.class);\n    if (response.getStatusCode().is2xxSuccessful()) {\n      if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n        LOGGER.info(\"Application registered itself as {}\",response.getBody());\n      }\n else {\n        LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n      }\n      isRegistrationSuccessful=true;\n      if (client.isRegisterOnce()) {\n        break;\n      }\n    }\n else {\n      if (unsuccessfulAttempts.get() == 0) {\n        LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n      }\n else {\n        LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n      }\n    }\n  }\n catch (  Exception ex) {\n    if (unsuccessfulAttempts.get() == 0) {\n      LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level\",self,client.getAdminUrl(),ex.getMessage());\n    }\n else {\n      LOGGER.debug(\"Failed to register application as {} at spring-boot-admin ({}): {}\",self,client.getAdminUrl(),ex.getMessage());\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 148,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2267,
        "startLineNumber" : 64,
        "startColumnNumber" : 30,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isRegistrationSuccessful=false;\n  Application self=createApplication();\n  for (  String adminUrl : client.getAdminUrl()) {\n    try {\n      @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response=template.postForEntity(adminUrl,new HttpEntity<>(self,HTTP_HEADERS),Map.class);\n      if (response.getStatusCode().is2xxSuccessful()) {\n        if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n          LOGGER.info(\"Application registered itself as {}\",response.getBody());\n        }\n else {\n          LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n        }\n        isRegistrationSuccessful=true;\n        if (client.isRegisterOnce()) {\n          break;\n        }\n      }\n else {\n        if (unsuccessfulAttempts.get() == 0) {\n          LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n        }\n else {\n          LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n        }\n      }\n    }\n catch (    Exception ex) {\n      if (unsuccessfulAttempts.get() == 0) {\n        LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level\",self,client.getAdminUrl(),ex.getMessage());\n      }\n else {\n        LOGGER.debug(\"Failed to register application as {} at spring-boot-admin ({}): {}\",self,client.getAdminUrl(),ex.getMessage());\n      }\n    }\n  }\n  if (!isRegistrationSuccessful) {\n    unsuccessfulAttempts.incrementAndGet();\n  }\n else {\n    unsuccessfulAttempts.set(0);\n  }\n  return isRegistrationSuccessful;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Registers the client application at spring-boot-admin-server.\n * @return true if successful registration on at least one admin server\n */\npublic boolean register(){\n  boolean isRegistrationSuccessful=false;\n  Application self=createApplication();\n  for (  String adminUrl : client.getAdminUrl()) {\n    try {\n      @SuppressWarnings(\"rawtypes\") ResponseEntity<Map> response=template.postForEntity(adminUrl,new HttpEntity<>(self,HTTP_HEADERS),Map.class);\n      if (response.getStatusCode().is2xxSuccessful()) {\n        if (registeredId.compareAndSet(null,response.getBody().get(\"id\").toString())) {\n          LOGGER.info(\"Application registered itself as {}\",response.getBody());\n        }\n else {\n          LOGGER.debug(\"Application refreshed itself as {}\",response.getBody());\n        }\n        isRegistrationSuccessful=true;\n        if (client.isRegisterOnce()) {\n          break;\n        }\n      }\n else {\n        if (unsuccessfulAttempts.get() == 0) {\n          LOGGER.warn(\"Application failed to registered itself as {}. Response: {}. Further attempts are logged on DEBUG level\",self,response.toString());\n        }\n else {\n          LOGGER.debug(\"Application failed to registered itself as {}. Response: {}\",self,response.toString());\n        }\n      }\n    }\n catch (    Exception ex) {\n      if (unsuccessfulAttempts.get() == 0) {\n        LOGGER.warn(\"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level\",self,client.getAdminUrl(),ex.getMessage());\n      }\n else {\n        LOGGER.debug(\"Failed to register application as {} at spring-boot-admin ({}): {}\",self,client.getAdminUrl(),ex.getMessage());\n      }\n    }\n  }\n  if (!isRegistrationSuccessful) {\n    unsuccessfulAttempts.incrementAndGet();\n  }\n else {\n    unsuccessfulAttempts.set(0);\n  }\n  return isRegistrationSuccessful;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 74,
        "startColumnNumber" : 24,
        "endLineNumber" : 74,
        "endColumnNumber" : 95
      },
      "nodeContext" : "LOGGER.info(\"Application registered itself as {}\",response.getBody());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 74,
    "startColumnNumber" : 36,
    "endLineNumber" : 74,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}