{
  "id" : 10,
  "expression" : "System",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/rpc/TbSendRPCRequestNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "System",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 93,
      "startColumnNumber" : 85,
      "endLineNumber" : 93,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 93,
        "startColumnNumber" : 85,
        "endLineNumber" : 93,
        "endColumnNumber" : 111
      },
      "nodeContext" : "System.currentTimeMillis()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 93,
        "startColumnNumber" : 85,
        "endLineNumber" : 93,
        "endColumnNumber" : 169
      },
      "nodeContext" : "System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 93,
        "startColumnNumber" : 84,
        "endLineNumber" : 93,
        "endColumnNumber" : 170
      },
      "nodeContext" : "(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 93,
        "startColumnNumber" : 34,
        "endLineNumber" : 93,
        "endColumnNumber" : 170
      },
      "nodeContext" : "!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 93,
        "startColumnNumber" : 17,
        "endLineNumber" : 93,
        "endColumnNumber" : 170
      },
      "nodeContext" : "expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 171
      },
      "nodeContext" : "long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2975,
        "startLineNumber" : 77,
        "startColumnNumber" : 15,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int requestId=json.has(\"requestId\") ? json.get(\"requestId\").getAsInt() : random.nextInt();\n  boolean restApiCall=msg.getType().equals(DataConstants.RPC_CALL_FROM_SERVER_TO_DEVICE);\n  tmp=msg.getMetaData().getValue(\"oneway\");\n  boolean oneway=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(DataConstants.PERSISTENT);\n  boolean persisted=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(\"requestUUID\");\n  UUID requestUUID=!StringUtils.isEmpty(tmp) ? UUID.fromString(tmp) : Uuids.timeBased();\n  tmp=msg.getMetaData().getValue(\"originServiceId\");\n  String originServiceId=!StringUtils.isEmpty(tmp) ? tmp : null;\n  tmp=msg.getMetaData().getValue(DataConstants.EXPIRATION_TIME);\n  long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n  tmp=msg.getMetaData().getValue(DataConstants.RETRIES);\n  Integer retries=!StringUtils.isEmpty(tmp) ? Integer.parseInt(tmp) : null;\n  String params=parseJsonData(json.get(\"params\"));\n  String additionalInfo=parseJsonData(json.get(DataConstants.ADDITIONAL_INFO));\n  RuleEngineDeviceRpcRequest request=RuleEngineDeviceRpcRequest.builder().oneway(oneway).method(json.get(\"method\").getAsString()).body(params).tenantId(ctx.getTenantId()).deviceId(new DeviceId(msg.getOriginator().getId())).requestId(requestId).requestUUID(requestUUID).originServiceId(originServiceId).expirationTime(expirationTime).retries(retries).restApiCall(restApiCall).persisted(persisted).additionalInfo(additionalInfo).build();\n  ctx.getRpcService().sendRpcRequestToDevice(request,ruleEngineDeviceRpcResponse -> {\n    if (ruleEngineDeviceRpcResponse.getError().isEmpty()) {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n      ctx.enqueueForTellNext(next,TbRelationTypes.SUCCESS);\n    }\n else {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),wrap(\"error\",ruleEngineDeviceRpcResponse.getError().get().name()));\n      ctx.enqueueForTellFailure(next,ruleEngineDeviceRpcResponse.getError().get().name());\n    }\n  }\n);\n  ctx.ack(msg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3115,
        "startLineNumber" : 75,
        "startColumnNumber" : 15,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!json.has(\"params\")) {\n  ctx.tellFailure(msg,new RuntimeException(\"Params are not present in the message!\"));\n}\n else {\n  int requestId=json.has(\"requestId\") ? json.get(\"requestId\").getAsInt() : random.nextInt();\n  boolean restApiCall=msg.getType().equals(DataConstants.RPC_CALL_FROM_SERVER_TO_DEVICE);\n  tmp=msg.getMetaData().getValue(\"oneway\");\n  boolean oneway=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(DataConstants.PERSISTENT);\n  boolean persisted=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(\"requestUUID\");\n  UUID requestUUID=!StringUtils.isEmpty(tmp) ? UUID.fromString(tmp) : Uuids.timeBased();\n  tmp=msg.getMetaData().getValue(\"originServiceId\");\n  String originServiceId=!StringUtils.isEmpty(tmp) ? tmp : null;\n  tmp=msg.getMetaData().getValue(DataConstants.EXPIRATION_TIME);\n  long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n  tmp=msg.getMetaData().getValue(DataConstants.RETRIES);\n  Integer retries=!StringUtils.isEmpty(tmp) ? Integer.parseInt(tmp) : null;\n  String params=parseJsonData(json.get(\"params\"));\n  String additionalInfo=parseJsonData(json.get(DataConstants.ADDITIONAL_INFO));\n  RuleEngineDeviceRpcRequest request=RuleEngineDeviceRpcRequest.builder().oneway(oneway).method(json.get(\"method\").getAsString()).body(params).tenantId(ctx.getTenantId()).deviceId(new DeviceId(msg.getOriginator().getId())).requestId(requestId).requestUUID(requestUUID).originServiceId(originServiceId).expirationTime(expirationTime).retries(retries).restApiCall(restApiCall).persisted(persisted).additionalInfo(additionalInfo).build();\n  ctx.getRpcService().sendRpcRequestToDevice(request,ruleEngineDeviceRpcResponse -> {\n    if (ruleEngineDeviceRpcResponse.getError().isEmpty()) {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n      ctx.enqueueForTellNext(next,TbRelationTypes.SUCCESS);\n    }\n else {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),wrap(\"error\",ruleEngineDeviceRpcResponse.getError().get().name()));\n      ctx.enqueueForTellFailure(next,ruleEngineDeviceRpcResponse.getError().get().name());\n    }\n  }\n);\n  ctx.ack(msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 402,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3254,
        "startLineNumber" : 73,
        "startColumnNumber" : 15,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!json.has(\"method\")) {\n  ctx.tellFailure(msg,new RuntimeException(\"Method is not present in the message!\"));\n}\n else if (!json.has(\"params\")) {\n  ctx.tellFailure(msg,new RuntimeException(\"Params are not present in the message!\"));\n}\n else {\n  int requestId=json.has(\"requestId\") ? json.get(\"requestId\").getAsInt() : random.nextInt();\n  boolean restApiCall=msg.getType().equals(DataConstants.RPC_CALL_FROM_SERVER_TO_DEVICE);\n  tmp=msg.getMetaData().getValue(\"oneway\");\n  boolean oneway=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(DataConstants.PERSISTENT);\n  boolean persisted=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(\"requestUUID\");\n  UUID requestUUID=!StringUtils.isEmpty(tmp) ? UUID.fromString(tmp) : Uuids.timeBased();\n  tmp=msg.getMetaData().getValue(\"originServiceId\");\n  String originServiceId=!StringUtils.isEmpty(tmp) ? tmp : null;\n  tmp=msg.getMetaData().getValue(DataConstants.EXPIRATION_TIME);\n  long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n  tmp=msg.getMetaData().getValue(DataConstants.RETRIES);\n  Integer retries=!StringUtils.isEmpty(tmp) ? Integer.parseInt(tmp) : null;\n  String params=parseJsonData(json.get(\"params\"));\n  String additionalInfo=parseJsonData(json.get(DataConstants.ADDITIONAL_INFO));\n  RuleEngineDeviceRpcRequest request=RuleEngineDeviceRpcRequest.builder().oneway(oneway).method(json.get(\"method\").getAsString()).body(params).tenantId(ctx.getTenantId()).deviceId(new DeviceId(msg.getOriginator().getId())).requestId(requestId).requestUUID(requestUUID).originServiceId(originServiceId).expirationTime(expirationTime).retries(retries).restApiCall(restApiCall).persisted(persisted).additionalInfo(additionalInfo).build();\n  ctx.getRpcService().sendRpcRequestToDevice(request,ruleEngineDeviceRpcResponse -> {\n    if (ruleEngineDeviceRpcResponse.getError().isEmpty()) {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n      ctx.enqueueForTellNext(next,TbRelationTypes.SUCCESS);\n    }\n else {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),wrap(\"error\",ruleEngineDeviceRpcResponse.getError().get().name()));\n      ctx.enqueueForTellFailure(next,ruleEngineDeviceRpcResponse.getError().get().name());\n    }\n  }\n);\n  ctx.ack(msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 418,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3435,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg.getOriginator().getEntityType() != EntityType.DEVICE) {\n  ctx.tellFailure(msg,new RuntimeException(\"Message originator is not a device entity!\"));\n}\n else if (!json.has(\"method\")) {\n  ctx.tellFailure(msg,new RuntimeException(\"Method is not present in the message!\"));\n}\n else if (!json.has(\"params\")) {\n  ctx.tellFailure(msg,new RuntimeException(\"Params are not present in the message!\"));\n}\n else {\n  int requestId=json.has(\"requestId\") ? json.get(\"requestId\").getAsInt() : random.nextInt();\n  boolean restApiCall=msg.getType().equals(DataConstants.RPC_CALL_FROM_SERVER_TO_DEVICE);\n  tmp=msg.getMetaData().getValue(\"oneway\");\n  boolean oneway=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(DataConstants.PERSISTENT);\n  boolean persisted=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n  tmp=msg.getMetaData().getValue(\"requestUUID\");\n  UUID requestUUID=!StringUtils.isEmpty(tmp) ? UUID.fromString(tmp) : Uuids.timeBased();\n  tmp=msg.getMetaData().getValue(\"originServiceId\");\n  String originServiceId=!StringUtils.isEmpty(tmp) ? tmp : null;\n  tmp=msg.getMetaData().getValue(DataConstants.EXPIRATION_TIME);\n  long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n  tmp=msg.getMetaData().getValue(DataConstants.RETRIES);\n  Integer retries=!StringUtils.isEmpty(tmp) ? Integer.parseInt(tmp) : null;\n  String params=parseJsonData(json.get(\"params\"));\n  String additionalInfo=parseJsonData(json.get(DataConstants.ADDITIONAL_INFO));\n  RuleEngineDeviceRpcRequest request=RuleEngineDeviceRpcRequest.builder().oneway(oneway).method(json.get(\"method\").getAsString()).body(params).tenantId(ctx.getTenantId()).deviceId(new DeviceId(msg.getOriginator().getId())).requestId(requestId).requestUUID(requestUUID).originServiceId(originServiceId).expirationTime(expirationTime).retries(retries).restApiCall(restApiCall).persisted(persisted).additionalInfo(additionalInfo).build();\n  ctx.getRpcService().sendRpcRequestToDevice(request,ruleEngineDeviceRpcResponse -> {\n    if (ruleEngineDeviceRpcResponse.getError().isEmpty()) {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n      ctx.enqueueForTellNext(next,TbRelationTypes.SUCCESS);\n    }\n else {\n      TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),wrap(\"error\",ruleEngineDeviceRpcResponse.getError().get().name()));\n      ctx.enqueueForTellFailure(next,ruleEngineDeviceRpcResponse.getError().get().name());\n    }\n  }\n);\n  ctx.ack(msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3548,
        "startLineNumber" : 68,
        "startColumnNumber" : 48,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JsonObject json=jsonParser.parse(msg.getData()).getAsJsonObject();\n  String tmp;\n  if (msg.getOriginator().getEntityType() != EntityType.DEVICE) {\n    ctx.tellFailure(msg,new RuntimeException(\"Message originator is not a device entity!\"));\n  }\n else   if (!json.has(\"method\")) {\n    ctx.tellFailure(msg,new RuntimeException(\"Method is not present in the message!\"));\n  }\n else   if (!json.has(\"params\")) {\n    ctx.tellFailure(msg,new RuntimeException(\"Params are not present in the message!\"));\n  }\n else {\n    int requestId=json.has(\"requestId\") ? json.get(\"requestId\").getAsInt() : random.nextInt();\n    boolean restApiCall=msg.getType().equals(DataConstants.RPC_CALL_FROM_SERVER_TO_DEVICE);\n    tmp=msg.getMetaData().getValue(\"oneway\");\n    boolean oneway=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n    tmp=msg.getMetaData().getValue(DataConstants.PERSISTENT);\n    boolean persisted=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n    tmp=msg.getMetaData().getValue(\"requestUUID\");\n    UUID requestUUID=!StringUtils.isEmpty(tmp) ? UUID.fromString(tmp) : Uuids.timeBased();\n    tmp=msg.getMetaData().getValue(\"originServiceId\");\n    String originServiceId=!StringUtils.isEmpty(tmp) ? tmp : null;\n    tmp=msg.getMetaData().getValue(DataConstants.EXPIRATION_TIME);\n    long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n    tmp=msg.getMetaData().getValue(DataConstants.RETRIES);\n    Integer retries=!StringUtils.isEmpty(tmp) ? Integer.parseInt(tmp) : null;\n    String params=parseJsonData(json.get(\"params\"));\n    String additionalInfo=parseJsonData(json.get(DataConstants.ADDITIONAL_INFO));\n    RuleEngineDeviceRpcRequest request=RuleEngineDeviceRpcRequest.builder().oneway(oneway).method(json.get(\"method\").getAsString()).body(params).tenantId(ctx.getTenantId()).deviceId(new DeviceId(msg.getOriginator().getId())).requestId(requestId).requestUUID(requestUUID).originServiceId(originServiceId).expirationTime(expirationTime).retries(retries).restApiCall(restApiCall).persisted(persisted).additionalInfo(additionalInfo).build();\n    ctx.getRpcService().sendRpcRequestToDevice(request,ruleEngineDeviceRpcResponse -> {\n      if (ruleEngineDeviceRpcResponse.getError().isEmpty()) {\n        TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n        ctx.enqueueForTellNext(next,TbRelationTypes.SUCCESS);\n      }\n else {\n        TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),wrap(\"error\",ruleEngineDeviceRpcResponse.getError().get().name()));\n        ctx.enqueueForTellFailure(next,ruleEngineDeviceRpcResponse.getError().get().name());\n      }\n    }\n);\n    ctx.ack(msg);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 457,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3606,
        "startLineNumber" : 67,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void onMsg(TbContext ctx,TbMsg msg){\n  JsonObject json=jsonParser.parse(msg.getData()).getAsJsonObject();\n  String tmp;\n  if (msg.getOriginator().getEntityType() != EntityType.DEVICE) {\n    ctx.tellFailure(msg,new RuntimeException(\"Message originator is not a device entity!\"));\n  }\n else   if (!json.has(\"method\")) {\n    ctx.tellFailure(msg,new RuntimeException(\"Method is not present in the message!\"));\n  }\n else   if (!json.has(\"params\")) {\n    ctx.tellFailure(msg,new RuntimeException(\"Params are not present in the message!\"));\n  }\n else {\n    int requestId=json.has(\"requestId\") ? json.get(\"requestId\").getAsInt() : random.nextInt();\n    boolean restApiCall=msg.getType().equals(DataConstants.RPC_CALL_FROM_SERVER_TO_DEVICE);\n    tmp=msg.getMetaData().getValue(\"oneway\");\n    boolean oneway=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n    tmp=msg.getMetaData().getValue(DataConstants.PERSISTENT);\n    boolean persisted=!StringUtils.isEmpty(tmp) && Boolean.parseBoolean(tmp);\n    tmp=msg.getMetaData().getValue(\"requestUUID\");\n    UUID requestUUID=!StringUtils.isEmpty(tmp) ? UUID.fromString(tmp) : Uuids.timeBased();\n    tmp=msg.getMetaData().getValue(\"originServiceId\");\n    String originServiceId=!StringUtils.isEmpty(tmp) ? tmp : null;\n    tmp=msg.getMetaData().getValue(DataConstants.EXPIRATION_TIME);\n    long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n    tmp=msg.getMetaData().getValue(DataConstants.RETRIES);\n    Integer retries=!StringUtils.isEmpty(tmp) ? Integer.parseInt(tmp) : null;\n    String params=parseJsonData(json.get(\"params\"));\n    String additionalInfo=parseJsonData(json.get(DataConstants.ADDITIONAL_INFO));\n    RuleEngineDeviceRpcRequest request=RuleEngineDeviceRpcRequest.builder().oneway(oneway).method(json.get(\"method\").getAsString()).body(params).tenantId(ctx.getTenantId()).deviceId(new DeviceId(msg.getOriginator().getId())).requestId(requestId).requestUUID(requestUUID).originServiceId(originServiceId).expirationTime(expirationTime).retries(retries).restApiCall(restApiCall).persisted(persisted).additionalInfo(additionalInfo).build();\n    ctx.getRpcService().sendRpcRequestToDevice(request,ruleEngineDeviceRpcResponse -> {\n      if (ruleEngineDeviceRpcResponse.getError().isEmpty()) {\n        TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),ruleEngineDeviceRpcResponse.getResponse().orElse(\"{}\"));\n        ctx.enqueueForTellNext(next,TbRelationTypes.SUCCESS);\n      }\n else {\n        TbMsg next=ctx.newMsg(msg.getQueueName(),msg.getType(),msg.getOriginator(),msg.getCustomerId(),msg.getMetaData(),wrap(\"error\",ruleEngineDeviceRpcResponse.getError().get().name()));\n        ctx.enqueueForTellFailure(next,ruleEngineDeviceRpcResponse.getError().get().name());\n      }\n    }\n);\n    ctx.ack(msg);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 471,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 93,
        "endColumnNumber" : 171
      },
      "nodeContext" : "long expirationTime=!StringUtils.isEmpty(tmp) ? Long.parseLong(tmp) : (System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(config.getTimeoutInSeconds()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.System"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 93,
    "startColumnNumber" : 85,
    "endLineNumber" : 93,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ ]
}