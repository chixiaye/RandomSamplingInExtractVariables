{
  "id" : 402,
  "expression" : "new OpusDecoderException(\"Failed to load decoder native libraries\")",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/extensions/opus/src/main/java/com/google/android/exoplayer2/ext/opus/OpusDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new OpusDecoderException(\"Failed to load decoder native libraries\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 67,
      "startLineNumber" : 84,
      "startColumnNumber" : 12,
      "endLineNumber" : 84,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 80
      },
      "nodeContext" : "throw new OpusDecoderException(\"Failed to load decoder native libraries\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 83,
        "startColumnNumber" : 36,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new OpusDecoderException(\"Failed to load decoder native libraries\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!OpusLibrary.isAvailable()) {\n  throw new OpusDecoderException(\"Failed to load decoder native libraries\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2542,
        "startLineNumber" : 81,
        "startColumnNumber" : 34,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  super(new DecoderInputBuffer[numInputBuffers],new SimpleDecoderOutputBuffer[numOutputBuffers]);\n  if (!OpusLibrary.isAvailable()) {\n    throw new OpusDecoderException(\"Failed to load decoder native libraries\");\n  }\n  this.cryptoConfig=cryptoConfig;\n  if (cryptoConfig != null && !OpusLibrary.opusIsSecureDecodeSupported()) {\n    throw new OpusDecoderException(\"Opus decoder does not support secure decode\");\n  }\n  int initializationDataSize=initializationData.size();\n  if (initializationDataSize != 1 && initializationDataSize != 3) {\n    throw new OpusDecoderException(\"Invalid initialization data size\");\n  }\n  if (initializationDataSize == 3 && (initializationData.get(1).length != 8 || initializationData.get(2).length != 8)) {\n    throw new OpusDecoderException(\"Invalid pre-skip or seek pre-roll\");\n  }\n  preSkipSamples=getPreSkipSamples(initializationData);\n  seekPreRollSamples=getSeekPreRollSamples(initializationData);\n  byte[] headerBytes=initializationData.get(0);\n  if (headerBytes.length < 19) {\n    throw new OpusDecoderException(\"Invalid header length\");\n  }\n  channelCount=getChannelCount(headerBytes);\n  if (channelCount > 8) {\n    throw new OpusDecoderException(\"Invalid channel count: \" + channelCount);\n  }\n  int gain=readSignedLittleEndian16(headerBytes,16);\n  byte[] streamMap=new byte[8];\n  int numStreams;\n  int numCoupled;\n  if (headerBytes[18] == 0) {\n    if (channelCount > 2) {\n      throw new OpusDecoderException(\"Invalid header, missing stream map\");\n    }\n    numStreams=1;\n    numCoupled=(channelCount == 2) ? 1 : 0;\n    streamMap[0]=0;\n    streamMap[1]=1;\n  }\n else {\n    if (headerBytes.length < 21 + channelCount) {\n      throw new OpusDecoderException(\"Invalid header length\");\n    }\n    numStreams=headerBytes[19] & 0xFF;\n    numCoupled=headerBytes[20] & 0xFF;\n    System.arraycopy(headerBytes,21,streamMap,0,channelCount);\n  }\n  nativeDecoderContext=opusInit(SAMPLE_RATE,channelCount,numStreams,numCoupled,gain,streamMap);\n  if (nativeDecoderContext == 0) {\n    throw new OpusDecoderException(\"Failed to initialize decoder\");\n  }\n  setInitialInputBufferSize(initialInputBufferSize);\n  this.outputFloat=outputFloat;\n  if (outputFloat) {\n    opusSetFloatOutput();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3675,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates an Opus decoder.\n * @param numInputBuffers The number of input buffers.\n * @param numOutputBuffers The number of output buffers.\n * @param initialInputBufferSize The initial size of each input buffer.\n * @param initializationData Codec-specific initialization data. The first element must contain anopus header. Optionally, the list may contain two additional buffers, which must contain the encoder delay and seek pre roll values in nanoseconds, encoded as longs.\n * @param cryptoConfig The {@link CryptoConfig} object required for decoding encrypted content.May be null and can be ignored if decoder does not handle encrypted content.\n * @param outputFloat Forces the decoder to output float PCM samples when set\n * @throws OpusDecoderException Thrown if an exception occurs when initializing the decoder.\n */\npublic OpusDecoder(int numInputBuffers,int numOutputBuffers,int initialInputBufferSize,List<byte[]> initializationData,@Nullable CryptoConfig cryptoConfig,boolean outputFloat) throws OpusDecoderException {\n  super(new DecoderInputBuffer[numInputBuffers],new SimpleDecoderOutputBuffer[numOutputBuffers]);\n  if (!OpusLibrary.isAvailable()) {\n    throw new OpusDecoderException(\"Failed to load decoder native libraries\");\n  }\n  this.cryptoConfig=cryptoConfig;\n  if (cryptoConfig != null && !OpusLibrary.opusIsSecureDecodeSupported()) {\n    throw new OpusDecoderException(\"Opus decoder does not support secure decode\");\n  }\n  int initializationDataSize=initializationData.size();\n  if (initializationDataSize != 1 && initializationDataSize != 3) {\n    throw new OpusDecoderException(\"Invalid initialization data size\");\n  }\n  if (initializationDataSize == 3 && (initializationData.get(1).length != 8 || initializationData.get(2).length != 8)) {\n    throw new OpusDecoderException(\"Invalid pre-skip or seek pre-roll\");\n  }\n  preSkipSamples=getPreSkipSamples(initializationData);\n  seekPreRollSamples=getSeekPreRollSamples(initializationData);\n  byte[] headerBytes=initializationData.get(0);\n  if (headerBytes.length < 19) {\n    throw new OpusDecoderException(\"Invalid header length\");\n  }\n  channelCount=getChannelCount(headerBytes);\n  if (channelCount > 8) {\n    throw new OpusDecoderException(\"Invalid channel count: \" + channelCount);\n  }\n  int gain=readSignedLittleEndian16(headerBytes,16);\n  byte[] streamMap=new byte[8];\n  int numStreams;\n  int numCoupled;\n  if (headerBytes[18] == 0) {\n    if (channelCount > 2) {\n      throw new OpusDecoderException(\"Invalid header, missing stream map\");\n    }\n    numStreams=1;\n    numCoupled=(channelCount == 2) ? 1 : 0;\n    streamMap[0]=0;\n    streamMap[1]=1;\n  }\n else {\n    if (headerBytes.length < 21 + channelCount) {\n      throw new OpusDecoderException(\"Invalid header length\");\n    }\n    numStreams=headerBytes[19] & 0xFF;\n    numCoupled=headerBytes[20] & 0xFF;\n    System.arraycopy(headerBytes,21,streamMap,0,channelCount);\n  }\n  nativeDecoderContext=opusInit(SAMPLE_RATE,channelCount,numStreams,numCoupled,gain,streamMap);\n  if (nativeDecoderContext == 0) {\n    throw new OpusDecoderException(\"Failed to initialize decoder\");\n  }\n  setInitialInputBufferSize(initialInputBufferSize);\n  this.outputFloat=outputFloat;\n  if (outputFloat) {\n    opusSetFloatOutput();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 327,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 80
      },
      "nodeContext" : "throw new OpusDecoderException(\"Failed to load decoder native libraries\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "com.google.android.exoplayer2.ext.opus.OpusDecoderException"
  } ],
  "positionList" : [ {
    "charLength" : 67,
    "startLineNumber" : 84,
    "startColumnNumber" : 12,
    "endLineNumber" : 84,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}