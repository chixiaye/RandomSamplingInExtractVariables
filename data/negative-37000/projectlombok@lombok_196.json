{
  "id" : 196,
  "expression" : "chainDotsString(fieldNode,AR)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleGetter.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "chainDotsString(fieldNode,AR)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 339,
      "startColumnNumber" : 46,
      "endLineNumber" : 339,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 339,
        "startColumnNumber" : 30,
        "endLineNumber" : 339,
        "endColumnNumber" : 110
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 339,
        "startColumnNumber" : 15,
        "endLineNumber" : 339,
        "endColumnNumber" : 110
      },
      "nodeContext" : "valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 339,
        "startColumnNumber" : 3,
        "endLineNumber" : 339,
        "endColumnNumber" : 111
      },
      "nodeContext" : "JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 338,
        "startColumnNumber" : 92,
        "endLineNumber" : 341,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n  statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4361,
        "startLineNumber" : 307,
        "startColumnNumber" : 101,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4461,
        "startLineNumber" : 307,
        "startColumnNumber" : 1,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private List<JCStatement> createLazyGetterBody(TreeMaker maker,JavacNode fieldNode,JCTree source){\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 520,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 339,
        "startColumnNumber" : 3,
        "endLineNumber" : 339,
        "endColumnNumber" : 111
      },
      "nodeContext" : "JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "chainDotsString(fieldNode,AR)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 358,
      "startColumnNumber" : 49,
      "endLineNumber" : 358,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 358,
        "startColumnNumber" : 33,
        "endLineNumber" : 358,
        "endColumnNumber" : 113
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 358,
        "startColumnNumber" : 18,
        "endLineNumber" : 358,
        "endColumnNumber" : 113
      },
      "nodeContext" : "valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 358,
        "startColumnNumber" : 6,
        "endLineNumber" : 358,
        "endColumnNumber" : 114
      },
      "nodeContext" : "JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 408,
        "startLineNumber" : 357,
        "startColumnNumber" : 91,
        "endLineNumber" : 363,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n  JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n  JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n  innerIfStatements.append(statement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1282,
        "startLineNumber" : 352,
        "startColumnNumber" : 31,
        "endLineNumber" : 372,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n    innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n  }\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n    JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n    innerIfStatements.append(statement);\n  }\n{\n    JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n    innerIfStatements.append(statement);\n  }\n  JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n  synchronizedStatements.append(ifStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1831,
        "startLineNumber" : 345,
        "startColumnNumber" : 41,
        "endLineNumber" : 375,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n    JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n    synchronizedStatements.append(newAssign);\n  }\n{\n    ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n      innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n    }\n{\n      JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n      JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n      JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n      innerIfStatements.append(statement);\n    }\n{\n      JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n      innerIfStatements.append(statement);\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n    synchronizedStatements.append(ifStatement);\n  }\n  synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2210,
        "startLineNumber" : 343,
        "startColumnNumber" : 29,
        "endLineNumber" : 380,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCSynchronized synchronizedStatement;\n{\n    ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n      JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n      synchronizedStatements.append(newAssign);\n    }\n{\n      ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n        innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n      }\n{\n        JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n        JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n        JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n        innerIfStatements.append(statement);\n      }\n{\n        JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n        innerIfStatements.append(statement);\n      }\n      JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n      JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n      synchronizedStatements.append(ifStatement);\n    }\n    synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n  }\n  JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n  statements.append(ifStatement);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4361,
        "startLineNumber" : 307,
        "startColumnNumber" : 101,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4461,
        "startLineNumber" : 307,
        "startColumnNumber" : 1,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private List<JCStatement> createLazyGetterBody(TreeMaker maker,JavacNode fieldNode,JCTree source){\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 520,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 358,
        "startColumnNumber" : 6,
        "endLineNumber" : 358,
        "endColumnNumber" : 114
      },
      "nodeContext" : "JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "chainDotsString(fieldNode,AR)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 388,
      "startColumnNumber" : 21,
      "endLineNumber" : 388,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 388,
        "startColumnNumber" : 5,
        "endLineNumber" : 388,
        "endColumnNumber" : 157
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 387,
        "startColumnNumber" : 19,
        "endLineNumber" : 389,
        "endColumnNumber" : 12
      },
      "nodeContext" : "recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 387,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 12
      },
      "nodeContext" : "field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 387,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 13
      },
      "nodeContext" : "field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 386,
        "startColumnNumber" : 241,
        "endLineNumber" : 391,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n  field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4361,
        "startLineNumber" : 307,
        "startColumnNumber" : 101,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4461,
        "startLineNumber" : 307,
        "startColumnNumber" : 1,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private List<JCStatement> createLazyGetterBody(TreeMaker maker,JavacNode fieldNode,JCTree source){\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 520,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 388,
        "startColumnNumber" : 5,
        "endLineNumber" : 388,
        "endColumnNumber" : 157
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "chainDotsString(fieldNode,AR)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 388,
      "startColumnNumber" : 91,
      "endLineNumber" : 388,
      "endColumnNumber" : 121
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 388,
        "startColumnNumber" : 75,
        "endLineNumber" : 388,
        "endColumnNumber" : 155
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 388,
        "startColumnNumber" : 53,
        "endLineNumber" : 388,
        "endColumnNumber" : 156
      },
      "nodeContext" : "List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 388,
        "startColumnNumber" : 5,
        "endLineNumber" : 388,
        "endColumnNumber" : 157
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 387,
        "startColumnNumber" : 19,
        "endLineNumber" : 389,
        "endColumnNumber" : 12
      },
      "nodeContext" : "recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 387,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 12
      },
      "nodeContext" : "field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 387,
        "startColumnNumber" : 3,
        "endLineNumber" : 389,
        "endColumnNumber" : 13
      },
      "nodeContext" : "field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 386,
        "startColumnNumber" : 241,
        "endLineNumber" : 391,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n  field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4361,
        "startLineNumber" : 307,
        "startColumnNumber" : 101,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4461,
        "startLineNumber" : 307,
        "startColumnNumber" : 1,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private List<JCStatement> createLazyGetterBody(TreeMaker maker,JavacNode fieldNode,JCTree source){\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 520,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 388,
        "startColumnNumber" : 5,
        "endLineNumber" : 388,
        "endColumnNumber" : 157
      },
      "nodeContext" : "maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "lombok.javac.handlers.JCExpression"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 339,
    "startColumnNumber" : 46,
    "endLineNumber" : 339,
    "endColumnNumber" : 76
  }, {
    "charLength" : 30,
    "startLineNumber" : 358,
    "startColumnNumber" : 49,
    "endLineNumber" : 358,
    "endColumnNumber" : 79
  }, {
    "charLength" : 30,
    "startLineNumber" : 388,
    "startColumnNumber" : 21,
    "endLineNumber" : 388,
    "endColumnNumber" : 51
  }, {
    "charLength" : 30,
    "startLineNumber" : 388,
    "startColumnNumber" : 91,
    "endLineNumber" : 388,
    "endColumnNumber" : 121
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}