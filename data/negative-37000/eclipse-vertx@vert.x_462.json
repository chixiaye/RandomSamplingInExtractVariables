{
  "id" : 462,
  "expression" : "Boolean.class",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/core/cli/converters/ConvertersTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 78,
      "startColumnNumber" : 33,
      "endLineNumber" : 78,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 78,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Converters.create(Boolean.class,\"true\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"true\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"true\")).isTrue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"true\")).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 56,
        "startColumnNumber" : 64,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(Converters.create(Integer.class,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Integer.TYPE,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Long.class,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Long.TYPE,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Short.class,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Short.TYPE,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Byte.class,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Byte.TYPE,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Float.class,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Float.TYPE,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Double.class,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Double.TYPE,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Character.class,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Character.TYPE,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Boolean.class,\"true\")).isTrue();\n  assertThat(Converters.create(Boolean.TYPE,\"on\")).isTrue();\n  assertThat(Converters.create(Boolean.class,\"\")).isFalse();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testWithPrimitives() throws NoSuchMethodException {\n  assertThat(Converters.create(Integer.class,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Integer.TYPE,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Long.class,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Long.TYPE,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Short.class,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Short.TYPE,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Byte.class,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Byte.TYPE,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Float.class,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Float.TYPE,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Double.class,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Double.TYPE,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Character.class,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Character.TYPE,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Boolean.class,\"true\")).isTrue();\n  assertThat(Converters.create(Boolean.TYPE,\"on\")).isTrue();\n  assertThat(Converters.create(Boolean.class,\"\")).isFalse();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"true\")).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Boolean>"
  }, {
    "nodeContext" : "Boolean.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 80,
      "startColumnNumber" : 33,
      "endLineNumber" : 80,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 80,
        "startColumnNumber" : 15,
        "endLineNumber" : 80,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Converters.create(Boolean.class,\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"\")).isFalse()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"\")).isFalse();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 56,
        "startColumnNumber" : 64,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(Converters.create(Integer.class,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Integer.TYPE,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Long.class,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Long.TYPE,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Short.class,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Short.TYPE,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Byte.class,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Byte.TYPE,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Float.class,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Float.TYPE,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Double.class,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Double.TYPE,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Character.class,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Character.TYPE,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Boolean.class,\"true\")).isTrue();\n  assertThat(Converters.create(Boolean.TYPE,\"on\")).isTrue();\n  assertThat(Converters.create(Boolean.class,\"\")).isFalse();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 227,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testWithPrimitives() throws NoSuchMethodException {\n  assertThat(Converters.create(Integer.class,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Integer.TYPE,\"1\")).isEqualTo(1);\n  assertThat(Converters.create(Long.class,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Long.TYPE,\"2\")).isEqualTo(2l);\n  assertThat(Converters.create(Short.class,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Short.TYPE,\"3\")).isEqualTo((short)3);\n  assertThat(Converters.create(Byte.class,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Byte.TYPE,\"4\")).isEqualTo((byte)4);\n  assertThat(Converters.create(Float.class,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Float.TYPE,\"5.5\")).isEqualTo(5.5f);\n  assertThat(Converters.create(Double.class,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Double.TYPE,\"5.5\")).isEqualTo(5.5d);\n  assertThat(Converters.create(Character.class,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Character.TYPE,\"a\")).isEqualTo('a');\n  assertThat(Converters.create(Boolean.class,\"true\")).isTrue();\n  assertThat(Converters.create(Boolean.TYPE,\"on\")).isTrue();\n  assertThat(Converters.create(Boolean.class,\"\")).isFalse();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 235,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(Converters.create(Boolean.class,\"\")).isFalse();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Boolean>"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 78,
    "startColumnNumber" : 33,
    "endLineNumber" : 78,
    "endColumnNumber" : 46
  }, {
    "charLength" : 13,
    "startLineNumber" : 80,
    "startColumnNumber" : 33,
    "endLineNumber" : 80,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}