{
  "id" : 55,
  "expression" : "e",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 109,
      "startColumnNumber" : 83,
      "endLineNumber" : 109,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 109,
        "startColumnNumber" : 42,
        "endLineNumber" : 109,
        "endColumnNumber" : 84
      },
      "nodeContext" : "\"thread sleep InterruptedException e:\" + e",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 86
      },
      "nodeContext" : "ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 108,
        "startColumnNumber" : 49,
        "endLineNumber" : 110,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 108,
        "startColumnNumber" : 18,
        "endLineNumber" : 110,
        "endColumnNumber" : 17
      },
      "nodeContext" : "catch (InterruptedException e) {\n  ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 110,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  Thread.sleep(WAIT_ASYN_OAT_TIME);\n}\n catch (InterruptedException e) {\n  ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 105,
        "startColumnNumber" : 54,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    Thread.sleep(WAIT_ASYN_OAT_TIME);\n  }\n catch (  InterruptedException e) {\n    ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!checkAllDexOptFile(optFiles,i + 1)) {\n  try {\n    Thread.sleep(WAIT_ASYN_OAT_TIME);\n  }\n catch (  InterruptedException e) {\n    ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 313,
        "startLineNumber" : 104,
        "startColumnNumber" : 39,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!checkAllDexOptFile(optFiles,i + 1)) {\n    try {\n      Thread.sleep(WAIT_ASYN_OAT_TIME);\n    }\n catch (    InterruptedException e) {\n      ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 344,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < size; i++) {\n  if (!checkAllDexOptFile(optFiles,i + 1)) {\n    try {\n      Thread.sleep(WAIT_ASYN_OAT_TIME);\n    }\n catch (    InterruptedException e) {\n      ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3284,
        "startLineNumber" : 93,
        "startColumnNumber" : 84,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=patchList.size() * 30;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  ShareTinkerLog.i(TAG,\"raw dex count: %d, dex opt dex count: %d, final wait times: %d\",patchList.size(),optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    ShareTinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getPath(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file) && !SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n      ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n        continue;\n      }\n      ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          IOHelper.closeQuietly(elfFile);\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=patchList.size() * 30;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  ShareTinkerLog.i(TAG,\"raw dex count: %d, dex opt dex count: %d, final wait times: %d\",patchList.size(),optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    ShareTinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getPath(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file) && !SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n      ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n        continue;\n      }\n      ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          IOHelper.closeQuietly(elfFile);\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 86
      },
      "nodeContext" : "ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.InterruptedException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 149,
      "startColumnNumber" : 40,
      "endLineNumber" : 149,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 41
      },
      "nodeContext" : "lastThrowable=e",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 42
      },
      "nodeContext" : "lastThrowable=e;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 146,
        "startColumnNumber" : 42,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n  failDexFiles.add(file);\n  lastThrowable=e;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 146,
        "startColumnNumber" : 22,
        "endLineNumber" : 150,
        "endColumnNumber" : 21
      },
      "nodeContext" : "catch (Throwable e) {\n  ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n  failDexFiles.add(file);\n  lastThrowable=e;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 144,
        "startColumnNumber" : 20,
        "endLineNumber" : 152,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  elfFile=new ShareElfFile(file);\n}\n catch (Throwable e) {\n  ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n  failDexFiles.add(file);\n  lastThrowable=e;\n}\n finally {\n  IOHelper.closeQuietly(elfFile);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 142,
        "startColumnNumber" : 62,
        "endLineNumber" : 153,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ShareElfFile elfFile=null;\n  try {\n    elfFile=new ShareElfFile(file);\n  }\n catch (  Throwable e) {\n    ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n    failDexFiles.add(file);\n    lastThrowable=e;\n  }\n finally {\n    IOHelper.closeQuietly(elfFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 142,
        "startColumnNumber" : 16,
        "endLineNumber" : 153,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n  ShareElfFile elfFile=null;\n  try {\n    elfFile=new ShareElfFile(file);\n  }\n catch (  Throwable e) {\n    ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n    failDexFiles.add(file);\n    lastThrowable=e;\n  }\n finally {\n    IOHelper.closeQuietly(elfFile);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1114,
        "startLineNumber" : 130,
        "startColumnNumber" : 39,
        "endLineNumber" : 154,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n    continue;\n  }\n  ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n  int returnType;\n  try {\n    returnType=ShareElfFile.getFileTypeByMagic(file);\n  }\n catch (  IOException e) {\n    continue;\n  }\n  if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n    ShareElfFile elfFile=null;\n    try {\n      elfFile=new ShareElfFile(file);\n    }\n catch (    Throwable e) {\n      ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n      failDexFiles.add(file);\n      lastThrowable=e;\n    }\n finally {\n      IOHelper.closeQuietly(elfFile);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1141,
        "startLineNumber" : 130,
        "startColumnNumber" : 12,
        "endLineNumber" : 154,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (File file : optFiles) {\n  if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n    continue;\n  }\n  ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n  int returnType;\n  try {\n    returnType=ShareElfFile.getFileTypeByMagic(file);\n  }\n catch (  IOException e) {\n    continue;\n  }\n  if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n    ShareElfFile elfFile=null;\n    try {\n      elfFile=new ShareElfFile(file);\n    }\n catch (    Throwable e) {\n      ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n      failDexFiles.add(file);\n      lastThrowable=e;\n    }\n finally {\n      IOHelper.closeQuietly(elfFile);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1685,
        "startLineNumber" : 128,
        "startColumnNumber" : 41,
        "endLineNumber" : 164,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Throwable lastThrowable=null;\n  for (  File file : optFiles) {\n    if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n      continue;\n    }\n    ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n    int returnType;\n    try {\n      returnType=ShareElfFile.getFileTypeByMagic(file);\n    }\n catch (    IOException e) {\n      continue;\n    }\n    if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n      ShareElfFile elfFile=null;\n      try {\n        elfFile=new ShareElfFile(file);\n      }\n catch (      Throwable e) {\n        ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n        failDexFiles.add(file);\n        lastThrowable=e;\n      }\n finally {\n        IOHelper.closeQuietly(elfFile);\n      }\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Build.VERSION.SDK_INT >= 21) {\n  Throwable lastThrowable=null;\n  for (  File file : optFiles) {\n    if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n      continue;\n    }\n    ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n    int returnType;\n    try {\n      returnType=ShareElfFile.getFileTypeByMagic(file);\n    }\n catch (    IOException e) {\n      continue;\n    }\n    if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n      ShareElfFile elfFile=null;\n      try {\n        elfFile=new ShareElfFile(file);\n      }\n catch (      Throwable e) {\n        ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n        failDexFiles.add(file);\n        lastThrowable=e;\n      }\n finally {\n        IOHelper.closeQuietly(elfFile);\n      }\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n    return false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 152,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3284,
        "startLineNumber" : 93,
        "startColumnNumber" : 84,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=patchList.size() * 30;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  ShareTinkerLog.i(TAG,\"raw dex count: %d, dex opt dex count: %d, final wait times: %d\",patchList.size(),optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    ShareTinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getPath(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file) && !SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n      ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n        continue;\n      }\n      ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          IOHelper.closeQuietly(elfFile);\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3364,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 166,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected static boolean waitAndCheckDexOptFile(File patchFile,Tinker manager){\n  if (optFiles.isEmpty()) {\n    return true;\n  }\n  int size=patchList.size() * 30;\n  if (size > MAX_WAIT_COUNT) {\n    size=MAX_WAIT_COUNT;\n  }\n  ShareTinkerLog.i(TAG,\"raw dex count: %d, dex opt dex count: %d, final wait times: %d\",patchList.size(),optFiles.size(),size);\n  for (int i=0; i < size; i++) {\n    if (!checkAllDexOptFile(optFiles,i + 1)) {\n      try {\n        Thread.sleep(WAIT_ASYN_OAT_TIME);\n      }\n catch (      InterruptedException e) {\n        ShareTinkerLog.e(TAG,\"thread sleep InterruptedException e:\" + e);\n      }\n    }\n  }\n  List<File> failDexFiles=new ArrayList<>();\n  for (  File file : optFiles) {\n    ShareTinkerLog.i(TAG,\"check dex optimizer file exist: %s, size %d\",file.getPath(),file.length());\n    if (!SharePatchFileUtil.isLegalFile(file) && !SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n      ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not exist, return false\",file.getName());\n      failDexFiles.add(file);\n    }\n  }\n  if (!failDexFiles.isEmpty()) {\n    manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL));\n    return false;\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    Throwable lastThrowable=null;\n    for (    File file : optFiles) {\n      if (SharePatchFileUtil.shouldAcceptEvenIfIllegal(file)) {\n        continue;\n      }\n      ShareTinkerLog.i(TAG,\"check dex optimizer file format: %s, size %d\",file.getName(),file.length());\n      int returnType;\n      try {\n        returnType=ShareElfFile.getFileTypeByMagic(file);\n      }\n catch (      IOException e) {\n        continue;\n      }\n      if (returnType == ShareElfFile.FILE_TYPE_ELF) {\n        ShareElfFile elfFile=null;\n        try {\n          elfFile=new ShareElfFile(file);\n        }\n catch (        Throwable e) {\n          ShareTinkerLog.e(TAG,\"final parallel dex optimizer file %s is not elf format, return false\",file.getName());\n          failDexFiles.add(file);\n          lastThrowable=e;\n        }\n finally {\n          IOHelper.closeQuietly(elfFile);\n        }\n      }\n    }\n    if (!failDexFiles.isEmpty()) {\n      Throwable returnThrowable=lastThrowable == null ? new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL) : new TinkerRuntimeException(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL,lastThrowable);\n      manager.getPatchReporter().onPatchDexOptFail(patchFile,failDexFiles,returnThrowable);\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 149,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 42
      },
      "nodeContext" : "lastThrowable=e;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Throwable"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 109,
    "startColumnNumber" : 83,
    "endLineNumber" : 109,
    "endColumnNumber" : 84
  }, {
    "charLength" : 1,
    "startLineNumber" : 149,
    "startColumnNumber" : 40,
    "endLineNumber" : 149,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 11
  } ]
}