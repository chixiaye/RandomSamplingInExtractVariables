{
  "id" : 128,
  "expression" : "BIGINT",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-hive/src/test/java/com/facebook/presto/hive/TestHivePageSink.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BIGINT",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 174,
      "startColumnNumber" : 24,
      "endLineNumber" : 174,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 174,
        "startColumnNumber" : 24,
        "endLineNumber" : 174,
        "endColumnNumber" : 86
      },
      "nodeContext" : "BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 174,
        "startColumnNumber" : 24,
        "endLineNumber" : 174,
        "endColumnNumber" : 87
      },
      "nodeContext" : "BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 973,
        "startLineNumber" : 172,
        "startColumnNumber" : 16,
        "endLineNumber" : 190,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (column.getType().getBase()) {\ncase IDENTIFIER:  BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\nbreak;\ncase INTEGER:INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\nbreak;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 80,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1137,
        "startLineNumber" : 169,
        "startColumnNumber" : 53,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LineItemColumn column=columns.get(i);\n  BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(i);\nswitch (column.getType().getBase()) {\ncase IDENTIFIER:    BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n  break;\ncase INTEGER:INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\nbreak;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1178,
        "startLineNumber" : 169,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < columns.size(); i++) {\n  LineItemColumn column=columns.get(i);\n  BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(i);\nswitch (column.getType().getBase()) {\ncase IDENTIFIER:    BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n  break;\ncase INTEGER:INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\nbreak;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 112,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 163,
        "startColumnNumber" : 68,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  rows++;\n  if (rows >= NUM_ROWS) {\n    break;\n  }\n  pageBuilder.declarePosition();\n  for (int i=0; i < columns.size(); i++) {\n    LineItemColumn column=columns.get(i);\n    BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(i);\nswitch (column.getType().getBase()) {\ncase IDENTIFIER:      BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n    break;\ncase INTEGER:  INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\nbreak;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (LineItem lineItem : new LineItemGenerator(0.01,1,1)) {\n  rows++;\n  if (rows >= NUM_ROWS) {\n    break;\n  }\n  pageBuilder.declarePosition();\n  for (int i=0; i < columns.size(); i++) {\n    LineItemColumn column=columns.get(i);\n    BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(i);\nswitch (column.getType().getBase()) {\ncase IDENTIFIER:      BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n    break;\ncase INTEGER:  INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\nbreak;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 137,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3241,
        "startLineNumber" : 150,
        "startColumnNumber" : 4,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HiveTransactionHandle transaction=new HiveTransactionHandle();\n  HiveWriterStats stats=new HiveWriterStats();\n  ConnectorPageSink pageSink=createPageSink(transaction,config,metastoreClientConfig,metastore,new Path(\"file:///\" + outputPath),stats);\n  List<LineItemColumn> columns=getTestColumns();\n  List<Type> columnTypes=columns.stream().map(LineItemColumn::getType).map(TestHivePageSink::getHiveType).map(hiveType -> hiveType.getType(FUNCTION_AND_TYPE_MANAGER)).collect(toList());\n  PageBuilder pageBuilder=new PageBuilder(columnTypes);\n  int rows=0;\n  for (  LineItem lineItem : new LineItemGenerator(0.01,1,1)) {\n    rows++;\n    if (rows >= NUM_ROWS) {\n      break;\n    }\n    pageBuilder.declarePosition();\n    for (int i=0; i < columns.size(); i++) {\n      LineItemColumn column=columns.get(i);\n      BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(i);\nswitch (column.getType().getBase()) {\ncase IDENTIFIER:        BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n      break;\ncase INTEGER:    INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\n  break;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n}\n}\nPage page=pageBuilder.build();\npageSink.appendPage(page);\ngetFutureValue(pageSink.finish());\nFile outputDir=new File(outputPath);\nList<File> files=ImmutableList.copyOf(outputDir.listFiles((dir,name) -> !name.endsWith(\".crc\")));\nFile outputFile=getOnlyElement(files);\nlong length=outputFile.length();\nConnectorPageSource pageSource=createPageSource(transaction,config,metastoreClientConfig,outputFile);\nList<Page> pages=new ArrayList<>();\nwhile (!pageSource.isFinished()) {\nPage nextPage=pageSource.getNextPage();\nif (nextPage != null) {\npages.add(nextPage.getLoadedPage());\n}\n}\nMaterializedResult expectedResults=toMaterializedResult(getSession(config),columnTypes,ImmutableList.of(page));\nMaterializedResult results=toMaterializedResult(getSession(config),columnTypes,pages);\nassertEquals(results,expectedResults);\nassertEquals(stats.getInputPageSizeInBytes().getAllTime().getMax(),page.getRetainedSizeInBytes());\nreturn length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 393,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3401,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static long writeTestFile(HiveClientConfig config,MetastoreClientConfig metastoreClientConfig,ExtendedHiveMetastore metastore,String outputPath){\n  HiveTransactionHandle transaction=new HiveTransactionHandle();\n  HiveWriterStats stats=new HiveWriterStats();\n  ConnectorPageSink pageSink=createPageSink(transaction,config,metastoreClientConfig,metastore,new Path(\"file:///\" + outputPath),stats);\n  List<LineItemColumn> columns=getTestColumns();\n  List<Type> columnTypes=columns.stream().map(LineItemColumn::getType).map(TestHivePageSink::getHiveType).map(hiveType -> hiveType.getType(FUNCTION_AND_TYPE_MANAGER)).collect(toList());\n  PageBuilder pageBuilder=new PageBuilder(columnTypes);\n  int rows=0;\n  for (  LineItem lineItem : new LineItemGenerator(0.01,1,1)) {\n    rows++;\n    if (rows >= NUM_ROWS) {\n      break;\n    }\n    pageBuilder.declarePosition();\n    for (int i=0; i < columns.size(); i++) {\n      LineItemColumn column=columns.get(i);\n      BlockBuilder blockBuilder=pageBuilder.getBlockBuilder(i);\nswitch (column.getType().getBase()) {\ncase IDENTIFIER:        BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n      break;\ncase INTEGER:    INTEGER.writeLong(blockBuilder,column.getInteger(lineItem));\n  break;\ncase DATE:DATE.writeLong(blockBuilder,column.getDate(lineItem));\nbreak;\ncase DOUBLE:DOUBLE.writeDouble(blockBuilder,column.getDouble(lineItem));\nbreak;\ncase VARCHAR:createUnboundedVarcharType().writeSlice(blockBuilder,Slices.utf8Slice(column.getString(lineItem)));\nbreak;\ndefault:throw new IllegalArgumentException(\"Unsupported type \" + column.getType());\n}\n}\n}\nPage page=pageBuilder.build();\npageSink.appendPage(page);\ngetFutureValue(pageSink.finish());\nFile outputDir=new File(outputPath);\nList<File> files=ImmutableList.copyOf(outputDir.listFiles((dir,name) -> !name.endsWith(\".crc\")));\nFile outputFile=getOnlyElement(files);\nlong length=outputFile.length();\nConnectorPageSource pageSource=createPageSource(transaction,config,metastoreClientConfig,outputFile);\nList<Page> pages=new ArrayList<>();\nwhile (!pageSource.isFinished()) {\nPage nextPage=pageSource.getNextPage();\nif (nextPage != null) {\npages.add(nextPage.getLoadedPage());\n}\n}\nMaterializedResult expectedResults=toMaterializedResult(getSession(config),columnTypes,ImmutableList.of(page));\nMaterializedResult results=toMaterializedResult(getSession(config),columnTypes,pages);\nassertEquals(results,expectedResults);\nassertEquals(stats.getInputPageSizeInBytes().getAllTime().getMax(),page.getRetainedSizeInBytes());\nreturn length;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 414,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 174,
        "startColumnNumber" : 24,
        "endLineNumber" : 174,
        "endColumnNumber" : 87
      },
      "nodeContext" : "BIGINT.writeLong(blockBuilder,column.getIdentifier(lineItem));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.common.type.BigintType"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 174,
    "startColumnNumber" : 24,
    "endLineNumber" : 174,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}