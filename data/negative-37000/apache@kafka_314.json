{
  "id" : 314,
  "expression" : "\" with unknown value\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/raft/src/main/java/org/apache/kafka/raft/FollowerState.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" with unknown value\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 111,
      "startColumnNumber" : 16,
      "endLineNumber" : 111,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 110,
        "startColumnNumber" : 47,
        "endLineNumber" : 111,
        "endColumnNumber" : 37
      },
      "nodeContext" : "\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 110,
        "startColumnNumber" : 18,
        "endLineNumber" : 111,
        "endColumnNumber" : 38
      },
      "nodeContext" : "new IllegalArgumentException(\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 39
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 39
      },
      "nodeContext" : "if (!highWatermark.isPresent() && this.highWatermark.isPresent()) throw new IllegalArgumentException(\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 108,
        "startColumnNumber" : 67,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!highWatermark.isPresent() && this.highWatermark.isPresent())   throw new IllegalArgumentException(\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\");\n  if (this.highWatermark.isPresent()) {\n    long previousHighWatermark=this.highWatermark.get().offset;\n    long updatedHighWatermark=highWatermark.getAsLong();\n    if (updatedHighWatermark < 0)     throw new IllegalArgumentException(\"Illegal negative high watermark update\");\n    if (previousHighWatermark > updatedHighWatermark)     throw new IllegalArgumentException(\"Non-monotonic update of high watermark attempted\");\n    if (previousHighWatermark == updatedHighWatermark)     return false;\n  }\n  this.highWatermark=highWatermark.isPresent() ? Optional.of(new LogOffsetMetadata(highWatermark.getAsLong())) : Optional.empty();\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public boolean updateHighWatermark(OptionalLong highWatermark){\n  if (!highWatermark.isPresent() && this.highWatermark.isPresent())   throw new IllegalArgumentException(\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\");\n  if (this.highWatermark.isPresent()) {\n    long previousHighWatermark=this.highWatermark.get().offset;\n    long updatedHighWatermark=highWatermark.getAsLong();\n    if (updatedHighWatermark < 0)     throw new IllegalArgumentException(\"Illegal negative high watermark update\");\n    if (previousHighWatermark > updatedHighWatermark)     throw new IllegalArgumentException(\"Non-monotonic update of high watermark attempted\");\n    if (previousHighWatermark == updatedHighWatermark)     return false;\n  }\n  this.highWatermark=highWatermark.isPresent() ? Optional.of(new LogOffsetMetadata(highWatermark.getAsLong())) : Optional.empty();\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 102,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 110,
        "startColumnNumber" : 47,
        "endLineNumber" : 111,
        "endColumnNumber" : 37
      },
      "nodeContext" : "\"Attempt to overwrite current high watermark \" + this.highWatermark + \" with unknown value\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 111,
    "startColumnNumber" : 16,
    "endLineNumber" : 111,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}