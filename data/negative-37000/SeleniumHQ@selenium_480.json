{
  "id" : 480,
  "expression" : "Comparator",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/MutableCapabilities.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Comparator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 215,
      "startColumnNumber" : 18,
      "endLineNumber" : 215,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 215,
        "startColumnNumber" : 18,
        "endLineNumber" : 215,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Comparator.comparing(entry -> String.valueOf(entry.getKey()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 80
      },
      "nodeContext" : "((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 100
      },
      "nodeContext" : "((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue())))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 214,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 44
      },
      "nodeContext" : "((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 213,
        "startColumnNumber" : 6,
        "endLineNumber" : 217,
        "endColumnNumber" : 45
      },
      "nodeContext" : "value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 213,
        "startColumnNumber" : 6,
        "endLineNumber" : 217,
        "endColumnNumber" : 46
      },
      "nodeContext" : "value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 54,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 211,
        "startColumnNumber" : 41,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  value.append(\"{\");\n  value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n  value.append(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 211,
        "startColumnNumber" : 11,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (stringify instanceof Map) {\n  value.append(\"{\");\n  value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n  value.append(\"}\");\n}\n else {\n  String s=String.valueOf(stringify);\n  if (s.length() > 30) {\n    value.append(s,0,27).append(\"...\");\n  }\n else {\n    value.append(s);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 204,
        "startColumnNumber" : 11,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (stringify instanceof Collection) {\n  value.append(\"[\");\n  value.append(((Collection<?>)stringify).stream().map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n  value.append(\"]\");\n}\n else if (stringify instanceof Map) {\n  value.append(\"{\");\n  value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n  value.append(\"}\");\n}\n else {\n  String s=String.valueOf(stringify);\n  if (s.length() > 30) {\n    value.append(s,0,27).append(\"...\");\n  }\n else {\n    value.append(s);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1080,
        "startLineNumber" : 197,
        "startColumnNumber" : 4,
        "endLineNumber" : 226,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (stringify.getClass().isArray()) {\n  value.append(\"[\");\n  value.append(Stream.of((Object[])stringify).map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n  value.append(\"]\");\n}\n else if (stringify instanceof Collection) {\n  value.append(\"[\");\n  value.append(((Collection<?>)stringify).stream().map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n  value.append(\"]\");\n}\n else if (stringify instanceof Map) {\n  value.append(\"{\");\n  value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n  value.append(\"}\");\n}\n else {\n  String s=String.valueOf(stringify);\n  if (s.length() > 30) {\n    value.append(s,0,27).append(\"...\");\n  }\n else {\n    value.append(s);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 192,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1268,
        "startLineNumber" : 190,
        "startColumnNumber" : 72,
        "endLineNumber" : 230,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (stringify == null) {\n    return \"null\";\n  }\n  StringBuilder value=new StringBuilder();\n  if (stringify.getClass().isArray()) {\n    value.append(\"[\");\n    value.append(Stream.of((Object[])stringify).map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n    value.append(\"]\");\n  }\n else   if (stringify instanceof Collection) {\n    value.append(\"[\");\n    value.append(((Collection<?>)stringify).stream().map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n    value.append(\"]\");\n  }\n else   if (stringify instanceof Map) {\n    value.append(\"{\");\n    value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n    value.append(\"}\");\n  }\n else {\n    String s=String.valueOf(stringify);\n    if (s.length() > 30) {\n      value.append(s,0,27).append(\"...\");\n    }\n else {\n      value.append(s);\n    }\n  }\n  seen.put(stringify,value.toString());\n  return value.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 190,
        "startColumnNumber" : 2,
        "endLineNumber" : 230,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private String abbreviate(Map<Object,String> seen,Object stringify){\n  if (stringify == null) {\n    return \"null\";\n  }\n  StringBuilder value=new StringBuilder();\n  if (stringify.getClass().isArray()) {\n    value.append(\"[\");\n    value.append(Stream.of((Object[])stringify).map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n    value.append(\"]\");\n  }\n else   if (stringify instanceof Collection) {\n    value.append(\"[\");\n    value.append(((Collection<?>)stringify).stream().map(item -> abbreviate(seen,item)).collect(Collectors.joining(\", \")));\n    value.append(\"]\");\n  }\n else   if (stringify instanceof Map) {\n    value.append(\"{\");\n    value.append(((Map<?,?>)stringify).entrySet().stream().sorted(Comparator.comparing(entry -> String.valueOf(entry.getKey()))).map(entry -> String.format(\"%s: %s\",entry.getKey(),abbreviate(seen,entry.getValue()))).collect(Collectors.joining(\", \")));\n    value.append(\"}\");\n  }\n else {\n    String s=String.valueOf(stringify);\n    if (s.length() > 30) {\n      value.append(s,0,27).append(\"...\");\n    }\n else {\n      value.append(s);\n    }\n  }\n  seen.put(stringify,value.toString());\n  return value.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 215,
        "startColumnNumber" : 18,
        "endLineNumber" : 215,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Comparator.comparing(entry -> String.valueOf(entry.getKey()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Comparator"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 215,
    "startColumnNumber" : 18,
    "endLineNumber" : 215,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}