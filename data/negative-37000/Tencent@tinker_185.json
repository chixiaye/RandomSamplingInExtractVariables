{
  "id" : 185,
  "expression" : "currentEntry.name",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipOutputStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "currentEntry.name",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 465,
      "startColumnNumber" : 20,
      "endLineNumber" : 465,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 465,
        "startColumnNumber" : 8,
        "endLineNumber" : 465,
        "endColumnNumber" : 38
      },
      "nodeContext" : "entries.add(currentEntry.name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 465,
        "startColumnNumber" : 8,
        "endLineNumber" : 465,
        "endColumnNumber" : 39
      },
      "nodeContext" : "entries.add(currentEntry.name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4504,
        "startLineNumber" : 416,
        "startColumnNumber" : 67,
        "endLineNumber" : 518,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.size != ze.compressedSize) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  ze.comment=null;\n  ze.extra=null;\n  ze.time=TIME_CONST;\n  ze.modDate=MOD_DATE_CONST;\n  nameBytes=ze.name.getBytes(StandardCharsets.UTF_8);\n  checkSizeIsWithinShort(\"Name\",nameBytes);\n  entryCommentBytes=BYTE;\n  if (ze.comment != null) {\n    entryCommentBytes=ze.comment.getBytes(StandardCharsets.UTF_8);\n    checkSizeIsWithinShort(\"Comment\",entryCommentBytes);\n  }\n  ze.setMethod(method);\n  currentEntry=ze;\n  currentEntry.localHeaderRelOffset=offset;\n  entries.add(currentEntry.name);\n  int flags=(method == STORED) ? 0 : TinkerZipFile.GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=TinkerZipFile.GPBF_UTF8_FLAG;\n  writeLongAsUint32(out,LOCSIG);\n  writeIntAsUint16(out,ZIP_VERSION_2_0);\n  writeIntAsUint16(out,flags);\n  writeIntAsUint16(out,method);\n  writeIntAsUint16(out,currentEntry.time);\n  writeIntAsUint16(out,currentEntry.modDate);\n  if (method == STORED) {\n    writeLongAsUint32(out,currentEntry.crc);\n    writeLongAsUint32(out,currentEntry.size);\n    writeLongAsUint32(out,currentEntry.size);\n  }\n else {\n    writeLongAsUint32(out,0);\n    writeLongAsUint32(out,0);\n    writeLongAsUint32(out,0);\n  }\n  writeIntAsUint16(out,nameBytes.length);\n  if (currentEntry.extra != null) {\n    writeIntAsUint16(out,currentEntry.extra.length);\n  }\n else {\n    writeIntAsUint16(out,0);\n  }\n  out.write(nameBytes);\n  if (currentEntry.extra != null) {\n    out.write(currentEntry.extra);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 336,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5033,
        "startLineNumber" : 404,
        "startColumnNumber" : 4,
        "endLineNumber" : 518,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Writes entry information to the underlying stream. Data associated with the entry can then be written using  {@code write()}. After data is written  {@code closeEntry()} must be called to complete the writing ofthe entry to the underlying stream.\n * @param ze the  {@code ZipEntry} to store.\n * @throws IOException If an error occurs storing the entry.\n * @see #write\n */\npublic void putNextEntry(TinkerZipEntry ze) throws IOException {\n  if (currentEntry != null) {\n    closeEntry();\n  }\n  int method=ze.getMethod();\n  if (method == -1) {\n    method=defaultCompressionMethod;\n  }\n  if (method == STORED) {\n    if (ze.getCompressedSize() == -1) {\n      ze.setCompressedSize(ze.getSize());\n    }\n else     if (ze.getSize() == -1) {\n      ze.setSize(ze.getCompressedSize());\n    }\n    if (ze.getCrc() == -1) {\n      throw new ZipException(\"STORED entry missing CRC\");\n    }\n    if (ze.getSize() == -1) {\n      throw new ZipException(\"STORED entry missing size\");\n    }\n    if (ze.size != ze.compressedSize) {\n      throw new ZipException(\"STORED entry size/compressed size mismatch\");\n    }\n  }\n  checkOpen();\n  ze.comment=null;\n  ze.extra=null;\n  ze.time=TIME_CONST;\n  ze.modDate=MOD_DATE_CONST;\n  nameBytes=ze.name.getBytes(StandardCharsets.UTF_8);\n  checkSizeIsWithinShort(\"Name\",nameBytes);\n  entryCommentBytes=BYTE;\n  if (ze.comment != null) {\n    entryCommentBytes=ze.comment.getBytes(StandardCharsets.UTF_8);\n    checkSizeIsWithinShort(\"Comment\",entryCommentBytes);\n  }\n  ze.setMethod(method);\n  currentEntry=ze;\n  currentEntry.localHeaderRelOffset=offset;\n  entries.add(currentEntry.name);\n  int flags=(method == STORED) ? 0 : TinkerZipFile.GPBF_DATA_DESCRIPTOR_FLAG;\n  flags|=TinkerZipFile.GPBF_UTF8_FLAG;\n  writeLongAsUint32(out,LOCSIG);\n  writeIntAsUint16(out,ZIP_VERSION_2_0);\n  writeIntAsUint16(out,flags);\n  writeIntAsUint16(out,method);\n  writeIntAsUint16(out,currentEntry.time);\n  writeIntAsUint16(out,currentEntry.modDate);\n  if (method == STORED) {\n    writeLongAsUint32(out,currentEntry.crc);\n    writeLongAsUint32(out,currentEntry.size);\n    writeLongAsUint32(out,currentEntry.size);\n  }\n else {\n    writeLongAsUint32(out,0);\n    writeLongAsUint32(out,0);\n    writeLongAsUint32(out,0);\n  }\n  writeIntAsUint16(out,nameBytes.length);\n  if (currentEntry.extra != null) {\n    writeIntAsUint16(out,currentEntry.extra.length);\n  }\n else {\n    writeIntAsUint16(out,0);\n  }\n  out.write(nameBytes);\n  if (currentEntry.extra != null) {\n    out.write(currentEntry.extra);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 347,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 465,
        "startColumnNumber" : 8,
        "endLineNumber" : 465,
        "endColumnNumber" : 39
      },
      "nodeContext" : "entries.add(currentEntry.name);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 465,
    "startColumnNumber" : 20,
    "endLineNumber" : 465,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}