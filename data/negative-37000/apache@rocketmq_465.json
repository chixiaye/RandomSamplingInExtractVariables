{
  "id" : 465,
  "expression" : "maxmsgList",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maxmsgList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 40,
      "startColumnNumber" : 16,
      "endLineNumber" : 40,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 40,
        "endColumnNumber" : 53
      },
      "nodeContext" : "maxmsgList < lQueueList.get(i).size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 40,
        "startColumnNumber" : 12,
        "endLineNumber" : 41,
        "endColumnNumber" : 54
      },
      "nodeContext" : "if (maxmsgList < lQueueList.get(i).size()) maxmsgList=lQueueList.get(i).size();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 39,
        "startColumnNumber" : 46,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (maxmsgList < lQueueList.get(i).size())   maxmsgList=lQueueList.get(i).size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 159,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < msgListSize; i++) {\n  if (maxmsgList < lQueueList.get(i).size())   maxmsgList=lQueueList.get(i).size();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3937,
        "startLineNumber" : 33,
        "startColumnNumber" : 53,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgListSize=lQueueList.size();\n  int maxmsgList=0;\n  Map<T,Integer> msgIdMap=new HashMap<T,Integer>();\n  Map<Integer,Integer> dupMsgMap=new HashMap<Integer,Integer>();\n  for (int i=0; i < msgListSize; i++) {\n    if (maxmsgList < lQueueList.get(i).size())     maxmsgList=lQueueList.get(i).size();\n  }\n  List<StringBuilder> strBQueue=new LinkedList<StringBuilder>();\n  for (int i=0; i < msgListSize; i++)   strBQueue.add(new StringBuilder());\n  for (int msgListIndex=0; msgListIndex < maxmsgList; msgListIndex++) {\n    for (int msgQueueListIndex=0; msgQueueListIndex < msgListSize; msgQueueListIndex++) {\n      if (msgListIndex < lQueueList.get(msgQueueListIndex).size()) {\n        if (msgIdMap.containsKey(lQueueList.get(msgQueueListIndex).get(msgListIndex))) {\n          if (dupMsgMap.containsKey(msgQueueListIndex)) {\n            int dupMsgCount=dupMsgMap.get(msgQueueListIndex);\n            dupMsgCount++;\n            dupMsgMap.remove(msgQueueListIndex);\n            dupMsgMap.put(msgQueueListIndex,dupMsgCount);\n          }\n else {\n            dupMsgMap.put(msgQueueListIndex,1);\n          }\n          strBQueue.get(msgQueueListIndex).append(\"\" + msgQueueListIndex + \"\\t\"+ msgIdMap.get(lQueueList.get(msgQueueListIndex).get(msgListIndex))+ \"\\t\"+ lQueueList.get(msgQueueListIndex).get(msgListIndex)+ \"\\r\\n\");\n        }\n else {\n          msgIdMap.put(lQueueList.get(msgQueueListIndex).get(msgListIndex),msgQueueListIndex);\n        }\n      }\n    }\n  }\n  int msgTotalNum=getMsgTotalNumber(lQueueList);\n  int msgTotalDupNum=getDuplicateMsgNum(dupMsgMap);\n  int msgNoDupNum=msgTotalNum - msgTotalDupNum;\n  float msgDupRate=((float)msgTotalDupNum / (float)msgTotalNum) * 100.0f;\n  StringBuilder strBuilder=new StringBuilder();\n  strBuilder.append(\"msgTotalNum:\" + msgTotalNum + \"\\r\\n\");\n  strBuilder.append(\"msgTotalDupNum:\" + msgTotalDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgNoDupNum:\" + msgNoDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgDupRate\" + getFloatNumString(msgDupRate) + \"%\\r\\n\");\n  strBuilder.append(\"queue\\tmsg(dupNum/dupRate)\\tdupRate\\r\\n\");\n  for (int i=0; i < dupMsgMap.size(); i++) {\n    int msgDupNum=dupMsgMap.get(i);\n    int msgNum=lQueueList.get(i).size();\n    float msgQueueDupRate=((float)msgDupNum / (float)msgTotalDupNum) * 100.0f;\n    float msgQueueInnerDupRate=((float)msgDupNum / (float)msgNum) * 100.0f;\n    strBuilder.append(i + \"\\t\" + msgDupNum+ \"/\"+ getFloatNumString(msgQueueDupRate)+ \"%\"+ \"\\t\\t\"+ getFloatNumString(msgQueueInnerDupRate)+ \"%\\r\\n\");\n  }\n  System.out.print(strBuilder.toString());\n  String titleString=\"queue\\tdupQueue\\tdupMsg\\r\\n\";\n  System.out.print(titleString);\n  for (int i=0; i < msgListSize; i++)   System.out.print(strBQueue.get(i).toString());\n  if (bPrintLog) {\n    String logFileNameStr=\"D:\" + File.separator + \"checkDuplicatedMessageInfo.txt\";\n    File logFileNameFile=new File(logFileNameStr);\n    OutputStream out=new FileOutputStream(logFileNameFile,true);\n    String strToWrite;\n    byte[] byteToWrite;\n    strToWrite=strBuilder.toString() + titleString;\n    for (int i=0; i < msgListSize; i++)     strToWrite+=strBQueue.get(i).toString() + \"\\r\\n\";\n    byteToWrite=strToWrite.getBytes();\n    out.write(byteToWrite);\n    out.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 529,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4048,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkDuplicatedMessageInfo(boolean bPrintLog,List<List<T>> lQueueList) throws IOException {\n  int msgListSize=lQueueList.size();\n  int maxmsgList=0;\n  Map<T,Integer> msgIdMap=new HashMap<T,Integer>();\n  Map<Integer,Integer> dupMsgMap=new HashMap<Integer,Integer>();\n  for (int i=0; i < msgListSize; i++) {\n    if (maxmsgList < lQueueList.get(i).size())     maxmsgList=lQueueList.get(i).size();\n  }\n  List<StringBuilder> strBQueue=new LinkedList<StringBuilder>();\n  for (int i=0; i < msgListSize; i++)   strBQueue.add(new StringBuilder());\n  for (int msgListIndex=0; msgListIndex < maxmsgList; msgListIndex++) {\n    for (int msgQueueListIndex=0; msgQueueListIndex < msgListSize; msgQueueListIndex++) {\n      if (msgListIndex < lQueueList.get(msgQueueListIndex).size()) {\n        if (msgIdMap.containsKey(lQueueList.get(msgQueueListIndex).get(msgListIndex))) {\n          if (dupMsgMap.containsKey(msgQueueListIndex)) {\n            int dupMsgCount=dupMsgMap.get(msgQueueListIndex);\n            dupMsgCount++;\n            dupMsgMap.remove(msgQueueListIndex);\n            dupMsgMap.put(msgQueueListIndex,dupMsgCount);\n          }\n else {\n            dupMsgMap.put(msgQueueListIndex,1);\n          }\n          strBQueue.get(msgQueueListIndex).append(\"\" + msgQueueListIndex + \"\\t\"+ msgIdMap.get(lQueueList.get(msgQueueListIndex).get(msgListIndex))+ \"\\t\"+ lQueueList.get(msgQueueListIndex).get(msgListIndex)+ \"\\r\\n\");\n        }\n else {\n          msgIdMap.put(lQueueList.get(msgQueueListIndex).get(msgListIndex),msgQueueListIndex);\n        }\n      }\n    }\n  }\n  int msgTotalNum=getMsgTotalNumber(lQueueList);\n  int msgTotalDupNum=getDuplicateMsgNum(dupMsgMap);\n  int msgNoDupNum=msgTotalNum - msgTotalDupNum;\n  float msgDupRate=((float)msgTotalDupNum / (float)msgTotalNum) * 100.0f;\n  StringBuilder strBuilder=new StringBuilder();\n  strBuilder.append(\"msgTotalNum:\" + msgTotalNum + \"\\r\\n\");\n  strBuilder.append(\"msgTotalDupNum:\" + msgTotalDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgNoDupNum:\" + msgNoDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgDupRate\" + getFloatNumString(msgDupRate) + \"%\\r\\n\");\n  strBuilder.append(\"queue\\tmsg(dupNum/dupRate)\\tdupRate\\r\\n\");\n  for (int i=0; i < dupMsgMap.size(); i++) {\n    int msgDupNum=dupMsgMap.get(i);\n    int msgNum=lQueueList.get(i).size();\n    float msgQueueDupRate=((float)msgDupNum / (float)msgTotalDupNum) * 100.0f;\n    float msgQueueInnerDupRate=((float)msgDupNum / (float)msgNum) * 100.0f;\n    strBuilder.append(i + \"\\t\" + msgDupNum+ \"/\"+ getFloatNumString(msgQueueDupRate)+ \"%\"+ \"\\t\\t\"+ getFloatNumString(msgQueueInnerDupRate)+ \"%\\r\\n\");\n  }\n  System.out.print(strBuilder.toString());\n  String titleString=\"queue\\tdupQueue\\tdupMsg\\r\\n\";\n  System.out.print(titleString);\n  for (int i=0; i < msgListSize; i++)   System.out.print(strBQueue.get(i).toString());\n  if (bPrintLog) {\n    String logFileNameStr=\"D:\" + File.separator + \"checkDuplicatedMessageInfo.txt\";\n    File logFileNameFile=new File(logFileNameStr);\n    OutputStream out=new FileOutputStream(logFileNameFile,true);\n    String strToWrite;\n    byte[] byteToWrite;\n    strToWrite=strBuilder.toString() + titleString;\n    for (int i=0; i < msgListSize; i++)     strToWrite+=strBQueue.get(i).toString() + \"\\r\\n\";\n    byteToWrite=strToWrite.getBytes();\n    out.write(byteToWrite);\n    out.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 548,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 40,
        "endColumnNumber" : 53
      },
      "nodeContext" : "maxmsgList < lQueueList.get(i).size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxmsgList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 48,
      "startColumnNumber" : 50,
      "endLineNumber" : 48,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 48,
        "startColumnNumber" : 35,
        "endLineNumber" : 48,
        "endColumnNumber" : 60
      },
      "nodeContext" : "msgListIndex < maxmsgList",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1304,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int msgListIndex=0; msgListIndex < maxmsgList; msgListIndex++) {\n  for (int msgQueueListIndex=0; msgQueueListIndex < msgListSize; msgQueueListIndex++) {\n    if (msgListIndex < lQueueList.get(msgQueueListIndex).size()) {\n      if (msgIdMap.containsKey(lQueueList.get(msgQueueListIndex).get(msgListIndex))) {\n        if (dupMsgMap.containsKey(msgQueueListIndex)) {\n          int dupMsgCount=dupMsgMap.get(msgQueueListIndex);\n          dupMsgCount++;\n          dupMsgMap.remove(msgQueueListIndex);\n          dupMsgMap.put(msgQueueListIndex,dupMsgCount);\n        }\n else {\n          dupMsgMap.put(msgQueueListIndex,1);\n        }\n        strBQueue.get(msgQueueListIndex).append(\"\" + msgQueueListIndex + \"\\t\"+ msgIdMap.get(lQueueList.get(msgQueueListIndex).get(msgListIndex))+ \"\\t\"+ lQueueList.get(msgQueueListIndex).get(msgListIndex)+ \"\\r\\n\");\n      }\n else {\n        msgIdMap.put(lQueueList.get(msgQueueListIndex).get(msgListIndex),msgQueueListIndex);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3937,
        "startLineNumber" : 33,
        "startColumnNumber" : 53,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgListSize=lQueueList.size();\n  int maxmsgList=0;\n  Map<T,Integer> msgIdMap=new HashMap<T,Integer>();\n  Map<Integer,Integer> dupMsgMap=new HashMap<Integer,Integer>();\n  for (int i=0; i < msgListSize; i++) {\n    if (maxmsgList < lQueueList.get(i).size())     maxmsgList=lQueueList.get(i).size();\n  }\n  List<StringBuilder> strBQueue=new LinkedList<StringBuilder>();\n  for (int i=0; i < msgListSize; i++)   strBQueue.add(new StringBuilder());\n  for (int msgListIndex=0; msgListIndex < maxmsgList; msgListIndex++) {\n    for (int msgQueueListIndex=0; msgQueueListIndex < msgListSize; msgQueueListIndex++) {\n      if (msgListIndex < lQueueList.get(msgQueueListIndex).size()) {\n        if (msgIdMap.containsKey(lQueueList.get(msgQueueListIndex).get(msgListIndex))) {\n          if (dupMsgMap.containsKey(msgQueueListIndex)) {\n            int dupMsgCount=dupMsgMap.get(msgQueueListIndex);\n            dupMsgCount++;\n            dupMsgMap.remove(msgQueueListIndex);\n            dupMsgMap.put(msgQueueListIndex,dupMsgCount);\n          }\n else {\n            dupMsgMap.put(msgQueueListIndex,1);\n          }\n          strBQueue.get(msgQueueListIndex).append(\"\" + msgQueueListIndex + \"\\t\"+ msgIdMap.get(lQueueList.get(msgQueueListIndex).get(msgListIndex))+ \"\\t\"+ lQueueList.get(msgQueueListIndex).get(msgListIndex)+ \"\\r\\n\");\n        }\n else {\n          msgIdMap.put(lQueueList.get(msgQueueListIndex).get(msgListIndex),msgQueueListIndex);\n        }\n      }\n    }\n  }\n  int msgTotalNum=getMsgTotalNumber(lQueueList);\n  int msgTotalDupNum=getDuplicateMsgNum(dupMsgMap);\n  int msgNoDupNum=msgTotalNum - msgTotalDupNum;\n  float msgDupRate=((float)msgTotalDupNum / (float)msgTotalNum) * 100.0f;\n  StringBuilder strBuilder=new StringBuilder();\n  strBuilder.append(\"msgTotalNum:\" + msgTotalNum + \"\\r\\n\");\n  strBuilder.append(\"msgTotalDupNum:\" + msgTotalDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgNoDupNum:\" + msgNoDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgDupRate\" + getFloatNumString(msgDupRate) + \"%\\r\\n\");\n  strBuilder.append(\"queue\\tmsg(dupNum/dupRate)\\tdupRate\\r\\n\");\n  for (int i=0; i < dupMsgMap.size(); i++) {\n    int msgDupNum=dupMsgMap.get(i);\n    int msgNum=lQueueList.get(i).size();\n    float msgQueueDupRate=((float)msgDupNum / (float)msgTotalDupNum) * 100.0f;\n    float msgQueueInnerDupRate=((float)msgDupNum / (float)msgNum) * 100.0f;\n    strBuilder.append(i + \"\\t\" + msgDupNum+ \"/\"+ getFloatNumString(msgQueueDupRate)+ \"%\"+ \"\\t\\t\"+ getFloatNumString(msgQueueInnerDupRate)+ \"%\\r\\n\");\n  }\n  System.out.print(strBuilder.toString());\n  String titleString=\"queue\\tdupQueue\\tdupMsg\\r\\n\";\n  System.out.print(titleString);\n  for (int i=0; i < msgListSize; i++)   System.out.print(strBQueue.get(i).toString());\n  if (bPrintLog) {\n    String logFileNameStr=\"D:\" + File.separator + \"checkDuplicatedMessageInfo.txt\";\n    File logFileNameFile=new File(logFileNameStr);\n    OutputStream out=new FileOutputStream(logFileNameFile,true);\n    String strToWrite;\n    byte[] byteToWrite;\n    strToWrite=strBuilder.toString() + titleString;\n    for (int i=0; i < msgListSize; i++)     strToWrite+=strBQueue.get(i).toString() + \"\\r\\n\";\n    byteToWrite=strToWrite.getBytes();\n    out.write(byteToWrite);\n    out.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 529,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4048,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void checkDuplicatedMessageInfo(boolean bPrintLog,List<List<T>> lQueueList) throws IOException {\n  int msgListSize=lQueueList.size();\n  int maxmsgList=0;\n  Map<T,Integer> msgIdMap=new HashMap<T,Integer>();\n  Map<Integer,Integer> dupMsgMap=new HashMap<Integer,Integer>();\n  for (int i=0; i < msgListSize; i++) {\n    if (maxmsgList < lQueueList.get(i).size())     maxmsgList=lQueueList.get(i).size();\n  }\n  List<StringBuilder> strBQueue=new LinkedList<StringBuilder>();\n  for (int i=0; i < msgListSize; i++)   strBQueue.add(new StringBuilder());\n  for (int msgListIndex=0; msgListIndex < maxmsgList; msgListIndex++) {\n    for (int msgQueueListIndex=0; msgQueueListIndex < msgListSize; msgQueueListIndex++) {\n      if (msgListIndex < lQueueList.get(msgQueueListIndex).size()) {\n        if (msgIdMap.containsKey(lQueueList.get(msgQueueListIndex).get(msgListIndex))) {\n          if (dupMsgMap.containsKey(msgQueueListIndex)) {\n            int dupMsgCount=dupMsgMap.get(msgQueueListIndex);\n            dupMsgCount++;\n            dupMsgMap.remove(msgQueueListIndex);\n            dupMsgMap.put(msgQueueListIndex,dupMsgCount);\n          }\n else {\n            dupMsgMap.put(msgQueueListIndex,1);\n          }\n          strBQueue.get(msgQueueListIndex).append(\"\" + msgQueueListIndex + \"\\t\"+ msgIdMap.get(lQueueList.get(msgQueueListIndex).get(msgListIndex))+ \"\\t\"+ lQueueList.get(msgQueueListIndex).get(msgListIndex)+ \"\\r\\n\");\n        }\n else {\n          msgIdMap.put(lQueueList.get(msgQueueListIndex).get(msgListIndex),msgQueueListIndex);\n        }\n      }\n    }\n  }\n  int msgTotalNum=getMsgTotalNumber(lQueueList);\n  int msgTotalDupNum=getDuplicateMsgNum(dupMsgMap);\n  int msgNoDupNum=msgTotalNum - msgTotalDupNum;\n  float msgDupRate=((float)msgTotalDupNum / (float)msgTotalNum) * 100.0f;\n  StringBuilder strBuilder=new StringBuilder();\n  strBuilder.append(\"msgTotalNum:\" + msgTotalNum + \"\\r\\n\");\n  strBuilder.append(\"msgTotalDupNum:\" + msgTotalDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgNoDupNum:\" + msgNoDupNum + \"\\r\\n\");\n  strBuilder.append(\"msgDupRate\" + getFloatNumString(msgDupRate) + \"%\\r\\n\");\n  strBuilder.append(\"queue\\tmsg(dupNum/dupRate)\\tdupRate\\r\\n\");\n  for (int i=0; i < dupMsgMap.size(); i++) {\n    int msgDupNum=dupMsgMap.get(i);\n    int msgNum=lQueueList.get(i).size();\n    float msgQueueDupRate=((float)msgDupNum / (float)msgTotalDupNum) * 100.0f;\n    float msgQueueInnerDupRate=((float)msgDupNum / (float)msgNum) * 100.0f;\n    strBuilder.append(i + \"\\t\" + msgDupNum+ \"/\"+ getFloatNumString(msgQueueDupRate)+ \"%\"+ \"\\t\\t\"+ getFloatNumString(msgQueueInnerDupRate)+ \"%\\r\\n\");\n  }\n  System.out.print(strBuilder.toString());\n  String titleString=\"queue\\tdupQueue\\tdupMsg\\r\\n\";\n  System.out.print(titleString);\n  for (int i=0; i < msgListSize; i++)   System.out.print(strBQueue.get(i).toString());\n  if (bPrintLog) {\n    String logFileNameStr=\"D:\" + File.separator + \"checkDuplicatedMessageInfo.txt\";\n    File logFileNameFile=new File(logFileNameStr);\n    OutputStream out=new FileOutputStream(logFileNameFile,true);\n    String strToWrite;\n    byte[] byteToWrite;\n    strToWrite=strBuilder.toString() + titleString;\n    for (int i=0; i < msgListSize; i++)     strToWrite+=strBQueue.get(i).toString() + \"\\r\\n\";\n    byteToWrite=strToWrite.getBytes();\n    out.write(byteToWrite);\n    out.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 548,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 48,
        "startColumnNumber" : 35,
        "endLineNumber" : 48,
        "endColumnNumber" : 60
      },
      "nodeContext" : "msgListIndex < maxmsgList",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 40,
    "startColumnNumber" : 16,
    "endLineNumber" : 40,
    "endColumnNumber" : 26
  }, {
    "charLength" : 10,
    "startLineNumber" : 48,
    "startColumnNumber" : 50,
    "endLineNumber" : 48,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}