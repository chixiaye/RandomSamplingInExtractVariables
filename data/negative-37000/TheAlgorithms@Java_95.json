{
  "id" : 95,
  "expression" : "left",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Sorts/MergeSort.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "left",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 20,
      "startColumnNumber" : 12,
      "endLineNumber" : 20,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 24
      },
      "nodeContext" : "left < right",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (left < right) {\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 19,
        "startColumnNumber" : 92,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method implements the Generic Merge Sort\n * @param arr The array to be sorted\n * @param temp The copy of the actual array\n * @param left The first index of the array\n * @param right The last index of the arrayRecursively sorts the array in increasing order\n */\npublic static <T extends Comparable<T>>void MS(T[] arr,T[] temp,int left,int right){\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 24
      },
      "nodeContext" : "left < right",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "left",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 21,
      "startColumnNumber" : 22,
      "endLineNumber" : 21,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 21,
        "startColumnNumber" : 22,
        "endLineNumber" : 21,
        "endColumnNumber" : 47
      },
      "nodeContext" : "left + (right - left) / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 21,
        "startColumnNumber" : 16,
        "endLineNumber" : 21,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mid=left + (right - left) / 2",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int mid=left + (right - left) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 20,
        "startColumnNumber" : 26,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (left < right) {\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 19,
        "startColumnNumber" : 92,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method implements the Generic Merge Sort\n * @param arr The array to be sorted\n * @param temp The copy of the actual array\n * @param left The first index of the array\n * @param right The last index of the arrayRecursively sorts the array in increasing order\n */\npublic static <T extends Comparable<T>>void MS(T[] arr,T[] temp,int left,int right){\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int mid=left + (right - left) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "left",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 21,
      "startColumnNumber" : 38,
      "endLineNumber" : 21,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 21,
        "startColumnNumber" : 30,
        "endLineNumber" : 21,
        "endColumnNumber" : 42
      },
      "nodeContext" : "right - left",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 21,
        "startColumnNumber" : 29,
        "endLineNumber" : 21,
        "endColumnNumber" : 43
      },
      "nodeContext" : "(right - left)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 21,
        "startColumnNumber" : 29,
        "endLineNumber" : 21,
        "endColumnNumber" : 47
      },
      "nodeContext" : "(right - left) / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 21,
        "startColumnNumber" : 22,
        "endLineNumber" : 21,
        "endColumnNumber" : 47
      },
      "nodeContext" : "left + (right - left) / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 21,
        "startColumnNumber" : 16,
        "endLineNumber" : 21,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mid=left + (right - left) / 2",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int mid=left + (right - left) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 20,
        "startColumnNumber" : 26,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (left < right) {\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 19,
        "startColumnNumber" : 92,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method implements the Generic Merge Sort\n * @param arr The array to be sorted\n * @param temp The copy of the actual array\n * @param left The first index of the array\n * @param right The last index of the arrayRecursively sorts the array in increasing order\n */\npublic static <T extends Comparable<T>>void MS(T[] arr,T[] temp,int left,int right){\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 21,
        "startColumnNumber" : 12,
        "endLineNumber" : 21,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int mid=left + (right - left) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "left",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 22,
      "startColumnNumber" : 26,
      "endLineNumber" : 22,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 22,
        "startColumnNumber" : 12,
        "endLineNumber" : 22,
        "endColumnNumber" : 36
      },
      "nodeContext" : "MS(arr,temp,left,mid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 22,
        "startColumnNumber" : 12,
        "endLineNumber" : 22,
        "endColumnNumber" : 37
      },
      "nodeContext" : "MS(arr,temp,left,mid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 20,
        "startColumnNumber" : 26,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (left < right) {\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 19,
        "startColumnNumber" : 92,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method implements the Generic Merge Sort\n * @param arr The array to be sorted\n * @param temp The copy of the actual array\n * @param left The first index of the array\n * @param right The last index of the arrayRecursively sorts the array in increasing order\n */\npublic static <T extends Comparable<T>>void MS(T[] arr,T[] temp,int left,int right){\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 22,
        "startColumnNumber" : 12,
        "endLineNumber" : 22,
        "endColumnNumber" : 37
      },
      "nodeContext" : "MS(arr,temp,left,mid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "left",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 24,
      "startColumnNumber" : 29,
      "endLineNumber" : 24,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 46
      },
      "nodeContext" : "merge(arr,temp,left,mid,right)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 47
      },
      "nodeContext" : "merge(arr,temp,left,mid,right);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 20,
        "startColumnNumber" : 26,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 20,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (left < right) {\n  int mid=left + (right - left) / 2;\n  MS(arr,temp,left,mid);\n  MS(arr,temp,mid + 1,right);\n  merge(arr,temp,left,mid,right);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 19,
        "startColumnNumber" : 92,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method implements the Generic Merge Sort\n * @param arr The array to be sorted\n * @param temp The copy of the actual array\n * @param left The first index of the array\n * @param right The last index of the arrayRecursively sorts the array in increasing order\n */\npublic static <T extends Comparable<T>>void MS(T[] arr,T[] temp,int left,int right){\n  if (left < right) {\n    int mid=left + (right - left) / 2;\n    MS(arr,temp,left,mid);\n    MS(arr,temp,mid + 1,right);\n    merge(arr,temp,left,mid,right);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 73,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 47
      },
      "nodeContext" : "merge(arr,temp,left,mid,right);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 20,
    "startColumnNumber" : 12,
    "endLineNumber" : 20,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 21,
    "startColumnNumber" : 22,
    "endLineNumber" : 21,
    "endColumnNumber" : 26
  }, {
    "charLength" : 4,
    "startLineNumber" : 21,
    "startColumnNumber" : 38,
    "endLineNumber" : 21,
    "endColumnNumber" : 42
  }, {
    "charLength" : 4,
    "startLineNumber" : 22,
    "startColumnNumber" : 26,
    "endLineNumber" : 22,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 24,
    "startColumnNumber" : 29,
    "endLineNumber" : 24,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}