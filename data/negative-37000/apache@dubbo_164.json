{
  "id" : 164,
  "expression" : "provider.getAllMethods()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/legacy/InvokeTelnetHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "provider.getAllMethods()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 98,
      "startColumnNumber" : 66,
      "endLineNumber" : 98,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 98,
        "startColumnNumber" : 42,
        "endLineNumber" : 98,
        "endColumnNumber" : 105
      },
      "nodeContext" : "findSameSignatureMethod(provider.getAllMethods(),method,list)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 98,
        "startColumnNumber" : 29,
        "endLineNumber" : 98,
        "endColumnNumber" : 105
      },
      "nodeContext" : "methodList=findSameSignatureMethod(provider.getAllMethods(),method,list)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 106
      },
      "nodeContext" : "List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1289,
        "startLineNumber" : 92,
        "startColumnNumber" : 80,
        "endLineNumber" : 121,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!isServiceMatch(service,provider)) {\n    continue;\n  }\n  selectedProvider=provider;\n  List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n  if (CollectionUtils.isEmpty(methodList)) {\n    break;\n  }\n  if (methodList.size() == 1) {\n    invokeMethod=methodList.get(0);\n  }\n else {\n    List<Method> matchMethods=findMatchMethods(methodList,list);\n    if (CollectionUtils.isEmpty(matchMethods)) {\n      break;\n    }\n    if (matchMethods.size() == 1) {\n      invokeMethod=matchMethods.get(0);\n    }\n else {\n      channel.setAttribute(INVOKE_METHOD_PROVIDER_KEY,provider);\n      channel.setAttribute(INVOKE_METHOD_LIST_KEY,matchMethods);\n      channel.setAttribute(INVOKE_MESSAGE_KEY,message);\n      printSelectMessage(buf,matchMethods);\n      return buf.toString();\n    }\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1357,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (ProviderModel provider : ApplicationModel.allProviderModels()) {\n  if (!isServiceMatch(service,provider)) {\n    continue;\n  }\n  selectedProvider=provider;\n  List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n  if (CollectionUtils.isEmpty(methodList)) {\n    break;\n  }\n  if (methodList.size() == 1) {\n    invokeMethod=methodList.get(0);\n  }\n else {\n    List<Method> matchMethods=findMatchMethods(methodList,list);\n    if (CollectionUtils.isEmpty(matchMethods)) {\n      break;\n    }\n    if (matchMethods.size() == 1) {\n      invokeMethod=matchMethods.get(0);\n    }\n else {\n      channel.setAttribute(INVOKE_METHOD_PROVIDER_KEY,provider);\n      channel.setAttribute(INVOKE_METHOD_LIST_KEY,matchMethods);\n      channel.setAttribute(INVOKE_MESSAGE_KEY,message);\n      printSelectMessage(buf,matchMethods);\n      return buf.toString();\n    }\n  }\n  break;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1381,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  ProviderModel provider : ApplicationModel.allProviderModels()) {\n    if (!isServiceMatch(service,provider)) {\n      continue;\n    }\n    selectedProvider=provider;\n    List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n    if (CollectionUtils.isEmpty(methodList)) {\n      break;\n    }\n    if (methodList.size() == 1) {\n      invokeMethod=methodList.get(0);\n    }\n else {\n      List<Method> matchMethods=findMatchMethods(methodList,list);\n      if (CollectionUtils.isEmpty(matchMethods)) {\n        break;\n      }\n      if (matchMethods.size() == 1) {\n        invokeMethod=matchMethods.get(0);\n      }\n else {\n        channel.setAttribute(INVOKE_METHOD_PROVIDER_KEY,provider);\n        channel.setAttribute(INVOKE_METHOD_LIST_KEY,matchMethods);\n        channel.setAttribute(INVOKE_MESSAGE_KEY,message);\n        printSelectMessage(buf,matchMethods);\n        return buf.toString();\n      }\n    }\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 121,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1629,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isInvokedSelectCommand(channel)) {\n  selectedProvider=(ProviderModel)channel.getAttribute(INVOKE_METHOD_PROVIDER_KEY);\n  invokeMethod=(Method)channel.getAttribute(SelectTelnetHandler.SELECT_METHOD_KEY);\n}\n else {\n  for (  ProviderModel provider : ApplicationModel.allProviderModels()) {\n    if (!isServiceMatch(service,provider)) {\n      continue;\n    }\n    selectedProvider=provider;\n    List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n    if (CollectionUtils.isEmpty(methodList)) {\n      break;\n    }\n    if (methodList.size() == 1) {\n      invokeMethod=methodList.get(0);\n    }\n else {\n      List<Method> matchMethods=findMatchMethods(methodList,list);\n      if (CollectionUtils.isEmpty(matchMethods)) {\n        break;\n      }\n      if (matchMethods.size() == 1) {\n        invokeMethod=matchMethods.get(0);\n      }\n else {\n        channel.setAttribute(INVOKE_METHOD_PROVIDER_KEY,provider);\n        channel.setAttribute(INVOKE_METHOD_LIST_KEY,matchMethods);\n        channel.setAttribute(INVOKE_MESSAGE_KEY,message);\n        printSelectMessage(buf,matchMethods);\n        return buf.toString();\n      }\n    }\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 148,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4351,
        "startLineNumber" : 56,
        "startColumnNumber" : 58,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isEmpty(message)) {\n    return \"Please input method name, eg: \\r\\ninvoke xxxMethod(1234, \\\"abcd\\\", {\\\"prop\\\" : \\\"value\\\"})\\r\\n\" + \"invoke XxxService.xxxMethod(1234, \\\"abcd\\\", {\\\"prop\\\" : \\\"value\\\"})\\r\\n\" + \"invoke com.xxx.XxxService.xxxMethod(1234, \\\"abcd\\\", {\\\"prop\\\" : \\\"value\\\"})\";\n  }\n  String service=(String)channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n  int i=message.indexOf(\"(\");\n  if (i < 0 || !message.endsWith(\")\")) {\n    return \"Invalid parameters, format: service.method(args)\";\n  }\n  String method=message.substring(0,i).trim();\n  String args=message.substring(i + 1,message.length() - 1).trim();\n  i=method.lastIndexOf(\".\");\n  if (i >= 0) {\n    service=method.substring(0,i).trim();\n    method=method.substring(i + 1).trim();\n  }\n  List<Object> list;\n  try {\n    list=JSON.parseArray(\"[\" + args + \"]\",Object.class);\n  }\n catch (  Throwable t) {\n    return \"Invalid json argument, cause: \" + t.getMessage();\n  }\n  StringBuilder buf=new StringBuilder();\n  Method invokeMethod=null;\n  ProviderModel selectedProvider=null;\n  if (isInvokedSelectCommand(channel)) {\n    selectedProvider=(ProviderModel)channel.getAttribute(INVOKE_METHOD_PROVIDER_KEY);\n    invokeMethod=(Method)channel.getAttribute(SelectTelnetHandler.SELECT_METHOD_KEY);\n  }\n else {\n    for (    ProviderModel provider : ApplicationModel.allProviderModels()) {\n      if (!isServiceMatch(service,provider)) {\n        continue;\n      }\n      selectedProvider=provider;\n      List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n      if (CollectionUtils.isEmpty(methodList)) {\n        break;\n      }\n      if (methodList.size() == 1) {\n        invokeMethod=methodList.get(0);\n      }\n else {\n        List<Method> matchMethods=findMatchMethods(methodList,list);\n        if (CollectionUtils.isEmpty(matchMethods)) {\n          break;\n        }\n        if (matchMethods.size() == 1) {\n          invokeMethod=matchMethods.get(0);\n        }\n else {\n          channel.setAttribute(INVOKE_METHOD_PROVIDER_KEY,provider);\n          channel.setAttribute(INVOKE_METHOD_LIST_KEY,matchMethods);\n          channel.setAttribute(INVOKE_MESSAGE_KEY,message);\n          printSelectMessage(buf,matchMethods);\n          return buf.toString();\n        }\n      }\n      break;\n    }\n  }\n  if (!StringUtils.isEmpty(service)) {\n    buf.append(\"Use default service \").append(service).append(\".\");\n  }\n  if (selectedProvider == null) {\n    buf.append(\"\\r\\nNo such service \").append(service);\n    return buf.toString();\n  }\n  if (invokeMethod == null) {\n    buf.append(\"\\r\\nNo such method \").append(method).append(\" in service \").append(service);\n    return buf.toString();\n  }\n  try {\n    Object[] array=realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes());\n    long start=System.currentTimeMillis();\n    AppResponse result=new AppResponse();\n    try {\n      Object o=invokeMethod.invoke(selectedProvider.getServiceInstance(),array);\n      result.setValue(o);\n    }\n catch (    Throwable t) {\n      result.setException(t);\n    }\n    long end=System.currentTimeMillis();\n    buf.append(\"\\r\\nresult: \");\n    buf.append(JSON.toJSONString(result.recreate()));\n    buf.append(\"\\r\\nelapsed: \");\n    buf.append(end - start);\n    buf.append(\" ms.\");\n  }\n catch (  Throwable t) {\n    return \"Failed to invoke method \" + invokeMethod.getName() + \", cause: \"+ StringUtils.toString(t);\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 496,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4454,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public String telnet(Channel channel,String message){\n  if (StringUtils.isEmpty(message)) {\n    return \"Please input method name, eg: \\r\\ninvoke xxxMethod(1234, \\\"abcd\\\", {\\\"prop\\\" : \\\"value\\\"})\\r\\n\" + \"invoke XxxService.xxxMethod(1234, \\\"abcd\\\", {\\\"prop\\\" : \\\"value\\\"})\\r\\n\" + \"invoke com.xxx.XxxService.xxxMethod(1234, \\\"abcd\\\", {\\\"prop\\\" : \\\"value\\\"})\";\n  }\n  String service=(String)channel.getAttribute(ChangeTelnetHandler.SERVICE_KEY);\n  int i=message.indexOf(\"(\");\n  if (i < 0 || !message.endsWith(\")\")) {\n    return \"Invalid parameters, format: service.method(args)\";\n  }\n  String method=message.substring(0,i).trim();\n  String args=message.substring(i + 1,message.length() - 1).trim();\n  i=method.lastIndexOf(\".\");\n  if (i >= 0) {\n    service=method.substring(0,i).trim();\n    method=method.substring(i + 1).trim();\n  }\n  List<Object> list;\n  try {\n    list=JSON.parseArray(\"[\" + args + \"]\",Object.class);\n  }\n catch (  Throwable t) {\n    return \"Invalid json argument, cause: \" + t.getMessage();\n  }\n  StringBuilder buf=new StringBuilder();\n  Method invokeMethod=null;\n  ProviderModel selectedProvider=null;\n  if (isInvokedSelectCommand(channel)) {\n    selectedProvider=(ProviderModel)channel.getAttribute(INVOKE_METHOD_PROVIDER_KEY);\n    invokeMethod=(Method)channel.getAttribute(SelectTelnetHandler.SELECT_METHOD_KEY);\n  }\n else {\n    for (    ProviderModel provider : ApplicationModel.allProviderModels()) {\n      if (!isServiceMatch(service,provider)) {\n        continue;\n      }\n      selectedProvider=provider;\n      List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n      if (CollectionUtils.isEmpty(methodList)) {\n        break;\n      }\n      if (methodList.size() == 1) {\n        invokeMethod=methodList.get(0);\n      }\n else {\n        List<Method> matchMethods=findMatchMethods(methodList,list);\n        if (CollectionUtils.isEmpty(matchMethods)) {\n          break;\n        }\n        if (matchMethods.size() == 1) {\n          invokeMethod=matchMethods.get(0);\n        }\n else {\n          channel.setAttribute(INVOKE_METHOD_PROVIDER_KEY,provider);\n          channel.setAttribute(INVOKE_METHOD_LIST_KEY,matchMethods);\n          channel.setAttribute(INVOKE_MESSAGE_KEY,message);\n          printSelectMessage(buf,matchMethods);\n          return buf.toString();\n        }\n      }\n      break;\n    }\n  }\n  if (!StringUtils.isEmpty(service)) {\n    buf.append(\"Use default service \").append(service).append(\".\");\n  }\n  if (selectedProvider == null) {\n    buf.append(\"\\r\\nNo such service \").append(service);\n    return buf.toString();\n  }\n  if (invokeMethod == null) {\n    buf.append(\"\\r\\nNo such method \").append(method).append(\" in service \").append(service);\n    return buf.toString();\n  }\n  try {\n    Object[] array=realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes());\n    long start=System.currentTimeMillis();\n    AppResponse result=new AppResponse();\n    try {\n      Object o=invokeMethod.invoke(selectedProvider.getServiceInstance(),array);\n      result.setValue(o);\n    }\n catch (    Throwable t) {\n      result.setException(t);\n    }\n    long end=System.currentTimeMillis();\n    buf.append(\"\\r\\nresult: \");\n    buf.append(JSON.toJSONString(result.recreate()));\n    buf.append(\"\\r\\nelapsed: \");\n    buf.append(end - start);\n    buf.append(\" ms.\");\n  }\n catch (  Throwable t) {\n    return \"Failed to invoke method \" + invokeMethod.getName() + \", cause: \"+ StringUtils.toString(t);\n  }\n  return buf.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 514,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 98,
        "endColumnNumber" : 106
      },
      "nodeContext" : "List<Method> methodList=findSameSignatureMethod(provider.getAllMethods(),method,list);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<org.apache.dubbo.rpc.model.MethodDescriptor>"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 98,
    "startColumnNumber" : 66,
    "endLineNumber" : 98,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}