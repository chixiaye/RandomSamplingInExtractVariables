{
  "id" : 136,
  "expression" : "requiredScope == null || requiredScope.isEmpty()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/common/security/oauthbearer/internals/unsecured/OAuthBearerValidationUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "requiredScope == null || requiredScope.isEmpty()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 173,
      "startColumnNumber" : 12,
      "endLineNumber" : 173,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 60
      },
      "nodeContext" : "if (requiredScope == null || requiredScope.isEmpty()) return OAuthBearerValidationResult.newSuccess();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 171,
        "startColumnNumber" : 112,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> tokenScope=token.scope();\n  if (requiredScope == null || requiredScope.isEmpty())   return OAuthBearerValidationResult.newSuccess();\n  for (  String requiredScopeElement : requiredScope) {\n    if (!tokenScope.contains(requiredScopeElement))     return OAuthBearerValidationResult.newFailure(String.format(\"The provided scope (%s) was mising a required scope (%s).  All required scope elements: %s\",String.valueOf(tokenScope),requiredScopeElement,requiredScope.toString()),requiredScope.toString(),null);\n  }\n  return OAuthBearerValidationResult.newSuccess();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1334,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 183,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Validate the given token's scope against the required scope. Every required scope element (if any) must exist in the provided token's scope for the validation to succeed.\n * @param token the required token for which the scope will to validate\n * @param requiredScope the optional required scope against which the given token's scope will be validated\n * @return the result of the validation\n */\npublic static OAuthBearerValidationResult validateScope(OAuthBearerToken token,List<String> requiredScope){\n  final Set<String> tokenScope=token.scope();\n  if (requiredScope == null || requiredScope.isEmpty())   return OAuthBearerValidationResult.newSuccess();\n  for (  String requiredScopeElement : requiredScope) {\n    if (!tokenScope.contains(requiredScopeElement))     return OAuthBearerValidationResult.newFailure(String.format(\"The provided scope (%s) was mising a required scope (%s).  All required scope elements: %s\",String.valueOf(tokenScope),requiredScopeElement,requiredScope.toString()),requiredScope.toString(),null);\n  }\n  return OAuthBearerValidationResult.newSuccess();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 80,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 60
      },
      "nodeContext" : "if (requiredScope == null || requiredScope.isEmpty()) return OAuthBearerValidationResult.newSuccess();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 173,
    "startColumnNumber" : 12,
    "endLineNumber" : 173,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}