{
  "id" : 331,
  "expression" : "ASM5",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/MethodProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ASM5",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 240,
      "startColumnNumber" : 48,
      "endLineNumber" : 240,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 240,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 13
      },
      "nodeContext" : "new ClassVisitor(ASM5){\n  @Override public MethodVisitor visitMethod(  int access,  String name,  String desc,  String signature,  String[] exceptions){\n    boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n    if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n      return new MethodFinder(methodSignature);\n    }\n    return super.visitMethod(access,name,desc,signature,exceptions);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 83,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 651,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 17
      },
      "nodeContext" : "classReader.accept(new ClassVisitor(ASM5){\n  @Override public MethodVisitor visitMethod(  int access,  String name,  String desc,  String signature,  String[] exceptions){\n    boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n    if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n      return new MethodFinder(methodSignature);\n    }\n    return super.visitMethod(access,name,desc,signature,exceptions);\n  }\n}\n,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 87,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 652,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 18
      },
      "nodeContext" : "classReader.accept(new ClassVisitor(ASM5){\n  @Override public MethodVisitor visitMethod(  int access,  String name,  String desc,  String signature,  String[] exceptions){\n    boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n    if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n      return new MethodFinder(methodSignature);\n    }\n    return super.visitMethod(access,name,desc,signature,exceptions);\n  }\n}\n,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 88,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1124,
        "startLineNumber" : 233,
        "startColumnNumber" : 67,
        "endLineNumber" : 254,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (cache.containsKey(bridgeMethod)) {\n    return cache.get(bridgeMethod);\n  }\n  ClassReader classReader=new ClassReader(aClass.getName());\n  final MethodSignature methodSignature=new MethodSignature();\n  classReader.accept(new ClassVisitor(ASM5){\n    @Override public MethodVisitor visitMethod(    int access,    String name,    String desc,    String signature,    String[] exceptions){\n      boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n      if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n        return new MethodFinder(methodSignature);\n      }\n      return super.visitMethod(access,name,desc,signature,exceptions);\n    }\n  }\n,0);\n  Method method=aClass.getDeclaredMethod(methodSignature.name,methodSignature.getParameterTypes());\n  cache.put(bridgeMethod,method);\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 233,
        "startColumnNumber" : 8,
        "endLineNumber" : 256,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bridgeMethod.isBridge() && bridgeMethod.isSynthetic()) {\n  if (cache.containsKey(bridgeMethod)) {\n    return cache.get(bridgeMethod);\n  }\n  ClassReader classReader=new ClassReader(aClass.getName());\n  final MethodSignature methodSignature=new MethodSignature();\n  classReader.accept(new ClassVisitor(ASM5){\n    @Override public MethodVisitor visitMethod(    int access,    String name,    String desc,    String signature,    String[] exceptions){\n      boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n      if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n        return new MethodFinder(methodSignature);\n      }\n      return super.visitMethod(access,name,desc,signature,exceptions);\n    }\n  }\n,0);\n  Method method=aClass.getDeclaredMethod(methodSignature.name,methodSignature.getParameterTypes());\n  cache.put(bridgeMethod,method);\n  return method;\n}\n else {\n  return bridgeMethod;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 153,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1249,
        "startLineNumber" : 232,
        "startColumnNumber" : 136,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (bridgeMethod.isBridge() && bridgeMethod.isSynthetic()) {\n    if (cache.containsKey(bridgeMethod)) {\n      return cache.get(bridgeMethod);\n    }\n    ClassReader classReader=new ClassReader(aClass.getName());\n    final MethodSignature methodSignature=new MethodSignature();\n    classReader.accept(new ClassVisitor(ASM5){\n      @Override public MethodVisitor visitMethod(      int access,      String name,      String desc,      String signature,      String[] exceptions){\n        boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n        if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n          return new MethodFinder(methodSignature);\n        }\n        return super.visitMethod(access,name,desc,signature,exceptions);\n      }\n    }\n,0);\n    Method method=aClass.getDeclaredMethod(methodSignature.name,methodSignature.getParameterTypes());\n    cache.put(bridgeMethod,method);\n    return method;\n  }\n else {\n    return bridgeMethod;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1710,
        "startLineNumber" : 222,
        "startColumnNumber" : 4,
        "endLineNumber" : 257,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Finds generic method for the given bridge method.\n * @param bridgeMethod the bridge method\n * @param aClass       the type where the bridge method is declared\n * @return generic method\n * @throws IOException\n * @throws NoSuchMethodException\n * @throws ClassNotFoundException\n */\npublic Method unbride(final Method bridgeMethod,Class<?> aClass) throws IOException, NoSuchMethodException, ClassNotFoundException {\n  if (bridgeMethod.isBridge() && bridgeMethod.isSynthetic()) {\n    if (cache.containsKey(bridgeMethod)) {\n      return cache.get(bridgeMethod);\n    }\n    ClassReader classReader=new ClassReader(aClass.getName());\n    final MethodSignature methodSignature=new MethodSignature();\n    classReader.accept(new ClassVisitor(ASM5){\n      @Override public MethodVisitor visitMethod(      int access,      String name,      String desc,      String signature,      String[] exceptions){\n        boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n        if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n          return new MethodFinder(methodSignature);\n        }\n        return super.visitMethod(access,name,desc,signature,exceptions);\n      }\n    }\n,0);\n    Method method=aClass.getDeclaredMethod(methodSignature.name,methodSignature.getParameterTypes());\n    cache.put(bridgeMethod,method);\n    return method;\n  }\n else {\n    return bridgeMethod;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 240,
        "startColumnNumber" : 31,
        "endLineNumber" : 249,
        "endColumnNumber" : 13
      },
      "nodeContext" : "new ClassVisitor(ASM5){\n  @Override public MethodVisitor visitMethod(  int access,  String name,  String desc,  String signature,  String[] exceptions){\n    boolean bridge=(access & ACC_BRIDGE) != 0 && (access & ACC_SYNTHETIC) != 0;\n    if (bridge && bridgeMethod.getName().equals(name) && getParameterCount(desc) == bridgeMethod.getParameterTypes().length) {\n      return new MethodFinder(methodSignature);\n    }\n    return super.visitMethod(access,name,desc,signature,exceptions);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 83,
      "astHeight" : 11
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 240,
    "startColumnNumber" : 48,
    "endLineNumber" : 240,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}