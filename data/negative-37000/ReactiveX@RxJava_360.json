{
  "id" : 360,
  "expression" : "\"three\"",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"three\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 109,
      "startColumnNumber" : 77,
      "endLineNumber" : 109,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 109,
        "startColumnNumber" : 36,
        "endLineNumber" : 109,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new TestObservable<String>(\"one\",\"two\",\"three\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 109,
        "startColumnNumber" : 31,
        "endLineNumber" : 109,
        "endColumnNumber" : 85
      },
      "nodeContext" : "o1=new TestObservable<String>(\"one\",\"two\",\"three\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 86
      },
      "nodeContext" : "TestObservable<String> o1=new TestObservable<String>(\"one\",\"two\",\"three\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 106,
        "startColumnNumber" : 40,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  TestObservable<String> o1=new TestObservable<String>(\"one\",\"two\",\"three\");\n  TestObservable<String> o2=new TestObservable<String>(\"four\",\"five\",\"six\");\n  Observable.concat(Observable.create(o1),Observable.create(o2)).subscribe(NbpObserver);\n  try {\n    o1.t.join();\n    o2.t.join();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"failed waiting on threads\");\n  }\n  InOrder inOrder=inOrder(NbpObserver);\n  inOrder.verify(NbpObserver,times(1)).onNext(\"one\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"two\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"three\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"four\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"five\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"six\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Simple concat of 2 asynchronous observables ensuring it emits in correct order.\n */\n@Test public void testSimpleAsyncConcat(){\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  TestObservable<String> o1=new TestObservable<String>(\"one\",\"two\",\"three\");\n  TestObservable<String> o2=new TestObservable<String>(\"four\",\"five\",\"six\");\n  Observable.concat(Observable.create(o1),Observable.create(o2)).subscribe(NbpObserver);\n  try {\n    o1.t.join();\n    o2.t.join();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"failed waiting on threads\");\n  }\n  InOrder inOrder=inOrder(NbpObserver);\n  inOrder.verify(NbpObserver,times(1)).onNext(\"one\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"two\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"three\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"four\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"five\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"six\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 109,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 86
      },
      "nodeContext" : "TestObservable<String> o1=new TestObservable<String>(\"one\",\"two\",\"three\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"three\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 125,
      "startColumnNumber" : 53,
      "endLineNumber" : 125,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 61
      },
      "nodeContext" : "inOrder.verify(NbpObserver,times(1)).onNext(\"three\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 62
      },
      "nodeContext" : "inOrder.verify(NbpObserver,times(1)).onNext(\"three\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1017,
        "startLineNumber" : 106,
        "startColumnNumber" : 40,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  TestObservable<String> o1=new TestObservable<String>(\"one\",\"two\",\"three\");\n  TestObservable<String> o2=new TestObservable<String>(\"four\",\"five\",\"six\");\n  Observable.concat(Observable.create(o1),Observable.create(o2)).subscribe(NbpObserver);\n  try {\n    o1.t.join();\n    o2.t.join();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"failed waiting on threads\");\n  }\n  InOrder inOrder=inOrder(NbpObserver);\n  inOrder.verify(NbpObserver,times(1)).onNext(\"one\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"two\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"three\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"four\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"five\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"six\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Simple concat of 2 asynchronous observables ensuring it emits in correct order.\n */\n@Test public void testSimpleAsyncConcat(){\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  TestObservable<String> o1=new TestObservable<String>(\"one\",\"two\",\"three\");\n  TestObservable<String> o2=new TestObservable<String>(\"four\",\"five\",\"six\");\n  Observable.concat(Observable.create(o1),Observable.create(o2)).subscribe(NbpObserver);\n  try {\n    o1.t.join();\n    o2.t.join();\n  }\n catch (  Throwable e) {\n    throw new RuntimeException(\"failed waiting on threads\");\n  }\n  InOrder inOrder=inOrder(NbpObserver);\n  inOrder.verify(NbpObserver,times(1)).onNext(\"one\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"two\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"three\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"four\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"five\");\n  inOrder.verify(NbpObserver,times(1)).onNext(\"six\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 167,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 62
      },
      "nodeContext" : "inOrder.verify(NbpObserver,times(1)).onNext(\"three\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 109,
    "startColumnNumber" : 77,
    "endLineNumber" : 109,
    "endColumnNumber" : 84
  }, {
    "charLength" : 7,
    "startLineNumber" : 125,
    "startColumnNumber" : 53,
    "endLineNumber" : 125,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}