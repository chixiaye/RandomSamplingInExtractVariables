{
  "id" : 389,
  "expression" : "IllegalArgumentException.class",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/domain/values/ApplicationIdTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "IllegalArgumentException.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 30,
      "startColumnNumber" : 70,
      "endLineNumber" : 30,
      "endColumnNumber" : 100
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 101
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 93
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 94
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 29,
        "startColumnNumber" : 29,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n  assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void invariants(){\n  assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n  assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 39,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 101
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.IllegalArgumentException>"
  }, {
    "nodeContext" : "IllegalArgumentException.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 32,
      "startColumnNumber" : 68,
      "endLineNumber" : 32,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 91
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 92
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 29,
        "startColumnNumber" : 29,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n  assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 28,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void invariants(){\n  assertThatThrownBy(() -> ApplicationId.of(null)).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n  assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class).hasMessage(\"'value' must have text\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 39,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 32,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertThatThrownBy(() -> ApplicationId.of(\"\")).isInstanceOf(IllegalArgumentException.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.IllegalArgumentException>"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 30,
    "startColumnNumber" : 70,
    "endLineNumber" : 30,
    "endColumnNumber" : 100
  }, {
    "charLength" : 30,
    "startLineNumber" : 32,
    "startColumnNumber" : 68,
    "endLineNumber" : 32,
    "endColumnNumber" : 98
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}