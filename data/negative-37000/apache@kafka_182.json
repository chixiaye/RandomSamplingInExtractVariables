{
  "id" : 182,
  "expression" : "this",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/main/java/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 16
      },
      "nodeContext" : "this.out",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 22
      },
      "nodeContext" : "this.out=out",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 23
      },
      "nodeContext" : "this.out=out;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 73,
        "startColumnNumber" : 153,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.out=out;\n  compressor=LZ4Factory.fastestInstance().fastCompressor();\n  checksum=XXHashFactory.fastestInstance().hash32();\n  this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum;\n  bd=new BD(blockSize);\n  flg=new FLG(blockChecksum);\n  bufferOffset=0;\n  maxBlockSize=bd.getBlockMaximumSize();\n  buffer=new byte[maxBlockSize];\n  compressedBuffer=new byte[compressor.maxCompressedLength(maxBlockSize)];\n  finished=false;\n  writeHeader();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1393,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create a new  {@link OutputStream} that will compress data using the LZ4 algorithm.\n * @param out The output stream to compress\n * @param blockSize Default: 4. The block size used during compression. 4=64kb, 5=256kb, 6=1mb, 7=4mb. All othervalues will generate an exception\n * @param blockChecksum Default: false. When true, a XXHash32 checksum is computed and appended to the stream forevery block of data\n * @param useBrokenFlagDescriptorChecksum Default: false. When true, writes an incorrect FrameDescriptor checksumcompatible with older kafka clients.\n * @throws IOException\n */\npublic KafkaLZ4BlockOutputStream(OutputStream out,int blockSize,boolean blockChecksum,boolean useBrokenFlagDescriptorChecksum) throws IOException {\n  this.out=out;\n  compressor=LZ4Factory.fastestInstance().fastCompressor();\n  checksum=XXHashFactory.fastestInstance().hash32();\n  this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum;\n  bd=new BD(blockSize);\n  flg=new FLG(blockChecksum);\n  bufferOffset=0;\n  maxBlockSize=bd.getBlockMaximumSize();\n  buffer=new byte[maxBlockSize];\n  compressedBuffer=new byte[compressor.maxCompressedLength(maxBlockSize)];\n  finished=false;\n  writeHeader();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 23
      },
      "nodeContext" : "this.out=out;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream"
  }, {
    "nodeContext" : "this",
    "nodeType" : "ThisExpression",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 77,
      "startColumnNumber" : 8,
      "endLineNumber" : 77,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 44
      },
      "nodeContext" : "this.useBrokenFlagDescriptorChecksum",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 78
      },
      "nodeContext" : "this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 558,
        "startLineNumber" : 73,
        "startColumnNumber" : 153,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.out=out;\n  compressor=LZ4Factory.fastestInstance().fastCompressor();\n  checksum=XXHashFactory.fastestInstance().hash32();\n  this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum;\n  bd=new BD(blockSize);\n  flg=new FLG(blockChecksum);\n  bufferOffset=0;\n  maxBlockSize=bd.getBlockMaximumSize();\n  buffer=new byte[maxBlockSize];\n  compressedBuffer=new byte[compressor.maxCompressedLength(maxBlockSize)];\n  finished=false;\n  writeHeader();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1393,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Create a new  {@link OutputStream} that will compress data using the LZ4 algorithm.\n * @param out The output stream to compress\n * @param blockSize Default: 4. The block size used during compression. 4=64kb, 5=256kb, 6=1mb, 7=4mb. All othervalues will generate an exception\n * @param blockChecksum Default: false. When true, a XXHash32 checksum is computed and appended to the stream forevery block of data\n * @param useBrokenFlagDescriptorChecksum Default: false. When true, writes an incorrect FrameDescriptor checksumcompatible with older kafka clients.\n * @throws IOException\n */\npublic KafkaLZ4BlockOutputStream(OutputStream out,int blockSize,boolean blockChecksum,boolean useBrokenFlagDescriptorChecksum) throws IOException {\n  this.out=out;\n  compressor=LZ4Factory.fastestInstance().fastCompressor();\n  checksum=XXHashFactory.fastestInstance().hash32();\n  this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum;\n  bd=new BD(blockSize);\n  flg=new FLG(blockChecksum);\n  bufferOffset=0;\n  maxBlockSize=bd.getBlockMaximumSize();\n  buffer=new byte[maxBlockSize];\n  compressedBuffer=new byte[compressor.maxCompressedLength(maxBlockSize)];\n  finished=false;\n  writeHeader();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 79
      },
      "nodeContext" : "this.useBrokenFlagDescriptorChecksum=useBrokenFlagDescriptorChecksum;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 77,
    "startColumnNumber" : 8,
    "endLineNumber" : 77,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}