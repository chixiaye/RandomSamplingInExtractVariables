{
  "id" : 26,
  "expression" : "5",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/FordFulkersonDfsSolverAdjacencyList.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 90,
      "startColumnNumber" : 25,
      "endLineNumber" : 90,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 27
      },
      "nodeContext" : "solver.addEdge(1,4,5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(1,4,5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 75,
        "startColumnNumber" : 43,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void exampleFromSlides2(){\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(1,4,5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 91,
      "startColumnNumber" : 22,
      "endLineNumber" : 91,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 27
      },
      "nodeContext" : "solver.addEdge(1,5,6)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(1,5,6);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 75,
        "startColumnNumber" : 43,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void exampleFromSlides2(){\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(1,5,6);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 99,
      "startColumnNumber" : 22,
      "endLineNumber" : 99,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 27
      },
      "nodeContext" : "solver.addEdge(4,5,8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(4,5,8);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 75,
        "startColumnNumber" : 43,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void exampleFromSlides2(){\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(4,5,8);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 102,
      "startColumnNumber" : 19,
      "endLineNumber" : 102,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 27
      },
      "nodeContext" : "solver.addEdge(5,8,3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(5,8,3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 75,
        "startColumnNumber" : 43,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1075,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void exampleFromSlides2(){\n  int n=12;\n  int s=n - 2;\n  int t=n - 1;\n  FordFulkersonDfsSolverAdjacencyList solver;\n  solver=new FordFulkersonDfsSolverAdjacencyList(n,s,t);\n  solver.addEdge(s,1,2);\n  solver.addEdge(s,2,1);\n  solver.addEdge(s,0,7);\n  solver.addEdge(0,3,2);\n  solver.addEdge(0,4,4);\n  solver.addEdge(1,4,5);\n  solver.addEdge(1,5,6);\n  solver.addEdge(2,3,4);\n  solver.addEdge(2,7,8);\n  solver.addEdge(3,6,7);\n  solver.addEdge(3,7,1);\n  solver.addEdge(4,5,8);\n  solver.addEdge(4,8,3);\n  solver.addEdge(5,8,3);\n  solver.addEdge(6,t,1);\n  solver.addEdge(7,t,3);\n  solver.addEdge(8,t,4);\n  System.out.println(solver.getMaxFlow());\n  List<Edge>[] g=solver.getGraph();\n  for (  List<Edge> edges : g) {\n    for (    Edge e : edges) {\n      if (e.to == s || e.from == t)       continue;\n      if (e.from == s || e.to == t || e.from < e.to)       System.out.println(e.toString(s,t));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 28
      },
      "nodeContext" : "solver.addEdge(5,8,3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 90,
    "startColumnNumber" : 25,
    "endLineNumber" : 90,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 91,
    "startColumnNumber" : 22,
    "endLineNumber" : 91,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 99,
    "startColumnNumber" : 22,
    "endLineNumber" : 99,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 102,
    "startColumnNumber" : 19,
    "endLineNumber" : 102,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}