{
  "id" : 203,
  "expression" : "\"Eggs\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-jdbc/src/test/java/org/springframework/jdbc/object/StoredProcedureTests.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Eggs\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 317,
      "startColumnNumber" : 44,
      "endLineNumber" : 317,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 317,
        "startColumnNumber" : 2,
        "endLineNumber" : 317,
        "endColumnNumber" : 51
      },
      "nodeContext" : "given(resultSet2.getObject(2)).willReturn(\"Eggs\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 317,
        "startColumnNumber" : 2,
        "endLineNumber" : 317,
        "endColumnNumber" : 52
      },
      "nodeContext" : "given(resultSet2.getObject(2)).willReturn(\"Eggs\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 303,
        "startColumnNumber" : 73,
        "endLineNumber" : 349,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ResultSet resultSet1=mock(ResultSet.class);\n  given(resultSet1.next()).willReturn(true,true,false);\n  given(resultSet1.getString(2)).willReturn(\"Foo\",\"Bar\");\n  ResultSetMetaData resultSetMetaData=mock(ResultSetMetaData.class);\n  given(resultSetMetaData.getColumnCount()).willReturn(2);\n  given(resultSetMetaData.getColumnLabel(1)).willReturn(\"spam\");\n  given(resultSetMetaData.getColumnLabel(2)).willReturn(\"eggs\");\n  ResultSet resultSet2=mock(ResultSet.class);\n  given(resultSet2.getMetaData()).willReturn(resultSetMetaData);\n  given(resultSet2.next()).willReturn(true,false);\n  given(resultSet2.getObject(1)).willReturn(\"Spam\");\n  given(resultSet2.getObject(2)).willReturn(\"Eggs\");\n  given(callableStatement.execute()).willReturn(true);\n  given(callableStatement.getUpdateCount()).willReturn(-1);\n  given(callableStatement.getResultSet()).willReturn(resultSet1,resultSet2);\n  given(callableStatement.getMoreResults()).willReturn(true,false,false);\n  given(callableStatement.getUpdateCount()).willReturn(-1,-1,0,-1);\n  given(connection.prepareCall(\"{call \" + StoredProcedureWithResultSetMapped.SQL + \"()}\")).willReturn(callableStatement);\n  StoredProcedureWithResultSetMapped sproc=new StoredProcedureWithResultSetMapped(dataSource);\n  Map<String,Object> res=sproc.execute();\n  assertEquals(\"incorrect number of returns\",3,res.size());\n  List<String> rs1=(List<String>)res.get(\"rs\");\n  assertEquals(2,rs1.size());\n  assertEquals(\"Foo\",rs1.get(0));\n  assertEquals(\"Bar\",rs1.get(1));\n  List<Object> rs2=(List<Object>)res.get(\"#result-set-2\");\n  assertEquals(1,rs2.size());\n  Object o2=rs2.get(0);\n  assertTrue(\"wron type returned for result set 2\",o2 instanceof Map);\n  Map<String,String> m2=(Map<String,String>)o2;\n  assertEquals(\"Spam\",m2.get(\"spam\"));\n  assertEquals(\"Eggs\",m2.get(\"eggs\"));\n  Number n=(Number)res.get(\"#update-count-1\");\n  assertEquals(\"wrong update count\",0,n.intValue());\n  verify(resultSet1).close();\n  verify(resultSet2).close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 371,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2131,
        "startLineNumber" : 301,
        "startColumnNumber" : 1,
        "endLineNumber" : 349,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings(\"unchecked\") public void testStoredProcedureWithUndeclaredResults() throws Exception {\n  ResultSet resultSet1=mock(ResultSet.class);\n  given(resultSet1.next()).willReturn(true,true,false);\n  given(resultSet1.getString(2)).willReturn(\"Foo\",\"Bar\");\n  ResultSetMetaData resultSetMetaData=mock(ResultSetMetaData.class);\n  given(resultSetMetaData.getColumnCount()).willReturn(2);\n  given(resultSetMetaData.getColumnLabel(1)).willReturn(\"spam\");\n  given(resultSetMetaData.getColumnLabel(2)).willReturn(\"eggs\");\n  ResultSet resultSet2=mock(ResultSet.class);\n  given(resultSet2.getMetaData()).willReturn(resultSetMetaData);\n  given(resultSet2.next()).willReturn(true,false);\n  given(resultSet2.getObject(1)).willReturn(\"Spam\");\n  given(resultSet2.getObject(2)).willReturn(\"Eggs\");\n  given(callableStatement.execute()).willReturn(true);\n  given(callableStatement.getUpdateCount()).willReturn(-1);\n  given(callableStatement.getResultSet()).willReturn(resultSet1,resultSet2);\n  given(callableStatement.getMoreResults()).willReturn(true,false,false);\n  given(callableStatement.getUpdateCount()).willReturn(-1,-1,0,-1);\n  given(connection.prepareCall(\"{call \" + StoredProcedureWithResultSetMapped.SQL + \"()}\")).willReturn(callableStatement);\n  StoredProcedureWithResultSetMapped sproc=new StoredProcedureWithResultSetMapped(dataSource);\n  Map<String,Object> res=sproc.execute();\n  assertEquals(\"incorrect number of returns\",3,res.size());\n  List<String> rs1=(List<String>)res.get(\"rs\");\n  assertEquals(2,rs1.size());\n  assertEquals(\"Foo\",rs1.get(0));\n  assertEquals(\"Bar\",rs1.get(1));\n  List<Object> rs2=(List<Object>)res.get(\"#result-set-2\");\n  assertEquals(1,rs2.size());\n  Object o2=rs2.get(0);\n  assertTrue(\"wron type returned for result set 2\",o2 instanceof Map);\n  Map<String,String> m2=(Map<String,String>)o2;\n  assertEquals(\"Spam\",m2.get(\"spam\"));\n  assertEquals(\"Eggs\",m2.get(\"eggs\"));\n  Number n=(Number)res.get(\"#update-count-1\");\n  assertEquals(\"wrong update count\",0,n.intValue());\n  verify(resultSet1).close();\n  verify(resultSet2).close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 317,
        "startColumnNumber" : 2,
        "endLineNumber" : 317,
        "endColumnNumber" : 52
      },
      "nodeContext" : "given(resultSet2.getObject(2)).willReturn(\"Eggs\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"Eggs\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 343,
      "startColumnNumber" : 15,
      "endLineNumber" : 343,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 343,
        "startColumnNumber" : 2,
        "endLineNumber" : 343,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"Eggs\",m2.get(\"eggs\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 343,
        "startColumnNumber" : 2,
        "endLineNumber" : 343,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(\"Eggs\",m2.get(\"eggs\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 303,
        "startColumnNumber" : 73,
        "endLineNumber" : 349,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ResultSet resultSet1=mock(ResultSet.class);\n  given(resultSet1.next()).willReturn(true,true,false);\n  given(resultSet1.getString(2)).willReturn(\"Foo\",\"Bar\");\n  ResultSetMetaData resultSetMetaData=mock(ResultSetMetaData.class);\n  given(resultSetMetaData.getColumnCount()).willReturn(2);\n  given(resultSetMetaData.getColumnLabel(1)).willReturn(\"spam\");\n  given(resultSetMetaData.getColumnLabel(2)).willReturn(\"eggs\");\n  ResultSet resultSet2=mock(ResultSet.class);\n  given(resultSet2.getMetaData()).willReturn(resultSetMetaData);\n  given(resultSet2.next()).willReturn(true,false);\n  given(resultSet2.getObject(1)).willReturn(\"Spam\");\n  given(resultSet2.getObject(2)).willReturn(\"Eggs\");\n  given(callableStatement.execute()).willReturn(true);\n  given(callableStatement.getUpdateCount()).willReturn(-1);\n  given(callableStatement.getResultSet()).willReturn(resultSet1,resultSet2);\n  given(callableStatement.getMoreResults()).willReturn(true,false,false);\n  given(callableStatement.getUpdateCount()).willReturn(-1,-1,0,-1);\n  given(connection.prepareCall(\"{call \" + StoredProcedureWithResultSetMapped.SQL + \"()}\")).willReturn(callableStatement);\n  StoredProcedureWithResultSetMapped sproc=new StoredProcedureWithResultSetMapped(dataSource);\n  Map<String,Object> res=sproc.execute();\n  assertEquals(\"incorrect number of returns\",3,res.size());\n  List<String> rs1=(List<String>)res.get(\"rs\");\n  assertEquals(2,rs1.size());\n  assertEquals(\"Foo\",rs1.get(0));\n  assertEquals(\"Bar\",rs1.get(1));\n  List<Object> rs2=(List<Object>)res.get(\"#result-set-2\");\n  assertEquals(1,rs2.size());\n  Object o2=rs2.get(0);\n  assertTrue(\"wron type returned for result set 2\",o2 instanceof Map);\n  Map<String,String> m2=(Map<String,String>)o2;\n  assertEquals(\"Spam\",m2.get(\"spam\"));\n  assertEquals(\"Eggs\",m2.get(\"eggs\"));\n  Number n=(Number)res.get(\"#update-count-1\");\n  assertEquals(\"wrong update count\",0,n.intValue());\n  verify(resultSet1).close();\n  verify(resultSet2).close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 371,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2131,
        "startLineNumber" : 301,
        "startColumnNumber" : 1,
        "endLineNumber" : 349,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings(\"unchecked\") public void testStoredProcedureWithUndeclaredResults() throws Exception {\n  ResultSet resultSet1=mock(ResultSet.class);\n  given(resultSet1.next()).willReturn(true,true,false);\n  given(resultSet1.getString(2)).willReturn(\"Foo\",\"Bar\");\n  ResultSetMetaData resultSetMetaData=mock(ResultSetMetaData.class);\n  given(resultSetMetaData.getColumnCount()).willReturn(2);\n  given(resultSetMetaData.getColumnLabel(1)).willReturn(\"spam\");\n  given(resultSetMetaData.getColumnLabel(2)).willReturn(\"eggs\");\n  ResultSet resultSet2=mock(ResultSet.class);\n  given(resultSet2.getMetaData()).willReturn(resultSetMetaData);\n  given(resultSet2.next()).willReturn(true,false);\n  given(resultSet2.getObject(1)).willReturn(\"Spam\");\n  given(resultSet2.getObject(2)).willReturn(\"Eggs\");\n  given(callableStatement.execute()).willReturn(true);\n  given(callableStatement.getUpdateCount()).willReturn(-1);\n  given(callableStatement.getResultSet()).willReturn(resultSet1,resultSet2);\n  given(callableStatement.getMoreResults()).willReturn(true,false,false);\n  given(callableStatement.getUpdateCount()).willReturn(-1,-1,0,-1);\n  given(connection.prepareCall(\"{call \" + StoredProcedureWithResultSetMapped.SQL + \"()}\")).willReturn(callableStatement);\n  StoredProcedureWithResultSetMapped sproc=new StoredProcedureWithResultSetMapped(dataSource);\n  Map<String,Object> res=sproc.execute();\n  assertEquals(\"incorrect number of returns\",3,res.size());\n  List<String> rs1=(List<String>)res.get(\"rs\");\n  assertEquals(2,rs1.size());\n  assertEquals(\"Foo\",rs1.get(0));\n  assertEquals(\"Bar\",rs1.get(1));\n  List<Object> rs2=(List<Object>)res.get(\"#result-set-2\");\n  assertEquals(1,rs2.size());\n  Object o2=rs2.get(0);\n  assertTrue(\"wron type returned for result set 2\",o2 instanceof Map);\n  Map<String,String> m2=(Map<String,String>)o2;\n  assertEquals(\"Spam\",m2.get(\"spam\"));\n  assertEquals(\"Eggs\",m2.get(\"eggs\"));\n  Number n=(Number)res.get(\"#update-count-1\");\n  assertEquals(\"wrong update count\",0,n.intValue());\n  verify(resultSet1).close();\n  verify(resultSet2).close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 343,
        "startColumnNumber" : 2,
        "endLineNumber" : 343,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(\"Eggs\",m2.get(\"eggs\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 317,
    "startColumnNumber" : 44,
    "endLineNumber" : 317,
    "endColumnNumber" : 50
  }, {
    "charLength" : 6,
    "startLineNumber" : 343,
    "startColumnNumber" : 15,
    "endLineNumber" : 343,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}