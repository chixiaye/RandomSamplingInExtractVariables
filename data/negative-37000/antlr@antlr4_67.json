{
  "id" : 67,
  "expression" : "SHOW_CONFIG_STATS",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestPerformance.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SHOW_CONFIG_STATS",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1035,
      "startColumnNumber" : 20,
      "endLineNumber" : 1035,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 1035,
        "startColumnNumber" : 16,
        "endLineNumber" : 1061,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (SHOW_CONFIG_STATS) {\n  for (  DFAState state : dfa.states.keySet()) {\n    if (state.configs.size() >= contextsInDFAState.length) {\n      contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n    }\n    if (state.isAcceptState) {\n      boolean hasGlobal=false;\n      for (      ATNConfig config : state.configs) {\n        if (config.reachesIntoOuterContext > 0) {\n          globalConfigCount++;\n          hasGlobal=true;\n        }\n else {\n          localConfigCount++;\n        }\n      }\n      if (hasGlobal) {\n        globalDfaCount++;\n      }\n else {\n        localDfaCount++;\n      }\n    }\n    contextsInDFAState[state.configs.size()]++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 1029,
        "startColumnNumber" : 59,
        "endLineNumber" : 1062,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  DFA dfa=decisionToDFA[i];\n  if (dfa == null) {\n    continue;\n  }\n  if (SHOW_CONFIG_STATS) {\n    for (    DFAState state : dfa.states.keySet()) {\n      if (state.configs.size() >= contextsInDFAState.length) {\n        contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n      }\n      if (state.isAcceptState) {\n        boolean hasGlobal=false;\n        for (        ATNConfig config : state.configs) {\n          if (config.reachesIntoOuterContext > 0) {\n            globalConfigCount++;\n            hasGlobal=true;\n          }\n else {\n            localConfigCount++;\n          }\n        }\n        if (hasGlobal) {\n          globalDfaCount++;\n        }\n else {\n          localDfaCount++;\n        }\n      }\n      contextsInDFAState[state.configs.size()]++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1415,
        "startLineNumber" : 1029,
        "startColumnNumber" : 12,
        "endLineNumber" : 1062,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < decisionToDFA.length; i++) {\n  DFA dfa=decisionToDFA[i];\n  if (dfa == null) {\n    continue;\n  }\n  if (SHOW_CONFIG_STATS) {\n    for (    DFAState state : dfa.states.keySet()) {\n      if (state.configs.size() >= contextsInDFAState.length) {\n        contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n      }\n      if (state.isAcceptState) {\n        boolean hasGlobal=false;\n        for (        ATNConfig config : state.configs) {\n          if (config.reachesIntoOuterContext > 0) {\n            globalConfigCount++;\n            hasGlobal=true;\n          }\n else {\n            localConfigCount++;\n          }\n        }\n        if (hasGlobal) {\n          globalDfaCount++;\n        }\n else {\n          localDfaCount++;\n        }\n      }\n      contextsInDFAState[state.configs.size()]++;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6092,
        "startLineNumber" : 921,
        "startColumnNumber" : 46,
        "endLineNumber" : 1075,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n  Parser parser=sharedParsers[index];\n  final ParserATNSimulator interpreter=parser.getInterpreter();\n  final DFA[] decisionToDFA=interpreter.decisionToDFA;\n  if (SHOW_DFA_STATE_STATS) {\n    int states=0;\n    int configs=0;\n    Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      states+=dfa.states.size();\n      for (      DFAState state : dfa.states.values()) {\n        configs+=state.configs.size();\n        uniqueConfigs.addAll(state.configs);\n      }\n    }\n    System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n    if (DETAILED_DFA_STATE_STATS) {\n      if (COMPUTE_TRANSITION_STATS) {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n      }\n else {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n      }\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null || dfa.states.isEmpty()) {\n          continue;\n        }\n        int decisionConfigs=0;\n        for (        DFAState state : dfa.states.values()) {\n          decisionConfigs+=state.configs.size();\n        }\n        String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n        long calls=0;\n        long fullContextCalls=0;\n        long nonSllCalls=0;\n        long transitions=0;\n        long computedTransitions=0;\n        long fullContextTransitions=0;\n        double lookahead=0;\n        double fullContextLookahead=0;\n        String formatString;\n        if (COMPUTE_TRANSITION_STATS) {\n          for (          long[] data : decisionInvocationsPerFile[currentPass]) {\n            calls+=data[i];\n          }\n          for (          long[] data : fullContextFallbackPerFile[currentPass]) {\n            fullContextCalls+=data[i];\n          }\n          for (          long[] data : nonSllPerFile[currentPass]) {\n            nonSllCalls+=data[i];\n          }\n          for (          long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n            transitions+=data[i];\n          }\n          for (          long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n            computedTransitions+=data[i];\n          }\n          for (          long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n            fullContextTransitions+=data[i];\n          }\n          if (calls > 0) {\n            lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n          }\n          if (fullContextCalls > 0) {\n            fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n          }\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n        }\n else {\n          calls=0;\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n        }\n        System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n      }\n    }\n  }\n  int localDfaCount=0;\n  int globalDfaCount=0;\n  int localConfigCount=0;\n  int globalConfigCount=0;\n  int[] contextsInDFAState=new int[0];\n  for (int i=0; i < decisionToDFA.length; i++) {\n    DFA dfa=decisionToDFA[i];\n    if (dfa == null) {\n      continue;\n    }\n    if (SHOW_CONFIG_STATS) {\n      for (      DFAState state : dfa.states.keySet()) {\n        if (state.configs.size() >= contextsInDFAState.length) {\n          contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n        }\n        if (state.isAcceptState) {\n          boolean hasGlobal=false;\n          for (          ATNConfig config : state.configs) {\n            if (config.reachesIntoOuterContext > 0) {\n              globalConfigCount++;\n              hasGlobal=true;\n            }\n else {\n              localConfigCount++;\n            }\n          }\n          if (hasGlobal) {\n            globalDfaCount++;\n          }\n else {\n            localDfaCount++;\n          }\n        }\n        contextsInDFAState[state.configs.size()]++;\n      }\n    }\n  }\n  if (SHOW_CONFIG_STATS && currentPass == 0) {\n    System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n    System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n    if (SHOW_DFA_STATE_STATS) {\n      for (int i=0; i < contextsInDFAState.length; i++) {\n        if (contextsInDFAState[i] != 0) {\n          System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 681,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6136,
        "startLineNumber" : 921,
        "startColumnNumber" : 2,
        "endLineNumber" : 1075,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (RUN_PARSER && sharedParsers.length > 0) {\n  int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n  Parser parser=sharedParsers[index];\n  final ParserATNSimulator interpreter=parser.getInterpreter();\n  final DFA[] decisionToDFA=interpreter.decisionToDFA;\n  if (SHOW_DFA_STATE_STATS) {\n    int states=0;\n    int configs=0;\n    Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      states+=dfa.states.size();\n      for (      DFAState state : dfa.states.values()) {\n        configs+=state.configs.size();\n        uniqueConfigs.addAll(state.configs);\n      }\n    }\n    System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n    if (DETAILED_DFA_STATE_STATS) {\n      if (COMPUTE_TRANSITION_STATS) {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n      }\n else {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n      }\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null || dfa.states.isEmpty()) {\n          continue;\n        }\n        int decisionConfigs=0;\n        for (        DFAState state : dfa.states.values()) {\n          decisionConfigs+=state.configs.size();\n        }\n        String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n        long calls=0;\n        long fullContextCalls=0;\n        long nonSllCalls=0;\n        long transitions=0;\n        long computedTransitions=0;\n        long fullContextTransitions=0;\n        double lookahead=0;\n        double fullContextLookahead=0;\n        String formatString;\n        if (COMPUTE_TRANSITION_STATS) {\n          for (          long[] data : decisionInvocationsPerFile[currentPass]) {\n            calls+=data[i];\n          }\n          for (          long[] data : fullContextFallbackPerFile[currentPass]) {\n            fullContextCalls+=data[i];\n          }\n          for (          long[] data : nonSllPerFile[currentPass]) {\n            nonSllCalls+=data[i];\n          }\n          for (          long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n            transitions+=data[i];\n          }\n          for (          long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n            computedTransitions+=data[i];\n          }\n          for (          long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n            fullContextTransitions+=data[i];\n          }\n          if (calls > 0) {\n            lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n          }\n          if (fullContextCalls > 0) {\n            fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n          }\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n        }\n else {\n          calls=0;\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n        }\n        System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n      }\n    }\n  }\n  int localDfaCount=0;\n  int globalDfaCount=0;\n  int localConfigCount=0;\n  int globalConfigCount=0;\n  int[] contextsInDFAState=new int[0];\n  for (int i=0; i < decisionToDFA.length; i++) {\n    DFA dfa=decisionToDFA[i];\n    if (dfa == null) {\n      continue;\n    }\n    if (SHOW_CONFIG_STATS) {\n      for (      DFAState state : dfa.states.keySet()) {\n        if (state.configs.size() >= contextsInDFAState.length) {\n          contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n        }\n        if (state.isAcceptState) {\n          boolean hasGlobal=false;\n          for (          ATNConfig config : state.configs) {\n            if (config.reachesIntoOuterContext > 0) {\n              globalConfigCount++;\n              hasGlobal=true;\n            }\n else {\n              localConfigCount++;\n            }\n          }\n          if (hasGlobal) {\n            globalDfaCount++;\n          }\n else {\n            localDfaCount++;\n          }\n        }\n        contextsInDFAState[state.configs.size()]++;\n      }\n    }\n  }\n  if (SHOW_CONFIG_STATS && currentPass == 0) {\n    System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n    System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n    if (SHOW_DFA_STATE_STATS) {\n      for (int i=0; i < contextsInDFAState.length; i++) {\n        if (contextsInDFAState[i] != 0) {\n          System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 689,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11794,
        "startLineNumber" : 777,
        "startColumnNumber" : 170,
        "endLineNumber" : 1083,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (shuffleSources) {\n    List<InputDescriptor> sourcesList=new ArrayList<InputDescriptor>(sources);\nsynchronized (RANDOM) {\n      Collections.shuffle(sourcesList,RANDOM);\n    }\n    sources=sourcesList;\n  }\n  long startTime=System.nanoTime();\n  tokenCount.set(currentPass,0);\n  int inputSize=0;\n  int inputCount=0;\n  Collection<Future<FileParseResult>> results=new ArrayList<Future<FileParseResult>>();\n  ExecutorService executorService;\n  if (FILE_GRANULARITY) {\n    executorService=Executors.newFixedThreadPool(FILE_GRANULARITY ? NUMBER_OF_THREADS : 1,new NumberedThreadFactory());\n  }\n else {\n    executorService=Executors.newSingleThreadExecutor(new FixedThreadNumberFactory(((NumberedThread)Thread.currentThread()).getThreadNumber()));\n  }\n  for (  InputDescriptor inputDescriptor : sources) {\n    if (inputCount >= MAX_FILES_PER_PARSE_ITERATION) {\n      break;\n    }\n    final CharStream input=inputDescriptor.getInputStream();\n    input.seek(0);\n    inputSize+=input.size();\n    inputCount++;\n    Future<FileParseResult> futureChecksum=executorService.submit(new Callable<FileParseResult>(){\n      @Override public FileParseResult call(){\n        try {\n          return factory.parseFile(input,currentPass,((NumberedThread)Thread.currentThread()).getThreadNumber());\n        }\n catch (        IllegalStateException ex) {\n          ex.printStackTrace(System.err);\n        }\ncatch (        Throwable t) {\n          t.printStackTrace(System.err);\n        }\n        return null;\n      }\n    }\n);\n    results.add(futureChecksum);\n  }\n  MurmurHashChecksum checksum=new MurmurHashChecksum();\n  int currentIndex=-1;\n  for (  Future<FileParseResult> future : results) {\n    currentIndex++;\n    int fileChecksum=0;\n    try {\n      FileParseResult fileResult=future.get();\n      if (COMPUTE_TRANSITION_STATS) {\n        totalTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserTotalTransitions);\n        computedTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserComputedTransitions);\n        if (DETAILED_DFA_STATE_STATS) {\n          decisionInvocationsPerFile[currentPass][currentIndex]=fileResult.decisionInvocations;\n          fullContextFallbackPerFile[currentPass][currentIndex]=fileResult.fullContextFallback;\n          nonSllPerFile[currentPass][currentIndex]=fileResult.nonSll;\n          totalTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserTotalTransitions;\n          computedTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserComputedTransitions;\n          fullContextTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserFullContextTransitions;\n        }\n      }\n      if (COMPUTE_TIMING_STATS) {\n        timePerFile[currentPass][currentIndex]=fileResult.endTime - fileResult.startTime;\n        tokensPerFile[currentPass][currentIndex]=fileResult.tokenCount;\n      }\n      fileChecksum=fileResult.checksum;\n    }\n catch (    ExecutionException ex) {\n      Logger.getLogger(TestPerformance.class.getName()).log(Level.SEVERE,null,ex);\n    }\n    if (COMPUTE_CHECKSUM) {\n      updateChecksum(checksum,fileChecksum);\n    }\n  }\n  executorService.shutdown();\n  executorService.awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);\n  System.out.format(\"%d. Total parse time for %d files (%d KB, %d tokens%s): %.0fms%n\",currentPass + 1,inputCount,inputSize / 1024,tokenCount.get(currentPass),COMPUTE_CHECKSUM ? String.format(\", checksum 0x%8X\",checksum.getValue()) : \"\",(double)(System.nanoTime() - startTime) / 1000000.0);\n  if (sharedLexers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Lexer lexer=sharedLexers[index];\n    final LexerATNSimulator lexerInterpreter=lexer.getInterpreter();\n    final DFA[] modeToDFA=lexerInterpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < modeToDFA.length; i++) {\n        DFA dfa=modeToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d lexer DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        System.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n        for (int i=0; i < modeToDFA.length; i++) {\n          DFA dfa=modeToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int modeConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            modeConfigs+=state.configs.size();\n          }\n          String modeName=lexer.getModeNames()[i];\n          System.out.format(\"\\t%d\\t%d\\t%d\\t%s%n\",dfa.decision,dfa.states.size(),modeConfigs,modeName);\n        }\n      }\n    }\n  }\n  if (RUN_PARSER && sharedParsers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Parser parser=sharedParsers[index];\n    final ParserATNSimulator interpreter=parser.getInterpreter();\n    final DFA[] decisionToDFA=interpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        if (COMPUTE_TRANSITION_STATS) {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n        }\n else {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n        }\n        for (int i=0; i < decisionToDFA.length; i++) {\n          DFA dfa=decisionToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int decisionConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            decisionConfigs+=state.configs.size();\n          }\n          String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n          long calls=0;\n          long fullContextCalls=0;\n          long nonSllCalls=0;\n          long transitions=0;\n          long computedTransitions=0;\n          long fullContextTransitions=0;\n          double lookahead=0;\n          double fullContextLookahead=0;\n          String formatString;\n          if (COMPUTE_TRANSITION_STATS) {\n            for (            long[] data : decisionInvocationsPerFile[currentPass]) {\n              calls+=data[i];\n            }\n            for (            long[] data : fullContextFallbackPerFile[currentPass]) {\n              fullContextCalls+=data[i];\n            }\n            for (            long[] data : nonSllPerFile[currentPass]) {\n              nonSllCalls+=data[i];\n            }\n            for (            long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n              transitions+=data[i];\n            }\n            for (            long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n              computedTransitions+=data[i];\n            }\n            for (            long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n              fullContextTransitions+=data[i];\n            }\n            if (calls > 0) {\n              lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n            }\n            if (fullContextCalls > 0) {\n              fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n            }\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n          }\n else {\n            calls=0;\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n          }\n          System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n        }\n      }\n    }\n    int localDfaCount=0;\n    int globalDfaCount=0;\n    int localConfigCount=0;\n    int globalConfigCount=0;\n    int[] contextsInDFAState=new int[0];\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      if (SHOW_CONFIG_STATS) {\n        for (        DFAState state : dfa.states.keySet()) {\n          if (state.configs.size() >= contextsInDFAState.length) {\n            contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n          }\n          if (state.isAcceptState) {\n            boolean hasGlobal=false;\n            for (            ATNConfig config : state.configs) {\n              if (config.reachesIntoOuterContext > 0) {\n                globalConfigCount++;\n                hasGlobal=true;\n              }\n else {\n                localConfigCount++;\n              }\n            }\n            if (hasGlobal) {\n              globalDfaCount++;\n            }\n else {\n              localDfaCount++;\n            }\n          }\n          contextsInDFAState[state.configs.size()]++;\n        }\n      }\n    }\n    if (SHOW_CONFIG_STATS && currentPass == 0) {\n      System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n      System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n      if (SHOW_DFA_STATE_STATS) {\n        for (int i=0; i < contextsInDFAState.length; i++) {\n          if (contextsInDFAState[i] != 0) {\n            System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n          }\n        }\n      }\n    }\n  }\n  if (COMPUTE_TIMING_STATS) {\n    System.out.format(\"File\\tTokens\\tTime%n\");\n    for (int i=0; i < timePerFile[currentPass].length; i++) {\n      System.out.format(\"%d\\t%d\\t%d%n\",i + 1,tokensPerFile[currentPass][i],timePerFile[currentPass][i]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1456,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11963,
        "startLineNumber" : 777,
        "startColumnNumber" : 1,
        "endLineNumber" : 1083,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void parseSources(final int currentPass,final ParserFactory factory,Collection<InputDescriptor> sources,boolean shuffleSources) throws InterruptedException {\n  if (shuffleSources) {\n    List<InputDescriptor> sourcesList=new ArrayList<InputDescriptor>(sources);\nsynchronized (RANDOM) {\n      Collections.shuffle(sourcesList,RANDOM);\n    }\n    sources=sourcesList;\n  }\n  long startTime=System.nanoTime();\n  tokenCount.set(currentPass,0);\n  int inputSize=0;\n  int inputCount=0;\n  Collection<Future<FileParseResult>> results=new ArrayList<Future<FileParseResult>>();\n  ExecutorService executorService;\n  if (FILE_GRANULARITY) {\n    executorService=Executors.newFixedThreadPool(FILE_GRANULARITY ? NUMBER_OF_THREADS : 1,new NumberedThreadFactory());\n  }\n else {\n    executorService=Executors.newSingleThreadExecutor(new FixedThreadNumberFactory(((NumberedThread)Thread.currentThread()).getThreadNumber()));\n  }\n  for (  InputDescriptor inputDescriptor : sources) {\n    if (inputCount >= MAX_FILES_PER_PARSE_ITERATION) {\n      break;\n    }\n    final CharStream input=inputDescriptor.getInputStream();\n    input.seek(0);\n    inputSize+=input.size();\n    inputCount++;\n    Future<FileParseResult> futureChecksum=executorService.submit(new Callable<FileParseResult>(){\n      @Override public FileParseResult call(){\n        try {\n          return factory.parseFile(input,currentPass,((NumberedThread)Thread.currentThread()).getThreadNumber());\n        }\n catch (        IllegalStateException ex) {\n          ex.printStackTrace(System.err);\n        }\ncatch (        Throwable t) {\n          t.printStackTrace(System.err);\n        }\n        return null;\n      }\n    }\n);\n    results.add(futureChecksum);\n  }\n  MurmurHashChecksum checksum=new MurmurHashChecksum();\n  int currentIndex=-1;\n  for (  Future<FileParseResult> future : results) {\n    currentIndex++;\n    int fileChecksum=0;\n    try {\n      FileParseResult fileResult=future.get();\n      if (COMPUTE_TRANSITION_STATS) {\n        totalTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserTotalTransitions);\n        computedTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserComputedTransitions);\n        if (DETAILED_DFA_STATE_STATS) {\n          decisionInvocationsPerFile[currentPass][currentIndex]=fileResult.decisionInvocations;\n          fullContextFallbackPerFile[currentPass][currentIndex]=fileResult.fullContextFallback;\n          nonSllPerFile[currentPass][currentIndex]=fileResult.nonSll;\n          totalTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserTotalTransitions;\n          computedTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserComputedTransitions;\n          fullContextTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserFullContextTransitions;\n        }\n      }\n      if (COMPUTE_TIMING_STATS) {\n        timePerFile[currentPass][currentIndex]=fileResult.endTime - fileResult.startTime;\n        tokensPerFile[currentPass][currentIndex]=fileResult.tokenCount;\n      }\n      fileChecksum=fileResult.checksum;\n    }\n catch (    ExecutionException ex) {\n      Logger.getLogger(TestPerformance.class.getName()).log(Level.SEVERE,null,ex);\n    }\n    if (COMPUTE_CHECKSUM) {\n      updateChecksum(checksum,fileChecksum);\n    }\n  }\n  executorService.shutdown();\n  executorService.awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);\n  System.out.format(\"%d. Total parse time for %d files (%d KB, %d tokens%s): %.0fms%n\",currentPass + 1,inputCount,inputSize / 1024,tokenCount.get(currentPass),COMPUTE_CHECKSUM ? String.format(\", checksum 0x%8X\",checksum.getValue()) : \"\",(double)(System.nanoTime() - startTime) / 1000000.0);\n  if (sharedLexers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Lexer lexer=sharedLexers[index];\n    final LexerATNSimulator lexerInterpreter=lexer.getInterpreter();\n    final DFA[] modeToDFA=lexerInterpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < modeToDFA.length; i++) {\n        DFA dfa=modeToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d lexer DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        System.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n        for (int i=0; i < modeToDFA.length; i++) {\n          DFA dfa=modeToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int modeConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            modeConfigs+=state.configs.size();\n          }\n          String modeName=lexer.getModeNames()[i];\n          System.out.format(\"\\t%d\\t%d\\t%d\\t%s%n\",dfa.decision,dfa.states.size(),modeConfigs,modeName);\n        }\n      }\n    }\n  }\n  if (RUN_PARSER && sharedParsers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Parser parser=sharedParsers[index];\n    final ParserATNSimulator interpreter=parser.getInterpreter();\n    final DFA[] decisionToDFA=interpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        if (COMPUTE_TRANSITION_STATS) {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n        }\n else {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n        }\n        for (int i=0; i < decisionToDFA.length; i++) {\n          DFA dfa=decisionToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int decisionConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            decisionConfigs+=state.configs.size();\n          }\n          String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n          long calls=0;\n          long fullContextCalls=0;\n          long nonSllCalls=0;\n          long transitions=0;\n          long computedTransitions=0;\n          long fullContextTransitions=0;\n          double lookahead=0;\n          double fullContextLookahead=0;\n          String formatString;\n          if (COMPUTE_TRANSITION_STATS) {\n            for (            long[] data : decisionInvocationsPerFile[currentPass]) {\n              calls+=data[i];\n            }\n            for (            long[] data : fullContextFallbackPerFile[currentPass]) {\n              fullContextCalls+=data[i];\n            }\n            for (            long[] data : nonSllPerFile[currentPass]) {\n              nonSllCalls+=data[i];\n            }\n            for (            long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n              transitions+=data[i];\n            }\n            for (            long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n              computedTransitions+=data[i];\n            }\n            for (            long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n              fullContextTransitions+=data[i];\n            }\n            if (calls > 0) {\n              lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n            }\n            if (fullContextCalls > 0) {\n              fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n            }\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n          }\n else {\n            calls=0;\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n          }\n          System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n        }\n      }\n    }\n    int localDfaCount=0;\n    int globalDfaCount=0;\n    int localConfigCount=0;\n    int globalConfigCount=0;\n    int[] contextsInDFAState=new int[0];\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      if (SHOW_CONFIG_STATS) {\n        for (        DFAState state : dfa.states.keySet()) {\n          if (state.configs.size() >= contextsInDFAState.length) {\n            contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n          }\n          if (state.isAcceptState) {\n            boolean hasGlobal=false;\n            for (            ATNConfig config : state.configs) {\n              if (config.reachesIntoOuterContext > 0) {\n                globalConfigCount++;\n                hasGlobal=true;\n              }\n else {\n                localConfigCount++;\n              }\n            }\n            if (hasGlobal) {\n              globalDfaCount++;\n            }\n else {\n              localDfaCount++;\n            }\n          }\n          contextsInDFAState[state.configs.size()]++;\n        }\n      }\n    }\n    if (SHOW_CONFIG_STATS && currentPass == 0) {\n      System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n      System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n      if (SHOW_DFA_STATE_STATS) {\n        for (int i=0; i < contextsInDFAState.length; i++) {\n          if (contextsInDFAState[i] != 0) {\n            System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n          }\n        }\n      }\n    }\n  }\n  if (COMPUTE_TIMING_STATS) {\n    System.out.format(\"File\\tTokens\\tTime%n\");\n    for (int i=0; i < timePerFile[currentPass].length; i++) {\n      System.out.format(\"%d\\t%d\\t%d%n\",i + 1,tokensPerFile[currentPass][i],timePerFile[currentPass][i]);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1481,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1201,
        "startLineNumber" : 1035,
        "startColumnNumber" : 16,
        "endLineNumber" : 1061,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (SHOW_CONFIG_STATS) {\n  for (  DFAState state : dfa.states.keySet()) {\n    if (state.configs.size() >= contextsInDFAState.length) {\n      contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n    }\n    if (state.isAcceptState) {\n      boolean hasGlobal=false;\n      for (      ATNConfig config : state.configs) {\n        if (config.reachesIntoOuterContext > 0) {\n          globalConfigCount++;\n          hasGlobal=true;\n        }\n else {\n          localConfigCount++;\n        }\n      }\n      if (hasGlobal) {\n        globalDfaCount++;\n      }\n else {\n        localDfaCount++;\n      }\n    }\n    contextsInDFAState[state.configs.size()]++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 95,
      "astHeight" : 13
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "SHOW_CONFIG_STATS",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 1064,
      "startColumnNumber" : 16,
      "endLineNumber" : 1064,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 1064,
        "startColumnNumber" : 16,
        "endLineNumber" : 1064,
        "endColumnNumber" : 53
      },
      "nodeContext" : "SHOW_CONFIG_STATS && currentPass == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 754,
        "startLineNumber" : 1064,
        "startColumnNumber" : 12,
        "endLineNumber" : 1074,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (SHOW_CONFIG_STATS && currentPass == 0) {\n  System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n  System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n  if (SHOW_DFA_STATE_STATS) {\n    for (int i=0; i < contextsInDFAState.length; i++) {\n      if (contextsInDFAState[i] != 0) {\n        System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 6092,
        "startLineNumber" : 921,
        "startColumnNumber" : 46,
        "endLineNumber" : 1075,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n  Parser parser=sharedParsers[index];\n  final ParserATNSimulator interpreter=parser.getInterpreter();\n  final DFA[] decisionToDFA=interpreter.decisionToDFA;\n  if (SHOW_DFA_STATE_STATS) {\n    int states=0;\n    int configs=0;\n    Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      states+=dfa.states.size();\n      for (      DFAState state : dfa.states.values()) {\n        configs+=state.configs.size();\n        uniqueConfigs.addAll(state.configs);\n      }\n    }\n    System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n    if (DETAILED_DFA_STATE_STATS) {\n      if (COMPUTE_TRANSITION_STATS) {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n      }\n else {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n      }\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null || dfa.states.isEmpty()) {\n          continue;\n        }\n        int decisionConfigs=0;\n        for (        DFAState state : dfa.states.values()) {\n          decisionConfigs+=state.configs.size();\n        }\n        String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n        long calls=0;\n        long fullContextCalls=0;\n        long nonSllCalls=0;\n        long transitions=0;\n        long computedTransitions=0;\n        long fullContextTransitions=0;\n        double lookahead=0;\n        double fullContextLookahead=0;\n        String formatString;\n        if (COMPUTE_TRANSITION_STATS) {\n          for (          long[] data : decisionInvocationsPerFile[currentPass]) {\n            calls+=data[i];\n          }\n          for (          long[] data : fullContextFallbackPerFile[currentPass]) {\n            fullContextCalls+=data[i];\n          }\n          for (          long[] data : nonSllPerFile[currentPass]) {\n            nonSllCalls+=data[i];\n          }\n          for (          long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n            transitions+=data[i];\n          }\n          for (          long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n            computedTransitions+=data[i];\n          }\n          for (          long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n            fullContextTransitions+=data[i];\n          }\n          if (calls > 0) {\n            lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n          }\n          if (fullContextCalls > 0) {\n            fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n          }\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n        }\n else {\n          calls=0;\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n        }\n        System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n      }\n    }\n  }\n  int localDfaCount=0;\n  int globalDfaCount=0;\n  int localConfigCount=0;\n  int globalConfigCount=0;\n  int[] contextsInDFAState=new int[0];\n  for (int i=0; i < decisionToDFA.length; i++) {\n    DFA dfa=decisionToDFA[i];\n    if (dfa == null) {\n      continue;\n    }\n    if (SHOW_CONFIG_STATS) {\n      for (      DFAState state : dfa.states.keySet()) {\n        if (state.configs.size() >= contextsInDFAState.length) {\n          contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n        }\n        if (state.isAcceptState) {\n          boolean hasGlobal=false;\n          for (          ATNConfig config : state.configs) {\n            if (config.reachesIntoOuterContext > 0) {\n              globalConfigCount++;\n              hasGlobal=true;\n            }\n else {\n              localConfigCount++;\n            }\n          }\n          if (hasGlobal) {\n            globalDfaCount++;\n          }\n else {\n            localDfaCount++;\n          }\n        }\n        contextsInDFAState[state.configs.size()]++;\n      }\n    }\n  }\n  if (SHOW_CONFIG_STATS && currentPass == 0) {\n    System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n    System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n    if (SHOW_DFA_STATE_STATS) {\n      for (int i=0; i < contextsInDFAState.length; i++) {\n        if (contextsInDFAState[i] != 0) {\n          System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 681,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6136,
        "startLineNumber" : 921,
        "startColumnNumber" : 2,
        "endLineNumber" : 1075,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (RUN_PARSER && sharedParsers.length > 0) {\n  int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n  Parser parser=sharedParsers[index];\n  final ParserATNSimulator interpreter=parser.getInterpreter();\n  final DFA[] decisionToDFA=interpreter.decisionToDFA;\n  if (SHOW_DFA_STATE_STATS) {\n    int states=0;\n    int configs=0;\n    Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      states+=dfa.states.size();\n      for (      DFAState state : dfa.states.values()) {\n        configs+=state.configs.size();\n        uniqueConfigs.addAll(state.configs);\n      }\n    }\n    System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n    if (DETAILED_DFA_STATE_STATS) {\n      if (COMPUTE_TRANSITION_STATS) {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n      }\n else {\n        System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n      }\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null || dfa.states.isEmpty()) {\n          continue;\n        }\n        int decisionConfigs=0;\n        for (        DFAState state : dfa.states.values()) {\n          decisionConfigs+=state.configs.size();\n        }\n        String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n        long calls=0;\n        long fullContextCalls=0;\n        long nonSllCalls=0;\n        long transitions=0;\n        long computedTransitions=0;\n        long fullContextTransitions=0;\n        double lookahead=0;\n        double fullContextLookahead=0;\n        String formatString;\n        if (COMPUTE_TRANSITION_STATS) {\n          for (          long[] data : decisionInvocationsPerFile[currentPass]) {\n            calls+=data[i];\n          }\n          for (          long[] data : fullContextFallbackPerFile[currentPass]) {\n            fullContextCalls+=data[i];\n          }\n          for (          long[] data : nonSllPerFile[currentPass]) {\n            nonSllCalls+=data[i];\n          }\n          for (          long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n            transitions+=data[i];\n          }\n          for (          long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n            computedTransitions+=data[i];\n          }\n          for (          long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n            fullContextTransitions+=data[i];\n          }\n          if (calls > 0) {\n            lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n          }\n          if (fullContextCalls > 0) {\n            fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n          }\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n        }\n else {\n          calls=0;\n          formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n        }\n        System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n      }\n    }\n  }\n  int localDfaCount=0;\n  int globalDfaCount=0;\n  int localConfigCount=0;\n  int globalConfigCount=0;\n  int[] contextsInDFAState=new int[0];\n  for (int i=0; i < decisionToDFA.length; i++) {\n    DFA dfa=decisionToDFA[i];\n    if (dfa == null) {\n      continue;\n    }\n    if (SHOW_CONFIG_STATS) {\n      for (      DFAState state : dfa.states.keySet()) {\n        if (state.configs.size() >= contextsInDFAState.length) {\n          contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n        }\n        if (state.isAcceptState) {\n          boolean hasGlobal=false;\n          for (          ATNConfig config : state.configs) {\n            if (config.reachesIntoOuterContext > 0) {\n              globalConfigCount++;\n              hasGlobal=true;\n            }\n else {\n              localConfigCount++;\n            }\n          }\n          if (hasGlobal) {\n            globalDfaCount++;\n          }\n else {\n            localDfaCount++;\n          }\n        }\n        contextsInDFAState[state.configs.size()]++;\n      }\n    }\n  }\n  if (SHOW_CONFIG_STATS && currentPass == 0) {\n    System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n    System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n    if (SHOW_DFA_STATE_STATS) {\n      for (int i=0; i < contextsInDFAState.length; i++) {\n        if (contextsInDFAState[i] != 0) {\n          System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 689,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11794,
        "startLineNumber" : 777,
        "startColumnNumber" : 170,
        "endLineNumber" : 1083,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (shuffleSources) {\n    List<InputDescriptor> sourcesList=new ArrayList<InputDescriptor>(sources);\nsynchronized (RANDOM) {\n      Collections.shuffle(sourcesList,RANDOM);\n    }\n    sources=sourcesList;\n  }\n  long startTime=System.nanoTime();\n  tokenCount.set(currentPass,0);\n  int inputSize=0;\n  int inputCount=0;\n  Collection<Future<FileParseResult>> results=new ArrayList<Future<FileParseResult>>();\n  ExecutorService executorService;\n  if (FILE_GRANULARITY) {\n    executorService=Executors.newFixedThreadPool(FILE_GRANULARITY ? NUMBER_OF_THREADS : 1,new NumberedThreadFactory());\n  }\n else {\n    executorService=Executors.newSingleThreadExecutor(new FixedThreadNumberFactory(((NumberedThread)Thread.currentThread()).getThreadNumber()));\n  }\n  for (  InputDescriptor inputDescriptor : sources) {\n    if (inputCount >= MAX_FILES_PER_PARSE_ITERATION) {\n      break;\n    }\n    final CharStream input=inputDescriptor.getInputStream();\n    input.seek(0);\n    inputSize+=input.size();\n    inputCount++;\n    Future<FileParseResult> futureChecksum=executorService.submit(new Callable<FileParseResult>(){\n      @Override public FileParseResult call(){\n        try {\n          return factory.parseFile(input,currentPass,((NumberedThread)Thread.currentThread()).getThreadNumber());\n        }\n catch (        IllegalStateException ex) {\n          ex.printStackTrace(System.err);\n        }\ncatch (        Throwable t) {\n          t.printStackTrace(System.err);\n        }\n        return null;\n      }\n    }\n);\n    results.add(futureChecksum);\n  }\n  MurmurHashChecksum checksum=new MurmurHashChecksum();\n  int currentIndex=-1;\n  for (  Future<FileParseResult> future : results) {\n    currentIndex++;\n    int fileChecksum=0;\n    try {\n      FileParseResult fileResult=future.get();\n      if (COMPUTE_TRANSITION_STATS) {\n        totalTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserTotalTransitions);\n        computedTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserComputedTransitions);\n        if (DETAILED_DFA_STATE_STATS) {\n          decisionInvocationsPerFile[currentPass][currentIndex]=fileResult.decisionInvocations;\n          fullContextFallbackPerFile[currentPass][currentIndex]=fileResult.fullContextFallback;\n          nonSllPerFile[currentPass][currentIndex]=fileResult.nonSll;\n          totalTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserTotalTransitions;\n          computedTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserComputedTransitions;\n          fullContextTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserFullContextTransitions;\n        }\n      }\n      if (COMPUTE_TIMING_STATS) {\n        timePerFile[currentPass][currentIndex]=fileResult.endTime - fileResult.startTime;\n        tokensPerFile[currentPass][currentIndex]=fileResult.tokenCount;\n      }\n      fileChecksum=fileResult.checksum;\n    }\n catch (    ExecutionException ex) {\n      Logger.getLogger(TestPerformance.class.getName()).log(Level.SEVERE,null,ex);\n    }\n    if (COMPUTE_CHECKSUM) {\n      updateChecksum(checksum,fileChecksum);\n    }\n  }\n  executorService.shutdown();\n  executorService.awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);\n  System.out.format(\"%d. Total parse time for %d files (%d KB, %d tokens%s): %.0fms%n\",currentPass + 1,inputCount,inputSize / 1024,tokenCount.get(currentPass),COMPUTE_CHECKSUM ? String.format(\", checksum 0x%8X\",checksum.getValue()) : \"\",(double)(System.nanoTime() - startTime) / 1000000.0);\n  if (sharedLexers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Lexer lexer=sharedLexers[index];\n    final LexerATNSimulator lexerInterpreter=lexer.getInterpreter();\n    final DFA[] modeToDFA=lexerInterpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < modeToDFA.length; i++) {\n        DFA dfa=modeToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d lexer DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        System.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n        for (int i=0; i < modeToDFA.length; i++) {\n          DFA dfa=modeToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int modeConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            modeConfigs+=state.configs.size();\n          }\n          String modeName=lexer.getModeNames()[i];\n          System.out.format(\"\\t%d\\t%d\\t%d\\t%s%n\",dfa.decision,dfa.states.size(),modeConfigs,modeName);\n        }\n      }\n    }\n  }\n  if (RUN_PARSER && sharedParsers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Parser parser=sharedParsers[index];\n    final ParserATNSimulator interpreter=parser.getInterpreter();\n    final DFA[] decisionToDFA=interpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        if (COMPUTE_TRANSITION_STATS) {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n        }\n else {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n        }\n        for (int i=0; i < decisionToDFA.length; i++) {\n          DFA dfa=decisionToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int decisionConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            decisionConfigs+=state.configs.size();\n          }\n          String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n          long calls=0;\n          long fullContextCalls=0;\n          long nonSllCalls=0;\n          long transitions=0;\n          long computedTransitions=0;\n          long fullContextTransitions=0;\n          double lookahead=0;\n          double fullContextLookahead=0;\n          String formatString;\n          if (COMPUTE_TRANSITION_STATS) {\n            for (            long[] data : decisionInvocationsPerFile[currentPass]) {\n              calls+=data[i];\n            }\n            for (            long[] data : fullContextFallbackPerFile[currentPass]) {\n              fullContextCalls+=data[i];\n            }\n            for (            long[] data : nonSllPerFile[currentPass]) {\n              nonSllCalls+=data[i];\n            }\n            for (            long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n              transitions+=data[i];\n            }\n            for (            long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n              computedTransitions+=data[i];\n            }\n            for (            long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n              fullContextTransitions+=data[i];\n            }\n            if (calls > 0) {\n              lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n            }\n            if (fullContextCalls > 0) {\n              fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n            }\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n          }\n else {\n            calls=0;\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n          }\n          System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n        }\n      }\n    }\n    int localDfaCount=0;\n    int globalDfaCount=0;\n    int localConfigCount=0;\n    int globalConfigCount=0;\n    int[] contextsInDFAState=new int[0];\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      if (SHOW_CONFIG_STATS) {\n        for (        DFAState state : dfa.states.keySet()) {\n          if (state.configs.size() >= contextsInDFAState.length) {\n            contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n          }\n          if (state.isAcceptState) {\n            boolean hasGlobal=false;\n            for (            ATNConfig config : state.configs) {\n              if (config.reachesIntoOuterContext > 0) {\n                globalConfigCount++;\n                hasGlobal=true;\n              }\n else {\n                localConfigCount++;\n              }\n            }\n            if (hasGlobal) {\n              globalDfaCount++;\n            }\n else {\n              localDfaCount++;\n            }\n          }\n          contextsInDFAState[state.configs.size()]++;\n        }\n      }\n    }\n    if (SHOW_CONFIG_STATS && currentPass == 0) {\n      System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n      System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n      if (SHOW_DFA_STATE_STATS) {\n        for (int i=0; i < contextsInDFAState.length; i++) {\n          if (contextsInDFAState[i] != 0) {\n            System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n          }\n        }\n      }\n    }\n  }\n  if (COMPUTE_TIMING_STATS) {\n    System.out.format(\"File\\tTokens\\tTime%n\");\n    for (int i=0; i < timePerFile[currentPass].length; i++) {\n      System.out.format(\"%d\\t%d\\t%d%n\",i + 1,tokensPerFile[currentPass][i],timePerFile[currentPass][i]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1456,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 11963,
        "startLineNumber" : 777,
        "startColumnNumber" : 1,
        "endLineNumber" : 1083,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void parseSources(final int currentPass,final ParserFactory factory,Collection<InputDescriptor> sources,boolean shuffleSources) throws InterruptedException {\n  if (shuffleSources) {\n    List<InputDescriptor> sourcesList=new ArrayList<InputDescriptor>(sources);\nsynchronized (RANDOM) {\n      Collections.shuffle(sourcesList,RANDOM);\n    }\n    sources=sourcesList;\n  }\n  long startTime=System.nanoTime();\n  tokenCount.set(currentPass,0);\n  int inputSize=0;\n  int inputCount=0;\n  Collection<Future<FileParseResult>> results=new ArrayList<Future<FileParseResult>>();\n  ExecutorService executorService;\n  if (FILE_GRANULARITY) {\n    executorService=Executors.newFixedThreadPool(FILE_GRANULARITY ? NUMBER_OF_THREADS : 1,new NumberedThreadFactory());\n  }\n else {\n    executorService=Executors.newSingleThreadExecutor(new FixedThreadNumberFactory(((NumberedThread)Thread.currentThread()).getThreadNumber()));\n  }\n  for (  InputDescriptor inputDescriptor : sources) {\n    if (inputCount >= MAX_FILES_PER_PARSE_ITERATION) {\n      break;\n    }\n    final CharStream input=inputDescriptor.getInputStream();\n    input.seek(0);\n    inputSize+=input.size();\n    inputCount++;\n    Future<FileParseResult> futureChecksum=executorService.submit(new Callable<FileParseResult>(){\n      @Override public FileParseResult call(){\n        try {\n          return factory.parseFile(input,currentPass,((NumberedThread)Thread.currentThread()).getThreadNumber());\n        }\n catch (        IllegalStateException ex) {\n          ex.printStackTrace(System.err);\n        }\ncatch (        Throwable t) {\n          t.printStackTrace(System.err);\n        }\n        return null;\n      }\n    }\n);\n    results.add(futureChecksum);\n  }\n  MurmurHashChecksum checksum=new MurmurHashChecksum();\n  int currentIndex=-1;\n  for (  Future<FileParseResult> future : results) {\n    currentIndex++;\n    int fileChecksum=0;\n    try {\n      FileParseResult fileResult=future.get();\n      if (COMPUTE_TRANSITION_STATS) {\n        totalTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserTotalTransitions);\n        computedTransitionsPerFile[currentPass][currentIndex]=sum(fileResult.parserComputedTransitions);\n        if (DETAILED_DFA_STATE_STATS) {\n          decisionInvocationsPerFile[currentPass][currentIndex]=fileResult.decisionInvocations;\n          fullContextFallbackPerFile[currentPass][currentIndex]=fileResult.fullContextFallback;\n          nonSllPerFile[currentPass][currentIndex]=fileResult.nonSll;\n          totalTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserTotalTransitions;\n          computedTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserComputedTransitions;\n          fullContextTransitionsPerDecisionPerFile[currentPass][currentIndex]=fileResult.parserFullContextTransitions;\n        }\n      }\n      if (COMPUTE_TIMING_STATS) {\n        timePerFile[currentPass][currentIndex]=fileResult.endTime - fileResult.startTime;\n        tokensPerFile[currentPass][currentIndex]=fileResult.tokenCount;\n      }\n      fileChecksum=fileResult.checksum;\n    }\n catch (    ExecutionException ex) {\n      Logger.getLogger(TestPerformance.class.getName()).log(Level.SEVERE,null,ex);\n    }\n    if (COMPUTE_CHECKSUM) {\n      updateChecksum(checksum,fileChecksum);\n    }\n  }\n  executorService.shutdown();\n  executorService.awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);\n  System.out.format(\"%d. Total parse time for %d files (%d KB, %d tokens%s): %.0fms%n\",currentPass + 1,inputCount,inputSize / 1024,tokenCount.get(currentPass),COMPUTE_CHECKSUM ? String.format(\", checksum 0x%8X\",checksum.getValue()) : \"\",(double)(System.nanoTime() - startTime) / 1000000.0);\n  if (sharedLexers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Lexer lexer=sharedLexers[index];\n    final LexerATNSimulator lexerInterpreter=lexer.getInterpreter();\n    final DFA[] modeToDFA=lexerInterpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < modeToDFA.length; i++) {\n        DFA dfa=modeToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d lexer DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        System.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n        for (int i=0; i < modeToDFA.length; i++) {\n          DFA dfa=modeToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int modeConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            modeConfigs+=state.configs.size();\n          }\n          String modeName=lexer.getModeNames()[i];\n          System.out.format(\"\\t%d\\t%d\\t%d\\t%s%n\",dfa.decision,dfa.states.size(),modeConfigs,modeName);\n        }\n      }\n    }\n  }\n  if (RUN_PARSER && sharedParsers.length > 0) {\n    int index=FILE_GRANULARITY ? 0 : ((NumberedThread)Thread.currentThread()).getThreadNumber();\n    Parser parser=sharedParsers[index];\n    final ParserATNSimulator interpreter=parser.getInterpreter();\n    final DFA[] decisionToDFA=interpreter.decisionToDFA;\n    if (SHOW_DFA_STATE_STATS) {\n      int states=0;\n      int configs=0;\n      Set<ATNConfig> uniqueConfigs=new HashSet<ATNConfig>();\n      for (int i=0; i < decisionToDFA.length; i++) {\n        DFA dfa=decisionToDFA[i];\n        if (dfa == null) {\n          continue;\n        }\n        states+=dfa.states.size();\n        for (        DFAState state : dfa.states.values()) {\n          configs+=state.configs.size();\n          uniqueConfigs.addAll(state.configs);\n        }\n      }\n      System.out.format(\"There are %d parser DFAState instances, %d configs (%d unique).%n\",states,configs,uniqueConfigs.size());\n      if (DETAILED_DFA_STATE_STATS) {\n        if (COMPUTE_TRANSITION_STATS) {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tPredict (ALL)\\tPredict (LL)\\tNon-SLL\\tTransitions\\tTransitions (ATN)\\tTransitions (LL)\\tLA (SLL)\\tLA (LL)\\tRule%n\");\n        }\n else {\n          System.out.format(\"\\tDecision\\tStates\\tConfigs\\tRule%n\");\n        }\n        for (int i=0; i < decisionToDFA.length; i++) {\n          DFA dfa=decisionToDFA[i];\n          if (dfa == null || dfa.states.isEmpty()) {\n            continue;\n          }\n          int decisionConfigs=0;\n          for (          DFAState state : dfa.states.values()) {\n            decisionConfigs+=state.configs.size();\n          }\n          String ruleName=parser.getRuleNames()[parser.getATN().decisionToState.get(dfa.decision).ruleIndex];\n          long calls=0;\n          long fullContextCalls=0;\n          long nonSllCalls=0;\n          long transitions=0;\n          long computedTransitions=0;\n          long fullContextTransitions=0;\n          double lookahead=0;\n          double fullContextLookahead=0;\n          String formatString;\n          if (COMPUTE_TRANSITION_STATS) {\n            for (            long[] data : decisionInvocationsPerFile[currentPass]) {\n              calls+=data[i];\n            }\n            for (            long[] data : fullContextFallbackPerFile[currentPass]) {\n              fullContextCalls+=data[i];\n            }\n            for (            long[] data : nonSllPerFile[currentPass]) {\n              nonSllCalls+=data[i];\n            }\n            for (            long[] data : totalTransitionsPerDecisionPerFile[currentPass]) {\n              transitions+=data[i];\n            }\n            for (            long[] data : computedTransitionsPerDecisionPerFile[currentPass]) {\n              computedTransitions+=data[i];\n            }\n            for (            long[] data : fullContextTransitionsPerDecisionPerFile[currentPass]) {\n              fullContextTransitions+=data[i];\n            }\n            if (calls > 0) {\n              lookahead=(double)(transitions - fullContextTransitions) / (double)calls;\n            }\n            if (fullContextCalls > 0) {\n              fullContextLookahead=(double)fullContextTransitions / (double)fullContextCalls;\n            }\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%4$d\\t%5$d\\t%6$d\\t%7$d\\t%8$d\\t%9$d\\t%10$f\\t%11$f\\t%12$s%n\";\n          }\n else {\n            calls=0;\n            formatString=\"\\t%1$d\\t%2$d\\t%3$d\\t%12$s%n\";\n          }\n          System.out.format(formatString,dfa.decision,dfa.states.size(),decisionConfigs,calls,fullContextCalls,nonSllCalls,transitions,computedTransitions,fullContextTransitions,lookahead,fullContextLookahead,ruleName);\n        }\n      }\n    }\n    int localDfaCount=0;\n    int globalDfaCount=0;\n    int localConfigCount=0;\n    int globalConfigCount=0;\n    int[] contextsInDFAState=new int[0];\n    for (int i=0; i < decisionToDFA.length; i++) {\n      DFA dfa=decisionToDFA[i];\n      if (dfa == null) {\n        continue;\n      }\n      if (SHOW_CONFIG_STATS) {\n        for (        DFAState state : dfa.states.keySet()) {\n          if (state.configs.size() >= contextsInDFAState.length) {\n            contextsInDFAState=Arrays.copyOf(contextsInDFAState,state.configs.size() + 1);\n          }\n          if (state.isAcceptState) {\n            boolean hasGlobal=false;\n            for (            ATNConfig config : state.configs) {\n              if (config.reachesIntoOuterContext > 0) {\n                globalConfigCount++;\n                hasGlobal=true;\n              }\n else {\n                localConfigCount++;\n              }\n            }\n            if (hasGlobal) {\n              globalDfaCount++;\n            }\n else {\n              localDfaCount++;\n            }\n          }\n          contextsInDFAState[state.configs.size()]++;\n        }\n      }\n    }\n    if (SHOW_CONFIG_STATS && currentPass == 0) {\n      System.out.format(\"  DFA accept states: %d total, %d with only local context, %d with a global context%n\",localDfaCount + globalDfaCount,localDfaCount,globalDfaCount);\n      System.out.format(\"  Config stats: %d total, %d local, %d global%n\",localConfigCount + globalConfigCount,localConfigCount,globalConfigCount);\n      if (SHOW_DFA_STATE_STATS) {\n        for (int i=0; i < contextsInDFAState.length; i++) {\n          if (contextsInDFAState[i] != 0) {\n            System.out.format(\"  %d configs = %d%n\",i,contextsInDFAState[i]);\n          }\n        }\n      }\n    }\n  }\n  if (COMPUTE_TIMING_STATS) {\n    System.out.format(\"File\\tTokens\\tTime%n\");\n    for (int i=0; i < timePerFile[currentPass].length; i++) {\n      System.out.format(\"%d\\t%d\\t%d%n\",i + 1,tokensPerFile[currentPass][i],timePerFile[currentPass][i]);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1481,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 1064,
        "startColumnNumber" : 16,
        "endLineNumber" : 1064,
        "endColumnNumber" : 53
      },
      "nodeContext" : "SHOW_CONFIG_STATS && currentPass == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 1035,
    "startColumnNumber" : 20,
    "endLineNumber" : 1035,
    "endColumnNumber" : 37
  }, {
    "charLength" : 17,
    "startLineNumber" : 1064,
    "startColumnNumber" : 16,
    "endLineNumber" : 1064,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}