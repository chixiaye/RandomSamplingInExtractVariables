{
  "id" : 63,
  "expression" : "mq",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/test/java/org/apache/rocketmq/test/client/consumer/filter/SqlFilterIT.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mq",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 105,
      "startColumnNumber" : 38,
      "endLineNumber" : 105,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 105,
        "startColumnNumber" : 24,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumer.pull(mq,selector,getMessageQueueOffset(mq),32)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 104,
        "startColumnNumber" : 31,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 83
      },
      "nodeContext" : "PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 942,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n  putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:    List<MessageExt> msgs=pullResult.getMsgFoundList();\n  for (  MessageExt msg : msgs) {\n    receivedMessage.add(new String(msg.getBody()));\n  }\nbreak;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n  putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:    List<MessageExt> msgs=pullResult.getMsgFoundList();\n  for (  MessageExt msg : msgs) {\n    receivedMessage.add(new String(msg.getBody()));\n  }\nbreak;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 102,
        "startColumnNumber" : 25,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 83,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "SINGLE_MQ: while (true) {\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1119,
        "startLineNumber" : 100,
        "startColumnNumber" : 36,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SINGLE_MQ:   while (true) {\n    try {\n      PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n      putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:        List<MessageExt> msgs=pullResult.getMsgFoundList();\n      for (      MessageExt msg : msgs) {\n        receivedMessage.add(new String(msg.getBody()));\n      }\n    break;\ncase NO_MATCHED_MSG:  break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (MessageQueue mq : mqs) {\n  SINGLE_MQ:   while (true) {\n    try {\n      PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n      putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:        List<MessageExt> msgs=pullResult.getMsgFoundList();\n      for (      MessageExt msg : msgs) {\n        receivedMessage.add(new String(msg.getBody()));\n      }\n    break;\ncase NO_MATCHED_MSG:  break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 92,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 84,
        "startColumnNumber" : 58,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgSize=16;\n  String group=initConsumerGroup();\n  MessageSelector selector=MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\");\n  DefaultMQPullConsumer consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(nsAddr);\n  consumer.start();\n  Thread.sleep(3000);\n  producer.send(\"TagA\",msgSize);\n  producer.send(\"TagB\",msgSize);\n  producer.send(\"TagC\",msgSize);\n  Assert.assertEquals(\"Not all sent succeeded\",msgSize * 3,producer.getAllUndupMsgBody().size());\n  List<String> receivedMessage=new ArrayList<>(2);\n  Set<MessageQueue> mqs=consumer.fetchSubscribeMessageQueues(topic);\n  for (  MessageQueue mq : mqs) {\n    SINGLE_MQ:     while (true) {\n      try {\n        PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n        putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          List<MessageExt> msgs=pullResult.getMsgFoundList();\n        for (        MessageExt msg : msgs) {\n          receivedMessage.add(new String(msg.getBody()));\n        }\n      break;\ncase NO_MATCHED_MSG:    break;\ncase NO_NEW_MSG:  break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\nassertThat(receivedMessage.size()).isEqualTo(msgSize * 2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2008,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFilterPullConsumer() throws Exception {\n  int msgSize=16;\n  String group=initConsumerGroup();\n  MessageSelector selector=MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\");\n  DefaultMQPullConsumer consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(nsAddr);\n  consumer.start();\n  Thread.sleep(3000);\n  producer.send(\"TagA\",msgSize);\n  producer.send(\"TagB\",msgSize);\n  producer.send(\"TagC\",msgSize);\n  Assert.assertEquals(\"Not all sent succeeded\",msgSize * 3,producer.getAllUndupMsgBody().size());\n  List<String> receivedMessage=new ArrayList<>(2);\n  Set<MessageQueue> mqs=consumer.fetchSubscribeMessageQueues(topic);\n  for (  MessageQueue mq : mqs) {\n    SINGLE_MQ:     while (true) {\n      try {\n        PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n        putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          List<MessageExt> msgs=pullResult.getMsgFoundList();\n        for (        MessageExt msg : msgs) {\n          receivedMessage.add(new String(msg.getBody()));\n        }\n      break;\ncase NO_MATCHED_MSG:    break;\ncase NO_NEW_MSG:  break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\nassertThat(receivedMessage.size()).isEqualTo(msgSize * 2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 105,
        "startColumnNumber" : 24,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumer.pull(mq,selector,getMessageQueueOffset(mq),32)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.common.message.MessageQueue"
  }, {
    "nodeContext" : "mq",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 105,
      "startColumnNumber" : 74,
      "endLineNumber" : 105,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 105,
        "startColumnNumber" : 52,
        "endLineNumber" : 105,
        "endColumnNumber" : 77
      },
      "nodeContext" : "getMessageQueueOffset(mq)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 105,
        "startColumnNumber" : 24,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumer.pull(mq,selector,getMessageQueueOffset(mq),32)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 104,
        "startColumnNumber" : 31,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 83
      },
      "nodeContext" : "PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 942,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n  putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:    List<MessageExt> msgs=pullResult.getMsgFoundList();\n  for (  MessageExt msg : msgs) {\n    receivedMessage.add(new String(msg.getBody()));\n  }\nbreak;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n  putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:    List<MessageExt> msgs=pullResult.getMsgFoundList();\n  for (  MessageExt msg : msgs) {\n    receivedMessage.add(new String(msg.getBody()));\n  }\nbreak;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 102,
        "startColumnNumber" : 25,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 83,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "SINGLE_MQ: while (true) {\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1119,
        "startLineNumber" : 100,
        "startColumnNumber" : 36,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SINGLE_MQ:   while (true) {\n    try {\n      PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n      putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:        List<MessageExt> msgs=pullResult.getMsgFoundList();\n      for (      MessageExt msg : msgs) {\n        receivedMessage.add(new String(msg.getBody()));\n      }\n    break;\ncase NO_MATCHED_MSG:  break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (MessageQueue mq : mqs) {\n  SINGLE_MQ:   while (true) {\n    try {\n      PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n      putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:        List<MessageExt> msgs=pullResult.getMsgFoundList();\n      for (      MessageExt msg : msgs) {\n        receivedMessage.add(new String(msg.getBody()));\n      }\n    break;\ncase NO_MATCHED_MSG:  break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 92,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 84,
        "startColumnNumber" : 58,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgSize=16;\n  String group=initConsumerGroup();\n  MessageSelector selector=MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\");\n  DefaultMQPullConsumer consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(nsAddr);\n  consumer.start();\n  Thread.sleep(3000);\n  producer.send(\"TagA\",msgSize);\n  producer.send(\"TagB\",msgSize);\n  producer.send(\"TagC\",msgSize);\n  Assert.assertEquals(\"Not all sent succeeded\",msgSize * 3,producer.getAllUndupMsgBody().size());\n  List<String> receivedMessage=new ArrayList<>(2);\n  Set<MessageQueue> mqs=consumer.fetchSubscribeMessageQueues(topic);\n  for (  MessageQueue mq : mqs) {\n    SINGLE_MQ:     while (true) {\n      try {\n        PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n        putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          List<MessageExt> msgs=pullResult.getMsgFoundList();\n        for (        MessageExt msg : msgs) {\n          receivedMessage.add(new String(msg.getBody()));\n        }\n      break;\ncase NO_MATCHED_MSG:    break;\ncase NO_NEW_MSG:  break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\nassertThat(receivedMessage.size()).isEqualTo(msgSize * 2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2008,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFilterPullConsumer() throws Exception {\n  int msgSize=16;\n  String group=initConsumerGroup();\n  MessageSelector selector=MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\");\n  DefaultMQPullConsumer consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(nsAddr);\n  consumer.start();\n  Thread.sleep(3000);\n  producer.send(\"TagA\",msgSize);\n  producer.send(\"TagB\",msgSize);\n  producer.send(\"TagC\",msgSize);\n  Assert.assertEquals(\"Not all sent succeeded\",msgSize * 3,producer.getAllUndupMsgBody().size());\n  List<String> receivedMessage=new ArrayList<>(2);\n  Set<MessageQueue> mqs=consumer.fetchSubscribeMessageQueues(topic);\n  for (  MessageQueue mq : mqs) {\n    SINGLE_MQ:     while (true) {\n      try {\n        PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n        putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          List<MessageExt> msgs=pullResult.getMsgFoundList();\n        for (        MessageExt msg : msgs) {\n          receivedMessage.add(new String(msg.getBody()));\n        }\n      break;\ncase NO_MATCHED_MSG:    break;\ncase NO_NEW_MSG:  break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\nassertThat(receivedMessage.size()).isEqualTo(msgSize * 2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 105,
        "startColumnNumber" : 24,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "consumer.pull(mq,selector,getMessageQueueOffset(mq),32)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.common.message.MessageQueue"
  }, {
    "nodeContext" : "mq",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 106,
      "startColumnNumber" : 42,
      "endLineNumber" : 106,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 78
      },
      "nodeContext" : "putMessageQueueOffset(mq,pullResult.getNextBeginOffset())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 79
      },
      "nodeContext" : "putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 942,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n  putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:    List<MessageExt> msgs=pullResult.getMsgFoundList();\n  for (  MessageExt msg : msgs) {\n    receivedMessage.add(new String(msg.getBody()));\n  }\nbreak;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1027,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n  putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:    List<MessageExt> msgs=pullResult.getMsgFoundList();\n  for (  MessageExt msg : msgs) {\n    receivedMessage.add(new String(msg.getBody()));\n  }\nbreak;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 102,
        "startColumnNumber" : 25,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 83,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1095,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 13
      },
      "nodeContext" : "SINGLE_MQ: while (true) {\n  try {\n    PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n    putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:      List<MessageExt> msgs=pullResult.getMsgFoundList();\n    for (    MessageExt msg : msgs) {\n      receivedMessage.add(new String(msg.getBody()));\n    }\n  break;\ncase NO_MATCHED_MSG:break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1119,
        "startLineNumber" : 100,
        "startColumnNumber" : 36,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SINGLE_MQ:   while (true) {\n    try {\n      PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n      putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:        List<MessageExt> msgs=pullResult.getMsgFoundList();\n      for (      MessageExt msg : msgs) {\n        receivedMessage.add(new String(msg.getBody()));\n      }\n    break;\ncase NO_MATCHED_MSG:  break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (MessageQueue mq : mqs) {\n  SINGLE_MQ:   while (true) {\n    try {\n      PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n      putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:        List<MessageExt> msgs=pullResult.getMsgFoundList();\n      for (      MessageExt msg : msgs) {\n        receivedMessage.add(new String(msg.getBody()));\n      }\n    break;\ncase NO_MATCHED_MSG:  break;\ncase NO_NEW_MSG:break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 92,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 84,
        "startColumnNumber" : 58,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int msgSize=16;\n  String group=initConsumerGroup();\n  MessageSelector selector=MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\");\n  DefaultMQPullConsumer consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(nsAddr);\n  consumer.start();\n  Thread.sleep(3000);\n  producer.send(\"TagA\",msgSize);\n  producer.send(\"TagB\",msgSize);\n  producer.send(\"TagC\",msgSize);\n  Assert.assertEquals(\"Not all sent succeeded\",msgSize * 3,producer.getAllUndupMsgBody().size());\n  List<String> receivedMessage=new ArrayList<>(2);\n  Set<MessageQueue> mqs=consumer.fetchSubscribeMessageQueues(topic);\n  for (  MessageQueue mq : mqs) {\n    SINGLE_MQ:     while (true) {\n      try {\n        PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n        putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          List<MessageExt> msgs=pullResult.getMsgFoundList();\n        for (        MessageExt msg : msgs) {\n          receivedMessage.add(new String(msg.getBody()));\n        }\n      break;\ncase NO_MATCHED_MSG:    break;\ncase NO_NEW_MSG:  break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\nassertThat(receivedMessage.size()).isEqualTo(msgSize * 2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2008,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFilterPullConsumer() throws Exception {\n  int msgSize=16;\n  String group=initConsumerGroup();\n  MessageSelector selector=MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\");\n  DefaultMQPullConsumer consumer=new DefaultMQPullConsumer(group);\n  consumer.setNamesrvAddr(nsAddr);\n  consumer.start();\n  Thread.sleep(3000);\n  producer.send(\"TagA\",msgSize);\n  producer.send(\"TagB\",msgSize);\n  producer.send(\"TagC\",msgSize);\n  Assert.assertEquals(\"Not all sent succeeded\",msgSize * 3,producer.getAllUndupMsgBody().size());\n  List<String> receivedMessage=new ArrayList<>(2);\n  Set<MessageQueue> mqs=consumer.fetchSubscribeMessageQueues(topic);\n  for (  MessageQueue mq : mqs) {\n    SINGLE_MQ:     while (true) {\n      try {\n        PullResult pullResult=consumer.pull(mq,selector,getMessageQueueOffset(mq),32);\n        putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          List<MessageExt> msgs=pullResult.getMsgFoundList();\n        for (        MessageExt msg : msgs) {\n          receivedMessage.add(new String(msg.getBody()));\n        }\n      break;\ncase NO_MATCHED_MSG:    break;\ncase NO_NEW_MSG:  break SINGLE_MQ;\ncase OFFSET_ILLEGAL:break;\ndefault:break;\n}\n}\n catch (Exception e) {\ne.printStackTrace();\n}\n}\n}\nassertThat(receivedMessage.size()).isEqualTo(msgSize * 2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 79
      },
      "nodeContext" : "putMessageQueueOffset(mq,pullResult.getNextBeginOffset());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.common.message.MessageQueue"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 105,
    "startColumnNumber" : 38,
    "endLineNumber" : 105,
    "endColumnNumber" : 40
  }, {
    "charLength" : 2,
    "startLineNumber" : 105,
    "startColumnNumber" : 74,
    "endLineNumber" : 105,
    "endColumnNumber" : 76
  }, {
    "charLength" : 2,
    "startLineNumber" : 106,
    "startColumnNumber" : 42,
    "endLineNumber" : 106,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}