{
  "id" : 277,
  "expression" : "overflowHideButton",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/ui/src/main/java/com/google/android/exoplayer2/ui/StyledPlayerControlViewLayoutManager.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "overflowHideButton",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 120,
      "startColumnNumber" : 38,
      "endLineNumber" : 120,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 120,
        "startColumnNumber" : 38,
        "endLineNumber" : 120,
        "endColumnNumber" : 64
      },
      "nodeContext" : "overflowHideButton != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 64
      },
      "nodeContext" : "overflowShowButton != null && overflowHideButton != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (overflowShowButton != null && overflowHideButton != null) {\n  overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n  overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10514,
        "startLineNumber" : 87,
        "startColumnNumber" : 95,
        "endLineNumber" : 352,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.styledPlayerControlView=styledPlayerControlView;\n  showAllBarsRunnable=this::showAllBars;\n  hideAllBarsRunnable=this::hideAllBars;\n  hideProgressBarRunnable=this::hideProgressBar;\n  hideMainBarRunnable=this::hideMainBar;\n  hideControllerRunnable=this::hideController;\n  onLayoutChangeListener=this::onLayoutChange;\n  animationEnabled=true;\n  uxState=UX_STATE_ALL_VISIBLE;\n  shownButtons=new ArrayList<>();\n  controlsBackground=styledPlayerControlView.findViewById(R.id.exo_controls_background);\n  centerControls=styledPlayerControlView.findViewById(R.id.exo_center_controls);\n  minimalControls=styledPlayerControlView.findViewById(R.id.exo_minimal_controls);\n  bottomBar=styledPlayerControlView.findViewById(R.id.exo_bottom_bar);\n  timeView=styledPlayerControlView.findViewById(R.id.exo_time);\n  timeBar=styledPlayerControlView.findViewById(R.id.exo_progress);\n  basicControls=styledPlayerControlView.findViewById(R.id.exo_basic_controls);\n  extraControls=styledPlayerControlView.findViewById(R.id.exo_extra_controls);\n  extraControlsScrollView=styledPlayerControlView.findViewById(R.id.exo_extra_controls_scroll_view);\n  overflowShowButton=styledPlayerControlView.findViewById(R.id.exo_overflow_show);\n  View overflowHideButton=styledPlayerControlView.findViewById(R.id.exo_overflow_hide);\n  if (overflowShowButton != null && overflowHideButton != null) {\n    overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n    overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n  }\n  ValueAnimator fadeOutAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  fadeOutAnimator.setInterpolator(new LinearInterpolator());\n  fadeOutAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeOutAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).hideScrubber(DURATION_FOR_HIDING_ANIMATION_MS);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.INVISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.INVISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  ValueAnimator fadeInAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  fadeInAnimator.setInterpolator(new LinearInterpolator());\n  fadeInAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeInAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.VISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.VISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(isMinimalMode ? View.VISIBLE : View.INVISIBLE);\n      }\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).showScrubber(DURATION_FOR_SHOWING_ANIMATION_MS);\n      }\n    }\n  }\n);\n  Resources resources=styledPlayerControlView.getResources();\n  float translationYForProgressBar=resources.getDimension(R.dimen.exo_styled_bottom_bar_height) - resources.getDimension(R.dimen.exo_styled_progress_bar_height);\n  float translationYForNoBars=resources.getDimension(R.dimen.exo_styled_bottom_bar_height);\n  hideMainBarAnimator=new AnimatorSet();\n  hideMainBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ONLY_PROGRESS_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideMainBarAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForProgressBar,timeBar)).with(ofTranslationY(0,translationYForProgressBar,bottomBar));\n  hideProgressBarAnimator=new AnimatorSet();\n  hideProgressBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideProgressBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideProgressBarAnimator.play(ofTranslationY(translationYForProgressBar,translationYForNoBars,timeBar)).with(ofTranslationY(translationYForProgressBar,translationYForNoBars,bottomBar));\n  hideAllBarsAnimator=new AnimatorSet();\n  hideAllBarsAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideAllBarsAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForNoBars,timeBar)).with(ofTranslationY(0,translationYForNoBars,bottomBar));\n  showMainBarAnimator=new AnimatorSet();\n  showMainBarAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showMainBarAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForProgressBar,0,timeBar)).with(ofTranslationY(translationYForProgressBar,0,bottomBar));\n  showAllBarsAnimator=new AnimatorSet();\n  showAllBarsAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showAllBarsAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForNoBars,0,timeBar)).with(ofTranslationY(translationYForNoBars,0,bottomBar));\n  overflowShowAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  overflowShowAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowShowAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowShowAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.VISIBLE);\n        extraControlsScrollView.setTranslationX(extraControlsScrollView.getWidth());\n        extraControlsScrollView.scrollTo(extraControlsScrollView.getWidth(),0);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  overflowHideAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  overflowHideAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowHideAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowHideAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.VISIBLE);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1085,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10696,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 352,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings({\"nullness:method.invocation\",\"nullness:methodref.receiver.bound\"}) public StyledPlayerControlViewLayoutManager(StyledPlayerControlView styledPlayerControlView){\n  this.styledPlayerControlView=styledPlayerControlView;\n  showAllBarsRunnable=this::showAllBars;\n  hideAllBarsRunnable=this::hideAllBars;\n  hideProgressBarRunnable=this::hideProgressBar;\n  hideMainBarRunnable=this::hideMainBar;\n  hideControllerRunnable=this::hideController;\n  onLayoutChangeListener=this::onLayoutChange;\n  animationEnabled=true;\n  uxState=UX_STATE_ALL_VISIBLE;\n  shownButtons=new ArrayList<>();\n  controlsBackground=styledPlayerControlView.findViewById(R.id.exo_controls_background);\n  centerControls=styledPlayerControlView.findViewById(R.id.exo_center_controls);\n  minimalControls=styledPlayerControlView.findViewById(R.id.exo_minimal_controls);\n  bottomBar=styledPlayerControlView.findViewById(R.id.exo_bottom_bar);\n  timeView=styledPlayerControlView.findViewById(R.id.exo_time);\n  timeBar=styledPlayerControlView.findViewById(R.id.exo_progress);\n  basicControls=styledPlayerControlView.findViewById(R.id.exo_basic_controls);\n  extraControls=styledPlayerControlView.findViewById(R.id.exo_extra_controls);\n  extraControlsScrollView=styledPlayerControlView.findViewById(R.id.exo_extra_controls_scroll_view);\n  overflowShowButton=styledPlayerControlView.findViewById(R.id.exo_overflow_show);\n  View overflowHideButton=styledPlayerControlView.findViewById(R.id.exo_overflow_hide);\n  if (overflowShowButton != null && overflowHideButton != null) {\n    overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n    overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n  }\n  ValueAnimator fadeOutAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  fadeOutAnimator.setInterpolator(new LinearInterpolator());\n  fadeOutAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeOutAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).hideScrubber(DURATION_FOR_HIDING_ANIMATION_MS);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.INVISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.INVISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  ValueAnimator fadeInAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  fadeInAnimator.setInterpolator(new LinearInterpolator());\n  fadeInAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeInAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.VISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.VISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(isMinimalMode ? View.VISIBLE : View.INVISIBLE);\n      }\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).showScrubber(DURATION_FOR_SHOWING_ANIMATION_MS);\n      }\n    }\n  }\n);\n  Resources resources=styledPlayerControlView.getResources();\n  float translationYForProgressBar=resources.getDimension(R.dimen.exo_styled_bottom_bar_height) - resources.getDimension(R.dimen.exo_styled_progress_bar_height);\n  float translationYForNoBars=resources.getDimension(R.dimen.exo_styled_bottom_bar_height);\n  hideMainBarAnimator=new AnimatorSet();\n  hideMainBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ONLY_PROGRESS_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideMainBarAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForProgressBar,timeBar)).with(ofTranslationY(0,translationYForProgressBar,bottomBar));\n  hideProgressBarAnimator=new AnimatorSet();\n  hideProgressBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideProgressBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideProgressBarAnimator.play(ofTranslationY(translationYForProgressBar,translationYForNoBars,timeBar)).with(ofTranslationY(translationYForProgressBar,translationYForNoBars,bottomBar));\n  hideAllBarsAnimator=new AnimatorSet();\n  hideAllBarsAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideAllBarsAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForNoBars,timeBar)).with(ofTranslationY(0,translationYForNoBars,bottomBar));\n  showMainBarAnimator=new AnimatorSet();\n  showMainBarAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showMainBarAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForProgressBar,0,timeBar)).with(ofTranslationY(translationYForProgressBar,0,bottomBar));\n  showAllBarsAnimator=new AnimatorSet();\n  showAllBarsAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showAllBarsAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForNoBars,0,timeBar)).with(ofTranslationY(translationYForNoBars,0,bottomBar));\n  overflowShowAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  overflowShowAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowShowAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowShowAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.VISIBLE);\n        extraControlsScrollView.setTranslationX(extraControlsScrollView.getWidth());\n        extraControlsScrollView.scrollTo(extraControlsScrollView.getWidth(),0);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  overflowHideAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  overflowHideAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowHideAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowHideAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.VISIBLE);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1097,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 64
      },
      "nodeContext" : "overflowShowButton != null && overflowHideButton != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.ui.View"
  }, {
    "nodeContext" : "overflowHideButton",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 122,
      "startColumnNumber" : 6,
      "endLineNumber" : 122,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 122,
        "endColumnNumber" : 72
      },
      "nodeContext" : "overflowHideButton.setOnClickListener(this::onOverflowButtonClick)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 122,
        "endColumnNumber" : 73
      },
      "nodeContext" : "overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 120,
        "startColumnNumber" : 66,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n  overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (overflowShowButton != null && overflowHideButton != null) {\n  overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n  overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10514,
        "startLineNumber" : 87,
        "startColumnNumber" : 95,
        "endLineNumber" : 352,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.styledPlayerControlView=styledPlayerControlView;\n  showAllBarsRunnable=this::showAllBars;\n  hideAllBarsRunnable=this::hideAllBars;\n  hideProgressBarRunnable=this::hideProgressBar;\n  hideMainBarRunnable=this::hideMainBar;\n  hideControllerRunnable=this::hideController;\n  onLayoutChangeListener=this::onLayoutChange;\n  animationEnabled=true;\n  uxState=UX_STATE_ALL_VISIBLE;\n  shownButtons=new ArrayList<>();\n  controlsBackground=styledPlayerControlView.findViewById(R.id.exo_controls_background);\n  centerControls=styledPlayerControlView.findViewById(R.id.exo_center_controls);\n  minimalControls=styledPlayerControlView.findViewById(R.id.exo_minimal_controls);\n  bottomBar=styledPlayerControlView.findViewById(R.id.exo_bottom_bar);\n  timeView=styledPlayerControlView.findViewById(R.id.exo_time);\n  timeBar=styledPlayerControlView.findViewById(R.id.exo_progress);\n  basicControls=styledPlayerControlView.findViewById(R.id.exo_basic_controls);\n  extraControls=styledPlayerControlView.findViewById(R.id.exo_extra_controls);\n  extraControlsScrollView=styledPlayerControlView.findViewById(R.id.exo_extra_controls_scroll_view);\n  overflowShowButton=styledPlayerControlView.findViewById(R.id.exo_overflow_show);\n  View overflowHideButton=styledPlayerControlView.findViewById(R.id.exo_overflow_hide);\n  if (overflowShowButton != null && overflowHideButton != null) {\n    overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n    overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n  }\n  ValueAnimator fadeOutAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  fadeOutAnimator.setInterpolator(new LinearInterpolator());\n  fadeOutAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeOutAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).hideScrubber(DURATION_FOR_HIDING_ANIMATION_MS);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.INVISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.INVISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  ValueAnimator fadeInAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  fadeInAnimator.setInterpolator(new LinearInterpolator());\n  fadeInAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeInAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.VISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.VISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(isMinimalMode ? View.VISIBLE : View.INVISIBLE);\n      }\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).showScrubber(DURATION_FOR_SHOWING_ANIMATION_MS);\n      }\n    }\n  }\n);\n  Resources resources=styledPlayerControlView.getResources();\n  float translationYForProgressBar=resources.getDimension(R.dimen.exo_styled_bottom_bar_height) - resources.getDimension(R.dimen.exo_styled_progress_bar_height);\n  float translationYForNoBars=resources.getDimension(R.dimen.exo_styled_bottom_bar_height);\n  hideMainBarAnimator=new AnimatorSet();\n  hideMainBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ONLY_PROGRESS_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideMainBarAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForProgressBar,timeBar)).with(ofTranslationY(0,translationYForProgressBar,bottomBar));\n  hideProgressBarAnimator=new AnimatorSet();\n  hideProgressBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideProgressBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideProgressBarAnimator.play(ofTranslationY(translationYForProgressBar,translationYForNoBars,timeBar)).with(ofTranslationY(translationYForProgressBar,translationYForNoBars,bottomBar));\n  hideAllBarsAnimator=new AnimatorSet();\n  hideAllBarsAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideAllBarsAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForNoBars,timeBar)).with(ofTranslationY(0,translationYForNoBars,bottomBar));\n  showMainBarAnimator=new AnimatorSet();\n  showMainBarAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showMainBarAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForProgressBar,0,timeBar)).with(ofTranslationY(translationYForProgressBar,0,bottomBar));\n  showAllBarsAnimator=new AnimatorSet();\n  showAllBarsAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showAllBarsAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForNoBars,0,timeBar)).with(ofTranslationY(translationYForNoBars,0,bottomBar));\n  overflowShowAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  overflowShowAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowShowAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowShowAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.VISIBLE);\n        extraControlsScrollView.setTranslationX(extraControlsScrollView.getWidth());\n        extraControlsScrollView.scrollTo(extraControlsScrollView.getWidth(),0);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  overflowHideAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  overflowHideAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowHideAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowHideAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.VISIBLE);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1085,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10696,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 352,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings({\"nullness:method.invocation\",\"nullness:methodref.receiver.bound\"}) public StyledPlayerControlViewLayoutManager(StyledPlayerControlView styledPlayerControlView){\n  this.styledPlayerControlView=styledPlayerControlView;\n  showAllBarsRunnable=this::showAllBars;\n  hideAllBarsRunnable=this::hideAllBars;\n  hideProgressBarRunnable=this::hideProgressBar;\n  hideMainBarRunnable=this::hideMainBar;\n  hideControllerRunnable=this::hideController;\n  onLayoutChangeListener=this::onLayoutChange;\n  animationEnabled=true;\n  uxState=UX_STATE_ALL_VISIBLE;\n  shownButtons=new ArrayList<>();\n  controlsBackground=styledPlayerControlView.findViewById(R.id.exo_controls_background);\n  centerControls=styledPlayerControlView.findViewById(R.id.exo_center_controls);\n  minimalControls=styledPlayerControlView.findViewById(R.id.exo_minimal_controls);\n  bottomBar=styledPlayerControlView.findViewById(R.id.exo_bottom_bar);\n  timeView=styledPlayerControlView.findViewById(R.id.exo_time);\n  timeBar=styledPlayerControlView.findViewById(R.id.exo_progress);\n  basicControls=styledPlayerControlView.findViewById(R.id.exo_basic_controls);\n  extraControls=styledPlayerControlView.findViewById(R.id.exo_extra_controls);\n  extraControlsScrollView=styledPlayerControlView.findViewById(R.id.exo_extra_controls_scroll_view);\n  overflowShowButton=styledPlayerControlView.findViewById(R.id.exo_overflow_show);\n  View overflowHideButton=styledPlayerControlView.findViewById(R.id.exo_overflow_hide);\n  if (overflowShowButton != null && overflowHideButton != null) {\n    overflowShowButton.setOnClickListener(this::onOverflowButtonClick);\n    overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n  }\n  ValueAnimator fadeOutAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  fadeOutAnimator.setInterpolator(new LinearInterpolator());\n  fadeOutAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeOutAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).hideScrubber(DURATION_FOR_HIDING_ANIMATION_MS);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.INVISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.INVISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  ValueAnimator fadeInAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  fadeInAnimator.setInterpolator(new LinearInterpolator());\n  fadeInAnimator.addUpdateListener(animation -> {\n    float animatedValue=(float)animation.getAnimatedValue();\n    if (controlsBackground != null) {\n      controlsBackground.setAlpha(animatedValue);\n    }\n    if (centerControls != null) {\n      centerControls.setAlpha(animatedValue);\n    }\n    if (minimalControls != null) {\n      minimalControls.setAlpha(animatedValue);\n    }\n  }\n);\n  fadeInAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (controlsBackground != null) {\n        controlsBackground.setVisibility(View.VISIBLE);\n      }\n      if (centerControls != null) {\n        centerControls.setVisibility(View.VISIBLE);\n      }\n      if (minimalControls != null) {\n        minimalControls.setVisibility(isMinimalMode ? View.VISIBLE : View.INVISIBLE);\n      }\n      if (timeBar instanceof DefaultTimeBar && !isMinimalMode) {\n        ((DefaultTimeBar)timeBar).showScrubber(DURATION_FOR_SHOWING_ANIMATION_MS);\n      }\n    }\n  }\n);\n  Resources resources=styledPlayerControlView.getResources();\n  float translationYForProgressBar=resources.getDimension(R.dimen.exo_styled_bottom_bar_height) - resources.getDimension(R.dimen.exo_styled_progress_bar_height);\n  float translationYForNoBars=resources.getDimension(R.dimen.exo_styled_bottom_bar_height);\n  hideMainBarAnimator=new AnimatorSet();\n  hideMainBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ONLY_PROGRESS_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideMainBarAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForProgressBar,timeBar)).with(ofTranslationY(0,translationYForProgressBar,bottomBar));\n  hideProgressBarAnimator=new AnimatorSet();\n  hideProgressBarAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideProgressBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideProgressBarAnimator.play(ofTranslationY(translationYForProgressBar,translationYForNoBars,timeBar)).with(ofTranslationY(translationYForProgressBar,translationYForNoBars,bottomBar));\n  hideAllBarsAnimator=new AnimatorSet();\n  hideAllBarsAnimator.setDuration(DURATION_FOR_HIDING_ANIMATION_MS);\n  hideAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_HIDE);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_NONE_VISIBLE);\n      if (needToShowBars) {\n        styledPlayerControlView.post(showAllBarsRunnable);\n        needToShowBars=false;\n      }\n    }\n  }\n);\n  hideAllBarsAnimator.play(fadeOutAnimator).with(ofTranslationY(0,translationYForNoBars,timeBar)).with(ofTranslationY(0,translationYForNoBars,bottomBar));\n  showMainBarAnimator=new AnimatorSet();\n  showMainBarAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showMainBarAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showMainBarAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForProgressBar,0,timeBar)).with(ofTranslationY(translationYForProgressBar,0,bottomBar));\n  showAllBarsAnimator=new AnimatorSet();\n  showAllBarsAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  showAllBarsAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      setUxState(UX_STATE_ANIMATING_SHOW);\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      setUxState(UX_STATE_ALL_VISIBLE);\n    }\n  }\n);\n  showAllBarsAnimator.play(fadeInAnimator).with(ofTranslationY(translationYForNoBars,0,timeBar)).with(ofTranslationY(translationYForNoBars,0,bottomBar));\n  overflowShowAnimator=ValueAnimator.ofFloat(0.0f,1.0f);\n  overflowShowAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowShowAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowShowAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.VISIBLE);\n        extraControlsScrollView.setTranslationX(extraControlsScrollView.getWidth());\n        extraControlsScrollView.scrollTo(extraControlsScrollView.getWidth(),0);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n  overflowHideAnimator=ValueAnimator.ofFloat(1.0f,0.0f);\n  overflowHideAnimator.setDuration(DURATION_FOR_SHOWING_ANIMATION_MS);\n  overflowHideAnimator.addUpdateListener(animation -> animateOverflow((float)animation.getAnimatedValue()));\n  overflowHideAnimator.addListener(new AnimatorListenerAdapter(){\n    @Override public void onAnimationStart(    Animator animation){\n      if (basicControls != null) {\n        basicControls.setVisibility(View.VISIBLE);\n      }\n    }\n    @Override public void onAnimationEnd(    Animator animation){\n      if (extraControlsScrollView != null) {\n        extraControlsScrollView.setVisibility(View.INVISIBLE);\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1097,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 122,
        "startColumnNumber" : 6,
        "endLineNumber" : 122,
        "endColumnNumber" : 73
      },
      "nodeContext" : "overflowHideButton.setOnClickListener(this::onOverflowButtonClick);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.ui.View"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 120,
    "startColumnNumber" : 38,
    "endLineNumber" : 120,
    "endColumnNumber" : 56
  }, {
    "charLength" : 18,
    "startLineNumber" : 122,
    "startColumnNumber" : 6,
    "endLineNumber" : 122,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}