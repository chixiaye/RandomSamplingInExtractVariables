{
  "id" : 477,
  "expression" : "Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n  @Override public Integer apply(  Integer v){\n    return v;\n  }\n}\n)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableReduceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n  @Override public Integer apply(  Integer v){\n    return v;\n  }\n}\n)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 264,
      "startLineNumber" : 45,
      "startColumnNumber" : 35,
      "endLineNumber" : 51,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 37,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 45,
        "startColumnNumber" : 26,
        "endLineNumber" : 51,
        "endColumnNumber" : 18
      },
      "nodeContext" : "result=Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n  @Override public Integer apply(  Integer v){\n    return v;\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Flowable<Integer> result=Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n  @Override public Integer apply(  Integer v){\n    return v;\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 43,
        "startColumnNumber" : 40,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Flowable<Integer> result=Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n    @Override public Integer apply(    Integer v){\n      return v;\n    }\n  }\n);\n  result.subscribe(observer);\n  verify(observer).onNext(1 + 2 + 3+ 4+ 5);\n  verify(observer).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 559,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAggregateAsIntSum(){\n  Flowable<Integer> result=Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n    @Override public Integer apply(    Integer v){\n      return v;\n    }\n  }\n);\n  result.subscribe(observer);\n  verify(observer).onNext(1 + 2 + 3+ 4+ 5);\n  verify(observer).onComplete();\n  verify(observer,never()).onError(any(Throwable.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 88,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 292,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Flowable<Integer> result=Flowable.just(1,2,3,4,5).reduce(0,sum).map(new Function<Integer,Integer>(){\n  @Override public Integer apply(  Integer v){\n    return v;\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 9
    },
    "tokenLength" : 19,
    "type" : "io.reactivex.Flowable<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 264,
    "startLineNumber" : 45,
    "startColumnNumber" : 35,
    "endLineNumber" : 51,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}