{
  "id" : 141,
  "expression" : "Util",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/test/java/com/google/android/exoplayer2/text/SubtitleExtractorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Util",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 55,
      "startColumnNumber" : 21,
      "endLineNumber" : 55,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 55,
        "startColumnNumber" : 21,
        "endLineNumber" : 55,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Util.getUtf8Bytes(TEST_DATA)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 50
      },
      "nodeContext" : "new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 42
      },
      "nodeContext" : "new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA)).setSimulatePartialReads(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 54,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 20
      },
      "nodeContext" : "new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA)).setSimulatePartialReads(true).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 53,
        "startColumnNumber" : 23,
        "endLineNumber" : 57,
        "endColumnNumber" : 20
      },
      "nodeContext" : "input=new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA)).setSimulatePartialReads(true).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 21
      },
      "nodeContext" : "FakeExtractorInput input=new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA)).setSimulatePartialReads(true).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2395,
        "startLineNumber" : 50,
        "startColumnNumber" : 55,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CueDecoder decoder=new CueDecoder();\n  FakeExtractorOutput output=new FakeExtractorOutput();\n  FakeExtractorInput input=new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA)).setSimulatePartialReads(true).build();\n  SubtitleExtractor extractor=new SubtitleExtractor(new WebvttDecoder(),new Format.Builder().setSampleMimeType(MimeTypes.TEXT_VTT).build());\n  extractor.init(output);\n  while (extractor.read(input,null) != Extractor.RESULT_END_OF_INPUT) {\n  }\n  FakeTrackOutput trackOutput=output.trackOutputs.get(0);\n  assertThat(trackOutput.lastFormat.sampleMimeType).isEqualTo(MimeTypes.TEXT_EXOPLAYER_CUES);\n  assertThat(trackOutput.lastFormat.codecs).isEqualTo(MimeTypes.TEXT_VTT);\n  assertThat(trackOutput.getSampleCount()).isEqualTo(6);\n  assertThat(trackOutput.getSampleTimeUs(0)).isEqualTo(0L);\n  assertThat(trackOutput.getSampleTimeUs(1)).isEqualTo(1_234_000L);\n  assertThat(trackOutput.getSampleTimeUs(2)).isEqualTo(2_345_000L);\n  assertThat(trackOutput.getSampleTimeUs(3)).isEqualTo(2_600_000L);\n  assertThat(trackOutput.getSampleTimeUs(4)).isEqualTo(3_456_000L);\n  assertThat(trackOutput.getSampleTimeUs(5)).isEqualTo(4_567_000L);\n  List<Cue> cues0=decoder.decode(trackOutput.getSampleData(0));\n  assertThat(cues0).hasSize(1);\n  assertThat(cues0.get(0).text.toString()).isEqualTo(\"This is the first subtitle.\");\n  List<Cue> cues1=decoder.decode(trackOutput.getSampleData(1));\n  assertThat(cues1).isEmpty();\n  List<Cue> cues2=decoder.decode(trackOutput.getSampleData(2));\n  assertThat(cues2).hasSize(1);\n  assertThat(cues2.get(0).text.toString()).isEqualTo(\"This is the second subtitle.\");\n  List<Cue> cues3=decoder.decode(trackOutput.getSampleData(3));\n  assertThat(cues3).hasSize(2);\n  assertThat(cues3.get(0).text.toString()).isEqualTo(\"This is the second subtitle.\");\n  assertThat(cues3.get(1).text.toString()).isEqualTo(\"This is the third subtitle.\");\n  List<Cue> cues4=decoder.decode(trackOutput.getSampleData(4));\n  assertThat(cues4).hasSize(1);\n  assertThat(cues4.get(0).text.toString()).isEqualTo(\"This is the third subtitle.\");\n  List<Cue> cues5=decoder.decode(trackOutput.getSampleData(5));\n  assertThat(cues5).isEmpty();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2456,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void extractor_outputsCues() throws Exception {\n  CueDecoder decoder=new CueDecoder();\n  FakeExtractorOutput output=new FakeExtractorOutput();\n  FakeExtractorInput input=new FakeExtractorInput.Builder().setData(Util.getUtf8Bytes(TEST_DATA)).setSimulatePartialReads(true).build();\n  SubtitleExtractor extractor=new SubtitleExtractor(new WebvttDecoder(),new Format.Builder().setSampleMimeType(MimeTypes.TEXT_VTT).build());\n  extractor.init(output);\n  while (extractor.read(input,null) != Extractor.RESULT_END_OF_INPUT) {\n  }\n  FakeTrackOutput trackOutput=output.trackOutputs.get(0);\n  assertThat(trackOutput.lastFormat.sampleMimeType).isEqualTo(MimeTypes.TEXT_EXOPLAYER_CUES);\n  assertThat(trackOutput.lastFormat.codecs).isEqualTo(MimeTypes.TEXT_VTT);\n  assertThat(trackOutput.getSampleCount()).isEqualTo(6);\n  assertThat(trackOutput.getSampleTimeUs(0)).isEqualTo(0L);\n  assertThat(trackOutput.getSampleTimeUs(1)).isEqualTo(1_234_000L);\n  assertThat(trackOutput.getSampleTimeUs(2)).isEqualTo(2_345_000L);\n  assertThat(trackOutput.getSampleTimeUs(3)).isEqualTo(2_600_000L);\n  assertThat(trackOutput.getSampleTimeUs(4)).isEqualTo(3_456_000L);\n  assertThat(trackOutput.getSampleTimeUs(5)).isEqualTo(4_567_000L);\n  List<Cue> cues0=decoder.decode(trackOutput.getSampleData(0));\n  assertThat(cues0).hasSize(1);\n  assertThat(cues0.get(0).text.toString()).isEqualTo(\"This is the first subtitle.\");\n  List<Cue> cues1=decoder.decode(trackOutput.getSampleData(1));\n  assertThat(cues1).isEmpty();\n  List<Cue> cues2=decoder.decode(trackOutput.getSampleData(2));\n  assertThat(cues2).hasSize(1);\n  assertThat(cues2.get(0).text.toString()).isEqualTo(\"This is the second subtitle.\");\n  List<Cue> cues3=decoder.decode(trackOutput.getSampleData(3));\n  assertThat(cues3).hasSize(2);\n  assertThat(cues3.get(0).text.toString()).isEqualTo(\"This is the second subtitle.\");\n  assertThat(cues3.get(1).text.toString()).isEqualTo(\"This is the third subtitle.\");\n  List<Cue> cues4=decoder.decode(trackOutput.getSampleData(4));\n  assertThat(cues4).hasSize(1);\n  assertThat(cues4.get(0).text.toString()).isEqualTo(\"This is the third subtitle.\");\n  List<Cue> cues5=decoder.decode(trackOutput.getSampleData(5));\n  assertThat(cues5).isEmpty();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 391,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 55,
        "startColumnNumber" : 21,
        "endLineNumber" : 55,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Util.getUtf8Bytes(TEST_DATA)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.Util"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 55,
    "startColumnNumber" : 21,
    "endLineNumber" : 55,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}