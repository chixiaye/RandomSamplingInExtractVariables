{
  "id" : 155,
  "expression" : "canRetry",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/libsignal/service/src/main/java/org/whispersystems/signalservice/api/KeyBackupService.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "canRetry",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 187,
      "startColumnNumber" : 48,
      "endLineNumber" : 187,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 187,
        "startColumnNumber" : 18,
        "endLineNumber" : 187,
        "endColumnNumber" : 57
      },
      "nodeContext" : "new TokenException(nextToken,canRetry)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 58
      },
      "nodeContext" : "throw new TokenException(nextToken,canRetry);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1177,
        "startLineNumber" : 174,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (status.getStatus()) {\ncase OK:  KbsData kbsData=hashedPin.decryptKbsDataIVCipherText(status.getData().toByteArray());\nMasterKey masterKey=kbsData.getMasterKey();\nreturn new KbsPinData(masterKey,nextToken);\ncase PIN_MISMATCH:Log.i(TAG,\"Restore PIN_MISMATCH\");\nthrow new KeyBackupServicePinException(nextToken);\ncase TOKEN_MISMATCH:Log.i(TAG,\"Restore TOKEN_MISMATCH\");\nboolean canRetry=remainingTries == status.getTries();\nLog.i(TAG,String.format(Locale.US,\"Token MISMATCH %d %d\",remainingTries,status.getTries()));\nthrow new TokenException(nextToken,canRetry);\ncase MISSING:Log.i(TAG,\"Restore OK! No data though\");\nthrow new KeyBackupSystemNoDataException();\ncase NOT_YET_VALID:throw new UnauthenticatedResponseException(\"Key is not valid yet, clock mismatch\");\ndefault:throw new AssertionError(\"Unexpected case\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 110,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2057,
        "startLineNumber" : 162,
        "startColumnNumber" : 10,
        "endLineNumber" : 196,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final int remainingTries=token.getTries();\n  final RemoteAttestation remoteAttestation=getAndVerifyRemoteAttestation();\n  final KeyBackupRequest request=KeyBackupCipher.createKeyRestoreRequest(hashedPin.getKbsAccessKey(),token,remoteAttestation,serviceId);\n  final KeyBackupResponse response=pushServiceSocket.putKbsData(authorization,request,remoteAttestation.getCookies(),enclaveName);\n  final RestoreResponse status=KeyBackupCipher.getKeyRestoreResponse(response,remoteAttestation);\n  TokenResponse nextToken=status.hasToken() ? new TokenResponse(token.getBackupId(),status.getToken().toByteArray(),status.getTries()) : token;\n  Log.i(TAG,\"Restore \" + status.getStatus());\nswitch (status.getStatus()) {\ncase OK:    KbsData kbsData=hashedPin.decryptKbsDataIVCipherText(status.getData().toByteArray());\n  MasterKey masterKey=kbsData.getMasterKey();\nreturn new KbsPinData(masterKey,nextToken);\ncase PIN_MISMATCH:Log.i(TAG,\"Restore PIN_MISMATCH\");\nthrow new KeyBackupServicePinException(nextToken);\ncase TOKEN_MISMATCH:Log.i(TAG,\"Restore TOKEN_MISMATCH\");\nboolean canRetry=remainingTries == status.getTries();\nLog.i(TAG,String.format(Locale.US,\"Token MISMATCH %d %d\",remainingTries,status.getTries()));\nthrow new TokenException(nextToken,canRetry);\ncase MISSING:Log.i(TAG,\"Restore OK! No data though\");\nthrow new KeyBackupSystemNoDataException();\ncase NOT_YET_VALID:throw new UnauthenticatedResponseException(\"Key is not valid yet, clock mismatch\");\ndefault:throw new AssertionError(\"Unexpected case\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2163,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 198,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  final int remainingTries=token.getTries();\n  final RemoteAttestation remoteAttestation=getAndVerifyRemoteAttestation();\n  final KeyBackupRequest request=KeyBackupCipher.createKeyRestoreRequest(hashedPin.getKbsAccessKey(),token,remoteAttestation,serviceId);\n  final KeyBackupResponse response=pushServiceSocket.putKbsData(authorization,request,remoteAttestation.getCookies(),enclaveName);\n  final RestoreResponse status=KeyBackupCipher.getKeyRestoreResponse(response,remoteAttestation);\n  TokenResponse nextToken=status.hasToken() ? new TokenResponse(token.getBackupId(),status.getToken().toByteArray(),status.getTries()) : token;\n  Log.i(TAG,\"Restore \" + status.getStatus());\nswitch (status.getStatus()) {\ncase OK:    KbsData kbsData=hashedPin.decryptKbsDataIVCipherText(status.getData().toByteArray());\n  MasterKey masterKey=kbsData.getMasterKey();\nreturn new KbsPinData(masterKey,nextToken);\ncase PIN_MISMATCH:Log.i(TAG,\"Restore PIN_MISMATCH\");\nthrow new KeyBackupServicePinException(nextToken);\ncase TOKEN_MISMATCH:Log.i(TAG,\"Restore TOKEN_MISMATCH\");\nboolean canRetry=remainingTries == status.getTries();\nLog.i(TAG,String.format(Locale.US,\"Token MISMATCH %d %d\",remainingTries,status.getTries()));\nthrow new TokenException(nextToken,canRetry);\ncase MISSING:Log.i(TAG,\"Restore OK! No data though\");\nthrow new KeyBackupSystemNoDataException();\ncase NOT_YET_VALID:throw new UnauthenticatedResponseException(\"Key is not valid yet, clock mismatch\");\ndefault:throw new AssertionError(\"Unexpected case\");\n}\n}\n catch (InvalidCiphertextException e) {\nthrow new UnauthenticatedResponseException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 214,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    final int remainingTries=token.getTries();\n    final RemoteAttestation remoteAttestation=getAndVerifyRemoteAttestation();\n    final KeyBackupRequest request=KeyBackupCipher.createKeyRestoreRequest(hashedPin.getKbsAccessKey(),token,remoteAttestation,serviceId);\n    final KeyBackupResponse response=pushServiceSocket.putKbsData(authorization,request,remoteAttestation.getCookies(),enclaveName);\n    final RestoreResponse status=KeyBackupCipher.getKeyRestoreResponse(response,remoteAttestation);\n    TokenResponse nextToken=status.hasToken() ? new TokenResponse(token.getBackupId(),status.getToken().toByteArray(),status.getTries()) : token;\n    Log.i(TAG,\"Restore \" + status.getStatus());\nswitch (status.getStatus()) {\ncase OK:      KbsData kbsData=hashedPin.decryptKbsDataIVCipherText(status.getData().toByteArray());\n    MasterKey masterKey=kbsData.getMasterKey();\n  return new KbsPinData(masterKey,nextToken);\ncase PIN_MISMATCH:Log.i(TAG,\"Restore PIN_MISMATCH\");\nthrow new KeyBackupServicePinException(nextToken);\ncase TOKEN_MISMATCH:Log.i(TAG,\"Restore TOKEN_MISMATCH\");\nboolean canRetry=remainingTries == status.getTries();\nLog.i(TAG,String.format(Locale.US,\"Token MISMATCH %d %d\",remainingTries,status.getTries()));\nthrow new TokenException(nextToken,canRetry);\ncase MISSING:Log.i(TAG,\"Restore OK! No data though\");\nthrow new KeyBackupSystemNoDataException();\ncase NOT_YET_VALID:throw new UnauthenticatedResponseException(\"Key is not valid yet, clock mismatch\");\ndefault:throw new AssertionError(\"Unexpected case\");\n}\n}\n catch (InvalidCiphertextException e) {\nthrow new UnauthenticatedResponseException(e);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2381,
        "startLineNumber" : 159,
        "startColumnNumber" : 4,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private KbsPinData restorePin(HashedPin hashedPin,TokenResponse token) throws UnauthenticatedResponseException, IOException, TokenException, KeyBackupSystemNoDataException, InvalidKeyException {\n  try {\n    final int remainingTries=token.getTries();\n    final RemoteAttestation remoteAttestation=getAndVerifyRemoteAttestation();\n    final KeyBackupRequest request=KeyBackupCipher.createKeyRestoreRequest(hashedPin.getKbsAccessKey(),token,remoteAttestation,serviceId);\n    final KeyBackupResponse response=pushServiceSocket.putKbsData(authorization,request,remoteAttestation.getCookies(),enclaveName);\n    final RestoreResponse status=KeyBackupCipher.getKeyRestoreResponse(response,remoteAttestation);\n    TokenResponse nextToken=status.hasToken() ? new TokenResponse(token.getBackupId(),status.getToken().toByteArray(),status.getTries()) : token;\n    Log.i(TAG,\"Restore \" + status.getStatus());\nswitch (status.getStatus()) {\ncase OK:      KbsData kbsData=hashedPin.decryptKbsDataIVCipherText(status.getData().toByteArray());\n    MasterKey masterKey=kbsData.getMasterKey();\n  return new KbsPinData(masterKey,nextToken);\ncase PIN_MISMATCH:Log.i(TAG,\"Restore PIN_MISMATCH\");\nthrow new KeyBackupServicePinException(nextToken);\ncase TOKEN_MISMATCH:Log.i(TAG,\"Restore TOKEN_MISMATCH\");\nboolean canRetry=remainingTries == status.getTries();\nLog.i(TAG,String.format(Locale.US,\"Token MISMATCH %d %d\",remainingTries,status.getTries()));\nthrow new TokenException(nextToken,canRetry);\ncase MISSING:Log.i(TAG,\"Restore OK! No data though\");\nthrow new KeyBackupSystemNoDataException();\ncase NOT_YET_VALID:throw new UnauthenticatedResponseException(\"Key is not valid yet, clock mismatch\");\ndefault:throw new AssertionError(\"Unexpected case\");\n}\n}\n catch (InvalidCiphertextException e) {\nthrow new UnauthenticatedResponseException(e);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 58
      },
      "nodeContext" : "throw new TokenException(nextToken,canRetry);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 187,
    "startColumnNumber" : 48,
    "endLineNumber" : 187,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}