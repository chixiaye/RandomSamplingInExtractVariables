{
  "id" : 452,
  "expression" : "XML_INPUT_FACTORY.get()",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/saml-core/src/main/java/org/keycloak/saml/common/parsers/AbstractParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "XML_INPUT_FACTORY.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 134,
      "startColumnNumber" : 42,
      "endLineNumber" : 134,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 134,
        "startColumnNumber" : 24,
        "endLineNumber" : 134,
        "endColumnNumber" : 65
      },
      "nodeContext" : "xmlInputFactory=XML_INPUT_FACTORY.get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 66
      },
      "nodeContext" : "XMLInputFactory xmlInputFactory=XML_INPUT_FACTORY.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1583,
        "startLineNumber" : 133,
        "startColumnNumber" : 107,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XMLInputFactory xmlInputFactory=XML_INPUT_FACTORY.get();\n  try {\n    xmlEventReader=xmlInputFactory.createFilteredReader(xmlEventReader,new EventFilter(){\n      @Override public boolean accept(      XMLEvent xmlEvent){\n        if (xmlEvent.isCharacters()) {\n          Characters chars=xmlEvent.asCharacters();\n          String data=chars.getData();\n          return data != null && !WHITESPACE_ONLY.matcher(data).matches();\n        }\n else {\n          return xmlEvent.isStartElement() || xmlEvent.isEndElement();\n        }\n      }\n    }\n);\n  }\n catch (  XMLStreamException ex) {\n    throw logger.parserException(ex);\n  }\n  if (Environment.IS_IBM_JAVA) {\n    final XMLEventReader origReader=xmlEventReader;\n    xmlEventReader=new EventReaderDelegate(origReader){\n      @Override public boolean hasNext(){\n        boolean hasNext=super.hasNext();\n        try {\n          return hasNext && (origReader.peek() != null);\n        }\n catch (        XMLStreamException xse) {\n          throw new IllegalStateException(xse);\n        }\n      }\n    }\n;\n  }\n  return xmlEventReader;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2042,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates a derived  {@link XMLEventReader} that ignores all events except for: {@link StartElement}, {@link EndElement}, and non-empty and non-whitespace-only  {@link Characters}.\n * @param xmlEventReader Original {@link XMLEventReader}\n * @return Derived {@link XMLEventReader}\n * @throws XMLStreamException\n */\nprivate static XMLEventReader filterWhitespaces(XMLEventReader xmlEventReader) throws ParsingException {\n  XMLInputFactory xmlInputFactory=XML_INPUT_FACTORY.get();\n  try {\n    xmlEventReader=xmlInputFactory.createFilteredReader(xmlEventReader,new EventFilter(){\n      @Override public boolean accept(      XMLEvent xmlEvent){\n        if (xmlEvent.isCharacters()) {\n          Characters chars=xmlEvent.asCharacters();\n          String data=chars.getData();\n          return data != null && !WHITESPACE_ONLY.matcher(data).matches();\n        }\n else {\n          return xmlEvent.isStartElement() || xmlEvent.isEndElement();\n        }\n      }\n    }\n);\n  }\n catch (  XMLStreamException ex) {\n    throw logger.parserException(ex);\n  }\n  if (Environment.IS_IBM_JAVA) {\n    final XMLEventReader origReader=xmlEventReader;\n    xmlEventReader=new EventReaderDelegate(origReader){\n      @Override public boolean hasNext(){\n        boolean hasNext=super.hasNext();\n        try {\n          return hasNext && (origReader.peek() != null);\n        }\n catch (        XMLStreamException xse) {\n          throw new IllegalStateException(xse);\n        }\n      }\n    }\n;\n  }\n  return xmlEventReader;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 66
      },
      "nodeContext" : "XMLInputFactory xmlInputFactory=XML_INPUT_FACTORY.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "javax.xml.stream.XMLInputFactory"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 134,
    "startColumnNumber" : 42,
    "endLineNumber" : 134,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}