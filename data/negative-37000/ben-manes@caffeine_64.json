{
  "id" : 64,
  "expression" : "upperBound - lowerBound + 1",
  "projectName" : "ben-manes@caffeine",
  "commitID" : "30ca3d80d9dc7aa20adceacfc5fff1659bbadb8e",
  "filePath" : "/src/jmh/java/com/github/benmanes/caffeine/generator/HotspotIntegerGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "upperBound - lowerBound + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 69,
      "startColumnNumber" : 19,
      "endLineNumber" : 69,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 46
      },
      "nodeContext" : "interval=upperBound - lowerBound + 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int interval=upperBound - lowerBound + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 50,
        "startColumnNumber" : 52,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (hotsetFraction < 0.0 || hotsetFraction > 1.0) {\n    System.err.println(\"Hotset fraction out of range. Setting to 0.0\");\n    hotsetFraction=0.0;\n  }\n  if (hotOpnFraction < 0.0 || hotOpnFraction > 1.0) {\n    System.err.println(\"Hot operation fraction out of range. Setting to 0.0\");\n    hotOpnFraction=0.0;\n  }\n  if (lowerBound > upperBound) {\n    System.err.println(\"Upper bound of Hotspot generator smaller than the lower bound. \" + \"Swapping the values.\");\n    int temp=lowerBound;\n    lowerBound=upperBound;\n    upperBound=temp;\n  }\n  this.lowerBound=lowerBound;\n  this.upperBound=upperBound;\n  this.hotsetFraction=hotsetFraction;\n  int interval=upperBound - lowerBound + 1;\n  this.hotInterval=(int)(interval * hotsetFraction);\n  this.coldInterval=interval - hotInterval;\n  this.hotOpnFraction=hotOpnFraction;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1350,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Create a generator for Hotspot distributions.\n * @param lowerBound lower bound of the distribution.\n * @param upperBound upper bound of the distribution.\n * @param hotsetFraction percentage of data item\n * @param hotOpnFraction percentage of operations accessing the hot set.\n */\npublic HotspotIntegerGenerator(int lowerBound,int upperBound,double hotsetFraction,double hotOpnFraction){\n  if (hotsetFraction < 0.0 || hotsetFraction > 1.0) {\n    System.err.println(\"Hotset fraction out of range. Setting to 0.0\");\n    hotsetFraction=0.0;\n  }\n  if (hotOpnFraction < 0.0 || hotOpnFraction > 1.0) {\n    System.err.println(\"Hot operation fraction out of range. Setting to 0.0\");\n    hotOpnFraction=0.0;\n  }\n  if (lowerBound > upperBound) {\n    System.err.println(\"Upper bound of Hotspot generator smaller than the lower bound. \" + \"Swapping the values.\");\n    int temp=lowerBound;\n    lowerBound=upperBound;\n    upperBound=temp;\n  }\n  this.lowerBound=lowerBound;\n  this.upperBound=upperBound;\n  this.hotsetFraction=hotsetFraction;\n  int interval=upperBound - lowerBound + 1;\n  this.hotInterval=(int)(interval * hotsetFraction);\n  this.coldInterval=interval - hotInterval;\n  this.hotOpnFraction=hotOpnFraction;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int interval=upperBound - lowerBound + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 69,
    "startColumnNumber" : 19,
    "endLineNumber" : 69,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}