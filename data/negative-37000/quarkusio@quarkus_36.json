{
  "id" : 36,
  "expression" : "kindParam.toUpperCase()",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/ArcDevRecorder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "kindParam.toUpperCase()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 81,
      "startColumnNumber" : 88,
      "endLineNumber" : 81,
      "endColumnNumber" : 111
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 81,
        "startColumnNumber" : 63,
        "endLineNumber" : 81,
        "endColumnNumber" : 112
      },
      "nodeContext" : "InjectableBean.Kind.from(kindParam.toUpperCase())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 81,
        "startColumnNumber" : 43,
        "endLineNumber" : 81,
        "endColumnNumber" : 119
      },
      "nodeContext" : "kindParam != null ? InjectableBean.Kind.from(kindParam.toUpperCase()) : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 81,
        "startColumnNumber" : 36,
        "endLineNumber" : 81,
        "endColumnNumber" : 119
      },
      "nodeContext" : "kind=kindParam != null ? InjectableBean.Kind.from(kindParam.toUpperCase()) : null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 81,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 120
      },
      "nodeContext" : "InjectableBean.Kind kind=kindParam != null ? InjectableBean.Kind.from(kindParam.toUpperCase()) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3608,
        "startLineNumber" : 71,
        "startColumnNumber" : 51,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ctx.response().putHeader(\"Content-Type\",\"application/json\");\n  ArcContainerImpl container=ArcContainerImpl.instance();\n  List<InjectableBean<?>> beans=new ArrayList<>();\n  beans.addAll(container.getBeans());\n  beans.addAll(container.getInterceptors());\n  beans.addAll(container.getDecorators());\n  String kindParam=ctx.request().getParam(\"kind\");\n  InjectableBean.Kind kind=kindParam != null ? InjectableBean.Kind.from(kindParam.toUpperCase()) : null;\n  String scopeEndsWith=ctx.request().getParam(\"scope\");\n  String beanClassStartsWith=ctx.request().getParam(\"beanClass\");\n  for (Iterator<InjectableBean<?>> it=beans.iterator(); it.hasNext(); ) {\n    InjectableBean<?> injectableBean=it.next();\n    if (kind != null && !kind.equals(injectableBean.getKind())) {\n      it.remove();\n    }\n    if (scopeEndsWith != null && !injectableBean.getScope().getName().endsWith(scopeEndsWith)) {\n      it.remove();\n    }\n    if (beanClassStartsWith != null && !injectableBean.getBeanClass().getName().startsWith(beanClassStartsWith)) {\n      it.remove();\n    }\n  }\n  JsonArrayBuilder array=Json.array();\n  for (  InjectableBean<?> injectableBean : beans) {\n    JsonObjectBuilder bean=Json.object();\n    bean.put(\"id\",injectableBean.getIdentifier());\n    bean.put(\"kind\",injectableBean.getKind().toString());\n    bean.put(\"generatedClass\",injectableBean.getClass().getName());\n    bean.put(\"beanClass\",injectableBean.getBeanClass().getName());\n    JsonArrayBuilder types=Json.array();\n    for (    Type beanType : injectableBean.getTypes()) {\n      types.add(beanType.getTypeName());\n    }\n    bean.put(\"types\",types);\n    JsonArrayBuilder qualifiers=Json.array();\n    for (    Annotation qualifier : injectableBean.getQualifiers()) {\n      if (qualifier.annotationType().equals(Any.class) || qualifier.annotationType().equals(Default.class)) {\n        qualifiers.add(\"@\" + qualifier.annotationType().getSimpleName());\n      }\n else {\n        qualifiers.add(qualifier.toString());\n      }\n    }\n    bean.put(\"qualifiers\",qualifiers);\n    bean.put(\"scope\",injectableBean.getScope().getName());\n    if (injectableBean.getDeclaringBean() != null) {\n      bean.put(\"declaringBean\",injectableBean.getDeclaringBean().getIdentifier());\n    }\n    if (injectableBean.getName() != null) {\n      bean.put(\"name\",injectableBean.getName());\n    }\n    if (injectableBean.isAlternative()) {\n      bean.put(\"alternativePriority\",injectableBean.getAlternativePriority());\n    }\n    if (injectableBean.isDefaultBean()) {\n      bean.put(\"isDefault\",true);\n    }\n    array.add(bean);\n  }\n  ctx.response().end(array.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 422,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3669,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "@Override public void handle(RoutingContext ctx){\n  ctx.response().putHeader(\"Content-Type\",\"application/json\");\n  ArcContainerImpl container=ArcContainerImpl.instance();\n  List<InjectableBean<?>> beans=new ArrayList<>();\n  beans.addAll(container.getBeans());\n  beans.addAll(container.getInterceptors());\n  beans.addAll(container.getDecorators());\n  String kindParam=ctx.request().getParam(\"kind\");\n  InjectableBean.Kind kind=kindParam != null ? InjectableBean.Kind.from(kindParam.toUpperCase()) : null;\n  String scopeEndsWith=ctx.request().getParam(\"scope\");\n  String beanClassStartsWith=ctx.request().getParam(\"beanClass\");\n  for (Iterator<InjectableBean<?>> it=beans.iterator(); it.hasNext(); ) {\n    InjectableBean<?> injectableBean=it.next();\n    if (kind != null && !kind.equals(injectableBean.getKind())) {\n      it.remove();\n    }\n    if (scopeEndsWith != null && !injectableBean.getScope().getName().endsWith(scopeEndsWith)) {\n      it.remove();\n    }\n    if (beanClassStartsWith != null && !injectableBean.getBeanClass().getName().startsWith(beanClassStartsWith)) {\n      it.remove();\n    }\n  }\n  JsonArrayBuilder array=Json.array();\n  for (  InjectableBean<?> injectableBean : beans) {\n    JsonObjectBuilder bean=Json.object();\n    bean.put(\"id\",injectableBean.getIdentifier());\n    bean.put(\"kind\",injectableBean.getKind().toString());\n    bean.put(\"generatedClass\",injectableBean.getClass().getName());\n    bean.put(\"beanClass\",injectableBean.getBeanClass().getName());\n    JsonArrayBuilder types=Json.array();\n    for (    Type beanType : injectableBean.getTypes()) {\n      types.add(beanType.getTypeName());\n    }\n    bean.put(\"types\",types);\n    JsonArrayBuilder qualifiers=Json.array();\n    for (    Annotation qualifier : injectableBean.getQualifiers()) {\n      if (qualifier.annotationType().equals(Any.class) || qualifier.annotationType().equals(Default.class)) {\n        qualifiers.add(\"@\" + qualifier.annotationType().getSimpleName());\n      }\n else {\n        qualifiers.add(qualifier.toString());\n      }\n    }\n    bean.put(\"qualifiers\",qualifiers);\n    bean.put(\"scope\",injectableBean.getScope().getName());\n    if (injectableBean.getDeclaringBean() != null) {\n      bean.put(\"declaringBean\",injectableBean.getDeclaringBean().getIdentifier());\n    }\n    if (injectableBean.getName() != null) {\n      bean.put(\"name\",injectableBean.getName());\n    }\n    if (injectableBean.isAlternative()) {\n      bean.put(\"alternativePriority\",injectableBean.getAlternativePriority());\n    }\n    if (injectableBean.isDefaultBean()) {\n      bean.put(\"isDefault\",true);\n    }\n    array.add(bean);\n  }\n  ctx.response().end(array.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 432,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 81,
        "startColumnNumber" : 16,
        "endLineNumber" : 81,
        "endColumnNumber" : 120
      },
      "nodeContext" : "InjectableBean.Kind kind=kindParam != null ? InjectableBean.Kind.from(kindParam.toUpperCase()) : null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 81,
    "startColumnNumber" : 88,
    "endLineNumber" : 81,
    "endColumnNumber" : 111
  } ],
  "layoutRelationDataList" : [ ]
}