{
  "id" : 261,
  "expression" : "dmang.peek() == '?'",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/MicrosoftDmang/src/main/java/mdemangler/naming/MDSpecialName.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dmang.peek() == '?'",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 571,
      "startColumnNumber" : 12,
      "endLineNumber" : 571,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 571,
        "startColumnNumber" : 8,
        "endLineNumber" : 595,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dmang.peek() == '?') {\n  MDObjectCPP objectCPP=new MDObjectCPP(dmang);\n  objectCPP.parse();\n  objectCPP=dmang.getEmbeddedObject(objectCPP);\n  objectCPP.insert(builder);\n  dmang.parseEmbeddedObjectSuffix();\n}\n else {\n  MDBasicName basicName=new MDBasicName(dmang);\n  basicName.parse();\n  basicName.insert(builder);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1542,
        "startLineNumber" : 567,
        "startColumnNumber" : 17,
        "endLineNumber" : 600,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  dmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\n  StringBuilder builder=new StringBuilder();\n  if (dmang.peek() == '?') {\n    MDObjectCPP objectCPP=new MDObjectCPP(dmang);\n    objectCPP.parse();\n    objectCPP=dmang.getEmbeddedObject(objectCPP);\n    objectCPP.insert(builder);\n    dmang.parseEmbeddedObjectSuffix();\n  }\n else {\n    MDBasicName basicName=new MDBasicName(dmang);\n    basicName.parse();\n    basicName.insert(builder);\n  }\n  dmang.appendString(builder,\"''\");\n  dmang.insertString(builder,\"`dynamic initializer for '\");\n  name=builder.toString();\n  dmang.parseInfoPop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 5466,
        "startLineNumber" : 546,
        "startColumnNumber" : 6,
        "endLineNumber" : 675,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (dmang.getAndIncrement()) {\ncase 'A':  dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 397,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 13981,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 682,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (dmang.getAndIncrement()) {\ncase '0':  dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19196,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 689,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (dmang.getAndIncrement()) {\ncase '0':  dmang.parseInfoPush(1,\"constructor\");\nisConstructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(1,\"destructor\");\nisDestructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(1,\"operator new\");\nname=\"operator new\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(1,\"operator delete\");\nname=\"operator delete\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(1,\"operator=\");\nname=\"operator=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(1,\"operator>>\");\nname=\"operator>>\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(1,\"operator<<\");\nname=\"operator<<\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(1,\"operator!\");\nname=\"operator!\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(1,\"operator==\");\nname=\"operator==\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(1,\"operator!=\");\nname=\"operator!=\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(1,\"operator[]\");\nname=\"operator[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(1,\"operator [type cast]\");\nname=\"operator\";\nisTypeCast=true;\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(1,\"operator->\");\nname=\"operator->\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(1,\"operator*\");\nname=\"operator*\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(1,\"operator++\");\nname=\"operator++\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(1,\"operator--\");\nname=\"operator--\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(1,\"operator-\");\nname=\"operator-\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(1,\"operator+\");\nname=\"operator+\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(1,\"operator& (address-of)\");\nname=\"operator&\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(1,\"operator->*\");\nname=\"operator->*\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(1,\"operator/\");\nname=\"operator/\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(1,\"operator%\");\nname=\"operator%\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(1,\"operator<\");\nname=\"operator<\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(1,\"operator<=\");\nname=\"operator<=\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(1,\"operator>\");\nname=\"operator>\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(1,\"operator>=\");\nname=\"operator>=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(1,\"operator,\");\nname=\"operator,\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':dmang.parseInfoPush(1,\"operator()\");\nname=\"operator()\";\ndmang.parseInfoPop();\nbreak;\ncase 'S':dmang.parseInfoPush(1,\"operator~\");\nname=\"operator~\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(1,\"operator^\");\nname=\"operator^\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(1,\"operator|\");\nname=\"operator|\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(1,\"operator&&\");\nname=\"operator&&\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(1,\"operator||\");\nname=\"operator||\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(1,\"operator*=\");\nname=\"operator*=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(1,\"operator+=\");\nname=\"operator+=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Z':dmang.parseInfoPush(1,\"operator-=\");\nname=\"operator-=\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase '0':dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(1,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1905,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19228,
        "startLineNumber" : 119,
        "startColumnNumber" : 51,
        "endLineNumber" : 690,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  isQualified=true;\nswitch (dmang.getAndIncrement()) {\ncase '0':    dmang.parseInfoPush(1,\"constructor\");\n  isConstructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(1,\"destructor\");\nisDestructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(1,\"operator new\");\nname=\"operator new\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(1,\"operator delete\");\nname=\"operator delete\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(1,\"operator=\");\nname=\"operator=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(1,\"operator>>\");\nname=\"operator>>\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(1,\"operator<<\");\nname=\"operator<<\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(1,\"operator!\");\nname=\"operator!\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(1,\"operator==\");\nname=\"operator==\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(1,\"operator!=\");\nname=\"operator!=\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(1,\"operator[]\");\nname=\"operator[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(1,\"operator [type cast]\");\nname=\"operator\";\nisTypeCast=true;\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(1,\"operator->\");\nname=\"operator->\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(1,\"operator*\");\nname=\"operator*\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(1,\"operator++\");\nname=\"operator++\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(1,\"operator--\");\nname=\"operator--\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(1,\"operator-\");\nname=\"operator-\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(1,\"operator+\");\nname=\"operator+\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(1,\"operator& (address-of)\");\nname=\"operator&\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(1,\"operator->*\");\nname=\"operator->*\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(1,\"operator/\");\nname=\"operator/\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(1,\"operator%\");\nname=\"operator%\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(1,\"operator<\");\nname=\"operator<\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(1,\"operator<=\");\nname=\"operator<=\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(1,\"operator>\");\nname=\"operator>\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(1,\"operator>=\");\nname=\"operator>=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(1,\"operator,\");\nname=\"operator,\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':dmang.parseInfoPush(1,\"operator()\");\nname=\"operator()\";\ndmang.parseInfoPop();\nbreak;\ncase 'S':dmang.parseInfoPush(1,\"operator~\");\nname=\"operator~\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(1,\"operator^\");\nname=\"operator^\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(1,\"operator|\");\nname=\"operator|\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(1,\"operator&&\");\nname=\"operator&&\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(1,\"operator||\");\nname=\"operator||\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(1,\"operator*=\");\nname=\"operator*=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(1,\"operator+=\");\nname=\"operator+=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Z':dmang.parseInfoPush(1,\"operator-=\");\nname=\"operator-=\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase '0':dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(1,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1910,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 19290,
        "startLineNumber" : 118,
        "startColumnNumber" : 1,
        "endLineNumber" : 690,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected void parseInternal() throws MDException {\n  isQualified=true;\nswitch (dmang.getAndIncrement()) {\ncase '0':    dmang.parseInfoPush(1,\"constructor\");\n  isConstructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(1,\"destructor\");\nisDestructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(1,\"operator new\");\nname=\"operator new\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(1,\"operator delete\");\nname=\"operator delete\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(1,\"operator=\");\nname=\"operator=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(1,\"operator>>\");\nname=\"operator>>\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(1,\"operator<<\");\nname=\"operator<<\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(1,\"operator!\");\nname=\"operator!\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(1,\"operator==\");\nname=\"operator==\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(1,\"operator!=\");\nname=\"operator!=\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(1,\"operator[]\");\nname=\"operator[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(1,\"operator [type cast]\");\nname=\"operator\";\nisTypeCast=true;\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(1,\"operator->\");\nname=\"operator->\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(1,\"operator*\");\nname=\"operator*\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(1,\"operator++\");\nname=\"operator++\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(1,\"operator--\");\nname=\"operator--\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(1,\"operator-\");\nname=\"operator-\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(1,\"operator+\");\nname=\"operator+\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(1,\"operator& (address-of)\");\nname=\"operator&\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(1,\"operator->*\");\nname=\"operator->*\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(1,\"operator/\");\nname=\"operator/\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(1,\"operator%\");\nname=\"operator%\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(1,\"operator<\");\nname=\"operator<\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(1,\"operator<=\");\nname=\"operator<=\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(1,\"operator>\");\nname=\"operator>\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(1,\"operator>=\");\nname=\"operator>=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(1,\"operator,\");\nname=\"operator,\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':dmang.parseInfoPush(1,\"operator()\");\nname=\"operator()\";\ndmang.parseInfoPop();\nbreak;\ncase 'S':dmang.parseInfoPush(1,\"operator~\");\nname=\"operator~\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(1,\"operator^\");\nname=\"operator^\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(1,\"operator|\");\nname=\"operator|\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(1,\"operator&&\");\nname=\"operator&&\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(1,\"operator||\");\nname=\"operator||\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(1,\"operator*=\");\nname=\"operator*=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(1,\"operator+=\");\nname=\"operator+=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Z':dmang.parseInfoPush(1,\"operator-=\");\nname=\"operator-=\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase '0':dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(1,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1918,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 571,
        "startColumnNumber" : 8,
        "endLineNumber" : 595,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dmang.peek() == '?') {\n  MDObjectCPP objectCPP=new MDObjectCPP(dmang);\n  objectCPP.parse();\n  objectCPP=dmang.getEmbeddedObject(objectCPP);\n  objectCPP.insert(builder);\n  dmang.parseEmbeddedObjectSuffix();\n}\n else {\n  MDBasicName basicName=new MDBasicName(dmang);\n  basicName.parse();\n  basicName.insert(builder);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "dmang.peek() == '?'",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 606,
      "startColumnNumber" : 12,
      "endLineNumber" : 606,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 606,
        "startColumnNumber" : 8,
        "endLineNumber" : 630,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dmang.peek() == '?') {\n  MDObjectCPP objectCPP=new MDObjectCPP(dmang);\n  objectCPP.parse();\n  objectCPP=dmang.getEmbeddedObject(objectCPP);\n  objectCPP.insert(builder);\n  dmang.parseEmbeddedObjectSuffix();\n}\n else {\n  MDBasicName basicName=new MDBasicName(dmang);\n  basicName.parse();\n  basicName.insert(builder);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 1550,
        "startLineNumber" : 602,
        "startColumnNumber" : 17,
        "endLineNumber" : 635,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  dmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\n  StringBuilder builder=new StringBuilder();\n  if (dmang.peek() == '?') {\n    MDObjectCPP objectCPP=new MDObjectCPP(dmang);\n    objectCPP.parse();\n    objectCPP=dmang.getEmbeddedObject(objectCPP);\n    objectCPP.insert(builder);\n    dmang.parseEmbeddedObjectSuffix();\n  }\n else {\n    MDBasicName basicName=new MDBasicName(dmang);\n    basicName.parse();\n    basicName.insert(builder);\n  }\n  dmang.appendString(builder,\"''\");\n  dmang.insertString(builder,\"`dynamic atexit destructor for '\");\n  name=builder.toString();\n  dmang.parseInfoPop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 5466,
        "startLineNumber" : 546,
        "startColumnNumber" : 6,
        "endLineNumber" : 675,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (dmang.getAndIncrement()) {\ncase 'A':  dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 397,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 13981,
        "startLineNumber" : 306,
        "startColumnNumber" : 4,
        "endLineNumber" : 682,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (dmang.getAndIncrement()) {\ncase '0':  dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1258,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19196,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 689,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (dmang.getAndIncrement()) {\ncase '0':  dmang.parseInfoPush(1,\"constructor\");\nisConstructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(1,\"destructor\");\nisDestructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(1,\"operator new\");\nname=\"operator new\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(1,\"operator delete\");\nname=\"operator delete\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(1,\"operator=\");\nname=\"operator=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(1,\"operator>>\");\nname=\"operator>>\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(1,\"operator<<\");\nname=\"operator<<\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(1,\"operator!\");\nname=\"operator!\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(1,\"operator==\");\nname=\"operator==\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(1,\"operator!=\");\nname=\"operator!=\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(1,\"operator[]\");\nname=\"operator[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(1,\"operator [type cast]\");\nname=\"operator\";\nisTypeCast=true;\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(1,\"operator->\");\nname=\"operator->\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(1,\"operator*\");\nname=\"operator*\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(1,\"operator++\");\nname=\"operator++\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(1,\"operator--\");\nname=\"operator--\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(1,\"operator-\");\nname=\"operator-\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(1,\"operator+\");\nname=\"operator+\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(1,\"operator& (address-of)\");\nname=\"operator&\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(1,\"operator->*\");\nname=\"operator->*\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(1,\"operator/\");\nname=\"operator/\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(1,\"operator%\");\nname=\"operator%\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(1,\"operator<\");\nname=\"operator<\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(1,\"operator<=\");\nname=\"operator<=\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(1,\"operator>\");\nname=\"operator>\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(1,\"operator>=\");\nname=\"operator>=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(1,\"operator,\");\nname=\"operator,\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':dmang.parseInfoPush(1,\"operator()\");\nname=\"operator()\";\ndmang.parseInfoPop();\nbreak;\ncase 'S':dmang.parseInfoPush(1,\"operator~\");\nname=\"operator~\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(1,\"operator^\");\nname=\"operator^\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(1,\"operator|\");\nname=\"operator|\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(1,\"operator&&\");\nname=\"operator&&\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(1,\"operator||\");\nname=\"operator||\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(1,\"operator*=\");\nname=\"operator*=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(1,\"operator+=\");\nname=\"operator+=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Z':dmang.parseInfoPush(1,\"operator-=\");\nname=\"operator-=\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase '0':dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(1,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1905,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 19228,
        "startLineNumber" : 119,
        "startColumnNumber" : 51,
        "endLineNumber" : 690,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  isQualified=true;\nswitch (dmang.getAndIncrement()) {\ncase '0':    dmang.parseInfoPush(1,\"constructor\");\n  isConstructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(1,\"destructor\");\nisDestructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(1,\"operator new\");\nname=\"operator new\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(1,\"operator delete\");\nname=\"operator delete\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(1,\"operator=\");\nname=\"operator=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(1,\"operator>>\");\nname=\"operator>>\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(1,\"operator<<\");\nname=\"operator<<\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(1,\"operator!\");\nname=\"operator!\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(1,\"operator==\");\nname=\"operator==\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(1,\"operator!=\");\nname=\"operator!=\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(1,\"operator[]\");\nname=\"operator[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(1,\"operator [type cast]\");\nname=\"operator\";\nisTypeCast=true;\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(1,\"operator->\");\nname=\"operator->\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(1,\"operator*\");\nname=\"operator*\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(1,\"operator++\");\nname=\"operator++\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(1,\"operator--\");\nname=\"operator--\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(1,\"operator-\");\nname=\"operator-\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(1,\"operator+\");\nname=\"operator+\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(1,\"operator& (address-of)\");\nname=\"operator&\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(1,\"operator->*\");\nname=\"operator->*\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(1,\"operator/\");\nname=\"operator/\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(1,\"operator%\");\nname=\"operator%\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(1,\"operator<\");\nname=\"operator<\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(1,\"operator<=\");\nname=\"operator<=\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(1,\"operator>\");\nname=\"operator>\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(1,\"operator>=\");\nname=\"operator>=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(1,\"operator,\");\nname=\"operator,\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':dmang.parseInfoPush(1,\"operator()\");\nname=\"operator()\";\ndmang.parseInfoPop();\nbreak;\ncase 'S':dmang.parseInfoPush(1,\"operator~\");\nname=\"operator~\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(1,\"operator^\");\nname=\"operator^\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(1,\"operator|\");\nname=\"operator|\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(1,\"operator&&\");\nname=\"operator&&\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(1,\"operator||\");\nname=\"operator||\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(1,\"operator*=\");\nname=\"operator*=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(1,\"operator+=\");\nname=\"operator+=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Z':dmang.parseInfoPush(1,\"operator-=\");\nname=\"operator-=\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase '0':dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(1,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1910,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 19290,
        "startLineNumber" : 118,
        "startColumnNumber" : 1,
        "endLineNumber" : 690,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected void parseInternal() throws MDException {\n  isQualified=true;\nswitch (dmang.getAndIncrement()) {\ncase '0':    dmang.parseInfoPush(1,\"constructor\");\n  isConstructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(1,\"destructor\");\nisDestructor=true;\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(1,\"operator new\");\nname=\"operator new\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(1,\"operator delete\");\nname=\"operator delete\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(1,\"operator=\");\nname=\"operator=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(1,\"operator>>\");\nname=\"operator>>\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(1,\"operator<<\");\nname=\"operator<<\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(1,\"operator!\");\nname=\"operator!\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(1,\"operator==\");\nname=\"operator==\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(1,\"operator!=\");\nname=\"operator!=\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(1,\"operator[]\");\nname=\"operator[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(1,\"operator [type cast]\");\nname=\"operator\";\nisTypeCast=true;\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(1,\"operator->\");\nname=\"operator->\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(1,\"operator*\");\nname=\"operator*\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(1,\"operator++\");\nname=\"operator++\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(1,\"operator--\");\nname=\"operator--\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(1,\"operator-\");\nname=\"operator-\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(1,\"operator+\");\nname=\"operator+\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(1,\"operator& (address-of)\");\nname=\"operator&\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(1,\"operator->*\");\nname=\"operator->*\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(1,\"operator/\");\nname=\"operator/\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(1,\"operator%\");\nname=\"operator%\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(1,\"operator<\");\nname=\"operator<\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(1,\"operator<=\");\nname=\"operator<=\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(1,\"operator>\");\nname=\"operator>\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(1,\"operator>=\");\nname=\"operator>=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(1,\"operator,\");\nname=\"operator,\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':dmang.parseInfoPush(1,\"operator()\");\nname=\"operator()\";\ndmang.parseInfoPop();\nbreak;\ncase 'S':dmang.parseInfoPush(1,\"operator~\");\nname=\"operator~\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(1,\"operator^\");\nname=\"operator^\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(1,\"operator|\");\nname=\"operator|\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(1,\"operator&&\");\nname=\"operator&&\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(1,\"operator||\");\nname=\"operator||\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(1,\"operator*=\");\nname=\"operator*=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(1,\"operator+=\");\nname=\"operator+=\";\ndmang.parseInfoPop();\nbreak;\ncase 'Z':dmang.parseInfoPush(1,\"operator-=\");\nname=\"operator-=\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase '0':dmang.parseInfoPush(2,\"operator/=\");\nname=\"operator/=\";\ndmang.parseInfoPop();\nbreak;\ncase '1':dmang.parseInfoPush(2,\"operator%=\");\nname=\"operator%=\";\ndmang.parseInfoPop();\nbreak;\ncase '2':dmang.parseInfoPush(2,\"operator>>=\");\nname=\"operator>>=\";\ndmang.parseInfoPop();\nbreak;\ncase '3':dmang.parseInfoPush(2,\"operator<<=\");\nname=\"operator<<=\";\ndmang.parseInfoPop();\nbreak;\ncase '4':dmang.parseInfoPush(2,\"operator&=\");\nname=\"operator&=\";\ndmang.parseInfoPop();\nbreak;\ncase '5':dmang.parseInfoPush(2,\"operator|=\");\nname=\"operator|=\";\ndmang.parseInfoPop();\nbreak;\ncase '6':dmang.parseInfoPush(2,\"operator^=\");\nname=\"operator^=\";\ndmang.parseInfoPop();\nbreak;\ncase '7':dmang.parseInfoPush(2,\"vftable\");\nname=\"`vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase '8':dmang.parseInfoPush(2,\"vbtable\");\nname=\"`vbtable'\";\ndmang.parseInfoPop();\nbreak;\ncase '9':dmang.parseInfoPush(2,\"vcall\");\nname=\"`vcall'\";\ndmang.parseInfoPop();\nbreak;\ncase 'A':dmang.parseInfoPush(2,\"typeof\");\nname=\"`typeof'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(2,\"local static guard\");\nname=\"`local static guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(2,\"string\");\nmstring=new MDString(dmang);\nmstring.parse();\nname=mstring.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(2,\"vbase destructor\");\nname=\"`vbase destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':dmang.parseInfoPush(2,\"vector deleting destructor\");\nname=\"`vector deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'F':dmang.parseInfoPush(2,\"default constructor closure\");\nname=\"`default constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'G':dmang.parseInfoPush(2,\"scalar deleting destructor\");\nname=\"`scalar deleting destructor'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(2,\"vector constructor iterator\");\nname=\"`vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(2,\"vector destructor iterator\");\nname=\"`vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(2,\"vector vbase constructor iterator\");\nname=\"`vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(2,\"virtual displacement map\");\nname=\"`virtual displacement map'\";\ndmang.parseInfoPop();\nbreak;\ncase 'L':dmang.parseInfoPush(2,\"eh vector constructor iterator\");\nname=\"`eh vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'M':dmang.parseInfoPush(2,\"eh vector destructor iterator\");\nname=\"`eh vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'N':dmang.parseInfoPush(2,\"eh vector vbase constructor iterator\");\nname=\"`eh vector vbase constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'O':dmang.parseInfoPush(2,\"copy constructor closure\");\nname=\"`copy constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'P':dmang.parseInfoPush(2,\"udt returning\");\nMDSpecialName nestedSpecialName=new MDSpecialName(dmang,0);\nnestedSpecialName.parse();\nStringBuilder nestedBuilder=new StringBuilder();\nnestedSpecialName.insert(nestedBuilder);\ndmang.insertString(nestedBuilder,\"`udt returning'\");\nname=nestedBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase 'Q':dmang.parseInfoPush(2,\"EH\");\nname=\"\";\ndmang.parseInfoPop();\nbreak;\ncase 'R':isQualified=false;\nswitch (dmang.getAndIncrement()) {\ncase '0':rttiNumber=0;\ndmang.parseInfoPush(3,\"RTTI Type Descriptor\");\nMDType tmpMDType=MDDataTypeParser.parseDataType(dmang,false);\ntmpMDType.parse();\nStringBuilder RTTIBuilder=new StringBuilder();\ntmpMDType.insert(RTTIBuilder);\ndmang.appendString(RTTIBuilder,\" `RTTI Type Descriptor'\");\nname=RTTIBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ncase '1':rttiNumber=1;\ndmang.parseInfoPush(3,\"RTTI Base Class Descriptor at [...]\");\nMDSignedEncodedNumber a=new MDSignedEncodedNumber(dmang);\na.parse();\nMDSignedEncodedNumber b=new MDSignedEncodedNumber(dmang);\nb.parse();\nMDSignedEncodedNumber c=new MDSignedEncodedNumber(dmang);\nc.parse();\nMDEncodedNumber d=new MDEncodedNumber(dmang);\nd.parse();\nname=\"`RTTI Base Class Descriptor at (\" + a + \",\"+ b+ \",\"+ c+ \",\"+ d+ \")'\";\ndmang.parseInfoPop();\nbreak;\ncase '2':rttiNumber=2;\ndmang.parseInfoPush(3,\"RTTI Base Class Array\");\nname=\"`RTTI Base Class Array'\";\ndmang.parseInfoPop();\nbreak;\ncase '3':rttiNumber=3;\ndmang.parseInfoPush(3,\"RTTI Class Hierarchy Descriptor\");\nname=\"`RTTI Class Hierarchy Descriptor'\";\ndmang.parseInfoPop();\nbreak;\ncase '4':rttiNumber=4;\ndmang.parseInfoPush(3,\"RTTI Complete Object Locator\");\nname=\"`RTTI Complete Object Locator'\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ncase 'S':dmang.parseInfoPush(2,\"local vftable\");\nname=\"`local vftable'\";\ndmang.parseInfoPop();\nbreak;\ncase 'T':dmang.parseInfoPush(2,\"local vftable constructor closure\");\nname=\"`local vftable constructor closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'U':dmang.parseInfoPush(2,\"operator new[]\");\nname=\"operator new[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'V':dmang.parseInfoPush(2,\"operator delete[]\");\nname=\"operator delete[]\";\ndmang.parseInfoPop();\nbreak;\ncase 'W':dmang.parseInfoPush(2,\"omni callsig\");\nname=\"`omni callsig'\";\ndmang.parseInfoPop();\nbreak;\ncase 'X':dmang.parseInfoPush(2,\"placement delete closure\");\nname=\"`placement delete closure'\";\ndmang.parseInfoPop();\nbreak;\ncase 'Y':dmang.parseInfoPush(2,\"placement delete[] closure\");\nname=\"`placement delete[] closure'\";\ndmang.parseInfoPop();\nbreak;\ncase '_':switch (dmang.getAndIncrement()) {\ncase 'A':dmang.parseInfoPush(3,\"managed vector constructor iterator\");\nname=\"`managed vector constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'B':dmang.parseInfoPush(3,\"managed vector destructor iterator\");\nname=\"`managed vector destructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'C':dmang.parseInfoPush(3,\"eh vector copy constructor iterator\");\nname=\"`eh vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'D':dmang.parseInfoPush(3,\"eh vector vbase copy constructor iterator\");\nname=\"`eh vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'E':{\ndmang.parseInfoPush(3,\"dynamic initializer for [Object]\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic initializer for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'F':{\ndmang.parseInfoPush(3,\"dynamic atexit destructor operator\");\nStringBuilder builder=new StringBuilder();\nif (dmang.peek() == '?') {\nMDObjectCPP objectCPP=new MDObjectCPP(dmang);\nobjectCPP.parse();\nobjectCPP=dmang.getEmbeddedObject(objectCPP);\nobjectCPP.insert(builder);\ndmang.parseEmbeddedObjectSuffix();\n}\n else {\nMDBasicName basicName=new MDBasicName(dmang);\nbasicName.parse();\nbasicName.insert(builder);\n}\ndmang.appendString(builder,\"''\");\ndmang.insertString(builder,\"`dynamic atexit destructor for '\");\nname=builder.toString();\ndmang.parseInfoPop();\n}\nbreak;\ncase 'G':dmang.parseInfoPush(3,\"vector copy constructor\");\nname=\"`vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'H':dmang.parseInfoPush(3,\"vector vbase copy constructor\");\nname=\"`vector vbase copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'I':dmang.parseInfoPush(3,\"managed vector copy constructor\");\nname=\"`managed vector copy constructor iterator'\";\ndmang.parseInfoPop();\nbreak;\ncase 'J':dmang.parseInfoPush(3,\"thread guard\");\nname=\"`local static thread guard'\";\ndmang.parseInfoPop();\nbreak;\ncase 'K':dmang.parseInfoPush(3,\"udl\");\nMDFragmentName fragment=new MDFragmentName(dmang);\nfragment.parse();\nStringBuilder fragBuilder=new StringBuilder();\nfragment.insert(fragBuilder);\ndmang.insertString(fragBuilder,\"operator \\\"\\\" \");\nname=fragBuilder.toString();\ndmang.parseInfoPop();\nbreak;\ndefault:dmang.parseInfoPush(3,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(2,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\nbreak;\ndefault:dmang.parseInfoPush(1,\"UNKNOWN OPERATOR TYPE\");\nname=\"ERROR UNKNOWN OPERATOR TYPE\";\ndmang.parseInfoPop();\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1918,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1147,
        "startLineNumber" : 606,
        "startColumnNumber" : 8,
        "endLineNumber" : 630,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (dmang.peek() == '?') {\n  MDObjectCPP objectCPP=new MDObjectCPP(dmang);\n  objectCPP.parse();\n  objectCPP=dmang.getEmbeddedObject(objectCPP);\n  objectCPP.insert(builder);\n  dmang.parseEmbeddedObjectSuffix();\n}\n else {\n  MDBasicName basicName=new MDBasicName(dmang);\n  basicName.parse();\n  basicName.insert(builder);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 571,
    "startColumnNumber" : 12,
    "endLineNumber" : 571,
    "endColumnNumber" : 31
  }, {
    "charLength" : 19,
    "startLineNumber" : 606,
    "startColumnNumber" : 12,
    "endLineNumber" : 606,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}