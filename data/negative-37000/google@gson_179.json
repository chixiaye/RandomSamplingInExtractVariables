{
  "id" : 179,
  "expression" : "reader",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/Gson.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "reader",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 717,
      "startColumnNumber" : 28,
      "endLineNumber" : 717,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 717,
        "startColumnNumber" : 19,
        "endLineNumber" : 717,
        "endColumnNumber" : 44
      },
      "nodeContext" : "fromJson(reader,typeOfT)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 717,
        "startColumnNumber" : 15,
        "endLineNumber" : 717,
        "endColumnNumber" : 44
      },
      "nodeContext" : "(T)fromJson(reader,typeOfT)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 717,
        "startColumnNumber" : 6,
        "endLineNumber" : 717,
        "endColumnNumber" : 44
      },
      "nodeContext" : "target=(T)fromJson(reader,typeOfT)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 717,
        "startColumnNumber" : 4,
        "endLineNumber" : 717,
        "endColumnNumber" : 45
      },
      "nodeContext" : "T target=(T)fromJson(reader,typeOfT);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 712,
        "startColumnNumber" : 78,
        "endLineNumber" : 719,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (json == null) {\n    return null;\n  }\n  StringReader reader=new StringReader(json);\n  T target=(T)fromJson(reader,typeOfT);\n  return target;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1331,
        "startLineNumber" : 693,
        "startColumnNumber" : 2,
        "endLineNumber" : 719,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This method deserializes the specified Json into an object of the specified type. This method is useful if the specified object is a generic type. For non-generic objects, use {@link #fromJson(String,Class)} instead. If you have the Json in a {@link Reader} instead ofa String, use  {@link #fromJson(Reader,Type)} instead.\n * @param < T > the type of the desired object\n * @param json the string from which the object is to be deserialized\n * @param typeOfT The specific genericized type of src. You can obtain this type by using the{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for{@code Collection<Foo>}, you should use: <pre> Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType(); </pre>\n * @return an object of type T from the string\n * @throws JsonParseException if json is not a valid representation for an object of type typeOfT\n * @throws JsonSyntaxException if json is not a valid representation for an object of type\n */\n@SuppressWarnings(\"unchecked\") public <T>T fromJson(String json,Type typeOfT) throws JsonSyntaxException {\n  if (json == null) {\n    return null;\n  }\n  StringReader reader=new StringReader(json);\n  T target=(T)fromJson(reader,typeOfT);\n  return target;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 52,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 717,
        "startColumnNumber" : 4,
        "endLineNumber" : 717,
        "endColumnNumber" : 45
      },
      "nodeContext" : "T target=(T)fromJson(reader,typeOfT);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.StringReader"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 717,
    "startColumnNumber" : 28,
    "endLineNumber" : 717,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}