{
  "id" : 366,
  "expression" : "ColumnHolder.TIME_COLUMN_NAME",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ColumnHolder.TIME_COLUMN_NAME",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 180,
      "startColumnNumber" : 21,
      "endLineNumber" : 180,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 180,
        "startColumnNumber" : 10,
        "endLineNumber" : 180,
        "endColumnNumber" : 80
      },
      "nodeContext" : "parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 180,
        "startColumnNumber" : 10,
        "endLineNumber" : 180,
        "endColumnNumber" : 81
      },
      "nodeContext" : "parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 177,
        "startColumnNumber" : 30,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Map<String,Object> parsed=new LinkedHashMap<>();\n  parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n  columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n  Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n  if (sortKey != null) {\n    responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 480,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 187,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Row row : index) {\n  Map<String,Object> parsed=new LinkedHashMap<>();\n  parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n  columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n  Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n  if (sortKey != null) {\n    responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 78,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3875,
        "startLineNumber" : 118,
        "startColumnNumber" : 42,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  List<SamplerResponseRow> responseRows=new ArrayList<>(nonNullSamplerConfig.getNumRows());\n  int numRowsIndexed=0;\n  while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n    final InputRowListPlusRawValues inputRowListPlusRawValues=iterator.next();\n    final List<Map<String,Object>> rawColumnsList=inputRowListPlusRawValues.getRawValuesList();\n    final ParseException parseException=inputRowListPlusRawValues.getParseException();\n    if (parseException != null) {\n      if (rawColumnsList != null) {\n        responseRows.addAll(rawColumnsList.stream().map(rawColumns -> new SamplerResponseRow(rawColumns,null,true,parseException.getMessage())).collect(Collectors.toList()));\n      }\n else {\n        responseRows.add(new SamplerResponseRow(null,null,true,parseException.getMessage()));\n      }\n      continue;\n    }\n    List<InputRow> inputRows=inputRowListPlusRawValues.getInputRows();\n    if (inputRows == null) {\n      continue;\n    }\n    for (int i=0; i < inputRows.size(); i++) {\n      Map<String,Object> rawColumns=rawColumnsList == null ? null : rawColumnsList.get(i);\n      InputRow row=inputRows.get(i);\n      final int rowIndex=responseRows.size();\n      IncrementalIndexAddResult addResult=index.add(new SamplerInputRow(row,rowIndex),true);\n      if (addResult.hasParseException()) {\n        responseRows.add(new SamplerResponseRow(rawColumns,null,true,addResult.getParseException().getMessage()));\n      }\n else {\n        responseRows.add(new SamplerResponseRow(rawColumns,null,null,null));\n        numRowsIndexed++;\n      }\n    }\n  }\n  final List<String> columnNames=index.getColumnNames();\n  columnNames.remove(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n  for (  Row row : index) {\n    Map<String,Object> parsed=new LinkedHashMap<>();\n    parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n    columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n    Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n    if (sortKey != null) {\n      responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n    }\n  }\n  if (responseRows.size() > nonNullSamplerConfig.getNumRows()) {\n    responseRows=responseRows.subList(0,nonNullSamplerConfig.getNumRows());\n  }\n  int numRowsRead=responseRows.size();\n  return new SamplerResponse(numRowsRead,numRowsIndexed,responseRows.stream().filter(Objects::nonNull).filter(x -> x.getParsed() != null || x.isUnparseable() != null).collect(Collectors.toList()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 394,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4119,
        "startLineNumber" : 116,
        "startColumnNumber" : 6,
        "endLineNumber" : 203,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (final CloseableIterator<InputRowListPlusRawValues> iterator=reader.sample();final IncrementalIndex<Aggregator> index=buildIncrementalIndex(nonNullSamplerConfig,nonNullDataSchema);final Closer closer1=closer){\n  List<SamplerResponseRow> responseRows=new ArrayList<>(nonNullSamplerConfig.getNumRows());\n  int numRowsIndexed=0;\n  while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n    final InputRowListPlusRawValues inputRowListPlusRawValues=iterator.next();\n    final List<Map<String,Object>> rawColumnsList=inputRowListPlusRawValues.getRawValuesList();\n    final ParseException parseException=inputRowListPlusRawValues.getParseException();\n    if (parseException != null) {\n      if (rawColumnsList != null) {\n        responseRows.addAll(rawColumnsList.stream().map(rawColumns -> new SamplerResponseRow(rawColumns,null,true,parseException.getMessage())).collect(Collectors.toList()));\n      }\n else {\n        responseRows.add(new SamplerResponseRow(null,null,true,parseException.getMessage()));\n      }\n      continue;\n    }\n    List<InputRow> inputRows=inputRowListPlusRawValues.getInputRows();\n    if (inputRows == null) {\n      continue;\n    }\n    for (int i=0; i < inputRows.size(); i++) {\n      Map<String,Object> rawColumns=rawColumnsList == null ? null : rawColumnsList.get(i);\n      InputRow row=inputRows.get(i);\n      final int rowIndex=responseRows.size();\n      IncrementalIndexAddResult addResult=index.add(new SamplerInputRow(row,rowIndex),true);\n      if (addResult.hasParseException()) {\n        responseRows.add(new SamplerResponseRow(rawColumns,null,true,addResult.getParseException().getMessage()));\n      }\n else {\n        responseRows.add(new SamplerResponseRow(rawColumns,null,null,null));\n        numRowsIndexed++;\n      }\n    }\n  }\n  final List<String> columnNames=index.getColumnNames();\n  columnNames.remove(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n  for (  Row row : index) {\n    Map<String,Object> parsed=new LinkedHashMap<>();\n    parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n    columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n    Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n    if (sortKey != null) {\n      responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n    }\n  }\n  if (responseRows.size() > nonNullSamplerConfig.getNumRows()) {\n    responseRows=responseRows.subList(0,nonNullSamplerConfig.getNumRows());\n  }\n  int numRowsRead=responseRows.size();\n  return new SamplerResponse(numRowsRead,numRowsIndexed,responseRows.stream().filter(Objects::nonNull).filter(x -> x.getParsed() != null || x.isUnparseable() != null).collect(Collectors.toList()));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 427,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4319,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final InputSourceReader reader=buildReader(nonNullSamplerConfig,nonNullDataSchema,inputSource,inputFormat,tempDir);\n  try (final CloseableIterator<InputRowListPlusRawValues> iterator=reader.sample();final IncrementalIndex<Aggregator> index=buildIncrementalIndex(nonNullSamplerConfig,nonNullDataSchema);final Closer closer1=closer){\n    List<SamplerResponseRow> responseRows=new ArrayList<>(nonNullSamplerConfig.getNumRows());\n    int numRowsIndexed=0;\n    while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n      final InputRowListPlusRawValues inputRowListPlusRawValues=iterator.next();\n      final List<Map<String,Object>> rawColumnsList=inputRowListPlusRawValues.getRawValuesList();\n      final ParseException parseException=inputRowListPlusRawValues.getParseException();\n      if (parseException != null) {\n        if (rawColumnsList != null) {\n          responseRows.addAll(rawColumnsList.stream().map(rawColumns -> new SamplerResponseRow(rawColumns,null,true,parseException.getMessage())).collect(Collectors.toList()));\n        }\n else {\n          responseRows.add(new SamplerResponseRow(null,null,true,parseException.getMessage()));\n        }\n        continue;\n      }\n      List<InputRow> inputRows=inputRowListPlusRawValues.getInputRows();\n      if (inputRows == null) {\n        continue;\n      }\n      for (int i=0; i < inputRows.size(); i++) {\n        Map<String,Object> rawColumns=rawColumnsList == null ? null : rawColumnsList.get(i);\n        InputRow row=inputRows.get(i);\n        final int rowIndex=responseRows.size();\n        IncrementalIndexAddResult addResult=index.add(new SamplerInputRow(row,rowIndex),true);\n        if (addResult.hasParseException()) {\n          responseRows.add(new SamplerResponseRow(rawColumns,null,true,addResult.getParseException().getMessage()));\n        }\n else {\n          responseRows.add(new SamplerResponseRow(rawColumns,null,null,null));\n          numRowsIndexed++;\n        }\n      }\n    }\n    final List<String> columnNames=index.getColumnNames();\n    columnNames.remove(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n    for (    Row row : index) {\n      Map<String,Object> parsed=new LinkedHashMap<>();\n      parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n      columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n      Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n      if (sortKey != null) {\n        responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n      }\n    }\n    if (responseRows.size() > nonNullSamplerConfig.getNumRows()) {\n      responseRows=responseRows.subList(0,nonNullSamplerConfig.getNumRows());\n    }\n    int numRowsRead=responseRows.size();\n    return new SamplerResponse(numRowsRead,numRowsIndexed,responseRows.stream().filter(Objects::nonNull).filter(x -> x.getParsed() != null || x.isUnparseable() != null).collect(Collectors.toList()));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4437,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  final InputSourceReader reader=buildReader(nonNullSamplerConfig,nonNullDataSchema,inputSource,inputFormat,tempDir);\n  try (final CloseableIterator<InputRowListPlusRawValues> iterator=reader.sample();final IncrementalIndex<Aggregator> index=buildIncrementalIndex(nonNullSamplerConfig,nonNullDataSchema);final Closer closer1=closer){\n    List<SamplerResponseRow> responseRows=new ArrayList<>(nonNullSamplerConfig.getNumRows());\n    int numRowsIndexed=0;\n    while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n      final InputRowListPlusRawValues inputRowListPlusRawValues=iterator.next();\n      final List<Map<String,Object>> rawColumnsList=inputRowListPlusRawValues.getRawValuesList();\n      final ParseException parseException=inputRowListPlusRawValues.getParseException();\n      if (parseException != null) {\n        if (rawColumnsList != null) {\n          responseRows.addAll(rawColumnsList.stream().map(rawColumns -> new SamplerResponseRow(rawColumns,null,true,parseException.getMessage())).collect(Collectors.toList()));\n        }\n else {\n          responseRows.add(new SamplerResponseRow(null,null,true,parseException.getMessage()));\n        }\n        continue;\n      }\n      List<InputRow> inputRows=inputRowListPlusRawValues.getInputRows();\n      if (inputRows == null) {\n        continue;\n      }\n      for (int i=0; i < inputRows.size(); i++) {\n        Map<String,Object> rawColumns=rawColumnsList == null ? null : rawColumnsList.get(i);\n        InputRow row=inputRows.get(i);\n        final int rowIndex=responseRows.size();\n        IncrementalIndexAddResult addResult=index.add(new SamplerInputRow(row,rowIndex),true);\n        if (addResult.hasParseException()) {\n          responseRows.add(new SamplerResponseRow(rawColumns,null,true,addResult.getParseException().getMessage()));\n        }\n else {\n          responseRows.add(new SamplerResponseRow(rawColumns,null,null,null));\n          numRowsIndexed++;\n        }\n      }\n    }\n    final List<String> columnNames=index.getColumnNames();\n    columnNames.remove(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n    for (    Row row : index) {\n      Map<String,Object> parsed=new LinkedHashMap<>();\n      parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n      columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n      Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n      if (sortKey != null) {\n        responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n      }\n    }\n    if (responseRows.size() > nonNullSamplerConfig.getNumRows()) {\n      responseRows=responseRows.subList(0,nonNullSamplerConfig.getNumRows());\n    }\n    int numRowsRead=responseRows.size();\n    return new SamplerResponse(numRowsRead,numRowsIndexed,responseRows.stream().filter(Objects::nonNull).filter(x -> x.getParsed() != null || x.isUnparseable() != null).collect(Collectors.toList()));\n  }\n }\n catch (Exception e) {\n  throw new SamplerException(e,\"Failed to sample data: %s\",e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 457,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5172,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 208,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkNotNull(inputSource,\"inputSource required\");\n  if (inputSource.needsFormat()) {\n    Preconditions.checkNotNull(inputFormat,\"inputFormat required\");\n  }\n  final DataSchema nonNullDataSchema=dataSchema == null ? DEFAULT_DATA_SCHEMA : dataSchema;\n  final SamplerConfig nonNullSamplerConfig=samplerConfig == null ? SamplerConfig.empty() : samplerConfig;\n  final Closer closer=Closer.create();\n  final File tempDir=FileUtils.createTempDir();\n  closer.register(() -> FileUtils.deleteDirectory(tempDir));\n  try {\n    final InputSourceReader reader=buildReader(nonNullSamplerConfig,nonNullDataSchema,inputSource,inputFormat,tempDir);\n    try (final CloseableIterator<InputRowListPlusRawValues> iterator=reader.sample();final IncrementalIndex<Aggregator> index=buildIncrementalIndex(nonNullSamplerConfig,nonNullDataSchema);final Closer closer1=closer){\n      List<SamplerResponseRow> responseRows=new ArrayList<>(nonNullSamplerConfig.getNumRows());\n      int numRowsIndexed=0;\n      while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n        final InputRowListPlusRawValues inputRowListPlusRawValues=iterator.next();\n        final List<Map<String,Object>> rawColumnsList=inputRowListPlusRawValues.getRawValuesList();\n        final ParseException parseException=inputRowListPlusRawValues.getParseException();\n        if (parseException != null) {\n          if (rawColumnsList != null) {\n            responseRows.addAll(rawColumnsList.stream().map(rawColumns -> new SamplerResponseRow(rawColumns,null,true,parseException.getMessage())).collect(Collectors.toList()));\n          }\n else {\n            responseRows.add(new SamplerResponseRow(null,null,true,parseException.getMessage()));\n          }\n          continue;\n        }\n        List<InputRow> inputRows=inputRowListPlusRawValues.getInputRows();\n        if (inputRows == null) {\n          continue;\n        }\n        for (int i=0; i < inputRows.size(); i++) {\n          Map<String,Object> rawColumns=rawColumnsList == null ? null : rawColumnsList.get(i);\n          InputRow row=inputRows.get(i);\n          final int rowIndex=responseRows.size();\n          IncrementalIndexAddResult addResult=index.add(new SamplerInputRow(row,rowIndex),true);\n          if (addResult.hasParseException()) {\n            responseRows.add(new SamplerResponseRow(rawColumns,null,true,addResult.getParseException().getMessage()));\n          }\n else {\n            responseRows.add(new SamplerResponseRow(rawColumns,null,null,null));\n            numRowsIndexed++;\n          }\n        }\n      }\n      final List<String> columnNames=index.getColumnNames();\n      columnNames.remove(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n      for (      Row row : index) {\n        Map<String,Object> parsed=new LinkedHashMap<>();\n        parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n        columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n        Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n        if (sortKey != null) {\n          responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n        }\n      }\n      if (responseRows.size() > nonNullSamplerConfig.getNumRows()) {\n        responseRows=responseRows.subList(0,nonNullSamplerConfig.getNumRows());\n      }\n      int numRowsRead=responseRows.size();\n      return new SamplerResponse(numRowsRead,numRowsIndexed,responseRows.stream().filter(Objects::nonNull).filter(x -> x.getParsed() != null || x.isUnparseable() != null).collect(Collectors.toList()));\n    }\n   }\n catch (  Exception e) {\n    throw new SamplerException(e,\"Failed to sample data: %s\",e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 528,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5487,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 208,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public SamplerResponse sample(final InputSource inputSource,@Nullable final InputFormat inputFormat,@Nullable final DataSchema dataSchema,@Nullable final SamplerConfig samplerConfig){\n  Preconditions.checkNotNull(inputSource,\"inputSource required\");\n  if (inputSource.needsFormat()) {\n    Preconditions.checkNotNull(inputFormat,\"inputFormat required\");\n  }\n  final DataSchema nonNullDataSchema=dataSchema == null ? DEFAULT_DATA_SCHEMA : dataSchema;\n  final SamplerConfig nonNullSamplerConfig=samplerConfig == null ? SamplerConfig.empty() : samplerConfig;\n  final Closer closer=Closer.create();\n  final File tempDir=FileUtils.createTempDir();\n  closer.register(() -> FileUtils.deleteDirectory(tempDir));\n  try {\n    final InputSourceReader reader=buildReader(nonNullSamplerConfig,nonNullDataSchema,inputSource,inputFormat,tempDir);\n    try (final CloseableIterator<InputRowListPlusRawValues> iterator=reader.sample();final IncrementalIndex<Aggregator> index=buildIncrementalIndex(nonNullSamplerConfig,nonNullDataSchema);final Closer closer1=closer){\n      List<SamplerResponseRow> responseRows=new ArrayList<>(nonNullSamplerConfig.getNumRows());\n      int numRowsIndexed=0;\n      while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n        final InputRowListPlusRawValues inputRowListPlusRawValues=iterator.next();\n        final List<Map<String,Object>> rawColumnsList=inputRowListPlusRawValues.getRawValuesList();\n        final ParseException parseException=inputRowListPlusRawValues.getParseException();\n        if (parseException != null) {\n          if (rawColumnsList != null) {\n            responseRows.addAll(rawColumnsList.stream().map(rawColumns -> new SamplerResponseRow(rawColumns,null,true,parseException.getMessage())).collect(Collectors.toList()));\n          }\n else {\n            responseRows.add(new SamplerResponseRow(null,null,true,parseException.getMessage()));\n          }\n          continue;\n        }\n        List<InputRow> inputRows=inputRowListPlusRawValues.getInputRows();\n        if (inputRows == null) {\n          continue;\n        }\n        for (int i=0; i < inputRows.size(); i++) {\n          Map<String,Object> rawColumns=rawColumnsList == null ? null : rawColumnsList.get(i);\n          InputRow row=inputRows.get(i);\n          final int rowIndex=responseRows.size();\n          IncrementalIndexAddResult addResult=index.add(new SamplerInputRow(row,rowIndex),true);\n          if (addResult.hasParseException()) {\n            responseRows.add(new SamplerResponseRow(rawColumns,null,true,addResult.getParseException().getMessage()));\n          }\n else {\n            responseRows.add(new SamplerResponseRow(rawColumns,null,null,null));\n            numRowsIndexed++;\n          }\n        }\n      }\n      final List<String> columnNames=index.getColumnNames();\n      columnNames.remove(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n      for (      Row row : index) {\n        Map<String,Object> parsed=new LinkedHashMap<>();\n        parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n        columnNames.forEach(k -> parsed.put(k,row.getRaw(k)));\n        Number sortKey=row.getMetric(SamplerInputRow.SAMPLER_ORDERING_COLUMN);\n        if (sortKey != null) {\n          responseRows.set(sortKey.intValue(),responseRows.get(sortKey.intValue()).withParsed(parsed));\n        }\n      }\n      if (responseRows.size() > nonNullSamplerConfig.getNumRows()) {\n        responseRows=responseRows.subList(0,nonNullSamplerConfig.getNumRows());\n      }\n      int numRowsRead=responseRows.size();\n      return new SamplerResponse(numRowsRead,numRowsIndexed,responseRows.stream().filter(Objects::nonNull).filter(x -> x.getParsed() != null || x.isUnparseable() != null).collect(Collectors.toList()));\n    }\n   }\n catch (  Exception e) {\n    throw new SamplerException(e,\"Failed to sample data: %s\",e.getMessage());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 559,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 180,
        "startColumnNumber" : 10,
        "endLineNumber" : 180,
        "endColumnNumber" : 81
      },
      "nodeContext" : "parsed.put(ColumnHolder.TIME_COLUMN_NAME,row.getTimestampFromEpoch());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 180,
    "startColumnNumber" : 21,
    "endLineNumber" : 180,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}