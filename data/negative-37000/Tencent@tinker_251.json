{
  "id" : 251,
  "expression" : "libPrePath + \"/\" + name",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerApplicationHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "libPrePath + \"/\" + name",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 347,
      "startColumnNumber" : 44,
      "endLineNumber" : 347,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 347,
        "startColumnNumber" : 25,
        "endLineNumber" : 347,
        "endColumnNumber" : 67
      },
      "nodeContext" : "patchLibraryPath=libPrePath + \"/\" + name",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 68
      },
      "nodeContext" : "final String patchLibraryPath=libPrePath + \"/\" + name;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 342,
        "startColumnNumber" : 76,
        "endLineNumber" : 362,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final String name=libEntry.getKey();\n  if (!name.equals(relativeLibPath)) {\n    continue;\n  }\n  final String patchLibraryPath=libPrePath + \"/\" + name;\n  final File library=new File(patchLibraryPath);\n  if (!library.exists()) {\n    continue;\n  }\n  final boolean verifyMd5=applicationLike.getTinkerLoadVerifyFlag();\n  if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadLibraries.get(name))) {\n    ShareTinkerLog.i(TAG,\"loadLibraryFromTinker md5mismatch fail:\" + patchLibraryPath);\n  }\n else {\n    System.load(patchLibraryPath);\n    ShareTinkerLog.i(TAG,\"loadLibraryFromTinker success:\" + patchLibraryPath);\n    return true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 342,
        "startColumnNumber" : 8,
        "endLineNumber" : 362,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,String> libEntry : loadLibraries.entrySet()) {\n  final String name=libEntry.getKey();\n  if (!name.equals(relativeLibPath)) {\n    continue;\n  }\n  final String patchLibraryPath=libPrePath + \"/\" + name;\n  final File library=new File(patchLibraryPath);\n  if (!library.exists()) {\n    continue;\n  }\n  final boolean verifyMd5=applicationLike.getTinkerLoadVerifyFlag();\n  if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadLibraries.get(name))) {\n    ShareTinkerLog.i(TAG,\"loadLibraryFromTinker md5mismatch fail:\" + patchLibraryPath);\n  }\n else {\n    System.load(patchLibraryPath);\n    ShareTinkerLog.i(TAG,\"loadLibraryFromTinker success:\" + patchLibraryPath);\n    return true;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 313,
        "startColumnNumber" : 146,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  libname=libname.startsWith(\"lib\") ? libname : \"lib\" + libname;\n  libname=libname.endsWith(\".so\") ? libname : libname + \".so\";\n  String relativeLibPath=relativePath + \"/\" + libname;\n  if (!TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {\n    return false;\n  }\n  if (!TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {\n    return false;\n  }\n  final HashMap<String,String> loadLibraries=TinkerApplicationHelper.getLoadLibraryAndMd5(applicationLike);\n  if (loadLibraries == null) {\n    return false;\n  }\n  final String currentVersion=TinkerApplicationHelper.getCurrentVersion(applicationLike);\n  if (ShareTinkerInternals.isNullOrNil(currentVersion)) {\n    return false;\n  }\n  final File patchDirectory=SharePatchFileUtil.getPatchDirectory(applicationLike.getApplication());\n  if (patchDirectory == null) {\n    return false;\n  }\n  final File patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + SharePatchFileUtil.getPatchVersionDirectory(currentVersion));\n  final String libPrePath=patchVersionDirectory.getAbsolutePath() + \"/\" + ShareConstants.SO_PATH;\n  for (  Map.Entry<String,String> libEntry : loadLibraries.entrySet()) {\n    final String name=libEntry.getKey();\n    if (!name.equals(relativeLibPath)) {\n      continue;\n    }\n    final String patchLibraryPath=libPrePath + \"/\" + name;\n    final File library=new File(patchLibraryPath);\n    if (!library.exists()) {\n      continue;\n    }\n    final boolean verifyMd5=applicationLike.getTinkerLoadVerifyFlag();\n    if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadLibraries.get(name))) {\n      ShareTinkerLog.i(TAG,\"loadLibraryFromTinker md5mismatch fail:\" + patchLibraryPath);\n    }\n else {\n      System.load(patchLibraryPath);\n      ShareTinkerLog.i(TAG,\"loadLibraryFromTinker success:\" + patchLibraryPath);\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2839,
        "startLineNumber" : 303,
        "startColumnNumber" : 4,
        "endLineNumber" : 365,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * you can use these api to load tinker library without tinker is installed! same as  {@code TinkerInstaller#loadLibraryFromTinker}\n * @param applicationLike\n * @param relativePath\n * @param libname\n * @return\n * @throws UnsatisfiedLinkError\n */\npublic static boolean loadLibraryFromTinker(ApplicationLike applicationLike,String relativePath,String libname) throws UnsatisfiedLinkError {\n  libname=libname.startsWith(\"lib\") ? libname : \"lib\" + libname;\n  libname=libname.endsWith(\".so\") ? libname : libname + \".so\";\n  String relativeLibPath=relativePath + \"/\" + libname;\n  if (!TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {\n    return false;\n  }\n  if (!TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {\n    return false;\n  }\n  final HashMap<String,String> loadLibraries=TinkerApplicationHelper.getLoadLibraryAndMd5(applicationLike);\n  if (loadLibraries == null) {\n    return false;\n  }\n  final String currentVersion=TinkerApplicationHelper.getCurrentVersion(applicationLike);\n  if (ShareTinkerInternals.isNullOrNil(currentVersion)) {\n    return false;\n  }\n  final File patchDirectory=SharePatchFileUtil.getPatchDirectory(applicationLike.getApplication());\n  if (patchDirectory == null) {\n    return false;\n  }\n  final File patchVersionDirectory=new File(patchDirectory.getAbsolutePath() + \"/\" + SharePatchFileUtil.getPatchVersionDirectory(currentVersion));\n  final String libPrePath=patchVersionDirectory.getAbsolutePath() + \"/\" + ShareConstants.SO_PATH;\n  for (  Map.Entry<String,String> libEntry : loadLibraries.entrySet()) {\n    final String name=libEntry.getKey();\n    if (!name.equals(relativeLibPath)) {\n      continue;\n    }\n    final String patchLibraryPath=libPrePath + \"/\" + name;\n    final File library=new File(patchLibraryPath);\n    if (!library.exists()) {\n      continue;\n    }\n    final boolean verifyMd5=applicationLike.getTinkerLoadVerifyFlag();\n    if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadLibraries.get(name))) {\n      ShareTinkerLog.i(TAG,\"loadLibraryFromTinker md5mismatch fail:\" + patchLibraryPath);\n    }\n else {\n      System.load(patchLibraryPath);\n      ShareTinkerLog.i(TAG,\"loadLibraryFromTinker success:\" + patchLibraryPath);\n      return true;\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 347,
        "startColumnNumber" : 12,
        "endLineNumber" : 347,
        "endColumnNumber" : 68
      },
      "nodeContext" : "final String patchLibraryPath=libPrePath + \"/\" + name;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 347,
    "startColumnNumber" : 44,
    "endLineNumber" : 347,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}