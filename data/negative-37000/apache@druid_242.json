{
  "id" : 242,
  "expression" : "GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/benchmarks/src/test/java/org/apache/druid/benchmark/compression/BaseColumnarLongsFromGeneratorBenchmark.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 211,
      "startLineNumber" : 103,
      "startColumnNumber" : 15,
      "endLineNumber" : 111,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 12,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 103,
        "startColumnNumber" : 15,
        "endLineNumber" : 111,
        "endColumnNumber" : 29
      },
      "nodeContext" : "GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7533,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 379,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (distribution) {\ncase \"enumerated-0-1\":  enumerated=ImmutableList.of(0,1);\nprobability=ImmutableList.of(0.6,0.4);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"enumerated-full\":enumerated=ImmutableList.of(0,1,Long.MAX_VALUE - 1,Long.MIN_VALUE + 1,Long.MIN_VALUE / 2,Long.MAX_VALUE / 2);\nprobability=ImmutableList.of(0.4,0.2,0.1,0.1,0.1,0.1);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"normal-1-32\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,1.0,(double)(1L << 32),true).makeGenerator(SEED);\ncase \"normal-40-1000\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,(double)(1L << 40),1000.0,true).makeGenerator(SEED);\ncase \"sequential-1000\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,Integer.MAX_VALUE - 1001,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"sequential-unique\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,0,rows).makeGenerator(SEED);\ncase \"uniform-1\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1).makeGenerator(SEED);\ncase \"uniform-2\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,4).makeGenerator(SEED);\ncase \"uniform-3\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,1000000,1000008).makeGenerator(SEED);\ncase \"uniform-4\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 4).makeGenerator(SEED);\ncase \"uniform-8\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 8).makeGenerator(SEED);\ncase \"uniform-12\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 12).makeGenerator(SEED);\ncase \"uniform-16\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 16).makeGenerator(SEED);\ncase \"uniform-20\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 20).makeGenerator(SEED);\ncase \"uniform-24\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1 << 24) - 1).makeGenerator(SEED);\ncase \"uinform-32\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"uniform-40\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0L,(1L << 40) - 1).makeGenerator(SEED);\ncase \"uniform-48\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 48) - 1).makeGenerator(SEED);\ncase \"uniform-56\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 56 - 1)).makeGenerator(SEED);\ncase \"uniform-64\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Long.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"zipf-low-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,1d).makeGenerator(SEED);\ncase \"zipf-low-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,1d).makeGenerator(SEED);\ncase \"zipf-low-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,1d).makeGenerator(SEED);\ncase \"zipf-high-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,3d).makeGenerator(SEED);\ncase \"zipf-high-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,3d).makeGenerator(SEED);\ncase \"zipf-high-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,3d).makeGenerator(SEED);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 596,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7666,
        "startLineNumber" : 96,
        "startColumnNumber" : 2,
        "endLineNumber" : 381,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Object> enumerated;\n  List<Double> probability;\nswitch (distribution) {\ncase \"enumerated-0-1\":    enumerated=ImmutableList.of(0,1);\n  probability=ImmutableList.of(0.6,0.4);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"enumerated-full\":enumerated=ImmutableList.of(0,1,Long.MAX_VALUE - 1,Long.MIN_VALUE + 1,Long.MIN_VALUE / 2,Long.MAX_VALUE / 2);\nprobability=ImmutableList.of(0.4,0.2,0.1,0.1,0.1,0.1);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"normal-1-32\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,1.0,(double)(1L << 32),true).makeGenerator(SEED);\ncase \"normal-40-1000\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,(double)(1L << 40),1000.0,true).makeGenerator(SEED);\ncase \"sequential-1000\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,Integer.MAX_VALUE - 1001,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"sequential-unique\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,0,rows).makeGenerator(SEED);\ncase \"uniform-1\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1).makeGenerator(SEED);\ncase \"uniform-2\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,4).makeGenerator(SEED);\ncase \"uniform-3\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,1000000,1000008).makeGenerator(SEED);\ncase \"uniform-4\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 4).makeGenerator(SEED);\ncase \"uniform-8\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 8).makeGenerator(SEED);\ncase \"uniform-12\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 12).makeGenerator(SEED);\ncase \"uniform-16\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 16).makeGenerator(SEED);\ncase \"uniform-20\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 20).makeGenerator(SEED);\ncase \"uniform-24\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1 << 24) - 1).makeGenerator(SEED);\ncase \"uinform-32\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"uniform-40\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0L,(1L << 40) - 1).makeGenerator(SEED);\ncase \"uniform-48\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 48) - 1).makeGenerator(SEED);\ncase \"uniform-56\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 56 - 1)).makeGenerator(SEED);\ncase \"uniform-64\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Long.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"zipf-low-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,1d).makeGenerator(SEED);\ncase \"zipf-low-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,1d).makeGenerator(SEED);\ncase \"zipf-low-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,1d).makeGenerator(SEED);\ncase \"zipf-high-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,3d).makeGenerator(SEED);\ncase \"zipf-high-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,3d).makeGenerator(SEED);\ncase \"zipf-high-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,3d).makeGenerator(SEED);\n}\nthrow new IllegalArgumentException(\"unknown distribution\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 618,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7787,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 381,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static ColumnValueGenerator makeGenerator(String distribution,int rows,double zeroProbability){\n  List<Object> enumerated;\n  List<Double> probability;\nswitch (distribution) {\ncase \"enumerated-0-1\":    enumerated=ImmutableList.of(0,1);\n  probability=ImmutableList.of(0.6,0.4);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"enumerated-full\":enumerated=ImmutableList.of(0,1,Long.MAX_VALUE - 1,Long.MIN_VALUE + 1,Long.MIN_VALUE / 2,Long.MAX_VALUE / 2);\nprobability=ImmutableList.of(0.4,0.2,0.1,0.1,0.1,0.1);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"normal-1-32\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,1.0,(double)(1L << 32),true).makeGenerator(SEED);\ncase \"normal-40-1000\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,(double)(1L << 40),1000.0,true).makeGenerator(SEED);\ncase \"sequential-1000\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,Integer.MAX_VALUE - 1001,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"sequential-unique\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,0,rows).makeGenerator(SEED);\ncase \"uniform-1\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1).makeGenerator(SEED);\ncase \"uniform-2\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,4).makeGenerator(SEED);\ncase \"uniform-3\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,1000000,1000008).makeGenerator(SEED);\ncase \"uniform-4\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 4).makeGenerator(SEED);\ncase \"uniform-8\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 8).makeGenerator(SEED);\ncase \"uniform-12\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 12).makeGenerator(SEED);\ncase \"uniform-16\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 16).makeGenerator(SEED);\ncase \"uniform-20\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 20).makeGenerator(SEED);\ncase \"uniform-24\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1 << 24) - 1).makeGenerator(SEED);\ncase \"uinform-32\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"uniform-40\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0L,(1L << 40) - 1).makeGenerator(SEED);\ncase \"uniform-48\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 48) - 1).makeGenerator(SEED);\ncase \"uniform-56\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 56 - 1)).makeGenerator(SEED);\ncase \"uniform-64\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Long.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"zipf-low-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,1d).makeGenerator(SEED);\ncase \"zipf-low-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,1d).makeGenerator(SEED);\ncase \"zipf-low-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,1d).makeGenerator(SEED);\ncase \"zipf-high-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,3d).makeGenerator(SEED);\ncase \"zipf-high-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,3d).makeGenerator(SEED);\ncase \"zipf-high-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,3d).makeGenerator(SEED);\n}\nthrow new IllegalArgumentException(\"unknown distribution\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 10,
    "type" : "org.apache.druid.segment.generator.GeneratorColumnSchema"
  }, {
    "nodeContext" : "GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 211,
      "startLineNumber" : 122,
      "startColumnNumber" : 15,
      "endLineNumber" : 130,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 12,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 122,
        "startColumnNumber" : 15,
        "endLineNumber" : 130,
        "endColumnNumber" : 29
      },
      "nodeContext" : "GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7533,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 379,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (distribution) {\ncase \"enumerated-0-1\":  enumerated=ImmutableList.of(0,1);\nprobability=ImmutableList.of(0.6,0.4);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"enumerated-full\":enumerated=ImmutableList.of(0,1,Long.MAX_VALUE - 1,Long.MIN_VALUE + 1,Long.MIN_VALUE / 2,Long.MAX_VALUE / 2);\nprobability=ImmutableList.of(0.4,0.2,0.1,0.1,0.1,0.1);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"normal-1-32\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,1.0,(double)(1L << 32),true).makeGenerator(SEED);\ncase \"normal-40-1000\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,(double)(1L << 40),1000.0,true).makeGenerator(SEED);\ncase \"sequential-1000\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,Integer.MAX_VALUE - 1001,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"sequential-unique\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,0,rows).makeGenerator(SEED);\ncase \"uniform-1\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1).makeGenerator(SEED);\ncase \"uniform-2\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,4).makeGenerator(SEED);\ncase \"uniform-3\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,1000000,1000008).makeGenerator(SEED);\ncase \"uniform-4\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 4).makeGenerator(SEED);\ncase \"uniform-8\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 8).makeGenerator(SEED);\ncase \"uniform-12\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 12).makeGenerator(SEED);\ncase \"uniform-16\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 16).makeGenerator(SEED);\ncase \"uniform-20\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 20).makeGenerator(SEED);\ncase \"uniform-24\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1 << 24) - 1).makeGenerator(SEED);\ncase \"uinform-32\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"uniform-40\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0L,(1L << 40) - 1).makeGenerator(SEED);\ncase \"uniform-48\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 48) - 1).makeGenerator(SEED);\ncase \"uniform-56\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 56 - 1)).makeGenerator(SEED);\ncase \"uniform-64\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Long.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"zipf-low-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,1d).makeGenerator(SEED);\ncase \"zipf-low-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,1d).makeGenerator(SEED);\ncase \"zipf-low-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,1d).makeGenerator(SEED);\ncase \"zipf-high-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,3d).makeGenerator(SEED);\ncase \"zipf-high-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,3d).makeGenerator(SEED);\ncase \"zipf-high-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,3d).makeGenerator(SEED);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 596,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7666,
        "startLineNumber" : 96,
        "startColumnNumber" : 2,
        "endLineNumber" : 381,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Object> enumerated;\n  List<Double> probability;\nswitch (distribution) {\ncase \"enumerated-0-1\":    enumerated=ImmutableList.of(0,1);\n  probability=ImmutableList.of(0.6,0.4);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"enumerated-full\":enumerated=ImmutableList.of(0,1,Long.MAX_VALUE - 1,Long.MIN_VALUE + 1,Long.MIN_VALUE / 2,Long.MAX_VALUE / 2);\nprobability=ImmutableList.of(0.4,0.2,0.1,0.1,0.1,0.1);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"normal-1-32\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,1.0,(double)(1L << 32),true).makeGenerator(SEED);\ncase \"normal-40-1000\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,(double)(1L << 40),1000.0,true).makeGenerator(SEED);\ncase \"sequential-1000\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,Integer.MAX_VALUE - 1001,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"sequential-unique\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,0,rows).makeGenerator(SEED);\ncase \"uniform-1\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1).makeGenerator(SEED);\ncase \"uniform-2\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,4).makeGenerator(SEED);\ncase \"uniform-3\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,1000000,1000008).makeGenerator(SEED);\ncase \"uniform-4\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 4).makeGenerator(SEED);\ncase \"uniform-8\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 8).makeGenerator(SEED);\ncase \"uniform-12\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 12).makeGenerator(SEED);\ncase \"uniform-16\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 16).makeGenerator(SEED);\ncase \"uniform-20\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 20).makeGenerator(SEED);\ncase \"uniform-24\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1 << 24) - 1).makeGenerator(SEED);\ncase \"uinform-32\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"uniform-40\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0L,(1L << 40) - 1).makeGenerator(SEED);\ncase \"uniform-48\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 48) - 1).makeGenerator(SEED);\ncase \"uniform-56\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 56 - 1)).makeGenerator(SEED);\ncase \"uniform-64\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Long.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"zipf-low-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,1d).makeGenerator(SEED);\ncase \"zipf-low-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,1d).makeGenerator(SEED);\ncase \"zipf-low-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,1d).makeGenerator(SEED);\ncase \"zipf-high-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,3d).makeGenerator(SEED);\ncase \"zipf-high-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,3d).makeGenerator(SEED);\ncase \"zipf-high-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,3d).makeGenerator(SEED);\n}\nthrow new IllegalArgumentException(\"unknown distribution\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 618,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7787,
        "startLineNumber" : 91,
        "startColumnNumber" : 2,
        "endLineNumber" : 381,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static ColumnValueGenerator makeGenerator(String distribution,int rows,double zeroProbability){\n  List<Object> enumerated;\n  List<Double> probability;\nswitch (distribution) {\ncase \"enumerated-0-1\":    enumerated=ImmutableList.of(0,1);\n  probability=ImmutableList.of(0.6,0.4);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"enumerated-full\":enumerated=ImmutableList.of(0,1,Long.MAX_VALUE - 1,Long.MIN_VALUE + 1,Long.MIN_VALUE / 2,Long.MAX_VALUE / 2);\nprobability=ImmutableList.of(0.4,0.2,0.1,0.1,0.1,0.1);\nreturn GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\ncase \"normal-1-32\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,1.0,(double)(1L << 32),true).makeGenerator(SEED);\ncase \"normal-40-1000\":return GeneratorColumnSchema.makeNormal(distribution,ValueType.LONG,true,1,zeroProbability,(double)(1L << 40),1000.0,true).makeGenerator(SEED);\ncase \"sequential-1000\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,Integer.MAX_VALUE - 1001,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"sequential-unique\":return GeneratorColumnSchema.makeSequential(distribution,ValueType.LONG,true,1,zeroProbability,0,rows).makeGenerator(SEED);\ncase \"uniform-1\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1).makeGenerator(SEED);\ncase \"uniform-2\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,4).makeGenerator(SEED);\ncase \"uniform-3\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,1000000,1000008).makeGenerator(SEED);\ncase \"uniform-4\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 4).makeGenerator(SEED);\ncase \"uniform-8\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 8).makeGenerator(SEED);\ncase \"uniform-12\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 12).makeGenerator(SEED);\ncase \"uniform-16\":return GeneratorColumnSchema.makeDiscreteUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 16).makeGenerator(SEED);\ncase \"uniform-20\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,1 << 20).makeGenerator(SEED);\ncase \"uniform-24\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1 << 24) - 1).makeGenerator(SEED);\ncase \"uinform-32\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Integer.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"uniform-40\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0L,(1L << 40) - 1).makeGenerator(SEED);\ncase \"uniform-48\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 48) - 1).makeGenerator(SEED);\ncase \"uniform-56\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,(1L << 56 - 1)).makeGenerator(SEED);\ncase \"uniform-64\":return GeneratorColumnSchema.makeContinuousUniform(distribution,ValueType.LONG,true,1,zeroProbability,0,Long.MAX_VALUE - 1).makeGenerator(SEED);\ncase \"zipf-low-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,1d).makeGenerator(SEED);\ncase \"zipf-low-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,1d).makeGenerator(SEED);\ncase \"zipf-low-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,1d).makeGenerator(SEED);\ncase \"zipf-high-100\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,0,100,3d).makeGenerator(SEED);\ncase \"zipf-high-100000\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,zeroProbability,-50000,50000,3d).makeGenerator(SEED);\ncase \"zipf-high-32-bit\":return GeneratorColumnSchema.makeLazyZipf(distribution,ValueType.LONG,true,1,0d,0,Integer.MAX_VALUE,3d).makeGenerator(SEED);\n}\nthrow new IllegalArgumentException(\"unknown distribution\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 239,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return GeneratorColumnSchema.makeEnumerated(distribution,ValueType.LONG,true,1,zeroProbability,enumerated,probability).makeGenerator(SEED);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 10,
    "type" : "org.apache.druid.segment.generator.GeneratorColumnSchema"
  } ],
  "positionList" : [ {
    "charLength" : 211,
    "startLineNumber" : 103,
    "startColumnNumber" : 15,
    "endLineNumber" : 111,
    "endColumnNumber" : 9
  }, {
    "charLength" : 211,
    "startLineNumber" : 122,
    "startColumnNumber" : 15,
    "endLineNumber" : 130,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}