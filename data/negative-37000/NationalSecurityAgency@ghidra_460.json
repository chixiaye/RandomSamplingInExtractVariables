{
  "id" : 460,
  "expression" : "\" max: \"",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Decompiler/ghidra_scripts/StringParameterPropagator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" max: \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 199,
      "startColumnNumber" : 58,
      "endLineNumber" : 199,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 199,
        "startColumnNumber" : 6,
        "endLineNumber" : 199,
        "endColumnNumber" : 78
      },
      "nodeContext" : "\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 197,
        "startColumnNumber" : 5,
        "endLineNumber" : 199,
        "endColumnNumber" : 79
      },
      "nodeContext" : "currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 197,
        "startColumnNumber" : 5,
        "endLineNumber" : 199,
        "endColumnNumber" : 80
      },
      "nodeContext" : "currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 384,
        "startLineNumber" : 196,
        "startColumnNumber" : 36,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n  println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n  if (minParams > 6) {\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 416,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!funcInfo.numParamsAgree()) {\n  currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n  println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n  if (minParams > 6) {\n    continue;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2148,
        "startLineNumber" : 169,
        "startColumnNumber" : 57,
        "endLineNumber" : 230,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Address entry=entryIter.next();\n  FuncInfo funcInfo=funcParamMap.get(entry);\n  if (doneItSet.contains(entry)) {\n    continue;\n  }\n  doneItSet.add(entry);\n  Function calledFunc=getFunctionAt(entry);\n  if (calledFunc == null) {\n    calledFunc=createFunction(entry,null);\n  }\n  if (calledFunc == null || !decompileFunction(calledFunc,decomplib)) {\n    continue;\n  }\n  int minParams=funcInfo.getMinParamsSeen();\n  int maxParams=funcInfo.getMaxParamsSeen();\n  boolean couldBeVararg=!funcInfo.numParamsAgree();\n  if (!funcInfo.numParamsAgree()) {\n    currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n    println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n    if (minParams > 6) {\n      continue;\n    }\n  }\n  ArrayList<Integer> paramsSeen=funcInfo.getParamsSeen();\n  while (paramsSeen.size() > 0) {\n    int paramIndex=paramsSeen.remove(0);\n    if (paramIndex > minParams) {\n      println(\"WARNING: at \" + calledFunc.getName() + \", Couldn't apply param \"+ paramIndex);\n      continue;\n    }\n    DataType dt=new PointerDataType(funcInfo.getDataType());\n    @SuppressWarnings(\"unused\") boolean mustRedo=checkParams(calledFunc,dt,paramIndex,minParams,couldBeVararg);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2202,
        "startLineNumber" : 169,
        "startColumnNumber" : 3,
        "endLineNumber" : 230,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (entryIter.hasNext() && !monitor.isCancelled()) {\n  Address entry=entryIter.next();\n  FuncInfo funcInfo=funcParamMap.get(entry);\n  if (doneItSet.contains(entry)) {\n    continue;\n  }\n  doneItSet.add(entry);\n  Function calledFunc=getFunctionAt(entry);\n  if (calledFunc == null) {\n    calledFunc=createFunction(entry,null);\n  }\n  if (calledFunc == null || !decompileFunction(calledFunc,decomplib)) {\n    continue;\n  }\n  int minParams=funcInfo.getMinParamsSeen();\n  int maxParams=funcInfo.getMaxParamsSeen();\n  boolean couldBeVararg=!funcInfo.numParamsAgree();\n  if (!funcInfo.numParamsAgree()) {\n    currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n    println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n    if (minParams > 6) {\n      continue;\n    }\n  }\n  ArrayList<Integer> paramsSeen=funcInfo.getParamsSeen();\n  while (paramsSeen.size() > 0) {\n    int paramIndex=paramsSeen.remove(0);\n    if (paramIndex > minParams) {\n      println(\"WARNING: at \" + calledFunc.getName() + \", Couldn't apply param \"+ paramIndex);\n      continue;\n    }\n    DataType dt=new PointerDataType(funcInfo.getDataType());\n    @SuppressWarnings(\"unused\") boolean mustRedo=checkParams(calledFunc,dt,paramIndex,minParams,couldBeVararg);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 204,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4221,
        "startLineNumber" : 121,
        "startColumnNumber" : 6,
        "endLineNumber" : 234,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  decomplib=setUpDecompiler(currentProgram);\n  if (!decomplib.openProgram(currentProgram)) {\n    println(\"Decompile Error: \" + decomplib.getLastMessage());\n    return;\n  }\n  HashSet<Address> stringLocationSet=new HashSet<Address>();\n  HashSet<Address> callingFuncLocationSet=new HashSet<Address>();\n  monitor.setMessage(\"Finding References to Data\");\n  long start=System.currentTimeMillis();\n  collectStringDataReferenceLocations(stringLocationSet,callingFuncLocationSet);\n  long end=System.currentTimeMillis();\n  println(\"Initial search took : \" + (end - start) / 1000 + \" seconds\");\n  HashMap<Address,FuncInfo> funcParamMap=new HashMap<Address,FuncInfo>();\n  while ((callingFuncLocationSet.size() > 0) && !monitor.isCancelled()) {\n    Iterator<Address> callingFuncIter=callingFuncLocationSet.iterator();\n    if (!callingFuncIter.hasNext()) {\n      break;\n    }\n    Address entry=callingFuncIter.next();\n    callingFuncIter.remove();\n    Function func=currentProgram.getFunctionManager().getFunctionAt(entry);\n    if (func == null) {\n      continue;\n    }\n    monitor.setMessage(\"Analyzing calls in \" + func.getName());\n    analyzeFunction(funcParamMap,decomplib,currentProgram,func,stringLocationSet);\n  }\n  HashSet<Address> doneItSet=new HashSet<Address>();\n  Iterator<Address> entryIter=funcParamMap.keySet().iterator();\n  while (entryIter.hasNext() && !monitor.isCancelled()) {\n    Address entry=entryIter.next();\n    FuncInfo funcInfo=funcParamMap.get(entry);\n    if (doneItSet.contains(entry)) {\n      continue;\n    }\n    doneItSet.add(entry);\n    Function calledFunc=getFunctionAt(entry);\n    if (calledFunc == null) {\n      calledFunc=createFunction(entry,null);\n    }\n    if (calledFunc == null || !decompileFunction(calledFunc,decomplib)) {\n      continue;\n    }\n    int minParams=funcInfo.getMinParamsSeen();\n    int maxParams=funcInfo.getMaxParamsSeen();\n    boolean couldBeVararg=!funcInfo.numParamsAgree();\n    if (!funcInfo.numParamsAgree()) {\n      currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n      println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n      if (minParams > 6) {\n        continue;\n      }\n    }\n    ArrayList<Integer> paramsSeen=funcInfo.getParamsSeen();\n    while (paramsSeen.size() > 0) {\n      int paramIndex=paramsSeen.remove(0);\n      if (paramIndex > minParams) {\n        println(\"WARNING: at \" + calledFunc.getName() + \", Couldn't apply param \"+ paramIndex);\n        continue;\n      }\n      DataType dt=new PointerDataType(funcInfo.getDataType());\n      @SuppressWarnings(\"unused\") boolean mustRedo=checkParams(calledFunc,dt,paramIndex,minParams,couldBeVararg);\n    }\n  }\n  end=System.currentTimeMillis();\n  println(\"Total took : \" + (end - start) / 1000 + \" seconds\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 433,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4304,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 239,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  decomplib=setUpDecompiler(currentProgram);\n  if (!decomplib.openProgram(currentProgram)) {\n    println(\"Decompile Error: \" + decomplib.getLastMessage());\n    return;\n  }\n  HashSet<Address> stringLocationSet=new HashSet<Address>();\n  HashSet<Address> callingFuncLocationSet=new HashSet<Address>();\n  monitor.setMessage(\"Finding References to Data\");\n  long start=System.currentTimeMillis();\n  collectStringDataReferenceLocations(stringLocationSet,callingFuncLocationSet);\n  long end=System.currentTimeMillis();\n  println(\"Initial search took : \" + (end - start) / 1000 + \" seconds\");\n  HashMap<Address,FuncInfo> funcParamMap=new HashMap<Address,FuncInfo>();\n  while ((callingFuncLocationSet.size() > 0) && !monitor.isCancelled()) {\n    Iterator<Address> callingFuncIter=callingFuncLocationSet.iterator();\n    if (!callingFuncIter.hasNext()) {\n      break;\n    }\n    Address entry=callingFuncIter.next();\n    callingFuncIter.remove();\n    Function func=currentProgram.getFunctionManager().getFunctionAt(entry);\n    if (func == null) {\n      continue;\n    }\n    monitor.setMessage(\"Analyzing calls in \" + func.getName());\n    analyzeFunction(funcParamMap,decomplib,currentProgram,func,stringLocationSet);\n  }\n  HashSet<Address> doneItSet=new HashSet<Address>();\n  Iterator<Address> entryIter=funcParamMap.keySet().iterator();\n  while (entryIter.hasNext() && !monitor.isCancelled()) {\n    Address entry=entryIter.next();\n    FuncInfo funcInfo=funcParamMap.get(entry);\n    if (doneItSet.contains(entry)) {\n      continue;\n    }\n    doneItSet.add(entry);\n    Function calledFunc=getFunctionAt(entry);\n    if (calledFunc == null) {\n      calledFunc=createFunction(entry,null);\n    }\n    if (calledFunc == null || !decompileFunction(calledFunc,decomplib)) {\n      continue;\n    }\n    int minParams=funcInfo.getMinParamsSeen();\n    int maxParams=funcInfo.getMaxParamsSeen();\n    boolean couldBeVararg=!funcInfo.numParamsAgree();\n    if (!funcInfo.numParamsAgree()) {\n      currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n      println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n      if (minParams > 6) {\n        continue;\n      }\n    }\n    ArrayList<Integer> paramsSeen=funcInfo.getParamsSeen();\n    while (paramsSeen.size() > 0) {\n      int paramIndex=paramsSeen.remove(0);\n      if (paramIndex > minParams) {\n        println(\"WARNING: at \" + calledFunc.getName() + \", Couldn't apply param \"+ paramIndex);\n        continue;\n      }\n      DataType dt=new PointerDataType(funcInfo.getDataType());\n      @SuppressWarnings(\"unused\") boolean mustRedo=checkParams(calledFunc,dt,paramIndex,minParams,couldBeVararg);\n    }\n  }\n  end=System.currentTimeMillis();\n  println(\"Total took : \" + (end - start) / 1000 + \" seconds\");\n}\n  finally {\n  if (decomplib != null) {\n    decomplib.dispose();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 444,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4313,
        "startLineNumber" : 120,
        "startColumnNumber" : 36,
        "endLineNumber" : 240,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    decomplib=setUpDecompiler(currentProgram);\n    if (!decomplib.openProgram(currentProgram)) {\n      println(\"Decompile Error: \" + decomplib.getLastMessage());\n      return;\n    }\n    HashSet<Address> stringLocationSet=new HashSet<Address>();\n    HashSet<Address> callingFuncLocationSet=new HashSet<Address>();\n    monitor.setMessage(\"Finding References to Data\");\n    long start=System.currentTimeMillis();\n    collectStringDataReferenceLocations(stringLocationSet,callingFuncLocationSet);\n    long end=System.currentTimeMillis();\n    println(\"Initial search took : \" + (end - start) / 1000 + \" seconds\");\n    HashMap<Address,FuncInfo> funcParamMap=new HashMap<Address,FuncInfo>();\n    while ((callingFuncLocationSet.size() > 0) && !monitor.isCancelled()) {\n      Iterator<Address> callingFuncIter=callingFuncLocationSet.iterator();\n      if (!callingFuncIter.hasNext()) {\n        break;\n      }\n      Address entry=callingFuncIter.next();\n      callingFuncIter.remove();\n      Function func=currentProgram.getFunctionManager().getFunctionAt(entry);\n      if (func == null) {\n        continue;\n      }\n      monitor.setMessage(\"Analyzing calls in \" + func.getName());\n      analyzeFunction(funcParamMap,decomplib,currentProgram,func,stringLocationSet);\n    }\n    HashSet<Address> doneItSet=new HashSet<Address>();\n    Iterator<Address> entryIter=funcParamMap.keySet().iterator();\n    while (entryIter.hasNext() && !monitor.isCancelled()) {\n      Address entry=entryIter.next();\n      FuncInfo funcInfo=funcParamMap.get(entry);\n      if (doneItSet.contains(entry)) {\n        continue;\n      }\n      doneItSet.add(entry);\n      Function calledFunc=getFunctionAt(entry);\n      if (calledFunc == null) {\n        calledFunc=createFunction(entry,null);\n      }\n      if (calledFunc == null || !decompileFunction(calledFunc,decomplib)) {\n        continue;\n      }\n      int minParams=funcInfo.getMinParamsSeen();\n      int maxParams=funcInfo.getMaxParamsSeen();\n      boolean couldBeVararg=!funcInfo.numParamsAgree();\n      if (!funcInfo.numParamsAgree()) {\n        currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n        println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n        if (minParams > 6) {\n          continue;\n        }\n      }\n      ArrayList<Integer> paramsSeen=funcInfo.getParamsSeen();\n      while (paramsSeen.size() > 0) {\n        int paramIndex=paramsSeen.remove(0);\n        if (paramIndex > minParams) {\n          println(\"WARNING: at \" + calledFunc.getName() + \", Couldn't apply param \"+ paramIndex);\n          continue;\n        }\n        DataType dt=new PointerDataType(funcInfo.getDataType());\n        @SuppressWarnings(\"unused\") boolean mustRedo=checkParams(calledFunc,dt,paramIndex,minParams,couldBeVararg);\n      }\n    }\n    end=System.currentTimeMillis();\n    println(\"Total took : \" + (end - start) / 1000 + \" seconds\");\n  }\n  finally {\n    if (decomplib != null) {\n      decomplib.dispose();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4360,
        "startLineNumber" : 119,
        "startColumnNumber" : 1,
        "endLineNumber" : 240,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void run() throws Exception {\n  try {\n    decomplib=setUpDecompiler(currentProgram);\n    if (!decomplib.openProgram(currentProgram)) {\n      println(\"Decompile Error: \" + decomplib.getLastMessage());\n      return;\n    }\n    HashSet<Address> stringLocationSet=new HashSet<Address>();\n    HashSet<Address> callingFuncLocationSet=new HashSet<Address>();\n    monitor.setMessage(\"Finding References to Data\");\n    long start=System.currentTimeMillis();\n    collectStringDataReferenceLocations(stringLocationSet,callingFuncLocationSet);\n    long end=System.currentTimeMillis();\n    println(\"Initial search took : \" + (end - start) / 1000 + \" seconds\");\n    HashMap<Address,FuncInfo> funcParamMap=new HashMap<Address,FuncInfo>();\n    while ((callingFuncLocationSet.size() > 0) && !monitor.isCancelled()) {\n      Iterator<Address> callingFuncIter=callingFuncLocationSet.iterator();\n      if (!callingFuncIter.hasNext()) {\n        break;\n      }\n      Address entry=callingFuncIter.next();\n      callingFuncIter.remove();\n      Function func=currentProgram.getFunctionManager().getFunctionAt(entry);\n      if (func == null) {\n        continue;\n      }\n      monitor.setMessage(\"Analyzing calls in \" + func.getName());\n      analyzeFunction(funcParamMap,decomplib,currentProgram,func,stringLocationSet);\n    }\n    HashSet<Address> doneItSet=new HashSet<Address>();\n    Iterator<Address> entryIter=funcParamMap.keySet().iterator();\n    while (entryIter.hasNext() && !monitor.isCancelled()) {\n      Address entry=entryIter.next();\n      FuncInfo funcInfo=funcParamMap.get(entry);\n      if (doneItSet.contains(entry)) {\n        continue;\n      }\n      doneItSet.add(entry);\n      Function calledFunc=getFunctionAt(entry);\n      if (calledFunc == null) {\n        calledFunc=createFunction(entry,null);\n      }\n      if (calledFunc == null || !decompileFunction(calledFunc,decomplib)) {\n        continue;\n      }\n      int minParams=funcInfo.getMinParamsSeen();\n      int maxParams=funcInfo.getMaxParamsSeen();\n      boolean couldBeVararg=!funcInfo.numParamsAgree();\n      if (!funcInfo.numParamsAgree()) {\n        currentProgram.getBookmarkManager().setBookmark(calledFunc.getEntryPoint(),BookmarkType.NOTE,this.getClass().getName(),\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams);\n        println(\"WARNING : Number of params disagree for \" + calledFunc.getName() + \" @ \"+ entry);\n        if (minParams > 6) {\n          continue;\n        }\n      }\n      ArrayList<Integer> paramsSeen=funcInfo.getParamsSeen();\n      while (paramsSeen.size() > 0) {\n        int paramIndex=paramsSeen.remove(0);\n        if (paramIndex > minParams) {\n          println(\"WARNING: at \" + calledFunc.getName() + \", Couldn't apply param \"+ paramIndex);\n          continue;\n        }\n        DataType dt=new PointerDataType(funcInfo.getDataType());\n        @SuppressWarnings(\"unused\") boolean mustRedo=checkParams(calledFunc,dt,paramIndex,minParams,couldBeVararg);\n      }\n    }\n    end=System.currentTimeMillis();\n    println(\"Total took : \" + (end - start) / 1000 + \" seconds\");\n  }\n  finally {\n    if (decomplib != null) {\n      decomplib.dispose();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 453,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 199,
        "startColumnNumber" : 6,
        "endLineNumber" : 199,
        "endColumnNumber" : 78
      },
      "nodeContext" : "\"Number of parameters disagree min: \" + minParams + \" max: \"+ maxParams",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 199,
    "startColumnNumber" : 58,
    "endLineNumber" : 199,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}