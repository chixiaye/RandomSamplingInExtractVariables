{
  "id" : 411,
  "expression" : "ResultMetadataType.BYTE_SEGMENTS",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/multi/qrcode/QRCodeMultiReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ResultMetadataType.BYTE_SEGMENTS",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 64,
      "startColumnNumber" : 29,
      "endLineNumber" : 64,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 64,
        "startColumnNumber" : 10,
        "endLineNumber" : 64,
        "endColumnNumber" : 76
      },
      "nodeContext" : "result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 64,
        "startColumnNumber" : 10,
        "endLineNumber" : 64,
        "endColumnNumber" : 77
      },
      "nodeContext" : "result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 63,
        "startColumnNumber" : 34,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (byteSegments != null) {\n  result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 714,
        "startLineNumber" : 57,
        "startColumnNumber" : 10,
        "endLineNumber" : 71,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);\n  ResultPoint[] points=detectorResult.getPoints();\n  Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n  List<byte[]> byteSegments=decoderResult.getByteSegments();\n  if (byteSegments != null) {\n    result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n  }\n  String ecLevel=decoderResult.getECLevel();\n  if (ecLevel != null) {\n    result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n  }\n  results.add(result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 787,
        "startLineNumber" : 57,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);\n  ResultPoint[] points=detectorResult.getPoints();\n  Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n  List<byte[]> byteSegments=decoderResult.getByteSegments();\n  if (byteSegments != null) {\n    result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n  }\n  String ecLevel=decoderResult.getECLevel();\n  if (ecLevel != null) {\n    result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n  }\n  results.add(result);\n}\n catch (ReaderException re) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 100,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 56,
        "startColumnNumber" : 58,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);\n    ResultPoint[] points=detectorResult.getPoints();\n    Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n    List<byte[]> byteSegments=decoderResult.getByteSegments();\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n    }\n    String ecLevel=decoderResult.getECLevel();\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n    }\n    results.add(result);\n  }\n catch (  ReaderException re) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 855,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DetectorResult detectorResult : detectorResults) {\n  try {\n    DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);\n    ResultPoint[] points=detectorResult.getPoints();\n    Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n    List<byte[]> byteSegments=decoderResult.getByteSegments();\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n    }\n    String ecLevel=decoderResult.getECLevel();\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n    }\n    results.add(result);\n  }\n catch (  ReaderException re) {\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 107,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 53,
        "startColumnNumber" : 107,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Result> results=new ArrayList<Result>();\n  DetectorResult[] detectorResults=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);\n  for (  DetectorResult detectorResult : detectorResults) {\n    try {\n      DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);\n      ResultPoint[] points=detectorResult.getPoints();\n      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n      List<byte[]> byteSegments=decoderResult.getByteSegments();\n      if (byteSegments != null) {\n        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n      }\n      String ecLevel=decoderResult.getECLevel();\n      if (ecLevel != null) {\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n      }\n      results.add(result);\n    }\n catch (    ReaderException re) {\n    }\n  }\n  if (results.isEmpty()) {\n    return EMPTY_RESULT_ARRAY;\n  }\n else {\n    return results.toArray(new Result[results.size()]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1274,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Result[] decodeMultiple(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {\n  List<Result> results=new ArrayList<Result>();\n  DetectorResult[] detectorResults=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);\n  for (  DetectorResult detectorResult : detectorResults) {\n    try {\n      DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);\n      ResultPoint[] points=detectorResult.getPoints();\n      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n      List<byte[]> byteSegments=decoderResult.getByteSegments();\n      if (byteSegments != null) {\n        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n      }\n      String ecLevel=decoderResult.getECLevel();\n      if (ecLevel != null) {\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);\n      }\n      results.add(result);\n    }\n catch (    ReaderException re) {\n    }\n  }\n  if (results.isEmpty()) {\n    return EMPTY_RESULT_ARRAY;\n  }\n else {\n    return results.toArray(new Result[results.size()]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 64,
        "startColumnNumber" : 10,
        "endLineNumber" : 64,
        "endColumnNumber" : 77
      },
      "nodeContext" : "result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "com.google.zxing.ResultMetadataType"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 64,
    "startColumnNumber" : 29,
    "endLineNumber" : 64,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}