{
  "id" : 308,
  "expression" : "Endpoints",
  "projectName" : "codecentric@spring-boot-admin",
  "commitID" : "cc544df47d4bcdf7138ca3e264797778fb39920a",
  "filePath" : "/spring-boot-admin-server/src/test/java/de/codecentric/boot/admin/server/services/EndpointDetectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Endpoints",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 80,
      "startColumnNumber" : 84,
      "endLineNumber" : 80,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 80,
        "startColumnNumber" : 84,
        "endLineNumber" : 80,
        "endColumnNumber" : 113
      },
      "nodeContext" : "Endpoints.single(\"id\",\"url\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 80,
        "startColumnNumber" : 74,
        "endLineNumber" : 80,
        "endColumnNumber" : 114
      },
      "nodeContext" : "Mono.just(Endpoints.single(\"id\",\"url\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 115
      },
      "nodeContext" : "when(strategy.detectEndpoints(any(Application.class))).thenReturn(Mono.just(Endpoints.single(\"id\",\"url\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 116
      },
      "nodeContext" : "when(strategy.detectEndpoints(any(Application.class))).thenReturn(Mono.just(Endpoints.single(\"id\",\"url\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2545,
        "startLineNumber" : 57,
        "startColumnNumber" : 42,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Registration registration=Registration.create(\"foo\",\"http://health\").managementUrl(\"http://mgmt\").build();\n  Application application=Application.create(ApplicationId.of(\"onl\")).register(registration).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(application)).verifyComplete();\n  Application noActuator=Application.create(ApplicationId.of(\"noActuator\")).register(Registration.create(\"foo\",\"http://health\").build()).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(noActuator)).verifyComplete();\n  Application offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline());\n  StepVerifier.create(repository.save(offline)).verifyComplete();\n  Application unknown=Application.create(ApplicationId.of(\"unk\")).register(registration).withStatusInfo(StatusInfo.ofUnknown());\n  StepVerifier.create(repository.save(unknown)).verifyComplete();\n  when(strategy.detectEndpoints(any(Application.class))).thenReturn(Mono.just(Endpoints.single(\"id\",\"url\")));\n  StepVerifier.create(eventStore).expectSubscription().then(() -> StepVerifier.create(detector.detectEndpoints(offline.getId())).verifyComplete()).then(() -> StepVerifier.create(detector.detectEndpoints(unknown.getId())).verifyComplete()).then(() -> StepVerifier.create(detector.detectEndpoints(noActuator.getId())).verifyComplete()).expectNoEvent(Duration.ofMillis(10L)).then(() -> StepVerifier.create(detector.detectEndpoints(application.getId())).verifyComplete()).assertNext(event -> assertThat(event).isInstanceOf(ClientApplicationEndpointsDetectedEvent.class)).thenCancel().verify(Duration.ofMillis(500L));\n  StepVerifier.create(repository.find(application.getId())).assertNext(app -> assertThat(app.getEndpoints()).isEqualTo(Endpoints.single(\"id\",\"url\"))).verifyComplete();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 282,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void should_update_endpoints(){\n  Registration registration=Registration.create(\"foo\",\"http://health\").managementUrl(\"http://mgmt\").build();\n  Application application=Application.create(ApplicationId.of(\"onl\")).register(registration).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(application)).verifyComplete();\n  Application noActuator=Application.create(ApplicationId.of(\"noActuator\")).register(Registration.create(\"foo\",\"http://health\").build()).withStatusInfo(StatusInfo.ofUp());\n  StepVerifier.create(repository.save(noActuator)).verifyComplete();\n  Application offline=Application.create(ApplicationId.of(\"off\")).register(registration).withStatusInfo(StatusInfo.ofOffline());\n  StepVerifier.create(repository.save(offline)).verifyComplete();\n  Application unknown=Application.create(ApplicationId.of(\"unk\")).register(registration).withStatusInfo(StatusInfo.ofUnknown());\n  StepVerifier.create(repository.save(unknown)).verifyComplete();\n  when(strategy.detectEndpoints(any(Application.class))).thenReturn(Mono.just(Endpoints.single(\"id\",\"url\")));\n  StepVerifier.create(eventStore).expectSubscription().then(() -> StepVerifier.create(detector.detectEndpoints(offline.getId())).verifyComplete()).then(() -> StepVerifier.create(detector.detectEndpoints(unknown.getId())).verifyComplete()).then(() -> StepVerifier.create(detector.detectEndpoints(noActuator.getId())).verifyComplete()).expectNoEvent(Duration.ofMillis(10L)).then(() -> StepVerifier.create(detector.detectEndpoints(application.getId())).verifyComplete()).assertNext(event -> assertThat(event).isInstanceOf(ClientApplicationEndpointsDetectedEvent.class)).thenCancel().verify(Duration.ofMillis(500L));\n  StepVerifier.create(repository.find(application.getId())).assertNext(app -> assertThat(app.getEndpoints()).isEqualTo(Endpoints.single(\"id\",\"url\"))).verifyComplete();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 288,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 116
      },
      "nodeContext" : "when(strategy.detectEndpoints(any(Application.class))).thenReturn(Mono.just(Endpoints.single(\"id\",\"url\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "de.codecentric.boot.admin.server.domain.values.Endpoints"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 80,
    "startColumnNumber" : 84,
    "endLineNumber" : 80,
    "endColumnNumber" : 93
  } ],
  "layoutRelationDataList" : [ ]
}