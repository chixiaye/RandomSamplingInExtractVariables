{
  "id" : 118,
  "expression" : "createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\")",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/services/src/main/java/org/keycloak/authentication/authenticators/x509/X509ClientCertificateAuthenticator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 121,
      "startLineNumber" : 159,
      "startColumnNumber" : 34,
      "endLineNumber" : 160,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 12,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 58
      },
      "nodeContext" : "context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 59
      },
      "nodeContext" : "context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 475,
        "startLineNumber" : 155,
        "startColumnNumber" : 45,
        "endLineNumber" : 163,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String errorMessage=\"X509 certificate authentication's failed.\";\n  context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n  context.attempted();\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 508,
        "startLineNumber" : 155,
        "startColumnNumber" : 12,
        "endLineNumber" : 163,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!userEnabled(context,user)) {\n  String errorMessage=\"X509 certificate authentication's failed.\";\n  context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n  context.attempted();\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 6942,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 182,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  dumpContainerAttributes(context);\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[X509ClientCertificateAuthenticator:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.attempted();\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[X509ClientCertificateAuthenticator:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.challenge(createInfoResponse(context,\"X509 client authentication has not been configured yet\"));\n    context.attempted();\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validatePolicy().validateTimestamps();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=\"Certificate validation's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n    context.attempted();\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.warnf(\"[X509ClientCertificateAuthenticator:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage));\n    context.attempted();\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n    context.attempted();\n    return;\n  }\n  if (invalidUser(context,user)) {\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n    context.attempted();\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n    context.attempted();\n    return;\n  }\n  if (!userEnabled(context,user)) {\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n    context.attempted();\n    return;\n  }\n  context.setUser(user);\n  if (!config.getConfirmationPageDisallowed()) {\n    context.forceChallenge(createSuccessResponse(context,certs[0].getSubjectDN().getName()));\n  }\n else {\n    context.success();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 470,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7128,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  dumpContainerAttributes(context);\n  X509Certificate[] certs=getCertificateChain(context);\n  if (certs == null || certs.length == 0) {\n    logger.debug(\"[X509ClientCertificateAuthenticator:authenticate] x509 client certificate is not available for mutual SSL.\");\n    context.attempted();\n    return;\n  }\n  saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n  recordX509CertificateAuditDataViaContextEvent(context);\n  X509AuthenticatorConfigModel config=null;\n  if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n    config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n  }\n  if (config == null) {\n    logger.warn(\"[X509ClientCertificateAuthenticator:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n    context.challenge(createInfoResponse(context,\"X509 client authentication has not been configured yet\"));\n    context.attempted();\n    return;\n  }\n  try {\n    CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n    CertificateValidator validator=builder.build(certs);\n    validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validatePolicy().validateTimestamps();\n  }\n catch (  Exception e) {\n    logger.error(e.getMessage(),e);\n    String errorMessage=\"Certificate validation's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n    context.attempted();\n    return;\n  }\n  Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n  if (userIdentity == null) {\n    context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n    logger.warnf(\"[X509ClientCertificateAuthenticator:authenticate] Unable to extract user identity from certificate.\");\n    String errorMessage=\"Unable to extract user identity from specified certificate\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage));\n    context.attempted();\n    return;\n  }\n  UserModel user;\n  try {\n    context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n    context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n    user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n  }\n catch (  ModelDuplicateException e) {\n    logger.modelDuplicateException(e);\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n    context.attempted();\n    return;\n  }\n  if (invalidUser(context,user)) {\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n    context.attempted();\n    return;\n  }\n  String bruteForceError=getDisabledByBruteForceEventError(context,user);\n  if (bruteForceError != null) {\n    context.getEvent().user(user);\n    context.getEvent().error(bruteForceError);\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n    context.attempted();\n    return;\n  }\n  if (!userEnabled(context,user)) {\n    String errorMessage=\"X509 certificate authentication's failed.\";\n    context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n    context.attempted();\n    return;\n  }\n  context.setUser(user);\n  if (!config.getConfirmationPageDisallowed()) {\n    context.forceChallenge(createSuccessResponse(context,certs[0].getSubjectDN().getName()));\n  }\n else {\n    context.success();\n  }\n}\n catch (Exception e) {\n  logger.errorf(\"[X509ClientCertificateAuthenticator:authenticate] Exception: %s\",e.getMessage());\n  context.attempted();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 489,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7145,
        "startLineNumber" : 54,
        "startColumnNumber" : 64,
        "endLineNumber" : 187,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    dumpContainerAttributes(context);\n    X509Certificate[] certs=getCertificateChain(context);\n    if (certs == null || certs.length == 0) {\n      logger.debug(\"[X509ClientCertificateAuthenticator:authenticate] x509 client certificate is not available for mutual SSL.\");\n      context.attempted();\n      return;\n    }\n    saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n    recordX509CertificateAuditDataViaContextEvent(context);\n    X509AuthenticatorConfigModel config=null;\n    if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n      config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n    }\n    if (config == null) {\n      logger.warn(\"[X509ClientCertificateAuthenticator:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n      context.challenge(createInfoResponse(context,\"X509 client authentication has not been configured yet\"));\n      context.attempted();\n      return;\n    }\n    try {\n      CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n      CertificateValidator validator=builder.build(certs);\n      validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validatePolicy().validateTimestamps();\n    }\n catch (    Exception e) {\n      logger.error(e.getMessage(),e);\n      String errorMessage=\"Certificate validation's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n      context.attempted();\n      return;\n    }\n    Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n    if (userIdentity == null) {\n      context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n      logger.warnf(\"[X509ClientCertificateAuthenticator:authenticate] Unable to extract user identity from certificate.\");\n      String errorMessage=\"Unable to extract user identity from specified certificate\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage));\n      context.attempted();\n      return;\n    }\n    UserModel user;\n    try {\n      context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n      context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n      user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n    }\n catch (    ModelDuplicateException e) {\n      logger.modelDuplicateException(e);\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n      context.attempted();\n      return;\n    }\n    if (invalidUser(context,user)) {\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n      context.attempted();\n      return;\n    }\n    String bruteForceError=getDisabledByBruteForceEventError(context,user);\n    if (bruteForceError != null) {\n      context.getEvent().user(user);\n      context.getEvent().error(bruteForceError);\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n      context.attempted();\n      return;\n    }\n    if (!userEnabled(context,user)) {\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n      context.attempted();\n      return;\n    }\n    context.setUser(user);\n    if (!config.getConfirmationPageDisallowed()) {\n      context.forceChallenge(createSuccessResponse(context,certs[0].getSubjectDN().getName()));\n    }\n else {\n      context.success();\n    }\n  }\n catch (  Exception e) {\n    logger.errorf(\"[X509ClientCertificateAuthenticator:authenticate] Exception: %s\",e.getMessage());\n    context.attempted();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7219,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 187,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void authenticate(AuthenticationFlowContext context){\n  try {\n    dumpContainerAttributes(context);\n    X509Certificate[] certs=getCertificateChain(context);\n    if (certs == null || certs.length == 0) {\n      logger.debug(\"[X509ClientCertificateAuthenticator:authenticate] x509 client certificate is not available for mutual SSL.\");\n      context.attempted();\n      return;\n    }\n    saveX509CertificateAuditDataToAuthSession(context,certs[0]);\n    recordX509CertificateAuditDataViaContextEvent(context);\n    X509AuthenticatorConfigModel config=null;\n    if (context.getAuthenticatorConfig() != null && context.getAuthenticatorConfig().getConfig() != null) {\n      config=new X509AuthenticatorConfigModel(context.getAuthenticatorConfig());\n    }\n    if (config == null) {\n      logger.warn(\"[X509ClientCertificateAuthenticator:authenticate] x509 Client Certificate Authentication configuration is not available.\");\n      context.challenge(createInfoResponse(context,\"X509 client authentication has not been configured yet\"));\n      context.attempted();\n      return;\n    }\n    try {\n      CertificateValidator.CertificateValidatorBuilder builder=certificateValidationParameters(context.getSession(),config);\n      CertificateValidator validator=builder.build(certs);\n      validator.checkRevocationStatus().validateTrust().validateKeyUsage().validateExtendedKeyUsage().validatePolicy().validateTimestamps();\n    }\n catch (    Exception e) {\n      logger.error(e.getMessage(),e);\n      String errorMessage=\"Certificate validation's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n      context.attempted();\n      return;\n    }\n    Object userIdentity=getUserIdentityExtractor(config).extractUserIdentity(certs);\n    if (userIdentity == null) {\n      context.getEvent().error(Errors.INVALID_USER_CREDENTIALS);\n      logger.warnf(\"[X509ClientCertificateAuthenticator:authenticate] Unable to extract user identity from certificate.\");\n      String errorMessage=\"Unable to extract user identity from specified certificate\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage));\n      context.attempted();\n      return;\n    }\n    UserModel user;\n    try {\n      context.getEvent().detail(Details.USERNAME,userIdentity.toString());\n      context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME,userIdentity.toString());\n      user=getUserIdentityToModelMapper(config).find(context,userIdentity);\n    }\n catch (    ModelDuplicateException e) {\n      logger.modelDuplicateException(e);\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,e.getMessage()));\n      context.attempted();\n      return;\n    }\n    if (invalidUser(context,user)) {\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n      context.attempted();\n      return;\n    }\n    String bruteForceError=getDisabledByBruteForceEventError(context,user);\n    if (bruteForceError != null) {\n      context.getEvent().user(user);\n      context.getEvent().error(bruteForceError);\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"Invalid user\"));\n      context.attempted();\n      return;\n    }\n    if (!userEnabled(context,user)) {\n      String errorMessage=\"X509 certificate authentication's failed.\";\n      context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n      context.attempted();\n      return;\n    }\n    context.setUser(user);\n    if (!config.getConfirmationPageDisallowed()) {\n      context.forceChallenge(createSuccessResponse(context,certs[0].getSubjectDN().getName()));\n    }\n else {\n      context.success();\n    }\n  }\n catch (  Exception e) {\n    logger.errorf(\"[X509ClientCertificateAuthenticator:authenticate] Exception: %s\",e.getMessage());\n    context.attempted();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 159,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 59
      },
      "nodeContext" : "context.challenge(createErrorResponse(context,certs[0].getSubjectDN().getName(),errorMessage,\"User is disabled\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 10,
    "type" : "org.keycloak.authentication.authenticators.x509.Response"
  } ],
  "positionList" : [ {
    "charLength" : 121,
    "startLineNumber" : 159,
    "startColumnNumber" : 34,
    "endLineNumber" : 160,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}