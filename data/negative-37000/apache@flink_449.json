{
  "id" : 449,
  "expression" : "20",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-files/src/test/java/org/apache/flink/connector/file/sink/writer/FileWriterBucketTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "20",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 220,
      "startColumnNumber" : 32,
      "endLineNumber" : 220,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 35
      },
      "nodeContext" : "bucket.onProcessingTime(20)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 36
      },
      "nodeContext" : "bucket.onProcessingTime(20);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1216,
        "startLineNumber" : 203,
        "startColumnNumber" : 65,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File outDir=TEMP_FOLDER.newFolder();\n  Path path=new Path(outDir.toURI());\n  RollingPolicy<String,String> onProcessingTimeRollingPolicy=DefaultRollingPolicy.builder().withRolloverInterval(Duration.ofMillis(10)).build();\n  TestRecoverableWriter recoverableWriter=getRecoverableWriter(path);\n  FileWriterBucket<String> bucket=createBucket(recoverableWriter,path,onProcessingTimeRollingPolicy,OutputFileConfig.builder().build());\n  bucket.write(\"test-element\",11);\n  bucket.write(\"test-element\",12);\n  bucket.onProcessingTime(20);\n  assertNotNull(\"The bucket should not roll since interval is not reached\",bucket.getInProgressPart());\n  bucket.write(\"test-element\",21);\n  bucket.onProcessingTime(21);\n  assertNull(\"The bucket should roll since interval is reached\",bucket.getInProgressPart());\n  List<FileSinkCommittable> fileSinkCommittables=bucket.prepareCommit(false);\n  compareNumberOfPendingAndInProgress(fileSinkCommittables,1,0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1287,
        "startLineNumber" : 202,
        "startColumnNumber" : 4,
        "endLineNumber" : 230,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRollingOnProcessingTime() throws IOException {\n  File outDir=TEMP_FOLDER.newFolder();\n  Path path=new Path(outDir.toURI());\n  RollingPolicy<String,String> onProcessingTimeRollingPolicy=DefaultRollingPolicy.builder().withRolloverInterval(Duration.ofMillis(10)).build();\n  TestRecoverableWriter recoverableWriter=getRecoverableWriter(path);\n  FileWriterBucket<String> bucket=createBucket(recoverableWriter,path,onProcessingTimeRollingPolicy,OutputFileConfig.builder().build());\n  bucket.write(\"test-element\",11);\n  bucket.write(\"test-element\",12);\n  bucket.onProcessingTime(20);\n  assertNotNull(\"The bucket should not roll since interval is not reached\",bucket.getInProgressPart());\n  bucket.write(\"test-element\",21);\n  bucket.onProcessingTime(21);\n  assertNull(\"The bucket should roll since interval is reached\",bucket.getInProgressPart());\n  List<FileSinkCommittable> fileSinkCommittables=bucket.prepareCommit(false);\n  compareNumberOfPendingAndInProgress(fileSinkCommittables,1,0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 135,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 220,
        "endColumnNumber" : 36
      },
      "nodeContext" : "bucket.onProcessingTime(20);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 220,
    "startColumnNumber" : 32,
    "endLineNumber" : 220,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}