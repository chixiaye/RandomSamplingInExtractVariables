{
  "id" : 85,
  "expression" : "clazz.getMethod(logMethod,Throwable.class)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/test/java/io/netty/util/internal/logging/AbstractInternalLoggerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clazz.getMethod(logMethod,Throwable.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 99,
      "startColumnNumber" : 8,
      "endLineNumber" : 99,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 70
      },
      "nodeContext" : "clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3661,
        "startLineNumber" : 56,
        "startColumnNumber" : 70,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  result.clear();\n  String format1=\"a={}\", format2=\"a={}, b= {}\", format3=\"a={}, b= {}, c= {}\";\n  String msg=\"a test message from Junit\";\n  Exception ex=new Exception(\"a test Exception from Junit\");\n  Class<InternalLogger> clazz=InternalLogger.class;\n  String levelName=level.name(), logMethod=levelName.toLowerCase();\n  Method isXXEnabled=clazz.getMethod(\"is\" + levelName.charAt(0) + levelName.substring(1).toLowerCase()+ \"Enabled\");\n  setLevelEnable(level,false);\n  assertFalse((Boolean)isXXEnabled.invoke(logger));\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertTrue(result.isEmpty());\n  setLevelEnable(level,true);\n  assertTrue((Boolean)isXXEnabled.invoke(logger));\n  result.clear();\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertResult(level,null,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertResult(level,format1,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertResult(level,format2,null,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertResult(level,format3,null,msg,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertResult(level,format3,ex,msg,msg,msg,ex);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertResult(level,null,ex,msg);\n  result.clear();\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertResult(level,null,ex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 489,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3727,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void testLevel(InternalLogLevel level) throws Exception {\n  result.clear();\n  String format1=\"a={}\", format2=\"a={}, b= {}\", format3=\"a={}, b= {}, c= {}\";\n  String msg=\"a test message from Junit\";\n  Exception ex=new Exception(\"a test Exception from Junit\");\n  Class<InternalLogger> clazz=InternalLogger.class;\n  String levelName=level.name(), logMethod=levelName.toLowerCase();\n  Method isXXEnabled=clazz.getMethod(\"is\" + levelName.charAt(0) + levelName.substring(1).toLowerCase()+ \"Enabled\");\n  setLevelEnable(level,false);\n  assertFalse((Boolean)isXXEnabled.invoke(logger));\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertTrue(result.isEmpty());\n  setLevelEnable(level,true);\n  assertTrue((Boolean)isXXEnabled.invoke(logger));\n  result.clear();\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertResult(level,null,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertResult(level,format1,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertResult(level,format2,null,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertResult(level,format3,null,msg,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertResult(level,format3,ex,msg,msg,msg,ex);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertResult(level,null,ex,msg);\n  result.clear();\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertResult(level,null,ex);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 499,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.reflect.Method"
  }, {
    "nodeContext" : "clazz.getMethod(logMethod,Throwable.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 140,
      "startColumnNumber" : 8,
      "endLineNumber" : 140,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 70
      },
      "nodeContext" : "clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3661,
        "startLineNumber" : 56,
        "startColumnNumber" : 70,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  result.clear();\n  String format1=\"a={}\", format2=\"a={}, b= {}\", format3=\"a={}, b= {}, c= {}\";\n  String msg=\"a test message from Junit\";\n  Exception ex=new Exception(\"a test Exception from Junit\");\n  Class<InternalLogger> clazz=InternalLogger.class;\n  String levelName=level.name(), logMethod=levelName.toLowerCase();\n  Method isXXEnabled=clazz.getMethod(\"is\" + levelName.charAt(0) + levelName.substring(1).toLowerCase()+ \"Enabled\");\n  setLevelEnable(level,false);\n  assertFalse((Boolean)isXXEnabled.invoke(logger));\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertTrue(result.isEmpty());\n  setLevelEnable(level,true);\n  assertTrue((Boolean)isXXEnabled.invoke(logger));\n  result.clear();\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertResult(level,null,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertResult(level,format1,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertResult(level,format2,null,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertResult(level,format3,null,msg,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertResult(level,format3,ex,msg,msg,msg,ex);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertResult(level,null,ex,msg);\n  result.clear();\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertResult(level,null,ex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 489,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3727,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void testLevel(InternalLogLevel level) throws Exception {\n  result.clear();\n  String format1=\"a={}\", format2=\"a={}, b= {}\", format3=\"a={}, b= {}, c= {}\";\n  String msg=\"a test message from Junit\";\n  Exception ex=new Exception(\"a test Exception from Junit\");\n  Class<InternalLogger> clazz=InternalLogger.class;\n  String levelName=level.name(), logMethod=levelName.toLowerCase();\n  Method isXXEnabled=clazz.getMethod(\"is\" + levelName.charAt(0) + levelName.substring(1).toLowerCase()+ \"Enabled\");\n  setLevelEnable(level,false);\n  assertFalse((Boolean)isXXEnabled.invoke(logger));\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertTrue(result.isEmpty());\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertTrue(result.isEmpty());\n  setLevelEnable(level,true);\n  assertTrue((Boolean)isXXEnabled.invoke(logger));\n  result.clear();\n  clazz.getMethod(logMethod,String.class).invoke(logger,msg);\n  assertResult(level,null,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class).invoke(logger,format1,msg);\n  assertResult(level,format1,null,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object.class,Object.class).invoke(logger,format2,msg,msg);\n  assertResult(level,format2,null,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg});\n  assertResult(level,format3,null,msg,msg,msg);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Object[].class).invoke(logger,format3,new Object[]{msg,msg,msg,ex});\n  assertResult(level,format3,ex,msg,msg,msg,ex);\n  result.clear();\n  clazz.getMethod(logMethod,String.class,Throwable.class).invoke(logger,msg,ex);\n  assertResult(level,null,ex,msg);\n  result.clear();\n  clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n  assertResult(level,null,ex);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 499,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 71
      },
      "nodeContext" : "clazz.getMethod(logMethod,Throwable.class).invoke(logger,ex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.lang.reflect.Method"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 99,
    "startColumnNumber" : 8,
    "endLineNumber" : 99,
    "endColumnNumber" : 51
  }, {
    "charLength" : 43,
    "startLineNumber" : 140,
    "startColumnNumber" : 8,
    "endLineNumber" : 140,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}