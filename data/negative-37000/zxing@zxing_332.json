{
  "id" : 332,
  "expression" : "args.length == 0",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/javase/src/com/google/zxing/client/j2se/CommandLineRunner.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "args.length == 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 45,
      "startColumnNumber" : 8,
      "endLineNumber" : 45,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (args.length == 0) {\n  printUsage();\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2332,
        "startLineNumber" : 44,
        "startColumnNumber" : 58,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (args.length == 0) {\n    printUsage();\n    return;\n  }\n  Config config=new Config();\n  Inputs inputs=new Inputs();\n  for (  String arg : args) {\n    if (\"--try_harder\".equals(arg)) {\n      config.setTryHarder(true);\n    }\n else     if (\"--pure_barcode\".equals(arg)) {\n      config.setPureBarcode(true);\n    }\n else     if (\"--products_only\".equals(arg)) {\n      config.setProductsOnly(true);\n    }\n else     if (\"--dump_results\".equals(arg)) {\n      config.setDumpResults(true);\n    }\n else     if (\"--dump_black_point\".equals(arg)) {\n      config.setDumpBlackPoint(true);\n    }\n else     if (\"--multi\".equals(arg)) {\n      config.setMulti(true);\n    }\n else     if (\"--brief\".equals(arg)) {\n      config.setBrief(true);\n    }\n else     if (\"--recursive\".equals(arg)) {\n      config.setRecursive(true);\n    }\n else     if (arg.startsWith(\"--crop\")) {\n      int[] crop=new int[4];\n      String[] tokens=arg.substring(7).split(\",\");\n      for (int i=0; i < crop.length; i++) {\n        crop[i]=Integer.parseInt(tokens[i]);\n      }\n      config.setCrop(crop);\n    }\n else     if (arg.startsWith(\"--threads\") && arg.length() >= 10) {\n      int threads=Integer.parseInt(arg.substring(10));\n      if (threads > 1) {\n        config.setThreads(threads);\n      }\n    }\n else     if (arg.startsWith(\"-\")) {\n      System.err.println(\"Unknown command line option \" + arg);\n      printUsage();\n      return;\n    }\n  }\n  config.setHints(buildHints(config));\n  for (  String arg : args) {\n    if (!arg.startsWith(\"--\")) {\n      addArgumentToInputs(arg,config,inputs);\n    }\n  }\n  List<DecodeThread> threads=new ArrayList<DecodeThread>(config.getThreads());\n  for (int x=0; x < config.getThreads(); x++) {\n    DecodeThread thread=new DecodeThread(config,inputs);\n    threads.add(thread);\n    thread.start();\n  }\n  int successful=0;\n  for (int x=0; x < config.getThreads(); x++) {\n    threads.get(x).join();\n    successful+=threads.get(x).getSuccessful();\n  }\n  int total=inputs.getInputCount();\n  if (total > 1) {\n    System.out.println(\"\\nDecoded \" + successful + \" files out of \"+ total+ \" successfully (\"+ (successful * 100 / total)+ \"%)\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 379,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2388,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  if (args.length == 0) {\n    printUsage();\n    return;\n  }\n  Config config=new Config();\n  Inputs inputs=new Inputs();\n  for (  String arg : args) {\n    if (\"--try_harder\".equals(arg)) {\n      config.setTryHarder(true);\n    }\n else     if (\"--pure_barcode\".equals(arg)) {\n      config.setPureBarcode(true);\n    }\n else     if (\"--products_only\".equals(arg)) {\n      config.setProductsOnly(true);\n    }\n else     if (\"--dump_results\".equals(arg)) {\n      config.setDumpResults(true);\n    }\n else     if (\"--dump_black_point\".equals(arg)) {\n      config.setDumpBlackPoint(true);\n    }\n else     if (\"--multi\".equals(arg)) {\n      config.setMulti(true);\n    }\n else     if (\"--brief\".equals(arg)) {\n      config.setBrief(true);\n    }\n else     if (\"--recursive\".equals(arg)) {\n      config.setRecursive(true);\n    }\n else     if (arg.startsWith(\"--crop\")) {\n      int[] crop=new int[4];\n      String[] tokens=arg.substring(7).split(\",\");\n      for (int i=0; i < crop.length; i++) {\n        crop[i]=Integer.parseInt(tokens[i]);\n      }\n      config.setCrop(crop);\n    }\n else     if (arg.startsWith(\"--threads\") && arg.length() >= 10) {\n      int threads=Integer.parseInt(arg.substring(10));\n      if (threads > 1) {\n        config.setThreads(threads);\n      }\n    }\n else     if (arg.startsWith(\"-\")) {\n      System.err.println(\"Unknown command line option \" + arg);\n      printUsage();\n      return;\n    }\n  }\n  config.setHints(buildHints(config));\n  for (  String arg : args) {\n    if (!arg.startsWith(\"--\")) {\n      addArgumentToInputs(arg,config,inputs);\n    }\n  }\n  List<DecodeThread> threads=new ArrayList<DecodeThread>(config.getThreads());\n  for (int x=0; x < config.getThreads(); x++) {\n    DecodeThread thread=new DecodeThread(config,inputs);\n    threads.add(thread);\n    thread.start();\n  }\n  int successful=0;\n  for (int x=0; x < config.getThreads(); x++) {\n    threads.get(x).join();\n    successful+=threads.get(x).getSuccessful();\n  }\n  int total=inputs.getInputCount();\n  if (total > 1) {\n    System.out.println(\"\\nDecoded \" + successful + \" files out of \"+ total+ \" successfully (\"+ (successful * 100 / total)+ \"%)\\n\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 392,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (args.length == 0) {\n  printUsage();\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 45,
    "startColumnNumber" : 8,
    "endLineNumber" : 45,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}