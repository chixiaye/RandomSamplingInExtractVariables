{
  "id" : 244,
  "expression" : "\"rsplit\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/net/starlark/java/spelling/SpellCheckerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"rsplit\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 87,
      "startColumnNumber" : 8,
      "endLineNumber" : 87,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 88,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 85,
        "startColumnNumber" : 17,
        "endLineNumber" : 88,
        "endColumnNumber" : 19
      },
      "nodeContext" : "dict=Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 23,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 20
      },
      "nodeContext" : "List<String> dict=Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 29,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 84,
        "startColumnNumber" : 41,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> dict=Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\");\n  assertThat(SpellChecker.suggest(\"isdfit\",dict)).isEqualTo(\"isdigit\");\n  assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\");\n  assertThat(SpellChecker.suggest(\"IS_LOWER\",dict)).isEqualTo(\"islower\");\n  assertThat(SpellChecker.suggest(\"sartwigh\",dict)).isEqualTo(\"startswith\");\n  assertThat(SpellChecker.suggest(\"SplitAllLines\",dict)).isEqualTo(\"splitlines\");\n  assertThat(SpellChecker.suggest(\"fird\",dict)).isEqualTo(\"find\");\n  assertThat(SpellChecker.suggest(\"stip\",dict)).isEqualTo(\"strip\");\n  assertThat(SpellChecker.suggest(\"isAln\",dict)).isEqualTo(\"isalnum\");\n  assertThat(SpellChecker.suggest(\"targe\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"rarget\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"xyw\",dict)).isEqualTo(\"xyz\");\n  assertThat(SpellChecker.suggest(\"target\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"isAl\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"f\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"fir\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"wqevxc\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"ialsnuaip\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"xy\",dict)).isNull();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1604,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void suggest() throws Exception {\n  List<String> dict=Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\");\n  assertThat(SpellChecker.suggest(\"isdfit\",dict)).isEqualTo(\"isdigit\");\n  assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\");\n  assertThat(SpellChecker.suggest(\"IS_LOWER\",dict)).isEqualTo(\"islower\");\n  assertThat(SpellChecker.suggest(\"sartwigh\",dict)).isEqualTo(\"startswith\");\n  assertThat(SpellChecker.suggest(\"SplitAllLines\",dict)).isEqualTo(\"splitlines\");\n  assertThat(SpellChecker.suggest(\"fird\",dict)).isEqualTo(\"find\");\n  assertThat(SpellChecker.suggest(\"stip\",dict)).isEqualTo(\"strip\");\n  assertThat(SpellChecker.suggest(\"isAln\",dict)).isEqualTo(\"isalnum\");\n  assertThat(SpellChecker.suggest(\"targe\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"rarget\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"xyw\",dict)).isEqualTo(\"xyz\");\n  assertThat(SpellChecker.suggest(\"target\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"isAl\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"f\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"fir\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"wqevxc\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"ialsnuaip\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"xy\",dict)).isNull();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 219,
        "startLineNumber" : 85,
        "startColumnNumber" : 24,
        "endLineNumber" : 88,
        "endColumnNumber" : 19
      },
      "nodeContext" : "Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"rsplit\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 91,
      "startColumnNumber" : 62,
      "endLineNumber" : 91,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 71
      },
      "nodeContext" : "assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 84,
        "startColumnNumber" : 41,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<String> dict=Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\");\n  assertThat(SpellChecker.suggest(\"isdfit\",dict)).isEqualTo(\"isdigit\");\n  assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\");\n  assertThat(SpellChecker.suggest(\"IS_LOWER\",dict)).isEqualTo(\"islower\");\n  assertThat(SpellChecker.suggest(\"sartwigh\",dict)).isEqualTo(\"startswith\");\n  assertThat(SpellChecker.suggest(\"SplitAllLines\",dict)).isEqualTo(\"splitlines\");\n  assertThat(SpellChecker.suggest(\"fird\",dict)).isEqualTo(\"find\");\n  assertThat(SpellChecker.suggest(\"stip\",dict)).isEqualTo(\"strip\");\n  assertThat(SpellChecker.suggest(\"isAln\",dict)).isEqualTo(\"isalnum\");\n  assertThat(SpellChecker.suggest(\"targe\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"rarget\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"xyw\",dict)).isEqualTo(\"xyz\");\n  assertThat(SpellChecker.suggest(\"target\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"isAl\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"f\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"fir\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"wqevxc\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"ialsnuaip\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"xy\",dict)).isNull();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1604,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void suggest() throws Exception {\n  List<String> dict=Lists.newArrayList(\"isalnum\",\"isalpha\",\"isdigit\",\"islower\",\"isupper\",\"find\",\"join\",\"range\",\"rsplit\",\"rstrip\",\"split\",\"splitlines\",\"startswith\",\"strip\",\"title\",\"upper\",\"x\",\"xyz\");\n  assertThat(SpellChecker.suggest(\"isdfit\",dict)).isEqualTo(\"isdigit\");\n  assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\");\n  assertThat(SpellChecker.suggest(\"IS_LOWER\",dict)).isEqualTo(\"islower\");\n  assertThat(SpellChecker.suggest(\"sartwigh\",dict)).isEqualTo(\"startswith\");\n  assertThat(SpellChecker.suggest(\"SplitAllLines\",dict)).isEqualTo(\"splitlines\");\n  assertThat(SpellChecker.suggest(\"fird\",dict)).isEqualTo(\"find\");\n  assertThat(SpellChecker.suggest(\"stip\",dict)).isEqualTo(\"strip\");\n  assertThat(SpellChecker.suggest(\"isAln\",dict)).isEqualTo(\"isalnum\");\n  assertThat(SpellChecker.suggest(\"targe\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"rarget\",dict)).isEqualTo(\"range\");\n  assertThat(SpellChecker.suggest(\"xyw\",dict)).isEqualTo(\"xyz\");\n  assertThat(SpellChecker.suggest(\"target\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"isAl\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"f\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"fir\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"wqevxc\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"ialsnuaip\",dict)).isNull();\n  assertThat(SpellChecker.suggest(\"xy\",dict)).isNull();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 239,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(SpellChecker.suggest(\"rspit\",dict)).isEqualTo(\"rsplit\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 87,
    "startColumnNumber" : 8,
    "endLineNumber" : 87,
    "endColumnNumber" : 16
  }, {
    "charLength" : 8,
    "startLineNumber" : 91,
    "startColumnNumber" : 62,
    "endLineNumber" : 91,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}