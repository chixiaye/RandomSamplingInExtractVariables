{
  "id" : 64,
  "expression" : "degree",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeCenter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "degree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 25,
      "startColumnNumber" : 6,
      "endLineNumber" : 25,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 25,
        "endColumnNumber" : 15
      },
      "nodeContext" : "degree[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 25,
        "endColumnNumber" : 30
      },
      "nodeContext" : "degree[i]=edges.size()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 25,
        "endColumnNumber" : 31
      },
      "nodeContext" : "degree[i]=edges.size();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 23,
        "startColumnNumber" : 32,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Integer> edges=tree.get(i);\n  degree[i]=edges.size();\n  if (degree[i] <= 1) {\n    leaves.add(i);\n    degree[i]=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 23,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  List<Integer> edges=tree.get(i);\n  degree[i]=edges.size();\n  if (degree[i] <= 1) {\n    leaves.add(i);\n    degree[i]=0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 17,
        "startColumnNumber" : 72,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> tree){\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 25,
        "endColumnNumber" : 31
      },
      "nodeContext" : "degree[i]=edges.size();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "degree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 26,
      "startColumnNumber" : 10,
      "endLineNumber" : 26,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 26,
        "startColumnNumber" : 10,
        "endLineNumber" : 26,
        "endColumnNumber" : 19
      },
      "nodeContext" : "degree[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 26,
        "startColumnNumber" : 10,
        "endLineNumber" : 26,
        "endColumnNumber" : 24
      },
      "nodeContext" : "degree[i] <= 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 26,
        "startColumnNumber" : 6,
        "endLineNumber" : 29,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (degree[i] <= 1) {\n  leaves.add(i);\n  degree[i]=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 23,
        "startColumnNumber" : 32,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Integer> edges=tree.get(i);\n  degree[i]=edges.size();\n  if (degree[i] <= 1) {\n    leaves.add(i);\n    degree[i]=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 23,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  List<Integer> edges=tree.get(i);\n  degree[i]=edges.size();\n  if (degree[i] <= 1) {\n    leaves.add(i);\n    degree[i]=0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 17,
        "startColumnNumber" : 72,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> tree){\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 26,
        "startColumnNumber" : 10,
        "endLineNumber" : 26,
        "endColumnNumber" : 24
      },
      "nodeContext" : "degree[i] <= 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "degree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 28,
      "startColumnNumber" : 8,
      "endLineNumber" : 28,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 17
      },
      "nodeContext" : "degree[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 21
      },
      "nodeContext" : "degree[i]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 22
      },
      "nodeContext" : "degree[i]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 26,
        "startColumnNumber" : 26,
        "endLineNumber" : 29,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  leaves.add(i);\n  degree[i]=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 26,
        "startColumnNumber" : 6,
        "endLineNumber" : 29,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (degree[i] <= 1) {\n  leaves.add(i);\n  degree[i]=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 23,
        "startColumnNumber" : 32,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Integer> edges=tree.get(i);\n  degree[i]=edges.size();\n  if (degree[i] <= 1) {\n    leaves.add(i);\n    degree[i]=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 23,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  List<Integer> edges=tree.get(i);\n  degree[i]=edges.size();\n  if (degree[i] <= 1) {\n    leaves.add(i);\n    degree[i]=0;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 17,
        "startColumnNumber" : 72,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> tree){\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 28,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 22
      },
      "nodeContext" : "degree[i]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "degree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 40,
      "startColumnNumber" : 16,
      "endLineNumber" : 40,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 40,
        "startColumnNumber" : 16,
        "endLineNumber" : 40,
        "endColumnNumber" : 32
      },
      "nodeContext" : "degree[neighbor]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 40,
        "startColumnNumber" : 14,
        "endLineNumber" : 40,
        "endColumnNumber" : 32
      },
      "nodeContext" : "--degree[neighbor]",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 40,
        "startColumnNumber" : 14,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "--degree[neighbor] == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 40,
        "startColumnNumber" : 10,
        "endLineNumber" : 42,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (--degree[neighbor] == 1) {\n  newLeaves.add(neighbor);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 39,
        "startColumnNumber" : 44,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (--degree[neighbor] == 1) {\n    newLeaves.add(neighbor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int neighbor : tree.get(node)) {\n  if (--degree[neighbor] == 1) {\n    newLeaves.add(neighbor);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 38,
        "startColumnNumber" : 30,
        "endLineNumber" : 45,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  int neighbor : tree.get(node)) {\n    if (--degree[neighbor] == 1) {\n      newLeaves.add(neighbor);\n    }\n  }\n  degree[node]=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 45,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int node : leaves) {\n  for (  int neighbor : tree.get(node)) {\n    if (--degree[neighbor] == 1) {\n      newLeaves.add(neighbor);\n    }\n  }\n  degree[node]=0;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 36,
        "startColumnNumber" : 31,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Integer> newLeaves=new ArrayList<>();\n  for (  int node : leaves) {\n    for (    int neighbor : tree.get(node)) {\n      if (--degree[neighbor] == 1) {\n        newLeaves.add(neighbor);\n      }\n    }\n    degree[node]=0;\n  }\n  processedLeafs+=newLeaves.size();\n  leaves=newLeaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (processedLeafs < n) {\n  List<Integer> newLeaves=new ArrayList<>();\n  for (  int node : leaves) {\n    for (    int neighbor : tree.get(node)) {\n      if (--degree[neighbor] == 1) {\n        newLeaves.add(neighbor);\n      }\n    }\n    degree[node]=0;\n  }\n  processedLeafs+=newLeaves.size();\n  leaves=newLeaves;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 17,
        "startColumnNumber" : 72,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> tree){\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 40,
        "startColumnNumber" : 14,
        "endLineNumber" : 40,
        "endColumnNumber" : 37
      },
      "nodeContext" : "--degree[neighbor] == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "degree",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 44,
      "startColumnNumber" : 8,
      "endLineNumber" : 44,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 20
      },
      "nodeContext" : "degree[node]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 24
      },
      "nodeContext" : "degree[node]=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 25
      },
      "nodeContext" : "degree[node]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 38,
        "startColumnNumber" : 30,
        "endLineNumber" : 45,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  int neighbor : tree.get(node)) {\n    if (--degree[neighbor] == 1) {\n      newLeaves.add(neighbor);\n    }\n  }\n  degree[node]=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 38,
        "startColumnNumber" : 6,
        "endLineNumber" : 45,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int node : leaves) {\n  for (  int neighbor : tree.get(node)) {\n    if (--degree[neighbor] == 1) {\n      newLeaves.add(neighbor);\n    }\n  }\n  degree[node]=0;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 36,
        "startColumnNumber" : 31,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Integer> newLeaves=new ArrayList<>();\n  for (  int node : leaves) {\n    for (    int neighbor : tree.get(node)) {\n      if (--degree[neighbor] == 1) {\n        newLeaves.add(neighbor);\n      }\n    }\n    degree[node]=0;\n  }\n  processedLeafs+=newLeaves.size();\n  leaves=newLeaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (processedLeafs < n) {\n  List<Integer> newLeaves=new ArrayList<>();\n  for (  int node : leaves) {\n    for (    int neighbor : tree.get(node)) {\n      if (--degree[neighbor] == 1) {\n        newLeaves.add(neighbor);\n      }\n    }\n    degree[node]=0;\n  }\n  processedLeafs+=newLeaves.size();\n  leaves=newLeaves;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 904,
        "startLineNumber" : 17,
        "startColumnNumber" : 72,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 974,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> findTreeCenters(List<List<Integer>> tree){\n  final int n=tree.size();\n  int[] degree=new int[n];\n  List<Integer> leaves=new ArrayList<>();\n  for (int i=0; i < n; i++) {\n    List<Integer> edges=tree.get(i);\n    degree[i]=edges.size();\n    if (degree[i] <= 1) {\n      leaves.add(i);\n      degree[i]=0;\n    }\n  }\n  int processedLeafs=leaves.size();\n  while (processedLeafs < n) {\n    List<Integer> newLeaves=new ArrayList<>();\n    for (    int node : leaves) {\n      for (      int neighbor : tree.get(node)) {\n        if (--degree[neighbor] == 1) {\n          newLeaves.add(neighbor);\n        }\n      }\n      degree[node]=0;\n    }\n    processedLeafs+=newLeaves.size();\n    leaves=newLeaves;\n  }\n  return leaves;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 171,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 25
      },
      "nodeContext" : "degree[node]=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 25,
    "startColumnNumber" : 6,
    "endLineNumber" : 25,
    "endColumnNumber" : 12
  }, {
    "charLength" : 6,
    "startLineNumber" : 26,
    "startColumnNumber" : 10,
    "endLineNumber" : 26,
    "endColumnNumber" : 16
  }, {
    "charLength" : 6,
    "startLineNumber" : 28,
    "startColumnNumber" : 8,
    "endLineNumber" : 28,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 40,
    "startColumnNumber" : 16,
    "endLineNumber" : 40,
    "endColumnNumber" : 22
  }, {
    "charLength" : 6,
    "startLineNumber" : 44,
    "startColumnNumber" : 8,
    "endLineNumber" : 44,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}