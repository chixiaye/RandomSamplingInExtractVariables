{
  "id" : 102,
  "expression" : "metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 91,
      "startLineNumber" : 231,
      "startColumnNumber" : 28,
      "endLineNumber" : 232,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 231,
        "startColumnNumber" : 10,
        "endLineNumber" : 232,
        "endColumnNumber" : 51
      },
      "nodeContext" : "0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 357,
        "startLineNumber" : 231,
        "startColumnNumber" : 6,
        "endLineNumber" : 236,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")) {\n  LOG.warn(\"Span {} in trace {} had no timestamp. \" + \"If this happens a lot consider switching back to SizeTieredCompactionStrategy for \" + \"{}.traces\",spanName,traceId,session.getLoggedKeyspace());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 230,
        "startColumnNumber" : 8,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")) {\n    LOG.warn(\"Span {} in trace {} had no timestamp. \" + \"If this happens a lot consider switching back to SizeTieredCompactionStrategy for \" + \"{}.traces\",spanName,traceId,session.getLoggedKeyspace());\n  }\n  BoundStatement bound=insertSpan.bind().setLong(\"trace_id\",traceId).setBytesUnsafe(\"ts\",timestampCodec.serialize(timestamp)).setString(\"span_name\",spanName).setBytes(\"span\",span).setInt(\"ttl_\",ttl);\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(debugInsertSpan(traceId,timestamp,spanName,span,ttl));\n  }\n  return session.executeAsync(bound);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 980,
        "startLineNumber" : 230,
        "startColumnNumber" : 4,
        "endLineNumber" : 253,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  if (0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")) {\n    LOG.warn(\"Span {} in trace {} had no timestamp. \" + \"If this happens a lot consider switching back to SizeTieredCompactionStrategy for \" + \"{}.traces\",spanName,traceId,session.getLoggedKeyspace());\n  }\n  BoundStatement bound=insertSpan.bind().setLong(\"trace_id\",traceId).setBytesUnsafe(\"ts\",timestampCodec.serialize(timestamp)).setString(\"span_name\",spanName).setBytes(\"span\",span).setInt(\"ttl_\",ttl);\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(debugInsertSpan(traceId,timestamp,spanName,span,ttl));\n  }\n  return session.executeAsync(bound);\n}\n catch (RuntimeException ex) {\n  LOG.error(\"failed \" + debugInsertSpan(traceId,timestamp,spanName,span,ttl),ex);\n  return Futures.immediateFailedFuture(ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 105,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1087,
        "startLineNumber" : 226,
        "startColumnNumber" : 32,
        "endLineNumber" : 254,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkNotNull(spanName);\n  Preconditions.checkArgument(!spanName.isEmpty());\n  try {\n    if (0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")) {\n      LOG.warn(\"Span {} in trace {} had no timestamp. \" + \"If this happens a lot consider switching back to SizeTieredCompactionStrategy for \" + \"{}.traces\",spanName,traceId,session.getLoggedKeyspace());\n    }\n    BoundStatement bound=insertSpan.bind().setLong(\"trace_id\",traceId).setBytesUnsafe(\"ts\",timestampCodec.serialize(timestamp)).setString(\"span_name\",spanName).setBytes(\"span\",span).setInt(\"ttl_\",ttl);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(debugInsertSpan(traceId,timestamp,spanName,span,ttl));\n    }\n    return session.executeAsync(bound);\n  }\n catch (  RuntimeException ex) {\n    LOG.error(\"failed \" + debugInsertSpan(traceId,timestamp,spanName,span,ttl),ex);\n    return Futures.immediateFailedFuture(ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 254,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Store the span in the underlying storage for later retrieval.\n */\nListenableFuture<?> storeSpan(long traceId,long timestamp,String spanName,ByteBuffer span,int ttl){\n  Preconditions.checkNotNull(spanName);\n  Preconditions.checkArgument(!spanName.isEmpty());\n  try {\n    if (0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")) {\n      LOG.warn(\"Span {} in trace {} had no timestamp. \" + \"If this happens a lot consider switching back to SizeTieredCompactionStrategy for \" + \"{}.traces\",spanName,traceId,session.getLoggedKeyspace());\n    }\n    BoundStatement bound=insertSpan.bind().setLong(\"trace_id\",traceId).setBytesUnsafe(\"ts\",timestampCodec.serialize(timestamp)).setString(\"span_name\",spanName).setBytes(\"span\",span).setInt(\"ttl_\",ttl);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(debugInsertSpan(traceId,timestamp,spanName,span,ttl));\n    }\n    return session.executeAsync(bound);\n  }\n catch (  RuntimeException ex) {\n    LOG.error(\"failed \" + debugInsertSpan(traceId,timestamp,spanName,span,ttl),ex);\n    return Futures.immediateFailedFuture(ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 231,
        "startColumnNumber" : 10,
        "endLineNumber" : 232,
        "endColumnNumber" : 51
      },
      "nodeContext" : "0 == timestamp && metadata.get(\"traces.compaction.class\").contains(\"DateTieredCompactionStrategy\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 91,
    "startLineNumber" : 231,
    "startColumnNumber" : 28,
    "endLineNumber" : 232,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}