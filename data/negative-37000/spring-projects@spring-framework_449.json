{
  "id" : 449,
  "expression" : "paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 156,
      "startLineNumber" : 226,
      "startColumnNumber" : 10,
      "endLineNumber" : 229,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 21,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 12
      },
      "nodeContext" : "info2=paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 13
      },
      "nodeContext" : "info2=paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2316,
        "startLineNumber" : 196,
        "startColumnNumber" : 22,
        "endLineNumber" : 265,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  RequestMappingInfo info1=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  RequestMappingInfo info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertEquals(info1,info2);\n  assertEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\",\"/NOOOOOO\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET,RequestMethod.POST).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"/NOOOOOO\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/NOOOOOO\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/NOOOOOO\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=NOOOOOO\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 351,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 195,
        "startColumnNumber" : 1,
        "endLineNumber" : 265,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void equals(){\n  RequestMappingInfo info1=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  RequestMappingInfo info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertEquals(info1,info2);\n  assertEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\",\"/NOOOOOO\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET,RequestMethod.POST).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"/NOOOOOO\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/NOOOOOO\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/NOOOOOO\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n  info2=paths(\"/foo\").methods(GET).params(\"foo=bar\",\"customFoo=NOOOOOO\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n  assertFalse(info1.equals(info2));\n  assertNotEquals(info1.hashCode(),info2.hashCode());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 357,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 226,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 13
      },
      "nodeContext" : "info2=paths(\"/foo\").methods(GET).params(\"/NOOOOOO\",\"customFoo=customBar\").headers(\"foo=bar\").consumes(\"text/plain\").produces(\"text/plain\").build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 10
    },
    "tokenLength" : 14,
    "type" : "org.springframework.web.servlet.mvc.method.RequestMappingInfo"
  } ],
  "positionList" : [ {
    "charLength" : 156,
    "startLineNumber" : 226,
    "startColumnNumber" : 10,
    "endLineNumber" : 229,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ ]
}