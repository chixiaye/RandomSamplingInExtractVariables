{
  "id" : 89,
  "expression" : "calc",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/test/java/org/springframework/scripting/bsh/BshScriptFactoryTests.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 60,
      "startColumnNumber" : 71,
      "endLineNumber" : 60,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 60,
        "startColumnNumber" : 71,
        "endLineNumber" : 60,
        "endColumnNumber" : 98
      },
      "nodeContext" : "calc instanceof Refreshable",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 99
      },
      "nodeContext" : "assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 100
      },
      "nodeContext" : "assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 100
      },
      "nodeContext" : "assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 63,
      "startColumnNumber" : 15,
      "endLineNumber" : 63,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 26
      },
      "nodeContext" : "assertEquals(calc,calc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 27
      },
      "nodeContext" : "assertEquals(calc,calc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 27
      },
      "nodeContext" : "assertEquals(calc,calc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 63,
      "startColumnNumber" : 21,
      "endLineNumber" : 63,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 26
      },
      "nodeContext" : "assertEquals(calc,calc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 27
      },
      "nodeContext" : "assertEquals(calc,calc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 27
      },
      "nodeContext" : "assertEquals(calc,calc);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 65,
      "startColumnNumber" : 31,
      "endLineNumber" : 65,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 65,
        "startColumnNumber" : 14,
        "endLineNumber" : 65,
        "endColumnNumber" : 36
      },
      "nodeContext" : "messenger.equals(calc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 65,
        "startColumnNumber" : 13,
        "endLineNumber" : 65,
        "endColumnNumber" : 36
      },
      "nodeContext" : "!messenger.equals(calc)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertTrue(!messenger.equals(calc))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertTrue(!messenger.equals(calc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertTrue(!messenger.equals(calc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 66,
      "startColumnNumber" : 37,
      "endLineNumber" : 66,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 66,
        "startColumnNumber" : 37,
        "endLineNumber" : 66,
        "endColumnNumber" : 52
      },
      "nodeContext" : "calc.hashCode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 66,
        "startColumnNumber" : 13,
        "endLineNumber" : 66,
        "endColumnNumber" : 52
      },
      "nodeContext" : "messenger.hashCode() != calc.hashCode()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertTrue(messenger.hashCode() != calc.hashCode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertTrue(messenger.hashCode() != calc.hashCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertTrue(messenger.hashCode() != calc.hashCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 67,
      "startColumnNumber" : 42,
      "endLineNumber" : 67,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 67,
        "startColumnNumber" : 42,
        "endLineNumber" : 67,
        "endColumnNumber" : 57
      },
      "nodeContext" : "calc.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 67,
        "startColumnNumber" : 14,
        "endLineNumber" : 67,
        "endColumnNumber" : 58
      },
      "nodeContext" : "messenger.toString().equals(calc.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 67,
        "startColumnNumber" : 13,
        "endLineNumber" : 67,
        "endColumnNumber" : 58
      },
      "nodeContext" : "!messenger.toString().equals(calc.toString())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertTrue(!messenger.toString().equals(calc.toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertTrue(!messenger.toString().equals(calc.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 60
      },
      "nodeContext" : "assertTrue(!messenger.toString().equals(calc.toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 69,
      "startColumnNumber" : 18,
      "endLineNumber" : 69,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 69,
        "startColumnNumber" : 18,
        "endLineNumber" : 69,
        "endColumnNumber" : 32
      },
      "nodeContext" : "calc.add(2,3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertEquals(5,calc.add(2,3))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertEquals(5,calc.add(2,3));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertEquals(5,calc.add(2,3));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  }, {
    "nodeContext" : "calc",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 74,
      "startColumnNumber" : 68,
      "endLineNumber" : 74,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 74,
        "startColumnNumber" : 13,
        "endLineNumber" : 74,
        "endColumnNumber" : 73
      },
      "nodeContext" : "ctx.getBeansOfType(Calculator.class).values().contains(calc)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 51,
        "startColumnNumber" : 28,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1189,
        "startLineNumber" : 50,
        "startColumnNumber" : 1,
        "endLineNumber" : 76,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void staticScript(){\n  ApplicationContext ctx=new ClassPathXmlApplicationContext(\"bshContext.xml\",getClass());\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Calculator.class)).contains(\"calculator\"));\n  assertTrue(Arrays.asList(ctx.getBeanNamesForType(Messenger.class)).contains(\"messenger\"));\n  Calculator calc=(Calculator)ctx.getBean(\"calculator\");\n  Messenger messenger=(Messenger)ctx.getBean(\"messenger\");\n  assertFalse(\"Scripted object should not be instance of Refreshable\",calc instanceof Refreshable);\n  assertFalse(\"Scripted object should not be instance of Refreshable\",messenger instanceof Refreshable);\n  assertEquals(calc,calc);\n  assertEquals(messenger,messenger);\n  assertTrue(!messenger.equals(calc));\n  assertTrue(messenger.hashCode() != calc.hashCode());\n  assertTrue(!messenger.toString().equals(calc.toString()));\n  assertEquals(5,calc.add(2,3));\n  String desiredMessage=\"Hello World!\";\n  assertEquals(\"Message is incorrect\",desiredMessage,messenger.getMessage());\n  assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n  assertTrue(ctx.getBeansOfType(Messenger.class).values().contains(messenger));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertTrue(ctx.getBeansOfType(Calculator.class).values().contains(calc));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "org.springframework.scripting.Calculator"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 60,
    "startColumnNumber" : 71,
    "endLineNumber" : 60,
    "endColumnNumber" : 75
  }, {
    "charLength" : 4,
    "startLineNumber" : 63,
    "startColumnNumber" : 15,
    "endLineNumber" : 63,
    "endColumnNumber" : 19
  }, {
    "charLength" : 4,
    "startLineNumber" : 63,
    "startColumnNumber" : 21,
    "endLineNumber" : 63,
    "endColumnNumber" : 25
  }, {
    "charLength" : 4,
    "startLineNumber" : 65,
    "startColumnNumber" : 31,
    "endLineNumber" : 65,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 66,
    "startColumnNumber" : 37,
    "endLineNumber" : 66,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 67,
    "startColumnNumber" : 42,
    "endLineNumber" : 67,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 69,
    "startColumnNumber" : 18,
    "endLineNumber" : 69,
    "endColumnNumber" : 22
  }, {
    "charLength" : 4,
    "startLineNumber" : 74,
    "startColumnNumber" : 68,
    "endLineNumber" : 74,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  } ]
}