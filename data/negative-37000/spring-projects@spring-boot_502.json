{
  "id" : 502,
  "expression" : "\"management.health.status.http-mapping.CUSTOM=500\"",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthWebEndpointServletManagementContextConfigurationTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"management.health.status.http-mapping.CUSTOM=500\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 62,
      "startColumnNumber" : 24,
      "endLineNumber" : 62,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 75
      },
      "nodeContext" : "this.contextRunner.withPropertyValues(\"management.health.status.http-mapping.CUSTOM=500\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 6
      },
      "nodeContext" : "this.contextRunner.withPropertyValues(\"management.health.status.http-mapping.CUSTOM=500\").run((context) -> {\n  Object extension=context.getBean(HealthEndpointWebExtension.class);\n  HealthStatusHttpMapper mapper=(HealthStatusHttpMapper)ReflectionTestUtils.getField(extension,\"statusHttpMapper\");\n  Map<String,Integer> statusMappings=mapper.getStatusMapping();\n  assertThat(statusMappings).containsEntry(\"DOWN\",503);\n  assertThat(statusMappings).containsEntry(\"OUT_OF_SERVICE\",503);\n  assertThat(statusMappings).containsEntry(\"CUSTOM\",500);\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 73,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 7
      },
      "nodeContext" : "this.contextRunner.withPropertyValues(\"management.health.status.http-mapping.CUSTOM=500\").run((context) -> {\n  Object extension=context.getBean(HealthEndpointWebExtension.class);\n  HealthStatusHttpMapper mapper=(HealthStatusHttpMapper)ReflectionTestUtils.getField(extension,\"statusHttpMapper\");\n  Map<String,Integer> statusMappings=mapper.getStatusMapping();\n  assertThat(statusMappings).containsEntry(\"DOWN\",503);\n  assertThat(statusMappings).containsEntry(\"OUT_OF_SERVICE\",503);\n  assertThat(statusMappings).containsEntry(\"CUSTOM\",500);\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 74,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 601,
        "startLineNumber" : 60,
        "startColumnNumber" : 78,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  this.contextRunner.withPropertyValues(\"management.health.status.http-mapping.CUSTOM=500\").run((context) -> {\n    Object extension=context.getBean(HealthEndpointWebExtension.class);\n    HealthStatusHttpMapper mapper=(HealthStatusHttpMapper)ReflectionTestUtils.getField(extension,\"statusHttpMapper\");\n    Map<String,Integer> statusMappings=mapper.getStatusMapping();\n    assertThat(statusMappings).containsEntry(\"DOWN\",503);\n    assertThat(statusMappings).containsEntry(\"OUT_OF_SERVICE\",503);\n    assertThat(statusMappings).containsEntry(\"CUSTOM\",500);\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 685,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 72,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void runWithCustomHealthMappingShouldMapStatusCode() throws Exception {\n  this.contextRunner.withPropertyValues(\"management.health.status.http-mapping.CUSTOM=500\").run((context) -> {\n    Object extension=context.getBean(HealthEndpointWebExtension.class);\n    HealthStatusHttpMapper mapper=(HealthStatusHttpMapper)ReflectionTestUtils.getField(extension,\"statusHttpMapper\");\n    Map<String,Integer> statusMappings=mapper.getStatusMapping();\n    assertThat(statusMappings).containsEntry(\"DOWN\",503);\n    assertThat(statusMappings).containsEntry(\"OUT_OF_SERVICE\",503);\n    assertThat(statusMappings).containsEntry(\"CUSTOM\",500);\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 83,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 75
      },
      "nodeContext" : "this.contextRunner.withPropertyValues(\"management.health.status.http-mapping.CUSTOM=500\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 62,
    "startColumnNumber" : 24,
    "endLineNumber" : 62,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}