{
  "id" : 441,
  "expression" : "0x00",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestUnicodeGrammar.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0x00",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 130,
      "startColumnNumber" : 22,
      "endLineNumber" : 130,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 130,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 26
      },
      "nodeContext" : "(byte)0x00",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 129,
        "startColumnNumber" : 30,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x07,(byte)0xD0,(byte)0xD2,(byte)0xD2,(byte)0xD3,(byte)0xD3,(byte)0xD3,(byte)0xD0,(byte)0xD3,(byte)0xD3,(byte)0xD1,(byte)0xFF}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 46,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 129,
        "startColumnNumber" : 19,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "new byte[]{(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x07,(byte)0xD0,(byte)0xD2,(byte)0xD2,(byte)0xD3,(byte)0xD3,(byte)0xD3,(byte)0xD0,(byte)0xD3,(byte)0xD3,(byte)0xD1,(byte)0xFF}",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 50,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 129,
        "startColumnNumber" : 9,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "toParse=new byte[]{(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x07,(byte)0xD0,(byte)0xD2,(byte)0xD2,(byte)0xD3,(byte)0xD3,(byte)0xD3,(byte)0xD0,(byte)0xD3,(byte)0xD3,(byte)0xD1,(byte)0xFF}",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 52,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 129,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 4
      },
      "nodeContext" : "byte[] toParse=new byte[]{(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x07,(byte)0xD0,(byte)0xD2,(byte)0xD2,(byte)0xD3,(byte)0xD3,(byte)0xD3,(byte)0xD0,(byte)0xD3,(byte)0xD3,(byte)0xD1,(byte)0xFF};\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 56,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1491,
        "startLineNumber" : 122,
        "startColumnNumber" : 46,
        "endLineNumber" : 154,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String grammarText=\"grammar Binary;\\n\" + \"r : HEADER PACKET+ FOOTER;\\n\" + \"HEADER : '\\\\u0002\\\\u0000\\\\u0001\\\\u0007';\\n\"+ \"PACKET : '\\\\u00D0' ('\\\\u00D1' | '\\\\u00D2' | '\\\\u00D3') +;\\n\"+ \"FOOTER : '\\\\u00FF';\\n\";\n  byte[] toParse=new byte[]{(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x07,(byte)0xD0,(byte)0xD2,(byte)0xD2,(byte)0xD3,(byte)0xD3,(byte)0xD3,(byte)0xD0,(byte)0xD3,(byte)0xD3,(byte)0xD1,(byte)0xFF};\n  CharStream charStream;\n  try (ByteArrayInputStream is=new ByteArrayInputStream(toParse);InputStreamReader isr=new InputStreamReader(is,StandardCharsets.ISO_8859_1)){\n    charStream=new ANTLRInputStream(isr);\n  }\n   Grammar grammar=new Grammar(grammarText);\n  LexerInterpreter lexEngine=grammar.createLexerInterpreter(charStream);\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=grammar.createGrammarParserInterpreter(tokens);\n  ParseTree parseTree=parser.parse(grammar.rules.get(\"r\").index);\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(grammar.getRuleNames());\n  String result=Trees.toStringTree(parseTree,nodeTextProvider);\n  assertEquals(\"(r:1 \\u0002\\u0000\\u0001\\u0007 \\u00D0\\u00D2\\u00D2\\u00D3\\u00D3\\u00D3 \\u00D0\\u00D3\\u00D3\\u00D1 \\u00FF)\",result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1544,
        "startLineNumber" : 121,
        "startColumnNumber" : 1,
        "endLineNumber" : 154,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void binaryGrammar() throws Exception {\n  String grammarText=\"grammar Binary;\\n\" + \"r : HEADER PACKET+ FOOTER;\\n\" + \"HEADER : '\\\\u0002\\\\u0000\\\\u0001\\\\u0007';\\n\"+ \"PACKET : '\\\\u00D0' ('\\\\u00D1' | '\\\\u00D2' | '\\\\u00D3') +;\\n\"+ \"FOOTER : '\\\\u00FF';\\n\";\n  byte[] toParse=new byte[]{(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x07,(byte)0xD0,(byte)0xD2,(byte)0xD2,(byte)0xD3,(byte)0xD3,(byte)0xD3,(byte)0xD0,(byte)0xD3,(byte)0xD3,(byte)0xD1,(byte)0xFF};\n  CharStream charStream;\n  try (ByteArrayInputStream is=new ByteArrayInputStream(toParse);InputStreamReader isr=new InputStreamReader(is,StandardCharsets.ISO_8859_1)){\n    charStream=new ANTLRInputStream(isr);\n  }\n   Grammar grammar=new Grammar(grammarText);\n  LexerInterpreter lexEngine=grammar.createLexerInterpreter(charStream);\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=grammar.createGrammarParserInterpreter(tokens);\n  ParseTree parseTree=parser.parse(grammar.rules.get(\"r\").index);\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(grammar.getRuleNames());\n  String result=Trees.toStringTree(parseTree,nodeTextProvider);\n  assertEquals(\"(r:1 \\u0002\\u0000\\u0001\\u0007 \\u00D0\\u00D2\\u00D2\\u00D3\\u00D3\\u00D3 \\u00D0\\u00D3\\u00D3\\u00D1 \\u00FF)\",result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 130,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 26
      },
      "nodeContext" : "(byte)0x00",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 130,
    "startColumnNumber" : 22,
    "endLineNumber" : 130,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}