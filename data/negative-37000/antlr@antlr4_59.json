{
  "id" : 59,
  "expression" : "\"\\\\<?php\\n\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/php/BasePHPTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\\\<?php\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 303,
      "startColumnNumber" : 3,
      "endLineNumber" : 303,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 1237,
        "startLineNumber" : 303,
        "startColumnNumber" : 3,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 34,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 302,
        "startColumnNumber" : 20,
        "endLineNumber" : 334,
        "endColumnNumber" : 3
      },
      "nodeContext" : "new ST(\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\"))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1269,
        "startLineNumber" : 302,
        "startColumnNumber" : 5,
        "endLineNumber" : 334,
        "endColumnNumber" : 3
      },
      "nodeContext" : "outputFileST=new ST(\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\"))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 39,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1273,
        "startLineNumber" : 302,
        "startColumnNumber" : 2,
        "endLineNumber" : 334,
        "endColumnNumber" : 4
      },
      "nodeContext" : "ST outputFileST=new ST(\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1398,
        "startLineNumber" : 301,
        "startColumnNumber" : 70,
        "endLineNumber" : 339,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ST outputFileST=new ST(\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\"));\n  outputFileST.add(\"lexerName\",lexerName);\n  writeFile(getTempDirPath(),\"Test.php\",outputFileST.render());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1467,
        "startLineNumber" : 301,
        "startColumnNumber" : 1,
        "endLineNumber" : 339,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void writeLexerTestFile(String lexerName,boolean showDFA){\n  ST outputFileST=new ST(\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\"));\n  outputFileST.add(\"lexerName\",lexerName);\n  writeFile(getTempDirPath(),\"Test.php\",outputFileST.render());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 1237,
        "startLineNumber" : 303,
        "startColumnNumber" : 3,
        "endLineNumber" : 333,
        "endColumnNumber" : 9
      },
      "nodeContext" : "\"\\\\<?php\\n\" + \"\\n\" + \"declare(strict_types=1);\\n\"+ \"\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\CommonTokenStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Error\\\\Listeners\\\\ConsoleErrorListener;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\InputStream;\\n\"+ \"use Antlr\\\\Antlr4\\\\Runtime\\\\Lexer;\\n\"+ \"\\n\"+ \"$runtime = \\\\getenv('RUNTIME');\\n\"+ \"\\n\"+ \"\\\\spl_autoload_register(function (string $class) use ($runtime) : void {\\n\"+ \"    $file = \\\\str_replace('\\\\\\\\\\\\', \\\\DIRECTORY_SEPARATOR, \\\\str_replace('Antlr\\\\Antlr4\\\\Runtime\\\\\\\\\\\\', $runtime . '\\\\\\\\\\\\src\\\\\\\\\\\\', $class)) . '.php';\\n\"+ \"\\n\"+ \"    if (\\\\file_exists($file)) {\\n\"+ \"        require_once $file;   \\n\"+ \"    }\\n\"+ \"});\"+ \"\\n\"+ \"$input = InputStream::fromPath($argv[1]);\\n\"+ \"$lexer = new <lexerName>($input);\\n\"+ \"$lexer->addErrorListener(new ConsoleErrorListener());\"+ \"$tokens = new CommonTokenStream($lexer);\\n\"+ \"$tokens->fill();\\n\"+ \"\\n\"+ \"foreach ($tokens->getAllTokens() as $token) {\\n\"+ \"    echo $token . \\\\PHP_EOL;\\n\"+ \"}\"+ (showDFA ? \"echo $lexer->getInterpreter()->getDFA(Lexer::DEFAULT_MODE)->toLexerString();\\n\" : \"\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 34,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 303,
    "startColumnNumber" : 3,
    "endLineNumber" : 303,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}