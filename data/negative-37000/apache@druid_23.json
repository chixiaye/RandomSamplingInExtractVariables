{
  "id" : 23,
  "expression" : "i",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/query/timeboundary/TimeBoundaryQueryQueryToolChestTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 125,
      "startColumnNumber" : 20,
      "endLineNumber" : 125,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 125,
        "startColumnNumber" : 20,
        "endLineNumber" : 125,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i < segments.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < segments.size(); i++) {\n  Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1277,
        "startLineNumber" : 100,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<LogicalSegment> segments=new TimeBoundaryQueryQueryToolChest().filterSegments(TIME_BOUNDARY_QUERY,Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-02/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\"))));\n  Assert.assertEquals(6,segments.size());\n  List<LogicalSegment> expected=Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\")));\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1320,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFilterSegments(){\n  List<LogicalSegment> segments=new TimeBoundaryQueryQueryToolChest().filterSegments(TIME_BOUNDARY_QUERY,Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-02/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\"))));\n  Assert.assertEquals(6,segments.size());\n  List<LogicalSegment> expected=Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\")));\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 125,
        "startColumnNumber" : 20,
        "endLineNumber" : 125,
        "endColumnNumber" : 39
      },
      "nodeContext" : "i < segments.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 126,
      "startColumnNumber" : 39,
      "endLineNumber" : 126,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 126,
        "startColumnNumber" : 26,
        "endLineNumber" : 126,
        "endColumnNumber" : 41
      },
      "nodeContext" : "segments.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 126,
        "startColumnNumber" : 26,
        "endLineNumber" : 126,
        "endColumnNumber" : 55
      },
      "nodeContext" : "segments.get(i).getInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 125,
        "startColumnNumber" : 46,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < segments.size(); i++) {\n  Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1277,
        "startLineNumber" : 100,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<LogicalSegment> segments=new TimeBoundaryQueryQueryToolChest().filterSegments(TIME_BOUNDARY_QUERY,Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-02/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\"))));\n  Assert.assertEquals(6,segments.size());\n  List<LogicalSegment> expected=Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\")));\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1320,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFilterSegments(){\n  List<LogicalSegment> segments=new TimeBoundaryQueryQueryToolChest().filterSegments(TIME_BOUNDARY_QUERY,Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-02/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\"))));\n  Assert.assertEquals(6,segments.size());\n  List<LogicalSegment> expected=Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\")));\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 126,
      "startColumnNumber" : 70,
      "endLineNumber" : 126,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 126,
        "startColumnNumber" : 57,
        "endLineNumber" : 126,
        "endColumnNumber" : 72
      },
      "nodeContext" : "expected.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 126,
        "startColumnNumber" : 57,
        "endLineNumber" : 126,
        "endColumnNumber" : 86
      },
      "nodeContext" : "expected.get(i).getInterval()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 125,
        "startColumnNumber" : 46,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 125,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < segments.size(); i++) {\n  Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1277,
        "startLineNumber" : 100,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<LogicalSegment> segments=new TimeBoundaryQueryQueryToolChest().filterSegments(TIME_BOUNDARY_QUERY,Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-02/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\"))));\n  Assert.assertEquals(6,segments.size());\n  List<LogicalSegment> expected=Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\")));\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1320,
        "startLineNumber" : 98,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFilterSegments(){\n  List<LogicalSegment> segments=new TimeBoundaryQueryQueryToolChest().filterSegments(TIME_BOUNDARY_QUERY,Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-02/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\"))));\n  Assert.assertEquals(6,segments.size());\n  List<LogicalSegment> expected=Arrays.asList(createLogicalSegment(Intervals.of(\"2013-01-01/P1D\")),createLogicalSegment(Intervals.of(\"2013-01-01T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-01T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T01/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03T02/PT1H\")),createLogicalSegment(Intervals.of(\"2013-01-03/P1D\")));\n  for (int i=0; i < segments.size(); i++) {\n    Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assert.assertEquals(segments.get(i).getInterval(),expected.get(i).getInterval());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 125,
    "startColumnNumber" : 20,
    "endLineNumber" : 125,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 126,
    "startColumnNumber" : 39,
    "endLineNumber" : 126,
    "endColumnNumber" : 40
  }, {
    "charLength" : 1,
    "startLineNumber" : 126,
    "startColumnNumber" : 70,
    "endLineNumber" : 126,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}