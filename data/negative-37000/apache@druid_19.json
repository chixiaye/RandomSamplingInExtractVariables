{
  "id" : 19,
  "expression" : "sqlTypeName",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ReductionOperatorConversionHelper.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sqlTypeName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 63,
      "startColumnNumber" : 32,
      "endLineNumber" : 63,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 43
      },
      "nodeContext" : "returnSqlTypeName=sqlTypeName",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 44
      },
      "nodeContext" : "returnSqlTypeName=sqlTypeName;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 62,
        "startColumnNumber" : 45,
        "endLineNumber" : 65,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  returnSqlTypeName=sqlTypeName;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.STRING) {\n  returnSqlTypeName=sqlTypeName;\n  break;\n}\n else if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n  returnSqlTypeName=SqlTypeName.DOUBLE;\n  hasDouble=true;\n}\n else if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RelDataType type=opBinding.getOperandType(i);\n  SqlTypeName sqlTypeName=type.getSqlTypeName();\n  ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n  if (valueType == ValueType.STRING) {\n    returnSqlTypeName=sqlTypeName;\n    break;\n  }\n else   if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n    returnSqlTypeName=SqlTypeName.DOUBLE;\n    hasDouble=true;\n  }\n else   if (valueType == ValueType.LONG && !hasDouble) {\n    returnSqlTypeName=SqlTypeName.BIGINT;\n  }\n else   if (sqlTypeName != SqlTypeName.NULL) {\n    throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 837,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  RelDataType type=opBinding.getOperandType(i);\n  SqlTypeName sqlTypeName=type.getSqlTypeName();\n  ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n  if (valueType == ValueType.STRING) {\n    returnSqlTypeName=sqlTypeName;\n    break;\n  }\n else   if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n    returnSqlTypeName=SqlTypeName.DOUBLE;\n    hasDouble=true;\n  }\n else   if (valueType == ValueType.LONG && !hasDouble) {\n    returnSqlTypeName=SqlTypeName.BIGINT;\n  }\n else   if (sqlTypeName != SqlTypeName.NULL) {\n    throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 45,
        "startColumnNumber" : 19,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final RelDataTypeFactory typeFactory=opBinding.getTypeFactory();\n  final int n=opBinding.getOperandCount();\n  if (n == 0) {\n    return typeFactory.createSqlType(SqlTypeName.NULL);\n  }\n  SqlTypeName returnSqlTypeName=SqlTypeName.NULL;\n  boolean hasDouble=false;\n  for (int i=0; i < n; i++) {\n    RelDataType type=opBinding.getOperandType(i);\n    SqlTypeName sqlTypeName=type.getSqlTypeName();\n    ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n    if (valueType == ValueType.STRING) {\n      returnSqlTypeName=sqlTypeName;\n      break;\n    }\n else     if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n      returnSqlTypeName=SqlTypeName.DOUBLE;\n      hasDouble=true;\n    }\n else     if (valueType == ValueType.LONG && !hasDouble) {\n      returnSqlTypeName=SqlTypeName.BIGINT;\n    }\n else     if (sqlTypeName != SqlTypeName.NULL) {\n      throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n    }\n  }\n  return typeFactory.createSqlType(returnSqlTypeName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "opBinding -> {\n  final RelDataTypeFactory typeFactory=opBinding.getTypeFactory();\n  final int n=opBinding.getOperandCount();\n  if (n == 0) {\n    return typeFactory.createSqlType(SqlTypeName.NULL);\n  }\n  SqlTypeName returnSqlTypeName=SqlTypeName.NULL;\n  boolean hasDouble=false;\n  for (int i=0; i < n; i++) {\n    RelDataType type=opBinding.getOperandType(i);\n    SqlTypeName sqlTypeName=type.getSqlTypeName();\n    ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n    if (valueType == ValueType.STRING) {\n      returnSqlTypeName=sqlTypeName;\n      break;\n    }\n else     if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n      returnSqlTypeName=SqlTypeName.DOUBLE;\n      hasDouble=true;\n    }\n else     if (valueType == ValueType.LONG && !hasDouble) {\n      returnSqlTypeName=SqlTypeName.BIGINT;\n    }\n else     if (sqlTypeName != SqlTypeName.NULL) {\n      throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n    }\n  }\n  return typeFactory.createSqlType(returnSqlTypeName);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 154,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 44
      },
      "nodeContext" : "returnSqlTypeName=sqlTypeName;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "sqlTypeName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 70,
      "startColumnNumber" : 21,
      "endLineNumber" : 70,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 70,
        "startColumnNumber" : 21,
        "endLineNumber" : 70,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sqlTypeName != SqlTypeName.NULL",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 70,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 68,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 65,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n  returnSqlTypeName=SqlTypeName.DOUBLE;\n  hasDouble=true;\n}\n else if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.STRING) {\n  returnSqlTypeName=sqlTypeName;\n  break;\n}\n else if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n  returnSqlTypeName=SqlTypeName.DOUBLE;\n  hasDouble=true;\n}\n else if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RelDataType type=opBinding.getOperandType(i);\n  SqlTypeName sqlTypeName=type.getSqlTypeName();\n  ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n  if (valueType == ValueType.STRING) {\n    returnSqlTypeName=sqlTypeName;\n    break;\n  }\n else   if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n    returnSqlTypeName=SqlTypeName.DOUBLE;\n    hasDouble=true;\n  }\n else   if (valueType == ValueType.LONG && !hasDouble) {\n    returnSqlTypeName=SqlTypeName.BIGINT;\n  }\n else   if (sqlTypeName != SqlTypeName.NULL) {\n    throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 837,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  RelDataType type=opBinding.getOperandType(i);\n  SqlTypeName sqlTypeName=type.getSqlTypeName();\n  ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n  if (valueType == ValueType.STRING) {\n    returnSqlTypeName=sqlTypeName;\n    break;\n  }\n else   if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n    returnSqlTypeName=SqlTypeName.DOUBLE;\n    hasDouble=true;\n  }\n else   if (valueType == ValueType.LONG && !hasDouble) {\n    returnSqlTypeName=SqlTypeName.BIGINT;\n  }\n else   if (sqlTypeName != SqlTypeName.NULL) {\n    throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 45,
        "startColumnNumber" : 19,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final RelDataTypeFactory typeFactory=opBinding.getTypeFactory();\n  final int n=opBinding.getOperandCount();\n  if (n == 0) {\n    return typeFactory.createSqlType(SqlTypeName.NULL);\n  }\n  SqlTypeName returnSqlTypeName=SqlTypeName.NULL;\n  boolean hasDouble=false;\n  for (int i=0; i < n; i++) {\n    RelDataType type=opBinding.getOperandType(i);\n    SqlTypeName sqlTypeName=type.getSqlTypeName();\n    ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n    if (valueType == ValueType.STRING) {\n      returnSqlTypeName=sqlTypeName;\n      break;\n    }\n else     if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n      returnSqlTypeName=SqlTypeName.DOUBLE;\n      hasDouble=true;\n    }\n else     if (valueType == ValueType.LONG && !hasDouble) {\n      returnSqlTypeName=SqlTypeName.BIGINT;\n    }\n else     if (sqlTypeName != SqlTypeName.NULL) {\n      throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n    }\n  }\n  return typeFactory.createSqlType(returnSqlTypeName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "opBinding -> {\n  final RelDataTypeFactory typeFactory=opBinding.getTypeFactory();\n  final int n=opBinding.getOperandCount();\n  if (n == 0) {\n    return typeFactory.createSqlType(SqlTypeName.NULL);\n  }\n  SqlTypeName returnSqlTypeName=SqlTypeName.NULL;\n  boolean hasDouble=false;\n  for (int i=0; i < n; i++) {\n    RelDataType type=opBinding.getOperandType(i);\n    SqlTypeName sqlTypeName=type.getSqlTypeName();\n    ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n    if (valueType == ValueType.STRING) {\n      returnSqlTypeName=sqlTypeName;\n      break;\n    }\n else     if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n      returnSqlTypeName=SqlTypeName.DOUBLE;\n      hasDouble=true;\n    }\n else     if (valueType == ValueType.LONG && !hasDouble) {\n      returnSqlTypeName=SqlTypeName.BIGINT;\n    }\n else     if (sqlTypeName != SqlTypeName.NULL) {\n      throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n    }\n  }\n  return typeFactory.createSqlType(returnSqlTypeName);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 154,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 70,
        "startColumnNumber" : 21,
        "endLineNumber" : 70,
        "endColumnNumber" : 52
      },
      "nodeContext" : "sqlTypeName != SqlTypeName.NULL",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "sqlTypeName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 71,
      "startColumnNumber" : 65,
      "endLineNumber" : 71,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 71,
        "startColumnNumber" : 18,
        "endLineNumber" : 71,
        "endColumnNumber" : 77
      },
      "nodeContext" : "new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 78
      },
      "nodeContext" : "throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 70,
        "startColumnNumber" : 54,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 70,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 68,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 415,
        "startLineNumber" : 65,
        "startColumnNumber" : 17,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n  returnSqlTypeName=SqlTypeName.DOUBLE;\n  hasDouble=true;\n}\n else if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 62,
        "startColumnNumber" : 10,
        "endLineNumber" : 72,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (valueType == ValueType.STRING) {\n  returnSqlTypeName=sqlTypeName;\n  break;\n}\n else if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n  returnSqlTypeName=SqlTypeName.DOUBLE;\n  hasDouble=true;\n}\n else if (valueType == ValueType.LONG && !hasDouble) {\n  returnSqlTypeName=SqlTypeName.BIGINT;\n}\n else if (sqlTypeName != SqlTypeName.NULL) {\n  throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RelDataType type=opBinding.getOperandType(i);\n  SqlTypeName sqlTypeName=type.getSqlTypeName();\n  ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n  if (valueType == ValueType.STRING) {\n    returnSqlTypeName=sqlTypeName;\n    break;\n  }\n else   if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n    returnSqlTypeName=SqlTypeName.DOUBLE;\n    hasDouble=true;\n  }\n else   if (valueType == ValueType.LONG && !hasDouble) {\n    returnSqlTypeName=SqlTypeName.BIGINT;\n  }\n else   if (sqlTypeName != SqlTypeName.NULL) {\n    throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 837,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < n; i++) {\n  RelDataType type=opBinding.getOperandType(i);\n  SqlTypeName sqlTypeName=type.getSqlTypeName();\n  ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n  if (valueType == ValueType.STRING) {\n    returnSqlTypeName=sqlTypeName;\n    break;\n  }\n else   if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n    returnSqlTypeName=SqlTypeName.DOUBLE;\n    hasDouble=true;\n  }\n else   if (valueType == ValueType.LONG && !hasDouble) {\n    returnSqlTypeName=SqlTypeName.BIGINT;\n  }\n else   if (sqlTypeName != SqlTypeName.NULL) {\n    throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 45,
        "startColumnNumber" : 19,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final RelDataTypeFactory typeFactory=opBinding.getTypeFactory();\n  final int n=opBinding.getOperandCount();\n  if (n == 0) {\n    return typeFactory.createSqlType(SqlTypeName.NULL);\n  }\n  SqlTypeName returnSqlTypeName=SqlTypeName.NULL;\n  boolean hasDouble=false;\n  for (int i=0; i < n; i++) {\n    RelDataType type=opBinding.getOperandType(i);\n    SqlTypeName sqlTypeName=type.getSqlTypeName();\n    ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n    if (valueType == ValueType.STRING) {\n      returnSqlTypeName=sqlTypeName;\n      break;\n    }\n else     if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n      returnSqlTypeName=SqlTypeName.DOUBLE;\n      hasDouble=true;\n    }\n else     if (valueType == ValueType.LONG && !hasDouble) {\n      returnSqlTypeName=SqlTypeName.BIGINT;\n    }\n else     if (sqlTypeName != SqlTypeName.NULL) {\n      throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n    }\n  }\n  return typeFactory.createSqlType(returnSqlTypeName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 76,
        "endColumnNumber" : 7
      },
      "nodeContext" : "opBinding -> {\n  final RelDataTypeFactory typeFactory=opBinding.getTypeFactory();\n  final int n=opBinding.getOperandCount();\n  if (n == 0) {\n    return typeFactory.createSqlType(SqlTypeName.NULL);\n  }\n  SqlTypeName returnSqlTypeName=SqlTypeName.NULL;\n  boolean hasDouble=false;\n  for (int i=0; i < n; i++) {\n    RelDataType type=opBinding.getOperandType(i);\n    SqlTypeName sqlTypeName=type.getSqlTypeName();\n    ValueType valueType=Calcites.getValueTypeForRelDataType(type);\n    if (valueType == ValueType.STRING) {\n      returnSqlTypeName=sqlTypeName;\n      break;\n    }\n else     if (valueType == ValueType.DOUBLE || valueType == ValueType.FLOAT) {\n      returnSqlTypeName=SqlTypeName.DOUBLE;\n      hasDouble=true;\n    }\n else     if (valueType == ValueType.LONG && !hasDouble) {\n      returnSqlTypeName=SqlTypeName.BIGINT;\n    }\n else     if (sqlTypeName != SqlTypeName.NULL) {\n      throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n    }\n  }\n  return typeFactory.createSqlType(returnSqlTypeName);\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 154,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 71,
        "endColumnNumber" : 78
      },
      "nodeContext" : "throw new IAE(\"Argument %d has invalid type: %s\",i,sqlTypeName);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 63,
    "startColumnNumber" : 32,
    "endLineNumber" : 63,
    "endColumnNumber" : 43
  }, {
    "charLength" : 11,
    "startLineNumber" : 70,
    "startColumnNumber" : 21,
    "endLineNumber" : 70,
    "endColumnNumber" : 32
  }, {
    "charLength" : 11,
    "startLineNumber" : 71,
    "startColumnNumber" : 65,
    "endLineNumber" : 71,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}