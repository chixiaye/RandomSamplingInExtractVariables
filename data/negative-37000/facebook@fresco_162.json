{
  "id" : 162,
  "expression" : "decoder.getLoopCount()",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/animated-gif-lite/src/main/java/com/facebook/animated/giflite/GifDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "decoder.getLoopCount()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 72,
      "startColumnNumber" : 68,
      "endLineNumber" : 72,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 71,
        "startColumnNumber" : 14,
        "endLineNumber" : 72,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 70,
        "startColumnNumber" : 10,
        "endLineNumber" : 72,
        "endColumnNumber" : 92
      },
      "nodeContext" : "AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 69,
        "startColumnNumber" : 13,
        "endLineNumber" : 73,
        "endColumnNumber" : 16
      },
      "nodeContext" : "new CloseableAnimatedImage(AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())),false)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 69,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 17
      },
      "nodeContext" : "return new CloseableAnimatedImage(AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())),false);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1231,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  GifMetadataDecoder decoder=GifMetadataDecoder.create(is,out);\n  if (out.size() > 0) {\n    is.close();\n    is=new ByteArrayInputStream(out.toByteArray());\n  }\n  is.reset();\n  Movie movie=Movie.decodeStream(is);\n  MovieDrawer drawer=new MovieDrawer(movie);\n  MovieFrame[] frames=new MovieFrame[decoder.getFrameCount()];\n  int currTime=0;\n  for (int frameNumber=0, N=frames.length; frameNumber < N; frameNumber++) {\n    int frameDuration=decoder.getFrameDurationMs(frameNumber);\n    currTime+=frameDuration;\n    frames[frameNumber]=new MovieFrame(drawer,currTime,frameDuration,movie.width(),movie.height(),translateFrameDisposal(decoder.getFrameDisposal(frameNumber)));\n  }\n  return new CloseableAnimatedImage(AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1424,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  GifMetadataDecoder decoder=GifMetadataDecoder.create(is,out);\n  if (out.size() > 0) {\n    is.close();\n    is=new ByteArrayInputStream(out.toByteArray());\n  }\n  is.reset();\n  Movie movie=Movie.decodeStream(is);\n  MovieDrawer drawer=new MovieDrawer(movie);\n  MovieFrame[] frames=new MovieFrame[decoder.getFrameCount()];\n  int currTime=0;\n  for (int frameNumber=0, N=frames.length; frameNumber < N; frameNumber++) {\n    int frameDuration=decoder.getFrameDurationMs(frameNumber);\n    currTime+=frameDuration;\n    frames[frameNumber]=new MovieFrame(drawer,currTime,frameDuration,movie.width(),movie.height(),translateFrameDisposal(decoder.getFrameDisposal(frameNumber)));\n  }\n  return new CloseableAnimatedImage(AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())),false);\n}\n catch (IOException e) {\n  throw new RuntimeException(\"Error while decoding gif\",e);\n}\n finally {\n  try {\n    is.close();\n  }\n catch (  IOException ignored) {\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 180,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1486,
        "startLineNumber" : 36,
        "startColumnNumber" : 34,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InputStream is=encodedImage.getInputStream();\n  try {\n    ByteArrayOutputStream out=new ByteArrayOutputStream();\n    GifMetadataDecoder decoder=GifMetadataDecoder.create(is,out);\n    if (out.size() > 0) {\n      is.close();\n      is=new ByteArrayInputStream(out.toByteArray());\n    }\n    is.reset();\n    Movie movie=Movie.decodeStream(is);\n    MovieDrawer drawer=new MovieDrawer(movie);\n    MovieFrame[] frames=new MovieFrame[decoder.getFrameCount()];\n    int currTime=0;\n    for (int frameNumber=0, N=frames.length; frameNumber < N; frameNumber++) {\n      int frameDuration=decoder.getFrameDurationMs(frameNumber);\n      currTime+=frameDuration;\n      frames[frameNumber]=new MovieFrame(drawer,currTime,frameDuration,movie.width(),movie.height(),translateFrameDisposal(decoder.getFrameDisposal(frameNumber)));\n    }\n    return new CloseableAnimatedImage(AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())),false);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error while decoding gif\",e);\n  }\n finally {\n    try {\n      is.close();\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1650,
        "startLineNumber" : 31,
        "startColumnNumber" : 2,
        "endLineNumber" : 82,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public CloseableImage decode(final EncodedImage encodedImage,int length,QualityInfo qualityInfo,ImageDecodeOptions options){\n  InputStream is=encodedImage.getInputStream();\n  try {\n    ByteArrayOutputStream out=new ByteArrayOutputStream();\n    GifMetadataDecoder decoder=GifMetadataDecoder.create(is,out);\n    if (out.size() > 0) {\n      is.close();\n      is=new ByteArrayInputStream(out.toByteArray());\n    }\n    is.reset();\n    Movie movie=Movie.decodeStream(is);\n    MovieDrawer drawer=new MovieDrawer(movie);\n    MovieFrame[] frames=new MovieFrame[decoder.getFrameCount()];\n    int currTime=0;\n    for (int frameNumber=0, N=frames.length; frameNumber < N; frameNumber++) {\n      int frameDuration=decoder.getFrameDurationMs(frameNumber);\n      currTime+=frameDuration;\n      frames[frameNumber]=new MovieFrame(drawer,currTime,frameDuration,movie.width(),movie.height(),translateFrameDisposal(decoder.getFrameDisposal(frameNumber)));\n    }\n    return new CloseableAnimatedImage(AnimatedImageResult.forAnimatedImage(new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())),false);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error while decoding gif\",e);\n  }\n finally {\n    try {\n      is.close();\n    }\n catch (    IOException ignored) {\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 71,
        "startColumnNumber" : 14,
        "endLineNumber" : 72,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new MovieAnimatedImage(frames,encodedImage.getSize(),movie.duration(),decoder.getLoopCount())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 72,
    "startColumnNumber" : 68,
    "endLineNumber" : 72,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}