{
  "id" : 433,
  "expression" : "frame",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mp3/VbriSeeker.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 52,
      "startColumnNumber" : 4,
      "endLineNumber" : 52,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 23
      },
      "nodeContext" : "frame.skipBytes(10)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 24
      },
      "nodeContext" : "frame.skipBytes(10);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 24
      },
      "nodeContext" : "frame.skipBytes(10);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 53,
      "startColumnNumber" : 20,
      "endLineNumber" : 53,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 53,
        "startColumnNumber" : 20,
        "endLineNumber" : 53,
        "endColumnNumber" : 35
      },
      "nodeContext" : "frame.readInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 35
      },
      "nodeContext" : "numFrames=frame.readInt()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 36
      },
      "nodeContext" : "int numFrames=frame.readInt();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 36
      },
      "nodeContext" : "int numFrames=frame.readInt();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 61,
      "startColumnNumber" : 21,
      "endLineNumber" : 61,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 61,
        "startColumnNumber" : 21,
        "endLineNumber" : 61,
        "endColumnNumber" : 46
      },
      "nodeContext" : "frame.readUnsignedShort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 46
      },
      "nodeContext" : "entryCount=frame.readUnsignedShort()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int entryCount=frame.readUnsignedShort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int entryCount=frame.readUnsignedShort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 62,
      "startColumnNumber" : 16,
      "endLineNumber" : 62,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "frame.readUnsignedShort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "scale=frame.readUnsignedShort()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int scale=frame.readUnsignedShort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 62,
        "endColumnNumber" : 42
      },
      "nodeContext" : "int scale=frame.readUnsignedShort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 63,
      "startColumnNumber" : 20,
      "endLineNumber" : 63,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 63,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 45
      },
      "nodeContext" : "frame.readUnsignedShort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 45
      },
      "nodeContext" : "entrySize=frame.readUnsignedShort()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int entrySize=frame.readUnsignedShort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 46
      },
      "nodeContext" : "int entrySize=frame.readUnsignedShort();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 64,
      "startColumnNumber" : 4,
      "endLineNumber" : 64,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 22
      },
      "nodeContext" : "frame.skipBytes(2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 23
      },
      "nodeContext" : "frame.skipBytes(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 23
      },
      "nodeContext" : "frame.skipBytes(2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 78,
      "startColumnNumber" : 24,
      "endLineNumber" : 78,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 78,
        "startColumnNumber" : 24,
        "endLineNumber" : 78,
        "endColumnNumber" : 48
      },
      "nodeContext" : "frame.readUnsignedByte()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 78,
        "endColumnNumber" : 48
      },
      "nodeContext" : "segmentSize=frame.readUnsignedByte()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 78,
        "endColumnNumber" : 49
      },
      "nodeContext" : "segmentSize=frame.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (entrySize) {\ncase 1:  segmentSize=frame.readUnsignedByte();\nbreak;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 70,
        "startColumnNumber" : 53,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int index=0; index < entryCount; index++) {\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 78,
        "startColumnNumber" : 10,
        "endLineNumber" : 78,
        "endColumnNumber" : 49
      },
      "nodeContext" : "segmentSize=frame.readUnsignedByte();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 81,
      "startColumnNumber" : 24,
      "endLineNumber" : 81,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 81,
        "startColumnNumber" : 24,
        "endLineNumber" : 81,
        "endColumnNumber" : 49
      },
      "nodeContext" : "frame.readUnsignedShort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 49
      },
      "nodeContext" : "segmentSize=frame.readUnsignedShort()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 50
      },
      "nodeContext" : "segmentSize=frame.readUnsignedShort();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (entrySize) {\ncase 1:  segmentSize=frame.readUnsignedByte();\nbreak;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 70,
        "startColumnNumber" : 53,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int index=0; index < entryCount; index++) {\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 81,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 50
      },
      "nodeContext" : "segmentSize=frame.readUnsignedShort();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 84,
      "startColumnNumber" : 24,
      "endLineNumber" : 84,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 84,
        "startColumnNumber" : 24,
        "endLineNumber" : 84,
        "endColumnNumber" : 49
      },
      "nodeContext" : "frame.readUnsignedInt24()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 49
      },
      "nodeContext" : "segmentSize=frame.readUnsignedInt24()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 50
      },
      "nodeContext" : "segmentSize=frame.readUnsignedInt24();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (entrySize) {\ncase 1:  segmentSize=frame.readUnsignedByte();\nbreak;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 70,
        "startColumnNumber" : 53,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int index=0; index < entryCount; index++) {\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 84,
        "startColumnNumber" : 10,
        "endLineNumber" : 84,
        "endColumnNumber" : 50
      },
      "nodeContext" : "segmentSize=frame.readUnsignedInt24();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  }, {
    "nodeContext" : "frame",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 87,
      "startColumnNumber" : 24,
      "endLineNumber" : 87,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 87,
        "startColumnNumber" : 24,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "frame.readUnsignedIntToInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 87,
        "startColumnNumber" : 10,
        "endLineNumber" : 87,
        "endColumnNumber" : 52
      },
      "nodeContext" : "segmentSize=frame.readUnsignedIntToInt()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 87,
        "startColumnNumber" : 10,
        "endLineNumber" : 87,
        "endColumnNumber" : 53
      },
      "nodeContext" : "segmentSize=frame.readUnsignedIntToInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 76,
        "startColumnNumber" : 6,
        "endLineNumber" : 91,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (entrySize) {\ncase 1:  segmentSize=frame.readUnsignedByte();\nbreak;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 70,
        "startColumnNumber" : 53,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int index=0; index < entryCount; index++) {\n  timesUs[index]=(index * durationUs) / entryCount;\n  positions[index]=max(position,minPosition);\n  int segmentSize;\nswitch (entrySize) {\ncase 1:    segmentSize=frame.readUnsignedByte();\n  break;\ncase 2:segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1726,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 216,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2627,
        "startLineNumber" : 33,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns a  {@link VbriSeeker} for seeking in the stream, if required information is present.Returns  {@code null} if not. On returning, {@code frame}'s position is not specified so the caller should reset it.\n * @param inputLength The length of the stream in bytes, or {@link C#LENGTH_UNSET} if unknown.\n * @param position The position of the start of this frame in the stream.\n * @param mpegAudioHeader The MPEG audio header associated with the frame.\n * @param frame The data in this audio frame, with its position set to immediately after the'VBRI' tag.\n * @return A {@link VbriSeeker} for seeking in the stream, or {@code null} if the requiredinformation is not present.\n */\n@Nullable public static VbriSeeker create(long inputLength,long position,MpegAudioUtil.Header mpegAudioHeader,ParsableByteArray frame){\n  frame.skipBytes(10);\n  int numFrames=frame.readInt();\n  if (numFrames <= 0) {\n    return null;\n  }\n  int sampleRate=mpegAudioHeader.sampleRate;\n  long durationUs=Util.scaleLargeTimestamp(numFrames,C.MICROS_PER_SECOND * (sampleRate >= 32000 ? 1152 : 576),sampleRate);\n  int entryCount=frame.readUnsignedShort();\n  int scale=frame.readUnsignedShort();\n  int entrySize=frame.readUnsignedShort();\n  frame.skipBytes(2);\n  long minPosition=position + mpegAudioHeader.frameSize;\n  long[] timesUs=new long[entryCount];\n  long[] positions=new long[entryCount];\n  for (int index=0; index < entryCount; index++) {\n    timesUs[index]=(index * durationUs) / entryCount;\n    positions[index]=max(position,minPosition);\n    int segmentSize;\nswitch (entrySize) {\ncase 1:      segmentSize=frame.readUnsignedByte();\n    break;\ncase 2:  segmentSize=frame.readUnsignedShort();\nbreak;\ncase 3:segmentSize=frame.readUnsignedInt24();\nbreak;\ncase 4:segmentSize=frame.readUnsignedIntToInt();\nbreak;\ndefault:return null;\n}\nposition+=segmentSize * scale;\n}\nif (inputLength != C.LENGTH_UNSET && inputLength != position) {\nLog.w(TAG,\"VBRI data size mismatch: \" + inputLength + \", \"+ position);\n}\nreturn new VbriSeeker(timesUs,positions,durationUs,position);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 87,
        "startColumnNumber" : 10,
        "endLineNumber" : 87,
        "endColumnNumber" : 53
      },
      "nodeContext" : "segmentSize=frame.readUnsignedIntToInt();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.util.ParsableByteArray"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 52,
    "startColumnNumber" : 4,
    "endLineNumber" : 52,
    "endColumnNumber" : 9
  }, {
    "charLength" : 5,
    "startLineNumber" : 53,
    "startColumnNumber" : 20,
    "endLineNumber" : 53,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 61,
    "startColumnNumber" : 21,
    "endLineNumber" : 61,
    "endColumnNumber" : 26
  }, {
    "charLength" : 5,
    "startLineNumber" : 62,
    "startColumnNumber" : 16,
    "endLineNumber" : 62,
    "endColumnNumber" : 21
  }, {
    "charLength" : 5,
    "startLineNumber" : 63,
    "startColumnNumber" : 20,
    "endLineNumber" : 63,
    "endColumnNumber" : 25
  }, {
    "charLength" : 5,
    "startLineNumber" : 64,
    "startColumnNumber" : 4,
    "endLineNumber" : 64,
    "endColumnNumber" : 9
  }, {
    "charLength" : 5,
    "startLineNumber" : 78,
    "startColumnNumber" : 24,
    "endLineNumber" : 78,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 81,
    "startColumnNumber" : 24,
    "endLineNumber" : 81,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 84,
    "startColumnNumber" : 24,
    "endLineNumber" : 84,
    "endColumnNumber" : 29
  }, {
    "charLength" : 5,
    "startLineNumber" : 87,
    "startColumnNumber" : 24,
    "endLineNumber" : 87,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  } ]
}