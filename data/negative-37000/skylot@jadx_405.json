{
  "id" : 405,
  "expression" : "literal",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlineVisitor.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "literal",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 114,
      "startColumnNumber" : 29,
      "endLineNumber" : 114,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 114,
        "startColumnNumber" : 29,
        "endLineNumber" : 114,
        "endColumnNumber" : 41
      },
      "nodeContext" : "literal != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 114,
        "startColumnNumber" : 7,
        "endLineNumber" : 114,
        "endColumnNumber" : 41
      },
      "nodeContext" : "argType.isObject() && literal != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 114,
        "startColumnNumber" : 3,
        "endLineNumber" : 116,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (argType.isObject() && literal != 0) {\n  argType=ArgType.NARROW_NUMBERS;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1473,
        "startLineNumber" : 105,
        "startColumnNumber" : 30,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (RegisterArg arg : use) {\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 101,
        "startColumnNumber" : 87,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1766,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean replaceConst(MethodNode mth,InsnNode constInsn,long literal){\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 114,
        "startColumnNumber" : 7,
        "endLineNumber" : 114,
        "endColumnNumber" : 41
      },
      "nodeContext" : "argType.isObject() && literal != 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "literal",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 119,
      "startColumnNumber" : 25,
      "endLineNumber" : 119,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 119,
        "startColumnNumber" : 13,
        "endLineNumber" : 119,
        "endColumnNumber" : 42
      },
      "nodeContext" : "InsnArg.lit(literal,argType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 42
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,argType)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 43
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,argType);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 117,
        "startColumnNumber" : 49,
        "endLineNumber" : 120,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  litArg=InsnArg.lit(literal,argType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (use.size() == 1 || arg.isTypeImmutable()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else {\n  litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1473,
        "startLineNumber" : 105,
        "startColumnNumber" : 30,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (RegisterArg arg : use) {\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 101,
        "startColumnNumber" : 87,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1766,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean replaceConst(MethodNode mth,InsnNode constInsn,long literal){\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 43
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,argType);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "literal",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 123,
      "startColumnNumber" : 25,
      "endLineNumber" : 123,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 123,
        "startColumnNumber" : 13,
        "endLineNumber" : 123,
        "endColumnNumber" : 42
      },
      "nodeContext" : "InsnArg.lit(literal,argType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 42
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,argType)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 43
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,argType);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 121,
        "startColumnNumber" : 54,
        "endLineNumber" : 124,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  litArg=InsnArg.lit(literal,argType);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 120,
        "startColumnNumber" : 10,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else {\n  litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (use.size() == 1 || arg.isTypeImmutable()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else {\n  litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1473,
        "startLineNumber" : 105,
        "startColumnNumber" : 30,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (RegisterArg arg : use) {\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 101,
        "startColumnNumber" : 87,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1766,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean replaceConst(MethodNode mth,InsnNode constInsn,long literal){\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 43
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,argType);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "literal",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 127,
      "startColumnNumber" : 25,
      "endLineNumber" : 127,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 127,
        "startColumnNumber" : 13,
        "endLineNumber" : 127,
        "endColumnNumber" : 50
      },
      "nodeContext" : "InsnArg.lit(literal,ArgType.UNKNOWN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 50
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,ArgType.UNKNOWN)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 51
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 124,
        "startColumnNumber" : 10,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 120,
        "startColumnNumber" : 10,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else {\n  litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 128,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (use.size() == 1 || arg.isTypeImmutable()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n  litArg=InsnArg.lit(literal,argType);\n}\n else {\n  litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1473,
        "startLineNumber" : 105,
        "startColumnNumber" : 30,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (RegisterArg arg : use) {\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 101,
        "startColumnNumber" : 87,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1766,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean replaceConst(MethodNode mth,InsnNode constInsn,long literal){\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 127,
        "endColumnNumber" : 51
      },
      "nodeContext" : "litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "literal",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 141,
      "startColumnNumber" : 50,
      "endLineNumber" : 141,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 141,
        "startColumnNumber" : 44,
        "endLineNumber" : 141,
        "endColumnNumber" : 57
      },
      "nodeContext" : "(int)literal",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 141,
        "startColumnNumber" : 9,
        "endLineNumber" : 141,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mth.getParentClass().getConstField((int)literal,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 141,
        "startColumnNumber" : 5,
        "endLineNumber" : 141,
        "endColumnNumber" : 65
      },
      "nodeContext" : "f=mth.getParentClass().getConstField((int)literal,false)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 141,
        "startColumnNumber" : 5,
        "endLineNumber" : 141,
        "endColumnNumber" : 66
      },
      "nodeContext" : "f=mth.getParentClass().getConstField((int)literal,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 140,
        "startColumnNumber" : 55,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  f=mth.getParentClass().getConstField((int)literal,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 140,
        "startColumnNumber" : 11,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (litArgType.contains(PrimitiveType.INT)) {\n  f=mth.getParentClass().getConstField((int)literal,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 138,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (litArgType.isTypeKnown()) {\n  f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n}\n else if (litArgType.contains(PrimitiveType.INT)) {\n  f=mth.getParentClass().getConstField((int)literal,false);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 129,
        "startColumnNumber" : 40,
        "endLineNumber" : 146,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  fixTypes(mth,useInsn,litArg);\n  replaceCount++;\n  if (useInsn.getType() == InsnType.RETURN) {\n    useInsn.setSourceLine(constInsn.getSourceLine());\n  }\n  FieldNode f=null;\n  ArgType litArgType=litArg.getType();\n  if (litArgType.isTypeKnown()) {\n    f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n  }\n else   if (litArgType.contains(PrimitiveType.INT)) {\n    f=mth.getParentClass().getConstField((int)literal,false);\n  }\n  if (f != null) {\n    litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 129,
        "startColumnNumber" : 3,
        "endLineNumber" : 146,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (useInsn.replaceArg(arg,litArg)) {\n  fixTypes(mth,useInsn,litArg);\n  replaceCount++;\n  if (useInsn.getType() == InsnType.RETURN) {\n    useInsn.setSourceLine(constInsn.getSourceLine());\n  }\n  FieldNode f=null;\n  ArgType litArgType=litArg.getType();\n  if (litArgType.isTypeKnown()) {\n    f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n  }\n else   if (litArgType.contains(PrimitiveType.INT)) {\n    f=mth.getParentClass().getConstField((int)literal,false);\n  }\n  if (f != null) {\n    litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1473,
        "startLineNumber" : 105,
        "startColumnNumber" : 30,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1501,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (RegisterArg arg : use) {\n  InsnNode useInsn=arg.getParentInsn();\n  if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n    continue;\n  }\n  LiteralArg litArg;\n  ArgType argType=arg.getType();\n  if (argType.isObject() && literal != 0) {\n    argType=ArgType.NARROW_NUMBERS;\n  }\n  if (use.size() == 1 || arg.isTypeImmutable()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else   if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n    litArg=InsnArg.lit(literal,argType);\n  }\n else {\n    litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n  }\n  if (useInsn.replaceArg(arg,litArg)) {\n    fixTypes(mth,useInsn,litArg);\n    replaceCount++;\n    if (useInsn.getType() == InsnType.RETURN) {\n      useInsn.setSourceLine(constInsn.getSourceLine());\n    }\n    FieldNode f=null;\n    ArgType litArgType=litArg.getType();\n    if (litArgType.isTypeKnown()) {\n      f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n    }\n else     if (litArgType.contains(PrimitiveType.INT)) {\n      f=mth.getParentClass().getConstField((int)literal,false);\n    }\n    if (f != null) {\n      litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 101,
        "startColumnNumber" : 87,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1766,
        "startLineNumber" : 101,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static boolean replaceConst(MethodNode mth,InsnNode constInsn,long literal){\n  SSAVar sVar=constInsn.getResult().getSVar();\n  List<RegisterArg> use=new ArrayList<>(sVar.getUseList());\n  int replaceCount=0;\n  for (  RegisterArg arg : use) {\n    InsnNode useInsn=arg.getParentInsn();\n    if (useInsn == null || useInsn.getType() == InsnType.PHI || useInsn.getType() == InsnType.MERGE) {\n      continue;\n    }\n    LiteralArg litArg;\n    ArgType argType=arg.getType();\n    if (argType.isObject() && literal != 0) {\n      argType=ArgType.NARROW_NUMBERS;\n    }\n    if (use.size() == 1 || arg.isTypeImmutable()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else     if (useInsn.getType() == InsnType.MOVE && !useInsn.getResult().getType().isTypeKnown()) {\n      litArg=InsnArg.lit(literal,argType);\n    }\n else {\n      litArg=InsnArg.lit(literal,ArgType.UNKNOWN);\n    }\n    if (useInsn.replaceArg(arg,litArg)) {\n      fixTypes(mth,useInsn,litArg);\n      replaceCount++;\n      if (useInsn.getType() == InsnType.RETURN) {\n        useInsn.setSourceLine(constInsn.getSourceLine());\n      }\n      FieldNode f=null;\n      ArgType litArgType=litArg.getType();\n      if (litArgType.isTypeKnown()) {\n        f=mth.getParentClass().getConstFieldByLiteralArg(litArg);\n      }\n else       if (litArgType.contains(PrimitiveType.INT)) {\n        f=mth.getParentClass().getConstField((int)literal,false);\n      }\n      if (f != null) {\n        litArg.wrapInstruction(new IndexInsnNode(InsnType.SGET,f.getFieldInfo(),0));\n      }\n    }\n  }\n  return replaceCount == use.size();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 141,
        "startColumnNumber" : 5,
        "endLineNumber" : 141,
        "endColumnNumber" : 66
      },
      "nodeContext" : "f=mth.getParentClass().getConstField((int)literal,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 114,
    "startColumnNumber" : 29,
    "endLineNumber" : 114,
    "endColumnNumber" : 36
  }, {
    "charLength" : 7,
    "startLineNumber" : 119,
    "startColumnNumber" : 25,
    "endLineNumber" : 119,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 123,
    "startColumnNumber" : 25,
    "endLineNumber" : 123,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 127,
    "startColumnNumber" : 25,
    "endLineNumber" : 127,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 141,
    "startColumnNumber" : 50,
    "endLineNumber" : 141,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 9
  } ]
}