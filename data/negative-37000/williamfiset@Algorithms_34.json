{
  "id" : 34,
  "expression" : "val != values[i]",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/hashtable/Benchmark.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "val != values[i]",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 44,
      "startColumnNumber" : 10,
      "endLineNumber" : 44,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 61
      },
      "nodeContext" : "if (val != values[i]) System.out.println(\"Not good..\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 153,
        "startLineNumber" : 41,
        "startColumnNumber" : 32,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  hashtable.insert(keys[i],values[i]);\n  int val=hashtable.get(keys[i]);\n  if (val != values[i])   System.out.println(\"Not good..\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  hashtable.insert(keys[i],values[i]);\n  int val=hashtable.get(keys[i]);\n  if (val != values[i])   System.out.println(\"Not good..\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 36,
        "startColumnNumber" : 41,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashTableLinearProbing<Integer,Integer> hashtable=new HashTableLinearProbing<>();\n  long start=System.nanoTime();\n  for (int i=0; i < N; i++) {\n    hashtable.insert(keys[i],values[i]);\n    int val=hashtable.get(keys[i]);\n    if (val != values[i])     System.out.println(\"Not good..\");\n  }\n  long end=System.nanoTime();\n  System.out.println(\"Linear probing: \" + (end - start) / 1e9);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 48,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void testLinearProbing(){\n  HashTableLinearProbing<Integer,Integer> hashtable=new HashTableLinearProbing<>();\n  long start=System.nanoTime();\n  for (int i=0; i < N; i++) {\n    hashtable.insert(keys[i],values[i]);\n    int val=hashtable.get(keys[i]);\n    if (val != values[i])     System.out.println(\"Not good..\");\n  }\n  long end=System.nanoTime();\n  System.out.println(\"Linear probing: \" + (end - start) / 1e9);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 93,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 61
      },
      "nodeContext" : "if (val != values[i]) System.out.println(\"Not good..\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 44,
    "startColumnNumber" : 10,
    "endLineNumber" : 44,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}