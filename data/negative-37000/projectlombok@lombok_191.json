{
  "id" : 191,
  "expression" : "chainDotsString(fieldNode,boxed)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleGetter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "chainDotsString(fieldNode,boxed)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 331,
      "startColumnNumber" : 20,
      "endLineNumber" : 331,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 53
      },
      "nodeContext" : "field.vartype=chainDotsString(fieldNode,boxed)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 54
      },
      "nodeContext" : "field.vartype=chainDotsString(fieldNode,boxed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 330,
        "startColumnNumber" : 22,
        "endLineNumber" : 332,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  field.vartype=chainDotsString(fieldNode,boxed);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 330,
        "startColumnNumber" : 3,
        "endLineNumber" : 332,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (boxed != null) {\n  field.vartype=chainDotsString(fieldNode,boxed);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 328,
        "startColumnNumber" : 52,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n  if (boxed != null) {\n    field.vartype=chainDotsString(fieldNode,boxed);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 328,
        "startColumnNumber" : 2,
        "endLineNumber" : 333,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (field.vartype instanceof JCPrimitiveTypeTree) {\n  String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n  if (boxed != null) {\n    field.vartype=chainDotsString(fieldNode,boxed);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4361,
        "startLineNumber" : 307,
        "startColumnNumber" : 101,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4461,
        "startLineNumber" : 307,
        "startColumnNumber" : 1,
        "endLineNumber" : 394,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private List<JCStatement> createLazyGetterBody(TreeMaker maker,JavacNode fieldNode,JCTree source){\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  JCVariableDecl field=(JCVariableDecl)fieldNode.get();\n  JCExpression copyOfRawFieldType=copyType(maker,field);\n  field.type=null;\n  if (field.vartype instanceof JCPrimitiveTypeTree) {\n    String boxed=TYPE_MAP.get(((JCPrimitiveTypeTree)field.vartype).typetag);\n    if (boxed != null) {\n      field.vartype=chainDotsString(fieldNode,boxed);\n    }\n  }\n  Name valueName=fieldNode.toName(\"value\");\n  Name actualValueName=fieldNode.toName(\"actualValue\");\n{\n    JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n    statements.append(maker.VarDef(maker.Modifiers(0),valueName,valueVarType,callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n  }\n{\n    JCSynchronized synchronizedStatement;\n{\n      ListBuffer<JCStatement> synchronizedStatements=ListBuffer.lb();\n{\n        JCExpressionStatement newAssign=maker.Exec(maker.Assign(maker.Ident(valueName),callGet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD))));\n        synchronizedStatements.append(newAssign);\n      }\n{\n        ListBuffer<JCStatement> innerIfStatements=ListBuffer.lb();\n{\n          innerIfStatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),actualValueName,copyOfRawFieldType,field.init));\n        }\n{\n          JCTypeApply valueVarType=maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field)));\n          JCNewClass newInstance=maker.NewClass(null,NIL_EXPRESSION,valueVarType,List.<JCExpression>of(maker.Ident(actualValueName)),null);\n          JCStatement statement=maker.Exec(maker.Assign(maker.Ident(valueName),newInstance));\n          innerIfStatements.append(statement);\n        }\n{\n          JCStatement statement=callSet(fieldNode,createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Ident(valueName));\n          innerIfStatements.append(statement);\n        }\n        JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n        JCIf ifStatement=maker.If(isNull,maker.Block(0,innerIfStatements.toList()),null);\n        synchronizedStatements.append(ifStatement);\n      }\n      synchronizedStatement=maker.Synchronized(createFieldAccessor(maker,fieldNode,FieldAccess.ALWAYS_FIELD),maker.Block(0,synchronizedStatements.toList()));\n    }\n    JCBinary isNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(valueName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n    JCIf ifStatement=maker.If(isNull,maker.Block(0,List.<JCStatement>of(synchronizedStatement)),null);\n    statements.append(ifStatement);\n  }\n  statements.append(maker.Return(callGet(fieldNode,maker.Ident(valueName))));\n{\n    field.vartype=recursiveSetGeneratedBy(maker.TypeApply(chainDotsString(fieldNode,AR),List.<JCExpression>of(maker.TypeApply(chainDotsString(fieldNode,AR),List.of(copyType(maker,field))))),source);\n    field.init=recursiveSetGeneratedBy(maker.NewClass(null,NIL_EXPRESSION,copyType(maker,field),NIL_EXPRESSION,null),source);\n  }\n  return statements.toList();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 520,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 331,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 54
      },
      "nodeContext" : "field.vartype=chainDotsString(fieldNode,boxed);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "lombok.javac.handlers.JCExpression"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 331,
    "startColumnNumber" : 20,
    "endLineNumber" : 331,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}