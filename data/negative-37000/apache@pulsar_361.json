{
  "id" : 361,
  "expression" : "1000",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/kafka/src/test/java/org/apache/pulsar/io/kafka/source/KafkaAbstractSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1000",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 87,
      "startColumnNumber" : 36,
      "endLineNumber" : 87,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 41
      },
      "nodeContext" : "config.put(\"fetchMinBytes\",1000)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 42
      },
      "nodeContext" : "config.put(\"fetchMinBytes\",1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1762,
        "startLineNumber" : 67,
        "startColumnNumber" : 72,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KafkaAbstractSource source=new DummySource();\n  SourceContext ctx=mock(SourceContext.class);\n  Map<String,Object> config=new HashMap<>();\n  Assert.ThrowingRunnable openAndClose=() -> {\n    try {\n      source.open(config,ctx);\n      fail();\n    }\n  finally {\n      source.close();\n    }\n  }\n;\n  expectThrows(NullPointerException.class,openAndClose);\n  config.put(\"topic\",\"topic_1\");\n  expectThrows(NullPointerException.class,openAndClose);\n  config.put(\"bootstrapServers\",\"localhost:8080\");\n  expectThrows(NullPointerException.class,openAndClose);\n  config.put(\"groupId\",\"test-group\");\n  config.put(\"fetchMinBytes\",-1);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"fetchMinBytes\",1000);\n  config.put(\"autoCommitEnabled\",true);\n  config.put(\"autoCommitIntervalMs\",-1);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"autoCommitIntervalMs\",100);\n  config.put(\"sessionTimeoutMs\",-1);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"sessionTimeoutMs\",10000);\n  config.put(\"heartbeatIntervalMs\",-100);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"heartbeatIntervalMs\",20000);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"heartbeatIntervalMs\",5000);\n  config.put(\"autoOffsetReset\",\"some-value\");\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"autoOffsetReset\",\"earliest\");\n  source.open(config,ctx);\n  source.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 225,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testInvalidConfigWillThrownException() throws Exception {\n  KafkaAbstractSource source=new DummySource();\n  SourceContext ctx=mock(SourceContext.class);\n  Map<String,Object> config=new HashMap<>();\n  Assert.ThrowingRunnable openAndClose=() -> {\n    try {\n      source.open(config,ctx);\n      fail();\n    }\n  finally {\n      source.close();\n    }\n  }\n;\n  expectThrows(NullPointerException.class,openAndClose);\n  config.put(\"topic\",\"topic_1\");\n  expectThrows(NullPointerException.class,openAndClose);\n  config.put(\"bootstrapServers\",\"localhost:8080\");\n  expectThrows(NullPointerException.class,openAndClose);\n  config.put(\"groupId\",\"test-group\");\n  config.put(\"fetchMinBytes\",-1);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"fetchMinBytes\",1000);\n  config.put(\"autoCommitEnabled\",true);\n  config.put(\"autoCommitIntervalMs\",-1);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"autoCommitIntervalMs\",100);\n  config.put(\"sessionTimeoutMs\",-1);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"sessionTimeoutMs\",10000);\n  config.put(\"heartbeatIntervalMs\",-100);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"heartbeatIntervalMs\",20000);\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"heartbeatIntervalMs\",5000);\n  config.put(\"autoOffsetReset\",\"some-value\");\n  expectThrows(IllegalArgumentException.class,openAndClose);\n  config.put(\"autoOffsetReset\",\"earliest\");\n  source.open(config,ctx);\n  source.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 233,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 42
      },
      "nodeContext" : "config.put(\"fetchMinBytes\",1000);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 87,
    "startColumnNumber" : 36,
    "endLineNumber" : 87,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}