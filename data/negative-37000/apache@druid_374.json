{
  "id" : 374,
  "expression" : "joinable.getCardinality(\"market\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/server/SegmentManagerBroadcastJoinIndexedTableTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "joinable.getCardinality(\"market\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 170,
      "startColumnNumber" : 30,
      "endLineNumber" : 170,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Assert.assertEquals(1210,joinable.getCardinality(\"market\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(1210,joinable.getCardinality(\"market\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1755,
        "startLineNumber" : 155,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final DataSource dataSource=new GlobalTableDataSource(TABLE_NAME);\n  Assert.assertFalse(joinableFactory.isDirectlyJoinable(dataSource));\n  final String version=DateTimes.nowUtc().toString();\n  IncrementalIndex data=TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n  final String interval=\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\";\n  DataSegment segment=createSegment(data,interval,version);\n  Assert.assertTrue(segmentManager.loadSegment(segment,false,SegmentLazyLoadFailCallback.NOOP));\n  Assert.assertTrue(joinableFactory.isDirectlyJoinable(dataSource));\n  Optional<Joinable> maybeJoinable=makeJoinable(dataSource);\n  Assert.assertTrue(maybeJoinable.isPresent());\n  Joinable joinable=maybeJoinable.get();\n  Assert.assertEquals(1210,joinable.getCardinality(\"market\"));\n  Assert.assertEquals(1210,joinable.getCardinality(\"placement\"));\n  Assert.assertEquals(Optional.of(ImmutableSet.of(\"preferred\")),joinable.getCorrelatedColumnValues(\"market\",\"spot\",\"placement\",Long.MAX_VALUE,false));\n  Optional<byte[]> bytes=joinableFactory.computeJoinCacheKey(dataSource,JOIN_CONDITION_ANALYSIS);\n  Assert.assertTrue(bytes.isPresent());\n  assertSegmentIdEquals(segment.getId(),bytes.get());\n  segmentManager.dropSegment(segment);\n  maybeJoinable=makeJoinable(dataSource);\n  Assert.assertFalse(maybeJoinable.isPresent());\n  bytes=joinableFactory.computeJoinCacheKey(dataSource,JOIN_CONDITION_ANALYSIS);\n  Assert.assertFalse(bytes.isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1844,
        "startLineNumber" : 153,
        "startColumnNumber" : 2,
        "endLineNumber" : 195,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testLoadIndexedTable() throws IOException, SegmentLoadingException {\n  final DataSource dataSource=new GlobalTableDataSource(TABLE_NAME);\n  Assert.assertFalse(joinableFactory.isDirectlyJoinable(dataSource));\n  final String version=DateTimes.nowUtc().toString();\n  IncrementalIndex data=TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n  final String interval=\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\";\n  DataSegment segment=createSegment(data,interval,version);\n  Assert.assertTrue(segmentManager.loadSegment(segment,false,SegmentLazyLoadFailCallback.NOOP));\n  Assert.assertTrue(joinableFactory.isDirectlyJoinable(dataSource));\n  Optional<Joinable> maybeJoinable=makeJoinable(dataSource);\n  Assert.assertTrue(maybeJoinable.isPresent());\n  Joinable joinable=maybeJoinable.get();\n  Assert.assertEquals(1210,joinable.getCardinality(\"market\"));\n  Assert.assertEquals(1210,joinable.getCardinality(\"placement\"));\n  Assert.assertEquals(Optional.of(ImmutableSet.of(\"preferred\")),joinable.getCorrelatedColumnValues(\"market\",\"spot\",\"placement\",Long.MAX_VALUE,false));\n  Optional<byte[]> bytes=joinableFactory.computeJoinCacheKey(dataSource,JOIN_CONDITION_ANALYSIS);\n  Assert.assertTrue(bytes.isPresent());\n  assertSegmentIdEquals(segment.getId(),bytes.get());\n  segmentManager.dropSegment(segment);\n  maybeJoinable=makeJoinable(dataSource);\n  Assert.assertFalse(maybeJoinable.isPresent());\n  bytes=joinableFactory.computeJoinCacheKey(dataSource,JOIN_CONDITION_ANALYSIS);\n  Assert.assertFalse(bytes.isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(1210,joinable.getCardinality(\"market\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 170,
    "startColumnNumber" : 30,
    "endLineNumber" : 170,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}