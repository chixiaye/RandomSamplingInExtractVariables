{
  "id" : 333,
  "expression" : "ThrowableAssert.ThrowingCallable",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/test/java/org/mockitousage/strictness/StrictnessWithRulesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ThrowableAssert.ThrowingCallable",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 37,
      "startColumnNumber" : 28,
      "endLineNumber" : 37,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 37,
        "startColumnNumber" : 28,
        "endLineNumber" : 37,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ThrowableAssert.ThrowingCallable",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 37,
        "startColumnNumber" : 24,
        "endLineNumber" : 41,
        "endColumnNumber" : 25
      },
      "nodeContext" : "new ThrowableAssert.ThrowingCallable(){\n  public void call(){\n    ProductionCode.simpleMethod(mock,\"100\");\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 26
      },
      "nodeContext" : "assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){\n  public void call(){\n    ProductionCode.simpleMethod(mock,\"100\");\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){\n  public void call(){\n    ProductionCode.simpleMethod(mock,\"100\");\n  }\n}\n).isInstanceOf(PotentialStubbingProblem.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){\n  public void call(){\n    ProductionCode.simpleMethod(mock,\"100\");\n  }\n}\n).isInstanceOf(PotentialStubbingProblem.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 25,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 786,
        "startLineNumber" : 27,
        "startColumnNumber" : 45,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(mock.simpleMethod(\"1\")).thenReturn(\"1\");\n  lenient().when(mock.differentMethod(\"2\")).thenReturn(\"2\");\n  mock.differentMethod(\"200\");\n  assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){\n    public void call(){\n      ProductionCode.simpleMethod(mock,\"100\");\n    }\n  }\n).isInstanceOf(PotentialStubbingProblem.class);\n  mock.simpleMethod(\"1\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 46,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void potential_stubbing_problem(){\n  when(mock.simpleMethod(\"1\")).thenReturn(\"1\");\n  lenient().when(mock.differentMethod(\"2\")).thenReturn(\"2\");\n  mock.differentMethod(\"200\");\n  assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){\n    public void call(){\n      ProductionCode.simpleMethod(mock,\"100\");\n    }\n  }\n).isInstanceOf(PotentialStubbingProblem.class);\n  mock.simpleMethod(\"1\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 64,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 37,
        "startColumnNumber" : 28,
        "endLineNumber" : 37,
        "endColumnNumber" : 60
      },
      "nodeContext" : "ThrowableAssert.ThrowingCallable",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "ThrowableAssert"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 37,
    "startColumnNumber" : 28,
    "endLineNumber" : 37,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}