{
  "id" : 95,
  "expression" : "\"ASSIGN : '=';\\n\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestUnbufferedTokenStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"ASSIGN : '=';\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 41,
      "startColumnNumber" : 12,
      "endLineNumber" : 41,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 26
      },
      "nodeContext" : "\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 36,
        "startColumnNumber" : 25,
        "endLineNumber" : 44,
        "endColumnNumber" : 27
      },
      "nodeContext" : "new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 36,
        "startColumnNumber" : 21,
        "endLineNumber" : 44,
        "endColumnNumber" : 27
      },
      "nodeContext" : "g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 296,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 28
      },
      "nodeContext" : "LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 35,
        "startColumnNumber" : 52,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n  CharStream input=new ANTLRInputStream(new StringReader(\"x = 302;\"));\n  LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n  TokenStream tokens=new UnbufferedTokenStream<Token>(lexEngine);\n  assertEquals(\"x\",tokens.LT(1).getText());\n  assertEquals(\" \",tokens.LT(2).getText());\n  assertEquals(\"=\",tokens.LT(3).getText());\n  assertEquals(\" \",tokens.LT(4).getText());\n  assertEquals(\"302\",tokens.LT(5).getText());\n  assertEquals(\";\",tokens.LT(6).getText());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 948,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testLookahead() throws Exception {\n  LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n  CharStream input=new ANTLRInputStream(new StringReader(\"x = 302;\"));\n  LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n  TokenStream tokens=new UnbufferedTokenStream<Token>(lexEngine);\n  assertEquals(\"x\",tokens.LT(1).getText());\n  assertEquals(\" \",tokens.LT(2).getText());\n  assertEquals(\"=\",tokens.LT(3).getText());\n  assertEquals(\" \",tokens.LT(4).getText());\n  assertEquals(\"302\",tokens.LT(5).getText());\n  assertEquals(\";\",tokens.LT(6).getText());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 26
      },
      "nodeContext" : "\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 41,
    "startColumnNumber" : 12,
    "endLineNumber" : 41,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}