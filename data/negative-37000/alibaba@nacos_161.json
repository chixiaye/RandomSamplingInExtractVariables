{
  "id" : 161,
  "expression" : "n <= 0",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/client/src/main/java/com/alibaba/nacos/client/naming/utils/ThreadLocalRandom.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n <= 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 209,
      "startColumnNumber" : 12,
      "endLineNumber" : 209,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (n <= 0) {\n  throw new IllegalArgumentException(\"n must be positive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 208,
        "startColumnNumber" : 33,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (n <= 0) {\n    throw new IllegalArgumentException(\"n must be positive\");\n  }\n  long offset=0;\n  while (n >= Integer.MAX_VALUE) {\n    int bits=next(2);\n    long half=n >>> 1;\n    long nextn=((bits & 2) == 0) ? half : n - half;\n    if ((bits & 1) == 0) {\n      offset+=n - nextn;\n    }\n    n=nextn;\n  }\n  return offset + nextInt((int)n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 201,
        "startColumnNumber" : 4,
        "endLineNumber" : 229,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns a pseudorandom, uniformly distributed value between 0 (inclusive) and the specified value (exclusive).\n * @param n the bound on the random number to be returned. Must be positive.\n * @return the next value\n * @throws IllegalArgumentException if n is not positive\n */\npublic long nextLong(long n){\n  if (n <= 0) {\n    throw new IllegalArgumentException(\"n must be positive\");\n  }\n  long offset=0;\n  while (n >= Integer.MAX_VALUE) {\n    int bits=next(2);\n    long half=n >>> 1;\n    long nextn=((bits & 2) == 0) ? half : n - half;\n    if ((bits & 1) == 0) {\n      offset+=n - nextn;\n    }\n    n=nextn;\n  }\n  return offset + nextInt((int)n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (n <= 0) {\n  throw new IllegalArgumentException(\"n must be positive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 209,
    "startColumnNumber" : 12,
    "endLineNumber" : 209,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ ]
}