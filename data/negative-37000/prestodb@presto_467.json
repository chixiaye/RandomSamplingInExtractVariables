{
  "id" : 467,
  "expression" : "URI",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/test/java/com/facebook/presto/memory/LowMemoryKillerTestingUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "URI",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 48,
      "startColumnNumber" : 73,
      "endLineNumber" : 48,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 48,
        "startColumnNumber" : 73,
        "endLineNumber" : 48,
        "endColumnNumber" : 103
      },
      "nodeContext" : "URI.create(\"http://localhost\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 48,
        "startColumnNumber" : 36,
        "endLineNumber" : 48,
        "endColumnNumber" : 139
      },
      "nodeContext" : "new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 48,
        "startColumnNumber" : 29,
        "endLineNumber" : 48,
        "endColumnNumber" : 139
      },
      "nodeContext" : "node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 140
      },
      "nodeContext" : "InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 47,
        "startColumnNumber" : 83,
        "endLineNumber" : 59,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n  long bytes=nodeEntry.getValue();\n  if (bytes == 0) {\n    continue;\n  }\n  if (reservedQuery.equals(entry.getKey())) {\n    nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getReserved().add(queryId,bytes);\n  }\n else {\n    nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getGeneral().add(queryId,bytes);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 734,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,Long> nodeEntry : reservationByNode.entrySet()) {\n  InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n  long bytes=nodeEntry.getValue();\n  if (bytes == 0) {\n    continue;\n  }\n  if (reservedQuery.equals(entry.getKey())) {\n    nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getReserved().add(queryId,bytes);\n  }\n else {\n    nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getGeneral().add(queryId,bytes);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 92,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 43,
        "startColumnNumber" : 78,
        "endLineNumber" : 60,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  QueryId queryId=new QueryId(entry.getKey());\n  Map<String,Long> reservationByNode=entry.getValue();\n  for (  Map.Entry<String,Long> nodeEntry : reservationByNode.entrySet()) {\n    InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n    long bytes=nodeEntry.getValue();\n    if (bytes == 0) {\n      continue;\n    }\n    if (reservedQuery.equals(entry.getKey())) {\n      nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getReserved().add(queryId,bytes);\n    }\n else {\n      nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getGeneral().add(queryId,bytes);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,Map<String,Long>> entry : queries.entrySet()) {\n  QueryId queryId=new QueryId(entry.getKey());\n  Map<String,Long> reservationByNode=entry.getValue();\n  for (  Map.Entry<String,Long> nodeEntry : reservationByNode.entrySet()) {\n    InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n    long bytes=nodeEntry.getValue();\n    if (bytes == 0) {\n      continue;\n    }\n    if (reservedQuery.equals(entry.getKey())) {\n      nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getReserved().add(queryId,bytes);\n    }\n else {\n      nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getGeneral().add(queryId,bytes);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 137,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2672,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<InternalNode,NodeReservation> nodeReservations=new HashMap<>();\n  for (  Map.Entry<String,Map<String,Long>> entry : queries.entrySet()) {\n    QueryId queryId=new QueryId(entry.getKey());\n    Map<String,Long> reservationByNode=entry.getValue();\n    for (    Map.Entry<String,Long> nodeEntry : reservationByNode.entrySet()) {\n      InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n      long bytes=nodeEntry.getValue();\n      if (bytes == 0) {\n        continue;\n      }\n      if (reservedQuery.equals(entry.getKey())) {\n        nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getReserved().add(queryId,bytes);\n      }\n else {\n        nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getGeneral().add(queryId,bytes);\n      }\n    }\n  }\n  ImmutableList.Builder<MemoryInfo> result=ImmutableList.builder();\n  for (  Map.Entry<InternalNode,NodeReservation> entry : nodeReservations.entrySet()) {\n    NodeReservation nodeReservation=entry.getValue();\n    ImmutableMap.Builder<MemoryPoolId,MemoryPoolInfo> pools=ImmutableMap.builder();\n    if (nodeReservation.getGeneral().getTotalReservedBytes() > 0) {\n      pools.put(GENERAL_POOL,new MemoryPoolInfo(maxGeneralPoolBytes,nodeReservation.getGeneral().getTotalReservedBytes(),0,nodeReservation.getGeneral().getReservationByQuery(),ImmutableMap.of(),ImmutableMap.of()));\n    }\n    if (nodeReservation.getReserved().getTotalReservedBytes() > 0) {\n      pools.put(RESERVED_POOL,new MemoryPoolInfo(maxReservedPoolBytes,nodeReservation.getReserved().getTotalReservedBytes(),0,nodeReservation.getReserved().getReservationByQuery(),ImmutableMap.of(),ImmutableMap.of()));\n    }\n    result.add(new MemoryInfo(new DataSize(maxReservedPoolBytes + maxGeneralPoolBytes,BYTE),pools.build()));\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2836,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static List<MemoryInfo> toNodeMemoryInfoList(long maxReservedPoolBytes,long maxGeneralPoolBytes,String reservedQuery,Map<String,Map<String,Long>> queries){\n  Map<InternalNode,NodeReservation> nodeReservations=new HashMap<>();\n  for (  Map.Entry<String,Map<String,Long>> entry : queries.entrySet()) {\n    QueryId queryId=new QueryId(entry.getKey());\n    Map<String,Long> reservationByNode=entry.getValue();\n    for (    Map.Entry<String,Long> nodeEntry : reservationByNode.entrySet()) {\n      InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n      long bytes=nodeEntry.getValue();\n      if (bytes == 0) {\n        continue;\n      }\n      if (reservedQuery.equals(entry.getKey())) {\n        nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getReserved().add(queryId,bytes);\n      }\n else {\n        nodeReservations.computeIfAbsent(node,ignored -> new NodeReservation()).getGeneral().add(queryId,bytes);\n      }\n    }\n  }\n  ImmutableList.Builder<MemoryInfo> result=ImmutableList.builder();\n  for (  Map.Entry<InternalNode,NodeReservation> entry : nodeReservations.entrySet()) {\n    NodeReservation nodeReservation=entry.getValue();\n    ImmutableMap.Builder<MemoryPoolId,MemoryPoolInfo> pools=ImmutableMap.builder();\n    if (nodeReservation.getGeneral().getTotalReservedBytes() > 0) {\n      pools.put(GENERAL_POOL,new MemoryPoolInfo(maxGeneralPoolBytes,nodeReservation.getGeneral().getTotalReservedBytes(),0,nodeReservation.getGeneral().getReservationByQuery(),ImmutableMap.of(),ImmutableMap.of()));\n    }\n    if (nodeReservation.getReserved().getTotalReservedBytes() > 0) {\n      pools.put(RESERVED_POOL,new MemoryPoolInfo(maxReservedPoolBytes,nodeReservation.getReserved().getTotalReservedBytes(),0,nodeReservation.getReserved().getReservationByQuery(),ImmutableMap.of(),ImmutableMap.of()));\n    }\n    result.add(new MemoryInfo(new DataSize(maxReservedPoolBytes + maxGeneralPoolBytes,BYTE),pools.build()));\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 327,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 140
      },
      "nodeContext" : "InternalNode node=new InternalNode(nodeEntry.getKey(),URI.create(\"http://localhost\"),new NodeVersion(\"version\"),false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.net.URI"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 48,
    "startColumnNumber" : 73,
    "endLineNumber" : 48,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}