{
  "id" : 393,
  "expression" : "\"\\\": \"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/third_party/jarjar/java/com/tonicsystems/jarjar/Wildcard.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\\": \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 105,
      "startColumnNumber" : 63,
      "endLineNumber" : 105,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 105,
        "startColumnNumber" : 10,
        "endLineNumber" : 105,
        "endColumnNumber" : 78
      },
      "nodeContext" : "\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new IllegalArgumentException(\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 105,
        "endColumnNumber" : 80
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 103,
        "startColumnNumber" : 21,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (count < max) {\n  throw new IllegalArgumentException(\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2269,
        "startLineNumber" : 35,
        "startColumnNumber" : 49,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (pattern.equals(\"**\")) {\n    throw new IllegalArgumentException(\"'**' is not a valid pattern\");\n  }\n  if (!checkIdentifierChars(pattern,\"/*-\")) {\n    throw new IllegalArgumentException(\"Not a valid package pattern: \" + pattern);\n  }\n  if (pattern.indexOf(\"***\") >= 0) {\n    throw new IllegalArgumentException(\"The sequence '***' is invalid in a package pattern\");\n  }\n  String regex=pattern;\n  regex=replaceAllLiteral(dstar,regex,\"(.+?)\");\n  regex=replaceAllLiteral(star,regex,\"([^/]+)\");\n  regex=replaceAllLiteral(estar,regex,\"*)\");\n  this.pattern=Pattern.compile(\"\\\\A\" + regex + \"\\\\Z\");\n  this.count=this.pattern.matcher(\"foo\").groupCount();\n  char[] chars=result.toCharArray();\n  int max=0;\n  for (int i=0, mark=0, state=0, len=chars.length; i < len + 1; i++) {\n    char ch=(i == len) ? '@' : chars[i];\n    if (state == 0) {\n      if (ch == '@') {\n        parts.add(new String(chars,mark,i - mark));\n        mark=i + 1;\n        state=1;\n      }\n    }\n else {\nswitch (ch) {\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':        break;\ndefault:      if (i == mark) {\n        throw new IllegalArgumentException(\"Backslash not followed by a digit\");\n      }\n    int n=Integer.parseInt(new String(chars,mark,i - mark));\n  if (n > max) {\n    max=n;\n  }\nparts.add(new Integer(n));\nmark=i--;\nstate=0;\n}\n}\n}\nint size=parts.size();\nstrings=new String[size];\nrefs=new int[size];\nArrays.fill(refs,-1);\nfor (int i=0; i < size; i++) {\nObject v=parts.get(i);\nif (v instanceof String) {\nstrings[i]=((String)v).replace('.','/');\n}\n else {\nrefs[i]=((Integer)v).intValue();\n}\n}\nif (count < max) {\nthrow new IllegalArgumentException(\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2316,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public Wildcard(String pattern,String result){\n  if (pattern.equals(\"**\")) {\n    throw new IllegalArgumentException(\"'**' is not a valid pattern\");\n  }\n  if (!checkIdentifierChars(pattern,\"/*-\")) {\n    throw new IllegalArgumentException(\"Not a valid package pattern: \" + pattern);\n  }\n  if (pattern.indexOf(\"***\") >= 0) {\n    throw new IllegalArgumentException(\"The sequence '***' is invalid in a package pattern\");\n  }\n  String regex=pattern;\n  regex=replaceAllLiteral(dstar,regex,\"(.+?)\");\n  regex=replaceAllLiteral(star,regex,\"([^/]+)\");\n  regex=replaceAllLiteral(estar,regex,\"*)\");\n  this.pattern=Pattern.compile(\"\\\\A\" + regex + \"\\\\Z\");\n  this.count=this.pattern.matcher(\"foo\").groupCount();\n  char[] chars=result.toCharArray();\n  int max=0;\n  for (int i=0, mark=0, state=0, len=chars.length; i < len + 1; i++) {\n    char ch=(i == len) ? '@' : chars[i];\n    if (state == 0) {\n      if (ch == '@') {\n        parts.add(new String(chars,mark,i - mark));\n        mark=i + 1;\n        state=1;\n      }\n    }\n else {\nswitch (ch) {\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':        break;\ndefault:      if (i == mark) {\n        throw new IllegalArgumentException(\"Backslash not followed by a digit\");\n      }\n    int n=Integer.parseInt(new String(chars,mark,i - mark));\n  if (n > max) {\n    max=n;\n  }\nparts.add(new Integer(n));\nmark=i--;\nstate=0;\n}\n}\n}\nint size=parts.size();\nstrings=new String[size];\nrefs=new int[size];\nArrays.fill(refs,-1);\nfor (int i=0; i < size; i++) {\nObject v=parts.get(i);\nif (v instanceof String) {\nstrings[i]=((String)v).replace('.','/');\n}\n else {\nrefs[i]=((Integer)v).intValue();\n}\n}\nif (count < max) {\nthrow new IllegalArgumentException(\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 105,
        "startColumnNumber" : 10,
        "endLineNumber" : 105,
        "endColumnNumber" : 78
      },
      "nodeContext" : "\"Result includes impossible placeholder \\\"@\" + max + \"\\\": \"+ result",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 105,
    "startColumnNumber" : 63,
    "endLineNumber" : 105,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}