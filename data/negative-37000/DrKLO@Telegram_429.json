{
  "id" : 429,
  "expression" : "(int)chunkHeader.size - 16",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/extractor/wav/WavHeaderReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(int)chunkHeader.size - 16",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 83,
      "startColumnNumber" : 20,
      "endLineNumber" : 83,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 47
      },
      "nodeContext" : "bytesLeft=(int)chunkHeader.size - 16",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int bytesLeft=(int)chunkHeader.size - 16;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1815,
        "startLineNumber" : 46,
        "startColumnNumber" : 94,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.data,0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.data,0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2371,
        "startLineNumber" : 35,
        "startColumnNumber" : 2,
        "endLineNumber" : 100,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Peeks and returns a  {@code WavHeader}.\n * @param input Input stream to peek the WAV header from.\n * @throws ParserException If the input file is an incorrect RIFF WAV.\n * @throws IOException If peeking from the input fails.\n * @throws InterruptedException If interrupted while peeking from input.\n * @return A new {@code WavHeader} peeked from {@code input}, or null if the input is not a supported WAV format.\n */\n@Nullable public static WavHeader peek(ExtractorInput input) throws IOException, InterruptedException {\n  Assertions.checkNotNull(input);\n  ParsableByteArray scratch=new ParsableByteArray(16);\n  ChunkHeader chunkHeader=ChunkHeader.peek(input,scratch);\n  if (chunkHeader.id != WavUtil.RIFF_FOURCC) {\n    return null;\n  }\n  input.peekFully(scratch.data,0,4);\n  scratch.setPosition(0);\n  int riffFormat=scratch.readInt();\n  if (riffFormat != WavUtil.WAVE_FOURCC) {\n    Log.e(TAG,\"Unsupported RIFF format: \" + riffFormat);\n    return null;\n  }\n  chunkHeader=ChunkHeader.peek(input,scratch);\n  while (chunkHeader.id != WavUtil.FMT_FOURCC) {\n    input.advancePeekPosition((int)chunkHeader.size);\n    chunkHeader=ChunkHeader.peek(input,scratch);\n  }\n  Assertions.checkState(chunkHeader.size >= 16);\n  input.peekFully(scratch.data,0,16);\n  scratch.setPosition(0);\n  int audioFormatType=scratch.readLittleEndianUnsignedShort();\n  int numChannels=scratch.readLittleEndianUnsignedShort();\n  int frameRateHz=scratch.readLittleEndianUnsignedIntToInt();\n  int averageBytesPerSecond=scratch.readLittleEndianUnsignedIntToInt();\n  int blockSize=scratch.readLittleEndianUnsignedShort();\n  int bitsPerSample=scratch.readLittleEndianUnsignedShort();\n  int bytesLeft=(int)chunkHeader.size - 16;\n  byte[] extraData;\n  if (bytesLeft > 0) {\n    extraData=new byte[bytesLeft];\n    input.peekFully(extraData,0,bytesLeft);\n  }\n else {\n    extraData=Util.EMPTY_BYTE_ARRAY;\n  }\n  return new WavHeader(audioFormatType,numChannels,frameRateHz,averageBytesPerSecond,blockSize,bitsPerSample,extraData);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int bytesLeft=(int)chunkHeader.size - 16;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 83,
    "startColumnNumber" : 20,
    "endLineNumber" : 83,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}