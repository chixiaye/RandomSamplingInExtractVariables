{
  "id" : 5,
  "expression" : "insertSpan",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanConsumer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "insertSpan",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 84,
      "startColumnNumber" : 12,
      "endLineNumber" : 84,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 45
      },
      "nodeContext" : "insertSpan.onDuplicateKeyIgnore()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 83,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 64
      },
      "nodeContext" : "inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 65
      },
      "nodeContext" : "inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3178,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 117,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Long authoritativeTimestamp=span.timestamp;\n  span=ApplyTimestampAndDuration.apply(span);\n  Long binaryAnnotationTimestamp=span.timestamp;\n  if (binaryAnnotationTimestamp == null) {\n    binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n  }\n  Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n  if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n    updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n  }\n  if (authoritativeTimestamp != null) {\n    updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n  }\n  if (span.duration != null) {\n    updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n  }\n  InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n  inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n  for (  Annotation annotation : span.annotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n  for (  BinaryAnnotation annotation : span.binaryAnnotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3202,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Span span : spans) {\n  Long authoritativeTimestamp=span.timestamp;\n  span=ApplyTimestampAndDuration.apply(span);\n  Long binaryAnnotationTimestamp=span.timestamp;\n  if (binaryAnnotationTimestamp == null) {\n    binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n  }\n  Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n  if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n    updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n  }\n  if (authoritativeTimestamp != null) {\n    updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n  }\n  if (span.duration != null) {\n    updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n  }\n  InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n  inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n  for (  Annotation annotation : span.annotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n  for (  BinaryAnnotation annotation : span.binaryAnnotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3349,
        "startLineNumber" : 50,
        "startColumnNumber" : 55,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DSLContext create=context.get(conn);\n  List<Query> inserts=new ArrayList<>();\n  for (  Span span : spans) {\n    Long authoritativeTimestamp=span.timestamp;\n    span=ApplyTimestampAndDuration.apply(span);\n    Long binaryAnnotationTimestamp=span.timestamp;\n    if (binaryAnnotationTimestamp == null) {\n      binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n    }\n    Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n    if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n      updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n    }\n    if (authoritativeTimestamp != null) {\n      updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n    }\n    if (span.duration != null) {\n      updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n    }\n    InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n    inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n    for (    Annotation annotation : span.annotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n    for (    BinaryAnnotation annotation : span.binaryAnnotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n  }\n  create.batch(inserts).execute();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 461,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3476,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Connection conn=datasource.getConnection()){\n  DSLContext create=context.get(conn);\n  List<Query> inserts=new ArrayList<>();\n  for (  Span span : spans) {\n    Long authoritativeTimestamp=span.timestamp;\n    span=ApplyTimestampAndDuration.apply(span);\n    Long binaryAnnotationTimestamp=span.timestamp;\n    if (binaryAnnotationTimestamp == null) {\n      binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n    }\n    Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n    if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n      updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n    }\n    if (authoritativeTimestamp != null) {\n      updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n    }\n    if (span.duration != null) {\n      updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n    }\n    InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n    inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n    for (    Annotation annotation : span.annotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n    for (    BinaryAnnotation annotation : span.binaryAnnotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n  }\n  create.batch(inserts).execute();\n}\n catch (SQLException e) {\n  throw new RuntimeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 481,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3519,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (spans.isEmpty())   return;\n  try (Connection conn=datasource.getConnection()){\n    DSLContext create=context.get(conn);\n    List<Query> inserts=new ArrayList<>();\n    for (    Span span : spans) {\n      Long authoritativeTimestamp=span.timestamp;\n      span=ApplyTimestampAndDuration.apply(span);\n      Long binaryAnnotationTimestamp=span.timestamp;\n      if (binaryAnnotationTimestamp == null) {\n        binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n      }\n      Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n      if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n        updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n      }\n      if (authoritativeTimestamp != null) {\n        updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n      }\n      if (span.duration != null) {\n        updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n      }\n      InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n      inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n      for (      Annotation annotation : span.annotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n      for (      BinaryAnnotation annotation : span.binaryAnnotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n    }\n    create.batch(inserts).execute();\n  }\n catch (  SQLException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 487,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3628,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Blocking version of  {@link AsyncSpanConsumer#accept} \n */\n@Override public void accept(List<Span> spans){\n  if (spans.isEmpty())   return;\n  try (Connection conn=datasource.getConnection()){\n    DSLContext create=context.get(conn);\n    List<Query> inserts=new ArrayList<>();\n    for (    Span span : spans) {\n      Long authoritativeTimestamp=span.timestamp;\n      span=ApplyTimestampAndDuration.apply(span);\n      Long binaryAnnotationTimestamp=span.timestamp;\n      if (binaryAnnotationTimestamp == null) {\n        binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n      }\n      Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n      if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n        updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n      }\n      if (authoritativeTimestamp != null) {\n        updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n      }\n      if (span.duration != null) {\n        updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n      }\n      InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n      inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n      for (      Annotation annotation : span.annotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n      for (      BinaryAnnotation annotation : span.binaryAnnotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n    }\n    create.batch(inserts).execute();\n  }\n catch (  SQLException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 501,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 84,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 45
      },
      "nodeContext" : "insertSpan.onDuplicateKeyIgnore()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "zipkin.jdbc.InsertSetMoreStep<java.lang.Record>"
  }, {
    "nodeContext" : "insertSpan",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 85,
      "startColumnNumber" : 12,
      "endLineNumber" : 85,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 45
      },
      "nodeContext" : "insertSpan.onDuplicateKeyUpdate()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "insertSpan.onDuplicateKeyUpdate().set(updateFields)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 83,
        "startColumnNumber" : 20,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 64
      },
      "nodeContext" : "inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 65
      },
      "nodeContext" : "inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3178,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 117,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Long authoritativeTimestamp=span.timestamp;\n  span=ApplyTimestampAndDuration.apply(span);\n  Long binaryAnnotationTimestamp=span.timestamp;\n  if (binaryAnnotationTimestamp == null) {\n    binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n  }\n  Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n  if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n    updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n  }\n  if (authoritativeTimestamp != null) {\n    updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n  }\n  if (span.duration != null) {\n    updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n  }\n  InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n  inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n  for (  Annotation annotation : span.annotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n  for (  BinaryAnnotation annotation : span.binaryAnnotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 426,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3202,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Span span : spans) {\n  Long authoritativeTimestamp=span.timestamp;\n  span=ApplyTimestampAndDuration.apply(span);\n  Long binaryAnnotationTimestamp=span.timestamp;\n  if (binaryAnnotationTimestamp == null) {\n    binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n  }\n  Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n  if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n    updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n  }\n  if (authoritativeTimestamp != null) {\n    updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n  }\n  if (span.duration != null) {\n    updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n  }\n  InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n  inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n  for (  Annotation annotation : span.annotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n  for (  BinaryAnnotation annotation : span.binaryAnnotations) {\n    InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n    if (annotation.endpoint != null) {\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n      insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n    }\n    inserts.add(insert.onDuplicateKeyIgnore());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 432,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3349,
        "startLineNumber" : 50,
        "startColumnNumber" : 55,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DSLContext create=context.get(conn);\n  List<Query> inserts=new ArrayList<>();\n  for (  Span span : spans) {\n    Long authoritativeTimestamp=span.timestamp;\n    span=ApplyTimestampAndDuration.apply(span);\n    Long binaryAnnotationTimestamp=span.timestamp;\n    if (binaryAnnotationTimestamp == null) {\n      binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n    }\n    Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n    if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n      updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n    }\n    if (authoritativeTimestamp != null) {\n      updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n    }\n    if (span.duration != null) {\n      updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n    }\n    InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n    inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n    for (    Annotation annotation : span.annotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n    for (    BinaryAnnotation annotation : span.binaryAnnotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n  }\n  create.batch(inserts).execute();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 461,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3476,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 121,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (Connection conn=datasource.getConnection()){\n  DSLContext create=context.get(conn);\n  List<Query> inserts=new ArrayList<>();\n  for (  Span span : spans) {\n    Long authoritativeTimestamp=span.timestamp;\n    span=ApplyTimestampAndDuration.apply(span);\n    Long binaryAnnotationTimestamp=span.timestamp;\n    if (binaryAnnotationTimestamp == null) {\n      binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n    }\n    Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n    if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n      updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n    }\n    if (authoritativeTimestamp != null) {\n      updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n    }\n    if (span.duration != null) {\n      updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n    }\n    InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n    inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n    for (    Annotation annotation : span.annotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n    for (    BinaryAnnotation annotation : span.binaryAnnotations) {\n      InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n      if (annotation.endpoint != null) {\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n        insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n      }\n      inserts.add(insert.onDuplicateKeyIgnore());\n    }\n  }\n  create.batch(inserts).execute();\n}\n catch (SQLException e) {\n  throw new RuntimeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 481,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3519,
        "startLineNumber" : 48,
        "startColumnNumber" : 49,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (spans.isEmpty())   return;\n  try (Connection conn=datasource.getConnection()){\n    DSLContext create=context.get(conn);\n    List<Query> inserts=new ArrayList<>();\n    for (    Span span : spans) {\n      Long authoritativeTimestamp=span.timestamp;\n      span=ApplyTimestampAndDuration.apply(span);\n      Long binaryAnnotationTimestamp=span.timestamp;\n      if (binaryAnnotationTimestamp == null) {\n        binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n      }\n      Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n      if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n        updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n      }\n      if (authoritativeTimestamp != null) {\n        updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n      }\n      if (span.duration != null) {\n        updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n      }\n      InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n      inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n      for (      Annotation annotation : span.annotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n      for (      BinaryAnnotation annotation : span.binaryAnnotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n    }\n    create.batch(inserts).execute();\n  }\n catch (  SQLException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 487,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3628,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 122,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Blocking version of  {@link AsyncSpanConsumer#accept} \n */\n@Override public void accept(List<Span> spans){\n  if (spans.isEmpty())   return;\n  try (Connection conn=datasource.getConnection()){\n    DSLContext create=context.get(conn);\n    List<Query> inserts=new ArrayList<>();\n    for (    Span span : spans) {\n      Long authoritativeTimestamp=span.timestamp;\n      span=ApplyTimestampAndDuration.apply(span);\n      Long binaryAnnotationTimestamp=span.timestamp;\n      if (binaryAnnotationTimestamp == null) {\n        binaryAnnotationTimestamp=System.currentTimeMillis() * 1000;\n      }\n      Map<TableField<Record,?>,Object> updateFields=new LinkedHashMap<>();\n      if (!span.name.equals(\"\") && !span.name.equals(\"unknown\")) {\n        updateFields.put(ZIPKIN_SPANS.NAME,span.name);\n      }\n      if (authoritativeTimestamp != null) {\n        updateFields.put(ZIPKIN_SPANS.START_TS,authoritativeTimestamp);\n      }\n      if (span.duration != null) {\n        updateFields.put(ZIPKIN_SPANS.DURATION,span.duration);\n      }\n      InsertSetMoreStep<Record> insertSpan=create.insertInto(ZIPKIN_SPANS).set(ZIPKIN_SPANS.TRACE_ID,span.traceId).set(ZIPKIN_SPANS.ID,span.id).set(ZIPKIN_SPANS.PARENT_ID,span.parentId).set(ZIPKIN_SPANS.NAME,span.name).set(ZIPKIN_SPANS.DEBUG,span.debug).set(ZIPKIN_SPANS.START_TS,span.timestamp).set(ZIPKIN_SPANS.DURATION,span.duration);\n      inserts.add(updateFields.isEmpty() ? insertSpan.onDuplicateKeyIgnore() : insertSpan.onDuplicateKeyUpdate().set(updateFields));\n      for (      Annotation annotation : span.annotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,-1).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,annotation.timestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n      for (      BinaryAnnotation annotation : span.binaryAnnotations) {\n        InsertSetMoreStep<Record> insert=create.insertInto(ZIPKIN_ANNOTATIONS).set(ZIPKIN_ANNOTATIONS.TRACE_ID,span.traceId).set(ZIPKIN_ANNOTATIONS.SPAN_ID,span.id).set(ZIPKIN_ANNOTATIONS.A_KEY,annotation.key).set(ZIPKIN_ANNOTATIONS.A_VALUE,annotation.value).set(ZIPKIN_ANNOTATIONS.A_TYPE,annotation.type.value).set(ZIPKIN_ANNOTATIONS.A_TIMESTAMP,binaryAnnotationTimestamp);\n        if (annotation.endpoint != null) {\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME,annotation.endpoint.serviceName);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_IPV4,annotation.endpoint.ipv4);\n          insert.set(ZIPKIN_ANNOTATIONS.ENDPOINT_PORT,annotation.endpoint.port);\n        }\n        inserts.add(insert.onDuplicateKeyIgnore());\n      }\n    }\n    create.batch(inserts).execute();\n  }\n catch (  SQLException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 501,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "insertSpan.onDuplicateKeyUpdate().set(updateFields)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "zipkin.jdbc.InsertSetMoreStep<java.lang.Record>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 84,
    "startColumnNumber" : 12,
    "endLineNumber" : 84,
    "endColumnNumber" : 22
  }, {
    "charLength" : 10,
    "startLineNumber" : 85,
    "startColumnNumber" : 12,
    "endLineNumber" : 85,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}