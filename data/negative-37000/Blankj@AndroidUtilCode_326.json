{
  "id" : 326,
  "expression" : "i",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/app/src/main/java/com/blankj/androidutilcode/core/span/SpanActivity.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 203,
      "startColumnNumber" : 55,
      "endLineNumber" : 203,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 203,
        "startColumnNumber" : 55,
        "endLineNumber" : 203,
        "endColumnNumber" : 62
      },
      "nodeContext" : "i < len",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n  ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n  mForegroundAlphaColorSpanGroup.addSpan(span);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 179,
        "startColumnNumber" : 32,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mShaderWidth=64 * density * 4;\n  mShader=new LinearGradient(0,0,mShaderWidth,0,getResources().getIntArray(R.array.rainbow),null,Shader.TileMode.REPEAT);\n  matrix=new Matrix();\n  mBlurMaskFilterSpan=new BlurMaskFilterSpan(25);\n  mShadowSpan=new ShadowSpan(8,8,8,Color.WHITE);\n  mForegroundAlphaColorSpan=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mForegroundAlphaColorSpanGroup=new ForegroundAlphaColorSpanGroup(0);\n  mPrinterString=\"打印动画，后面的文字是为了测试打印效果...\";\n  mSpanUtils=new SpanUtils().appendLine(\"彩虹动画\").setFontSize(64,true).setShader(mShader).appendLine(\"模糊动画\").setFontSize(64,true).setSpans(mBlurMaskFilterSpan).appendLine(\"阴影动画\").setFontSize(64,true).setBackgroundColor(Color.BLACK).setSpans(mShadowSpan).appendLine(\"透明动画\").setFontSize(64,true).setSpans(mForegroundAlphaColorSpan);\n  for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n    ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n    mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n    mForegroundAlphaColorSpanGroup.addSpan(span);\n  }\n  animSsb=mSpanUtils.create();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1408,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void initAnimSpan(){\n  mShaderWidth=64 * density * 4;\n  mShader=new LinearGradient(0,0,mShaderWidth,0,getResources().getIntArray(R.array.rainbow),null,Shader.TileMode.REPEAT);\n  matrix=new Matrix();\n  mBlurMaskFilterSpan=new BlurMaskFilterSpan(25);\n  mShadowSpan=new ShadowSpan(8,8,8,Color.WHITE);\n  mForegroundAlphaColorSpan=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mForegroundAlphaColorSpanGroup=new ForegroundAlphaColorSpanGroup(0);\n  mPrinterString=\"打印动画，后面的文字是为了测试打印效果...\";\n  mSpanUtils=new SpanUtils().appendLine(\"彩虹动画\").setFontSize(64,true).setShader(mShader).appendLine(\"模糊动画\").setFontSize(64,true).setSpans(mBlurMaskFilterSpan).appendLine(\"阴影动画\").setFontSize(64,true).setBackgroundColor(Color.BLACK).setSpans(mShadowSpan).appendLine(\"透明动画\").setFontSize(64,true).setSpans(mForegroundAlphaColorSpan);\n  for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n    ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n    mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n    mForegroundAlphaColorSpanGroup.addSpan(span);\n  }\n  animSsb=mSpanUtils.create();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 203,
        "startColumnNumber" : 55,
        "endLineNumber" : 203,
        "endColumnNumber" : 62
      },
      "nodeContext" : "i < len",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 205,
      "startColumnNumber" : 55,
      "endLineNumber" : 205,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 205,
        "startColumnNumber" : 30,
        "endLineNumber" : 205,
        "endColumnNumber" : 64
      },
      "nodeContext" : "mPrinterString.substring(i,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 80
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 203,
        "startColumnNumber" : 69,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n  mForegroundAlphaColorSpanGroup.addSpan(span);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n  ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n  mForegroundAlphaColorSpanGroup.addSpan(span);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 179,
        "startColumnNumber" : 32,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mShaderWidth=64 * density * 4;\n  mShader=new LinearGradient(0,0,mShaderWidth,0,getResources().getIntArray(R.array.rainbow),null,Shader.TileMode.REPEAT);\n  matrix=new Matrix();\n  mBlurMaskFilterSpan=new BlurMaskFilterSpan(25);\n  mShadowSpan=new ShadowSpan(8,8,8,Color.WHITE);\n  mForegroundAlphaColorSpan=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mForegroundAlphaColorSpanGroup=new ForegroundAlphaColorSpanGroup(0);\n  mPrinterString=\"打印动画，后面的文字是为了测试打印效果...\";\n  mSpanUtils=new SpanUtils().appendLine(\"彩虹动画\").setFontSize(64,true).setShader(mShader).appendLine(\"模糊动画\").setFontSize(64,true).setSpans(mBlurMaskFilterSpan).appendLine(\"阴影动画\").setFontSize(64,true).setBackgroundColor(Color.BLACK).setSpans(mShadowSpan).appendLine(\"透明动画\").setFontSize(64,true).setSpans(mForegroundAlphaColorSpan);\n  for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n    ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n    mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n    mForegroundAlphaColorSpanGroup.addSpan(span);\n  }\n  animSsb=mSpanUtils.create();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1408,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void initAnimSpan(){\n  mShaderWidth=64 * density * 4;\n  mShader=new LinearGradient(0,0,mShaderWidth,0,getResources().getIntArray(R.array.rainbow),null,Shader.TileMode.REPEAT);\n  matrix=new Matrix();\n  mBlurMaskFilterSpan=new BlurMaskFilterSpan(25);\n  mShadowSpan=new ShadowSpan(8,8,8,Color.WHITE);\n  mForegroundAlphaColorSpan=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mForegroundAlphaColorSpanGroup=new ForegroundAlphaColorSpanGroup(0);\n  mPrinterString=\"打印动画，后面的文字是为了测试打印效果...\";\n  mSpanUtils=new SpanUtils().appendLine(\"彩虹动画\").setFontSize(64,true).setShader(mShader).appendLine(\"模糊动画\").setFontSize(64,true).setSpans(mBlurMaskFilterSpan).appendLine(\"阴影动画\").setFontSize(64,true).setBackgroundColor(Color.BLACK).setSpans(mShadowSpan).appendLine(\"透明动画\").setFontSize(64,true).setSpans(mForegroundAlphaColorSpan);\n  for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n    ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n    mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n    mForegroundAlphaColorSpanGroup.addSpan(span);\n  }\n  animSsb=mSpanUtils.create();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 205,
      "startColumnNumber" : 58,
      "endLineNumber" : 205,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 205,
        "startColumnNumber" : 58,
        "endLineNumber" : 205,
        "endColumnNumber" : 63
      },
      "nodeContext" : "i + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 205,
        "startColumnNumber" : 30,
        "endLineNumber" : 205,
        "endColumnNumber" : 64
      },
      "nodeContext" : "mPrinterString.substring(i,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 80
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 203,
        "startColumnNumber" : 69,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n  mForegroundAlphaColorSpanGroup.addSpan(span);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 203,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n  ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n  mForegroundAlphaColorSpanGroup.addSpan(span);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1380,
        "startLineNumber" : 179,
        "startColumnNumber" : 32,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mShaderWidth=64 * density * 4;\n  mShader=new LinearGradient(0,0,mShaderWidth,0,getResources().getIntArray(R.array.rainbow),null,Shader.TileMode.REPEAT);\n  matrix=new Matrix();\n  mBlurMaskFilterSpan=new BlurMaskFilterSpan(25);\n  mShadowSpan=new ShadowSpan(8,8,8,Color.WHITE);\n  mForegroundAlphaColorSpan=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mForegroundAlphaColorSpanGroup=new ForegroundAlphaColorSpanGroup(0);\n  mPrinterString=\"打印动画，后面的文字是为了测试打印效果...\";\n  mSpanUtils=new SpanUtils().appendLine(\"彩虹动画\").setFontSize(64,true).setShader(mShader).appendLine(\"模糊动画\").setFontSize(64,true).setSpans(mBlurMaskFilterSpan).appendLine(\"阴影动画\").setFontSize(64,true).setBackgroundColor(Color.BLACK).setSpans(mShadowSpan).appendLine(\"透明动画\").setFontSize(64,true).setSpans(mForegroundAlphaColorSpan);\n  for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n    ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n    mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n    mForegroundAlphaColorSpanGroup.addSpan(span);\n  }\n  animSsb=mSpanUtils.create();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1408,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void initAnimSpan(){\n  mShaderWidth=64 * density * 4;\n  mShader=new LinearGradient(0,0,mShaderWidth,0,getResources().getIntArray(R.array.rainbow),null,Shader.TileMode.REPEAT);\n  matrix=new Matrix();\n  mBlurMaskFilterSpan=new BlurMaskFilterSpan(25);\n  mShadowSpan=new ShadowSpan(8,8,8,Color.WHITE);\n  mForegroundAlphaColorSpan=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n  mForegroundAlphaColorSpanGroup=new ForegroundAlphaColorSpanGroup(0);\n  mPrinterString=\"打印动画，后面的文字是为了测试打印效果...\";\n  mSpanUtils=new SpanUtils().appendLine(\"彩虹动画\").setFontSize(64,true).setShader(mShader).appendLine(\"模糊动画\").setFontSize(64,true).setSpans(mBlurMaskFilterSpan).appendLine(\"阴影动画\").setFontSize(64,true).setBackgroundColor(Color.BLACK).setSpans(mShadowSpan).appendLine(\"透明动画\").setFontSize(64,true).setSpans(mForegroundAlphaColorSpan);\n  for (int i=0, len=mPrinterString.length(); i < len; ++i) {\n    ForegroundAlphaColorSpan span=new ForegroundAlphaColorSpan(Color.TRANSPARENT);\n    mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n    mForegroundAlphaColorSpanGroup.addSpan(span);\n  }\n  animSsb=mSpanUtils.create();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mSpanUtils.append(mPrinterString.substring(i,i + 1)).setSpans(span);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 203,
    "startColumnNumber" : 55,
    "endLineNumber" : 203,
    "endColumnNumber" : 56
  }, {
    "charLength" : 1,
    "startLineNumber" : 205,
    "startColumnNumber" : 55,
    "endLineNumber" : 205,
    "endColumnNumber" : 56
  }, {
    "charLength" : 1,
    "startLineNumber" : 205,
    "startColumnNumber" : 58,
    "endLineNumber" : 205,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}