{
  "id" : 164,
  "expression" : "(char)(ch - 65)",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/pdf417/encoder/PDF417HighLevelEncoder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(char)(ch - 65)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 248,
      "startColumnNumber" : 25,
      "endLineNumber" : 248,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 248,
        "startColumnNumber" : 14,
        "endLineNumber" : 248,
        "endColumnNumber" : 42
      },
      "nodeContext" : "tmp.append((char)(ch - 65))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 248,
        "startColumnNumber" : 14,
        "endLineNumber" : 248,
        "endColumnNumber" : 43
      },
      "nodeContext" : "tmp.append((char)(ch - 65));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 247,
        "startColumnNumber" : 19,
        "endLineNumber" : 249,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tmp.append((char)(ch - 65));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 245,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ch == ' ') {\n  tmp.append((char)26);\n}\n else {\n  tmp.append((char)(ch - 65));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 172,
        "startLineNumber" : 244,
        "startColumnNumber" : 32,
        "endLineNumber" : 250,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 65));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 659,
        "startLineNumber" : 244,
        "startColumnNumber" : 10,
        "endLineNumber" : 264,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (isAlphaUpper(ch)) {\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 65));\n  }\n}\n else {\n  if (isAlphaLower(ch)) {\n    submode=SUBMODE_LOWER;\n    tmp.append((char)27);\n    continue;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2687,
        "startLineNumber" : 242,
        "startColumnNumber" : 6,
        "endLineNumber" : 324,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (submode) {\ncase SUBMODE_ALPHA:  if (isAlphaUpper(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 65));\n    }\n  }\n else {\n    if (isAlphaLower(ch)) {\n      submode=SUBMODE_LOWER;\n      tmp.append((char)27);\n      continue;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_LOWER:if (isAlphaLower(ch)) {\nif (ch == ' ') {\n  tmp.append((char)26);\n}\n else {\n  tmp.append((char)(ch - 97));\n}\n}\n else {\nif (isAlphaUpper(ch)) {\n  tmp.append((char)27);\n  tmp.append((char)(ch - 65));\n  break;\n}\n else if (isMixed(ch)) {\n  submode=SUBMODE_MIXED;\n  tmp.append((char)28);\n  continue;\n}\n else {\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n  break;\n}\n}\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)28);\ncontinue;\n}\n else if (isAlphaLower(ch)) {\nsubmode=SUBMODE_LOWER;\ntmp.append((char)27);\ncontinue;\n}\n else {\nif (startpos + idx + 1 < count) {\nchar next=msg.charAt(startpos + idx + 1);\nif (isPunctuation(next)) {\n  submode=SUBMODE_PUNCTUATION;\n  tmp.append((char)25);\n  continue;\n}\n}\ntmp.append((char)29);\ntmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 309,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2814,
        "startLineNumber" : 240,
        "startColumnNumber" : 17,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:    if (isAlphaUpper(ch)) {\n      if (ch == ' ') {\n        tmp.append((char)26);\n      }\n else {\n        tmp.append((char)(ch - 65));\n      }\n    }\n else {\n      if (isAlphaLower(ch)) {\n        submode=SUBMODE_LOWER;\n        tmp.append((char)27);\n        continue;\n      }\n else       if (isMixed(ch)) {\n        submode=SUBMODE_MIXED;\n        tmp.append((char)28);\n        continue;\n      }\n else {\n        tmp.append((char)29);\n        tmp.append((char)PUNCTUATION[ch]);\n        break;\n      }\n    }\n  break;\ncase SUBMODE_LOWER:if (isAlphaLower(ch)) {\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 97));\n  }\n}\n else {\n  if (isAlphaUpper(ch)) {\n    tmp.append((char)27);\n    tmp.append((char)(ch - 65));\n    break;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)28);\ncontinue;\n}\n else if (isAlphaLower(ch)) {\nsubmode=SUBMODE_LOWER;\ntmp.append((char)27);\ncontinue;\n}\n else {\nif (startpos + idx + 1 < count) {\n  char next=msg.charAt(startpos + idx + 1);\n  if (isPunctuation(next)) {\n    submode=SUBMODE_PUNCTUATION;\n    tmp.append((char)25);\n    continue;\n  }\n}\ntmp.append((char)29);\ntmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2827,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:    if (isAlphaUpper(ch)) {\n      if (ch == ' ') {\n        tmp.append((char)26);\n      }\n else {\n        tmp.append((char)(ch - 65));\n      }\n    }\n else {\n      if (isAlphaLower(ch)) {\n        submode=SUBMODE_LOWER;\n        tmp.append((char)27);\n        continue;\n      }\n else       if (isMixed(ch)) {\n        submode=SUBMODE_MIXED;\n        tmp.append((char)28);\n        continue;\n      }\n else {\n        tmp.append((char)29);\n        tmp.append((char)PUNCTUATION[ch]);\n        break;\n      }\n    }\n  break;\ncase SUBMODE_LOWER:if (isAlphaLower(ch)) {\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 97));\n  }\n}\n else {\n  if (isAlphaUpper(ch)) {\n    tmp.append((char)27);\n    tmp.append((char)(ch - 65));\n    break;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)28);\ncontinue;\n}\n else if (isAlphaLower(ch)) {\nsubmode=SUBMODE_LOWER;\ntmp.append((char)27);\ncontinue;\n}\n else {\nif (startpos + idx + 1 < count) {\n  char next=msg.charAt(startpos + idx + 1);\n  if (isPunctuation(next)) {\n    submode=SUBMODE_PUNCTUATION;\n    tmp.append((char)25);\n    continue;\n  }\n}\ntmp.append((char)29);\ntmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 331,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3312,
        "startLineNumber" : 236,
        "startColumnNumber" : 52,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder tmp=new StringBuilder(count);\n  int submode=initialSubmode;\n  int idx=0;\n  while (true) {\n    char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {\n        if (ch == ' ') {\n          tmp.append((char)26);\n        }\n else {\n          tmp.append((char)(ch - 65));\n        }\n      }\n else {\n        if (isAlphaLower(ch)) {\n          submode=SUBMODE_LOWER;\n          tmp.append((char)27);\n          continue;\n        }\n else         if (isMixed(ch)) {\n          submode=SUBMODE_MIXED;\n          tmp.append((char)28);\n          continue;\n        }\n else {\n          tmp.append((char)29);\n          tmp.append((char)PUNCTUATION[ch]);\n          break;\n        }\n      }\n    break;\ncase SUBMODE_LOWER:  if (isAlphaLower(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 97));\n    }\n  }\n else {\n    if (isAlphaUpper(ch)) {\n      tmp.append((char)27);\n      tmp.append((char)(ch - 65));\n      break;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\n  submode=SUBMODE_ALPHA;\n  tmp.append((char)28);\n  continue;\n}\n else if (isAlphaLower(ch)) {\n  submode=SUBMODE_LOWER;\n  tmp.append((char)27);\n  continue;\n}\n else {\n  if (startpos + idx + 1 < count) {\n    char next=msg.charAt(startpos + idx + 1);\n    if (isPunctuation(next)) {\n      submode=SUBMODE_PUNCTUATION;\n      tmp.append((char)25);\n      continue;\n    }\n  }\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\nchar h=0;\nint len=tmp.length();\nfor (int i=0; i < len; i++) {\nboolean odd=(i % 2) != 0;\nif (odd) {\nh=(char)((h * 30) + tmp.charAt(i));\nsb.append(h);\n}\n else {\nh=tmp.charAt(i);\n}\n}\nif ((len % 2) != 0) {\nsb.append((char)((h * 30) + 29));\n}\nreturn submode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4037,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Encode parts of the message using Text Compaction as described in ISO/IEC 15438:2001(E), chapter 4.4.2.\n * @param msg            the message\n * @param startpos       the start position within the message\n * @param count          the number of characters to encode\n * @param sb             receives the encoded codewords\n * @param initialSubmode should normally be SUBMODE_ALPHA\n * @return the text submode in which this method ends\n */\nprivate static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){\n  StringBuilder tmp=new StringBuilder(count);\n  int submode=initialSubmode;\n  int idx=0;\n  while (true) {\n    char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {\n        if (ch == ' ') {\n          tmp.append((char)26);\n        }\n else {\n          tmp.append((char)(ch - 65));\n        }\n      }\n else {\n        if (isAlphaLower(ch)) {\n          submode=SUBMODE_LOWER;\n          tmp.append((char)27);\n          continue;\n        }\n else         if (isMixed(ch)) {\n          submode=SUBMODE_MIXED;\n          tmp.append((char)28);\n          continue;\n        }\n else {\n          tmp.append((char)29);\n          tmp.append((char)PUNCTUATION[ch]);\n          break;\n        }\n      }\n    break;\ncase SUBMODE_LOWER:  if (isAlphaLower(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 97));\n    }\n  }\n else {\n    if (isAlphaUpper(ch)) {\n      tmp.append((char)27);\n      tmp.append((char)(ch - 65));\n      break;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\n  submode=SUBMODE_ALPHA;\n  tmp.append((char)28);\n  continue;\n}\n else if (isAlphaLower(ch)) {\n  submode=SUBMODE_LOWER;\n  tmp.append((char)27);\n  continue;\n}\n else {\n  if (startpos + idx + 1 < count) {\n    char next=msg.charAt(startpos + idx + 1);\n    if (isPunctuation(next)) {\n      submode=SUBMODE_PUNCTUATION;\n      tmp.append((char)25);\n      continue;\n    }\n  }\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\nchar h=0;\nint len=tmp.length();\nfor (int i=0; i < len; i++) {\nboolean odd=(i % 2) != 0;\nif (odd) {\nh=(char)((h * 30) + tmp.charAt(i));\nsb.append(h);\n}\n else {\nh=tmp.charAt(i);\n}\n}\nif ((len % 2) != 0) {\nsb.append((char)((h * 30) + 29));\n}\nreturn submode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 462,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 248,
        "startColumnNumber" : 14,
        "endLineNumber" : 248,
        "endColumnNumber" : 43
      },
      "nodeContext" : "tmp.append((char)(ch - 65));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "char"
  }, {
    "nodeContext" : "(char)(ch - 65)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 276,
      "startColumnNumber" : 25,
      "endLineNumber" : 276,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 276,
        "startColumnNumber" : 14,
        "endLineNumber" : 276,
        "endColumnNumber" : 42
      },
      "nodeContext" : "tmp.append((char)(ch - 65))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 276,
        "startColumnNumber" : 14,
        "endLineNumber" : 276,
        "endColumnNumber" : 43
      },
      "nodeContext" : "tmp.append((char)(ch - 65));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 274,
        "startColumnNumber" : 34,
        "endLineNumber" : 279,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tmp.append((char)27);\n  tmp.append((char)(ch - 65));\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 498,
        "startLineNumber" : 274,
        "startColumnNumber" : 12,
        "endLineNumber" : 287,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isAlphaUpper(ch)) {\n  tmp.append((char)27);\n  tmp.append((char)(ch - 65));\n  break;\n}\n else if (isMixed(ch)) {\n  submode=SUBMODE_MIXED;\n  tmp.append((char)28);\n  continue;\n}\n else {\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 273,
        "startColumnNumber" : 17,
        "endLineNumber" : 288,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (isAlphaUpper(ch)) {\n    tmp.append((char)27);\n    tmp.append((char)(ch - 65));\n    break;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 726,
        "startLineNumber" : 267,
        "startColumnNumber" : 10,
        "endLineNumber" : 288,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (isAlphaLower(ch)) {\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 97));\n  }\n}\n else {\n  if (isAlphaUpper(ch)) {\n    tmp.append((char)27);\n    tmp.append((char)(ch - 65));\n    break;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2687,
        "startLineNumber" : 242,
        "startColumnNumber" : 6,
        "endLineNumber" : 324,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (submode) {\ncase SUBMODE_ALPHA:  if (isAlphaUpper(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 65));\n    }\n  }\n else {\n    if (isAlphaLower(ch)) {\n      submode=SUBMODE_LOWER;\n      tmp.append((char)27);\n      continue;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_LOWER:if (isAlphaLower(ch)) {\nif (ch == ' ') {\n  tmp.append((char)26);\n}\n else {\n  tmp.append((char)(ch - 97));\n}\n}\n else {\nif (isAlphaUpper(ch)) {\n  tmp.append((char)27);\n  tmp.append((char)(ch - 65));\n  break;\n}\n else if (isMixed(ch)) {\n  submode=SUBMODE_MIXED;\n  tmp.append((char)28);\n  continue;\n}\n else {\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n  break;\n}\n}\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)28);\ncontinue;\n}\n else if (isAlphaLower(ch)) {\nsubmode=SUBMODE_LOWER;\ntmp.append((char)27);\ncontinue;\n}\n else {\nif (startpos + idx + 1 < count) {\nchar next=msg.charAt(startpos + idx + 1);\nif (isPunctuation(next)) {\n  submode=SUBMODE_PUNCTUATION;\n  tmp.append((char)25);\n  continue;\n}\n}\ntmp.append((char)29);\ntmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 309,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2814,
        "startLineNumber" : 240,
        "startColumnNumber" : 17,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:    if (isAlphaUpper(ch)) {\n      if (ch == ' ') {\n        tmp.append((char)26);\n      }\n else {\n        tmp.append((char)(ch - 65));\n      }\n    }\n else {\n      if (isAlphaLower(ch)) {\n        submode=SUBMODE_LOWER;\n        tmp.append((char)27);\n        continue;\n      }\n else       if (isMixed(ch)) {\n        submode=SUBMODE_MIXED;\n        tmp.append((char)28);\n        continue;\n      }\n else {\n        tmp.append((char)29);\n        tmp.append((char)PUNCTUATION[ch]);\n        break;\n      }\n    }\n  break;\ncase SUBMODE_LOWER:if (isAlphaLower(ch)) {\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 97));\n  }\n}\n else {\n  if (isAlphaUpper(ch)) {\n    tmp.append((char)27);\n    tmp.append((char)(ch - 65));\n    break;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)28);\ncontinue;\n}\n else if (isAlphaLower(ch)) {\nsubmode=SUBMODE_LOWER;\ntmp.append((char)27);\ncontinue;\n}\n else {\nif (startpos + idx + 1 < count) {\n  char next=msg.charAt(startpos + idx + 1);\n  if (isPunctuation(next)) {\n    submode=SUBMODE_PUNCTUATION;\n    tmp.append((char)25);\n    continue;\n  }\n}\ntmp.append((char)29);\ntmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2827,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:    if (isAlphaUpper(ch)) {\n      if (ch == ' ') {\n        tmp.append((char)26);\n      }\n else {\n        tmp.append((char)(ch - 65));\n      }\n    }\n else {\n      if (isAlphaLower(ch)) {\n        submode=SUBMODE_LOWER;\n        tmp.append((char)27);\n        continue;\n      }\n else       if (isMixed(ch)) {\n        submode=SUBMODE_MIXED;\n        tmp.append((char)28);\n        continue;\n      }\n else {\n        tmp.append((char)29);\n        tmp.append((char)PUNCTUATION[ch]);\n        break;\n      }\n    }\n  break;\ncase SUBMODE_LOWER:if (isAlphaLower(ch)) {\n  if (ch == ' ') {\n    tmp.append((char)26);\n  }\n else {\n    tmp.append((char)(ch - 97));\n  }\n}\n else {\n  if (isAlphaUpper(ch)) {\n    tmp.append((char)27);\n    tmp.append((char)(ch - 65));\n    break;\n  }\n else   if (isMixed(ch)) {\n    submode=SUBMODE_MIXED;\n    tmp.append((char)28);\n    continue;\n  }\n else {\n    tmp.append((char)29);\n    tmp.append((char)PUNCTUATION[ch]);\n    break;\n  }\n}\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)28);\ncontinue;\n}\n else if (isAlphaLower(ch)) {\nsubmode=SUBMODE_LOWER;\ntmp.append((char)27);\ncontinue;\n}\n else {\nif (startpos + idx + 1 < count) {\n  char next=msg.charAt(startpos + idx + 1);\n  if (isPunctuation(next)) {\n    submode=SUBMODE_PUNCTUATION;\n    tmp.append((char)25);\n    continue;\n  }\n}\ntmp.append((char)29);\ntmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 331,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3312,
        "startLineNumber" : 236,
        "startColumnNumber" : 52,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder tmp=new StringBuilder(count);\n  int submode=initialSubmode;\n  int idx=0;\n  while (true) {\n    char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {\n        if (ch == ' ') {\n          tmp.append((char)26);\n        }\n else {\n          tmp.append((char)(ch - 65));\n        }\n      }\n else {\n        if (isAlphaLower(ch)) {\n          submode=SUBMODE_LOWER;\n          tmp.append((char)27);\n          continue;\n        }\n else         if (isMixed(ch)) {\n          submode=SUBMODE_MIXED;\n          tmp.append((char)28);\n          continue;\n        }\n else {\n          tmp.append((char)29);\n          tmp.append((char)PUNCTUATION[ch]);\n          break;\n        }\n      }\n    break;\ncase SUBMODE_LOWER:  if (isAlphaLower(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 97));\n    }\n  }\n else {\n    if (isAlphaUpper(ch)) {\n      tmp.append((char)27);\n      tmp.append((char)(ch - 65));\n      break;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\n  submode=SUBMODE_ALPHA;\n  tmp.append((char)28);\n  continue;\n}\n else if (isAlphaLower(ch)) {\n  submode=SUBMODE_LOWER;\n  tmp.append((char)27);\n  continue;\n}\n else {\n  if (startpos + idx + 1 < count) {\n    char next=msg.charAt(startpos + idx + 1);\n    if (isPunctuation(next)) {\n      submode=SUBMODE_PUNCTUATION;\n      tmp.append((char)25);\n      continue;\n    }\n  }\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\nchar h=0;\nint len=tmp.length();\nfor (int i=0; i < len; i++) {\nboolean odd=(i % 2) != 0;\nif (odd) {\nh=(char)((h * 30) + tmp.charAt(i));\nsb.append(h);\n}\n else {\nh=tmp.charAt(i);\n}\n}\nif ((len % 2) != 0) {\nsb.append((char)((h * 30) + 29));\n}\nreturn submode;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4037,
        "startLineNumber" : 221,
        "startColumnNumber" : 2,
        "endLineNumber" : 345,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Encode parts of the message using Text Compaction as described in ISO/IEC 15438:2001(E), chapter 4.4.2.\n * @param msg            the message\n * @param startpos       the start position within the message\n * @param count          the number of characters to encode\n * @param sb             receives the encoded codewords\n * @param initialSubmode should normally be SUBMODE_ALPHA\n * @return the text submode in which this method ends\n */\nprivate static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){\n  StringBuilder tmp=new StringBuilder(count);\n  int submode=initialSubmode;\n  int idx=0;\n  while (true) {\n    char ch=msg.charAt(startpos + idx);\nswitch (submode) {\ncase SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {\n        if (ch == ' ') {\n          tmp.append((char)26);\n        }\n else {\n          tmp.append((char)(ch - 65));\n        }\n      }\n else {\n        if (isAlphaLower(ch)) {\n          submode=SUBMODE_LOWER;\n          tmp.append((char)27);\n          continue;\n        }\n else         if (isMixed(ch)) {\n          submode=SUBMODE_MIXED;\n          tmp.append((char)28);\n          continue;\n        }\n else {\n          tmp.append((char)29);\n          tmp.append((char)PUNCTUATION[ch]);\n          break;\n        }\n      }\n    break;\ncase SUBMODE_LOWER:  if (isAlphaLower(ch)) {\n    if (ch == ' ') {\n      tmp.append((char)26);\n    }\n else {\n      tmp.append((char)(ch - 97));\n    }\n  }\n else {\n    if (isAlphaUpper(ch)) {\n      tmp.append((char)27);\n      tmp.append((char)(ch - 65));\n      break;\n    }\n else     if (isMixed(ch)) {\n      submode=SUBMODE_MIXED;\n      tmp.append((char)28);\n      continue;\n    }\n else {\n      tmp.append((char)29);\n      tmp.append((char)PUNCTUATION[ch]);\n      break;\n    }\n  }\nbreak;\ncase SUBMODE_MIXED:if (isMixed(ch)) {\ntmp.append((char)MIXED[ch]);\n}\n else {\nif (isAlphaUpper(ch)) {\n  submode=SUBMODE_ALPHA;\n  tmp.append((char)28);\n  continue;\n}\n else if (isAlphaLower(ch)) {\n  submode=SUBMODE_LOWER;\n  tmp.append((char)27);\n  continue;\n}\n else {\n  if (startpos + idx + 1 < count) {\n    char next=msg.charAt(startpos + idx + 1);\n    if (isPunctuation(next)) {\n      submode=SUBMODE_PUNCTUATION;\n      tmp.append((char)25);\n      continue;\n    }\n  }\n  tmp.append((char)29);\n  tmp.append((char)PUNCTUATION[ch]);\n}\n}\nbreak;\ndefault:if (isPunctuation(ch)) {\ntmp.append((char)PUNCTUATION[ch]);\n}\n else {\nsubmode=SUBMODE_ALPHA;\ntmp.append((char)29);\ncontinue;\n}\n}\nidx++;\nif (idx >= count) {\nbreak;\n}\n}\nchar h=0;\nint len=tmp.length();\nfor (int i=0; i < len; i++) {\nboolean odd=(i % 2) != 0;\nif (odd) {\nh=(char)((h * 30) + tmp.charAt(i));\nsb.append(h);\n}\n else {\nh=tmp.charAt(i);\n}\n}\nif ((len % 2) != 0) {\nsb.append((char)((h * 30) + 29));\n}\nreturn submode;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 462,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 276,
        "startColumnNumber" : 14,
        "endLineNumber" : 276,
        "endColumnNumber" : 43
      },
      "nodeContext" : "tmp.append((char)(ch - 65));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 248,
    "startColumnNumber" : 25,
    "endLineNumber" : 248,
    "endColumnNumber" : 41
  }, {
    "charLength" : 16,
    "startLineNumber" : 276,
    "startColumnNumber" : 25,
    "endLineNumber" : 276,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}