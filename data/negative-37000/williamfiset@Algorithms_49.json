{
  "id" : 49,
  "expression" : "mice.length",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/examples/MiceAndOwls.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mice.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 53,
      "startColumnNumber" : 18,
      "endLineNumber" : 53,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 53,
        "startColumnNumber" : 14,
        "endLineNumber" : 53,
        "endColumnNumber" : 29
      },
      "nodeContext" : "M=mice.length",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 30
      },
      "nodeContext" : "final int M=mice.length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 52,
        "startColumnNumber" : 60,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int M=mice.length;\n  final int H=holes.length;\n  final int N=M + H + 2;\n  final int S=N - 1;\n  final int T=N - 2;\n  NetworkFlowSolverBase solver;\n  solver=new FordFulkersonDfsSolver(N,S,T);\n  for (int i=0; i < M; i++) {\n    solver.addEdge(S,i,1);\n  }\n  for (int i=0; i < M; i++) {\n    Point2D mouse=mice[i].point;\n    for (int j=0; j < H; j++) {\n      Point2D hole=holes[j].point;\n      if (mouse.distance(hole) <= radius) {\n        solver.addEdge(i,M + j,1);\n      }\n    }\n  }\n  for (int i=0; i < H; i++) {\n    solver.addEdge(M + i,T,holes[i].capacity);\n  }\n  System.out.println(\"Number of safe mice: \" + solver.getMaxFlow());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void solve(Mouse[] mice,Hole[] holes,int radius){\n  final int M=mice.length;\n  final int H=holes.length;\n  final int N=M + H + 2;\n  final int S=N - 1;\n  final int T=N - 2;\n  NetworkFlowSolverBase solver;\n  solver=new FordFulkersonDfsSolver(N,S,T);\n  for (int i=0; i < M; i++) {\n    solver.addEdge(S,i,1);\n  }\n  for (int i=0; i < M; i++) {\n    Point2D mouse=mice[i].point;\n    for (int j=0; j < H; j++) {\n      Point2D hole=holes[j].point;\n      if (mouse.distance(hole) <= radius) {\n        solver.addEdge(i,M + j,1);\n      }\n    }\n  }\n  for (int i=0; i < H; i++) {\n    solver.addEdge(M + i,T,holes[i].capacity);\n  }\n  System.out.println(\"Number of safe mice: \" + solver.getMaxFlow());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 191,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 30
      },
      "nodeContext" : "final int M=mice.length;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 53,
    "startColumnNumber" : 18,
    "endLineNumber" : 53,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}