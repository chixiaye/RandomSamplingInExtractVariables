{
  "id" : 269,
  "expression" : "isSubtypeOfType(elementType,VIEW_TYPE)",
  "projectName" : "JakeWharton@butterknife",
  "commitID" : "f89fb0f12f5a0c21d95dae234d53f590e1384557",
  "filePath" : "/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isSubtypeOfType(elementType,VIEW_TYPE)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 339,
      "startColumnNumber" : 9,
      "endLineNumber" : 339,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 339,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!isSubtypeOfType(elementType,VIEW_TYPE)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 339,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 343,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n  error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n  hasError=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2281,
        "startLineNumber" : 329,
        "startColumnNumber" : 37,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2408,
        "startLineNumber" : 328,
        "startColumnNumber" : 2,
        "endLineNumber" : 385,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseBindOne(Element element,Map<TypeElement,BindingClass> targetClassMap,Set<String> erasedTargetNames){\n  boolean hasError=false;\n  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();\n  TypeMirror elementType=element.asType();\n  if (elementType.getKind() == TypeKind.TYPEVAR) {\n    TypeVariable typeVariable=(TypeVariable)elementType;\n    elementType=typeVariable.getUpperBound();\n  }\n  if (!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)) {\n    error(element,\"@%s fields must extend from View or be an interface. (%s.%s)\",Bind.class.getSimpleName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  int[] ids=element.getAnnotation(Bind.class).value();\n  if (ids.length != 1) {\n    error(element,\"@%s for a view must only specify one ID. Found: %s. (%s.%s)\",Bind.class.getSimpleName(),Arrays.toString(ids),enclosingElement.getQualifiedName(),element.getSimpleName());\n    hasError=true;\n  }\n  if (hasError) {\n    return;\n  }\n  int id=ids[0];\n  BindingClass bindingClass=targetClassMap.get(enclosingElement);\n  if (bindingClass != null) {\n    ViewBindings viewBindings=bindingClass.getViewBinding(id);\n    if (viewBindings != null) {\n      Iterator<FieldViewBinding> iterator=viewBindings.getFieldBindings().iterator();\n      if (iterator.hasNext()) {\n        FieldViewBinding existingBinding=iterator.next();\n        error(element,\"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)\",Bind.class.getSimpleName(),id,existingBinding.getName(),enclosingElement.getQualifiedName(),element.getSimpleName());\n        return;\n      }\n    }\n  }\n else {\n    bindingClass=getOrCreateTargetClass(targetClassMap,enclosingElement);\n  }\n  String name=element.getSimpleName().toString();\n  TypeName type=TypeName.get(elementType);\n  boolean required=isRequiredBinding(element);\n  FieldViewBinding binding=new FieldViewBinding(name,type,required);\n  bindingClass.addField(id,binding);\n  erasedTargetNames.add(enclosingElement.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 294,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 339,
        "startColumnNumber" : 8,
        "endLineNumber" : 339,
        "endColumnNumber" : 77
      },
      "nodeContext" : "!isSubtypeOfType(elementType,VIEW_TYPE) && !isInterface(elementType)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 339,
    "startColumnNumber" : 9,
    "endLineNumber" : 339,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}