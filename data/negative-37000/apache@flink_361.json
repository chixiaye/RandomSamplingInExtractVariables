{
  "id" : 361,
  "expression" : "1",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/UnionInputGateTest.java",
  "occurrences" : 31,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 72,
      "startColumnNumber" : 22,
      "endLineNumber" : 72,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[1][2].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][2].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][2].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 73,
      "startColumnNumber" : 22,
      "endLineNumber" : 73,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[1][2].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][2].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][2].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 74,
      "startColumnNumber" : 22,
      "endLineNumber" : 74,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][2].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][2].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][2].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 75,
      "startColumnNumber" : 22,
      "endLineNumber" : 75,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[1][0].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][0].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][0].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 76,
      "startColumnNumber" : 22,
      "endLineNumber" : 76,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[1][1].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][1].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][1].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 76,
      "startColumnNumber" : 25,
      "endLineNumber" : 76,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[1][1].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][1].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][1].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 77,
      "startColumnNumber" : 25,
      "endLineNumber" : 77,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[0][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[0][1].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[0][1].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[0][1].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 78,
      "startColumnNumber" : 22,
      "endLineNumber" : 78,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[1][3].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][3].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][3].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 79,
      "startColumnNumber" : 25,
      "endLineNumber" : 79,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[0][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[0][1].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[0][1].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[0][1].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 80,
      "startColumnNumber" : 22,
      "endLineNumber" : 80,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[1][3].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][3].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][3].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 25,
      "endLineNumber" : 81,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[0][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[0][1].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[0][1].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[0][1].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 82,
      "startColumnNumber" : 22,
      "endLineNumber" : 82,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][3].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][3].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][3].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 86,
      "startColumnNumber" : 22,
      "endLineNumber" : 86,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][4]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 40
      },
      "nodeContext" : "inputChannels[1][4].readBuffer()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][4].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 41
      },
      "nodeContext" : "inputChannels[1][4].readBuffer();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 22,
      "endLineNumber" : 87,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][4]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[1][4].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][4].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][4].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 88,
      "startColumnNumber" : 22,
      "endLineNumber" : 88,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[1][1].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][1].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][1].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 88,
      "startColumnNumber" : 25,
      "endLineNumber" : 88,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[1][1].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][1].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][1].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 89,
      "startColumnNumber" : 22,
      "endLineNumber" : 89,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 43
      },
      "nodeContext" : "inputChannels[1][0].readEndOfData()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][0].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 44
      },
      "nodeContext" : "inputChannels[1][0].readEndOfData();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 90,
      "startColumnNumber" : 22,
      "endLineNumber" : 90,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][4]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][4].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][4].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][4].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 91,
      "startColumnNumber" : 22,
      "endLineNumber" : 91,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][1].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][1].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][1].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 91,
      "startColumnNumber" : 25,
      "endLineNumber" : 91,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][1].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][1].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][1].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 92,
      "startColumnNumber" : 22,
      "endLineNumber" : 92,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 24
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 27
      },
      "nodeContext" : "inputChannels[1][0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][0].readEndOfPartitionEvent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][0].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 54
      },
      "nodeContext" : "inputChannels[1][0].readEndOfPartitionEvent();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 95,
      "startColumnNumber" : 51,
      "endLineNumber" : 95,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 95,
        "startColumnNumber" : 34,
        "endLineNumber" : 95,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[0][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig1.notifyChannelNonEmpty(inputChannels[0][1])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 98,
      "startColumnNumber" : 48,
      "endLineNumber" : 98,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 98,
        "startColumnNumber" : 34,
        "endLineNumber" : 98,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 98,
        "startColumnNumber" : 34,
        "endLineNumber" : 98,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][0])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 99,
      "startColumnNumber" : 48,
      "endLineNumber" : 99,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][1])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 99,
      "startColumnNumber" : 51,
      "endLineNumber" : 99,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 99,
        "startColumnNumber" : 34,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][1])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 100,
      "startColumnNumber" : 48,
      "endLineNumber" : 100,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 100,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][2]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][2])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 101,
      "startColumnNumber" : 48,
      "endLineNumber" : 101,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 101,
        "startColumnNumber" : 34,
        "endLineNumber" : 101,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 101,
        "startColumnNumber" : 34,
        "endLineNumber" : 101,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][3]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][3])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 102,
      "startColumnNumber" : 48,
      "endLineNumber" : 102,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 102,
        "startColumnNumber" : 34,
        "endLineNumber" : 102,
        "endColumnNumber" : 50
      },
      "nodeContext" : "inputChannels[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 102,
        "startColumnNumber" : 34,
        "endLineNumber" : 102,
        "endColumnNumber" : 53
      },
      "nodeContext" : "inputChannels[1][4]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 54
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][4])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 55
      },
      "nodeContext" : "ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 106,
      "startColumnNumber" : 41,
      "endLineNumber" : 106,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 49
      },
      "nodeContext" : "verifyBufferOrEvent(union,true,1,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "verifyBufferOrEvent(union,true,1,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "verifyBufferOrEvent(union,true,1,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 112,
      "startColumnNumber" : 42,
      "endLineNumber" : 112,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 50
      },
      "nodeContext" : "verifyBufferOrEvent(union,false,1,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 51
      },
      "nodeContext" : "verifyBufferOrEvent(union,false,1,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 51
      },
      "nodeContext" : "verifyBufferOrEvent(union,false,1,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 118,
      "startColumnNumber" : 42,
      "endLineNumber" : 118,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 50
      },
      "nodeContext" : "verifyBufferOrEvent(union,false,1,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 51
      },
      "nodeContext" : "verifyBufferOrEvent(union,false,1,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4656,
        "startLineNumber" : 52,
        "startColumnNumber" : 57,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 549,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5054,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return value after receiving all end-of-partition events. <p>For buffer-or-event instances, it is important to verify that they have been set off to the correct logical index.\n */\n@Test(timeout=120 * 1000) public void testBasicGetNextLogic() throws Exception {\n  final SingleInputGate ig1=createInputGate(3);\n  final SingleInputGate ig2=createInputGate(5);\n  final UnionInputGate union=new UnionInputGate(new SingleInputGate[]{ig1,ig2});\n  assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(),union.getNumberOfInputChannels());\n  final TestInputChannel[][] inputChannels=new TestInputChannel[][]{TestInputChannel.createInputChannels(ig1,3),TestInputChannel.createInputChannels(ig2,5)};\n  inputChannels[0][0].readBuffer();\n  inputChannels[0][0].readEndOfData();\n  inputChannels[0][0].readEndOfPartitionEvent();\n  inputChannels[1][2].readBuffer();\n  inputChannels[1][2].readEndOfData();\n  inputChannels[1][2].readEndOfPartitionEvent();\n  inputChannels[1][0].readBuffer();\n  inputChannels[1][1].readBuffer();\n  inputChannels[0][1].readBuffer();\n  inputChannels[1][3].readBuffer();\n  inputChannels[0][1].readEndOfData();\n  inputChannels[1][3].readEndOfData();\n  inputChannels[0][1].readEndOfPartitionEvent();\n  inputChannels[1][3].readEndOfPartitionEvent();\n  inputChannels[0][2].readBuffer();\n  inputChannels[0][2].readEndOfData();\n  inputChannels[0][2].readEndOfPartitionEvent();\n  inputChannels[1][4].readBuffer();\n  inputChannels[1][4].readEndOfData();\n  inputChannels[1][1].readEndOfData();\n  inputChannels[1][0].readEndOfData();\n  inputChannels[1][4].readEndOfPartitionEvent();\n  inputChannels[1][1].readEndOfPartitionEvent();\n  inputChannels[1][0].readEndOfPartitionEvent();\n  ig1.notifyChannelNonEmpty(inputChannels[0][0]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][1]);\n  ig1.notifyChannelNonEmpty(inputChannels[0][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][0]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][1]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][2]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][3]);\n  ig2.notifyChannelNonEmpty(inputChannels[1][4]);\n  verifyBufferOrEvent(union,true,0,true);\n  verifyBufferOrEvent(union,true,3,true);\n  verifyBufferOrEvent(union,true,1,true);\n  verifyBufferOrEvent(union,true,4,true);\n  verifyBufferOrEvent(union,true,2,true);\n  verifyBufferOrEvent(union,true,5,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,true,6,true);\n  verifyBufferOrEvent(union,false,1,true);\n  verifyBufferOrEvent(union,true,7,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,0,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,1,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.NOT_END_OF_DATA,union.hasReceivedEndOfData());\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,2,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,true);\n  assertEquals(PullingAsyncDataInput.EndOfDataStatus.DRAINED,union.hasReceivedEndOfData());\n  assertFalse(union.isFinished());\n  verifyBufferOrEvent(union,false,3,true);\n  verifyBufferOrEvent(union,false,4,true);\n  verifyBufferOrEvent(union,false,5,true);\n  verifyBufferOrEvent(union,false,6,true);\n  verifyBufferOrEvent(union,false,7,false);\n  assertTrue(union.isFinished());\n  assertFalse(union.getNext().isPresent());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 51
      },
      "nodeContext" : "verifyBufferOrEvent(union,false,1,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 72,
    "startColumnNumber" : 22,
    "endLineNumber" : 72,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 73,
    "startColumnNumber" : 22,
    "endLineNumber" : 73,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 74,
    "startColumnNumber" : 22,
    "endLineNumber" : 74,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 75,
    "startColumnNumber" : 22,
    "endLineNumber" : 75,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 76,
    "startColumnNumber" : 22,
    "endLineNumber" : 76,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 76,
    "startColumnNumber" : 25,
    "endLineNumber" : 76,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 77,
    "startColumnNumber" : 25,
    "endLineNumber" : 77,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 78,
    "startColumnNumber" : 22,
    "endLineNumber" : 78,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 79,
    "startColumnNumber" : 25,
    "endLineNumber" : 79,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 80,
    "startColumnNumber" : 22,
    "endLineNumber" : 80,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 25,
    "endLineNumber" : 81,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 82,
    "startColumnNumber" : 22,
    "endLineNumber" : 82,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 86,
    "startColumnNumber" : 22,
    "endLineNumber" : 86,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 22,
    "endLineNumber" : 87,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 88,
    "startColumnNumber" : 22,
    "endLineNumber" : 88,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 88,
    "startColumnNumber" : 25,
    "endLineNumber" : 88,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 89,
    "startColumnNumber" : 22,
    "endLineNumber" : 89,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 90,
    "startColumnNumber" : 22,
    "endLineNumber" : 90,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 91,
    "startColumnNumber" : 22,
    "endLineNumber" : 91,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 91,
    "startColumnNumber" : 25,
    "endLineNumber" : 91,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 92,
    "startColumnNumber" : 22,
    "endLineNumber" : 92,
    "endColumnNumber" : 23
  }, {
    "charLength" : 1,
    "startLineNumber" : 95,
    "startColumnNumber" : 51,
    "endLineNumber" : 95,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 98,
    "startColumnNumber" : 48,
    "endLineNumber" : 98,
    "endColumnNumber" : 49
  }, {
    "charLength" : 1,
    "startLineNumber" : 99,
    "startColumnNumber" : 48,
    "endLineNumber" : 99,
    "endColumnNumber" : 49
  }, {
    "charLength" : 1,
    "startLineNumber" : 99,
    "startColumnNumber" : 51,
    "endLineNumber" : 99,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 100,
    "startColumnNumber" : 48,
    "endLineNumber" : 100,
    "endColumnNumber" : 49
  }, {
    "charLength" : 1,
    "startLineNumber" : 101,
    "startColumnNumber" : 48,
    "endLineNumber" : 101,
    "endColumnNumber" : 49
  }, {
    "charLength" : 1,
    "startLineNumber" : 102,
    "startColumnNumber" : 48,
    "endLineNumber" : 102,
    "endColumnNumber" : 49
  }, {
    "charLength" : 1,
    "startLineNumber" : 106,
    "startColumnNumber" : 41,
    "endLineNumber" : 106,
    "endColumnNumber" : 42
  }, {
    "charLength" : 1,
    "startLineNumber" : 112,
    "startColumnNumber" : 42,
    "endLineNumber" : 112,
    "endColumnNumber" : 43
  }, {
    "charLength" : 1,
    "startLineNumber" : 118,
    "startColumnNumber" : 42,
    "endLineNumber" : 118,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 1
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 0
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 0
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 1
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 0
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 2
  } ]
}