{
  "id" : 251,
  "expression" : "\"<body>\"",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/http/websocketx/benchmarkserver/WebSocketServerBenchmarkPage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"<body>\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 32,
      "startColumnNumber" : 16,
      "endLineNumber" : 32,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9903,
        "startLineNumber" : 31,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 35
      },
      "nodeContext" : "\"<html><head><title>Web Socket Performance Test</title></head>\" + NEWLINE + \"<body>\"+ NEWLINE+ \"<h2>WebSocket Performance Test</h2>\"+ NEWLINE+ \"<label>Connection Status:</label>\"+ NEWLINE+ \"<label id=\\\"connectionLabel\\\"></label><br />\"+ NEWLINE+ \"<form onsubmit=\\\"return false;\\\">\"+ NEWLINE+ \"Message size:\"+ \"<input type=\\\"text\\\" id=\\\"messageSize\\\" value=\\\"1024\\\"/><br>\"+ NEWLINE+ \"Number of messages:\"+ \"<input type=\\\"text\\\" id=\\\"nrMessages\\\" value=\\\"100000\\\"/><br>\"+ NEWLINE+ \"Data Type:\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeText\\\" value=\\\"text\\\" checked>text\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeBinary\\\" value=\\\"binary\\\">binary<br>\"+ NEWLINE+ \"Mode:<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeSingle\\\" value=\\\"single\\\" checked>\"+ \"Wait for response after each messages<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeAll\\\" value=\\\"all\\\">\"+ \"Send all messages and then wait for all responses<br>\"+ NEWLINE+ \"<input type=\\\"checkbox\\\" id=\\\"verifiyResponses\\\">Verify responded messages<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Start Benchmark\\\"\"+ NEWLINE+ \"       onclick=\\\"startBenchmark()\\\" />\"+ NEWLINE+ \"<h3>Output</h3>\"+ NEWLINE+ \"<textarea id=\\\"output\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\"+ NEWLINE+ \"<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"clearText()\\\">\"+ NEWLINE+ \"</form>\"+ NEWLINE+ \"<script type=\\\"text/javascript\\\">\"+ NEWLINE+ \"var benchRunning = false;\"+ NEWLINE+ \"var messageSize = 0;\"+ NEWLINE+ \"var totalMessages = 0;\"+ NEWLINE+ \"var rcvdMessages = 0;\"+ NEWLINE+ \"var isBinary = true;\"+ NEWLINE+ \"var isSingle = true;\"+ NEWLINE+ \"var verifiyResponses = false;\"+ NEWLINE+ \"var benchData = null;\"+ NEWLINE+ \"var startTime;\"+ NEWLINE+ \"var endTime;\"+ NEWLINE+ \"var socket;\"+ NEWLINE+ \"var output = document.getElementById('output');\"+ NEWLINE+ \"var connectionLabel = document.getElementById('connectionLabel');\"+ NEWLINE+ \"if (!window.WebSocket) {\"+ NEWLINE+ \"  window.WebSocket = window.MozWebSocket;\"+ NEWLINE+ '}'+ NEWLINE+ \"if (window.WebSocket) {\"+ NEWLINE+ \"  socket = new WebSocket(\\\"\"+ webSocketLocation+ \"\\\");\"+ NEWLINE+ \"  socket.binaryType = 'arraybuffer';\"+ NEWLINE+ \"  socket.onmessage = function(event) {\"+ NEWLINE+ \"    if (verifiyResponses) {\"+ NEWLINE+ \"        if (isBinary) {\"+ NEWLINE+ \"            if (!(event.data instanceof ArrayBuffer) || \"+ NEWLINE+ \"                  event.data.byteLength != benchData.byteLength) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            } else {\"+ NEWLINE+ \"                var v = new Uint8Array(event.data);\"+ NEWLINE+ \"                for (var j = 0; j < benchData.byteLength; j++) {\"+ NEWLINE+ \"                    if (v[j] != benchData[j]) {\"+ NEWLINE+ \"                        onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                        return;\"+ NEWLINE+ \"                    }\"+ NEWLINE+ \"                }\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        } else {\"+ NEWLINE+ \"            if (event.data != benchData) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"    rcvdMessages++;\"+ NEWLINE+ \"    if (rcvdMessages == totalMessages) {\"+ NEWLINE+ \"        onFinished();\"+ NEWLINE+ \"    } else if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onopen = function(event) {\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Connected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onclose = function(event) {\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Disconnected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"} else {\"+ NEWLINE+ \"  alert(\\\"Your browser does not support Web Socket.\\\");\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onInvalidResponse(sent,recvd) {\"+ NEWLINE+ \"    socket.close();\"+ NEWLINE+ \"    alert(\\\"Error: Sent data did not match the received data!\\\");\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function clearText() {\"+ NEWLINE+ \"    output.value=\\\"\\\";\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function createBenchData() {\"+ NEWLINE+ \"    if (isBinary) {\"+ NEWLINE+ \"        benchData = new Uint8Array(messageSize);\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData[i] += Math.floor(Math.random() * 255);\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    } else { \"+ NEWLINE+ \"        benchData = \\\"\\\";\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData += String.fromCharCode(Math.floor(Math.random() * (123 - 65) + 65));\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function startBenchmark(message) {\"+ NEWLINE+ \"  if (!window.WebSocket || benchRunning) { return; }\"+ NEWLINE+ \"  if (socket.readyState == WebSocket.OPEN) {\"+ NEWLINE+ \"    isBinary = document.getElementById('typeBinary').checked;\"+ NEWLINE+ \"    isSingle = document.getElementById('modeSingle').checked;\"+ NEWLINE+ \"    verifiyResponses = document.getElementById('verifiyResponses').checked;\"+ NEWLINE+ \"    messageSize = parseInt(document.getElementById('messageSize').value);\"+ NEWLINE+ \"    totalMessages = parseInt(document.getElementById('nrMessages').value);\"+ NEWLINE+ \"    if (isNaN(messageSize) || isNaN(totalMessages)) return;\"+ NEWLINE+ \"    createBenchData();\"+ NEWLINE+ \"    output.value = output.value + '\\\\nStarting Benchmark';\"+ NEWLINE+ \"    rcvdMessages = 0;\"+ NEWLINE+ \"    benchRunning = true;\"+ NEWLINE+ \"    startTime = new Date();\"+ NEWLINE+ \"    if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    } else {\"+ NEWLINE+ \"        for (var i = 0; i < totalMessages; i++) socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  } else {\"+ NEWLINE+ \"    alert(\\\"The socket is not open.\\\");\"+ NEWLINE+ \"  }\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onFinished() {\"+ NEWLINE+ \"    endTime = new Date();\"+ NEWLINE+ \"    var duration = (endTime - startTime) / 1000.0;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nTest took: ' + duration + 's';\"+ NEWLINE+ \"    var messagesPerS = totalMessages / duration;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nPerformance: ' + messagesPerS + ' Messages/s';\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nRound trip: ' + 1000.0/messagesPerS + 'ms';\"+ NEWLINE+ \"    var throughput = messageSize * totalMessages / duration;\"+ NEWLINE+ \"    var throughputText;\"+ NEWLINE+ \"    if (isBinary) throughputText = throughput / (1024*1024) + ' MB/s';\"+ NEWLINE+ \"    else throughputText = throughput / (1000*1000) + ' MChars/s';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nThroughput: ' + throughputText;\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"}\"+ NEWLINE+ \"</script>\"+ NEWLINE+ \"</body>\"+ NEWLINE+ \"</html>\"+ NEWLINE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 298,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 9966,
        "startLineNumber" : 30,
        "startColumnNumber" : 15,
        "endLineNumber" : 185,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Unpooled.copiedBuffer(\"<html><head><title>Web Socket Performance Test</title></head>\" + NEWLINE + \"<body>\"+ NEWLINE+ \"<h2>WebSocket Performance Test</h2>\"+ NEWLINE+ \"<label>Connection Status:</label>\"+ NEWLINE+ \"<label id=\\\"connectionLabel\\\"></label><br />\"+ NEWLINE+ \"<form onsubmit=\\\"return false;\\\">\"+ NEWLINE+ \"Message size:\"+ \"<input type=\\\"text\\\" id=\\\"messageSize\\\" value=\\\"1024\\\"/><br>\"+ NEWLINE+ \"Number of messages:\"+ \"<input type=\\\"text\\\" id=\\\"nrMessages\\\" value=\\\"100000\\\"/><br>\"+ NEWLINE+ \"Data Type:\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeText\\\" value=\\\"text\\\" checked>text\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeBinary\\\" value=\\\"binary\\\">binary<br>\"+ NEWLINE+ \"Mode:<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeSingle\\\" value=\\\"single\\\" checked>\"+ \"Wait for response after each messages<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeAll\\\" value=\\\"all\\\">\"+ \"Send all messages and then wait for all responses<br>\"+ NEWLINE+ \"<input type=\\\"checkbox\\\" id=\\\"verifiyResponses\\\">Verify responded messages<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Start Benchmark\\\"\"+ NEWLINE+ \"       onclick=\\\"startBenchmark()\\\" />\"+ NEWLINE+ \"<h3>Output</h3>\"+ NEWLINE+ \"<textarea id=\\\"output\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\"+ NEWLINE+ \"<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"clearText()\\\">\"+ NEWLINE+ \"</form>\"+ NEWLINE+ \"<script type=\\\"text/javascript\\\">\"+ NEWLINE+ \"var benchRunning = false;\"+ NEWLINE+ \"var messageSize = 0;\"+ NEWLINE+ \"var totalMessages = 0;\"+ NEWLINE+ \"var rcvdMessages = 0;\"+ NEWLINE+ \"var isBinary = true;\"+ NEWLINE+ \"var isSingle = true;\"+ NEWLINE+ \"var verifiyResponses = false;\"+ NEWLINE+ \"var benchData = null;\"+ NEWLINE+ \"var startTime;\"+ NEWLINE+ \"var endTime;\"+ NEWLINE+ \"var socket;\"+ NEWLINE+ \"var output = document.getElementById('output');\"+ NEWLINE+ \"var connectionLabel = document.getElementById('connectionLabel');\"+ NEWLINE+ \"if (!window.WebSocket) {\"+ NEWLINE+ \"  window.WebSocket = window.MozWebSocket;\"+ NEWLINE+ '}'+ NEWLINE+ \"if (window.WebSocket) {\"+ NEWLINE+ \"  socket = new WebSocket(\\\"\"+ webSocketLocation+ \"\\\");\"+ NEWLINE+ \"  socket.binaryType = 'arraybuffer';\"+ NEWLINE+ \"  socket.onmessage = function(event) {\"+ NEWLINE+ \"    if (verifiyResponses) {\"+ NEWLINE+ \"        if (isBinary) {\"+ NEWLINE+ \"            if (!(event.data instanceof ArrayBuffer) || \"+ NEWLINE+ \"                  event.data.byteLength != benchData.byteLength) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            } else {\"+ NEWLINE+ \"                var v = new Uint8Array(event.data);\"+ NEWLINE+ \"                for (var j = 0; j < benchData.byteLength; j++) {\"+ NEWLINE+ \"                    if (v[j] != benchData[j]) {\"+ NEWLINE+ \"                        onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                        return;\"+ NEWLINE+ \"                    }\"+ NEWLINE+ \"                }\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        } else {\"+ NEWLINE+ \"            if (event.data != benchData) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"    rcvdMessages++;\"+ NEWLINE+ \"    if (rcvdMessages == totalMessages) {\"+ NEWLINE+ \"        onFinished();\"+ NEWLINE+ \"    } else if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onopen = function(event) {\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Connected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onclose = function(event) {\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Disconnected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"} else {\"+ NEWLINE+ \"  alert(\\\"Your browser does not support Web Socket.\\\");\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onInvalidResponse(sent,recvd) {\"+ NEWLINE+ \"    socket.close();\"+ NEWLINE+ \"    alert(\\\"Error: Sent data did not match the received data!\\\");\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function clearText() {\"+ NEWLINE+ \"    output.value=\\\"\\\";\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function createBenchData() {\"+ NEWLINE+ \"    if (isBinary) {\"+ NEWLINE+ \"        benchData = new Uint8Array(messageSize);\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData[i] += Math.floor(Math.random() * 255);\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    } else { \"+ NEWLINE+ \"        benchData = \\\"\\\";\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData += String.fromCharCode(Math.floor(Math.random() * (123 - 65) + 65));\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function startBenchmark(message) {\"+ NEWLINE+ \"  if (!window.WebSocket || benchRunning) { return; }\"+ NEWLINE+ \"  if (socket.readyState == WebSocket.OPEN) {\"+ NEWLINE+ \"    isBinary = document.getElementById('typeBinary').checked;\"+ NEWLINE+ \"    isSingle = document.getElementById('modeSingle').checked;\"+ NEWLINE+ \"    verifiyResponses = document.getElementById('verifiyResponses').checked;\"+ NEWLINE+ \"    messageSize = parseInt(document.getElementById('messageSize').value);\"+ NEWLINE+ \"    totalMessages = parseInt(document.getElementById('nrMessages').value);\"+ NEWLINE+ \"    if (isNaN(messageSize) || isNaN(totalMessages)) return;\"+ NEWLINE+ \"    createBenchData();\"+ NEWLINE+ \"    output.value = output.value + '\\\\nStarting Benchmark';\"+ NEWLINE+ \"    rcvdMessages = 0;\"+ NEWLINE+ \"    benchRunning = true;\"+ NEWLINE+ \"    startTime = new Date();\"+ NEWLINE+ \"    if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    } else {\"+ NEWLINE+ \"        for (var i = 0; i < totalMessages; i++) socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  } else {\"+ NEWLINE+ \"    alert(\\\"The socket is not open.\\\");\"+ NEWLINE+ \"  }\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onFinished() {\"+ NEWLINE+ \"    endTime = new Date();\"+ NEWLINE+ \"    var duration = (endTime - startTime) / 1000.0;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nTest took: ' + duration + 's';\"+ NEWLINE+ \"    var messagesPerS = totalMessages / duration;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nPerformance: ' + messagesPerS + ' Messages/s';\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nRound trip: ' + 1000.0/messagesPerS + 'ms';\"+ NEWLINE+ \"    var throughput = messageSize * totalMessages / duration;\"+ NEWLINE+ \"    var throughputText;\"+ NEWLINE+ \"    if (isBinary) throughputText = throughput / (1024*1024) + ' MB/s';\"+ NEWLINE+ \"    else throughputText = throughput / (1000*1000) + ' MChars/s';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nThroughput: ' + throughputText;\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"}\"+ NEWLINE+ \"</script>\"+ NEWLINE+ \"</body>\"+ NEWLINE+ \"</html>\"+ NEWLINE,CharsetUtil.US_ASCII)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 304,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9974,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 59
      },
      "nodeContext" : "return Unpooled.copiedBuffer(\"<html><head><title>Web Socket Performance Test</title></head>\" + NEWLINE + \"<body>\"+ NEWLINE+ \"<h2>WebSocket Performance Test</h2>\"+ NEWLINE+ \"<label>Connection Status:</label>\"+ NEWLINE+ \"<label id=\\\"connectionLabel\\\"></label><br />\"+ NEWLINE+ \"<form onsubmit=\\\"return false;\\\">\"+ NEWLINE+ \"Message size:\"+ \"<input type=\\\"text\\\" id=\\\"messageSize\\\" value=\\\"1024\\\"/><br>\"+ NEWLINE+ \"Number of messages:\"+ \"<input type=\\\"text\\\" id=\\\"nrMessages\\\" value=\\\"100000\\\"/><br>\"+ NEWLINE+ \"Data Type:\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeText\\\" value=\\\"text\\\" checked>text\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeBinary\\\" value=\\\"binary\\\">binary<br>\"+ NEWLINE+ \"Mode:<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeSingle\\\" value=\\\"single\\\" checked>\"+ \"Wait for response after each messages<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeAll\\\" value=\\\"all\\\">\"+ \"Send all messages and then wait for all responses<br>\"+ NEWLINE+ \"<input type=\\\"checkbox\\\" id=\\\"verifiyResponses\\\">Verify responded messages<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Start Benchmark\\\"\"+ NEWLINE+ \"       onclick=\\\"startBenchmark()\\\" />\"+ NEWLINE+ \"<h3>Output</h3>\"+ NEWLINE+ \"<textarea id=\\\"output\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\"+ NEWLINE+ \"<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"clearText()\\\">\"+ NEWLINE+ \"</form>\"+ NEWLINE+ \"<script type=\\\"text/javascript\\\">\"+ NEWLINE+ \"var benchRunning = false;\"+ NEWLINE+ \"var messageSize = 0;\"+ NEWLINE+ \"var totalMessages = 0;\"+ NEWLINE+ \"var rcvdMessages = 0;\"+ NEWLINE+ \"var isBinary = true;\"+ NEWLINE+ \"var isSingle = true;\"+ NEWLINE+ \"var verifiyResponses = false;\"+ NEWLINE+ \"var benchData = null;\"+ NEWLINE+ \"var startTime;\"+ NEWLINE+ \"var endTime;\"+ NEWLINE+ \"var socket;\"+ NEWLINE+ \"var output = document.getElementById('output');\"+ NEWLINE+ \"var connectionLabel = document.getElementById('connectionLabel');\"+ NEWLINE+ \"if (!window.WebSocket) {\"+ NEWLINE+ \"  window.WebSocket = window.MozWebSocket;\"+ NEWLINE+ '}'+ NEWLINE+ \"if (window.WebSocket) {\"+ NEWLINE+ \"  socket = new WebSocket(\\\"\"+ webSocketLocation+ \"\\\");\"+ NEWLINE+ \"  socket.binaryType = 'arraybuffer';\"+ NEWLINE+ \"  socket.onmessage = function(event) {\"+ NEWLINE+ \"    if (verifiyResponses) {\"+ NEWLINE+ \"        if (isBinary) {\"+ NEWLINE+ \"            if (!(event.data instanceof ArrayBuffer) || \"+ NEWLINE+ \"                  event.data.byteLength != benchData.byteLength) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            } else {\"+ NEWLINE+ \"                var v = new Uint8Array(event.data);\"+ NEWLINE+ \"                for (var j = 0; j < benchData.byteLength; j++) {\"+ NEWLINE+ \"                    if (v[j] != benchData[j]) {\"+ NEWLINE+ \"                        onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                        return;\"+ NEWLINE+ \"                    }\"+ NEWLINE+ \"                }\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        } else {\"+ NEWLINE+ \"            if (event.data != benchData) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"    rcvdMessages++;\"+ NEWLINE+ \"    if (rcvdMessages == totalMessages) {\"+ NEWLINE+ \"        onFinished();\"+ NEWLINE+ \"    } else if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onopen = function(event) {\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Connected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onclose = function(event) {\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Disconnected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"} else {\"+ NEWLINE+ \"  alert(\\\"Your browser does not support Web Socket.\\\");\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onInvalidResponse(sent,recvd) {\"+ NEWLINE+ \"    socket.close();\"+ NEWLINE+ \"    alert(\\\"Error: Sent data did not match the received data!\\\");\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function clearText() {\"+ NEWLINE+ \"    output.value=\\\"\\\";\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function createBenchData() {\"+ NEWLINE+ \"    if (isBinary) {\"+ NEWLINE+ \"        benchData = new Uint8Array(messageSize);\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData[i] += Math.floor(Math.random() * 255);\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    } else { \"+ NEWLINE+ \"        benchData = \\\"\\\";\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData += String.fromCharCode(Math.floor(Math.random() * (123 - 65) + 65));\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function startBenchmark(message) {\"+ NEWLINE+ \"  if (!window.WebSocket || benchRunning) { return; }\"+ NEWLINE+ \"  if (socket.readyState == WebSocket.OPEN) {\"+ NEWLINE+ \"    isBinary = document.getElementById('typeBinary').checked;\"+ NEWLINE+ \"    isSingle = document.getElementById('modeSingle').checked;\"+ NEWLINE+ \"    verifiyResponses = document.getElementById('verifiyResponses').checked;\"+ NEWLINE+ \"    messageSize = parseInt(document.getElementById('messageSize').value);\"+ NEWLINE+ \"    totalMessages = parseInt(document.getElementById('nrMessages').value);\"+ NEWLINE+ \"    if (isNaN(messageSize) || isNaN(totalMessages)) return;\"+ NEWLINE+ \"    createBenchData();\"+ NEWLINE+ \"    output.value = output.value + '\\\\nStarting Benchmark';\"+ NEWLINE+ \"    rcvdMessages = 0;\"+ NEWLINE+ \"    benchRunning = true;\"+ NEWLINE+ \"    startTime = new Date();\"+ NEWLINE+ \"    if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    } else {\"+ NEWLINE+ \"        for (var i = 0; i < totalMessages; i++) socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  } else {\"+ NEWLINE+ \"    alert(\\\"The socket is not open.\\\");\"+ NEWLINE+ \"  }\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onFinished() {\"+ NEWLINE+ \"    endTime = new Date();\"+ NEWLINE+ \"    var duration = (endTime - startTime) / 1000.0;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nTest took: ' + duration + 's';\"+ NEWLINE+ \"    var messagesPerS = totalMessages / duration;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nPerformance: ' + messagesPerS + ' Messages/s';\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nRound trip: ' + 1000.0/messagesPerS + 'ms';\"+ NEWLINE+ \"    var throughput = messageSize * totalMessages / duration;\"+ NEWLINE+ \"    var throughputText;\"+ NEWLINE+ \"    if (isBinary) throughputText = throughput / (1024*1024) + ' MB/s';\"+ NEWLINE+ \"    else throughputText = throughput / (1000*1000) + ' MChars/s';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nThroughput: ' + throughputText;\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"}\"+ NEWLINE+ \"</script>\"+ NEWLINE+ \"</body>\"+ NEWLINE+ \"</html>\"+ NEWLINE,CharsetUtil.US_ASCII);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 305,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9992,
        "startLineNumber" : 29,
        "startColumnNumber" : 63,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return Unpooled.copiedBuffer(\"<html><head><title>Web Socket Performance Test</title></head>\" + NEWLINE + \"<body>\"+ NEWLINE+ \"<h2>WebSocket Performance Test</h2>\"+ NEWLINE+ \"<label>Connection Status:</label>\"+ NEWLINE+ \"<label id=\\\"connectionLabel\\\"></label><br />\"+ NEWLINE+ \"<form onsubmit=\\\"return false;\\\">\"+ NEWLINE+ \"Message size:\"+ \"<input type=\\\"text\\\" id=\\\"messageSize\\\" value=\\\"1024\\\"/><br>\"+ NEWLINE+ \"Number of messages:\"+ \"<input type=\\\"text\\\" id=\\\"nrMessages\\\" value=\\\"100000\\\"/><br>\"+ NEWLINE+ \"Data Type:\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeText\\\" value=\\\"text\\\" checked>text\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeBinary\\\" value=\\\"binary\\\">binary<br>\"+ NEWLINE+ \"Mode:<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeSingle\\\" value=\\\"single\\\" checked>\"+ \"Wait for response after each messages<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeAll\\\" value=\\\"all\\\">\"+ \"Send all messages and then wait for all responses<br>\"+ NEWLINE+ \"<input type=\\\"checkbox\\\" id=\\\"verifiyResponses\\\">Verify responded messages<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Start Benchmark\\\"\"+ NEWLINE+ \"       onclick=\\\"startBenchmark()\\\" />\"+ NEWLINE+ \"<h3>Output</h3>\"+ NEWLINE+ \"<textarea id=\\\"output\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\"+ NEWLINE+ \"<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"clearText()\\\">\"+ NEWLINE+ \"</form>\"+ NEWLINE+ \"<script type=\\\"text/javascript\\\">\"+ NEWLINE+ \"var benchRunning = false;\"+ NEWLINE+ \"var messageSize = 0;\"+ NEWLINE+ \"var totalMessages = 0;\"+ NEWLINE+ \"var rcvdMessages = 0;\"+ NEWLINE+ \"var isBinary = true;\"+ NEWLINE+ \"var isSingle = true;\"+ NEWLINE+ \"var verifiyResponses = false;\"+ NEWLINE+ \"var benchData = null;\"+ NEWLINE+ \"var startTime;\"+ NEWLINE+ \"var endTime;\"+ NEWLINE+ \"var socket;\"+ NEWLINE+ \"var output = document.getElementById('output');\"+ NEWLINE+ \"var connectionLabel = document.getElementById('connectionLabel');\"+ NEWLINE+ \"if (!window.WebSocket) {\"+ NEWLINE+ \"  window.WebSocket = window.MozWebSocket;\"+ NEWLINE+ '}'+ NEWLINE+ \"if (window.WebSocket) {\"+ NEWLINE+ \"  socket = new WebSocket(\\\"\"+ webSocketLocation+ \"\\\");\"+ NEWLINE+ \"  socket.binaryType = 'arraybuffer';\"+ NEWLINE+ \"  socket.onmessage = function(event) {\"+ NEWLINE+ \"    if (verifiyResponses) {\"+ NEWLINE+ \"        if (isBinary) {\"+ NEWLINE+ \"            if (!(event.data instanceof ArrayBuffer) || \"+ NEWLINE+ \"                  event.data.byteLength != benchData.byteLength) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            } else {\"+ NEWLINE+ \"                var v = new Uint8Array(event.data);\"+ NEWLINE+ \"                for (var j = 0; j < benchData.byteLength; j++) {\"+ NEWLINE+ \"                    if (v[j] != benchData[j]) {\"+ NEWLINE+ \"                        onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                        return;\"+ NEWLINE+ \"                    }\"+ NEWLINE+ \"                }\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        } else {\"+ NEWLINE+ \"            if (event.data != benchData) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"    rcvdMessages++;\"+ NEWLINE+ \"    if (rcvdMessages == totalMessages) {\"+ NEWLINE+ \"        onFinished();\"+ NEWLINE+ \"    } else if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onopen = function(event) {\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Connected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onclose = function(event) {\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Disconnected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"} else {\"+ NEWLINE+ \"  alert(\\\"Your browser does not support Web Socket.\\\");\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onInvalidResponse(sent,recvd) {\"+ NEWLINE+ \"    socket.close();\"+ NEWLINE+ \"    alert(\\\"Error: Sent data did not match the received data!\\\");\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function clearText() {\"+ NEWLINE+ \"    output.value=\\\"\\\";\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function createBenchData() {\"+ NEWLINE+ \"    if (isBinary) {\"+ NEWLINE+ \"        benchData = new Uint8Array(messageSize);\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData[i] += Math.floor(Math.random() * 255);\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    } else { \"+ NEWLINE+ \"        benchData = \\\"\\\";\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData += String.fromCharCode(Math.floor(Math.random() * (123 - 65) + 65));\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function startBenchmark(message) {\"+ NEWLINE+ \"  if (!window.WebSocket || benchRunning) { return; }\"+ NEWLINE+ \"  if (socket.readyState == WebSocket.OPEN) {\"+ NEWLINE+ \"    isBinary = document.getElementById('typeBinary').checked;\"+ NEWLINE+ \"    isSingle = document.getElementById('modeSingle').checked;\"+ NEWLINE+ \"    verifiyResponses = document.getElementById('verifiyResponses').checked;\"+ NEWLINE+ \"    messageSize = parseInt(document.getElementById('messageSize').value);\"+ NEWLINE+ \"    totalMessages = parseInt(document.getElementById('nrMessages').value);\"+ NEWLINE+ \"    if (isNaN(messageSize) || isNaN(totalMessages)) return;\"+ NEWLINE+ \"    createBenchData();\"+ NEWLINE+ \"    output.value = output.value + '\\\\nStarting Benchmark';\"+ NEWLINE+ \"    rcvdMessages = 0;\"+ NEWLINE+ \"    benchRunning = true;\"+ NEWLINE+ \"    startTime = new Date();\"+ NEWLINE+ \"    if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    } else {\"+ NEWLINE+ \"        for (var i = 0; i < totalMessages; i++) socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  } else {\"+ NEWLINE+ \"    alert(\\\"The socket is not open.\\\");\"+ NEWLINE+ \"  }\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onFinished() {\"+ NEWLINE+ \"    endTime = new Date();\"+ NEWLINE+ \"    var duration = (endTime - startTime) / 1000.0;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nTest took: ' + duration + 's';\"+ NEWLINE+ \"    var messagesPerS = totalMessages / duration;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nPerformance: ' + messagesPerS + ' Messages/s';\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nRound trip: ' + 1000.0/messagesPerS + 'ms';\"+ NEWLINE+ \"    var throughput = messageSize * totalMessages / duration;\"+ NEWLINE+ \"    var throughputText;\"+ NEWLINE+ \"    if (isBinary) throughputText = throughput / (1024*1024) + ' MB/s';\"+ NEWLINE+ \"    else throughputText = throughput / (1000*1000) + ' MChars/s';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nThroughput: ' + throughputText;\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"}\"+ NEWLINE+ \"</script>\"+ NEWLINE+ \"</body>\"+ NEWLINE+ \"</html>\"+ NEWLINE,CharsetUtil.US_ASCII);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10051,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static ByteBuf getContent(String webSocketLocation){\n  return Unpooled.copiedBuffer(\"<html><head><title>Web Socket Performance Test</title></head>\" + NEWLINE + \"<body>\"+ NEWLINE+ \"<h2>WebSocket Performance Test</h2>\"+ NEWLINE+ \"<label>Connection Status:</label>\"+ NEWLINE+ \"<label id=\\\"connectionLabel\\\"></label><br />\"+ NEWLINE+ \"<form onsubmit=\\\"return false;\\\">\"+ NEWLINE+ \"Message size:\"+ \"<input type=\\\"text\\\" id=\\\"messageSize\\\" value=\\\"1024\\\"/><br>\"+ NEWLINE+ \"Number of messages:\"+ \"<input type=\\\"text\\\" id=\\\"nrMessages\\\" value=\\\"100000\\\"/><br>\"+ NEWLINE+ \"Data Type:\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeText\\\" value=\\\"text\\\" checked>text\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeBinary\\\" value=\\\"binary\\\">binary<br>\"+ NEWLINE+ \"Mode:<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeSingle\\\" value=\\\"single\\\" checked>\"+ \"Wait for response after each messages<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeAll\\\" value=\\\"all\\\">\"+ \"Send all messages and then wait for all responses<br>\"+ NEWLINE+ \"<input type=\\\"checkbox\\\" id=\\\"verifiyResponses\\\">Verify responded messages<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Start Benchmark\\\"\"+ NEWLINE+ \"       onclick=\\\"startBenchmark()\\\" />\"+ NEWLINE+ \"<h3>Output</h3>\"+ NEWLINE+ \"<textarea id=\\\"output\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\"+ NEWLINE+ \"<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"clearText()\\\">\"+ NEWLINE+ \"</form>\"+ NEWLINE+ \"<script type=\\\"text/javascript\\\">\"+ NEWLINE+ \"var benchRunning = false;\"+ NEWLINE+ \"var messageSize = 0;\"+ NEWLINE+ \"var totalMessages = 0;\"+ NEWLINE+ \"var rcvdMessages = 0;\"+ NEWLINE+ \"var isBinary = true;\"+ NEWLINE+ \"var isSingle = true;\"+ NEWLINE+ \"var verifiyResponses = false;\"+ NEWLINE+ \"var benchData = null;\"+ NEWLINE+ \"var startTime;\"+ NEWLINE+ \"var endTime;\"+ NEWLINE+ \"var socket;\"+ NEWLINE+ \"var output = document.getElementById('output');\"+ NEWLINE+ \"var connectionLabel = document.getElementById('connectionLabel');\"+ NEWLINE+ \"if (!window.WebSocket) {\"+ NEWLINE+ \"  window.WebSocket = window.MozWebSocket;\"+ NEWLINE+ '}'+ NEWLINE+ \"if (window.WebSocket) {\"+ NEWLINE+ \"  socket = new WebSocket(\\\"\"+ webSocketLocation+ \"\\\");\"+ NEWLINE+ \"  socket.binaryType = 'arraybuffer';\"+ NEWLINE+ \"  socket.onmessage = function(event) {\"+ NEWLINE+ \"    if (verifiyResponses) {\"+ NEWLINE+ \"        if (isBinary) {\"+ NEWLINE+ \"            if (!(event.data instanceof ArrayBuffer) || \"+ NEWLINE+ \"                  event.data.byteLength != benchData.byteLength) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            } else {\"+ NEWLINE+ \"                var v = new Uint8Array(event.data);\"+ NEWLINE+ \"                for (var j = 0; j < benchData.byteLength; j++) {\"+ NEWLINE+ \"                    if (v[j] != benchData[j]) {\"+ NEWLINE+ \"                        onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                        return;\"+ NEWLINE+ \"                    }\"+ NEWLINE+ \"                }\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        } else {\"+ NEWLINE+ \"            if (event.data != benchData) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"    rcvdMessages++;\"+ NEWLINE+ \"    if (rcvdMessages == totalMessages) {\"+ NEWLINE+ \"        onFinished();\"+ NEWLINE+ \"    } else if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onopen = function(event) {\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Connected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onclose = function(event) {\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Disconnected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"} else {\"+ NEWLINE+ \"  alert(\\\"Your browser does not support Web Socket.\\\");\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onInvalidResponse(sent,recvd) {\"+ NEWLINE+ \"    socket.close();\"+ NEWLINE+ \"    alert(\\\"Error: Sent data did not match the received data!\\\");\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function clearText() {\"+ NEWLINE+ \"    output.value=\\\"\\\";\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function createBenchData() {\"+ NEWLINE+ \"    if (isBinary) {\"+ NEWLINE+ \"        benchData = new Uint8Array(messageSize);\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData[i] += Math.floor(Math.random() * 255);\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    } else { \"+ NEWLINE+ \"        benchData = \\\"\\\";\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData += String.fromCharCode(Math.floor(Math.random() * (123 - 65) + 65));\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function startBenchmark(message) {\"+ NEWLINE+ \"  if (!window.WebSocket || benchRunning) { return; }\"+ NEWLINE+ \"  if (socket.readyState == WebSocket.OPEN) {\"+ NEWLINE+ \"    isBinary = document.getElementById('typeBinary').checked;\"+ NEWLINE+ \"    isSingle = document.getElementById('modeSingle').checked;\"+ NEWLINE+ \"    verifiyResponses = document.getElementById('verifiyResponses').checked;\"+ NEWLINE+ \"    messageSize = parseInt(document.getElementById('messageSize').value);\"+ NEWLINE+ \"    totalMessages = parseInt(document.getElementById('nrMessages').value);\"+ NEWLINE+ \"    if (isNaN(messageSize) || isNaN(totalMessages)) return;\"+ NEWLINE+ \"    createBenchData();\"+ NEWLINE+ \"    output.value = output.value + '\\\\nStarting Benchmark';\"+ NEWLINE+ \"    rcvdMessages = 0;\"+ NEWLINE+ \"    benchRunning = true;\"+ NEWLINE+ \"    startTime = new Date();\"+ NEWLINE+ \"    if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    } else {\"+ NEWLINE+ \"        for (var i = 0; i < totalMessages; i++) socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  } else {\"+ NEWLINE+ \"    alert(\\\"The socket is not open.\\\");\"+ NEWLINE+ \"  }\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onFinished() {\"+ NEWLINE+ \"    endTime = new Date();\"+ NEWLINE+ \"    var duration = (endTime - startTime) / 1000.0;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nTest took: ' + duration + 's';\"+ NEWLINE+ \"    var messagesPerS = totalMessages / duration;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nPerformance: ' + messagesPerS + ' Messages/s';\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nRound trip: ' + 1000.0/messagesPerS + 'ms';\"+ NEWLINE+ \"    var throughput = messageSize * totalMessages / duration;\"+ NEWLINE+ \"    var throughputText;\"+ NEWLINE+ \"    if (isBinary) throughputText = throughput / (1024*1024) + ' MB/s';\"+ NEWLINE+ \"    else throughputText = throughput / (1000*1000) + ' MChars/s';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nThroughput: ' + throughputText;\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"}\"+ NEWLINE+ \"</script>\"+ NEWLINE+ \"</body>\"+ NEWLINE+ \"</html>\"+ NEWLINE,CharsetUtil.US_ASCII);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9903,
        "startLineNumber" : 31,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 35
      },
      "nodeContext" : "\"<html><head><title>Web Socket Performance Test</title></head>\" + NEWLINE + \"<body>\"+ NEWLINE+ \"<h2>WebSocket Performance Test</h2>\"+ NEWLINE+ \"<label>Connection Status:</label>\"+ NEWLINE+ \"<label id=\\\"connectionLabel\\\"></label><br />\"+ NEWLINE+ \"<form onsubmit=\\\"return false;\\\">\"+ NEWLINE+ \"Message size:\"+ \"<input type=\\\"text\\\" id=\\\"messageSize\\\" value=\\\"1024\\\"/><br>\"+ NEWLINE+ \"Number of messages:\"+ \"<input type=\\\"text\\\" id=\\\"nrMessages\\\" value=\\\"100000\\\"/><br>\"+ NEWLINE+ \"Data Type:\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeText\\\" value=\\\"text\\\" checked>text\"+ \"<input type=\\\"radio\\\" name=\\\"type\\\" id=\\\"typeBinary\\\" value=\\\"binary\\\">binary<br>\"+ NEWLINE+ \"Mode:<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeSingle\\\" value=\\\"single\\\" checked>\"+ \"Wait for response after each messages<br>\"+ NEWLINE+ \"<input type=\\\"radio\\\" name=\\\"mode\\\" id=\\\"modeAll\\\" value=\\\"all\\\">\"+ \"Send all messages and then wait for all responses<br>\"+ NEWLINE+ \"<input type=\\\"checkbox\\\" id=\\\"verifiyResponses\\\">Verify responded messages<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Start Benchmark\\\"\"+ NEWLINE+ \"       onclick=\\\"startBenchmark()\\\" />\"+ NEWLINE+ \"<h3>Output</h3>\"+ NEWLINE+ \"<textarea id=\\\"output\\\" style=\\\"width:500px;height:300px;\\\"></textarea>\"+ NEWLINE+ \"<br>\"+ NEWLINE+ \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"clearText()\\\">\"+ NEWLINE+ \"</form>\"+ NEWLINE+ \"<script type=\\\"text/javascript\\\">\"+ NEWLINE+ \"var benchRunning = false;\"+ NEWLINE+ \"var messageSize = 0;\"+ NEWLINE+ \"var totalMessages = 0;\"+ NEWLINE+ \"var rcvdMessages = 0;\"+ NEWLINE+ \"var isBinary = true;\"+ NEWLINE+ \"var isSingle = true;\"+ NEWLINE+ \"var verifiyResponses = false;\"+ NEWLINE+ \"var benchData = null;\"+ NEWLINE+ \"var startTime;\"+ NEWLINE+ \"var endTime;\"+ NEWLINE+ \"var socket;\"+ NEWLINE+ \"var output = document.getElementById('output');\"+ NEWLINE+ \"var connectionLabel = document.getElementById('connectionLabel');\"+ NEWLINE+ \"if (!window.WebSocket) {\"+ NEWLINE+ \"  window.WebSocket = window.MozWebSocket;\"+ NEWLINE+ '}'+ NEWLINE+ \"if (window.WebSocket) {\"+ NEWLINE+ \"  socket = new WebSocket(\\\"\"+ webSocketLocation+ \"\\\");\"+ NEWLINE+ \"  socket.binaryType = 'arraybuffer';\"+ NEWLINE+ \"  socket.onmessage = function(event) {\"+ NEWLINE+ \"    if (verifiyResponses) {\"+ NEWLINE+ \"        if (isBinary) {\"+ NEWLINE+ \"            if (!(event.data instanceof ArrayBuffer) || \"+ NEWLINE+ \"                  event.data.byteLength != benchData.byteLength) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            } else {\"+ NEWLINE+ \"                var v = new Uint8Array(event.data);\"+ NEWLINE+ \"                for (var j = 0; j < benchData.byteLength; j++) {\"+ NEWLINE+ \"                    if (v[j] != benchData[j]) {\"+ NEWLINE+ \"                        onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                        return;\"+ NEWLINE+ \"                    }\"+ NEWLINE+ \"                }\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        } else {\"+ NEWLINE+ \"            if (event.data != benchData) {\"+ NEWLINE+ \"                onInvalidResponse(benchData, event.data);\"+ NEWLINE+ \"                return;\"+ NEWLINE+ \"            }\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"    rcvdMessages++;\"+ NEWLINE+ \"    if (rcvdMessages == totalMessages) {\"+ NEWLINE+ \"        onFinished();\"+ NEWLINE+ \"    } else if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onopen = function(event) {\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Connected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"  socket.onclose = function(event) {\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"    connectionLabel.innerHTML = \\\"Disconnected\\\";\"+ NEWLINE+ \"  };\"+ NEWLINE+ \"} else {\"+ NEWLINE+ \"  alert(\\\"Your browser does not support Web Socket.\\\");\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onInvalidResponse(sent,recvd) {\"+ NEWLINE+ \"    socket.close();\"+ NEWLINE+ \"    alert(\\\"Error: Sent data did not match the received data!\\\");\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function clearText() {\"+ NEWLINE+ \"    output.value=\\\"\\\";\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function createBenchData() {\"+ NEWLINE+ \"    if (isBinary) {\"+ NEWLINE+ \"        benchData = new Uint8Array(messageSize);\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData[i] += Math.floor(Math.random() * 255);\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    } else { \"+ NEWLINE+ \"        benchData = \\\"\\\";\"+ NEWLINE+ \"        for (var i=0; i < messageSize; i++) {\"+ NEWLINE+ \"            benchData += String.fromCharCode(Math.floor(Math.random() * (123 - 65) + 65));\"+ NEWLINE+ \"        }\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"}\"+ NEWLINE+ NEWLINE+ \"function startBenchmark(message) {\"+ NEWLINE+ \"  if (!window.WebSocket || benchRunning) { return; }\"+ NEWLINE+ \"  if (socket.readyState == WebSocket.OPEN) {\"+ NEWLINE+ \"    isBinary = document.getElementById('typeBinary').checked;\"+ NEWLINE+ \"    isSingle = document.getElementById('modeSingle').checked;\"+ NEWLINE+ \"    verifiyResponses = document.getElementById('verifiyResponses').checked;\"+ NEWLINE+ \"    messageSize = parseInt(document.getElementById('messageSize').value);\"+ NEWLINE+ \"    totalMessages = parseInt(document.getElementById('nrMessages').value);\"+ NEWLINE+ \"    if (isNaN(messageSize) || isNaN(totalMessages)) return;\"+ NEWLINE+ \"    createBenchData();\"+ NEWLINE+ \"    output.value = output.value + '\\\\nStarting Benchmark';\"+ NEWLINE+ \"    rcvdMessages = 0;\"+ NEWLINE+ \"    benchRunning = true;\"+ NEWLINE+ \"    startTime = new Date();\"+ NEWLINE+ \"    if (isSingle) {\"+ NEWLINE+ \"        socket.send(benchData);\"+ NEWLINE+ \"    } else {\"+ NEWLINE+ \"        for (var i = 0; i < totalMessages; i++) socket.send(benchData);\"+ NEWLINE+ \"    }\"+ NEWLINE+ \"  } else {\"+ NEWLINE+ \"    alert(\\\"The socket is not open.\\\");\"+ NEWLINE+ \"  }\"+ NEWLINE+ '}'+ NEWLINE+ NEWLINE+ \"function onFinished() {\"+ NEWLINE+ \"    endTime = new Date();\"+ NEWLINE+ \"    var duration = (endTime - startTime) / 1000.0;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nTest took: ' + duration + 's';\"+ NEWLINE+ \"    var messagesPerS = totalMessages / duration;\"+ NEWLINE+ \"    output.value = output.value + '\\\\nPerformance: ' + messagesPerS + ' Messages/s';\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nRound trip: ' + 1000.0/messagesPerS + 'ms';\"+ NEWLINE+ \"    var throughput = messageSize * totalMessages / duration;\"+ NEWLINE+ \"    var throughputText;\"+ NEWLINE+ \"    if (isBinary) throughputText = throughput / (1024*1024) + ' MB/s';\"+ NEWLINE+ \"    else throughputText = throughput / (1000*1000) + ' MChars/s';\"+ NEWLINE+ \"    output.value = output.value + '\\\\nThroughput: ' + throughputText;\"+ NEWLINE+ \"    output.value = output.value + ' in each direction';\"+ NEWLINE+ \"    benchRunning = false;\"+ NEWLINE+ \"}\"+ NEWLINE+ \"</script>\"+ NEWLINE+ \"</body>\"+ NEWLINE+ \"</html>\"+ NEWLINE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 298,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 32,
    "startColumnNumber" : 16,
    "endLineNumber" : 32,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}