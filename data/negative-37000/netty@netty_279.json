{
  "id" : 279,
  "expression" : "query",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsQueryTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 61,
      "startColumnNumber" : 23,
      "endLineNumber" : 61,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 23,
        "endLineNumber" : 61,
        "endColumnNumber" : 55
      },
      "nodeContext" : "query.count(DnsSection.QUESTION)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertThat(query.count(DnsSection.QUESTION),is(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(query.count(DnsSection.QUESTION),is(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DnsQuery query : queries) {\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 38,
        "startColumnNumber" : 43,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEncodeAndDecodeQuery(){\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(query.count(DnsSection.QUESTION),is(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.dns.DnsQuery"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 62,
      "startColumnNumber" : 23,
      "endLineNumber" : 62,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 62,
        "startColumnNumber" : 23,
        "endLineNumber" : 62,
        "endColumnNumber" : 53
      },
      "nodeContext" : "query.count(DnsSection.ANSWER)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertThat(query.count(DnsSection.ANSWER),is(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(query.count(DnsSection.ANSWER),is(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DnsQuery query : queries) {\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 38,
        "startColumnNumber" : 43,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEncodeAndDecodeQuery(){\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertThat(query.count(DnsSection.ANSWER),is(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.dns.DnsQuery"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 63,
      "startColumnNumber" : 23,
      "endLineNumber" : 63,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 63,
        "startColumnNumber" : 23,
        "endLineNumber" : 63,
        "endColumnNumber" : 56
      },
      "nodeContext" : "query.count(DnsSection.AUTHORITY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(query.count(DnsSection.AUTHORITY),is(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(query.count(DnsSection.AUTHORITY),is(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DnsQuery query : queries) {\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 38,
        "startColumnNumber" : 43,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEncodeAndDecodeQuery(){\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(query.count(DnsSection.AUTHORITY),is(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.dns.DnsQuery"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 64,
      "startColumnNumber" : 23,
      "endLineNumber" : 64,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 64,
        "startColumnNumber" : 23,
        "endLineNumber" : 64,
        "endColumnNumber" : 57
      },
      "nodeContext" : "query.count(DnsSection.ADDITIONAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(query.count(DnsSection.ADDITIONAL),is(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DnsQuery query : queries) {\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 38,
        "startColumnNumber" : 43,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEncodeAndDecodeQuery(){\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.dns.DnsQuery"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 66,
      "startColumnNumber" : 50,
      "endLineNumber" : 66,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 66,
        "startColumnNumber" : 23,
        "endLineNumber" : 66,
        "endColumnNumber" : 56
      },
      "nodeContext" : "writeChannel.writeOutbound(query)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertTrue(writeChannel.writeOutbound(query))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertTrue(writeChannel.writeOutbound(query));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DnsQuery query : queries) {\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 38,
        "startColumnNumber" : 43,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEncodeAndDecodeQuery(){\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 66,
        "startColumnNumber" : 12,
        "endLineNumber" : 66,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertTrue(writeChannel.writeOutbound(query));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.dns.DnsQuery"
  }, {
    "nodeContext" : "query",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 73,
      "startColumnNumber" : 25,
      "endLineNumber" : 73,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(query,decodedDnsQuery)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(query,decodedDnsQuery);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 60,
        "startColumnNumber" : 38,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 110,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DnsQuery query : queries) {\n  assertThat(query.count(DnsSection.QUESTION),is(1));\n  assertThat(query.count(DnsSection.ANSWER),is(0));\n  assertThat(query.count(DnsSection.AUTHORITY),is(0));\n  assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n  assertTrue(writeChannel.writeOutbound(query));\n  DatagramPacket packet=writeChannel.readOutbound();\n  assertTrue(packet.content().isReadable());\n  assertTrue(readChannel.writeInbound(packet));\n  DnsQuery decodedDnsQuery=readChannel.readInbound();\n  assertEquals(query,decodedDnsQuery);\n  assertTrue(decodedDnsQuery.release());\n  assertNull(writeChannel.readOutbound());\n  assertNull(readChannel.readInbound());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 116,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2188,
        "startLineNumber" : 38,
        "startColumnNumber" : 43,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEncodeAndDecodeQuery(){\n  InetSocketAddress addr=SocketUtils.socketAddress(\"8.8.8.8\",53);\n  EmbeddedChannel writeChannel=new EmbeddedChannel(new DatagramDnsQueryEncoder());\n  EmbeddedChannel readChannel=new EmbeddedChannel(new DatagramDnsQueryDecoder());\n  List<DnsQuery> queries=new ArrayList<>(5);\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"1.0.0.127.in-addr.arpa\",DnsRecordType.PTR)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"www.example.com\",DnsRecordType.A)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.AAAA)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.MX)));\n  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion(\"example.com\",DnsRecordType.CNAME)));\n  for (  DnsQuery query : queries) {\n    assertThat(query.count(DnsSection.QUESTION),is(1));\n    assertThat(query.count(DnsSection.ANSWER),is(0));\n    assertThat(query.count(DnsSection.AUTHORITY),is(0));\n    assertThat(query.count(DnsSection.ADDITIONAL),is(0));\n    assertTrue(writeChannel.writeOutbound(query));\n    DatagramPacket packet=writeChannel.readOutbound();\n    assertTrue(packet.content().isReadable());\n    assertTrue(readChannel.writeInbound(packet));\n    DnsQuery decodedDnsQuery=readChannel.readInbound();\n    assertEquals(query,decodedDnsQuery);\n    assertTrue(decodedDnsQuery.release());\n    assertNull(writeChannel.readOutbound());\n    assertNull(readChannel.readInbound());\n  }\n  assertFalse(writeChannel.finish());\n  assertFalse(readChannel.finish());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 290,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertEquals(query,decodedDnsQuery);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.dns.DnsQuery"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 61,
    "startColumnNumber" : 23,
    "endLineNumber" : 61,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 62,
    "startColumnNumber" : 23,
    "endLineNumber" : 62,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 63,
    "startColumnNumber" : 23,
    "endLineNumber" : 63,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 64,
    "startColumnNumber" : 23,
    "endLineNumber" : 64,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 66,
    "startColumnNumber" : 50,
    "endLineNumber" : 66,
    "endColumnNumber" : 55
  }, {
    "charLength" : 5,
    "startLineNumber" : 73,
    "startColumnNumber" : 25,
    "endLineNumber" : 73,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}