{
  "id" : 226,
  "expression" : "\"*\"",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableZipIterableTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"*\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 346,
      "startColumnNumber" : 70,
      "endLineNumber" : 346,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 346,
        "startColumnNumber" : 31,
        "endLineNumber" : 346,
        "endColumnNumber" : 94
      },
      "nodeContext" : "\"Omg I'm calculating so hard: \" + t1 + \"*\"+ t1+ \"=\"+ (t1 * t1)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 346,
        "startColumnNumber" : 12,
        "endLineNumber" : 346,
        "endColumnNumber" : 95
      },
      "nodeContext" : "System.out.println(\"Omg I'm calculating so hard: \" + t1 + \"*\"+ t1+ \"=\"+ (t1 * t1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 346,
        "startColumnNumber" : 12,
        "endLineNumber" : 346,
        "endColumnNumber" : 96
      },
      "nodeContext" : "System.out.println(\"Omg I'm calculating so hard: \" + t1 + \"*\"+ t1+ \"=\"+ (t1 * t1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 344,
        "startColumnNumber" : 40,
        "endLineNumber" : 348,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  counter.incrementAndGet();\n  System.out.println(\"Omg I'm calculating so hard: \" + t1 + \"*\"+ t1+ \"=\"+ (t1 * t1));\n  return \" \" + (t1 * t1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 343,
        "startColumnNumber" : 8,
        "endLineNumber" : 348,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public String apply(Integer t1){\n  counter.incrementAndGet();\n  System.out.println(\"Omg I'm calculating so hard: \" + t1 + \"*\"+ t1+ \"=\"+ (t1 * t1));\n  return \" \" + (t1 * t1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 39,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 346,
        "startColumnNumber" : 12,
        "endLineNumber" : 346,
        "endColumnNumber" : 96
      },
      "nodeContext" : "System.out.println(\"Omg I'm calculating so hard: \" + t1 + \"*\"+ t1+ \"=\"+ (t1 * t1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 346,
    "startColumnNumber" : 70,
    "endLineNumber" : 346,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}