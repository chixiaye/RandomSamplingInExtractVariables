{
  "id" : 32,
  "expression" : "Map",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/main/java/org/jd/gui/service/indexer/JavaFileIndexerProvider.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 59,
      "startColumnNumber" : 17,
      "endLineNumber" : 59,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 59,
        "startColumnNumber" : 17,
        "endLineNumber" : 59,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Map.Entry",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 59,
        "startColumnNumber" : 17,
        "endLineNumber" : 59,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Map.Entry",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 59,
        "startColumnNumber" : 17,
        "endLineNumber" : 59,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Map.Entry<String,HashSet<String>>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 59,
        "startColumnNumber" : 17,
        "endLineNumber" : 59,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Map.Entry<String,HashSet<String>> e",
      "nodeType" : "SingleVariableDeclaration",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Map.Entry<String,HashSet<String>> e : listener.getSuperTypeNamesMap().entrySet()) {\n  String typeName=e.getKey();\n  for (  String superTypeName : e.getValue()) {\n    index.get(superTypeName).add(typeName);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1505,
        "startLineNumber" : 41,
        "startColumnNumber" : 63,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Listener listener=new Listener(entry);\n  ANTLRJavaParser.parse(new ANTLRInputStream(inputStream),listener);\n  addToIndex(indexes,\"typeDeclarations\",listener.getTypeDeclarationSet(),entry);\n  addToIndex(indexes,\"constructorDeclarations\",listener.getConstructorDeclarationSet(),entry);\n  addToIndex(indexes,\"methodDeclarations\",listener.getMethodDeclarationSet(),entry);\n  addToIndex(indexes,\"fieldDeclarations\",listener.getFieldDeclarationSet(),entry);\n  addToIndex(indexes,\"typeReferences\",listener.getTypeReferenceSet(),entry);\n  addToIndex(indexes,\"constructorReferences\",listener.getConstructorReferenceSet(),entry);\n  addToIndex(indexes,\"methodReferences\",listener.getMethodReferenceSet(),entry);\n  addToIndex(indexes,\"fieldReferences\",listener.getFieldReferenceSet(),entry);\n  addToIndex(indexes,\"strings\",listener.getStringSet(),entry);\n  Map<String,Collection> index=indexes.getIndex(\"subTypeNames\");\n  for (  Map.Entry<String,HashSet<String>> e : listener.getSuperTypeNamesMap().entrySet()) {\n    String typeName=e.getKey();\n    for (    String superTypeName : e.getValue()) {\n      index.get(superTypeName).add(typeName);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1649,
        "startLineNumber" : 41,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (InputStream inputStream=entry.getInputStream()){\n  Listener listener=new Listener(entry);\n  ANTLRJavaParser.parse(new ANTLRInputStream(inputStream),listener);\n  addToIndex(indexes,\"typeDeclarations\",listener.getTypeDeclarationSet(),entry);\n  addToIndex(indexes,\"constructorDeclarations\",listener.getConstructorDeclarationSet(),entry);\n  addToIndex(indexes,\"methodDeclarations\",listener.getMethodDeclarationSet(),entry);\n  addToIndex(indexes,\"fieldDeclarations\",listener.getFieldDeclarationSet(),entry);\n  addToIndex(indexes,\"typeReferences\",listener.getTypeReferenceSet(),entry);\n  addToIndex(indexes,\"constructorReferences\",listener.getConstructorReferenceSet(),entry);\n  addToIndex(indexes,\"methodReferences\",listener.getMethodReferenceSet(),entry);\n  addToIndex(indexes,\"fieldReferences\",listener.getFieldReferenceSet(),entry);\n  addToIndex(indexes,\"strings\",listener.getStringSet(),entry);\n  Map<String,Collection> index=indexes.getIndex(\"subTypeNames\");\n  for (  Map.Entry<String,HashSet<String>> e : listener.getSuperTypeNamesMap().entrySet()) {\n    String typeName=e.getKey();\n    for (    String superTypeName : e.getValue()) {\n      index.get(superTypeName).add(typeName);\n    }\n  }\n}\n catch (IOException e) {\n  assert ExceptionUtil.printStackTrace(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 180,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1667,
        "startLineNumber" : 40,
        "startColumnNumber" : 71,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try (InputStream inputStream=entry.getInputStream()){\n    Listener listener=new Listener(entry);\n    ANTLRJavaParser.parse(new ANTLRInputStream(inputStream),listener);\n    addToIndex(indexes,\"typeDeclarations\",listener.getTypeDeclarationSet(),entry);\n    addToIndex(indexes,\"constructorDeclarations\",listener.getConstructorDeclarationSet(),entry);\n    addToIndex(indexes,\"methodDeclarations\",listener.getMethodDeclarationSet(),entry);\n    addToIndex(indexes,\"fieldDeclarations\",listener.getFieldDeclarationSet(),entry);\n    addToIndex(indexes,\"typeReferences\",listener.getTypeReferenceSet(),entry);\n    addToIndex(indexes,\"constructorReferences\",listener.getConstructorReferenceSet(),entry);\n    addToIndex(indexes,\"methodReferences\",listener.getMethodReferenceSet(),entry);\n    addToIndex(indexes,\"fieldReferences\",listener.getFieldReferenceSet(),entry);\n    addToIndex(indexes,\"strings\",listener.getStringSet(),entry);\n    Map<String,Collection> index=indexes.getIndex(\"subTypeNames\");\n    for (    Map.Entry<String,HashSet<String>> e : listener.getSuperTypeNamesMap().entrySet()) {\n      String typeName=e.getKey();\n      for (      String superTypeName : e.getValue()) {\n        index.get(superTypeName).add(typeName);\n      }\n    }\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1785,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override @SuppressWarnings(\"unchecked\") public void index(API api,Container.Entry entry,Indexes indexes){\n  try (InputStream inputStream=entry.getInputStream()){\n    Listener listener=new Listener(entry);\n    ANTLRJavaParser.parse(new ANTLRInputStream(inputStream),listener);\n    addToIndex(indexes,\"typeDeclarations\",listener.getTypeDeclarationSet(),entry);\n    addToIndex(indexes,\"constructorDeclarations\",listener.getConstructorDeclarationSet(),entry);\n    addToIndex(indexes,\"methodDeclarations\",listener.getMethodDeclarationSet(),entry);\n    addToIndex(indexes,\"fieldDeclarations\",listener.getFieldDeclarationSet(),entry);\n    addToIndex(indexes,\"typeReferences\",listener.getTypeReferenceSet(),entry);\n    addToIndex(indexes,\"constructorReferences\",listener.getConstructorReferenceSet(),entry);\n    addToIndex(indexes,\"methodReferences\",listener.getMethodReferenceSet(),entry);\n    addToIndex(indexes,\"fieldReferences\",listener.getFieldReferenceSet(),entry);\n    addToIndex(indexes,\"strings\",listener.getStringSet(),entry);\n    Map<String,Collection> index=indexes.getIndex(\"subTypeNames\");\n    for (    Map.Entry<String,HashSet<String>> e : listener.getSuperTypeNamesMap().entrySet()) {\n      String typeName=e.getKey();\n      for (      String superTypeName : e.getValue()) {\n        index.get(superTypeName).add(typeName);\n      }\n    }\n  }\n catch (  IOException e) {\n    assert ExceptionUtil.printStackTrace(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 204,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 59,
        "startColumnNumber" : 17,
        "endLineNumber" : 59,
        "endColumnNumber" : 53
      },
      "nodeContext" : "Map.Entry<String,HashSet<String>> e",
      "nodeType" : "SingleVariableDeclaration",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Map"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 59,
    "startColumnNumber" : 17,
    "endLineNumber" : 59,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}