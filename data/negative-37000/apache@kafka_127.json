{
  "id" : 127,
  "expression" : "bufferSupplier",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/raft/src/test/java/org/apache/kafka/raft/internals/RecordsBatchReaderTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bufferSupplier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 81,
      "startColumnNumber" : 21,
      "endLineNumber" : 81,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 81,
        "startColumnNumber" : 21,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "bufferSupplier.get(Mockito.anyInt())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Mockito.when(bufferSupplier.get(Mockito.anyInt()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n  int size=invocation.getArgument(0);\n  ByteBuffer buffer=ByteBuffer.allocate(size);\n  allocatedBuffers.add(buffer);\n  return buffer;\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 39,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 267,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n  int size=invocation.getArgument(0);\n  ByteBuffer buffer=ByteBuffer.allocate(size);\n  allocatedBuffers.add(buffer);\n  return buffer;\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1487,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferSupplier bufferSupplier=Mockito.mock(BufferSupplier.class);\n  Set<ByteBuffer> allocatedBuffers=Collections.newSetFromMap(new IdentityHashMap<>());\n  Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n    int size=invocation.getArgument(0);\n    ByteBuffer buffer=ByteBuffer.allocate(size);\n    allocatedBuffers.add(buffer);\n    return buffer;\n  }\n);\n  Mockito.doAnswer(invocation -> {\n    ByteBuffer released=invocation.getArgument(0);\n    allocatedBuffers.remove(released);\n    return null;\n  }\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n  @SuppressWarnings(\"unchecked\") CloseListener<BatchReader<String>> closeListener=Mockito.mock(CloseListener.class);\n  RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n  for (  TestBatch<String> batch : expectedBatches) {\n    assertTrue(reader.hasNext());\n    assertEquals(batch,TestBatch.from(reader.next()));\n  }\n  assertFalse(reader.hasNext());\n  assertThrows(NoSuchElementException.class,reader::next);\n  reader.close();\n  Mockito.verify(closeListener).onClose(reader);\n  assertEquals(Collections.emptySet(),allocatedBuffers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1621,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testBatchReader(long baseOffset,Records records,List<TestBatch<String>> expectedBatches){\n  BufferSupplier bufferSupplier=Mockito.mock(BufferSupplier.class);\n  Set<ByteBuffer> allocatedBuffers=Collections.newSetFromMap(new IdentityHashMap<>());\n  Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n    int size=invocation.getArgument(0);\n    ByteBuffer buffer=ByteBuffer.allocate(size);\n    allocatedBuffers.add(buffer);\n    return buffer;\n  }\n);\n  Mockito.doAnswer(invocation -> {\n    ByteBuffer released=invocation.getArgument(0);\n    allocatedBuffers.remove(released);\n    return null;\n  }\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n  @SuppressWarnings(\"unchecked\") CloseListener<BatchReader<String>> closeListener=Mockito.mock(CloseListener.class);\n  RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n  for (  TestBatch<String> batch : expectedBatches) {\n    assertTrue(reader.hasNext());\n    assertEquals(batch,TestBatch.from(reader.next()));\n  }\n  assertFalse(reader.hasNext());\n  assertThrows(NoSuchElementException.class,reader::next);\n  reader.close();\n  Mockito.verify(closeListener).onClose(reader);\n  assertEquals(Collections.emptySet(),allocatedBuffers);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Mockito.when(bufferSupplier.get(Mockito.anyInt()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.utils.BufferSupplier"
  }, {
    "nodeContext" : "bufferSupplier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 92,
      "startColumnNumber" : 16,
      "endLineNumber" : 92,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Mockito.doAnswer(invocation -> {\n  ByteBuffer released=invocation.getArgument(0);\n  allocatedBuffers.remove(released);\n  return null;\n}\n).when(bufferSupplier)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Mockito.doAnswer(invocation -> {\n  ByteBuffer released=invocation.getArgument(0);\n  allocatedBuffers.remove(released);\n  return null;\n}\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Mockito.doAnswer(invocation -> {\n  ByteBuffer released=invocation.getArgument(0);\n  allocatedBuffers.remove(released);\n  return null;\n}\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1487,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferSupplier bufferSupplier=Mockito.mock(BufferSupplier.class);\n  Set<ByteBuffer> allocatedBuffers=Collections.newSetFromMap(new IdentityHashMap<>());\n  Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n    int size=invocation.getArgument(0);\n    ByteBuffer buffer=ByteBuffer.allocate(size);\n    allocatedBuffers.add(buffer);\n    return buffer;\n  }\n);\n  Mockito.doAnswer(invocation -> {\n    ByteBuffer released=invocation.getArgument(0);\n    allocatedBuffers.remove(released);\n    return null;\n  }\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n  @SuppressWarnings(\"unchecked\") CloseListener<BatchReader<String>> closeListener=Mockito.mock(CloseListener.class);\n  RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n  for (  TestBatch<String> batch : expectedBatches) {\n    assertTrue(reader.hasNext());\n    assertEquals(batch,TestBatch.from(reader.next()));\n  }\n  assertFalse(reader.hasNext());\n  assertThrows(NoSuchElementException.class,reader::next);\n  reader.close();\n  Mockito.verify(closeListener).onClose(reader);\n  assertEquals(Collections.emptySet(),allocatedBuffers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1621,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testBatchReader(long baseOffset,Records records,List<TestBatch<String>> expectedBatches){\n  BufferSupplier bufferSupplier=Mockito.mock(BufferSupplier.class);\n  Set<ByteBuffer> allocatedBuffers=Collections.newSetFromMap(new IdentityHashMap<>());\n  Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n    int size=invocation.getArgument(0);\n    ByteBuffer buffer=ByteBuffer.allocate(size);\n    allocatedBuffers.add(buffer);\n    return buffer;\n  }\n);\n  Mockito.doAnswer(invocation -> {\n    ByteBuffer released=invocation.getArgument(0);\n    allocatedBuffers.remove(released);\n    return null;\n  }\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n  @SuppressWarnings(\"unchecked\") CloseListener<BatchReader<String>> closeListener=Mockito.mock(CloseListener.class);\n  RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n  for (  TestBatch<String> batch : expectedBatches) {\n    assertTrue(reader.hasNext());\n    assertEquals(batch,TestBatch.from(reader.next()));\n  }\n  assertFalse(reader.hasNext());\n  assertThrows(NoSuchElementException.class,reader::next);\n  reader.close();\n  Mockito.verify(closeListener).onClose(reader);\n  assertEquals(Collections.emptySet(),allocatedBuffers);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 31
      },
      "nodeContext" : "Mockito.doAnswer(invocation -> {\n  ByteBuffer released=invocation.getArgument(0);\n  allocatedBuffers.remove(released);\n  return null;\n}\n).when(bufferSupplier)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.utils.BufferSupplier"
  }, {
    "nodeContext" : "bufferSupplier",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 101,
      "startColumnNumber" : 12,
      "endLineNumber" : 101,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 97,
        "startColumnNumber" : 44,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 97,
        "startColumnNumber" : 35,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 97,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 10
      },
      "nodeContext" : "RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1487,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BufferSupplier bufferSupplier=Mockito.mock(BufferSupplier.class);\n  Set<ByteBuffer> allocatedBuffers=Collections.newSetFromMap(new IdentityHashMap<>());\n  Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n    int size=invocation.getArgument(0);\n    ByteBuffer buffer=ByteBuffer.allocate(size);\n    allocatedBuffers.add(buffer);\n    return buffer;\n  }\n);\n  Mockito.doAnswer(invocation -> {\n    ByteBuffer released=invocation.getArgument(0);\n    allocatedBuffers.remove(released);\n    return null;\n  }\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n  @SuppressWarnings(\"unchecked\") CloseListener<BatchReader<String>> closeListener=Mockito.mock(CloseListener.class);\n  RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n  for (  TestBatch<String> batch : expectedBatches) {\n    assertTrue(reader.hasNext());\n    assertEquals(batch,TestBatch.from(reader.next()));\n  }\n  assertFalse(reader.hasNext());\n  assertThrows(NoSuchElementException.class,reader::next);\n  reader.close();\n  Mockito.verify(closeListener).onClose(reader);\n  assertEquals(Collections.emptySet(),allocatedBuffers);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1621,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testBatchReader(long baseOffset,Records records,List<TestBatch<String>> expectedBatches){\n  BufferSupplier bufferSupplier=Mockito.mock(BufferSupplier.class);\n  Set<ByteBuffer> allocatedBuffers=Collections.newSetFromMap(new IdentityHashMap<>());\n  Mockito.when(bufferSupplier.get(Mockito.anyInt())).thenAnswer(invocation -> {\n    int size=invocation.getArgument(0);\n    ByteBuffer buffer=ByteBuffer.allocate(size);\n    allocatedBuffers.add(buffer);\n    return buffer;\n  }\n);\n  Mockito.doAnswer(invocation -> {\n    ByteBuffer released=invocation.getArgument(0);\n    allocatedBuffers.remove(released);\n    return null;\n  }\n).when(bufferSupplier).release(Mockito.any(ByteBuffer.class));\n  @SuppressWarnings(\"unchecked\") CloseListener<BatchReader<String>> closeListener=Mockito.mock(CloseListener.class);\n  RecordsBatchReader<String> reader=RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener);\n  for (  TestBatch<String> batch : expectedBatches) {\n    assertTrue(reader.hasNext());\n    assertEquals(batch,TestBatch.from(reader.next()));\n  }\n  assertFalse(reader.hasNext());\n  assertThrows(NoSuchElementException.class,reader::next);\n  reader.close();\n  Mockito.verify(closeListener).onClose(reader);\n  assertEquals(Collections.emptySet(),allocatedBuffers);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 97,
        "startColumnNumber" : 44,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "RecordsBatchReader.of(baseOffset,records,serde,bufferSupplier,MAX_BATCH_BYTES,closeListener)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.utils.BufferSupplier"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 81,
    "startColumnNumber" : 21,
    "endLineNumber" : 81,
    "endColumnNumber" : 35
  }, {
    "charLength" : 14,
    "startLineNumber" : 92,
    "startColumnNumber" : 16,
    "endLineNumber" : 92,
    "endColumnNumber" : 30
  }, {
    "charLength" : 14,
    "startLineNumber" : 101,
    "startColumnNumber" : 12,
    "endLineNumber" : 101,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}