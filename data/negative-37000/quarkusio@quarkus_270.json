{
  "id" : 270,
  "expression" : "valueString",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/attribute/ExchangeAttributeParser.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 63,
      "startColumnNumber" : 28,
      "endLineNumber" : 63,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 63,
        "startColumnNumber" : 28,
        "endLineNumber" : 63,
        "endColumnNumber" : 48
      },
      "nodeContext" : "valueString.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 63,
        "startColumnNumber" : 24,
        "endLineNumber" : 63,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < valueString.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 63,
        "startColumnNumber" : 24,
        "endLineNumber" : 63,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < valueString.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 64,
      "startColumnNumber" : 21,
      "endLineNumber" : 64,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 64,
        "startColumnNumber" : 21,
        "endLineNumber" : 64,
        "endColumnNumber" : 42
      },
      "nodeContext" : "valueString.charAt(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 64,
        "startColumnNumber" : 17,
        "endLineNumber" : 64,
        "endColumnNumber" : 42
      },
      "nodeContext" : "c=valueString.charAt(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 43
      },
      "nodeContext" : "char c=valueString.charAt(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 63,
        "startColumnNumber" : 55,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 43
      },
      "nodeContext" : "char c=valueString.charAt(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 69,
      "startColumnNumber" : 65,
      "endLineNumber" : 69,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 69,
        "startColumnNumber" : 65,
        "endLineNumber" : 69,
        "endColumnNumber" : 94
      },
      "nodeContext" : "valueString.substring(pos,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 69,
        "startColumnNumber" : 48,
        "endLineNumber" : 69,
        "endColumnNumber" : 95
      },
      "nodeContext" : "parseSingleToken(valueString.substring(pos,i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 69,
        "startColumnNumber" : 43,
        "endLineNumber" : 69,
        "endColumnNumber" : 96
      },
      "nodeContext" : "wrap(parseSingleToken(valueString.substring(pos,i)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 68,
        "startColumnNumber" : 38,
        "endLineNumber" : 71,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n  pos=i;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 68,
        "startColumnNumber" : 24,
        "endLineNumber" : 71,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (pos != i) {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n  pos=i;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 67,
        "startColumnNumber" : 46,
        "endLineNumber" : 77,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (pos != i) {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n    pos=i;\n  }\n  if (c == '%') {\n    state=1;\n  }\n else {\n    state=3;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 428,
        "startLineNumber" : 67,
        "startColumnNumber" : 20,
        "endLineNumber" : 77,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '%' || c == '$') {\n  if (pos != i) {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n    pos=i;\n  }\n  if (c == '%') {\n    state=1;\n  }\n else {\n    state=3;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 495,
        "startLineNumber" : 66,
        "startColumnNumber" : 24,
        "endLineNumber" : 79,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (c == '%' || c == '$') {\n    if (pos != i) {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n      pos=i;\n    }\n    if (c == '%') {\n      state=1;\n    }\n else {\n      state=3;\n    }\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase 0:{\n    if (c == '%' || c == '$') {\n      if (pos != i) {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n        pos=i;\n      }\n      if (c == '%') {\n        state=1;\n      }\n else {\n        state=3;\n      }\n    }\n    break;\n  }\ncase 1:{\n  if (c == '{') {\n    state=2;\n  }\n else   if (c == '%') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 2:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 3:{\nif (c == '{') {\nstate=4;\n}\n else if (c == '$') {\nattributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\npos=i + 1;\nstate=0;\n}\n else {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 63,
        "startColumnNumber" : 55,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 89,
      "startColumnNumber" : 61,
      "endLineNumber" : 89,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 89,
        "startColumnNumber" : 61,
        "endLineNumber" : 89,
        "endColumnNumber" : 94
      },
      "nodeContext" : "valueString.substring(pos,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 89,
        "startColumnNumber" : 44,
        "endLineNumber" : 89,
        "endColumnNumber" : 95
      },
      "nodeContext" : "parseSingleToken(valueString.substring(pos,i + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 89,
        "startColumnNumber" : 39,
        "endLineNumber" : 89,
        "endColumnNumber" : 96
      },
      "nodeContext" : "wrap(parseSingleToken(valueString.substring(pos,i + 1)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 89,
        "startColumnNumber" : 24,
        "endLineNumber" : 89,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 89,
        "startColumnNumber" : 24,
        "endLineNumber" : 89,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 88,
        "startColumnNumber" : 27,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 83,
        "startColumnNumber" : 27,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '%') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 511,
        "startLineNumber" : 81,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '{') {\n  state=2;\n}\n else if (c == '%') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 80,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (c == '{') {\n    state=2;\n  }\n else   if (c == '%') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase 0:{\n    if (c == '%' || c == '$') {\n      if (pos != i) {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n        pos=i;\n      }\n      if (c == '%') {\n        state=1;\n      }\n else {\n        state=3;\n      }\n    }\n    break;\n  }\ncase 1:{\n  if (c == '{') {\n    state=2;\n  }\n else   if (c == '%') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 2:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 3:{\nif (c == '{') {\nstate=4;\n}\n else if (c == '$') {\nattributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\npos=i + 1;\nstate=0;\n}\n else {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 63,
        "startColumnNumber" : 55,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 89,
        "startColumnNumber" : 24,
        "endLineNumber" : 89,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 97,
      "startColumnNumber" : 61,
      "endLineNumber" : 97,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 97,
        "startColumnNumber" : 61,
        "endLineNumber" : 97,
        "endColumnNumber" : 94
      },
      "nodeContext" : "valueString.substring(pos,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 97,
        "startColumnNumber" : 44,
        "endLineNumber" : 97,
        "endColumnNumber" : 95
      },
      "nodeContext" : "parseSingleToken(valueString.substring(pos,i + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 97,
        "startColumnNumber" : 39,
        "endLineNumber" : 97,
        "endColumnNumber" : 96
      },
      "nodeContext" : "wrap(parseSingleToken(valueString.substring(pos,i + 1)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 97,
        "startColumnNumber" : 24,
        "endLineNumber" : 97,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 24,
        "endLineNumber" : 97,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 96,
        "startColumnNumber" : 34,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 96,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 95,
        "startColumnNumber" : 24,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase 0:{\n    if (c == '%' || c == '$') {\n      if (pos != i) {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n        pos=i;\n      }\n      if (c == '%') {\n        state=1;\n      }\n else {\n        state=3;\n      }\n    }\n    break;\n  }\ncase 1:{\n  if (c == '{') {\n    state=2;\n  }\n else   if (c == '%') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 2:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 3:{\nif (c == '{') {\nstate=4;\n}\n else if (c == '$') {\nattributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\npos=i + 1;\nstate=0;\n}\n else {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 63,
        "startColumnNumber" : 55,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 97,
        "startColumnNumber" : 24,
        "endLineNumber" : 97,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 112,
      "startColumnNumber" : 61,
      "endLineNumber" : 112,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 112,
        "startColumnNumber" : 61,
        "endLineNumber" : 112,
        "endColumnNumber" : 94
      },
      "nodeContext" : "valueString.substring(pos,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 112,
        "startColumnNumber" : 44,
        "endLineNumber" : 112,
        "endColumnNumber" : 95
      },
      "nodeContext" : "parseSingleToken(valueString.substring(pos,i + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 112,
        "startColumnNumber" : 39,
        "endLineNumber" : 112,
        "endColumnNumber" : 96
      },
      "nodeContext" : "wrap(parseSingleToken(valueString.substring(pos,i + 1)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 112,
        "startColumnNumber" : 24,
        "endLineNumber" : 112,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 112,
        "startColumnNumber" : 24,
        "endLineNumber" : 112,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 111,
        "startColumnNumber" : 27,
        "endLineNumber" : 115,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 106,
        "startColumnNumber" : 27,
        "endLineNumber" : 115,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 511,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 115,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 103,
        "startColumnNumber" : 24,
        "endLineNumber" : 117,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase 0:{\n    if (c == '%' || c == '$') {\n      if (pos != i) {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n        pos=i;\n      }\n      if (c == '%') {\n        state=1;\n      }\n else {\n        state=3;\n      }\n    }\n    break;\n  }\ncase 1:{\n  if (c == '{') {\n    state=2;\n  }\n else   if (c == '%') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 2:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 3:{\nif (c == '{') {\nstate=4;\n}\n else if (c == '$') {\nattributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\npos=i + 1;\nstate=0;\n}\n else {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 63,
        "startColumnNumber" : 55,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 112,
        "startColumnNumber" : 24,
        "endLineNumber" : 112,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 120,
      "startColumnNumber" : 61,
      "endLineNumber" : 120,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 120,
        "startColumnNumber" : 61,
        "endLineNumber" : 120,
        "endColumnNumber" : 94
      },
      "nodeContext" : "valueString.substring(pos,i + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 120,
        "startColumnNumber" : 44,
        "endLineNumber" : 120,
        "endColumnNumber" : 95
      },
      "nodeContext" : "parseSingleToken(valueString.substring(pos,i + 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 120,
        "startColumnNumber" : 39,
        "endLineNumber" : 120,
        "endColumnNumber" : 96
      },
      "nodeContext" : "wrap(parseSingleToken(valueString.substring(pos,i + 1)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 120,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 120,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 194,
        "startLineNumber" : 119,
        "startColumnNumber" : 34,
        "endLineNumber" : 123,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 123,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 118,
        "startColumnNumber" : 24,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2357,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (state) {\ncase 0:{\n    if (c == '%' || c == '$') {\n      if (pos != i) {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n        pos=i;\n      }\n      if (c == '%') {\n        state=1;\n      }\n else {\n        state=3;\n      }\n    }\n    break;\n  }\ncase 1:{\n  if (c == '{') {\n    state=2;\n  }\n else   if (c == '%') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 2:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 3:{\nif (c == '{') {\nstate=4;\n}\n else if (c == '$') {\nattributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\npos=i + 1;\nstate=0;\n}\n else {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2425,
        "startLineNumber" : 63,
        "startColumnNumber" : 55,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2472,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < valueString.length(); ++i) {\n  char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n      if (c == '%' || c == '$') {\n        if (pos != i) {\n          attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n          pos=i;\n        }\n        if (c == '%') {\n          state=1;\n        }\n else {\n          state=3;\n        }\n      }\n      break;\n    }\ncase 1:{\n    if (c == '{') {\n      state=2;\n    }\n else     if (c == '%') {\n      attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n      pos=i + 1;\n      state=0;\n    }\n else {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 2:{\n  if (c == '}') {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 3:{\nif (c == '{') {\n  state=4;\n}\n else if (c == '$') {\n  attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n  pos=i + 1;\n  state=0;\n}\n else {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\ncase 4:{\nif (c == '}') {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\npos=i + 1;\nstate=0;\n}\nbreak;\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 120,
        "endColumnNumber" : 98
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 133,
      "startColumnNumber" : 27,
      "endLineNumber" : 133,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 133,
        "startColumnNumber" : 27,
        "endLineNumber" : 133,
        "endColumnNumber" : 47
      },
      "nodeContext" : "valueString.length()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 133,
        "startColumnNumber" : 20,
        "endLineNumber" : 133,
        "endColumnNumber" : 47
      },
      "nodeContext" : "pos != valueString.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pos != valueString.length()) {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 132,
        "startColumnNumber" : 20,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pos != valueString.length()) {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase 0:case 1:case 3:{\n    if (pos != valueString.length()) {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n    }\n    break;\n  }\ncase 2:case 4:{\n  throw new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 133,
        "startColumnNumber" : 20,
        "endLineNumber" : 133,
        "endColumnNumber" : 47
      },
      "nodeContext" : "pos != valueString.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 134,
      "startColumnNumber" : 57,
      "endLineNumber" : 134,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 134,
        "startColumnNumber" : 57,
        "endLineNumber" : 134,
        "endColumnNumber" : 83
      },
      "nodeContext" : "valueString.substring(pos)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 134,
        "startColumnNumber" : 40,
        "endLineNumber" : 134,
        "endColumnNumber" : 84
      },
      "nodeContext" : "parseSingleToken(valueString.substring(pos))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 134,
        "startColumnNumber" : 35,
        "endLineNumber" : 134,
        "endColumnNumber" : 85
      },
      "nodeContext" : "wrap(parseSingleToken(valueString.substring(pos)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 134,
        "startColumnNumber" : 20,
        "endLineNumber" : 134,
        "endColumnNumber" : 86
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 134,
        "startColumnNumber" : 20,
        "endLineNumber" : 134,
        "endColumnNumber" : 87
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 133,
        "startColumnNumber" : 49,
        "endLineNumber" : 135,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 133,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (pos != valueString.length()) {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 132,
        "startColumnNumber" : 20,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (pos != valueString.length()) {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase 0:case 1:case 3:{\n    if (pos != valueString.length()) {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n    }\n    break;\n  }\ncase 2:case 4:{\n  throw new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 134,
        "startColumnNumber" : 20,
        "endLineNumber" : 134,
        "endColumnNumber" : 87
      },
      "nodeContext" : "attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "valueString",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 140,
      "startColumnNumber" : 67,
      "endLineNumber" : 140,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 140,
        "startColumnNumber" : 43,
        "endLineNumber" : 140,
        "endColumnNumber" : 78
      },
      "nodeContext" : "\"Mismatched braces: \" + valueString",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 140,
        "startColumnNumber" : 22,
        "endLineNumber" : 140,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new RuntimeException(\"Mismatched braces: \" + valueString)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 80
      },
      "nodeContext" : "throw new RuntimeException(\"Mismatched braces: \" + valueString);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 139,
        "startColumnNumber" : 20,
        "endLineNumber" : 141,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 419,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (state) {\ncase 0:case 1:case 3:{\n    if (pos != valueString.length()) {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n    }\n    break;\n  }\ncase 2:case 4:{\n  throw new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 59,
        "startColumnNumber" : 61,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 361,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3836,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Parses the provided value string, and turns it into a list of exchange attributes. <p> Tokens are created according to the following rules: <p> %a - % followed by single character. %% is an escape for a literal % %{.*}a? - % plus curly braces with any amount of content inside, followed by an optional character ${.*} - $ followed by a curly braces to reference an item from the predicate context\n * @param valueString\n * @return\n */\npublic ExchangeAttribute parse(final String valueString){\n  final List<ExchangeAttribute> attributes=new ArrayList<>();\n  int pos=0;\n  int state=0;\n  for (int i=0; i < valueString.length(); ++i) {\n    char c=valueString.charAt(i);\nswitch (state) {\ncase 0:{\n        if (c == '%' || c == '$') {\n          if (pos != i) {\n            attributes.add(wrap(parseSingleToken(valueString.substring(pos,i))));\n            pos=i;\n          }\n          if (c == '%') {\n            state=1;\n          }\n else {\n            state=3;\n          }\n        }\n        break;\n      }\ncase 1:{\n      if (c == '{') {\n        state=2;\n      }\n else       if (c == '%') {\n        attributes.add(wrap(new ConstantExchangeAttribute(\"%\")));\n        pos=i + 1;\n        state=0;\n      }\n else {\n        attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n        pos=i + 1;\n        state=0;\n      }\n      break;\n    }\ncase 2:{\n    if (c == '}') {\n      attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n      pos=i + 1;\n      state=0;\n    }\n    break;\n  }\ncase 3:{\n  if (c == '{') {\n    state=4;\n  }\n else   if (c == '$') {\n    attributes.add(wrap(new ConstantExchangeAttribute(\"$\")));\n    pos=i + 1;\n    state=0;\n  }\n else {\n    attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n    pos=i + 1;\n    state=0;\n  }\n  break;\n}\ncase 4:{\nif (c == '}') {\n  attributes.add(wrap(parseSingleToken(valueString.substring(pos,i + 1))));\n  pos=i + 1;\n  state=0;\n}\nbreak;\n}\n}\n}\nswitch (state) {\ncase 0:case 1:case 3:{\nif (pos != valueString.length()) {\nattributes.add(wrap(parseSingleToken(valueString.substring(pos))));\n}\nbreak;\n}\ncase 2:case 4:{\nthrow new RuntimeException(\"Mismatched braces: \" + valueString);\n}\n}\nif (attributes.size() == 1) {\nreturn attributes.get(0);\n}\nreturn new CompositeExchangeAttribute(attributes.toArray(new ExchangeAttribute[attributes.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 372,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 140,
        "startColumnNumber" : 16,
        "endLineNumber" : 140,
        "endColumnNumber" : 80
      },
      "nodeContext" : "throw new RuntimeException(\"Mismatched braces: \" + valueString);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 63,
    "startColumnNumber" : 28,
    "endLineNumber" : 63,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 64,
    "startColumnNumber" : 21,
    "endLineNumber" : 64,
    "endColumnNumber" : 32
  }, {
    "charLength" : 11,
    "startLineNumber" : 69,
    "startColumnNumber" : 65,
    "endLineNumber" : 69,
    "endColumnNumber" : 76
  }, {
    "charLength" : 11,
    "startLineNumber" : 89,
    "startColumnNumber" : 61,
    "endLineNumber" : 89,
    "endColumnNumber" : 72
  }, {
    "charLength" : 11,
    "startLineNumber" : 97,
    "startColumnNumber" : 61,
    "endLineNumber" : 97,
    "endColumnNumber" : 72
  }, {
    "charLength" : 11,
    "startLineNumber" : 112,
    "startColumnNumber" : 61,
    "endLineNumber" : 112,
    "endColumnNumber" : 72
  }, {
    "charLength" : 11,
    "startLineNumber" : 120,
    "startColumnNumber" : 61,
    "endLineNumber" : 120,
    "endColumnNumber" : 72
  }, {
    "charLength" : 11,
    "startLineNumber" : 133,
    "startColumnNumber" : 27,
    "endLineNumber" : 133,
    "endColumnNumber" : 38
  }, {
    "charLength" : 11,
    "startLineNumber" : 134,
    "startColumnNumber" : 57,
    "endLineNumber" : 134,
    "endColumnNumber" : 68
  }, {
    "charLength" : 11,
    "startLineNumber" : 140,
    "startColumnNumber" : 67,
    "endLineNumber" : 140,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 13
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 13
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 13
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 12
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 12
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  } ]
}