{
  "id" : 26,
  "expression" : "BytecodeViewer.viewer.debugHelpers",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BytecodeViewer.viewer.debugHelpers",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 108,
      "startColumnNumber" : 16,
      "endLineNumber" : 108,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 63
      },
      "nodeContext" : "BytecodeViewer.viewer.debugHelpers.isSelected()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 108,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (BytecodeViewer.viewer.debugHelpers.isSelected()) {\n  if (m.name.equals(\"<clinit>\"))   sb.append(\" // <clinit>\");\n else   if (m.name.equals(\"<init>\"))   sb.append(\" // <init>\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2320,
        "startLineNumber" : 104,
        "startColumnNumber" : 15,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sb.append(\" {\");\n  if (BytecodeViewer.viewer.debugHelpers.isSelected()) {\n    if (m.name.equals(\"<clinit>\"))     sb.append(\" // <clinit>\");\n else     if (m.name.equals(\"<init>\"))     sb.append(\" // <init>\");\n  }\n  sb.append(\" //\");\n  sb.append(m.desc);\n  sb.append(nl);\n  if (m.signature != null) {\n    sb.append(\"         <sig:\").append(m.signature).append(\">\");\n  }\n  if (m.annotationDefault != null) {\n    sb.append(m.annotationDefault);\n    sb.append(\"\\n\");\n  }\n  InstructionPrinter insnPrinter=new InstructionPrinter(m,args);\n  addAttrList(m.attrs,\"attr\",sb,insnPrinter);\n  addAttrList(m.invisibleAnnotations,\"invisAnno\",sb,insnPrinter);\n  addAttrList(m.invisibleAnnotations,\"invisLocalVarAnno\",sb,insnPrinter);\n  addAttrList(m.invisibleTypeAnnotations,\"invisTypeAnno\",sb,insnPrinter);\n  addAttrList(m.localVariables,\"localVar\",sb,insnPrinter);\n  addAttrList(m.visibleAnnotations,\"visAnno\",sb,insnPrinter);\n  addAttrList(m.visibleLocalVariableAnnotations,\"visLocalVarAnno\",sb,insnPrinter);\n  addAttrList(m.visibleTypeAnnotations,\"visTypeAnno\",sb,insnPrinter);\n  for (  TryCatchBlockNode o : m.tryCatchBlocks) {\n    sb.append(\"         \");\n    sb.append(\"TryCatch: L\");\n    sb.append(insnPrinter.resolveLabel(o.start));\n    sb.append(\" to L\");\n    sb.append(insnPrinter.resolveLabel(o.end));\n    sb.append(\" handled by L\");\n    sb.append(insnPrinter.resolveLabel(o.handler));\n    sb.append(\": \");\n    if (o.type != null)     sb.append(o.type);\n else     sb.append(\"Type is null.\");\n    sb.append(nl);\n  }\n  for (  String insn : insnPrinter.createPrint()) {\n    sb.append(\"         \");\n    sb.append(insn);\n    sb.append(nl);\n  }\n  sb.append(\"     }\" + nl);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2483,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (s.contains(\"abstract\")) {\n  sb.append(\" {}\");\n  sb.append(\" //\");\n  sb.append(m.desc);\n  sb.append(nl);\n}\n else {\n  sb.append(\" {\");\n  if (BytecodeViewer.viewer.debugHelpers.isSelected()) {\n    if (m.name.equals(\"<clinit>\"))     sb.append(\" // <clinit>\");\n else     if (m.name.equals(\"<init>\"))     sb.append(\" // <init>\");\n  }\n  sb.append(\" //\");\n  sb.append(m.desc);\n  sb.append(nl);\n  if (m.signature != null) {\n    sb.append(\"         <sig:\").append(m.signature).append(\">\");\n  }\n  if (m.annotationDefault != null) {\n    sb.append(m.annotationDefault);\n    sb.append(\"\\n\");\n  }\n  InstructionPrinter insnPrinter=new InstructionPrinter(m,args);\n  addAttrList(m.attrs,\"attr\",sb,insnPrinter);\n  addAttrList(m.invisibleAnnotations,\"invisAnno\",sb,insnPrinter);\n  addAttrList(m.invisibleAnnotations,\"invisLocalVarAnno\",sb,insnPrinter);\n  addAttrList(m.invisibleTypeAnnotations,\"invisTypeAnno\",sb,insnPrinter);\n  addAttrList(m.localVariables,\"localVar\",sb,insnPrinter);\n  addAttrList(m.visibleAnnotations,\"visAnno\",sb,insnPrinter);\n  addAttrList(m.visibleLocalVariableAnnotations,\"visLocalVarAnno\",sb,insnPrinter);\n  addAttrList(m.visibleTypeAnnotations,\"visTypeAnno\",sb,insnPrinter);\n  for (  TryCatchBlockNode o : m.tryCatchBlocks) {\n    sb.append(\"         \");\n    sb.append(\"TryCatch: L\");\n    sb.append(insnPrinter.resolveLabel(o.start));\n    sb.append(\" to L\");\n    sb.append(insnPrinter.resolveLabel(o.end));\n    sb.append(\" handled by L\");\n    sb.append(insnPrinter.resolveLabel(o.handler));\n    sb.append(\": \");\n    if (o.type != null)     sb.append(o.type);\n else     sb.append(\"Type is null.\");\n    sb.append(nl);\n  }\n  for (  String insn : insnPrinter.createPrint()) {\n    sb.append(\"         \");\n    sb.append(insn);\n    sb.append(nl);\n  }\n  sb.append(\"     }\" + nl);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 323,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4113,
        "startLineNumber" : 43,
        "startColumnNumber" : 78,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String class_;\n  if (cn.name.contains(\"/\")) {\n    class_=cn.name.substring(cn.name.lastIndexOf(\"/\") + 1);\n  }\n else {\n    class_=cn.name;\n  }\n  String s=getAccessString(m.access);\n  sb.append(\"     \");\n  sb.append(s);\n  if (s.length() > 0)   sb.append(\" \");\n  if (m.name.equals(\"<init>\")) {\n    sb.append(class_);\n  }\n else   if (!m.name.equals(\"<clinit>\")) {\n    sb.append(m.name);\n  }\n  TypeAndName[] args=new TypeAndName[0];\n  if (!m.name.equals(\"<clinit>\")) {\n    sb.append(\"(\");\n    final Type[] argTypes=Type.getArgumentTypes(m.desc);\n    args=new TypeAndName[argTypes.length];\n    for (int i=0; i < argTypes.length; i++) {\n      final Type type=argTypes[i];\n      final TypeAndName tan=new TypeAndName();\n      final String argName=\"arg\" + i;\n      tan.name=argName;\n      tan.type=type;\n      args[i]=tan;\n      sb.append(type.getClassName() + \" \" + argName+ (i < argTypes.length - 1 ? \", \" : \"\"));\n    }\n    sb.append(\")\");\n  }\n  int amountOfThrows=m.exceptions.size();\n  if (amountOfThrows > 0) {\n    sb.append(\" throws \");\n    sb.append(m.exceptions.get(0));\n    for (int i=1; i < amountOfThrows; i++) {\n      sb.append(\", \");\n      sb.append(m.exceptions.get(i));\n    }\n  }\n  if (s.contains(\"abstract\")) {\n    sb.append(\" {}\");\n    sb.append(\" //\");\n    sb.append(m.desc);\n    sb.append(nl);\n  }\n else {\n    sb.append(\" {\");\n    if (BytecodeViewer.viewer.debugHelpers.isSelected()) {\n      if (m.name.equals(\"<clinit>\"))       sb.append(\" // <clinit>\");\n else       if (m.name.equals(\"<init>\"))       sb.append(\" // <init>\");\n    }\n    sb.append(\" //\");\n    sb.append(m.desc);\n    sb.append(nl);\n    if (m.signature != null) {\n      sb.append(\"         <sig:\").append(m.signature).append(\">\");\n    }\n    if (m.annotationDefault != null) {\n      sb.append(m.annotationDefault);\n      sb.append(\"\\n\");\n    }\n    InstructionPrinter insnPrinter=new InstructionPrinter(m,args);\n    addAttrList(m.attrs,\"attr\",sb,insnPrinter);\n    addAttrList(m.invisibleAnnotations,\"invisAnno\",sb,insnPrinter);\n    addAttrList(m.invisibleAnnotations,\"invisLocalVarAnno\",sb,insnPrinter);\n    addAttrList(m.invisibleTypeAnnotations,\"invisTypeAnno\",sb,insnPrinter);\n    addAttrList(m.localVariables,\"localVar\",sb,insnPrinter);\n    addAttrList(m.visibleAnnotations,\"visAnno\",sb,insnPrinter);\n    addAttrList(m.visibleLocalVariableAnnotations,\"visLocalVarAnno\",sb,insnPrinter);\n    addAttrList(m.visibleTypeAnnotations,\"visTypeAnno\",sb,insnPrinter);\n    for (    TryCatchBlockNode o : m.tryCatchBlocks) {\n      sb.append(\"         \");\n      sb.append(\"TryCatch: L\");\n      sb.append(insnPrinter.resolveLabel(o.start));\n      sb.append(\" to L\");\n      sb.append(insnPrinter.resolveLabel(o.end));\n      sb.append(\" handled by L\");\n      sb.append(insnPrinter.resolveLabel(o.handler));\n      sb.append(\": \");\n      if (o.type != null)       sb.append(o.type);\n else       sb.append(\"Type is null.\");\n      sb.append(nl);\n    }\n    for (    String insn : insnPrinter.createPrint()) {\n      sb.append(\"         \");\n      sb.append(insn);\n      sb.append(nl);\n    }\n    sb.append(\"     }\" + nl);\n  }\n  return sb;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 615,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4263,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,MethodNode m,ClassNode cn){\n  String class_;\n  if (cn.name.contains(\"/\")) {\n    class_=cn.name.substring(cn.name.lastIndexOf(\"/\") + 1);\n  }\n else {\n    class_=cn.name;\n  }\n  String s=getAccessString(m.access);\n  sb.append(\"     \");\n  sb.append(s);\n  if (s.length() > 0)   sb.append(\" \");\n  if (m.name.equals(\"<init>\")) {\n    sb.append(class_);\n  }\n else   if (!m.name.equals(\"<clinit>\")) {\n    sb.append(m.name);\n  }\n  TypeAndName[] args=new TypeAndName[0];\n  if (!m.name.equals(\"<clinit>\")) {\n    sb.append(\"(\");\n    final Type[] argTypes=Type.getArgumentTypes(m.desc);\n    args=new TypeAndName[argTypes.length];\n    for (int i=0; i < argTypes.length; i++) {\n      final Type type=argTypes[i];\n      final TypeAndName tan=new TypeAndName();\n      final String argName=\"arg\" + i;\n      tan.name=argName;\n      tan.type=type;\n      args[i]=tan;\n      sb.append(type.getClassName() + \" \" + argName+ (i < argTypes.length - 1 ? \", \" : \"\"));\n    }\n    sb.append(\")\");\n  }\n  int amountOfThrows=m.exceptions.size();\n  if (amountOfThrows > 0) {\n    sb.append(\" throws \");\n    sb.append(m.exceptions.get(0));\n    for (int i=1; i < amountOfThrows; i++) {\n      sb.append(\", \");\n      sb.append(m.exceptions.get(i));\n    }\n  }\n  if (s.contains(\"abstract\")) {\n    sb.append(\" {}\");\n    sb.append(\" //\");\n    sb.append(m.desc);\n    sb.append(nl);\n  }\n else {\n    sb.append(\" {\");\n    if (BytecodeViewer.viewer.debugHelpers.isSelected()) {\n      if (m.name.equals(\"<clinit>\"))       sb.append(\" // <clinit>\");\n else       if (m.name.equals(\"<init>\"))       sb.append(\" // <init>\");\n    }\n    sb.append(\" //\");\n    sb.append(m.desc);\n    sb.append(nl);\n    if (m.signature != null) {\n      sb.append(\"         <sig:\").append(m.signature).append(\">\");\n    }\n    if (m.annotationDefault != null) {\n      sb.append(m.annotationDefault);\n      sb.append(\"\\n\");\n    }\n    InstructionPrinter insnPrinter=new InstructionPrinter(m,args);\n    addAttrList(m.attrs,\"attr\",sb,insnPrinter);\n    addAttrList(m.invisibleAnnotations,\"invisAnno\",sb,insnPrinter);\n    addAttrList(m.invisibleAnnotations,\"invisLocalVarAnno\",sb,insnPrinter);\n    addAttrList(m.invisibleTypeAnnotations,\"invisTypeAnno\",sb,insnPrinter);\n    addAttrList(m.localVariables,\"localVar\",sb,insnPrinter);\n    addAttrList(m.visibleAnnotations,\"visAnno\",sb,insnPrinter);\n    addAttrList(m.visibleLocalVariableAnnotations,\"visLocalVarAnno\",sb,insnPrinter);\n    addAttrList(m.visibleTypeAnnotations,\"visTypeAnno\",sb,insnPrinter);\n    for (    TryCatchBlockNode o : m.tryCatchBlocks) {\n      sb.append(\"         \");\n      sb.append(\"TryCatch: L\");\n      sb.append(insnPrinter.resolveLabel(o.start));\n      sb.append(\" to L\");\n      sb.append(insnPrinter.resolveLabel(o.end));\n      sb.append(\" handled by L\");\n      sb.append(insnPrinter.resolveLabel(o.handler));\n      sb.append(\": \");\n      if (o.type != null)       sb.append(o.type);\n else       sb.append(\"Type is null.\");\n      sb.append(nl);\n    }\n    for (    String insn : insnPrinter.createPrint()) {\n      sb.append(\"         \");\n      sb.append(insn);\n      sb.append(nl);\n    }\n    sb.append(\"     }\" + nl);\n  }\n  return sb;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 633,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 108,
        "endColumnNumber" : 63
      },
      "nodeContext" : "BytecodeViewer.viewer.debugHelpers.isSelected()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "javax.swing.JCheckBoxMenuItem"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 108,
    "startColumnNumber" : 16,
    "endLineNumber" : 108,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}