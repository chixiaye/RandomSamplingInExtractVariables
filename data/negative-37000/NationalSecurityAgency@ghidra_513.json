{
  "id" : 513,
  "expression" : "\"-12\"",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/app/plugin/assembler/sleigh/TokensTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"-12\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 83,
      "startColumnNumber" : 14,
      "endLineNumber" : 83,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 83,
        "startColumnNumber" : 6,
        "endLineNumber" : 83,
        "endColumnNumber" : 20
      },
      "nodeContext" : "t.match(\"-12\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 20
      },
      "nodeContext" : "m=t.match(\"-12\")",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 21
      },
      "nodeContext" : "m=t.match(\"-12\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2018,
        "startLineNumber" : 28,
        "startColumnNumber" : 27,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AssemblyNumericTerminal t=new AssemblyNumericTerminal(\"test\",0);\n  AssemblyParseNumericToken m;\n  m=t.match(\"\");\n  assertNull(m);\n  m=t.match(\"0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"0\",m.getString());\n  m=t.match(\"12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n  m=t.match(\"0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"0x12\",m.getString());\n  m=t.match(\"012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"012\",m.getString());\n  m=t.match(\"+0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"+0\",m.getString());\n  m=t.match(\"+12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"+12\",m.getString());\n  m=t.match(\"+0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"+0x12\",m.getString());\n  m=t.match(\"+012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"+012\",m.getString());\n  m=t.match(\"-0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"-0\",m.getString());\n  m=t.match(\"-12\");\n  assertEquals(-12,m.getNumericValue());\n  assertEquals(\"-12\",m.getString());\n  m=t.match(\"-0x12\");\n  assertEquals(-0x12,m.getNumericValue());\n  assertEquals(\"-0x12\",m.getString());\n  m=t.match(\"-012\");\n  assertEquals(-012,m.getNumericValue());\n  assertEquals(\"-012\",m.getString());\n  m=t.match(\"-h\");\n  assertNull(m);\n  m=t.match(\"12x\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2052,
        "startLineNumber" : 27,
        "startColumnNumber" : 1,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testNumeric(){\n  AssemblyNumericTerminal t=new AssemblyNumericTerminal(\"test\",0);\n  AssemblyParseNumericToken m;\n  m=t.match(\"\");\n  assertNull(m);\n  m=t.match(\"0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"0\",m.getString());\n  m=t.match(\"12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n  m=t.match(\"0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"0x12\",m.getString());\n  m=t.match(\"012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"012\",m.getString());\n  m=t.match(\"+0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"+0\",m.getString());\n  m=t.match(\"+12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"+12\",m.getString());\n  m=t.match(\"+0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"+0x12\",m.getString());\n  m=t.match(\"+012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"+012\",m.getString());\n  m=t.match(\"-0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"-0\",m.getString());\n  m=t.match(\"-12\");\n  assertEquals(-12,m.getNumericValue());\n  assertEquals(\"-12\",m.getString());\n  m=t.match(\"-0x12\");\n  assertEquals(-0x12,m.getNumericValue());\n  assertEquals(\"-0x12\",m.getString());\n  m=t.match(\"-012\");\n  assertEquals(-012,m.getNumericValue());\n  assertEquals(\"-012\",m.getString());\n  m=t.match(\"-h\");\n  assertNull(m);\n  m=t.match(\"12x\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 21
      },
      "nodeContext" : "m=t.match(\"-12\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"-12\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 85,
      "startColumnNumber" : 15,
      "endLineNumber" : 85,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertEquals(\"-12\",m.getString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertEquals(\"-12\",m.getString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2018,
        "startLineNumber" : 28,
        "startColumnNumber" : 27,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AssemblyNumericTerminal t=new AssemblyNumericTerminal(\"test\",0);\n  AssemblyParseNumericToken m;\n  m=t.match(\"\");\n  assertNull(m);\n  m=t.match(\"0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"0\",m.getString());\n  m=t.match(\"12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n  m=t.match(\"0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"0x12\",m.getString());\n  m=t.match(\"012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"012\",m.getString());\n  m=t.match(\"+0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"+0\",m.getString());\n  m=t.match(\"+12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"+12\",m.getString());\n  m=t.match(\"+0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"+0x12\",m.getString());\n  m=t.match(\"+012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"+012\",m.getString());\n  m=t.match(\"-0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"-0\",m.getString());\n  m=t.match(\"-12\");\n  assertEquals(-12,m.getNumericValue());\n  assertEquals(\"-12\",m.getString());\n  m=t.match(\"-0x12\");\n  assertEquals(-0x12,m.getNumericValue());\n  assertEquals(\"-0x12\",m.getString());\n  m=t.match(\"-012\");\n  assertEquals(-012,m.getNumericValue());\n  assertEquals(\"-012\",m.getString());\n  m=t.match(\"-h\");\n  assertNull(m);\n  m=t.match(\"12x\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2052,
        "startLineNumber" : 27,
        "startColumnNumber" : 1,
        "endLineNumber" : 106,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testNumeric(){\n  AssemblyNumericTerminal t=new AssemblyNumericTerminal(\"test\",0);\n  AssemblyParseNumericToken m;\n  m=t.match(\"\");\n  assertNull(m);\n  m=t.match(\"0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"0\",m.getString());\n  m=t.match(\"12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n  m=t.match(\"0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"0x12\",m.getString());\n  m=t.match(\"012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"012\",m.getString());\n  m=t.match(\"+0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"+0\",m.getString());\n  m=t.match(\"+12\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"+12\",m.getString());\n  m=t.match(\"+0x12\");\n  assertEquals(0x12,m.getNumericValue());\n  assertEquals(\"+0x12\",m.getString());\n  m=t.match(\"+012\");\n  assertEquals(012,m.getNumericValue());\n  assertEquals(\"+012\",m.getString());\n  m=t.match(\"-0\");\n  assertEquals(0,m.getNumericValue());\n  assertEquals(\"-0\",m.getString());\n  m=t.match(\"-12\");\n  assertEquals(-12,m.getNumericValue());\n  assertEquals(\"-12\",m.getString());\n  m=t.match(\"-0x12\");\n  assertEquals(-0x12,m.getNumericValue());\n  assertEquals(\"-0x12\",m.getString());\n  m=t.match(\"-012\");\n  assertEquals(-012,m.getNumericValue());\n  assertEquals(\"-012\",m.getString());\n  m=t.match(\"-h\");\n  assertNull(m);\n  m=t.match(\"12x\");\n  assertEquals(12,m.getNumericValue());\n  assertEquals(\"12\",m.getString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 320,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertEquals(\"-12\",m.getString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 83,
    "startColumnNumber" : 14,
    "endLineNumber" : 83,
    "endColumnNumber" : 19
  }, {
    "charLength" : 5,
    "startLineNumber" : 85,
    "startColumnNumber" : 15,
    "endLineNumber" : 85,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}