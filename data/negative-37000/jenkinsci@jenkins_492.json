{
  "id" : 492,
  "expression" : "prefix1",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/test/java/hudson/util/RobustReflectionConverterTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "prefix1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 104,
      "startColumnNumber" : 36,
      "endLineNumber" : 104,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 48
      },
      "nodeContext" : "xs.toXML(p).replace(prefix1,\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 69
      },
      "nodeContext" : "xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 95
      },
      "nodeContext" : "xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 114
      },
      "nodeContext" : "xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\'')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 679,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 115
      },
      "nodeContext" : "assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 680,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 116
      },
      "nodeContext" : "assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1880,
        "startLineNumber" : 73,
        "startColumnNumber" : 50,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream xs=new XStream2(new XStream2.ClassOwnership(){\n    @Override public String ownerOf(    Class<?> clazz){\n      Owner o=clazz.getAnnotation(Owner.class);\n      return o != null ? o.value() : null;\n    }\n  }\n);\n  String prefix1=RobustReflectionConverterTest.class.getName() + \"_-\";\n  String prefix2=RobustReflectionConverterTest.class.getName() + \"$\";\n  Enchufla s1=new Enchufla();\n  s1.number=1;\n  s1.direction=\"North\";\n  Moonwalk s2=new Moonwalk();\n  s2.number=2;\n  s2.boot=new Boot();\n  s2.lover=new Billy();\n  Moonwalk s3=new Moonwalk();\n  s3.number=3;\n  s3.boot=new Boot();\n  s3.jacket=new Jacket();\n  s3.lover=new Jean();\n  Bild b=new Bild();\n  b.steppes=new Steppe[]{s1,s2,s3};\n  Projekt p=new Projekt();\n  p.bildz=new Bild[]{b};\n  assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n  Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n  assertEquals(Billy.class,s.lover.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void classOwnership() throws Exception {\n  XStream xs=new XStream2(new XStream2.ClassOwnership(){\n    @Override public String ownerOf(    Class<?> clazz){\n      Owner o=clazz.getAnnotation(Owner.class);\n      return o != null ? o.value() : null;\n    }\n  }\n);\n  String prefix1=RobustReflectionConverterTest.class.getName() + \"_-\";\n  String prefix2=RobustReflectionConverterTest.class.getName() + \"$\";\n  Enchufla s1=new Enchufla();\n  s1.number=1;\n  s1.direction=\"North\";\n  Moonwalk s2=new Moonwalk();\n  s2.number=2;\n  s2.boot=new Boot();\n  s2.lover=new Billy();\n  Moonwalk s3=new Moonwalk();\n  s3.number=3;\n  s3.boot=new Boot();\n  s3.jacket=new Jacket();\n  s3.lover=new Jean();\n  Bild b=new Bild();\n  b.steppes=new Steppe[]{s1,s2,s3};\n  Projekt p=new Projekt();\n  p.bildz=new Bild[]{b};\n  assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n  Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n  assertEquals(Billy.class,s.lover.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 104,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 114
      },
      "nodeContext" : "xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\'')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefix1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 105,
      "startColumnNumber" : 49,
      "endLineNumber" : 105,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 105,
        "startColumnNumber" : 43,
        "endLineNumber" : 105,
        "endColumnNumber" : 157
      },
      "nodeContext" : "\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 105,
        "startColumnNumber" : 32,
        "endLineNumber" : 105,
        "endColumnNumber" : 158
      },
      "nodeContext" : "xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 105,
        "startColumnNumber" : 21,
        "endLineNumber" : 105,
        "endColumnNumber" : 158
      },
      "nodeContext" : "(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 105,
        "startColumnNumber" : 17,
        "endLineNumber" : 105,
        "endColumnNumber" : 158
      },
      "nodeContext" : "s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1880,
        "startLineNumber" : 73,
        "startColumnNumber" : 50,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream xs=new XStream2(new XStream2.ClassOwnership(){\n    @Override public String ownerOf(    Class<?> clazz){\n      Owner o=clazz.getAnnotation(Owner.class);\n      return o != null ? o.value() : null;\n    }\n  }\n);\n  String prefix1=RobustReflectionConverterTest.class.getName() + \"_-\";\n  String prefix2=RobustReflectionConverterTest.class.getName() + \"$\";\n  Enchufla s1=new Enchufla();\n  s1.number=1;\n  s1.direction=\"North\";\n  Moonwalk s2=new Moonwalk();\n  s2.number=2;\n  s2.boot=new Boot();\n  s2.lover=new Billy();\n  Moonwalk s3=new Moonwalk();\n  s3.number=3;\n  s3.boot=new Boot();\n  s3.jacket=new Jacket();\n  s3.lover=new Jean();\n  Bild b=new Bild();\n  b.steppes=new Steppe[]{s1,s2,s3};\n  Projekt p=new Projekt();\n  p.bildz=new Bild[]{b};\n  assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n  Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n  assertEquals(Billy.class,s.lover.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void classOwnership() throws Exception {\n  XStream xs=new XStream2(new XStream2.ClassOwnership(){\n    @Override public String ownerOf(    Class<?> clazz){\n      Owner o=clazz.getAnnotation(Owner.class);\n      return o != null ? o.value() : null;\n    }\n  }\n);\n  String prefix1=RobustReflectionConverterTest.class.getName() + \"_-\";\n  String prefix2=RobustReflectionConverterTest.class.getName() + \"$\";\n  Enchufla s1=new Enchufla();\n  s1.number=1;\n  s1.direction=\"North\";\n  Moonwalk s2=new Moonwalk();\n  s2.number=2;\n  s2.boot=new Boot();\n  s2.lover=new Billy();\n  Moonwalk s3=new Moonwalk();\n  s3.number=3;\n  s3.boot=new Boot();\n  s3.jacket=new Jacket();\n  s3.lover=new Jean();\n  Bild b=new Bild();\n  b.steppes=new Steppe[]{s1,s2,s3};\n  Projekt p=new Projekt();\n  p.bildz=new Bild[]{b};\n  assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n  Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n  assertEquals(Billy.class,s.lover.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "prefix1",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 105,
      "startColumnNumber" : 136,
      "endLineNumber" : 105,
      "endColumnNumber" : 143
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 105,
        "startColumnNumber" : 43,
        "endLineNumber" : 105,
        "endColumnNumber" : 157
      },
      "nodeContext" : "\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 105,
        "startColumnNumber" : 32,
        "endLineNumber" : 105,
        "endColumnNumber" : 158
      },
      "nodeContext" : "xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 105,
        "startColumnNumber" : 21,
        "endLineNumber" : 105,
        "endColumnNumber" : 158
      },
      "nodeContext" : "(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\")",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 105,
        "startColumnNumber" : 17,
        "endLineNumber" : 105,
        "endColumnNumber" : 158
      },
      "nodeContext" : "s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1880,
        "startLineNumber" : 73,
        "startColumnNumber" : 50,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  XStream xs=new XStream2(new XStream2.ClassOwnership(){\n    @Override public String ownerOf(    Class<?> clazz){\n      Owner o=clazz.getAnnotation(Owner.class);\n      return o != null ? o.value() : null;\n    }\n  }\n);\n  String prefix1=RobustReflectionConverterTest.class.getName() + \"_-\";\n  String prefix2=RobustReflectionConverterTest.class.getName() + \"$\";\n  Enchufla s1=new Enchufla();\n  s1.number=1;\n  s1.direction=\"North\";\n  Moonwalk s2=new Moonwalk();\n  s2.number=2;\n  s2.boot=new Boot();\n  s2.lover=new Billy();\n  Moonwalk s3=new Moonwalk();\n  s3.number=3;\n  s3.boot=new Boot();\n  s3.jacket=new Jacket();\n  s3.lover=new Jean();\n  Bild b=new Bild();\n  b.steppes=new Steppe[]{s1,s2,s3};\n  Projekt p=new Projekt();\n  p.bildz=new Bild[]{b};\n  assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n  Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n  assertEquals(Billy.class,s.lover.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void classOwnership() throws Exception {\n  XStream xs=new XStream2(new XStream2.ClassOwnership(){\n    @Override public String ownerOf(    Class<?> clazz){\n      Owner o=clazz.getAnnotation(Owner.class);\n      return o != null ? o.value() : null;\n    }\n  }\n);\n  String prefix1=RobustReflectionConverterTest.class.getName() + \"_-\";\n  String prefix2=RobustReflectionConverterTest.class.getName() + \"$\";\n  Enchufla s1=new Enchufla();\n  s1.number=1;\n  s1.direction=\"North\";\n  Moonwalk s2=new Moonwalk();\n  s2.number=2;\n  s2.boot=new Boot();\n  s2.lover=new Billy();\n  Moonwalk s3=new Moonwalk();\n  s3.number=3;\n  s3.boot=new Boot();\n  s3.jacket=new Jacket();\n  s3.lover=new Jean();\n  Bild b=new Bild();\n  b.steppes=new Steppe[]{s1,s2,s3};\n  Projekt p=new Projekt();\n  p.bildz=new Bild[]{b};\n  assertEquals(\"<Projekt><bildz><Bild><steppes>\" + \"<Enchufla plugin='p1'><number>1</number><direction>North</direction></Enchufla>\" + \"<Moonwalk plugin='p2'><number>2</number><boot/><lover class='Billy' plugin='p3'/></Moonwalk>\"+ \"<Moonwalk plugin='p2'><number>3</number><boot/><jacket/><lover class='Jean' plugin='p4'/></Moonwalk>\"+ \"</steppes></Bild></bildz></Projekt>\",xs.toXML(p).replace(prefix1,\"\").replace(prefix2,\"\").replaceAll(\"\\r?\\n *\",\"\").replace('\"','\\''));\n  Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n  assertEquals(Billy.class,s.lover.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 159
      },
      "nodeContext" : "Moonwalk s=(Moonwalk)xs.fromXML(\"<\" + prefix1 + \"Moonwalk plugin='p2'><lover class='\"+ prefix2+ \"Billy' plugin='p3'/></\"+ prefix1+ \"Moonwalk>\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 104,
    "startColumnNumber" : 36,
    "endLineNumber" : 104,
    "endColumnNumber" : 43
  }, {
    "charLength" : 7,
    "startLineNumber" : 105,
    "startColumnNumber" : 49,
    "endLineNumber" : 105,
    "endColumnNumber" : 56
  }, {
    "charLength" : 7,
    "startLineNumber" : 105,
    "startColumnNumber" : 136,
    "endLineNumber" : 105,
    "endColumnNumber" : 143
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  } ]
}