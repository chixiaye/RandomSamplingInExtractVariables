{
  "id" : 166,
  "expression" : "boundRecord.binder",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "boundRecord.binder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 571,
      "startColumnNumber" : 39,
      "endLineNumber" : 571,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 571,
        "startColumnNumber" : 39,
        "endLineNumber" : 571,
        "endColumnNumber" : 65
      },
      "nodeContext" : "boundRecord.binder != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 571,
        "startColumnNumber" : 16,
        "endLineNumber" : 571,
        "endColumnNumber" : 65
      },
      "nodeContext" : "boundRecord != null && boundRecord.binder != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 571,
        "startColumnNumber" : 16,
        "endLineNumber" : 571,
        "endColumnNumber" : 103
      },
      "nodeContext" : "boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 571,
        "startColumnNumber" : 12,
        "endLineNumber" : 587,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n  if (boundRecord.doRebind) {\n    try {\n      IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n    }\n  }\n  ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n  connectService(connection,componentName,boundRecord);\n}\n else {\n  try {\n    IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n  }\n catch (  RemoteException e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 3087,
        "startLineNumber" : 521,
        "startColumnNumber" : 28,
        "endLineNumber" : 591,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n  if (serviceInfo == null) {\n    return 0;\n  }\n  ServiceRecord r=findRecordLocked(userId,serviceInfo);\n  boolean firstLaunch=r == null;\n  if (firstLaunch) {\n    if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n      startServiceCommon(service,false,userId);\n      r=findRecordLocked(userId,serviceInfo);\n    }\n  }\n  boolean canBind=true;\n  if (r == null) {\n    r=new ServiceRecord();\n    r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n    r.startId=0;\n    r.activeSince=SystemClock.elapsedRealtime();\n    r.serviceInfo=serviceInfo;\n    ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n    intentBindRecord.addConnection(connection);\n    addRecord(r);\n    canBind=false;\n  }\n  ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n  AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n  ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n  IBinder binder=connection.asBinder();\n  ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    r.connections.put(binder,clist);\n  }\n  clist.add(c);\n  b.connections.add(c);\n  clist=mServiceConnections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    mServiceConnections.put(binder,clist);\n  }\n  clist.add(c);\n  if (!canBind) {\n    return 0;\n  }\n  ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n  if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n    if (boundRecord.doRebind) {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n    connectService(connection,componentName,boundRecord);\n  }\n else {\n    try {\n      IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n    }\n  }\n  r.lastActivityTime=SystemClock.uptimeMillis();\n  r.addToBoundIntent(service,connection);\n  return 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3107,
        "startLineNumber" : 521,
        "startColumnNumber" : 8,
        "endLineNumber" : 591,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this) {\n  ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n  if (serviceInfo == null) {\n    return 0;\n  }\n  ServiceRecord r=findRecordLocked(userId,serviceInfo);\n  boolean firstLaunch=r == null;\n  if (firstLaunch) {\n    if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n      startServiceCommon(service,false,userId);\n      r=findRecordLocked(userId,serviceInfo);\n    }\n  }\n  boolean canBind=true;\n  if (r == null) {\n    r=new ServiceRecord();\n    r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n    r.startId=0;\n    r.activeSince=SystemClock.elapsedRealtime();\n    r.serviceInfo=serviceInfo;\n    ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n    intentBindRecord.addConnection(connection);\n    addRecord(r);\n    canBind=false;\n  }\n  ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n  AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n  ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n  IBinder binder=connection.asBinder();\n  ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    r.connections.put(binder,clist);\n  }\n  clist.add(c);\n  b.connections.add(c);\n  clist=mServiceConnections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    mServiceConnections.put(binder,clist);\n  }\n  clist.add(c);\n  if (!canBind) {\n    return 0;\n  }\n  ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n  if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n    if (boundRecord.doRebind) {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n    connectService(connection,componentName,boundRecord);\n  }\n else {\n    try {\n      IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n    }\n  }\n  r.lastActivityTime=SystemClock.uptimeMillis();\n  r.addToBoundIntent(service,connection);\n  return 1;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 379,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3123,
        "startLineNumber" : 520,
        "startColumnNumber" : 81,
        "endLineNumber" : 592,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (this) {\n    ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n    if (serviceInfo == null) {\n      return 0;\n    }\n    ServiceRecord r=findRecordLocked(userId,serviceInfo);\n    boolean firstLaunch=r == null;\n    if (firstLaunch) {\n      if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n        startServiceCommon(service,false,userId);\n        r=findRecordLocked(userId,serviceInfo);\n      }\n    }\n    boolean canBind=true;\n    if (r == null) {\n      r=new ServiceRecord();\n      r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n      r.startId=0;\n      r.activeSince=SystemClock.elapsedRealtime();\n      r.serviceInfo=serviceInfo;\n      ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n      intentBindRecord.addConnection(connection);\n      addRecord(r);\n      canBind=false;\n    }\n    ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n    AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n    ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n    IBinder binder=connection.asBinder();\n    ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      r.connections.put(binder,clist);\n    }\n    clist.add(c);\n    b.connections.add(c);\n    clist=mServiceConnections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      mServiceConnections.put(binder,clist);\n    }\n    clist.add(c);\n    if (!canBind) {\n      return 0;\n    }\n    ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n    if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n      if (boundRecord.doRebind) {\n        try {\n          IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n        }\n catch (        RemoteException e) {\n          e.printStackTrace();\n        }\n      }\n      ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n      connectService(connection,componentName,boundRecord);\n    }\n else {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    r.lastActivityTime=SystemClock.uptimeMillis();\n    r.addToBoundIntent(service,connection);\n    return 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3309,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 592,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public int bindService(IBinder caller,IBinder token,Intent service,String resolvedType,IServiceConnection connection,int flags,int userId){\nsynchronized (this) {\n    ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n    if (serviceInfo == null) {\n      return 0;\n    }\n    ServiceRecord r=findRecordLocked(userId,serviceInfo);\n    boolean firstLaunch=r == null;\n    if (firstLaunch) {\n      if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n        startServiceCommon(service,false,userId);\n        r=findRecordLocked(userId,serviceInfo);\n      }\n    }\n    boolean canBind=true;\n    if (r == null) {\n      r=new ServiceRecord();\n      r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n      r.startId=0;\n      r.activeSince=SystemClock.elapsedRealtime();\n      r.serviceInfo=serviceInfo;\n      ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n      intentBindRecord.addConnection(connection);\n      addRecord(r);\n      canBind=false;\n    }\n    ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n    AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n    ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n    IBinder binder=connection.asBinder();\n    ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      r.connections.put(binder,clist);\n    }\n    clist.add(c);\n    b.connections.add(c);\n    clist=mServiceConnections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      mServiceConnections.put(binder,clist);\n    }\n    clist.add(c);\n    if (!canBind) {\n      return 0;\n    }\n    ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n    if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n      if (boundRecord.doRebind) {\n        try {\n          IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n        }\n catch (        RemoteException e) {\n          e.printStackTrace();\n        }\n      }\n      ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n      connectService(connection,componentName,boundRecord);\n    }\n else {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    r.lastActivityTime=SystemClock.uptimeMillis();\n    r.addToBoundIntent(service,connection);\n    return 1;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 571,
        "startColumnNumber" : 16,
        "endLineNumber" : 571,
        "endColumnNumber" : 103
      },
      "nodeContext" : "boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.lody.virtual.server.am.IBinder"
  }, {
    "nodeContext" : "boundRecord.binder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 571,
      "startColumnNumber" : 69,
      "endLineNumber" : 571,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 571,
        "startColumnNumber" : 69,
        "endLineNumber" : 571,
        "endColumnNumber" : 103
      },
      "nodeContext" : "boundRecord.binder.isBinderAlive()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 571,
        "startColumnNumber" : 16,
        "endLineNumber" : 571,
        "endColumnNumber" : 103
      },
      "nodeContext" : "boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 571,
        "startColumnNumber" : 12,
        "endLineNumber" : 587,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n  if (boundRecord.doRebind) {\n    try {\n      IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n    }\n  }\n  ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n  connectService(connection,componentName,boundRecord);\n}\n else {\n  try {\n    IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n  }\n catch (  RemoteException e) {\n    e.printStackTrace();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 3087,
        "startLineNumber" : 521,
        "startColumnNumber" : 28,
        "endLineNumber" : 591,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n  if (serviceInfo == null) {\n    return 0;\n  }\n  ServiceRecord r=findRecordLocked(userId,serviceInfo);\n  boolean firstLaunch=r == null;\n  if (firstLaunch) {\n    if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n      startServiceCommon(service,false,userId);\n      r=findRecordLocked(userId,serviceInfo);\n    }\n  }\n  boolean canBind=true;\n  if (r == null) {\n    r=new ServiceRecord();\n    r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n    r.startId=0;\n    r.activeSince=SystemClock.elapsedRealtime();\n    r.serviceInfo=serviceInfo;\n    ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n    intentBindRecord.addConnection(connection);\n    addRecord(r);\n    canBind=false;\n  }\n  ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n  AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n  ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n  IBinder binder=connection.asBinder();\n  ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    r.connections.put(binder,clist);\n  }\n  clist.add(c);\n  b.connections.add(c);\n  clist=mServiceConnections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    mServiceConnections.put(binder,clist);\n  }\n  clist.add(c);\n  if (!canBind) {\n    return 0;\n  }\n  ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n  if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n    if (boundRecord.doRebind) {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n    connectService(connection,componentName,boundRecord);\n  }\n else {\n    try {\n      IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n    }\n  }\n  r.lastActivityTime=SystemClock.uptimeMillis();\n  r.addToBoundIntent(service,connection);\n  return 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3107,
        "startLineNumber" : 521,
        "startColumnNumber" : 8,
        "endLineNumber" : 591,
        "endColumnNumber" : 9
      },
      "nodeContext" : "synchronized (this) {\n  ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n  if (serviceInfo == null) {\n    return 0;\n  }\n  ServiceRecord r=findRecordLocked(userId,serviceInfo);\n  boolean firstLaunch=r == null;\n  if (firstLaunch) {\n    if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n      startServiceCommon(service,false,userId);\n      r=findRecordLocked(userId,serviceInfo);\n    }\n  }\n  boolean canBind=true;\n  if (r == null) {\n    r=new ServiceRecord();\n    r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n    r.startId=0;\n    r.activeSince=SystemClock.elapsedRealtime();\n    r.serviceInfo=serviceInfo;\n    ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n    intentBindRecord.addConnection(connection);\n    addRecord(r);\n    canBind=false;\n  }\n  ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n  AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n  ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n  IBinder binder=connection.asBinder();\n  ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    r.connections.put(binder,clist);\n  }\n  clist.add(c);\n  b.connections.add(c);\n  clist=mServiceConnections.get(binder);\n  if (clist == null) {\n    clist=new ArrayList<>();\n    mServiceConnections.put(binder,clist);\n  }\n  clist.add(c);\n  if (!canBind) {\n    return 0;\n  }\n  ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n  if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n    if (boundRecord.doRebind) {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n    connectService(connection,componentName,boundRecord);\n  }\n else {\n    try {\n      IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n    }\n  }\n  r.lastActivityTime=SystemClock.uptimeMillis();\n  r.addToBoundIntent(service,connection);\n  return 1;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 379,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3123,
        "startLineNumber" : 520,
        "startColumnNumber" : 81,
        "endLineNumber" : 592,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (this) {\n    ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n    if (serviceInfo == null) {\n      return 0;\n    }\n    ServiceRecord r=findRecordLocked(userId,serviceInfo);\n    boolean firstLaunch=r == null;\n    if (firstLaunch) {\n      if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n        startServiceCommon(service,false,userId);\n        r=findRecordLocked(userId,serviceInfo);\n      }\n    }\n    boolean canBind=true;\n    if (r == null) {\n      r=new ServiceRecord();\n      r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n      r.startId=0;\n      r.activeSince=SystemClock.elapsedRealtime();\n      r.serviceInfo=serviceInfo;\n      ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n      intentBindRecord.addConnection(connection);\n      addRecord(r);\n      canBind=false;\n    }\n    ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n    AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n    ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n    IBinder binder=connection.asBinder();\n    ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      r.connections.put(binder,clist);\n    }\n    clist.add(c);\n    b.connections.add(c);\n    clist=mServiceConnections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      mServiceConnections.put(binder,clist);\n    }\n    clist.add(c);\n    if (!canBind) {\n      return 0;\n    }\n    ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n    if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n      if (boundRecord.doRebind) {\n        try {\n          IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n        }\n catch (        RemoteException e) {\n          e.printStackTrace();\n        }\n      }\n      ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n      connectService(connection,componentName,boundRecord);\n    }\n else {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    r.lastActivityTime=SystemClock.uptimeMillis();\n    r.addToBoundIntent(service,connection);\n    return 1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3309,
        "startLineNumber" : 518,
        "startColumnNumber" : 4,
        "endLineNumber" : 592,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public int bindService(IBinder caller,IBinder token,Intent service,String resolvedType,IServiceConnection connection,int flags,int userId){\nsynchronized (this) {\n    ServiceInfo serviceInfo=resolveServiceInfo(service,userId);\n    if (serviceInfo == null) {\n      return 0;\n    }\n    ServiceRecord r=findRecordLocked(userId,serviceInfo);\n    boolean firstLaunch=r == null;\n    if (firstLaunch) {\n      if ((flags & Context.BIND_AUTO_CREATE) != 0) {\n        startServiceCommon(service,false,userId);\n        r=findRecordLocked(userId,serviceInfo);\n      }\n    }\n    boolean canBind=true;\n    if (r == null) {\n      r=new ServiceRecord();\n      r.name=new ComponentName(serviceInfo.packageName,serviceInfo.name);\n      r.startId=0;\n      r.activeSince=SystemClock.elapsedRealtime();\n      r.serviceInfo=serviceInfo;\n      ServiceRecord.IntentBindRecord intentBindRecord=r.retrieveIntentBindRecord(service);\n      intentBindRecord.addConnection(connection);\n      addRecord(r);\n      canBind=false;\n    }\n    ProcessRecord processRecord=getRecordForAppLocked(caller,userId);\n    AppBindRecord b=r.retrieveAppBindingLocked(service,processRecord);\n    ConnectionRecord c=new ConnectionRecord(b,connection,flags);\n    IBinder binder=connection.asBinder();\n    ArrayList<ConnectionRecord> clist=r.connections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      r.connections.put(binder,clist);\n    }\n    clist.add(c);\n    b.connections.add(c);\n    clist=mServiceConnections.get(binder);\n    if (clist == null) {\n      clist=new ArrayList<>();\n      mServiceConnections.put(binder,clist);\n    }\n    clist.add(c);\n    if (!canBind) {\n      return 0;\n    }\n    ServiceRecord.IntentBindRecord boundRecord=r.peekBinding(service);\n    if (boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()) {\n      if (boundRecord.doRebind) {\n        try {\n          IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,true,0);\n        }\n catch (        RemoteException e) {\n          e.printStackTrace();\n        }\n      }\n      ComponentName componentName=new ComponentName(r.serviceInfo.packageName,r.serviceInfo.name);\n      connectService(connection,componentName,boundRecord);\n    }\n else {\n      try {\n        IApplicationThreadCompat.scheduleBindService(r.process.appThread,r,service,false,0);\n      }\n catch (      RemoteException e) {\n        e.printStackTrace();\n      }\n    }\n    r.lastActivityTime=SystemClock.uptimeMillis();\n    r.addToBoundIntent(service,connection);\n    return 1;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 412,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 571,
        "startColumnNumber" : 16,
        "endLineNumber" : 571,
        "endColumnNumber" : 103
      },
      "nodeContext" : "boundRecord != null && boundRecord.binder != null && boundRecord.binder.isBinderAlive()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "com.lody.virtual.server.am.IBinder"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 571,
    "startColumnNumber" : 39,
    "endLineNumber" : 571,
    "endColumnNumber" : 57
  }, {
    "charLength" : 18,
    "startLineNumber" : 571,
    "startColumnNumber" : 69,
    "endLineNumber" : 571,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}