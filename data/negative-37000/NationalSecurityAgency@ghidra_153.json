{
  "id" : 153,
  "expression" : "ff.getBigFloat(2.5d)",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/test/java/ghidra/pcode/opbehavior/OpBehaviorFloatRoundTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ff.getBigFloat(2.5d)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 83,
      "startColumnNumber" : 32,
      "endLineNumber" : 83,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 83,
        "startColumnNumber" : 17,
        "endLineNumber" : 83,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ff.getEncoding(ff.getBigFloat(2.5d))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 83,
        "startColumnNumber" : 13,
        "endLineNumber" : 83,
        "endColumnNumber" : 53
      },
      "nodeContext" : "a=ff.getEncoding(ff.getBigFloat(2.5d))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 54
      },
      "nodeContext" : "BigInteger a=ff.getEncoding(ff.getBigFloat(2.5d));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 77,
        "startColumnNumber" : 44,
        "endLineNumber" : 119,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  OpBehaviorFloatRound op=new OpBehaviorFloatRound();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigInteger a=ff.getEncoding(ff.getBigFloat(2.5d));\n  BigInteger result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(3.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(2.25d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(2.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(2.75d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(3.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(-2.5d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(-2.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(-2.25d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(-2.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(-2.75d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(-3.0d),ff.getHostFloat(result));\n  a=ff.getBigInfinityEncoding(false);\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigInfinity(false),ff.getHostFloat(result));\n  a=ff.getBigInfinityEncoding(true);\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigInfinity(true),ff.getHostFloat(result));\n  a=ff.getBigNaNEncoding(false);\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigNaN(false),ff.getHostFloat(result));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 76,
        "startColumnNumber" : 1,
        "endLineNumber" : 119,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testEvaluateBinaryBigInteger(){\n  OpBehaviorFloatRound op=new OpBehaviorFloatRound();\n  FloatFormat ff=FloatFormatFactory.getFloatFormat(8);\n  BigInteger a=ff.getEncoding(ff.getBigFloat(2.5d));\n  BigInteger result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(3.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(2.25d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(2.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(2.75d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(3.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(-2.5d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(-2.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(-2.25d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(-2.0d),ff.getHostFloat(result));\n  a=ff.getEncoding(ff.getBigFloat(-2.75d));\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigFloat(-3.0d),ff.getHostFloat(result));\n  a=ff.getBigInfinityEncoding(false);\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigInfinity(false),ff.getHostFloat(result));\n  a=ff.getBigInfinityEncoding(true);\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigInfinity(true),ff.getHostFloat(result));\n  a=ff.getBigNaNEncoding(false);\n  result=op.evaluateUnary(8,8,a);\n  Assert.assertEquals(ff.getBigNaN(false),ff.getHostFloat(result));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 304,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 83,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 54
      },
      "nodeContext" : "BigInteger a=ff.getEncoding(ff.getBigFloat(2.5d));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "ghidra.pcode.floatformat.BigFloat"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 83,
    "startColumnNumber" : 32,
    "endLineNumber" : 83,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}