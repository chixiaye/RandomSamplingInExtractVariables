{
  "id" : 269,
  "expression" : "candidateFieldToBeInjected.getType()",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "candidateFieldToBeInjected.getType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 27,
      "startColumnNumber" : 16,
      "endLineNumber" : 27,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 27,
        "startColumnNumber" : 16,
        "endLineNumber" : 27,
        "endColumnNumber" : 86
      },
      "nodeContext" : "candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 29,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())) {\n  mockTypeMatches.add(mock);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 162,
        "startLineNumber" : 26,
        "startColumnNumber" : 34,
        "endLineNumber" : 30,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())) {\n    mockTypeMatches.add(mock);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Object mock : mocks) {\n  if (candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())) {\n    mockTypeMatches.add(mock);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 24,
        "startColumnNumber" : 35,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Object> mockTypeMatches=new ArrayList<Object>();\n  for (  Object mock : mocks) {\n    if (candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())) {\n      mockTypeMatches.add(mock);\n    }\n  }\n  return next.filterCandidate(mockTypeMatches,candidateFieldToBeInjected,allRemainingCandidateFields,injectee);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public OngoingInjector filterCandidate(final Collection<Object> mocks,final Field candidateFieldToBeInjected,final List<Field> allRemainingCandidateFields,final Object injectee){\n  List<Object> mockTypeMatches=new ArrayList<Object>();\n  for (  Object mock : mocks) {\n    if (candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())) {\n      mockTypeMatches.add(mock);\n    }\n  }\n  return next.filterCandidate(mockTypeMatches,candidateFieldToBeInjected,allRemainingCandidateFields,injectee);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 76,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 27,
        "startColumnNumber" : 16,
        "endLineNumber" : 27,
        "endColumnNumber" : 86
      },
      "nodeContext" : "candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 27,
    "startColumnNumber" : 16,
    "endLineNumber" : 27,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}