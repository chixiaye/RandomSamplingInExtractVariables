{
  "id" : 202,
  "expression" : "x1 <= x2 && y1 <= y2",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/quadtree/QuadTreeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "x1 <= x2 && y1 <= y2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 206,
      "startColumnNumber" : 12,
      "endLineNumber" : 206,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 206,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x1 <= x2 && y1 <= y2) {\n  QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n  int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n  int quadTreeCount=quadTree.count(region);\n  assertThat(quadTreeCount).isEqualTo(expectedPts);\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 773,
        "startLineNumber" : 198,
        "startColumnNumber" : 37,
        "endLineNumber" : 219,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int x1=(int)(Math.random() * (W));\n  int y1=(int)(Math.random() * (H));\n  int x2=x1 + (int)(Math.random() * (W - x1));\n  int y2=y1 + (int)(Math.random() * (H - y1));\n  if (x1 <= x2 && y1 <= y2) {\n    QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n    int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n    int quadTreeCount=quadTree.count(region);\n    assertThat(quadTreeCount).isEqualTo(expectedPts);\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 804,
        "startLineNumber" : 198,
        "startColumnNumber" : 6,
        "endLineNumber" : 219,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < TEST_SZ; ) {\n  int x1=(int)(Math.random() * (W));\n  int y1=(int)(Math.random() * (H));\n  int x2=x1 + (int)(Math.random() * (W - x1));\n  int y2=y1 + (int)(Math.random() * (H - y1));\n  if (x1 <= x2 && y1 <= y2) {\n    QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n    int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n    int quadTreeCount=quadTree.count(region);\n    assertThat(quadTreeCount).isEqualTo(expectedPts);\n    i++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1401,
        "startLineNumber" : 180,
        "startColumnNumber" : 45,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int W=1 + (int)(Math.random() * MAX_RAND_NUM);\n  int H=1 + (int)(Math.random() * MAX_RAND_NUM);\n  QuadTree quadTree=new QuadTree(new QuadTree.Rect(0,0,W,H));\n  int[][] grid=new int[H + 1][W + 1];\n  for (int i=0; i < TEST_SZ; i++) {\n    int x=(int)(Math.random() * (W + 1));\n    int y=(int)(Math.random() * (H + 1));\n    assertThat(quadTree.add(x,y)).isTrue();\n    grid[y][x]++;\n  }\n  for (int i=0; i < TEST_SZ; ) {\n    int x1=(int)(Math.random() * (W));\n    int y1=(int)(Math.random() * (H));\n    int x2=x1 + (int)(Math.random() * (W - x1));\n    int y2=y1 + (int)(Math.random() * (H - y1));\n    if (x1 <= x2 && y1 <= y2) {\n      QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n      int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n      int quadTreeCount=quadTree.count(region);\n      assertThat(quadTreeCount).isEqualTo(expectedPts);\n      i++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1442,
        "startLineNumber" : 180,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int test=0; test < LOOPS; test++) {\n  int W=1 + (int)(Math.random() * MAX_RAND_NUM);\n  int H=1 + (int)(Math.random() * MAX_RAND_NUM);\n  QuadTree quadTree=new QuadTree(new QuadTree.Rect(0,0,W,H));\n  int[][] grid=new int[H + 1][W + 1];\n  for (int i=0; i < TEST_SZ; i++) {\n    int x=(int)(Math.random() * (W + 1));\n    int y=(int)(Math.random() * (H + 1));\n    assertThat(quadTree.add(x,y)).isTrue();\n    grid[y][x]++;\n  }\n  for (int i=0; i < TEST_SZ; ) {\n    int x1=(int)(Math.random() * (W));\n    int y1=(int)(Math.random() * (H));\n    int x2=x1 + (int)(Math.random() * (W - x1));\n    int y2=y1 + (int)(Math.random() * (H - y1));\n    if (x1 <= x2 && y1 <= y2) {\n      QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n      int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n      int quadTreeCount=quadTree.count(region);\n      assertThat(quadTreeCount).isEqualTo(expectedPts);\n      i++;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 258,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1453,
        "startLineNumber" : 178,
        "startColumnNumber" : 37,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int test=0; test < LOOPS; test++) {\n    int W=1 + (int)(Math.random() * MAX_RAND_NUM);\n    int H=1 + (int)(Math.random() * MAX_RAND_NUM);\n    QuadTree quadTree=new QuadTree(new QuadTree.Rect(0,0,W,H));\n    int[][] grid=new int[H + 1][W + 1];\n    for (int i=0; i < TEST_SZ; i++) {\n      int x=(int)(Math.random() * (W + 1));\n      int y=(int)(Math.random() * (H + 1));\n      assertThat(quadTree.add(x,y)).isTrue();\n      grid[y][x]++;\n    }\n    for (int i=0; i < TEST_SZ; ) {\n      int x1=(int)(Math.random() * (W));\n      int y1=(int)(Math.random() * (H));\n      int x2=x1 + (int)(Math.random() * (W - x1));\n      int y2=y1 + (int)(Math.random() * (H - y1));\n      if (x1 <= x2 && y1 <= y2) {\n        QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n        int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n        int quadTreeCount=quadTree.count(region);\n        assertThat(quadTreeCount).isEqualTo(expectedPts);\n        i++;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1496,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void randomizedQueryTests(){\n  for (int test=0; test < LOOPS; test++) {\n    int W=1 + (int)(Math.random() * MAX_RAND_NUM);\n    int H=1 + (int)(Math.random() * MAX_RAND_NUM);\n    QuadTree quadTree=new QuadTree(new QuadTree.Rect(0,0,W,H));\n    int[][] grid=new int[H + 1][W + 1];\n    for (int i=0; i < TEST_SZ; i++) {\n      int x=(int)(Math.random() * (W + 1));\n      int y=(int)(Math.random() * (H + 1));\n      assertThat(quadTree.add(x,y)).isTrue();\n      grid[y][x]++;\n    }\n    for (int i=0; i < TEST_SZ; ) {\n      int x1=(int)(Math.random() * (W));\n      int y1=(int)(Math.random() * (H));\n      int x2=x1 + (int)(Math.random() * (W - x1));\n      int y2=y1 + (int)(Math.random() * (H - y1));\n      if (x1 <= x2 && y1 <= y2) {\n        QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n        int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n        int quadTreeCount=quadTree.count(region);\n        assertThat(quadTreeCount).isEqualTo(expectedPts);\n        i++;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 265,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 206,
        "startColumnNumber" : 8,
        "endLineNumber" : 218,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x1 <= x2 && y1 <= y2) {\n  QuadTree.Rect region=new QuadTree.Rect(x1,y1,x2,y2);\n  int expectedPts=bruteForceCount(grid,x1,y1,x2,y2);\n  int quadTreeCount=quadTree.count(region);\n  assertThat(quadTreeCount).isEqualTo(expectedPts);\n  i++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 206,
    "startColumnNumber" : 12,
    "endLineNumber" : 206,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}