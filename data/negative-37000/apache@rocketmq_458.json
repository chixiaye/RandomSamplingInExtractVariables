{
  "id" : 458,
  "expression" : "\"/conf/logback_snode.xml\"",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/snode/src/main/java/org/apache/rocketmq/snode/SnodeStartup.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"/conf/logback_snode.xml\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 116,
      "startColumnNumber" : 65,
      "endLineNumber" : 116,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 116,
        "startColumnNumber" : 33,
        "endLineNumber" : 116,
        "endColumnNumber" : 90
      },
      "nodeContext" : "snodeConfig.getRocketmqHome() + \"/conf/logback_snode.xml\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 91
      },
      "nodeContext" : "configurator.doConfigure(snodeConfig.getRocketmqHome() + \"/conf/logback_snode.xml\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 92
      },
      "nodeContext" : "configurator.doConfigure(snodeConfig.getRocketmqHome() + \"/conf/logback_snode.xml\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3416,
        "startLineNumber" : 77,
        "startColumnNumber" : 106,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Options options=ServerUtil.buildCommandlineOptions(new Options());\n  commandLine=ServerUtil.parseCmdLine(\"snode\",args,buildCommandlineOptions(options),new PosixParser());\n  if (null == commandLine) {\n    System.exit(-1);\n  }\n  final SnodeConfig snodeConfig=new SnodeConfig();\n  final ServerConfig nettyServerConfig=new ServerConfig();\n  final ClientConfig nettyClientConfig=new ClientConfig();\n  nettyServerConfig.setListenPort(snodeConfig.getListenPort());\n  nettyServerConfig.setListenPort(11911);\n  nettyClientConfig.setUseTLS(Boolean.parseBoolean(System.getProperty(TLS_ENABLE,String.valueOf(TlsSystemConfig.tlsMode == TlsMode.ENFORCING))));\n  if (commandLine.hasOption('c')) {\n    String file=commandLine.getOptionValue('c');\n    if (file != null) {\n      configFile=file;\n      InputStream in=new BufferedInputStream(new FileInputStream(file));\n      properties=new Properties();\n      properties.load(in);\n      MixAll.properties2Object(properties,snodeConfig);\n      MixAll.properties2Object(properties,nettyServerConfig);\n      MixAll.properties2Object(properties,nettyClientConfig);\n      in.close();\n    }\n  }\n  if (null == snodeConfig.getRocketmqHome()) {\n    System.out.printf(\"Please set the %s variable in your environment to match the location of the RocketMQ installation\",MixAll.ROCKETMQ_HOME_ENV);\n    System.exit(-2);\n  }\n  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();\n  JoranConfigurator configurator=new JoranConfigurator();\n  configurator.setContext(lc);\n  lc.reset();\n  configurator.doConfigure(snodeConfig.getRocketmqHome() + \"/conf/logback_snode.xml\");\n  log=InternalLoggerFactory.getLogger(LoggerName.SNODE_LOGGER_NAME);\n  MixAll.printObjectProperties(log,snodeConfig);\n  MixAll.printObjectProperties(log,nettyClientConfig);\n  MixAll.printObjectProperties(log,nettyServerConfig);\n  final SnodeController snodeController=new SnodeController(nettyServerConfig,nettyClientConfig,snodeConfig);\n  boolean initResult=snodeController.initialize();\n  if (!initResult) {\n    snodeController.shutdown();\n    System.exit(-3);\n  }\n  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){\n    private volatile boolean hasShutdown=false;\n    private AtomicInteger shutdownTimes=new AtomicInteger(0);\n    @Override public void run(){\nsynchronized (this) {\n        log.info(\"Shutdown hook was invoked, {}\",this.shutdownTimes.incrementAndGet());\n        if (!this.hasShutdown) {\n          this.hasShutdown=true;\n          long beginTime=System.currentTimeMillis();\n          snodeController.shutdown();\n          long consumingTimeTotal=System.currentTimeMillis() - beginTime;\n          log.info(\"Shutdown hook over, consuming total time(ms): {}\",consumingTimeTotal);\n        }\n      }\n    }\n  }\n,\"ShutdownHook\"));\n  return snodeController;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3518,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static SnodeController createSnodeController(String[] args) throws IOException, JoranException {\n  Options options=ServerUtil.buildCommandlineOptions(new Options());\n  commandLine=ServerUtil.parseCmdLine(\"snode\",args,buildCommandlineOptions(options),new PosixParser());\n  if (null == commandLine) {\n    System.exit(-1);\n  }\n  final SnodeConfig snodeConfig=new SnodeConfig();\n  final ServerConfig nettyServerConfig=new ServerConfig();\n  final ClientConfig nettyClientConfig=new ClientConfig();\n  nettyServerConfig.setListenPort(snodeConfig.getListenPort());\n  nettyServerConfig.setListenPort(11911);\n  nettyClientConfig.setUseTLS(Boolean.parseBoolean(System.getProperty(TLS_ENABLE,String.valueOf(TlsSystemConfig.tlsMode == TlsMode.ENFORCING))));\n  if (commandLine.hasOption('c')) {\n    String file=commandLine.getOptionValue('c');\n    if (file != null) {\n      configFile=file;\n      InputStream in=new BufferedInputStream(new FileInputStream(file));\n      properties=new Properties();\n      properties.load(in);\n      MixAll.properties2Object(properties,snodeConfig);\n      MixAll.properties2Object(properties,nettyServerConfig);\n      MixAll.properties2Object(properties,nettyClientConfig);\n      in.close();\n    }\n  }\n  if (null == snodeConfig.getRocketmqHome()) {\n    System.out.printf(\"Please set the %s variable in your environment to match the location of the RocketMQ installation\",MixAll.ROCKETMQ_HOME_ENV);\n    System.exit(-2);\n  }\n  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();\n  JoranConfigurator configurator=new JoranConfigurator();\n  configurator.setContext(lc);\n  lc.reset();\n  configurator.doConfigure(snodeConfig.getRocketmqHome() + \"/conf/logback_snode.xml\");\n  log=InternalLoggerFactory.getLogger(LoggerName.SNODE_LOGGER_NAME);\n  MixAll.printObjectProperties(log,snodeConfig);\n  MixAll.printObjectProperties(log,nettyClientConfig);\n  MixAll.printObjectProperties(log,nettyServerConfig);\n  final SnodeController snodeController=new SnodeController(nettyServerConfig,nettyClientConfig,snodeConfig);\n  boolean initResult=snodeController.initialize();\n  if (!initResult) {\n    snodeController.shutdown();\n    System.exit(-3);\n  }\n  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){\n    private volatile boolean hasShutdown=false;\n    private AtomicInteger shutdownTimes=new AtomicInteger(0);\n    @Override public void run(){\nsynchronized (this) {\n        log.info(\"Shutdown hook was invoked, {}\",this.shutdownTimes.incrementAndGet());\n        if (!this.hasShutdown) {\n          this.hasShutdown=true;\n          long beginTime=System.currentTimeMillis();\n          snodeController.shutdown();\n          long consumingTimeTotal=System.currentTimeMillis() - beginTime;\n          log.info(\"Shutdown hook over, consuming total time(ms): {}\",consumingTimeTotal);\n        }\n      }\n    }\n  }\n,\"ShutdownHook\"));\n  return snodeController;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 393,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 92
      },
      "nodeContext" : "configurator.doConfigure(snodeConfig.getRocketmqHome() + \"/conf/logback_snode.xml\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 116,
    "startColumnNumber" : 65,
    "endLineNumber" : 116,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}