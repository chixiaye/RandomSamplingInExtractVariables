{
  "id" : 41,
  "expression" : "new TestAction(new Callable<Void>(){\n  @Override public Void call() throws Exception {\n    Thread.sleep(100);\n    completedTasks.getAndIncrement();\n    throw new IOException(\"task failed\");\n  }\n}\n,inputs,ImmutableSet.of(out)){\n  @Override public ActionResult execute(  ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n    if (catastrophe && iCopy == 0) {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      completedTasks.getAndIncrement();\n      DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n      throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n    }\n    return super.execute(actionExecutionContext);\n  }\n}\n",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/skyframe/ParallelBuilderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TestAction(new Callable<Void>(){\n  @Override public Void call() throws Exception {\n    Thread.sleep(100);\n    completedTasks.getAndIncrement();\n    throw new IOException(\"task failed\");\n  }\n}\n,inputs,ImmutableSet.of(out)){\n  @Override public ActionResult execute(  ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n    if (catastrophe && iCopy == 0) {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      completedTasks.getAndIncrement();\n      DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n      throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n    }\n    return super.execute(actionExecutionContext);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1299,
      "startLineNumber" : 671,
      "startColumnNumber" : 10,
      "endLineNumber" : 701,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 120,
    "astHeight" : 14,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1326,
        "startLineNumber" : 670,
        "startColumnNumber" : 6,
        "endLineNumber" : 701,
        "endColumnNumber" : 12
      },
      "nodeContext" : "registerAction(new TestAction(new Callable<Void>(){\n  @Override public Void call() throws Exception {\n    Thread.sleep(100);\n    completedTasks.getAndIncrement();\n    throw new IOException(\"task failed\");\n  }\n}\n,inputs,ImmutableSet.of(out)){\n  @Override public ActionResult execute(  ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n    if (catastrophe && iCopy == 0) {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      completedTasks.getAndIncrement();\n      DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n      throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n    }\n    return super.execute(actionExecutionContext);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 122,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 670,
        "startColumnNumber" : 6,
        "endLineNumber" : 701,
        "endColumnNumber" : 13
      },
      "nodeContext" : "registerAction(new TestAction(new Callable<Void>(){\n  @Override public Void call() throws Exception {\n    Thread.sleep(100);\n    completedTasks.getAndIncrement();\n    throw new IOException(\"task failed\");\n  }\n}\n,inputs,ImmutableSet.of(out)){\n  @Override public ActionResult execute(  ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n    if (catastrophe && iCopy == 0) {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      completedTasks.getAndIncrement();\n      DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n      throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n    }\n    return super.execute(actionExecutionContext);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 123,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1569,
        "startLineNumber" : 665,
        "startColumnNumber" : 41,
        "endLineNumber" : 703,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Artifact out=createDerivedArtifact(ii + \".out\");\n  NestedSet<Artifact> inputs=(catastrophe && ii > 10) ? asNestedSet(artifacts[0]) : emptyNestedSet;\n  final int iCopy=ii;\n  registerAction(new TestAction(new Callable<Void>(){\n    @Override public Void call() throws Exception {\n      Thread.sleep(100);\n      completedTasks.getAndIncrement();\n      throw new IOException(\"task failed\");\n    }\n  }\n,inputs,ImmutableSet.of(out)){\n    @Override public ActionResult execute(    ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n      if (catastrophe && iCopy == 0) {\n        try {\n          Thread.sleep(300);\n        }\n catch (        InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        completedTasks.getAndIncrement();\n        DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n        throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n      }\n      return super.execute(actionExecutionContext);\n    }\n  }\n);\n  artifacts[ii]=out;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1606,
        "startLineNumber" : 665,
        "startColumnNumber" : 4,
        "endLineNumber" : 703,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int ii=0; ii < numJobs; ++ii) {\n  Artifact out=createDerivedArtifact(ii + \".out\");\n  NestedSet<Artifact> inputs=(catastrophe && ii > 10) ? asNestedSet(artifacts[0]) : emptyNestedSet;\n  final int iCopy=ii;\n  registerAction(new TestAction(new Callable<Void>(){\n    @Override public Void call() throws Exception {\n      Thread.sleep(100);\n      completedTasks.getAndIncrement();\n      throw new IOException(\"task failed\");\n    }\n  }\n,inputs,ImmutableSet.of(out)){\n    @Override public ActionResult execute(    ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n      if (catastrophe && iCopy == 0) {\n        try {\n          Thread.sleep(300);\n        }\n catch (        InterruptedException e) {\n          throw new RuntimeException(e);\n        }\n        completedTasks.getAndIncrement();\n        DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n        throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n      }\n      return super.execute(actionExecutionContext);\n    }\n  }\n);\n  artifacts[ii]=out;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 178,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2537,
        "startLineNumber" : 653,
        "startColumnNumber" : 23,
        "endLineNumber" : 714,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final AtomicInteger completedTasks=new AtomicInteger(0);\n  int numJobs=50;\n  Artifact[] artifacts=new Artifact[numJobs];\n  for (int ii=0; ii < numJobs; ++ii) {\n    Artifact out=createDerivedArtifact(ii + \".out\");\n    NestedSet<Artifact> inputs=(catastrophe && ii > 10) ? asNestedSet(artifacts[0]) : emptyNestedSet;\n    final int iCopy=ii;\n    registerAction(new TestAction(new Callable<Void>(){\n      @Override public Void call() throws Exception {\n        Thread.sleep(100);\n        completedTasks.getAndIncrement();\n        throw new IOException(\"task failed\");\n      }\n    }\n,inputs,ImmutableSet.of(out)){\n      @Override public ActionResult execute(      ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n        if (catastrophe && iCopy == 0) {\n          try {\n            Thread.sleep(300);\n          }\n catch (          InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          completedTasks.getAndIncrement();\n          DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n          throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n        }\n        return super.execute(actionExecutionContext);\n      }\n    }\n);\n    artifacts[ii]=out;\n  }\n  reporter.removeHandler(failFastHandler);\n  assertThrows(BuildFailedException.class,() -> buildArtifacts(createBuilder(3,keepGoing),artifacts));\n  assertContainsEvent(\"task failed\");\n  if (completedTasks.get() >= numJobs) {\n    fail(\"Expected early termination due to failed task, but all tasks ran to completion.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2657,
        "startLineNumber" : 652,
        "startColumnNumber" : 2,
        "endLineNumber" : 714,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void assertNoNewJobsAreRunAfterFirstFailure(final boolean catastrophe,boolean keepGoing) throws Exception {\n  final AtomicInteger completedTasks=new AtomicInteger(0);\n  int numJobs=50;\n  Artifact[] artifacts=new Artifact[numJobs];\n  for (int ii=0; ii < numJobs; ++ii) {\n    Artifact out=createDerivedArtifact(ii + \".out\");\n    NestedSet<Artifact> inputs=(catastrophe && ii > 10) ? asNestedSet(artifacts[0]) : emptyNestedSet;\n    final int iCopy=ii;\n    registerAction(new TestAction(new Callable<Void>(){\n      @Override public Void call() throws Exception {\n        Thread.sleep(100);\n        completedTasks.getAndIncrement();\n        throw new IOException(\"task failed\");\n      }\n    }\n,inputs,ImmutableSet.of(out)){\n      @Override public ActionResult execute(      ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n        if (catastrophe && iCopy == 0) {\n          try {\n            Thread.sleep(300);\n          }\n catch (          InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          completedTasks.getAndIncrement();\n          DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n          throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n        }\n        return super.execute(actionExecutionContext);\n      }\n    }\n);\n    artifacts[ii]=out;\n  }\n  reporter.removeHandler(failFastHandler);\n  assertThrows(BuildFailedException.class,() -> buildArtifacts(createBuilder(3,keepGoing),artifacts));\n  assertContainsEvent(\"task failed\");\n  if (completedTasks.get() >= numJobs) {\n    fail(\"Expected early termination due to failed task, but all tasks ran to completion.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1326,
        "startLineNumber" : 670,
        "startColumnNumber" : 6,
        "endLineNumber" : 701,
        "endColumnNumber" : 12
      },
      "nodeContext" : "registerAction(new TestAction(new Callable<Void>(){\n  @Override public Void call() throws Exception {\n    Thread.sleep(100);\n    completedTasks.getAndIncrement();\n    throw new IOException(\"task failed\");\n  }\n}\n,inputs,ImmutableSet.of(out)){\n  @Override public ActionResult execute(  ActionExecutionContext actionExecutionContext) throws ActionExecutionException, InterruptedException {\n    if (catastrophe && iCopy == 0) {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      completedTasks.getAndIncrement();\n      DetailedExitCode code=DetailedExitCode.of(FailureDetail.newBuilder().setCrash(Crash.newBuilder().setCode(Code.CRASH_UNKNOWN)).build());\n      throw new ActionExecutionException(\"This is a catastrophe\",this,true,code);\n    }\n    return super.execute(actionExecutionContext);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 122,
      "astHeight" : 15
    },
    "tokenLength" : 61,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1299,
    "startLineNumber" : 671,
    "startColumnNumber" : 10,
    "endLineNumber" : 701,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ ]
}