{
  "id" : 340,
  "expression" : "(char)i",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/Base64Test2.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(char)i",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 27,
      "startColumnNumber" : 21,
      "endLineNumber" : 27,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 27,
        "startColumnNumber" : 20,
        "endLineNumber" : 27,
        "endColumnNumber" : 30
      },
      "nodeContext" : "((char)i)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 30
      },
      "nodeContext" : "text+=((char)i)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 31
      },
      "nodeContext" : "text+=((char)i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 13,
        "startColumnNumber" : 39,
        "endLineNumber" : 29,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  byte[] bytes=text.getBytes(\"UTF-8\");\n{\n    String str=com.alibaba.json.test.Base64.encodeToString(bytes,true);\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n  }\n{\n    String str=com.alibaba.json.test.Base64.encodeToString(bytes,false);\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n  }\n  text+=((char)i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 999,
        "startLineNumber" : 13,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 1000; ++i) {\n  byte[] bytes=text.getBytes(\"UTF-8\");\n{\n    String str=com.alibaba.json.test.Base64.encodeToString(bytes,true);\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n  }\n{\n    String str=com.alibaba.json.test.Base64.encodeToString(bytes,false);\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n    Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n  }\n  text+=((char)i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 165,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1041,
        "startLineNumber" : 11,
        "startColumnNumber" : 49,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String text=\"\";\n  for (int i=0; i < 1000; ++i) {\n    byte[] bytes=text.getBytes(\"UTF-8\");\n{\n      String str=com.alibaba.json.test.Base64.encodeToString(bytes,true);\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n    }\n{\n      String str=com.alibaba.json.test.Base64.encodeToString(bytes,false);\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n    }\n    text+=((char)i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 30,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_base64_2() throws Exception {\n  String text=\"\";\n  for (int i=0; i < 1000; ++i) {\n    byte[] bytes=text.getBytes(\"UTF-8\");\n{\n      String str=com.alibaba.json.test.Base64.encodeToString(bytes,true);\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n    }\n{\n      String str=com.alibaba.json.test.Base64.encodeToString(bytes,false);\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str.toCharArray(),0,str.length()),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str),\"UTF-8\"));\n      Assert.assertEquals(text,new String(JSONLexer.decodeFast(str,0,str.length()),\"UTF-8\"));\n    }\n    text+=((char)i);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 178,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 31
      },
      "nodeContext" : "text+=((char)i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 27,
    "startColumnNumber" : 21,
    "endLineNumber" : 27,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}