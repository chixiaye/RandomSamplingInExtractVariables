{
  "id" : 276,
  "expression" : "spell",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/service-layer/src/test/java/com/iluwatar/servicelayer/spell/SpellDaoImplTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spell",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 48,
      "startColumnNumber" : 45,
      "endLineNumber" : 48,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 48,
        "startColumnNumber" : 45,
        "endLineNumber" : 48,
        "endColumnNumber" : 60
      },
      "nodeContext" : "spell.getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 48,
        "startColumnNumber" : 30,
        "endLineNumber" : 48,
        "endColumnNumber" : 61
      },
      "nodeContext" : "dao.findByName(spell.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 61
      },
      "nodeContext" : "spellByName=dao.findByName(spell.getName())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 62
      },
      "nodeContext" : "final var spellByName=dao.findByName(spell.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 47,
        "startColumnNumber" : 38,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final var spellByName=dao.findByName(spell.getName());\n  assertNotNull(spellByName);\n  assertEquals(spell.getId(),spellByName.getId());\n  assertEquals(spell.getName(),spellByName.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (final var spell : allSpells) {\n  final var spellByName=dao.findByName(spell.getName());\n  assertNotNull(spellByName);\n  assertEquals(spell.getId(),spellByName.getId());\n  assertEquals(spell.getName(),spellByName.getName());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 44,
        "startColumnNumber" : 31,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final var dao=getDao();\n  final var allSpells=dao.findAll();\n  for (  final var spell : allSpells) {\n    final var spellByName=dao.findByName(spell.getName());\n    assertNotNull(spellByName);\n    assertEquals(spell.getId(),spellByName.getId());\n    assertEquals(spell.getName(),spellByName.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFindByName(){\n  final var dao=getDao();\n  final var allSpells=dao.findAll();\n  for (  final var spell : allSpells) {\n    final var spellByName=dao.findByName(spell.getName());\n    assertNotNull(spellByName);\n    assertEquals(spell.getId(),spellByName.getId());\n    assertEquals(spell.getName(),spellByName.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 66,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 62
      },
      "nodeContext" : "final var spellByName=dao.findByName(spell.getName());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.iluwatar.servicelayer.spell.Spell"
  }, {
    "nodeContext" : "spell",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 50,
      "startColumnNumber" : 19,
      "endLineNumber" : 50,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 50,
        "startColumnNumber" : 19,
        "endLineNumber" : 50,
        "endColumnNumber" : 32
      },
      "nodeContext" : "spell.getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertEquals(spell.getId(),spellByName.getId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(spell.getId(),spellByName.getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 47,
        "startColumnNumber" : 38,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final var spellByName=dao.findByName(spell.getName());\n  assertNotNull(spellByName);\n  assertEquals(spell.getId(),spellByName.getId());\n  assertEquals(spell.getName(),spellByName.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (final var spell : allSpells) {\n  final var spellByName=dao.findByName(spell.getName());\n  assertNotNull(spellByName);\n  assertEquals(spell.getId(),spellByName.getId());\n  assertEquals(spell.getName(),spellByName.getName());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 44,
        "startColumnNumber" : 31,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final var dao=getDao();\n  final var allSpells=dao.findAll();\n  for (  final var spell : allSpells) {\n    final var spellByName=dao.findByName(spell.getName());\n    assertNotNull(spellByName);\n    assertEquals(spell.getId(),spellByName.getId());\n    assertEquals(spell.getName(),spellByName.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFindByName(){\n  final var dao=getDao();\n  final var allSpells=dao.findAll();\n  for (  final var spell : allSpells) {\n    final var spellByName=dao.findByName(spell.getName());\n    assertNotNull(spellByName);\n    assertEquals(spell.getId(),spellByName.getId());\n    assertEquals(spell.getName(),spellByName.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 66,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 50,
        "startColumnNumber" : 6,
        "endLineNumber" : 50,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(spell.getId(),spellByName.getId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.iluwatar.servicelayer.spell.Spell"
  }, {
    "nodeContext" : "spell",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 51,
      "startColumnNumber" : 19,
      "endLineNumber" : 51,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 51,
        "startColumnNumber" : 19,
        "endLineNumber" : 51,
        "endColumnNumber" : 34
      },
      "nodeContext" : "spell.getName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 51,
        "startColumnNumber" : 6,
        "endLineNumber" : 51,
        "endColumnNumber" : 58
      },
      "nodeContext" : "assertEquals(spell.getName(),spellByName.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 51,
        "startColumnNumber" : 6,
        "endLineNumber" : 51,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(spell.getName(),spellByName.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 47,
        "startColumnNumber" : 38,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final var spellByName=dao.findByName(spell.getName());\n  assertNotNull(spellByName);\n  assertEquals(spell.getId(),spellByName.getId());\n  assertEquals(spell.getName(),spellByName.getName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (final var spell : allSpells) {\n  final var spellByName=dao.findByName(spell.getName());\n  assertNotNull(spellByName);\n  assertEquals(spell.getId(),spellByName.getId());\n  assertEquals(spell.getName(),spellByName.getName());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 44,
        "startColumnNumber" : 31,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final var dao=getDao();\n  final var allSpells=dao.findAll();\n  for (  final var spell : allSpells) {\n    final var spellByName=dao.findByName(spell.getName());\n    assertNotNull(spellByName);\n    assertEquals(spell.getId(),spellByName.getId());\n    assertEquals(spell.getName(),spellByName.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 372,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFindByName(){\n  final var dao=getDao();\n  final var allSpells=dao.findAll();\n  for (  final var spell : allSpells) {\n    final var spellByName=dao.findByName(spell.getName());\n    assertNotNull(spellByName);\n    assertEquals(spell.getId(),spellByName.getId());\n    assertEquals(spell.getName(),spellByName.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 66,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 51,
        "startColumnNumber" : 6,
        "endLineNumber" : 51,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertEquals(spell.getName(),spellByName.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.iluwatar.servicelayer.spell.Spell"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 48,
    "startColumnNumber" : 45,
    "endLineNumber" : 48,
    "endColumnNumber" : 50
  }, {
    "charLength" : 5,
    "startLineNumber" : 50,
    "startColumnNumber" : 19,
    "endLineNumber" : 50,
    "endColumnNumber" : 24
  }, {
    "charLength" : 5,
    "startLineNumber" : 51,
    "startColumnNumber" : 19,
    "endLineNumber" : 51,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}