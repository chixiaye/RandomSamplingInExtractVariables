{
  "id" : 337,
  "expression" : "newN.getKind() == Kind.INITIALIZER",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/TypeResolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newN.getKind() == Kind.INITIALIZER",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 98,
      "startColumnNumber" : 44,
      "endLineNumber" : 98,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 78
      },
      "nodeContext" : "newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 111
      },
      "nodeContext" : "newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n  for (  LombokNode<?,?,?> child : newN.down()) {\n    if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))     return Collections.emptyList();\n    if (child == n)     break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 638,
        "startLineNumber" : 94,
        "startColumnNumber" : 67,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  LombokNode<?,?,?> newN=n.directUp();\n  if (newN == null)   break mainLoop;\n  if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n    for (    LombokNode<?,?,?> child : newN.down()) {\n      if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))       return Collections.emptyList();\n      if (child == n)       break;\n    }\n  }\n  n=newN;\n  continue mainLoop;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 702,
        "startLineNumber" : 94,
        "startColumnNumber" : 3,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (n.getKind() == Kind.STATEMENT || n.getKind() == Kind.LOCAL) {\n  LombokNode<?,?,?> newN=n.directUp();\n  if (newN == null)   break mainLoop;\n  if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n    for (    LombokNode<?,?,?> child : newN.down()) {\n      if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))       return Collections.emptyList();\n      if (child == n)       break;\n    }\n  }\n  n=newN;\n  continue mainLoop;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1377,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (n.getKind() == Kind.TYPE && typeRef.equals(n.getName())) {\n    return Collections.emptyList();\n  }\n  if (n.getKind() == Kind.STATEMENT || n.getKind() == Kind.LOCAL) {\n    LombokNode<?,?,?> newN=n.directUp();\n    if (newN == null)     break mainLoop;\n    if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n      for (      LombokNode<?,?,?> child : newN.down()) {\n        if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))         return Collections.emptyList();\n        if (child == n)         break;\n      }\n    }\n    n=newN;\n    continue mainLoop;\n  }\n  if (n.getKind() == Kind.TYPE || n.getKind() == Kind.COMPILATION_UNIT) {\n    for (    LombokNode<?,?,?> child : n.down()) {\n      if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))       return Collections.emptyList();\n    }\n  }\n  n=n.directUp();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (n != null) {\n  if (n.getKind() == Kind.TYPE && typeRef.equals(n.getName())) {\n    return Collections.emptyList();\n  }\n  if (n.getKind() == Kind.STATEMENT || n.getKind() == Kind.LOCAL) {\n    LombokNode<?,?,?> newN=n.directUp();\n    if (newN == null)     break mainLoop;\n    if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n      for (      LombokNode<?,?,?> child : newN.down()) {\n        if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))         return Collections.emptyList();\n        if (child == n)         break;\n      }\n    }\n    n=newN;\n    continue mainLoop;\n  }\n  if (n.getKind() == Kind.TYPE || n.getKind() == Kind.COMPILATION_UNIT) {\n    for (    LombokNode<?,?,?> child : n.down()) {\n      if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))       return Collections.emptyList();\n    }\n  }\n  n=n.directUp();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 183,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1407,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "mainLoop: while (n != null) {\n  if (n.getKind() == Kind.TYPE && typeRef.equals(n.getName())) {\n    return Collections.emptyList();\n  }\n  if (n.getKind() == Kind.STATEMENT || n.getKind() == Kind.LOCAL) {\n    LombokNode<?,?,?> newN=n.directUp();\n    if (newN == null)     break mainLoop;\n    if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n      for (      LombokNode<?,?,?> child : newN.down()) {\n        if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))         return Collections.emptyList();\n        if (child == n)         break;\n      }\n    }\n    n=newN;\n    continue mainLoop;\n  }\n  if (n.getKind() == Kind.TYPE || n.getKind() == Kind.COMPILATION_UNIT) {\n    for (    LombokNode<?,?,?> child : n.down()) {\n      if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))       return Collections.emptyList();\n    }\n  }\n  n=n.directUp();\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 185,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2925,
        "startLineNumber" : 64,
        "startColumnNumber" : 109,
        "endLineNumber" : 122,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Collection<String> potentialMatches=library.findCompatible(typeRef);\n  if (potentialMatches.isEmpty())   return Collections.emptyList();\n  int idx=typeRef.indexOf('.');\n  if (idx > -1)   return potentialMatches;\n  if (nameConflictInImportList(typeRef,potentialMatches))   return Collections.emptyList();\n  potentialMatches=eliminateImpossibleMatches(potentialMatches,library);\n  if (potentialMatches.isEmpty())   return Collections.emptyList();\n  LombokNode<?,?,?> n=context;\n  mainLoop:   while (n != null) {\n    if (n.getKind() == Kind.TYPE && typeRef.equals(n.getName())) {\n      return Collections.emptyList();\n    }\n    if (n.getKind() == Kind.STATEMENT || n.getKind() == Kind.LOCAL) {\n      LombokNode<?,?,?> newN=n.directUp();\n      if (newN == null)       break mainLoop;\n      if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n        for (        LombokNode<?,?,?> child : newN.down()) {\n          if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))           return Collections.emptyList();\n          if (child == n)           break;\n        }\n      }\n      n=newN;\n      continue mainLoop;\n    }\n    if (n.getKind() == Kind.TYPE || n.getKind() == Kind.COMPILATION_UNIT) {\n      for (      LombokNode<?,?,?> child : n.down()) {\n        if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))         return Collections.emptyList();\n      }\n    }\n    n=n.directUp();\n  }\n  return potentialMatches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 257,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 122,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Finds type matches for the stated type reference. The provided context is scanned for local type names that shadow type names listed in import statements. If such a shadowing occurs, no matches are returned for any shadowed types, as you would expect.\n */\npublic Collection<String> findTypeMatches(LombokNode<?,?,?> context,TypeLibrary library,String typeRef){\n  Collection<String> potentialMatches=library.findCompatible(typeRef);\n  if (potentialMatches.isEmpty())   return Collections.emptyList();\n  int idx=typeRef.indexOf('.');\n  if (idx > -1)   return potentialMatches;\n  if (nameConflictInImportList(typeRef,potentialMatches))   return Collections.emptyList();\n  potentialMatches=eliminateImpossibleMatches(potentialMatches,library);\n  if (potentialMatches.isEmpty())   return Collections.emptyList();\n  LombokNode<?,?,?> n=context;\n  mainLoop:   while (n != null) {\n    if (n.getKind() == Kind.TYPE && typeRef.equals(n.getName())) {\n      return Collections.emptyList();\n    }\n    if (n.getKind() == Kind.STATEMENT || n.getKind() == Kind.LOCAL) {\n      LombokNode<?,?,?> newN=n.directUp();\n      if (newN == null)       break mainLoop;\n      if (newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD) {\n        for (        LombokNode<?,?,?> child : newN.down()) {\n          if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))           return Collections.emptyList();\n          if (child == n)           break;\n        }\n      }\n      n=newN;\n      continue mainLoop;\n    }\n    if (n.getKind() == Kind.TYPE || n.getKind() == Kind.COMPILATION_UNIT) {\n      for (      LombokNode<?,?,?> child : n.down()) {\n        if (child.getKind() == Kind.TYPE && typeRef.equals(child.getName()))         return Collections.emptyList();\n      }\n    }\n    n=n.directUp();\n  }\n  return potentialMatches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 111
      },
      "nodeContext" : "newN.getKind() == Kind.STATEMENT || newN.getKind() == Kind.INITIALIZER || newN.getKind() == Kind.METHOD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 98,
    "startColumnNumber" : 44,
    "endLineNumber" : 98,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}