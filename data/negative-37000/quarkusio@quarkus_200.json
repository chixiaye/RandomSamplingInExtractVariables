{
  "id" : 200,
  "expression" : "null",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/independent-projects/resteasy-reactive/server/vertx/src/test/java/org/jboss/resteasy/reactive/server/vertx/test/resteasy/async/filters/AsyncResponseFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 33,
      "startColumnNumber" : 28,
      "endLineNumber" : 33,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 32
      },
      "nodeContext" : "callbackException=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 33
      },
      "nodeContext" : "callbackException=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3401,
        "startLineNumber" : 26,
        "startColumnNumber" : 109,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  Entry<String,List<String>> entry : requestContext.getHeaders().entrySet()) {\n    if (entry.getKey().startsWith(\"RequestFilterCallback\"))     addValuesToContext(ctx,entry);\n  }\n  ctx.getHeaders().add(\"ResponseFilterCallback\" + name,String.valueOf(callbackException));\n  callbackException=null;\n  String action=requestContext.getHeaderString(name);\n  LOG.debug(\"Filter response for \" + name + \" with action: \"+ action);\n  if (\"sync-pass\".equals(action)) {\n  }\n else   if (\"sync-fail\".equals(action)) {\n    ctx.setEntity(name);\n  }\n else   if (\"async-pass\".equals(action)) {\n    requestContext.suspend();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> requestContext.resume());\n  }\n else   if (\"async-pass-instant\".equals(action)) {\n    requestContext.suspend();\n    requestContext.resume();\n  }\n else   if (\"async-fail\".equals(action)) {\n    requestContext.suspend();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> {\n      ctx.setEntity(name);\n      requestContext.resume();\n    }\n);\n  }\n else   if (\"async-fail-late\".equals(action)) {\n    requestContext.suspend();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        LOG.debug(\"Error:\",e);\n      }\n      ctx.setEntity(name);\n      requestContext.resume();\n    }\n);\n  }\n else   if (\"async-fail-instant\".equals(action)) {\n    requestContext.suspend();\n    ctx.setEntity(name);\n    requestContext.resume();\n  }\n else   if (\"sync-throw\".equals(action)) {\n    throw ExceptionUtil.removeStackTrace(new AsyncFilterException(\"ouch\"));\n  }\n else   if (\"async-throw-late\".equals(action)) {\n    requestContext.suspend();\n    ServerRequestContext resteasyReactiveCallbackContext=requestContext.getServerRequestContext();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> {\n      try {\n        Thread.sleep(2000);\n      }\n catch (      InterruptedException e) {\n        LOG.debug(\"Error:\",e);\n      }\n      ctx.setEntity(name);\n      resteasyReactiveCallbackContext.registerCompletionCallback((t) -> {\n        if (callbackException != null)         throw ExceptionUtil.removeStackTrace(new RuntimeException(\"Callback called twice\"));\n        callbackException=Objects.toString(t);\n      }\n);\n      if (\"true\".equals(requestContext.getHeaderString(\"UseExceptionMapper\")))       requestContext.resume(ExceptionUtil.removeStackTrace(new AsyncFilterException(\"ouch\")));\n else       requestContext.resume(ExceptionUtil.removeStackTrace(new Throwable(\"ouch\")));\n    }\n);\n  }\n  LOG.debug(\"Filter response for \" + name + \" with action: \"+ action+ \" done\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 365,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3520,
        "startLineNumber" : 25,
        "startColumnNumber" : 4,
        "endLineNumber" : 96,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void filter(ResteasyReactiveContainerRequestContext requestContext,ContainerResponseContext ctx){\n  for (  Entry<String,List<String>> entry : requestContext.getHeaders().entrySet()) {\n    if (entry.getKey().startsWith(\"RequestFilterCallback\"))     addValuesToContext(ctx,entry);\n  }\n  ctx.getHeaders().add(\"ResponseFilterCallback\" + name,String.valueOf(callbackException));\n  callbackException=null;\n  String action=requestContext.getHeaderString(name);\n  LOG.debug(\"Filter response for \" + name + \" with action: \"+ action);\n  if (\"sync-pass\".equals(action)) {\n  }\n else   if (\"sync-fail\".equals(action)) {\n    ctx.setEntity(name);\n  }\n else   if (\"async-pass\".equals(action)) {\n    requestContext.suspend();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> requestContext.resume());\n  }\n else   if (\"async-pass-instant\".equals(action)) {\n    requestContext.suspend();\n    requestContext.resume();\n  }\n else   if (\"async-fail\".equals(action)) {\n    requestContext.suspend();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> {\n      ctx.setEntity(name);\n      requestContext.resume();\n    }\n);\n  }\n else   if (\"async-fail-late\".equals(action)) {\n    requestContext.suspend();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> {\n      try {\n        Thread.sleep(300);\n      }\n catch (      InterruptedException e) {\n        LOG.debug(\"Error:\",e);\n      }\n      ctx.setEntity(name);\n      requestContext.resume();\n    }\n);\n  }\n else   if (\"async-fail-instant\".equals(action)) {\n    requestContext.suspend();\n    ctx.setEntity(name);\n    requestContext.resume();\n  }\n else   if (\"sync-throw\".equals(action)) {\n    throw ExceptionUtil.removeStackTrace(new AsyncFilterException(\"ouch\"));\n  }\n else   if (\"async-throw-late\".equals(action)) {\n    requestContext.suspend();\n    ServerRequestContext resteasyReactiveCallbackContext=requestContext.getServerRequestContext();\n    ExecutorService executor=Executors.newSingleThreadExecutor();\n    executor.submit(() -> {\n      try {\n        Thread.sleep(2000);\n      }\n catch (      InterruptedException e) {\n        LOG.debug(\"Error:\",e);\n      }\n      ctx.setEntity(name);\n      resteasyReactiveCallbackContext.registerCompletionCallback((t) -> {\n        if (callbackException != null)         throw ExceptionUtil.removeStackTrace(new RuntimeException(\"Callback called twice\"));\n        callbackException=Objects.toString(t);\n      }\n);\n      if (\"true\".equals(requestContext.getHeaderString(\"UseExceptionMapper\")))       requestContext.resume(ExceptionUtil.removeStackTrace(new AsyncFilterException(\"ouch\")));\n else       requestContext.resume(ExceptionUtil.removeStackTrace(new Throwable(\"ouch\")));\n    }\n);\n  }\n  LOG.debug(\"Filter response for \" + name + \" with action: \"+ action+ \" done\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 33
      },
      "nodeContext" : "callbackException=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 33,
    "startColumnNumber" : 28,
    "endLineNumber" : 33,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}