{
  "id" : 400,
  "expression" : "nodes",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/treealgorithms/TreeIsomorphismTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nodes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 152,
      "startColumnNumber" : 4,
      "endLineNumber" : 152,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 16
      },
      "nodeContext" : "nodes.add(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "nodes.add(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 150,
        "startColumnNumber" : 62,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 150,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<List<Integer>> generateRandomTree(int n){\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 17
      },
      "nodeContext" : "nodes.add(0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Integer>"
  }, {
    "nodeContext" : "nodes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 155,
      "startColumnNumber" : 27,
      "endLineNumber" : 155,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 155,
        "startColumnNumber" : 27,
        "endLineNumber" : 155,
        "endColumnNumber" : 39
      },
      "nodeContext" : "nodes.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 155,
        "startColumnNumber" : 27,
        "endLineNumber" : 155,
        "endColumnNumber" : 44
      },
      "nodeContext" : "nodes.size() != n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 155,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int nextNode=1; nodes.size() != n; nextNode++) {\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 150,
        "startColumnNumber" : 62,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 150,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<List<Integer>> generateRandomTree(int n){\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 155,
        "startColumnNumber" : 27,
        "endLineNumber" : 155,
        "endColumnNumber" : 44
      },
      "nodeContext" : "nodes.size() != n",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Integer>"
  }, {
    "nodeContext" : "nodes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 156,
      "startColumnNumber" : 23,
      "endLineNumber" : 156,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 156,
        "startColumnNumber" : 23,
        "endLineNumber" : 156,
        "endColumnNumber" : 70
      },
      "nodeContext" : "nodes.get((int)(Math.random() * nodes.size()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 156,
        "startColumnNumber" : 10,
        "endLineNumber" : 156,
        "endColumnNumber" : 70
      },
      "nodeContext" : "randomNode=nodes.get((int)(Math.random() * nodes.size()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 156,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 71
      },
      "nodeContext" : "int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 155,
        "startColumnNumber" : 58,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 155,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int nextNode=1; nodes.size() != n; nextNode++) {\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 150,
        "startColumnNumber" : 62,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 150,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<List<Integer>> generateRandomTree(int n){\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 156,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 71
      },
      "nodeContext" : "int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Integer>"
  }, {
    "nodeContext" : "nodes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 156,
      "startColumnNumber" : 56,
      "endLineNumber" : 156,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 156,
        "startColumnNumber" : 56,
        "endLineNumber" : 156,
        "endColumnNumber" : 68
      },
      "nodeContext" : "nodes.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 156,
        "startColumnNumber" : 40,
        "endLineNumber" : 156,
        "endColumnNumber" : 68
      },
      "nodeContext" : "Math.random() * nodes.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 156,
        "startColumnNumber" : 39,
        "endLineNumber" : 156,
        "endColumnNumber" : 69
      },
      "nodeContext" : "(Math.random() * nodes.size())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 156,
        "startColumnNumber" : 33,
        "endLineNumber" : 156,
        "endColumnNumber" : 69
      },
      "nodeContext" : "(int)(Math.random() * nodes.size())",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 156,
        "startColumnNumber" : 23,
        "endLineNumber" : 156,
        "endColumnNumber" : 70
      },
      "nodeContext" : "nodes.get((int)(Math.random() * nodes.size()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 156,
        "startColumnNumber" : 10,
        "endLineNumber" : 156,
        "endColumnNumber" : 70
      },
      "nodeContext" : "randomNode=nodes.get((int)(Math.random() * nodes.size()))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 156,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 71
      },
      "nodeContext" : "int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 155,
        "startColumnNumber" : 58,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 155,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int nextNode=1; nodes.size() != n; nextNode++) {\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 150,
        "startColumnNumber" : 62,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 150,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<List<Integer>> generateRandomTree(int n){\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 156,
        "startColumnNumber" : 6,
        "endLineNumber" : 156,
        "endColumnNumber" : 71
      },
      "nodeContext" : "int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Integer>"
  }, {
    "nodeContext" : "nodes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 158,
      "startColumnNumber" : 6,
      "endLineNumber" : 158,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 158,
        "endColumnNumber" : 25
      },
      "nodeContext" : "nodes.add(nextNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 158,
        "endColumnNumber" : 26
      },
      "nodeContext" : "nodes.add(nextNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 155,
        "startColumnNumber" : 58,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 155,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int nextNode=1; nodes.size() != n; nextNode++) {\n  int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n  addUndirectedEdge(g,randomNode,nextNode);\n  nodes.add(nextNode);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 347,
        "startLineNumber" : 150,
        "startColumnNumber" : 62,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 407,
        "startLineNumber" : 150,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<List<Integer>> generateRandomTree(int n){\n  List<Integer> nodes=new ArrayList<>();\n  nodes.add(0);\n  List<List<Integer>> g=createEmptyGraph(n);\n  for (int nextNode=1; nodes.size() != n; nextNode++) {\n    int randomNode=nodes.get((int)(Math.random() * nodes.size()));\n    addUndirectedEdge(g,randomNode,nextNode);\n    nodes.add(nextNode);\n  }\n  return g;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 158,
        "endColumnNumber" : 26
      },
      "nodeContext" : "nodes.add(nextNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 152,
    "startColumnNumber" : 4,
    "endLineNumber" : 152,
    "endColumnNumber" : 9
  }, {
    "charLength" : 5,
    "startLineNumber" : 155,
    "startColumnNumber" : 27,
    "endLineNumber" : 155,
    "endColumnNumber" : 32
  }, {
    "charLength" : 5,
    "startLineNumber" : 156,
    "startColumnNumber" : 23,
    "endLineNumber" : 156,
    "endColumnNumber" : 28
  }, {
    "charLength" : 5,
    "startLineNumber" : 156,
    "startColumnNumber" : 56,
    "endLineNumber" : 156,
    "endColumnNumber" : 61
  }, {
    "charLength" : 5,
    "startLineNumber" : 158,
    "startColumnNumber" : 6,
    "endLineNumber" : 158,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}