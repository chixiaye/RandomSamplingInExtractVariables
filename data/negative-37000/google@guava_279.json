{
  "id" : 279,
  "expression" : "growBuffer(dest,destIndex,endIndex)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/escape/UnicodeEscaper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "growBuffer(dest,destIndex,endIndex)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 209,
      "startColumnNumber" : 15,
      "endLineNumber" : 209,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 52
      },
      "nodeContext" : "dest=growBuffer(dest,destIndex,endIndex)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 53
      },
      "nodeContext" : "dest=growBuffer(dest,destIndex,endIndex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 208,
        "startColumnNumber" : 34,
        "endLineNumber" : 210,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  dest=growBuffer(dest,destIndex,endIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 208,
        "startColumnNumber" : 6,
        "endLineNumber" : 210,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (dest.length < endIndex) {\n  dest=growBuffer(dest,destIndex,endIndex);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 206,
        "startColumnNumber" : 26,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int endIndex=destIndex + charsSkipped;\n  if (dest.length < endIndex) {\n    dest=growBuffer(dest,destIndex,endIndex);\n  }\n  s.getChars(unescapedChunkStart,end,dest,destIndex);\n  destIndex=endIndex;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 206,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (charsSkipped > 0) {\n  int endIndex=destIndex + charsSkipped;\n  if (dest.length < endIndex) {\n    dest=growBuffer(dest,destIndex,endIndex);\n  }\n  s.getChars(unescapedChunkStart,end,dest,destIndex);\n  destIndex=endIndex;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2266,
        "startLineNumber" : 160,
        "startColumnNumber" : 57,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int end=s.length();\n  char[] dest=Platform.charBufferFromThreadLocal();\n  int destIndex=0;\n  int unescapedChunkStart=0;\n  while (index < end) {\n    int cp=codePointAt(s,index,end);\n    if (cp < 0) {\n      throw new IllegalArgumentException(\"Trailing high surrogate at end of input\");\n    }\n    char[] escaped=escape(cp);\n    int nextIndex=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);\n    if (escaped != null) {\n      int charsSkipped=index - unescapedChunkStart;\n      int sizeNeeded=destIndex + charsSkipped + escaped.length;\n      if (dest.length < sizeNeeded) {\n        int destLength=sizeNeeded + (end - index) + DEST_PAD;\n        dest=growBuffer(dest,destIndex,destLength);\n      }\n      if (charsSkipped > 0) {\n        s.getChars(unescapedChunkStart,index,dest,destIndex);\n        destIndex+=charsSkipped;\n      }\n      if (escaped.length > 0) {\n        System.arraycopy(escaped,0,dest,destIndex,escaped.length);\n        destIndex+=escaped.length;\n      }\n      unescapedChunkStart=nextIndex;\n    }\n    index=nextEscapeIndex(s,nextIndex,end);\n  }\n  int charsSkipped=end - unescapedChunkStart;\n  if (charsSkipped > 0) {\n    int endIndex=destIndex + charsSkipped;\n    if (dest.length < endIndex) {\n      dest=growBuffer(dest,destIndex,endIndex);\n    }\n    s.getChars(unescapedChunkStart,end,dest,destIndex);\n    destIndex=endIndex;\n  }\n  return new String(dest,0,destIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3134,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the escaped form of a given literal string, starting at the given index. This method is called by the  {@link #escape(String)} method when it discovers that escaping is required. It isprotected to allow subclasses to override the fastpath escaping function to inline their escaping test. See  {@link CharEscaperBuilder} for an example usage.<p>This method is not reentrant and may only be invoked by the top level  {@link #escape(String)} method.\n * @param s the literal string to be escaped\n * @param index the index to start escaping from\n * @return the escaped form of {@code string}\n * @throws NullPointerException if {@code string} is null\n * @throws IllegalArgumentException if invalid surrogate characters are encountered\n */\nprotected final String escapeSlow(String s,int index){\n  int end=s.length();\n  char[] dest=Platform.charBufferFromThreadLocal();\n  int destIndex=0;\n  int unescapedChunkStart=0;\n  while (index < end) {\n    int cp=codePointAt(s,index,end);\n    if (cp < 0) {\n      throw new IllegalArgumentException(\"Trailing high surrogate at end of input\");\n    }\n    char[] escaped=escape(cp);\n    int nextIndex=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);\n    if (escaped != null) {\n      int charsSkipped=index - unescapedChunkStart;\n      int sizeNeeded=destIndex + charsSkipped + escaped.length;\n      if (dest.length < sizeNeeded) {\n        int destLength=sizeNeeded + (end - index) + DEST_PAD;\n        dest=growBuffer(dest,destIndex,destLength);\n      }\n      if (charsSkipped > 0) {\n        s.getChars(unescapedChunkStart,index,dest,destIndex);\n        destIndex+=charsSkipped;\n      }\n      if (escaped.length > 0) {\n        System.arraycopy(escaped,0,dest,destIndex,escaped.length);\n        destIndex+=escaped.length;\n      }\n      unescapedChunkStart=nextIndex;\n    }\n    index=nextEscapeIndex(s,nextIndex,end);\n  }\n  int charsSkipped=end - unescapedChunkStart;\n  if (charsSkipped > 0) {\n    int endIndex=destIndex + charsSkipped;\n    if (dest.length < endIndex) {\n      dest=growBuffer(dest,destIndex,endIndex);\n    }\n    s.getChars(unescapedChunkStart,end,dest,destIndex);\n    destIndex=endIndex;\n  }\n  return new String(dest,0,destIndex);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 209,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 53
      },
      "nodeContext" : "dest=growBuffer(dest,destIndex,endIndex);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "char[]"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 209,
    "startColumnNumber" : 15,
    "endLineNumber" : 209,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}