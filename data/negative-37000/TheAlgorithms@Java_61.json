{
  "id" : 61,
  "expression" : "output",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Conversions/AnyBaseToAnyBase.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "output",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 120,
      "startColumnNumber" : 51,
      "endLineNumber" : 120,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 120,
        "startColumnNumber" : 13,
        "endLineNumber" : 120,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Integer.toString(decimalValue % b2) + output",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 57
      },
      "nodeContext" : "output=Integer.toString(decimalValue % b2) + output",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 58
      },
      "nodeContext" : "output=Integer.toString(decimalValue % b2) + output;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 119,
        "startColumnNumber" : 3,
        "endLineNumber" : 124,
        "endColumnNumber" : 53
      },
      "nodeContext" : "if (decimalValue % b2 < 10) output=Integer.toString(decimalValue % b2) + output;\n else output=(char)((decimalValue % b2) + 55) + output;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 116,
        "startColumnNumber" : 28,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (decimalValue % b2 < 10)   output=Integer.toString(decimalValue % b2) + output;\n else   output=(char)((decimalValue % b2) + 55) + output;\n  decimalValue/=b2;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (decimalValue != 0) {\n  if (decimalValue % b2 < 10)   output=Integer.toString(decimalValue % b2) + output;\n else   output=(char)((decimalValue % b2) + 55) + output;\n  decimalValue/=b2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 86,
        "startColumnNumber" : 58,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int decimalValue=0, charB2;\n  char charB1;\n  String output=\"\";\n  for (int i=0; i < n.length(); i++) {\n    charB1=n.charAt(i);\n    if (charB1 >= 'A' && charB1 <= 'Z')     charB2=10 + (charB1 - 'A');\n else     charB2=charB1 - '0';\n    decimalValue=decimalValue * b1 + charB2;\n  }\n  while (decimalValue != 0) {\n    if (decimalValue % b2 < 10)     output=Integer.toString(decimalValue % b2) + output;\n else     output=(char)((decimalValue % b2) + 55) + output;\n    decimalValue/=b2;\n  }\n  return output;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1870,
        "startLineNumber" : 78,
        "startColumnNumber" : 1,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Method to convert any integer from base b1 to base b2. Works by converting from b1 to decimal, then decimal to b2.\n * @param n The integer to be converted.\n * @param b1 Beginning base.\n * @param b2 End base.\n * @return n in base b2.\n */\npublic static String base2base(String n,int b1,int b2){\n  int decimalValue=0, charB2;\n  char charB1;\n  String output=\"\";\n  for (int i=0; i < n.length(); i++) {\n    charB1=n.charAt(i);\n    if (charB1 >= 'A' && charB1 <= 'Z')     charB2=10 + (charB1 - 'A');\n else     charB2=charB1 - '0';\n    decimalValue=decimalValue * b1 + charB2;\n  }\n  while (decimalValue != 0) {\n    if (decimalValue % b2 < 10)     output=Integer.toString(decimalValue % b2) + output;\n else     output=(char)((decimalValue % b2) + 55) + output;\n    decimalValue/=b2;\n  }\n  return output;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 58
      },
      "nodeContext" : "output=Integer.toString(decimalValue % b2) + output;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "output",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 124,
      "startColumnNumber" : 46,
      "endLineNumber" : 124,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 124,
        "startColumnNumber" : 13,
        "endLineNumber" : 124,
        "endColumnNumber" : 52
      },
      "nodeContext" : "(char)((decimalValue % b2) + 55) + output",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 52
      },
      "nodeContext" : "output=(char)((decimalValue % b2) + 55) + output",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 53
      },
      "nodeContext" : "output=(char)((decimalValue % b2) + 55) + output;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 119,
        "startColumnNumber" : 3,
        "endLineNumber" : 124,
        "endColumnNumber" : 53
      },
      "nodeContext" : "if (decimalValue % b2 < 10) output=Integer.toString(decimalValue % b2) + output;\n else output=(char)((decimalValue % b2) + 55) + output;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 116,
        "startColumnNumber" : 28,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (decimalValue % b2 < 10)   output=Integer.toString(decimalValue % b2) + output;\n else   output=(char)((decimalValue % b2) + 55) + output;\n  decimalValue/=b2;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 471,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 127,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (decimalValue != 0) {\n  if (decimalValue % b2 < 10)   output=Integer.toString(decimalValue % b2) + output;\n else   output=(char)((decimalValue % b2) + 55) + output;\n  decimalValue/=b2;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 40,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 86,
        "startColumnNumber" : 58,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int decimalValue=0, charB2;\n  char charB1;\n  String output=\"\";\n  for (int i=0; i < n.length(); i++) {\n    charB1=n.charAt(i);\n    if (charB1 >= 'A' && charB1 <= 'Z')     charB2=10 + (charB1 - 'A');\n else     charB2=charB1 - '0';\n    decimalValue=decimalValue * b1 + charB2;\n  }\n  while (decimalValue != 0) {\n    if (decimalValue % b2 < 10)     output=Integer.toString(decimalValue % b2) + output;\n else     output=(char)((decimalValue % b2) + 55) + output;\n    decimalValue/=b2;\n  }\n  return output;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1870,
        "startLineNumber" : 78,
        "startColumnNumber" : 1,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Method to convert any integer from base b1 to base b2. Works by converting from b1 to decimal, then decimal to b2.\n * @param n The integer to be converted.\n * @param b1 Beginning base.\n * @param b2 End base.\n * @return n in base b2.\n */\npublic static String base2base(String n,int b1,int b2){\n  int decimalValue=0, charB2;\n  char charB1;\n  String output=\"\";\n  for (int i=0; i < n.length(); i++) {\n    charB1=n.charAt(i);\n    if (charB1 >= 'A' && charB1 <= 'Z')     charB2=10 + (charB1 - 'A');\n else     charB2=charB1 - '0';\n    decimalValue=decimalValue * b1 + charB2;\n  }\n  while (decimalValue != 0) {\n    if (decimalValue % b2 < 10)     output=Integer.toString(decimalValue % b2) + output;\n else     output=(char)((decimalValue % b2) + 55) + output;\n    decimalValue/=b2;\n  }\n  return output;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 53
      },
      "nodeContext" : "output=(char)((decimalValue % b2) + 55) + output;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "output",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 128,
      "startColumnNumber" : 9,
      "endLineNumber" : 128,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return output;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 86,
        "startColumnNumber" : 58,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int decimalValue=0, charB2;\n  char charB1;\n  String output=\"\";\n  for (int i=0; i < n.length(); i++) {\n    charB1=n.charAt(i);\n    if (charB1 >= 'A' && charB1 <= 'Z')     charB2=10 + (charB1 - 'A');\n else     charB2=charB1 - '0';\n    decimalValue=decimalValue * b1 + charB2;\n  }\n  while (decimalValue != 0) {\n    if (decimalValue % b2 < 10)     output=Integer.toString(decimalValue % b2) + output;\n else     output=(char)((decimalValue % b2) + 55) + output;\n    decimalValue/=b2;\n  }\n  return output;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 112,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1870,
        "startLineNumber" : 78,
        "startColumnNumber" : 1,
        "endLineNumber" : 129,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Method to convert any integer from base b1 to base b2. Works by converting from b1 to decimal, then decimal to b2.\n * @param n The integer to be converted.\n * @param b1 Beginning base.\n * @param b2 End base.\n * @return n in base b2.\n */\npublic static String base2base(String n,int b1,int b2){\n  int decimalValue=0, charB2;\n  char charB1;\n  String output=\"\";\n  for (int i=0; i < n.length(); i++) {\n    charB1=n.charAt(i);\n    if (charB1 >= 'A' && charB1 <= 'Z')     charB2=10 + (charB1 - 'A');\n else     charB2=charB1 - '0';\n    decimalValue=decimalValue * b1 + charB2;\n  }\n  while (decimalValue != 0) {\n    if (decimalValue % b2 < 10)     output=Integer.toString(decimalValue % b2) + output;\n else     output=(char)((decimalValue % b2) + 55) + output;\n    decimalValue/=b2;\n  }\n  return output;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return output;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 120,
    "startColumnNumber" : 51,
    "endLineNumber" : 120,
    "endColumnNumber" : 57
  }, {
    "charLength" : 6,
    "startLineNumber" : 124,
    "startColumnNumber" : 46,
    "endLineNumber" : 124,
    "endColumnNumber" : 52
  }, {
    "charLength" : 6,
    "startLineNumber" : 128,
    "startColumnNumber" : 9,
    "endLineNumber" : 128,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}