{
  "id" : 232,
  "expression" : "n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/util/BackpressureHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 65,
      "startColumnNumber" : 31,
      "endLineNumber" : 65,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 65,
        "startColumnNumber" : 21,
        "endLineNumber" : 65,
        "endColumnNumber" : 33
      },
      "nodeContext" : "addCap(r,n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 65,
        "startColumnNumber" : 17,
        "endLineNumber" : 65,
        "endColumnNumber" : 33
      },
      "nodeContext" : "u=addCap(r,n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 34
      },
      "nodeContext" : "long u=addCap(r,n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 60,
        "startColumnNumber" : 17,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long r=requested.get();\n  if (r == Long.MAX_VALUE) {\n    return Long.MAX_VALUE;\n  }\n  long u=addCap(r,n);\n  if (requested.compareAndSet(r,u)) {\n    return r;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  long r=requested.get();\n  if (r == Long.MAX_VALUE) {\n    return Long.MAX_VALUE;\n  }\n  long u=addCap(r,n);\n  if (requested.compareAndSet(r,u)) {\n    return r;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 59,
        "startColumnNumber" : 57,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (; ; ) {\n    long r=requested.get();\n    if (r == Long.MAX_VALUE) {\n      return Long.MAX_VALUE;\n    }\n    long u=addCap(r,n);\n    if (requested.compareAndSet(r,u)) {\n      return r;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long.MAX_VALUE and returns the previous value.\n * @param requested the AtomicLong holding the current requested value\n * @param n the value to add, must be positive (not verified)\n * @return the original value before the add\n */\npublic static long add(AtomicLong requested,long n){\n  for (; ; ) {\n    long r=requested.get();\n    if (r == Long.MAX_VALUE) {\n      return Long.MAX_VALUE;\n    }\n    long u=addCap(r,n);\n    if (requested.compareAndSet(r,u)) {\n      return r;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 51,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 34
      },
      "nodeContext" : "long u=addCap(r,n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 65,
    "startColumnNumber" : 31,
    "endLineNumber" : 65,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}