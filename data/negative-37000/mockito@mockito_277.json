{
  "id" : 277,
  "expression" : "locals",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "locals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 613,
      "startColumnNumber" : 40,
      "endLineNumber" : 613,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperMethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 613,
        "startColumnNumber" : 40,
        "endLineNumber" : 613,
        "endColumnNumber" : 53
      },
      "nodeContext" : "locals.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 611,
        "startColumnNumber" : 32,
        "endLineNumber" : 616,
        "endColumnNumber" : 90
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()})",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 611,
        "startColumnNumber" : 32,
        "endLineNumber" : 616,
        "endColumnNumber" : 91
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 855,
        "startLineNumber" : 603,
        "startColumnNumber" : 74,
        "endLineNumber" : 617,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1016,
        "startLineNumber" : 601,
        "startColumnNumber" : 28,
        "endLineNumber" : 617,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n  Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13239,
        "startLineNumber" : 430,
        "startColumnNumber" : 48,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 774,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13298,
        "startLineNumber" : 429,
        "startColumnNumber" : 24,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "@Override public void visitCode(){\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 780,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperMethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 613,
        "startColumnNumber" : 40,
        "endLineNumber" : 613,
        "endColumnNumber" : 53
      },
      "nodeContext" : "locals.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "locals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 614,
      "startColumnNumber" : 40,
      "endLineNumber" : 614,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 611,
        "startColumnNumber" : 32,
        "endLineNumber" : 616,
        "endColumnNumber" : 90
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()})",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 611,
        "startColumnNumber" : 32,
        "endLineNumber" : 616,
        "endColumnNumber" : 91
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 855,
        "startLineNumber" : 603,
        "startColumnNumber" : 74,
        "endLineNumber" : 617,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1016,
        "startLineNumber" : 601,
        "startColumnNumber" : 28,
        "endLineNumber" : 617,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n  Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13239,
        "startLineNumber" : 430,
        "startColumnNumber" : 48,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 774,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13298,
        "startLineNumber" : 429,
        "startColumnNumber" : 24,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "@Override public void visitCode(){\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 780,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 611,
        "startColumnNumber" : 32,
        "endLineNumber" : 616,
        "endColumnNumber" : 90
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()})",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "locals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 632,
      "startColumnNumber" : 56,
      "endLineNumber" : 632,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperMethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 632,
        "startColumnNumber" : 56,
        "endLineNumber" : 632,
        "endColumnNumber" : 69
      },
      "nodeContext" : "locals.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 631,
        "startColumnNumber" : 32,
        "endLineNumber" : 632,
        "endColumnNumber" : 96
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0])",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 631,
        "startColumnNumber" : 32,
        "endLineNumber" : 632,
        "endColumnNumber" : 97
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 623,
        "startColumnNumber" : 74,
        "endLineNumber" : 633,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 621,
        "startColumnNumber" : 28,
        "endLineNumber" : 633,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n  Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13239,
        "startLineNumber" : 430,
        "startColumnNumber" : 48,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 774,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13298,
        "startLineNumber" : 429,
        "startColumnNumber" : 24,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "@Override public void visitCode(){\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 780,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperMethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 632,
        "startColumnNumber" : 56,
        "endLineNumber" : 632,
        "endColumnNumber" : 69
      },
      "nodeContext" : "locals.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "locals",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 632,
      "startColumnNumber" : 71,
      "endLineNumber" : 632,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 631,
        "startColumnNumber" : 32,
        "endLineNumber" : 632,
        "endColumnNumber" : 96
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0])",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 631,
        "startColumnNumber" : 32,
        "endLineNumber" : 632,
        "endColumnNumber" : 97
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 623,
        "startColumnNumber" : 74,
        "endLineNumber" : 633,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 808,
        "startLineNumber" : 621,
        "startColumnNumber" : 28,
        "endLineNumber" : 633,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n  Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n  super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13239,
        "startLineNumber" : 430,
        "startColumnNumber" : 48,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 774,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13298,
        "startLineNumber" : 429,
        "startColumnNumber" : 24,
        "endLineNumber" : 634,
        "endColumnNumber" : 25
      },
      "nodeContext" : "@Override public void visitCode(){\n  super.visitCode();\n  Label label=new Label();\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"isConstructorMock\",Type.getMethodDescriptor(Type.BOOLEAN_TYPE,Type.getType(String.class),Type.getType(Class.class)),false);\n  super.visitInsn(Opcodes.ICONST_0);\n  super.visitJumpInsn(Opcodes.IF_ICMPEQ,label);\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  for (  TypeDescription type : selected.getParameters().asTypeList().asErasures()) {\n    if (type.represents(boolean.class) || type.represents(byte.class) || type.represents(short.class)|| type.represents(char.class)|| type.represents(int.class)) {\n      super.visitInsn(Opcodes.ICONST_0);\n    }\n else     if (type.represents(long.class)) {\n      super.visitInsn(Opcodes.LCONST_0);\n    }\n else     if (type.represents(float.class)) {\n      super.visitInsn(Opcodes.FCONST_0);\n    }\n else     if (type.represents(double.class)) {\n      super.visitInsn(Opcodes.DCONST_0);\n    }\n else {\n      super.visitInsn(Opcodes.ACONST_NULL);\n    }\n  }\n  super.visitMethodInsn(Opcodes.INVOKESPECIAL,selected.getDeclaringType().getInternalName(),selected.getInternalName(),selected.getDescriptor(),false);\n  super.visitLdcInsn(identifier);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V5)) {\n    super.visitLdcInsn(Type.getType(instrumentedType.getDescriptor()));\n  }\n else {\n    super.visitLdcInsn(instrumentedType.getName());\n    super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(Class.class),\"forName\",Type.getMethodDescriptor(Type.getType(Class.class),Type.getType(String.class)),false);\n  }\n  super.visitVarInsn(Opcodes.ALOAD,0);\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(Object.class));\n  int index=0;\n  for (  ParameterDescription parameter : instrumentedMethod.getParameters()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    Type type=Type.getType(parameter.getType().asErasure().getDescriptor());\n    super.visitVarInsn(type.getOpcode(Opcodes.ILOAD),parameter.getOffset());\n    if (parameter.getType().isPrimitive()) {\n      Type wrapper=Type.getType(parameter.getType().asErasure().asBoxed().getDescriptor());\n      super.visitMethodInsn(Opcodes.INVOKESTATIC,wrapper.getInternalName(),\"valueOf\",Type.getMethodDescriptor(wrapper,type),false);\n    }\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  index=0;\n  super.visitLdcInsn(instrumentedMethod.getParameters().size());\n  super.visitTypeInsn(Opcodes.ANEWARRAY,Type.getInternalName(String.class));\n  for (  TypeDescription typeDescription : instrumentedMethod.getParameters().asTypeList().asErasures()) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitLdcInsn(index++);\n    super.visitLdcInsn(typeDescription.getName());\n    super.visitInsn(Opcodes.AASTORE);\n  }\n  super.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(MockMethodDispatcher.class),\"handleConstruction\",Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class),Type.getType(Object.class),Type.getType(Object[].class),Type.getType(String[].class)),false);\n  FieldList<FieldDescription.InDefinedShape> fields=instrumentedType.getDeclaredFields().filter(not(isStatic()));\n  super.visitTypeInsn(Opcodes.CHECKCAST,instrumentedType.getInternalName());\n  super.visitInsn(Opcodes.DUP);\n  Label noSpy=new Label();\n  super.visitJumpInsn(Opcodes.IFNULL,noSpy);\n  for (  FieldDescription field : fields) {\n    super.visitInsn(Opcodes.DUP);\n    super.visitFieldInsn(Opcodes.GETFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n    super.visitVarInsn(Opcodes.ALOAD,0);\n    super.visitInsn(field.getType().getStackSize() == StackSize.DOUBLE ? Opcodes.DUP_X2 : Opcodes.DUP_X1);\n    super.visitInsn(Opcodes.POP);\n    super.visitFieldInsn(Opcodes.PUTFIELD,instrumentedType.getInternalName(),field.getInternalName(),field.getDescriptor());\n  }\n  super.visitLabel(noSpy);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(instrumentedType.getInternalName(),instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,1,new Object[]{instrumentedType.getInternalName()});\n  }\n  super.visitInsn(Opcodes.POP);\n  super.visitInsn(Opcodes.RETURN);\n  super.visitLabel(label);\n  if (implementationContext.getClassFileVersion().isAtLeast(ClassFileVersion.JAVA_V6)) {\n    Object[] locals=toFrames(Opcodes.UNINITIALIZED_THIS,instrumentedMethod.getParameters().asTypeList().asErasures());\n    super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 780,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 631,
        "startColumnNumber" : 32,
        "endLineNumber" : 632,
        "endColumnNumber" : 96
      },
      "nodeContext" : "super.visitFrame(Opcodes.F_FULL,locals.length,locals,0,new Object[0])",
      "nodeType" : "SuperMethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 613,
    "startColumnNumber" : 40,
    "endLineNumber" : 613,
    "endColumnNumber" : 46
  }, {
    "charLength" : 6,
    "startLineNumber" : 614,
    "startColumnNumber" : 40,
    "endLineNumber" : 614,
    "endColumnNumber" : 46
  }, {
    "charLength" : 6,
    "startLineNumber" : 632,
    "startColumnNumber" : 56,
    "endLineNumber" : 632,
    "endColumnNumber" : 62
  }, {
    "charLength" : 6,
    "startLineNumber" : 632,
    "startColumnNumber" : 71,
    "endLineNumber" : 632,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  } ]
}