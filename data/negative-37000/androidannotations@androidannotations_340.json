{
  "id" : 340,
  "expression" : "typeElement",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/SharedPrefProcessor.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "typeElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 104,
      "startColumnNumber" : 34,
      "endLineNumber" : 104,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 104,
        "startColumnNumber" : 34,
        "endLineNumber" : 104,
        "endColumnNumber" : 64
      },
      "nodeContext" : "typeElement.getQualifiedName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 104,
        "startColumnNumber" : 34,
        "endLineNumber" : 104,
        "endColumnNumber" : 75
      },
      "nodeContext" : "typeElement.getQualifiedName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 104,
        "startColumnNumber" : 9,
        "endLineNumber" : 104,
        "endColumnNumber" : 75
      },
      "nodeContext" : "interfaceQualifiedName=typeElement.getQualifiedName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 104,
        "endColumnNumber" : 76
      },
      "nodeContext" : "String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6162,
        "startLineNumber" : 100,
        "startColumnNumber" : 108,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 831,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6280,
        "startLineNumber" : 99,
        "startColumnNumber" : 1,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 851,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 104,
        "endColumnNumber" : 76
      },
      "nodeContext" : "String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.TypeElement"
  }, {
    "nodeContext" : "typeElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 105,
      "startColumnNumber" : 31,
      "endLineNumber" : 105,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 105,
        "startColumnNumber" : 31,
        "endLineNumber" : 105,
        "endColumnNumber" : 58
      },
      "nodeContext" : "typeElement.getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 105,
        "startColumnNumber" : 31,
        "endLineNumber" : 105,
        "endColumnNumber" : 69
      },
      "nodeContext" : "typeElement.getSimpleName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 105,
        "startColumnNumber" : 9,
        "endLineNumber" : 105,
        "endColumnNumber" : 69
      },
      "nodeContext" : "interfaceSimpleName=typeElement.getSimpleName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 70
      },
      "nodeContext" : "String interfaceSimpleName=typeElement.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6162,
        "startLineNumber" : 100,
        "startColumnNumber" : 108,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 831,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6280,
        "startLineNumber" : 99,
        "startColumnNumber" : 1,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 851,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 70
      },
      "nodeContext" : "String interfaceSimpleName=typeElement.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.TypeElement"
  }, {
    "nodeContext" : "typeElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 113,
      "startColumnNumber" : 36,
      "endLineNumber" : 113,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 113,
        "startColumnNumber" : 36,
        "endLineNumber" : 113,
        "endColumnNumber" : 69
      },
      "nodeContext" : "typeElement.getEnclosedElements()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 113,
        "startColumnNumber" : 26,
        "endLineNumber" : 113,
        "endColumnNumber" : 69
      },
      "nodeContext" : "members=typeElement.getEnclosedElements()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 70
      },
      "nodeContext" : "List<? extends Element> members=typeElement.getEnclosedElements();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6162,
        "startLineNumber" : 100,
        "startColumnNumber" : 108,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 831,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6280,
        "startLineNumber" : 99,
        "startColumnNumber" : 1,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 851,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 113,
        "startColumnNumber" : 2,
        "endLineNumber" : 113,
        "endColumnNumber" : 70
      },
      "nodeContext" : "List<? extends Element> members=typeElement.getEnclosedElements();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.TypeElement"
  }, {
    "nodeContext" : "typeElement",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 144,
      "startColumnNumber" : 36,
      "endLineNumber" : 144,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 144,
        "startColumnNumber" : 36,
        "endLineNumber" : 144,
        "endColumnNumber" : 79
      },
      "nodeContext" : "typeElement.getAnnotation(SharedPref.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 144,
        "startColumnNumber" : 13,
        "endLineNumber" : 144,
        "endColumnNumber" : 79
      },
      "nodeContext" : "sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 80
      },
      "nodeContext" : "SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6162,
        "startLineNumber" : 100,
        "startColumnNumber" : 108,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 831,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6280,
        "startLineNumber" : 99,
        "startColumnNumber" : 1,
        "endLineNumber" : 245,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  TypeElement typeElement=(TypeElement)element;\n  String interfaceQualifiedName=typeElement.getQualifiedName().toString();\n  String interfaceSimpleName=typeElement.getSimpleName().toString();\n  String helperQualifiedName=interfaceQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  JDefinedClass helperClass=codeModel._class(JMod.PUBLIC | JMod.FINAL,helperQualifiedName,ClassType.CLASS);\n  helperClass._extends(SharedPreferencesHelper.class);\n  List<? extends Element> members=typeElement.getEnclosedElements();\n  List<ExecutableElement> methods=ElementFilter.methodsIn(members);\n  List<ExecutableElement> validMethods=new ArrayList<ExecutableElement>();\n  for (  ExecutableElement method : methods) {\n    validMethods.add(method);\n  }\n  JDefinedClass editorClass=helperClass._class(JMod.PUBLIC | JMod.STATIC | JMod.FINAL,interfaceSimpleName + \"Editor\" + ModelConstants.GENERATION_SUFFIX);\n  editorClass._extends(codeModel.ref(EditorHelper.class).narrow(editorClass));\n  JMethod editorConstructor=editorClass.constructor(JMod.NONE);\n  JClass sharedPreferencesClass=codeModel.ref(\"android.content.SharedPreferences\");\n  JVar sharedPreferencesParam=editorConstructor.param(sharedPreferencesClass,\"sharedPreferences\");\n  editorConstructor.body().invoke(\"super\").arg(sharedPreferencesParam);\n  for (  ExecutableElement method : validMethods) {\n    String returnType=method.getReturnType().toString();\n    EditorFieldHolder editorFieldHolder=EDITOR_FIELD_BY_TYPE.get(returnType);\n    JClass editorFieldClass=codeModel.ref(editorFieldHolder.fieldClass);\n    String fieldName=method.getSimpleName().toString();\n    JMethod editorFieldMethod=editorClass.method(JMod.PUBLIC,editorFieldClass.narrow(editorClass),fieldName);\n    editorFieldMethod.body()._return(JExpr.invoke(editorFieldHolder.fieldMethodName).arg(fieldName));\n  }\n  JClass contextClass=codeModel.ref(\"android.content.Context\");\n  SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n  Scope scope=sharedPrefAnnotation.value();\n  int mode=sharedPrefAnnotation.mode();\n  JMethod constructor=helperClass.constructor(JMod.PUBLIC);\nswitch (scope) {\ncase ACTIVITY_DEFAULT:{\n      JVar contextParam=constructor.param(contextClass,\"context\");\n      JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n      constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam)).arg(JExpr.lit(mode)));\n      break;\n    }\ncase ACTIVITY:{\n    JVar contextParam=constructor.param(contextClass,\"context\");\n    JMethod getLocalClassName=getLocalClassName(helperClass,codeModel);\n    constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(invoke(getLocalClassName).arg(contextParam).plus(JExpr.lit(\"_\" + interfaceSimpleName))).arg(JExpr.lit(mode)));\n    break;\n  }\ncase UNIQUE:{\n  JVar contextParam=constructor.param(contextClass,\"context\");\n  constructor.body().invoke(\"super\").arg(contextParam.invoke(\"getSharedPreferences\").arg(JExpr.lit(interfaceSimpleName)).arg(JExpr.lit(mode)));\n  break;\n}\ncase APPLICATION_DEFAULT:{\nJClass preferenceManagerClass=codeModel.ref(\"android.preference.PreferenceManager\");\nJVar contextParam=constructor.param(contextClass,\"context\");\nconstructor.body().invoke(\"super\").arg(preferenceManagerClass.staticInvoke(\"getDefaultSharedPreferences\").arg(contextParam));\nbreak;\n}\n}\nJMethod editMethod=helperClass.method(JMod.PUBLIC,editorClass,\"edit\");\neditMethod.body()._return(JExpr._new(editorClass).arg(JExpr.invoke(\"getSharedPreferences\")));\nfor (ExecutableElement method : validMethods) {\nString returnType=method.getReturnType().toString();\nString fieldName=method.getSimpleName().toString();\nif (\"boolean\".equals(returnType)) {\nJExpression defaultValue;\nDefaultBoolean defaultAnnotation=method.getAnnotation(DefaultBoolean.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(false);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,BooleanPrefField.class,\"booleanField\");\n}\n else if (\"float\".equals(returnType)) {\nJExpression defaultValue;\nDefaultFloat defaultAnnotation=method.getAnnotation(DefaultFloat.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0f);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,FloatPrefField.class,\"floatField\");\n}\n else if (\"int\".equals(returnType)) {\nJExpression defaultValue;\nDefaultInt defaultAnnotation=method.getAnnotation(DefaultInt.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,IntPrefField.class,\"intField\");\n}\n else if (\"long\".equals(returnType)) {\nJExpression defaultValue;\nDefaultLong defaultAnnotation=method.getAnnotation(DefaultLong.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(0l);\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,LongPrefField.class,\"longField\");\n}\n else if (\"java.lang.String\".equals(returnType)) {\nJExpression defaultValue;\nDefaultString defaultAnnotation=method.getAnnotation(DefaultString.class);\nif (defaultAnnotation != null) {\ndefaultValue=JExpr.lit(defaultAnnotation.value());\n}\n else {\ndefaultValue=JExpr.lit(\"\");\n}\naddFieldHelperMethod(helperClass,fieldName,defaultValue,StringPrefField.class,\"stringField\");\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 851,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 144,
        "startColumnNumber" : 2,
        "endLineNumber" : 144,
        "endColumnNumber" : 80
      },
      "nodeContext" : "SharedPref sharedPrefAnnotation=typeElement.getAnnotation(SharedPref.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.TypeElement"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 104,
    "startColumnNumber" : 34,
    "endLineNumber" : 104,
    "endColumnNumber" : 45
  }, {
    "charLength" : 11,
    "startLineNumber" : 105,
    "startColumnNumber" : 31,
    "endLineNumber" : 105,
    "endColumnNumber" : 42
  }, {
    "charLength" : 11,
    "startLineNumber" : 113,
    "startColumnNumber" : 36,
    "endLineNumber" : 113,
    "endColumnNumber" : 47
  }, {
    "charLength" : 11,
    "startLineNumber" : 144,
    "startColumnNumber" : 36,
    "endLineNumber" : 144,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}