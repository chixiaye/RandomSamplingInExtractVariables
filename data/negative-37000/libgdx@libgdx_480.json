{
  "id" : 480,
  "expression" : "item",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/utils/ObjectIntMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "item",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 15,
      "endLineNumber" : 120,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 120,
        "startColumnNumber" : 15,
        "endLineNumber" : 120,
        "endColumnNumber" : 30
      },
      "nodeContext" : "item.hashCode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 120,
        "startColumnNumber" : 15,
        "endLineNumber" : 120,
        "endColumnNumber" : 52
      },
      "nodeContext" : "item.hashCode() * 0x9E3779B97F4A7C15L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 120,
        "startColumnNumber" : 15,
        "endLineNumber" : 120,
        "endColumnNumber" : 62
      },
      "nodeContext" : "item.hashCode() * 0x9E3779B97F4A7C15L >>> shift",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 120,
        "startColumnNumber" : 14,
        "endLineNumber" : 120,
        "endColumnNumber" : 63
      },
      "nodeContext" : "(item.hashCode() * 0x9E3779B97F4A7C15L >>> shift)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 120,
        "startColumnNumber" : 9,
        "endLineNumber" : 120,
        "endColumnNumber" : 63
      },
      "nodeContext" : "(int)(item.hashCode() * 0x9E3779B97F4A7C15L >>> shift)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 64
      },
      "nodeContext" : "return (int)(item.hashCode() * 0x9E3779B97F4A7C15L >>> shift);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 119,
        "startColumnNumber" : 30,
        "endLineNumber" : 121,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  return (int)(item.hashCode() * 0x9E3779B97F4A7C15L >>> shift);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1385,
        "startLineNumber" : 105,
        "startColumnNumber" : 1,
        "endLineNumber" : 121,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns an index >= 0 and <=  {@link #mask} for the specified {@code item}. <p> The default implementation uses Fibonacci hashing on the item's  {@link Object#hashCode()}: the hashcode is multiplied by a long constant (2 to the 64th, divided by the golden ratio) then the uppermost bits are shifted into the lowest positions to obtain an index in the desired range. Multiplication by a long may be slower than int (eg on GWT) but greatly improves rehashing, allowing even very poor hashcodes, such as those that only differ in their upper bits, to be used without high collision rates. Fibonacci hashing has increased collision rates when all or most hashcodes are multiples of larger Fibonacci numbers (see <a href= \"https://probablydance.com/2018/06/16/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo/\">Malte Skarupke's blog post</a>). <p> This method can be overriden to customizing hashing. This may be useful eg in the unlikely event that most hashcodes are Fibonacci numbers, if keys provide poor or incorrect hashcodes, or to simplify hashing if keys provide high quality hashcodes and don't need Fibonacci hashing:  {@code return item.hashCode() & mask;} \n */\nprotected int place(K item){\n  return (int)(item.hashCode() * 0x9E3779B97F4A7C15L >>> shift);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 21,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 64
      },
      "nodeContext" : "return (int)(item.hashCode() * 0x9E3779B97F4A7C15L >>> shift);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "K"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 15,
    "endLineNumber" : 120,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}