{
  "id" : 240,
  "expression" : "TopicName.get(\"mytopic-partition-1&\")",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-common/src/test/java/org/apache/pulsar/common/naming/TopicNameTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TopicName.get(\"mytopic-partition-1&\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 216,
      "startColumnNumber" : 20,
      "endLineNumber" : 216,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 216,
        "startColumnNumber" : 20,
        "endLineNumber" : 216,
        "endColumnNumber" : 73
      },
      "nodeContext" : "TopicName.get(\"mytopic-partition-1&\").isPartitioned()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 74
      },
      "nodeContext" : "assertFalse(TopicName.get(\"mytopic-partition-1&\").isPartitioned())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertFalse(TopicName.get(\"mytopic-partition-1&\").isPartitioned());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7923,
        "startLineNumber" : 34,
        "startColumnNumber" : 24,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    TopicName.get(\"://tenant.namespace:topic\").getNamespace();\n    fail(\"Should have thrown exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespace(),\"tenant/cluster/namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespace(),\"tenant/cluster/namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\"),TopicName.get(\"persistent\",\"tenant\",\"cluster\",\"namespace\",\"topic\"));\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").hashCode(),TopicName.get(\"persistent\",\"tenant\",\"cluster\",\"namespace\",\"topic\").hashCode());\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").toString(),\"persistent://tenant/cluster/namespace/topic\");\n  assertNotEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\"),\"persistent://tenant/cluster/namespace/topic\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getDomain(),TopicDomain.persistent);\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getTenant(),\"tenant\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getCluster(),\"cluster\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespacePortion(),\"namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespace(),\"tenant/cluster/namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getLocalName(),\"topic\");\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getDomain();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getTenant();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getCluster();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getNamespacePortion();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getLocalName();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"invalid://tenant/cluster/namespace/topic\");\n    fail(\"Should have raied exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"tenant/cluster/namespace/topic\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent:///cluster/namespace/mydest-1\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent://pulsar//namespace/mydest-1\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent://pulsar/cluster//mydest-1\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent://pulsar/cluster/namespace/\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://pulsar/cluster/namespace/\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getPersistenceNamingEncoding(),\"tenant/cluster/namespace/persistent/topic\");\n  try {\n    TopicName.get(\"://tenant.namespace\");\n    fail(\"Should have raied exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant/cluster/namespace\");\n    fail(\"Should have raied exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  TopicName nameWithSlash=TopicName.get(\"persistent://tenant/cluster/namespace/ns-abc/table/1\");\n  assertEquals(nameWithSlash.getEncodedLocalName(),Codec.encode(\"ns-abc/table/1\"));\n  TopicName nameEndingInSlash=TopicName.get(\"persistent://tenant/cluster/namespace/ns-abc/table/1/\");\n  assertEquals(nameEndingInSlash.getEncodedLocalName(),Codec.encode(\"ns-abc/table/1/\"));\n  TopicName nameWithTwoSlashes=TopicName.get(\"persistent://tenant/cluster/namespace//ns-abc//table//1//\");\n  assertEquals(nameWithTwoSlashes.getEncodedLocalName(),Codec.encode(\"/ns-abc//table//1//\"));\n  TopicName nameWithRandomCharacters=TopicName.get(\"persistent://tenant/cluster/namespace/$#3rpa/table/1\");\n  assertEquals(nameWithRandomCharacters.getEncodedLocalName(),Codec.encode(\"$#3rpa/table/1\"));\n  TopicName topicName=TopicName.get(\"persistent://myprop/mycolo/myns/mytopic\");\n  assertEquals(topicName.getPartition(0).toString(),\"persistent://myprop/mycolo/myns/mytopic-partition-0\");\n  TopicName partitionedDn=TopicName.get(\"persistent://myprop/mycolo/myns/mytopic\").getPartition(2);\n  assertEquals(partitionedDn.getPartitionIndex(),2);\n  assertEquals(topicName.getPartitionIndex(),-1);\n  assertEquals(TopicName.getPartitionIndex(\"persistent://myprop/mycolo/myns/mytopic-partition-4\"),4);\n  assertEquals(TopicName.getPartitionIndex(\"mytopic-partition--1\"),-1);\n  assertEquals(TopicName.getPartitionIndex(\"mytopic-partition-00\"),-1);\n  assertEquals(TopicName.getPartitionIndex(\"mytopic-partition-012\"),-1);\n  assertFalse(TopicName.get(\"mytopic-partition--1\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition--2\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-01\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-012\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition- 12\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-12 \").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition- 12 \").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-1&\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-1!\").isPartitioned());\n  assertTrue(TopicName.get(\"mytopic-partition-0\").isPartitioned());\n  assertTrue(TopicName.get(\"mytopic-partition-1\").isPartitioned());\n  assertTrue(TopicName.get(\"mytopic-partition-12\").isPartitioned());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7990,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"deprecation\") @Test public void topic(){\n  try {\n    TopicName.get(\"://tenant.namespace:topic\").getNamespace();\n    fail(\"Should have thrown exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespace(),\"tenant/cluster/namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespace(),\"tenant/cluster/namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\"),TopicName.get(\"persistent\",\"tenant\",\"cluster\",\"namespace\",\"topic\"));\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").hashCode(),TopicName.get(\"persistent\",\"tenant\",\"cluster\",\"namespace\",\"topic\").hashCode());\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").toString(),\"persistent://tenant/cluster/namespace/topic\");\n  assertNotEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\"),\"persistent://tenant/cluster/namespace/topic\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getDomain(),TopicDomain.persistent);\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getTenant(),\"tenant\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getCluster(),\"cluster\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespacePortion(),\"namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getNamespace(),\"tenant/cluster/namespace\");\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getLocalName(),\"topic\");\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getDomain();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getTenant();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getCluster();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getNamespacePortion();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace:my-topic\").getLocalName();\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant.namespace\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"invalid://tenant/cluster/namespace/topic\");\n    fail(\"Should have raied exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"tenant/cluster/namespace/topic\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent:///cluster/namespace/mydest-1\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent://pulsar//namespace/mydest-1\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent://pulsar/cluster//mydest-1\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"persistent://pulsar/cluster/namespace/\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://pulsar/cluster/namespace/\");\n    fail(\"Should have raised exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  assertEquals(TopicName.get(\"persistent://tenant/cluster/namespace/topic\").getPersistenceNamingEncoding(),\"tenant/cluster/namespace/persistent/topic\");\n  try {\n    TopicName.get(\"://tenant.namespace\");\n    fail(\"Should have raied exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    TopicName.get(\"://tenant/cluster/namespace\");\n    fail(\"Should have raied exception\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  TopicName nameWithSlash=TopicName.get(\"persistent://tenant/cluster/namespace/ns-abc/table/1\");\n  assertEquals(nameWithSlash.getEncodedLocalName(),Codec.encode(\"ns-abc/table/1\"));\n  TopicName nameEndingInSlash=TopicName.get(\"persistent://tenant/cluster/namespace/ns-abc/table/1/\");\n  assertEquals(nameEndingInSlash.getEncodedLocalName(),Codec.encode(\"ns-abc/table/1/\"));\n  TopicName nameWithTwoSlashes=TopicName.get(\"persistent://tenant/cluster/namespace//ns-abc//table//1//\");\n  assertEquals(nameWithTwoSlashes.getEncodedLocalName(),Codec.encode(\"/ns-abc//table//1//\"));\n  TopicName nameWithRandomCharacters=TopicName.get(\"persistent://tenant/cluster/namespace/$#3rpa/table/1\");\n  assertEquals(nameWithRandomCharacters.getEncodedLocalName(),Codec.encode(\"$#3rpa/table/1\"));\n  TopicName topicName=TopicName.get(\"persistent://myprop/mycolo/myns/mytopic\");\n  assertEquals(topicName.getPartition(0).toString(),\"persistent://myprop/mycolo/myns/mytopic-partition-0\");\n  TopicName partitionedDn=TopicName.get(\"persistent://myprop/mycolo/myns/mytopic\").getPartition(2);\n  assertEquals(partitionedDn.getPartitionIndex(),2);\n  assertEquals(topicName.getPartitionIndex(),-1);\n  assertEquals(TopicName.getPartitionIndex(\"persistent://myprop/mycolo/myns/mytopic-partition-4\"),4);\n  assertEquals(TopicName.getPartitionIndex(\"mytopic-partition--1\"),-1);\n  assertEquals(TopicName.getPartitionIndex(\"mytopic-partition-00\"),-1);\n  assertEquals(TopicName.getPartitionIndex(\"mytopic-partition-012\"),-1);\n  assertFalse(TopicName.get(\"mytopic-partition--1\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition--2\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-01\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-012\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition- 12\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-12 \").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition- 12 \").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-1&\").isPartitioned());\n  assertFalse(TopicName.get(\"mytopic-partition-1!\").isPartitioned());\n  assertTrue(TopicName.get(\"mytopic-partition-0\").isPartitioned());\n  assertTrue(TopicName.get(\"mytopic-partition-1\").isPartitioned());\n  assertTrue(TopicName.get(\"mytopic-partition-12\").isPartitioned());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 703,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertFalse(TopicName.get(\"mytopic-partition-1&\").isPartitioned());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.apache.pulsar.common.naming.TopicName"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 216,
    "startColumnNumber" : 20,
    "endLineNumber" : 216,
    "endColumnNumber" : 57
  } ],
  "layoutRelationDataList" : [ ]
}