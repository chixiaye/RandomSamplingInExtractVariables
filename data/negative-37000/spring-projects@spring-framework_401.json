{
  "id" : 401,
  "expression" : "1",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDec.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 81,
      "startColumnNumber" : 47,
      "endLineNumber" : 81,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 81,
        "startColumnNumber" : 30,
        "endLineNumber" : 81,
        "endColumnNumber" : 48
      },
      "nodeContext" : "op1.intValue() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 81,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 88
      },
      "nodeContext" : "newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 89
      },
      "nodeContext" : "newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 80,
        "startColumnNumber" : 36,
        "endLineNumber" : 82,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1007,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1145,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Double) {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof BigDecimal) {\n  newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Double) {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 63,
        "startColumnNumber" : 38,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Number op1=(Number)operandValue;\n  if (op1 instanceof BigDecimal) {\n    newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Double) {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Float) {\n    newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof BigInteger) {\n    newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Long) {\n    newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Integer) {\n    newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Short) {\n    newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Byte) {\n    newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n  }\n else {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (operandValue instanceof Number) {\n  Number op1=(Number)operandValue;\n  if (op1 instanceof BigDecimal) {\n    newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Double) {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Float) {\n    newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof BigInteger) {\n    newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Long) {\n    newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Integer) {\n    newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Short) {\n    newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Byte) {\n    newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n  }\n else {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2929,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 89
      },
      "nodeContext" : "newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 84,
      "startColumnNumber" : 57,
      "endLineNumber" : 84,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 84,
        "startColumnNumber" : 49,
        "endLineNumber" : 84,
        "endColumnNumber" : 58
      },
      "nodeContext" : "(short)1",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 84,
        "startColumnNumber" : 30,
        "endLineNumber" : 84,
        "endColumnNumber" : 58
      },
      "nodeContext" : "op1.shortValue() - (short)1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 84,
        "startColumnNumber" : 15,
        "endLineNumber" : 84,
        "endColumnNumber" : 98
      },
      "nodeContext" : "new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 98
      },
      "nodeContext" : "newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 99
      },
      "nodeContext" : "newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 83,
        "startColumnNumber" : 34,
        "endLineNumber" : 85,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1007,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1145,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Double) {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof BigDecimal) {\n  newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Double) {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 63,
        "startColumnNumber" : 38,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Number op1=(Number)operandValue;\n  if (op1 instanceof BigDecimal) {\n    newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Double) {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Float) {\n    newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof BigInteger) {\n    newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Long) {\n    newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Integer) {\n    newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Short) {\n    newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Byte) {\n    newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n  }\n else {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (operandValue instanceof Number) {\n  Number op1=(Number)operandValue;\n  if (op1 instanceof BigDecimal) {\n    newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Double) {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Float) {\n    newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof BigInteger) {\n    newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Long) {\n    newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Integer) {\n    newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Short) {\n    newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Byte) {\n    newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n  }\n else {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2929,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 99
      },
      "nodeContext" : "newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 55,
      "endLineNumber" : 87,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 87,
        "startColumnNumber" : 48,
        "endLineNumber" : 87,
        "endColumnNumber" : 56
      },
      "nodeContext" : "(byte)1",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 87,
        "startColumnNumber" : 30,
        "endLineNumber" : 87,
        "endColumnNumber" : 56
      },
      "nodeContext" : "op1.byteValue() - (byte)1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 87,
        "endColumnNumber" : 96
      },
      "nodeContext" : "new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 96
      },
      "nodeContext" : "newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 97
      },
      "nodeContext" : "newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 86,
        "startColumnNumber" : 33,
        "endLineNumber" : 88,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 578,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 79,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 710,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1007,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1145,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof Double) {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 164,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 65,
        "startColumnNumber" : 3,
        "endLineNumber" : 92,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op1 instanceof BigDecimal) {\n  newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Double) {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Float) {\n  newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof BigInteger) {\n  newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Long) {\n  newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Integer) {\n  newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Short) {\n  newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n}\n else if (op1 instanceof Byte) {\n  newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n}\n else {\n  newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 189,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1354,
        "startLineNumber" : 63,
        "startColumnNumber" : 38,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Number op1=(Number)operandValue;\n  if (op1 instanceof BigDecimal) {\n    newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Double) {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Float) {\n    newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof BigInteger) {\n    newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Long) {\n    newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Integer) {\n    newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Short) {\n    newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Byte) {\n    newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n  }\n else {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 199,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (operandValue instanceof Number) {\n  Number op1=(Number)operandValue;\n  if (op1 instanceof BigDecimal) {\n    newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Double) {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Float) {\n    newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof BigInteger) {\n    newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Long) {\n    newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Integer) {\n    newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Short) {\n    newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n  }\n else   if (op1 instanceof Byte) {\n    newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n  }\n else {\n    newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 204,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2929,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 97
      },
      "nodeContext" : "newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 97,
      "startColumnNumber" : 73,
      "endLineNumber" : 97,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 97,
        "startColumnNumber" : 15,
        "endLineNumber" : 97,
        "endColumnNumber" : 75
      },
      "nodeContext" : "state.operate(Operation.SUBTRACT,returnValue.getValue(),1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 75
      },
      "nodeContext" : "newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 76
      },
      "nodeContext" : "newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 96,
        "startColumnNumber" : 7,
        "endLineNumber" : 98,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 96,
        "startColumnNumber" : 3,
        "endLineNumber" : 108,
        "endColumnNumber" : 4
      },
      "nodeContext" : "try {\n  newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n}\n catch (SpelEvaluationException ex) {\n  if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n    throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n  }\n else {\n    throw ex;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 46,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 451,
        "startLineNumber" : 95,
        "startColumnNumber" : 24,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n  }\n catch (  SpelEvaluationException ex) {\n    if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n    }\n else {\n      throw ex;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 473,
        "startLineNumber" : 95,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (newValue == null) {\n  try {\n    newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n  }\n catch (  SpelEvaluationException ex) {\n    if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n    }\n else {\n      throw ex;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 52,
        "startColumnNumber" : 86,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2929,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 132,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {\n  SpelNodeImpl operand=getLeftOperand();\n  ValueRef lvalue=operand.getValueRef(state);\n  TypedValue operandTypedValue=lvalue.getValue();\n  Object operandValue=operandTypedValue.getValue();\n  TypedValue returnValue=operandTypedValue;\n  TypedValue newValue=null;\n  if (operandValue instanceof Number) {\n    Number op1=(Number)operandValue;\n    if (op1 instanceof BigDecimal) {\n      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Double) {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Float) {\n      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof BigInteger) {\n      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Long) {\n      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Integer) {\n      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Short) {\n      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());\n    }\n else     if (op1 instanceof Byte) {\n      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());\n    }\n else {\n      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());\n    }\n  }\n  if (newValue == null) {\n    try {\n      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n    }\n catch (    SpelEvaluationException ex) {\n      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {\n        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());\n      }\n else {\n        throw ex;\n      }\n    }\n  }\n  try {\n    lvalue.setValue(newValue.getValue());\n  }\n catch (  SpelEvaluationException see) {\n    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {\n      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);\n    }\n else {\n      throw see;\n    }\n  }\n  if (!this.postfix) {\n    returnValue=newValue;\n  }\n  return returnValue;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 76
      },
      "nodeContext" : "newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 81,
    "startColumnNumber" : 47,
    "endLineNumber" : 81,
    "endColumnNumber" : 48
  }, {
    "charLength" : 1,
    "startLineNumber" : 84,
    "startColumnNumber" : 57,
    "endLineNumber" : 84,
    "endColumnNumber" : 58
  }, {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 55,
    "endLineNumber" : 87,
    "endColumnNumber" : 56
  }, {
    "charLength" : 1,
    "startLineNumber" : 97,
    "startColumnNumber" : 73,
    "endLineNumber" : 97,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 16
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  } ]
}