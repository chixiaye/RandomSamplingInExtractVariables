{
  "id" : 177,
  "expression" : "hdr",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hdr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 120,
      "startColumnNumber" : 12,
      "endLineNumber" : 120,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 23
      },
      "nodeContext" : "hdr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hdr != null) {\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 119,
        "startColumnNumber" : 27,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * append an entry to the transaction log\n * @param hdr the header of the transaction\n * @param txn the transaction part of the entry\n */\npublic synchronized void append(TxnHeader hdr,Record txn) throws IOException {\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 23
      },
      "nodeContext" : "hdr != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.server.persistence.TxnHeader"
  }, {
    "nodeContext" : "hdr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 121,
      "startColumnNumber" : 16,
      "endLineNumber" : 121,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 29
      },
      "nodeContext" : "hdr.getZxid()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 45
      },
      "nodeContext" : "hdr.getZxid() <= lastZxidSeen",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hdr.getZxid() <= lastZxidSeen) {\n  LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 120,
        "startColumnNumber" : 25,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hdr != null) {\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 119,
        "startColumnNumber" : 27,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * append an entry to the transaction log\n * @param hdr the header of the transaction\n * @param txn the transaction part of the entry\n */\npublic synchronized void append(TxnHeader hdr,Record txn) throws IOException {\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 45
      },
      "nodeContext" : "hdr.getZxid() <= lastZxidSeen",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.server.persistence.TxnHeader"
  }, {
    "nodeContext" : "hdr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 122,
      "startColumnNumber" : 43,
      "endLineNumber" : 122,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 122,
        "startColumnNumber" : 43,
        "endLineNumber" : 122,
        "endColumnNumber" : 56
      },
      "nodeContext" : "hdr.getZxid()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 122,
        "startColumnNumber" : 25,
        "endLineNumber" : 124,
        "endColumnNumber" : 39
      },
      "nodeContext" : "\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 40
      },
      "nodeContext" : "LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 41
      },
      "nodeContext" : "LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 121,
        "startColumnNumber" : 47,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hdr.getZxid() <= lastZxidSeen) {\n  LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 120,
        "startColumnNumber" : 25,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hdr != null) {\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 119,
        "startColumnNumber" : 27,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * append an entry to the transaction log\n * @param hdr the header of the transaction\n * @param txn the transaction part of the entry\n */\npublic synchronized void append(TxnHeader hdr,Record txn) throws IOException {\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 122,
        "startColumnNumber" : 43,
        "endLineNumber" : 122,
        "endColumnNumber" : 56
      },
      "nodeContext" : "hdr.getZxid()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.server.persistence.TxnHeader"
  }, {
    "nodeContext" : "hdr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 124,
      "startColumnNumber" : 26,
      "endLineNumber" : 124,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 124,
        "startColumnNumber" : 26,
        "endLineNumber" : 124,
        "endColumnNumber" : 39
      },
      "nodeContext" : "hdr.getType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 122,
        "startColumnNumber" : 25,
        "endLineNumber" : 124,
        "endColumnNumber" : 39
      },
      "nodeContext" : "\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 40
      },
      "nodeContext" : "LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 124,
        "endColumnNumber" : 41
      },
      "nodeContext" : "LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 121,
        "startColumnNumber" : 47,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hdr.getZxid() <= lastZxidSeen) {\n  LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 120,
        "startColumnNumber" : 25,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hdr != null) {\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 119,
        "startColumnNumber" : 27,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * append an entry to the transaction log\n * @param hdr the header of the transaction\n * @param txn the transaction part of the entry\n */\npublic synchronized void append(TxnHeader hdr,Record txn) throws IOException {\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 124,
        "startColumnNumber" : 26,
        "endLineNumber" : 124,
        "endColumnNumber" : 39
      },
      "nodeContext" : "hdr.getType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.server.persistence.TxnHeader"
  }, {
    "nodeContext" : "hdr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 128,
      "startColumnNumber" : 40,
      "endLineNumber" : 128,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 128,
        "startColumnNumber" : 40,
        "endLineNumber" : 128,
        "endColumnNumber" : 53
      },
      "nodeContext" : "hdr.getZxid()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 128,
        "startColumnNumber" : 23,
        "endLineNumber" : 128,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Long.toHexString(hdr.getZxid())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 127,
        "startColumnNumber" : 48,
        "endLineNumber" : 128,
        "endColumnNumber" : 54
      },
      "nodeContext" : "\"log.\" + Long.toHexString(hdr.getZxid())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 127,
        "startColumnNumber" : 47,
        "endLineNumber" : 128,
        "endColumnNumber" : 55
      },
      "nodeContext" : "(\"log.\" + Long.toHexString(hdr.getZxid()))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 127,
        "startColumnNumber" : 30,
        "endLineNumber" : 128,
        "endColumnNumber" : 56
      },
      "nodeContext" : "new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 127,
        "startColumnNumber" : 15,
        "endLineNumber" : 128,
        "endColumnNumber" : 56
      },
      "nodeContext" : "logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 127,
        "startColumnNumber" : 15,
        "endLineNumber" : 128,
        "endColumnNumber" : 57
      },
      "nodeContext" : "logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 126,
        "startColumnNumber" : 32,
        "endLineNumber" : 135,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n  logStream=new FileOutputStream(logFileWrite);\n  oa=BinaryOutputArchive.getArchive(logStream);\n  FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n  fhdr.serialize(oa,\"fileheader\");\n  currentSize=logStream.getChannel().position();\n  streamsToFlush.add(logStream);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 512,
        "startLineNumber" : 126,
        "startColumnNumber" : 11,
        "endLineNumber" : 135,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (logStream == null) {\n  logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n  logStream=new FileOutputStream(logFileWrite);\n  oa=BinaryOutputArchive.getArchive(logStream);\n  FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n  fhdr.serialize(oa,\"fileheader\");\n  currentSize=logStream.getChannel().position();\n  streamsToFlush.add(logStream);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 65,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 120,
        "startColumnNumber" : 25,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hdr != null) {\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 119,
        "startColumnNumber" : 27,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * append an entry to the transaction log\n * @param hdr the header of the transaction\n * @param txn the transaction part of the entry\n */\npublic synchronized void append(TxnHeader hdr,Record txn) throws IOException {\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 128,
        "startColumnNumber" : 23,
        "endLineNumber" : 128,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Long.toHexString(hdr.getZxid())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.server.persistence.TxnHeader"
  }, {
    "nodeContext" : "hdr",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 137,
      "startColumnNumber" : 47,
      "endLineNumber" : 137,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 137,
        "startColumnNumber" : 25,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Util.marshallTxnEntry(hdr,txn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 137,
        "startColumnNumber" : 19,
        "endLineNumber" : 137,
        "endColumnNumber" : 56
      },
      "nodeContext" : "buf=Util.marshallTxnEntry(hdr,txn)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 57
      },
      "nodeContext" : "byte[] buf=Util.marshallTxnEntry(hdr,txn);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 120,
        "startColumnNumber" : 25,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1228,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hdr != null) {\n  if (hdr.getZxid() <= lastZxidSeen) {\n    LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n  }\n  if (logStream == null) {\n    logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n    logStream=new FileOutputStream(logFileWrite);\n    oa=BinaryOutputArchive.getArchive(logStream);\n    FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n    fhdr.serialize(oa,\"fileheader\");\n    currentSize=logStream.getChannel().position();\n    streamsToFlush.add(logStream);\n  }\n  padFile(logStream);\n  byte[] buf=Util.marshallTxnEntry(hdr,txn);\n  if (buf == null || buf.length == 0) {\n    throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n  }\n  Checksum crc=makeChecksumAlgorithm();\n  crc.update(buf,0,buf.length);\n  oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n  Util.writeTxnBytes(oa,buf);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 155,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1248,
        "startLineNumber" : 119,
        "startColumnNumber" : 27,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * append an entry to the transaction log\n * @param hdr the header of the transaction\n * @param txn the transaction part of the entry\n */\npublic synchronized void append(TxnHeader hdr,Record txn) throws IOException {\n  if (hdr != null) {\n    if (hdr.getZxid() <= lastZxidSeen) {\n      LOG.warn(\"Current zxid \" + hdr.getZxid() + \" is <= \"+ lastZxidSeen+ \" for \"+ hdr.getType());\n    }\n    if (logStream == null) {\n      logFileWrite=new File(logDir,(\"log.\" + Long.toHexString(hdr.getZxid())));\n      logStream=new FileOutputStream(logFileWrite);\n      oa=BinaryOutputArchive.getArchive(logStream);\n      FileHeader fhdr=new FileHeader(TXNLOG_MAGIC,VERSION,dbId);\n      fhdr.serialize(oa,\"fileheader\");\n      currentSize=logStream.getChannel().position();\n      streamsToFlush.add(logStream);\n    }\n    padFile(logStream);\n    byte[] buf=Util.marshallTxnEntry(hdr,txn);\n    if (buf == null || buf.length == 0) {\n      throw new IOException(\"Faulty serialization for header \" + \"and txn\");\n    }\n    Checksum crc=makeChecksumAlgorithm();\n    crc.update(buf,0,buf.length);\n    oa.writeLong(crc.getValue(),\"txnEntryCRC\");\n    Util.writeTxnBytes(oa,buf);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 57
      },
      "nodeContext" : "byte[] buf=Util.marshallTxnEntry(hdr,txn);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.zookeeper.server.persistence.TxnHeader"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 120,
    "startColumnNumber" : 12,
    "endLineNumber" : 120,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 121,
    "startColumnNumber" : 16,
    "endLineNumber" : 121,
    "endColumnNumber" : 19
  }, {
    "charLength" : 3,
    "startLineNumber" : 122,
    "startColumnNumber" : 43,
    "endLineNumber" : 122,
    "endColumnNumber" : 46
  }, {
    "charLength" : 3,
    "startLineNumber" : 124,
    "startColumnNumber" : 26,
    "endLineNumber" : 124,
    "endColumnNumber" : 29
  }, {
    "charLength" : 3,
    "startLineNumber" : 128,
    "startColumnNumber" : 40,
    "endLineNumber" : 128,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 137,
    "startColumnNumber" : 47,
    "endLineNumber" : 137,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}