{
  "id" : 72,
  "expression" : "\"f1\"",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-libraries/flink-gelly/src/main/java/org/apache/flink/graph/spargel/ScatterGatherIteration.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"f1\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 711,
      "startColumnNumber" : 51,
      "endLineNumber" : 711,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 692,
        "startColumnNumber" : 16,
        "endLineNumber" : 711,
        "endColumnNumber" : 56
      },
      "nodeContext" : "inDegrees.join(outDegrees).where(0).equalTo(0).with(new FlatJoinFunction<Tuple2<K,LongValue>,Tuple2<K,LongValue>,Tuple3<K,LongValue,LongValue>>(){\n  @Override public void join(  Tuple2<K,LongValue> first,  Tuple2<K,LongValue> second,  Collector<Tuple3<K,LongValue,LongValue>> out){\n    out.collect(new Tuple3<>(first.f0,first.f1,second.f1));\n  }\n}\n).withForwardedFieldsFirst(\"f0;f1\").withForwardedFieldsSecond(\"f1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 102,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1060,
        "startLineNumber" : 691,
        "startColumnNumber" : 49,
        "endLineNumber" : 711,
        "endColumnNumber" : 56
      },
      "nodeContext" : "degrees=inDegrees.join(outDegrees).where(0).equalTo(0).with(new FlatJoinFunction<Tuple2<K,LongValue>,Tuple2<K,LongValue>,Tuple3<K,LongValue,LongValue>>(){\n  @Override public void join(  Tuple2<K,LongValue> first,  Tuple2<K,LongValue> second,  Collector<Tuple3<K,LongValue,LongValue>> out){\n    out.collect(new Tuple3<>(first.f0,first.f1,second.f1));\n  }\n}\n).withForwardedFieldsFirst(\"f0;f1\").withForwardedFieldsSecond(\"f1\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 104,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1102,
        "startLineNumber" : 691,
        "startColumnNumber" : 8,
        "endLineNumber" : 711,
        "endColumnNumber" : 57
      },
      "nodeContext" : "DataSet<Tuple3<K,LongValue,LongValue>> degrees=inDegrees.join(outDegrees).where(0).equalTo(0).with(new FlatJoinFunction<Tuple2<K,LongValue>,Tuple2<K,LongValue>,Tuple3<K,LongValue,LongValue>>(){\n  @Override public void join(  Tuple2<K,LongValue> first,  Tuple2<K,LongValue> second,  Collector<Tuple3<K,LongValue,LongValue>> out){\n    out.collect(new Tuple3<>(first.f0,first.f1,second.f1));\n  }\n}\n).withForwardedFieldsFirst(\"f0;f1\").withForwardedFieldsSecond(\"f1\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 117,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5962,
        "startLineNumber" : 682,
        "startColumnNumber" : 49,
        "endLineNumber" : 805,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DataSet<Tuple2<K,Message>> messages;\n  this.gatherFunction.setOptDegrees(this.configuration.isOptDegrees());\n  DataSet<Tuple2<K,LongValue>> inDegrees=graph.inDegrees();\n  DataSet<Tuple2<K,LongValue>> outDegrees=graph.outDegrees();\n  DataSet<Tuple3<K,LongValue,LongValue>> degrees=inDegrees.join(outDegrees).where(0).equalTo(0).with(new FlatJoinFunction<Tuple2<K,LongValue>,Tuple2<K,LongValue>,Tuple3<K,LongValue,LongValue>>(){\n    @Override public void join(    Tuple2<K,LongValue> first,    Tuple2<K,LongValue> second,    Collector<Tuple3<K,LongValue,LongValue>> out){\n      out.collect(new Tuple3<>(first.f0,first.f1,second.f1));\n    }\n  }\n).withForwardedFieldsFirst(\"f0;f1\").withForwardedFieldsSecond(\"f1\");\n  DataSet<Vertex<K,Tuple3<VV,LongValue,LongValue>>> verticesWithDegrees=initialVertices.join(degrees).where(0).equalTo(0).with(new FlatJoinFunction<Vertex<K,VV>,Tuple3<K,LongValue,LongValue>,Vertex<K,Tuple3<VV,LongValue,LongValue>>>(){\n    @Override public void join(    Vertex<K,VV> vertex,    Tuple3<K,LongValue,LongValue> degrees,    Collector<Vertex<K,Tuple3<VV,LongValue,LongValue>>> out) throws Exception {\n      out.collect(new Vertex<>(vertex.getId(),new Tuple3<>(vertex.getValue(),degrees.f1,degrees.f2)));\n    }\n  }\n).withForwardedFieldsFirst(\"f0\");\n  TypeInformation<Vertex<K,Tuple3<VV,LongValue,LongValue>>> vertexTypes=verticesWithDegrees.getType();\n  final DeltaIteration<Vertex<K,Tuple3<VV,LongValue,LongValue>>,Vertex<K,Tuple3<VV,LongValue,LongValue>>> iteration=verticesWithDegrees.iterateDelta(verticesWithDegrees,this.maximumNumberOfIterations,0);\n  setUpIteration(iteration);\nswitch (messagingDirection) {\ncase IN:    messages=buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,1,0,numberOfVertices);\n  break;\ncase OUT:messages=buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,0,0,numberOfVertices);\nbreak;\ncase ALL:messages=buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,1,0,numberOfVertices).union(buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,0,0,numberOfVertices));\nbreak;\ndefault:throw new IllegalArgumentException(\"Illegal edge direction\");\n}\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) GatherUdf<K,Tuple3<VV,LongValue,LongValue>,Message> updateUdf=new GatherUdfVVWithDegrees(gatherFunction,vertexTypes);\nCoGroupOperator<?,?,Vertex<K,Tuple3<VV,LongValue,LongValue>>> updates=messages.coGroup(iteration.getSolutionSet()).where(0).equalTo(0).with(updateUdf);\nif (this.configuration != null && this.configuration.isOptNumVertices()) {\nupdates=updates.withBroadcastSet(numberOfVertices,\"number of vertices\");\n}\nconfigureUpdateFunction(updates);\nreturn iteration.closeWith(updates,updates).map(new MapFunction<Vertex<K,Tuple3<VV,LongValue,LongValue>>,Vertex<K,VV>>(){\npublic Vertex<K,VV> map(Vertex<K,Tuple3<VV,LongValue,LongValue>> vertex){\nreturn new Vertex<>(vertex.getId(),vertex.getValue().f0);\n}\n}\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 607,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6572,
        "startLineNumber" : 667,
        "startColumnNumber" : 4,
        "endLineNumber" : 805,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates the operator that represents this scatter-gather graph computation for a vertex with in and out degrees added to the vertex value.\n * @param graph\n * @param messagingDirection\n * @param messageTypeInfo\n * @param numberOfVertices\n * @return the operator\n */\n@SuppressWarnings(\"serial\") private DataSet<Vertex<K,VV>> createResultVerticesWithDegrees(Graph<K,VV,EV> graph,EdgeDirection messagingDirection,TypeInformation<Tuple2<K,Message>> messageTypeInfo,DataSet<LongValue> numberOfVertices){\n  DataSet<Tuple2<K,Message>> messages;\n  this.gatherFunction.setOptDegrees(this.configuration.isOptDegrees());\n  DataSet<Tuple2<K,LongValue>> inDegrees=graph.inDegrees();\n  DataSet<Tuple2<K,LongValue>> outDegrees=graph.outDegrees();\n  DataSet<Tuple3<K,LongValue,LongValue>> degrees=inDegrees.join(outDegrees).where(0).equalTo(0).with(new FlatJoinFunction<Tuple2<K,LongValue>,Tuple2<K,LongValue>,Tuple3<K,LongValue,LongValue>>(){\n    @Override public void join(    Tuple2<K,LongValue> first,    Tuple2<K,LongValue> second,    Collector<Tuple3<K,LongValue,LongValue>> out){\n      out.collect(new Tuple3<>(first.f0,first.f1,second.f1));\n    }\n  }\n).withForwardedFieldsFirst(\"f0;f1\").withForwardedFieldsSecond(\"f1\");\n  DataSet<Vertex<K,Tuple3<VV,LongValue,LongValue>>> verticesWithDegrees=initialVertices.join(degrees).where(0).equalTo(0).with(new FlatJoinFunction<Vertex<K,VV>,Tuple3<K,LongValue,LongValue>,Vertex<K,Tuple3<VV,LongValue,LongValue>>>(){\n    @Override public void join(    Vertex<K,VV> vertex,    Tuple3<K,LongValue,LongValue> degrees,    Collector<Vertex<K,Tuple3<VV,LongValue,LongValue>>> out) throws Exception {\n      out.collect(new Vertex<>(vertex.getId(),new Tuple3<>(vertex.getValue(),degrees.f1,degrees.f2)));\n    }\n  }\n).withForwardedFieldsFirst(\"f0\");\n  TypeInformation<Vertex<K,Tuple3<VV,LongValue,LongValue>>> vertexTypes=verticesWithDegrees.getType();\n  final DeltaIteration<Vertex<K,Tuple3<VV,LongValue,LongValue>>,Vertex<K,Tuple3<VV,LongValue,LongValue>>> iteration=verticesWithDegrees.iterateDelta(verticesWithDegrees,this.maximumNumberOfIterations,0);\n  setUpIteration(iteration);\nswitch (messagingDirection) {\ncase IN:    messages=buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,1,0,numberOfVertices);\n  break;\ncase OUT:messages=buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,0,0,numberOfVertices);\nbreak;\ncase ALL:messages=buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,1,0,numberOfVertices).union(buildScatterFunctionVerticesWithDegrees(iteration,messageTypeInfo,0,0,numberOfVertices));\nbreak;\ndefault:throw new IllegalArgumentException(\"Illegal edge direction\");\n}\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) GatherUdf<K,Tuple3<VV,LongValue,LongValue>,Message> updateUdf=new GatherUdfVVWithDegrees(gatherFunction,vertexTypes);\nCoGroupOperator<?,?,Vertex<K,Tuple3<VV,LongValue,LongValue>>> updates=messages.coGroup(iteration.getSolutionSet()).where(0).equalTo(0).with(updateUdf);\nif (this.configuration != null && this.configuration.isOptNumVertices()) {\nupdates=updates.withBroadcastSet(numberOfVertices,\"number of vertices\");\n}\nconfigureUpdateFunction(updates);\nreturn iteration.closeWith(updates,updates).map(new MapFunction<Vertex<K,Tuple3<VV,LongValue,LongValue>>,Vertex<K,VV>>(){\npublic Vertex<K,VV> map(Vertex<K,Tuple3<VV,LongValue,LongValue>> vertex){\nreturn new Vertex<>(vertex.getId(),vertex.getValue().f0);\n}\n}\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 658,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 692,
        "startColumnNumber" : 16,
        "endLineNumber" : 711,
        "endColumnNumber" : 56
      },
      "nodeContext" : "inDegrees.join(outDegrees).where(0).equalTo(0).with(new FlatJoinFunction<Tuple2<K,LongValue>,Tuple2<K,LongValue>,Tuple3<K,LongValue,LongValue>>(){\n  @Override public void join(  Tuple2<K,LongValue> first,  Tuple2<K,LongValue> second,  Collector<Tuple3<K,LongValue,LongValue>> out){\n    out.collect(new Tuple3<>(first.f0,first.f1,second.f1));\n  }\n}\n).withForwardedFieldsFirst(\"f0;f1\").withForwardedFieldsSecond(\"f1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 102,
      "astHeight" : 13
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 711,
    "startColumnNumber" : 51,
    "endLineNumber" : 711,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}