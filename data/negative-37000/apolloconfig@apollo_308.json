{
  "id" : 308,
  "expression" : "ClassLoaderUtil.getLoader()",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/ResourceUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ClassLoaderUtil.getLoader()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 21,
      "startColumnNumber" : 21,
      "endLineNumber" : 21,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 21,
        "startColumnNumber" : 21,
        "endLineNumber" : 21,
        "endColumnNumber" : 80
      },
      "nodeContext" : "ClassLoaderUtil.getLoader().getResourceAsStream(configPath)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 21,
        "startColumnNumber" : 16,
        "endLineNumber" : 21,
        "endColumnNumber" : 80
      },
      "nodeContext" : "in=ClassLoaderUtil.getLoader().getResourceAsStream(configPath)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 81
      },
      "nodeContext" : "InputStream in=ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1540,
        "startLineNumber" : 20,
        "startColumnNumber" : 82,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InputStream in=ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n  logger.debug(\"Reading config from resource {}\",configPath);\n  Properties props=new Properties();\n  try {\n    if (in == null) {\n      Path path=new File(System.getProperty(\"user.dir\") + configPath).toPath();\n      if (Files.isReadable(path)) {\n        in=new FileInputStream(path.toFile());\n        logger.debug(\"Reading config from file {} \",path);\n      }\n else {\n        logger.warn(\"Could not find available config file\");\n      }\n    }\n    if (defaults != null) {\n      props.putAll(defaults);\n    }\n    if (in != null) {\n      props.load(in);\n      in.close();\n    }\n  }\n catch (  Exception ex) {\n    logger.warn(\"Reading config failed: {}\",ex.getMessage());\n  }\n finally {\n    if (in != null) {\n      try {\n        in.close();\n      }\n catch (      IOException ex) {\n        logger.warn(\"Close config failed: {}\",ex.getMessage());\n      }\n    }\n  }\n  StringBuilder sb=new StringBuilder();\n  for (Enumeration<String> e=(Enumeration<String>)props.propertyNames(); e.hasMoreElements(); ) {\n    String key=e.nextElement();\n    String val=(String)props.getProperty(key);\n    sb.append(key).append('=').append(val).append('\\n');\n  }\n  if (sb.length() > 0) {\n    logger.debug(\"Reading properties: \\n\" + sb.toString());\n  }\n else {\n    logger.warn(\"No available properties\");\n  }\n  return props;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1653,
        "startLineNumber" : 19,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public static Properties readConfigFile(String configPath,Properties defaults){\n  InputStream in=ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n  logger.debug(\"Reading config from resource {}\",configPath);\n  Properties props=new Properties();\n  try {\n    if (in == null) {\n      Path path=new File(System.getProperty(\"user.dir\") + configPath).toPath();\n      if (Files.isReadable(path)) {\n        in=new FileInputStream(path.toFile());\n        logger.debug(\"Reading config from file {} \",path);\n      }\n else {\n        logger.warn(\"Could not find available config file\");\n      }\n    }\n    if (defaults != null) {\n      props.putAll(defaults);\n    }\n    if (in != null) {\n      props.load(in);\n      in.close();\n    }\n  }\n catch (  Exception ex) {\n    logger.warn(\"Reading config failed: {}\",ex.getMessage());\n  }\n finally {\n    if (in != null) {\n      try {\n        in.close();\n      }\n catch (      IOException ex) {\n        logger.warn(\"Close config failed: {}\",ex.getMessage());\n      }\n    }\n  }\n  StringBuilder sb=new StringBuilder();\n  for (Enumeration<String> e=(Enumeration<String>)props.propertyNames(); e.hasMoreElements(); ) {\n    String key=e.nextElement();\n    String val=(String)props.getProperty(key);\n    sb.append(key).append('=').append(val).append('\\n');\n  }\n  if (sb.length() > 0) {\n    logger.debug(\"Reading properties: \\n\" + sb.toString());\n  }\n else {\n    logger.warn(\"No available properties\");\n  }\n  return props;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 21,
        "startColumnNumber" : 4,
        "endLineNumber" : 21,
        "endColumnNumber" : 81
      },
      "nodeContext" : "InputStream in=ClassLoaderUtil.getLoader().getResourceAsStream(configPath);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.ClassLoader"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 21,
    "startColumnNumber" : 21,
    "endLineNumber" : 21,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}