{
  "id" : 143,
  "expression" : "framework",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleLog.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "framework",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 63,
      "startColumnNumber" : 28,
      "endLineNumber" : 63,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 63,
        "startColumnNumber" : 28,
        "endLineNumber" : 63,
        "endColumnNumber" : 61
      },
      "nodeContext" : "framework.getAnnotationAsString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 63,
        "startColumnNumber" : 28,
        "endLineNumber" : 63,
        "endColumnNumber" : 102
      },
      "nodeContext" : "framework.getAnnotationAsString() + \" is legal only on classes and enums.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 103
      },
      "nodeContext" : "annotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 104
      },
      "nodeContext" : "annotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 62,
        "startColumnNumber" : 38,
        "endLineNumber" : 65,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  annotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 62,
        "startColumnNumber" : 3,
        "endLineNumber" : 65,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (typeDecl == null || notAClass) {\n  annotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1012,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (owner.getKind()) {\ncase TYPE:  TypeDeclaration typeDecl=null;\nif (owner.get() instanceof TypeDeclaration) typeDecl=(TypeDeclaration)owner.get();\nint modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\nboolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\nif (typeDecl == null || notAClass) {\nannotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\nreturn;\n}\nif (fieldExists(\"log\",owner) != MemberExistsResult.NOT_EXISTS) {\nannotationNode.addWarning(\"Field 'log' already exists.\");\nreturn;\n}\nClassLiteralAccess loggingType=selfType(owner,source);\nFieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\nfieldDeclaration.traverse(new SetGeneratedByVisitor(source),typeDecl.staticInitializerScope);\ninjectField(owner,fieldDeclaration);\nowner.rebuild();\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 51,
        "startColumnNumber" : 185,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EclipseNode owner=annotationNode.up();\nswitch (owner.getKind()) {\ncase TYPE:    TypeDeclaration typeDecl=null;\n  if (owner.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)owner.get();\nint modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\nboolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\nif (typeDecl == null || notAClass) {\nannotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\nreturn;\n}\nif (fieldExists(\"log\",owner) != MemberExistsResult.NOT_EXISTS) {\nannotationNode.addWarning(\"Field 'log' already exists.\");\nreturn;\n}\nClassLiteralAccess loggingType=selfType(owner,source);\nFieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\nfieldDeclaration.traverse(new SetGeneratedByVisitor(source),typeDecl.staticInitializerScope);\ninjectField(owner,fieldDeclaration);\nowner.rebuild();\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static void processAnnotation(LoggingFramework framework,AnnotationValues<? extends java.lang.annotation.Annotation> annotation,Annotation source,EclipseNode annotationNode){\n  EclipseNode owner=annotationNode.up();\nswitch (owner.getKind()) {\ncase TYPE:    TypeDeclaration typeDecl=null;\n  if (owner.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)owner.get();\nint modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\nboolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\nif (typeDecl == null || notAClass) {\nannotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\nreturn;\n}\nif (fieldExists(\"log\",owner) != MemberExistsResult.NOT_EXISTS) {\nannotationNode.addWarning(\"Field 'log' already exists.\");\nreturn;\n}\nClassLiteralAccess loggingType=selfType(owner,source);\nFieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\nfieldDeclaration.traverse(new SetGeneratedByVisitor(source),typeDecl.staticInitializerScope);\ninjectField(owner,fieldDeclaration);\nowner.rebuild();\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 104
      },
      "nodeContext" : "annotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.HandleLog.LoggingFramework"
  }, {
    "nodeContext" : "framework",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 74,
      "startColumnNumber" : 51,
      "endLineNumber" : 74,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 74,
        "startColumnNumber" : 39,
        "endLineNumber" : 74,
        "endColumnNumber" : 82
      },
      "nodeContext" : "createField(framework,source,loggingType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 74,
        "endColumnNumber" : 82
      },
      "nodeContext" : "fieldDeclaration=createField(framework,source,loggingType)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 74,
        "startColumnNumber" : 3,
        "endLineNumber" : 74,
        "endColumnNumber" : 83
      },
      "nodeContext" : "FieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1012,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (owner.getKind()) {\ncase TYPE:  TypeDeclaration typeDecl=null;\nif (owner.get() instanceof TypeDeclaration) typeDecl=(TypeDeclaration)owner.get();\nint modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\nboolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\nif (typeDecl == null || notAClass) {\nannotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\nreturn;\n}\nif (fieldExists(\"log\",owner) != MemberExistsResult.NOT_EXISTS) {\nannotationNode.addWarning(\"Field 'log' already exists.\");\nreturn;\n}\nClassLiteralAccess loggingType=selfType(owner,source);\nFieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\nfieldDeclaration.traverse(new SetGeneratedByVisitor(source),typeDecl.staticInitializerScope);\ninjectField(owner,fieldDeclaration);\nowner.rebuild();\nbreak;\ndefault:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 132,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1062,
        "startLineNumber" : 51,
        "startColumnNumber" : 185,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EclipseNode owner=annotationNode.up();\nswitch (owner.getKind()) {\ncase TYPE:    TypeDeclaration typeDecl=null;\n  if (owner.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)owner.get();\nint modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\nboolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\nif (typeDecl == null || notAClass) {\nannotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\nreturn;\n}\nif (fieldExists(\"log\",owner) != MemberExistsResult.NOT_EXISTS) {\nannotationNode.addWarning(\"Field 'log' already exists.\");\nreturn;\n}\nClassLiteralAccess loggingType=selfType(owner,source);\nFieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\nfieldDeclaration.traverse(new SetGeneratedByVisitor(source),typeDecl.staticInitializerScope);\ninjectField(owner,fieldDeclaration);\nowner.rebuild();\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1246,
        "startLineNumber" : 51,
        "startColumnNumber" : 1,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static void processAnnotation(LoggingFramework framework,AnnotationValues<? extends java.lang.annotation.Annotation> annotation,Annotation source,EclipseNode annotationNode){\n  EclipseNode owner=annotationNode.up();\nswitch (owner.getKind()) {\ncase TYPE:    TypeDeclaration typeDecl=null;\n  if (owner.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)owner.get();\nint modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\nboolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation)) != 0;\nif (typeDecl == null || notAClass) {\nannotationNode.addError(framework.getAnnotationAsString() + \" is legal only on classes and enums.\");\nreturn;\n}\nif (fieldExists(\"log\",owner) != MemberExistsResult.NOT_EXISTS) {\nannotationNode.addWarning(\"Field 'log' already exists.\");\nreturn;\n}\nClassLiteralAccess loggingType=selfType(owner,source);\nFieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\nfieldDeclaration.traverse(new SetGeneratedByVisitor(source),typeDecl.staticInitializerScope);\ninjectField(owner,fieldDeclaration);\nowner.rebuild();\nbreak;\ndefault:break;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 74,
        "startColumnNumber" : 3,
        "endLineNumber" : 74,
        "endColumnNumber" : 83
      },
      "nodeContext" : "FieldDeclaration fieldDeclaration=createField(framework,source,loggingType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.handlers.HandleLog.LoggingFramework"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 63,
    "startColumnNumber" : 28,
    "endLineNumber" : 63,
    "endColumnNumber" : 37
  }, {
    "charLength" : 9,
    "startLineNumber" : 74,
    "startColumnNumber" : 51,
    "endLineNumber" : 74,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}