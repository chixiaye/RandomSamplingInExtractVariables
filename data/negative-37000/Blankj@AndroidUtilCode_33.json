{
  "id" : 33,
  "expression" : "isSpace(rootPath)",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/utilcode/src/main/java/com/blankj/utilcode/util/ZipUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isSpace(rootPath)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 177,
      "startColumnNumber" : 31,
      "endLineNumber" : 177,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 177,
        "startColumnNumber" : 31,
        "endLineNumber" : 177,
        "endColumnNumber" : 70
      },
      "nodeContext" : "isSpace(rootPath) ? \"\" : File.separator",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 177,
        "startColumnNumber" : 30,
        "endLineNumber" : 177,
        "endColumnNumber" : 71
      },
      "nodeContext" : "(isSpace(rootPath) ? \"\" : File.separator)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 177,
        "startColumnNumber" : 19,
        "endLineNumber" : 177,
        "endColumnNumber" : 91
      },
      "nodeContext" : "rootPath + (isSpace(rootPath) ? \"\" : File.separator) + resFile.getName()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 91
      },
      "nodeContext" : "rootPath=rootPath + (isSpace(rootPath) ? \"\" : File.separator) + resFile.getName()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 92
      },
      "nodeContext" : "rootPath=rootPath + (isSpace(rootPath) ? \"\" : File.separator) + resFile.getName();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1411,
        "startLineNumber" : 176,
        "startColumnNumber" : 31,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rootPath=rootPath + (isSpace(rootPath) ? \"\" : File.separator) + resFile.getName();\n  if (resFile.isDirectory()) {\n    File[] fileList=resFile.listFiles();\n    if (fileList == null || fileList.length <= 0) {\n      ZipEntry entry=new ZipEntry(rootPath + '/');\n      if (!StringUtils.isEmpty(comment))       entry.setComment(comment);\n      zos.putNextEntry(entry);\n      zos.closeEntry();\n    }\n else {\n      for (      File file : fileList) {\n        if (!zipFile(file,rootPath,zos,comment))         return false;\n      }\n    }\n  }\n else {\n    InputStream is=null;\n    try {\n      is=new BufferedInputStream(new FileInputStream(resFile));\n      ZipEntry entry=new ZipEntry(rootPath);\n      if (!StringUtils.isEmpty(comment))       entry.setComment(comment);\n      zos.putNextEntry(entry);\n      byte buffer[]=new byte[KB];\n      int len;\n      while ((len=is.read(buffer,0,KB)) != -1) {\n        zos.write(buffer,0,len);\n      }\n      zos.closeEntry();\n    }\n  finally {\n      CloseUtils.closeIO(is);\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1811,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * 压缩文件\n * @param resFile  待压缩文件\n * @param rootPath 相对于压缩文件的路径\n * @param zos      压缩文件输出流\n * @param comment  压缩文件的注释\n * @return {@code true}: 压缩成功<br> {@code false}: 压缩失败\n * @throws IOException IO错误时抛出\n */\nprivate static boolean zipFile(final File resFile,String rootPath,final ZipOutputStream zos,final String comment) throws IOException {\n  rootPath=rootPath + (isSpace(rootPath) ? \"\" : File.separator) + resFile.getName();\n  if (resFile.isDirectory()) {\n    File[] fileList=resFile.listFiles();\n    if (fileList == null || fileList.length <= 0) {\n      ZipEntry entry=new ZipEntry(rootPath + '/');\n      if (!StringUtils.isEmpty(comment))       entry.setComment(comment);\n      zos.putNextEntry(entry);\n      zos.closeEntry();\n    }\n else {\n      for (      File file : fileList) {\n        if (!zipFile(file,rootPath,zos,comment))         return false;\n      }\n    }\n  }\n else {\n    InputStream is=null;\n    try {\n      is=new BufferedInputStream(new FileInputStream(resFile));\n      ZipEntry entry=new ZipEntry(rootPath);\n      if (!StringUtils.isEmpty(comment))       entry.setComment(comment);\n      zos.putNextEntry(entry);\n      byte buffer[]=new byte[KB];\n      int len;\n      while ((len=is.read(buffer,0,KB)) != -1) {\n        zos.write(buffer,0,len);\n      }\n      zos.closeEntry();\n    }\n  finally {\n      CloseUtils.closeIO(is);\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 211,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 177,
        "startColumnNumber" : 8,
        "endLineNumber" : 177,
        "endColumnNumber" : 92
      },
      "nodeContext" : "rootPath=rootPath + (isSpace(rootPath) ? \"\" : File.separator) + resFile.getName();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 177,
    "startColumnNumber" : 31,
    "endLineNumber" : 177,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}