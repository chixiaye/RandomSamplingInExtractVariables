{
  "id" : 61,
  "expression" : "\"Connection not established\"",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-client/src/test/java/com/netflix/eureka2/client/transport/ResolverBasedTransportClientTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Connection not established\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 111,
      "startColumnNumber" : 22,
      "endLineNumber" : 111,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertNotNull(\"Connection not established\",connection)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertNotNull(\"Connection not established\",connection);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1509,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRibbonLoadBalancer() throws Exception {\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 111,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertNotNull(\"Connection not established\",connection);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 111,
    "startColumnNumber" : 22,
    "endLineNumber" : 111,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}