{
  "id" : 93,
  "expression" : "numRows",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/test/java/org/apache/druid/indexing/input/GeneratorInputSourceTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numRows",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 113,
      "startColumnNumber" : 8,
      "endLineNumber" : 113,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 110,
        "startColumnNumber" : 39,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 110,
        "startColumnNumber" : 25,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "inputSource=new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 6
      },
      "nodeContext" : "GeneratorInputSource inputSource=new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1088,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final long seed=1024L;\n  final long millis=DateTimes.nowUtc().getMillis();\n  final int numConsecutiveTimestamps=1000;\n  final double timestampIncrement=1.0;\n  final int numRows=1000;\n  GeneratorInputSource inputSource=new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  DataGenerator generator=new DataGenerator(GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\").getColumnSchemas(),seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  InputSourceReader reader=inputSource.fixedFormatReader(null,null);\n  CloseableIterator<InputRow> iterator=reader.read();\n  InputRow first=iterator.next();\n  InputRow generatorFirst=generator.nextRow();\n  Assert.assertEquals(generatorFirst,first);\n  Assert.assertTrue(iterator.hasNext());\n  int i;\n  for (i=1; iterator.hasNext(); i++) {\n    iterator.next();\n  }\n  Assert.assertEquals(numRows,i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1142,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testReader() throws IOException {\n  final long seed=1024L;\n  final long millis=DateTimes.nowUtc().getMillis();\n  final int numConsecutiveTimestamps=1000;\n  final double timestampIncrement=1.0;\n  final int numRows=1000;\n  GeneratorInputSource inputSource=new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  DataGenerator generator=new DataGenerator(GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\").getColumnSchemas(),seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  InputSourceReader reader=inputSource.fixedFormatReader(null,null);\n  CloseableIterator<InputRow> iterator=reader.read();\n  InputRow first=iterator.next();\n  InputRow generatorFirst=generator.nextRow();\n  Assert.assertEquals(generatorFirst,first);\n  Assert.assertTrue(iterator.hasNext());\n  int i;\n  for (i=1; iterator.hasNext(); i++) {\n    iterator.next();\n  }\n  Assert.assertEquals(numRows,i);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 110,
        "startColumnNumber" : 39,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "numRows",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 140,
      "startColumnNumber" : 24,
      "endLineNumber" : 140,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 35
      },
      "nodeContext" : "Assert.assertEquals(numRows,i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Assert.assertEquals(numRows,i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1088,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final long seed=1024L;\n  final long millis=DateTimes.nowUtc().getMillis();\n  final int numConsecutiveTimestamps=1000;\n  final double timestampIncrement=1.0;\n  final int numRows=1000;\n  GeneratorInputSource inputSource=new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  DataGenerator generator=new DataGenerator(GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\").getColumnSchemas(),seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  InputSourceReader reader=inputSource.fixedFormatReader(null,null);\n  CloseableIterator<InputRow> iterator=reader.read();\n  InputRow first=iterator.next();\n  InputRow generatorFirst=generator.nextRow();\n  Assert.assertEquals(generatorFirst,first);\n  Assert.assertTrue(iterator.hasNext());\n  int i;\n  for (i=1; iterator.hasNext(); i++) {\n    iterator.next();\n  }\n  Assert.assertEquals(numRows,i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1142,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 141,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testReader() throws IOException {\n  final long seed=1024L;\n  final long millis=DateTimes.nowUtc().getMillis();\n  final int numConsecutiveTimestamps=1000;\n  final double timestampIncrement=1.0;\n  final int numRows=1000;\n  GeneratorInputSource inputSource=new GeneratorInputSource(\"basic\",null,numRows,2,seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  DataGenerator generator=new DataGenerator(GeneratorBasicSchemas.SCHEMA_MAP.get(\"basic\").getColumnSchemas(),seed,millis,numConsecutiveTimestamps,timestampIncrement);\n  InputSourceReader reader=inputSource.fixedFormatReader(null,null);\n  CloseableIterator<InputRow> iterator=reader.read();\n  InputRow first=iterator.next();\n  InputRow generatorFirst=generator.nextRow();\n  Assert.assertEquals(generatorFirst,first);\n  Assert.assertTrue(iterator.hasNext());\n  int i;\n  for (i=1; iterator.hasNext(); i++) {\n    iterator.next();\n  }\n  Assert.assertEquals(numRows,i);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 36
      },
      "nodeContext" : "Assert.assertEquals(numRows,i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 113,
    "startColumnNumber" : 8,
    "endLineNumber" : 113,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 140,
    "startColumnNumber" : 24,
    "endLineNumber" : 140,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}