{
  "id" : 54,
  "expression" : "\"\\033[20~\"",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/test/java/com/termux/terminal/KeyHandlerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"\\033[20~\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 87,
      "startColumnNumber" : 19,
      "endLineNumber" : 87,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 81
      },
      "nodeContext" : "assertKeysEquals(\"\\033[20~\",KeyHandler.getCodeFromTermcap(\"k9\",false,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 82
      },
      "nodeContext" : "assertKeysEquals(\"\\033[20~\",KeyHandler.getCodeFromTermcap(\"k9\",false,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4540,
        "startLineNumber" : 29,
        "startColumnNumber" : 28,
        "endLineNumber" : 104,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertKeysEquals(\"\\u007f\",KeyHandler.getCodeFromTermcap(\"kb\",false,false));\n  assertKeysEquals(\"\\033[Z\",KeyHandler.getCodeFromTermcap(\"kB\",false,false));\n  assertKeysEquals(\"\\033[A\",KeyHandler.getCodeFromTermcap(\"ku\",false,false));\n  assertKeysEquals(\"\\033[B\",KeyHandler.getCodeFromTermcap(\"kd\",false,false));\n  assertKeysEquals(\"\\033[C\",KeyHandler.getCodeFromTermcap(\"kr\",false,false));\n  assertKeysEquals(\"\\033[D\",KeyHandler.getCodeFromTermcap(\"kl\",false,false));\n  assertKeysEquals(\"\\033[1;2A\",KeyHandler.getCodeFromTermcap(\"kUP\",false,false));\n  assertKeysEquals(\"\\033[1;2B\",KeyHandler.getCodeFromTermcap(\"kDN\",false,false));\n  assertKeysEquals(\"\\033[1;2C\",KeyHandler.getCodeFromTermcap(\"%i\",false,false));\n  assertKeysEquals(\"\\033[1;2D\",KeyHandler.getCodeFromTermcap(\"#4\",false,false));\n  assertKeysEquals(\"\\033[H\",KeyHandler.getCodeFromTermcap(\"kh\",false,false));\n  assertKeysEquals(\"\\033[F\",KeyHandler.getCodeFromTermcap(\"@7\",false,false));\n  assertKeysEquals(\"\\033[1;2H\",KeyHandler.getCodeFromTermcap(\"#2\",false,false));\n  assertKeysEquals(\"\\033[1;2F\",KeyHandler.getCodeFromTermcap(\"*7\",false,false));\n  assertKeysEquals(\"\\033[H\",KeyHandler.getCodeFromTermcap(\"K1\",false,false));\n  assertKeysEquals(\"\\033OH\",KeyHandler.getCodeFromTermcap(\"K1\",true,false));\n  assertKeysEquals(\"\\033[5~\",KeyHandler.getCodeFromTermcap(\"K3\",false,false));\n  assertKeysEquals(\"\\033[F\",KeyHandler.getCodeFromTermcap(\"K4\",false,false));\n  assertKeysEquals(\"\\033OF\",KeyHandler.getCodeFromTermcap(\"K4\",true,false));\n  assertKeysEquals(\"\\033[6~\",KeyHandler.getCodeFromTermcap(\"K5\",false,false));\n  assertKeysEquals(\"\\033OP\",KeyHandler.getCodeFromTermcap(\"k1\",false,false));\n  assertKeysEquals(\"\\033OQ\",KeyHandler.getCodeFromTermcap(\"k2\",false,false));\n  assertKeysEquals(\"\\033OR\",KeyHandler.getCodeFromTermcap(\"k3\",false,false));\n  assertKeysEquals(\"\\033OS\",KeyHandler.getCodeFromTermcap(\"k4\",false,false));\n  assertKeysEquals(\"\\033[15~\",KeyHandler.getCodeFromTermcap(\"k5\",false,false));\n  assertKeysEquals(\"\\033[17~\",KeyHandler.getCodeFromTermcap(\"k6\",false,false));\n  assertKeysEquals(\"\\033[18~\",KeyHandler.getCodeFromTermcap(\"k7\",false,false));\n  assertKeysEquals(\"\\033[19~\",KeyHandler.getCodeFromTermcap(\"k8\",false,false));\n  assertKeysEquals(\"\\033[20~\",KeyHandler.getCodeFromTermcap(\"k9\",false,false));\n  assertKeysEquals(\"\\033[21~\",KeyHandler.getCodeFromTermcap(\"k;\",false,false));\n  assertKeysEquals(\"\\033[23~\",KeyHandler.getCodeFromTermcap(\"F1\",false,false));\n  assertKeysEquals(\"\\033[24~\",KeyHandler.getCodeFromTermcap(\"F2\",false,false));\n  assertKeysEquals(\"\\033[1;2P\",KeyHandler.getCodeFromTermcap(\"F3\",false,false));\n  assertKeysEquals(\"\\033[1;2Q\",KeyHandler.getCodeFromTermcap(\"F4\",false,false));\n  assertKeysEquals(\"\\033[1;2R\",KeyHandler.getCodeFromTermcap(\"F5\",false,false));\n  assertKeysEquals(\"\\033[1;2S\",KeyHandler.getCodeFromTermcap(\"F6\",false,false));\n  assertKeysEquals(\"\\033[15;2~\",KeyHandler.getCodeFromTermcap(\"F7\",false,false));\n  assertKeysEquals(\"\\033[17;2~\",KeyHandler.getCodeFromTermcap(\"F8\",false,false));\n  assertKeysEquals(\"\\033[18;2~\",KeyHandler.getCodeFromTermcap(\"F9\",false,false));\n  assertKeysEquals(\"\\033[19;2~\",KeyHandler.getCodeFromTermcap(\"FA\",false,false));\n  assertKeysEquals(\"\\033[20;2~\",KeyHandler.getCodeFromTermcap(\"FB\",false,false));\n  assertKeysEquals(\"\\033[21;2~\",KeyHandler.getCodeFromTermcap(\"FC\",false,false));\n  assertKeysEquals(\"\\033[23;2~\",KeyHandler.getCodeFromTermcap(\"FD\",false,false));\n  assertKeysEquals(\"\\033[24;2~\",KeyHandler.getCodeFromTermcap(\"FE\",false,false));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 441,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4649,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 104,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * See http://pubs.opengroup.org/onlinepubs/7990989799/xcurses/terminfo.html \n */\npublic void testTermCaps(){\n  assertKeysEquals(\"\\u007f\",KeyHandler.getCodeFromTermcap(\"kb\",false,false));\n  assertKeysEquals(\"\\033[Z\",KeyHandler.getCodeFromTermcap(\"kB\",false,false));\n  assertKeysEquals(\"\\033[A\",KeyHandler.getCodeFromTermcap(\"ku\",false,false));\n  assertKeysEquals(\"\\033[B\",KeyHandler.getCodeFromTermcap(\"kd\",false,false));\n  assertKeysEquals(\"\\033[C\",KeyHandler.getCodeFromTermcap(\"kr\",false,false));\n  assertKeysEquals(\"\\033[D\",KeyHandler.getCodeFromTermcap(\"kl\",false,false));\n  assertKeysEquals(\"\\033[1;2A\",KeyHandler.getCodeFromTermcap(\"kUP\",false,false));\n  assertKeysEquals(\"\\033[1;2B\",KeyHandler.getCodeFromTermcap(\"kDN\",false,false));\n  assertKeysEquals(\"\\033[1;2C\",KeyHandler.getCodeFromTermcap(\"%i\",false,false));\n  assertKeysEquals(\"\\033[1;2D\",KeyHandler.getCodeFromTermcap(\"#4\",false,false));\n  assertKeysEquals(\"\\033[H\",KeyHandler.getCodeFromTermcap(\"kh\",false,false));\n  assertKeysEquals(\"\\033[F\",KeyHandler.getCodeFromTermcap(\"@7\",false,false));\n  assertKeysEquals(\"\\033[1;2H\",KeyHandler.getCodeFromTermcap(\"#2\",false,false));\n  assertKeysEquals(\"\\033[1;2F\",KeyHandler.getCodeFromTermcap(\"*7\",false,false));\n  assertKeysEquals(\"\\033[H\",KeyHandler.getCodeFromTermcap(\"K1\",false,false));\n  assertKeysEquals(\"\\033OH\",KeyHandler.getCodeFromTermcap(\"K1\",true,false));\n  assertKeysEquals(\"\\033[5~\",KeyHandler.getCodeFromTermcap(\"K3\",false,false));\n  assertKeysEquals(\"\\033[F\",KeyHandler.getCodeFromTermcap(\"K4\",false,false));\n  assertKeysEquals(\"\\033OF\",KeyHandler.getCodeFromTermcap(\"K4\",true,false));\n  assertKeysEquals(\"\\033[6~\",KeyHandler.getCodeFromTermcap(\"K5\",false,false));\n  assertKeysEquals(\"\\033OP\",KeyHandler.getCodeFromTermcap(\"k1\",false,false));\n  assertKeysEquals(\"\\033OQ\",KeyHandler.getCodeFromTermcap(\"k2\",false,false));\n  assertKeysEquals(\"\\033OR\",KeyHandler.getCodeFromTermcap(\"k3\",false,false));\n  assertKeysEquals(\"\\033OS\",KeyHandler.getCodeFromTermcap(\"k4\",false,false));\n  assertKeysEquals(\"\\033[15~\",KeyHandler.getCodeFromTermcap(\"k5\",false,false));\n  assertKeysEquals(\"\\033[17~\",KeyHandler.getCodeFromTermcap(\"k6\",false,false));\n  assertKeysEquals(\"\\033[18~\",KeyHandler.getCodeFromTermcap(\"k7\",false,false));\n  assertKeysEquals(\"\\033[19~\",KeyHandler.getCodeFromTermcap(\"k8\",false,false));\n  assertKeysEquals(\"\\033[20~\",KeyHandler.getCodeFromTermcap(\"k9\",false,false));\n  assertKeysEquals(\"\\033[21~\",KeyHandler.getCodeFromTermcap(\"k;\",false,false));\n  assertKeysEquals(\"\\033[23~\",KeyHandler.getCodeFromTermcap(\"F1\",false,false));\n  assertKeysEquals(\"\\033[24~\",KeyHandler.getCodeFromTermcap(\"F2\",false,false));\n  assertKeysEquals(\"\\033[1;2P\",KeyHandler.getCodeFromTermcap(\"F3\",false,false));\n  assertKeysEquals(\"\\033[1;2Q\",KeyHandler.getCodeFromTermcap(\"F4\",false,false));\n  assertKeysEquals(\"\\033[1;2R\",KeyHandler.getCodeFromTermcap(\"F5\",false,false));\n  assertKeysEquals(\"\\033[1;2S\",KeyHandler.getCodeFromTermcap(\"F6\",false,false));\n  assertKeysEquals(\"\\033[15;2~\",KeyHandler.getCodeFromTermcap(\"F7\",false,false));\n  assertKeysEquals(\"\\033[17;2~\",KeyHandler.getCodeFromTermcap(\"F8\",false,false));\n  assertKeysEquals(\"\\033[18;2~\",KeyHandler.getCodeFromTermcap(\"F9\",false,false));\n  assertKeysEquals(\"\\033[19;2~\",KeyHandler.getCodeFromTermcap(\"FA\",false,false));\n  assertKeysEquals(\"\\033[20;2~\",KeyHandler.getCodeFromTermcap(\"FB\",false,false));\n  assertKeysEquals(\"\\033[21;2~\",KeyHandler.getCodeFromTermcap(\"FC\",false,false));\n  assertKeysEquals(\"\\033[23;2~\",KeyHandler.getCodeFromTermcap(\"FD\",false,false));\n  assertKeysEquals(\"\\033[24;2~\",KeyHandler.getCodeFromTermcap(\"FE\",false,false));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 446,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 87,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 82
      },
      "nodeContext" : "assertKeysEquals(\"\\033[20~\",KeyHandler.getCodeFromTermcap(\"k9\",false,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 87,
    "startColumnNumber" : 19,
    "endLineNumber" : 87,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}