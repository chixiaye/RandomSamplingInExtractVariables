{
  "id" : 220,
  "expression" : "'$'",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestGraphNodes.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'$'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 830,
      "startColumnNumber" : 40,
      "endLineNumber" : 830,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 830,
        "startColumnNumber" : 17,
        "endLineNumber" : 830,
        "endColumnNumber" : 43
      },
      "nodeContext" : "rootIsWildcard ? '*' : '$'",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 830,
        "startColumnNumber" : 4,
        "endLineNumber" : 830,
        "endColumnNumber" : 44
      },
      "nodeContext" : "nodes.append(rootIsWildcard ? '*' : '$')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 830,
        "startColumnNumber" : 4,
        "endLineNumber" : 830,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nodes.append(rootIsWildcard ? '*' : '$');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 829,
        "startColumnNumber" : 26,
        "endLineNumber" : 831,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  nodes.append(rootIsWildcard ? '*' : '$');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 829,
        "startColumnNumber" : 3,
        "endLineNumber" : 844,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (current.isEmpty()) {\n  nodes.append(rootIsWildcard ? '*' : '$');\n}\n else if (current.size() > 1) {\n  for (int i=0; i < current.size(); i++) {\n    if (i > 0) {\n      nodes.append('|');\n    }\n    nodes.append(\"<p\").append(i).append('>');\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n  }\n}\n else {\n  nodes.append(contextIds.get(current));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1467,
        "startLineNumber" : 819,
        "startColumnNumber" : 30,
        "endLineNumber" : 872,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  PredictionContext current=workList.pop();\n  nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n  if (current.size() > 1) {\n    nodes.append(\"shape=record, \");\n  }\n  nodes.append(\"label=\\\"\");\n  if (current.isEmpty()) {\n    nodes.append(rootIsWildcard ? '*' : '$');\n  }\n else   if (current.size() > 1) {\n    for (int i=0; i < current.size(); i++) {\n      if (i > 0) {\n        nodes.append('|');\n      }\n      nodes.append(\"<p\").append(i).append('>');\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        nodes.append(rootIsWildcard ? '*' : '$');\n      }\n    }\n  }\n else {\n    nodes.append(contextIds.get(current));\n  }\n  nodes.append(\"\\\"];\\n\");\n  if (current.isEmpty()) {\n    continue;\n  }\n  for (int i=0; i < current.size(); i++) {\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      continue;\n    }\n    if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n      contextIds.put(current.getParent(i),contextIds.size());\n      workList.push(current.getParent(i));\n    }\n    edges.append(\"  s\").append(contextIds.get(current));\n    if (current.size() > 1) {\n      edges.append(\":p\").append(i);\n    }\n    edges.append(\"->\");\n    edges.append('s').append(contextIds.get(current.getParent(i)));\n    edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n    edges.append(\";\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1495,
        "startLineNumber" : 819,
        "startColumnNumber" : 2,
        "endLineNumber" : 872,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (!workList.isEmpty()) {\n  PredictionContext current=workList.pop();\n  nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n  if (current.size() > 1) {\n    nodes.append(\"shape=record, \");\n  }\n  nodes.append(\"label=\\\"\");\n  if (current.isEmpty()) {\n    nodes.append(rootIsWildcard ? '*' : '$');\n  }\n else   if (current.size() > 1) {\n    for (int i=0; i < current.size(); i++) {\n      if (i > 0) {\n        nodes.append('|');\n      }\n      nodes.append(\"<p\").append(i).append('>');\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        nodes.append(rootIsWildcard ? '*' : '$');\n      }\n    }\n  }\n else {\n    nodes.append(contextIds.get(current));\n  }\n  nodes.append(\"\\\"];\\n\");\n  if (current.isEmpty()) {\n    continue;\n  }\n  for (int i=0; i < current.size(); i++) {\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      continue;\n    }\n    if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n      contextIds.put(current.getParent(i),contextIds.size());\n      workList.push(current.getParent(i));\n    }\n    edges.append(\"  s\").append(contextIds.get(current));\n    if (current.size() > 1) {\n      edges.append(\":p\").append(i);\n    }\n    edges.append(\"->\");\n    edges.append('s').append(contextIds.get(current.getParent(i)));\n    edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n    edges.append(\";\\n\");\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 261,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 810,
        "startColumnNumber" : 86,
        "endLineNumber" : 881,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  StringBuilder nodes=new StringBuilder();\n  StringBuilder edges=new StringBuilder();\n  Map<PredictionContext,PredictionContext> visited=new IdentityHashMap<PredictionContext,PredictionContext>();\n  Map<PredictionContext,Integer> contextIds=new IdentityHashMap<PredictionContext,Integer>();\n  Deque<PredictionContext> workList=new ArrayDeque<PredictionContext>();\n  visited.put(context,context);\n  contextIds.put(context,contextIds.size());\n  workList.add(context);\n  while (!workList.isEmpty()) {\n    PredictionContext current=workList.pop();\n    nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n    if (current.size() > 1) {\n      nodes.append(\"shape=record, \");\n    }\n    nodes.append(\"label=\\\"\");\n    if (current.isEmpty()) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n else     if (current.size() > 1) {\n      for (int i=0; i < current.size(); i++) {\n        if (i > 0) {\n          nodes.append('|');\n        }\n        nodes.append(\"<p\").append(i).append('>');\n        if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n          nodes.append(rootIsWildcard ? '*' : '$');\n        }\n      }\n    }\n else {\n      nodes.append(contextIds.get(current));\n    }\n    nodes.append(\"\\\"];\\n\");\n    if (current.isEmpty()) {\n      continue;\n    }\n    for (int i=0; i < current.size(); i++) {\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        continue;\n      }\n      if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n        contextIds.put(current.getParent(i),contextIds.size());\n        workList.push(current.getParent(i));\n      }\n      edges.append(\"  s\").append(contextIds.get(current));\n      if (current.size() > 1) {\n        edges.append(\":p\").append(i);\n      }\n      edges.append(\"->\");\n      edges.append('s').append(contextIds.get(current.getParent(i)));\n      edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n      edges.append(\";\\n\");\n    }\n  }\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"digraph G {\\n\");\n  builder.append(\"rankdir=LR;\\n\");\n  builder.append(nodes);\n  builder.append(edges);\n  builder.append(\"}\\n\");\n  return builder.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2309,
        "startLineNumber" : 810,
        "startColumnNumber" : 1,
        "endLineNumber" : 881,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static String toDOTString(PredictionContext context,boolean rootIsWildcard){\n  StringBuilder nodes=new StringBuilder();\n  StringBuilder edges=new StringBuilder();\n  Map<PredictionContext,PredictionContext> visited=new IdentityHashMap<PredictionContext,PredictionContext>();\n  Map<PredictionContext,Integer> contextIds=new IdentityHashMap<PredictionContext,Integer>();\n  Deque<PredictionContext> workList=new ArrayDeque<PredictionContext>();\n  visited.put(context,context);\n  contextIds.put(context,contextIds.size());\n  workList.add(context);\n  while (!workList.isEmpty()) {\n    PredictionContext current=workList.pop();\n    nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n    if (current.size() > 1) {\n      nodes.append(\"shape=record, \");\n    }\n    nodes.append(\"label=\\\"\");\n    if (current.isEmpty()) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n else     if (current.size() > 1) {\n      for (int i=0; i < current.size(); i++) {\n        if (i > 0) {\n          nodes.append('|');\n        }\n        nodes.append(\"<p\").append(i).append('>');\n        if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n          nodes.append(rootIsWildcard ? '*' : '$');\n        }\n      }\n    }\n else {\n      nodes.append(contextIds.get(current));\n    }\n    nodes.append(\"\\\"];\\n\");\n    if (current.isEmpty()) {\n      continue;\n    }\n    for (int i=0; i < current.size(); i++) {\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        continue;\n      }\n      if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n        contextIds.put(current.getParent(i),contextIds.size());\n        workList.push(current.getParent(i));\n      }\n      edges.append(\"  s\").append(contextIds.get(current));\n      if (current.size() > 1) {\n        edges.append(\":p\").append(i);\n      }\n      edges.append(\"->\");\n      edges.append('s').append(contextIds.get(current.getParent(i)));\n      edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n      edges.append(\";\\n\");\n    }\n  }\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"digraph G {\\n\");\n  builder.append(\"rankdir=LR;\\n\");\n  builder.append(nodes);\n  builder.append(edges);\n  builder.append(\"}\\n\");\n  return builder.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 397,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 830,
        "startColumnNumber" : 4,
        "endLineNumber" : 830,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nodes.append(rootIsWildcard ? '*' : '$');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  }, {
    "nodeContext" : "'$'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 839,
      "startColumnNumber" : 42,
      "endLineNumber" : 839,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 839,
        "startColumnNumber" : 19,
        "endLineNumber" : 839,
        "endColumnNumber" : 45
      },
      "nodeContext" : "rootIsWildcard ? '*' : '$'",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 839,
        "startColumnNumber" : 6,
        "endLineNumber" : 839,
        "endColumnNumber" : 46
      },
      "nodeContext" : "nodes.append(rootIsWildcard ? '*' : '$')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 839,
        "startColumnNumber" : 6,
        "endLineNumber" : 839,
        "endColumnNumber" : 47
      },
      "nodeContext" : "nodes.append(rootIsWildcard ? '*' : '$');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 838,
        "startColumnNumber" : 76,
        "endLineNumber" : 840,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  nodes.append(rootIsWildcard ? '*' : '$');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 838,
        "startColumnNumber" : 5,
        "endLineNumber" : 840,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n  nodes.append(rootIsWildcard ? '*' : '$');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 247,
        "startLineNumber" : 832,
        "startColumnNumber" : 45,
        "endLineNumber" : 841,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i > 0) {\n    nodes.append('|');\n  }\n  nodes.append(\"<p\").append(i).append('>');\n  if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n    nodes.append(rootIsWildcard ? '*' : '$');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 832,
        "startColumnNumber" : 4,
        "endLineNumber" : 841,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < current.size(); i++) {\n  if (i > 0) {\n    nodes.append('|');\n  }\n  nodes.append(\"<p\").append(i).append('>');\n  if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n    nodes.append(rootIsWildcard ? '*' : '$');\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 831,
        "startColumnNumber" : 34,
        "endLineNumber" : 842,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  for (int i=0; i < current.size(); i++) {\n    if (i > 0) {\n      nodes.append('|');\n    }\n    nodes.append(\"<p\").append(i).append('>');\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 382,
        "startLineNumber" : 831,
        "startColumnNumber" : 10,
        "endLineNumber" : 844,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (current.size() > 1) {\n  for (int i=0; i < current.size(); i++) {\n    if (i > 0) {\n      nodes.append('|');\n    }\n    nodes.append(\"<p\").append(i).append('>');\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n  }\n}\n else {\n  nodes.append(contextIds.get(current));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 829,
        "startColumnNumber" : 3,
        "endLineNumber" : 844,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (current.isEmpty()) {\n  nodes.append(rootIsWildcard ? '*' : '$');\n}\n else if (current.size() > 1) {\n  for (int i=0; i < current.size(); i++) {\n    if (i > 0) {\n      nodes.append('|');\n    }\n    nodes.append(\"<p\").append(i).append('>');\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n  }\n}\n else {\n  nodes.append(contextIds.get(current));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1467,
        "startLineNumber" : 819,
        "startColumnNumber" : 30,
        "endLineNumber" : 872,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  PredictionContext current=workList.pop();\n  nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n  if (current.size() > 1) {\n    nodes.append(\"shape=record, \");\n  }\n  nodes.append(\"label=\\\"\");\n  if (current.isEmpty()) {\n    nodes.append(rootIsWildcard ? '*' : '$');\n  }\n else   if (current.size() > 1) {\n    for (int i=0; i < current.size(); i++) {\n      if (i > 0) {\n        nodes.append('|');\n      }\n      nodes.append(\"<p\").append(i).append('>');\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        nodes.append(rootIsWildcard ? '*' : '$');\n      }\n    }\n  }\n else {\n    nodes.append(contextIds.get(current));\n  }\n  nodes.append(\"\\\"];\\n\");\n  if (current.isEmpty()) {\n    continue;\n  }\n  for (int i=0; i < current.size(); i++) {\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      continue;\n    }\n    if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n      contextIds.put(current.getParent(i),contextIds.size());\n      workList.push(current.getParent(i));\n    }\n    edges.append(\"  s\").append(contextIds.get(current));\n    if (current.size() > 1) {\n      edges.append(\":p\").append(i);\n    }\n    edges.append(\"->\");\n    edges.append('s').append(contextIds.get(current.getParent(i)));\n    edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n    edges.append(\";\\n\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1495,
        "startLineNumber" : 819,
        "startColumnNumber" : 2,
        "endLineNumber" : 872,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (!workList.isEmpty()) {\n  PredictionContext current=workList.pop();\n  nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n  if (current.size() > 1) {\n    nodes.append(\"shape=record, \");\n  }\n  nodes.append(\"label=\\\"\");\n  if (current.isEmpty()) {\n    nodes.append(rootIsWildcard ? '*' : '$');\n  }\n else   if (current.size() > 1) {\n    for (int i=0; i < current.size(); i++) {\n      if (i > 0) {\n        nodes.append('|');\n      }\n      nodes.append(\"<p\").append(i).append('>');\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        nodes.append(rootIsWildcard ? '*' : '$');\n      }\n    }\n  }\n else {\n    nodes.append(contextIds.get(current));\n  }\n  nodes.append(\"\\\"];\\n\");\n  if (current.isEmpty()) {\n    continue;\n  }\n  for (int i=0; i < current.size(); i++) {\n    if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n      continue;\n    }\n    if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n      contextIds.put(current.getParent(i),contextIds.size());\n      workList.push(current.getParent(i));\n    }\n    edges.append(\"  s\").append(contextIds.get(current));\n    if (current.size() > 1) {\n      edges.append(\":p\").append(i);\n    }\n    edges.append(\"->\");\n    edges.append('s').append(contextIds.get(current.getParent(i)));\n    edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n    edges.append(\";\\n\");\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 261,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 810,
        "startColumnNumber" : 86,
        "endLineNumber" : 881,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  StringBuilder nodes=new StringBuilder();\n  StringBuilder edges=new StringBuilder();\n  Map<PredictionContext,PredictionContext> visited=new IdentityHashMap<PredictionContext,PredictionContext>();\n  Map<PredictionContext,Integer> contextIds=new IdentityHashMap<PredictionContext,Integer>();\n  Deque<PredictionContext> workList=new ArrayDeque<PredictionContext>();\n  visited.put(context,context);\n  contextIds.put(context,contextIds.size());\n  workList.add(context);\n  while (!workList.isEmpty()) {\n    PredictionContext current=workList.pop();\n    nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n    if (current.size() > 1) {\n      nodes.append(\"shape=record, \");\n    }\n    nodes.append(\"label=\\\"\");\n    if (current.isEmpty()) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n else     if (current.size() > 1) {\n      for (int i=0; i < current.size(); i++) {\n        if (i > 0) {\n          nodes.append('|');\n        }\n        nodes.append(\"<p\").append(i).append('>');\n        if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n          nodes.append(rootIsWildcard ? '*' : '$');\n        }\n      }\n    }\n else {\n      nodes.append(contextIds.get(current));\n    }\n    nodes.append(\"\\\"];\\n\");\n    if (current.isEmpty()) {\n      continue;\n    }\n    for (int i=0; i < current.size(); i++) {\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        continue;\n      }\n      if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n        contextIds.put(current.getParent(i),contextIds.size());\n        workList.push(current.getParent(i));\n      }\n      edges.append(\"  s\").append(contextIds.get(current));\n      if (current.size() > 1) {\n        edges.append(\":p\").append(i);\n      }\n      edges.append(\"->\");\n      edges.append('s').append(contextIds.get(current.getParent(i)));\n      edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n      edges.append(\";\\n\");\n    }\n  }\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"digraph G {\\n\");\n  builder.append(\"rankdir=LR;\\n\");\n  builder.append(nodes);\n  builder.append(edges);\n  builder.append(\"}\\n\");\n  return builder.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2309,
        "startLineNumber" : 810,
        "startColumnNumber" : 1,
        "endLineNumber" : 881,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static String toDOTString(PredictionContext context,boolean rootIsWildcard){\n  StringBuilder nodes=new StringBuilder();\n  StringBuilder edges=new StringBuilder();\n  Map<PredictionContext,PredictionContext> visited=new IdentityHashMap<PredictionContext,PredictionContext>();\n  Map<PredictionContext,Integer> contextIds=new IdentityHashMap<PredictionContext,Integer>();\n  Deque<PredictionContext> workList=new ArrayDeque<PredictionContext>();\n  visited.put(context,context);\n  contextIds.put(context,contextIds.size());\n  workList.add(context);\n  while (!workList.isEmpty()) {\n    PredictionContext current=workList.pop();\n    nodes.append(\"  s\").append(contextIds.get(current)).append('[');\n    if (current.size() > 1) {\n      nodes.append(\"shape=record, \");\n    }\n    nodes.append(\"label=\\\"\");\n    if (current.isEmpty()) {\n      nodes.append(rootIsWildcard ? '*' : '$');\n    }\n else     if (current.size() > 1) {\n      for (int i=0; i < current.size(); i++) {\n        if (i > 0) {\n          nodes.append('|');\n        }\n        nodes.append(\"<p\").append(i).append('>');\n        if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n          nodes.append(rootIsWildcard ? '*' : '$');\n        }\n      }\n    }\n else {\n      nodes.append(contextIds.get(current));\n    }\n    nodes.append(\"\\\"];\\n\");\n    if (current.isEmpty()) {\n      continue;\n    }\n    for (int i=0; i < current.size(); i++) {\n      if (current.getReturnState(i) == PredictionContext.EMPTY_RETURN_STATE) {\n        continue;\n      }\n      if (visited.put(current.getParent(i),current.getParent(i)) == null) {\n        contextIds.put(current.getParent(i),contextIds.size());\n        workList.push(current.getParent(i));\n      }\n      edges.append(\"  s\").append(contextIds.get(current));\n      if (current.size() > 1) {\n        edges.append(\":p\").append(i);\n      }\n      edges.append(\"->\");\n      edges.append('s').append(contextIds.get(current.getParent(i)));\n      edges.append(\"[label=\\\"\").append(current.getReturnState(i)).append(\"\\\"]\");\n      edges.append(\";\\n\");\n    }\n  }\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"digraph G {\\n\");\n  builder.append(\"rankdir=LR;\\n\");\n  builder.append(nodes);\n  builder.append(edges);\n  builder.append(\"}\\n\");\n  return builder.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 397,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 839,
        "startColumnNumber" : 6,
        "endLineNumber" : 839,
        "endColumnNumber" : 47
      },
      "nodeContext" : "nodes.append(rootIsWildcard ? '*' : '$');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 830,
    "startColumnNumber" : 40,
    "endLineNumber" : 830,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 839,
    "startColumnNumber" : 42,
    "endLineNumber" : 839,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  } ]
}