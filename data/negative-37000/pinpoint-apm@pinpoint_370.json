{
  "id" : 370,
  "expression" : "new TransformCallback(){\n  @Override public byte[] doInTransform(  Instrumentor instrumentor,  ClassLoader loader,  String className,  Class<?> classBeingRedefined,  ProtectionDomain protectionDomain,  byte[] classfileBuffer) throws InstrumentException {\n    InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n    target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n    final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n    if (dispatchMethod != null) {\n      dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n    }\n    target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n    return target.toBytecode();\n  }\n}\n",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/plugins/activemq-client/src/main/java/com/navercorp/pinpoint/plugin/activemq/client/ActiveMQClientPlugin.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TransformCallback(){\n  @Override public byte[] doInTransform(  Instrumentor instrumentor,  ClassLoader loader,  String className,  Class<?> classBeingRedefined,  ProtectionDomain protectionDomain,  byte[] classfileBuffer) throws InstrumentException {\n    InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n    target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n    final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n    if (dispatchMethod != null) {\n      dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n    }\n    target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n    return target.toBytecode();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 1085,
      "startLineNumber" : 153,
      "startColumnNumber" : 92,
      "endLineNumber" : 170,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 100,
    "astHeight" : 10,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 153,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 10
      },
      "nodeContext" : "transformTemplate.transform(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_FQCN,new TransformCallback(){\n  @Override public byte[] doInTransform(  Instrumentor instrumentor,  ClassLoader loader,  String className,  Class<?> classBeingRedefined,  ProtectionDomain protectionDomain,  byte[] classfileBuffer) throws InstrumentException {\n    InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n    target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n    final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n    if (dispatchMethod != null) {\n      dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n    }\n    target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n    return target.toBytecode();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 106,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 153,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 11
      },
      "nodeContext" : "transformTemplate.transform(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_FQCN,new TransformCallback(){\n  @Override public byte[] doInTransform(  Instrumentor instrumentor,  ClassLoader loader,  String className,  Class<?> classBeingRedefined,  ProtectionDomain protectionDomain,  byte[] classfileBuffer) throws InstrumentException {\n    InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n    target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n    final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n    if (dispatchMethod != null) {\n      dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n    }\n    target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n    return target.toBytecode();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1187,
        "startLineNumber" : 152,
        "startColumnNumber" : 82,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  transformTemplate.transform(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_FQCN,new TransformCallback(){\n    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {\n      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n      target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n      final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n      if (dispatchMethod != null) {\n        dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n      }\n      target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n      return target.toBytecode();\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1265,
        "startLineNumber" : 152,
        "startColumnNumber" : 4,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void addConsumerEditor(final Filter<String> excludeDestinationFilter){\n  transformTemplate.transform(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_FQCN,new TransformCallback(){\n    @Override public byte[] doInTransform(    Instrumentor instrumentor,    ClassLoader loader,    String className,    Class<?> classBeingRedefined,    ProtectionDomain protectionDomain,    byte[] classfileBuffer) throws InstrumentException {\n      InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n      target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n      final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n      if (dispatchMethod != null) {\n        dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n      }\n      target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n      return target.toBytecode();\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 120,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1171,
        "startLineNumber" : 153,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 11
      },
      "nodeContext" : "transformTemplate.transform(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_FQCN,new TransformCallback(){\n  @Override public byte[] doInTransform(  Instrumentor instrumentor,  ClassLoader loader,  String className,  Class<?> classBeingRedefined,  ProtectionDomain protectionDomain,  byte[] classfileBuffer) throws InstrumentException {\n    InstrumentClass target=instrumentor.getInstrumentClass(loader,className,classfileBuffer);\n    target.addGetter(ActiveMQClientConstants.FIELD_GETTER_ACTIVEMQ_SESSION,ActiveMQClientConstants.FIELD_ACTIVEMQ_MESSAGE_CONSUMER_SESSION);\n    final InstrumentMethod dispatchMethod=target.getDeclaredMethod(\"dispatch\",\"org.apache.activemq.command.MessageDispatch\");\n    if (dispatchMethod != null) {\n      dispatchMethod.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_DISPATCH_INTERCEPTOR_FQCN,va(excludeDestinationFilter));\n    }\n    target.addInterceptor(ActiveMQClientConstants.ACTIVEMQ_MESSAGE_CONSUMER_RECEIVE_INTERCEPTOR_FQCN);\n    return target.toBytecode();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 107,
      "astHeight" : 12
    },
    "tokenLength" : 69,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 1085,
    "startLineNumber" : 153,
    "startColumnNumber" : 92,
    "endLineNumber" : 170,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}