{
  "id" : 62,
  "expression" : "transcriber.getStringSecret(testKey)",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/vault/KeycloakVaultTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "transcriber.getStringSecret(testKey)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 76,
      "startColumnNumber" : 44,
      "endLineNumber" : 76,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 76,
        "startColumnNumber" : 35,
        "endLineNumber" : 76,
        "endColumnNumber" : 80
      },
      "nodeContext" : "secret=transcriber.getStringSecret(testKey)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 76,
        "startColumnNumber" : 17,
        "endLineNumber" : 76,
        "endColumnNumber" : 80
      },
      "nodeContext" : "VaultStringSecret secret=transcriber.getStringSecret(testKey)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (VaultStringSecret secret=transcriber.getStringSecret(testKey)){\n  Optional<String> optional=secret.get();\n  Assert.assertTrue(optional.isPresent());\n  String secretString=optional.get();\n  Assert.assertEquals(expectedSecret,secretString);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 71,
        "startColumnNumber" : 49,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  VaultTranscriber transcriber=session.vault();\n  Assert.assertNotNull(transcriber);\n  try (VaultStringSecret secret=transcriber.getStringSecret(testKey)){\n    Optional<String> optional=secret.get();\n    Assert.assertTrue(optional.isPresent());\n    String secretString=optional.get();\n    Assert.assertEquals(expectedSecret,secretString);\n  }\n   String invalidEntry=\"${vault.invalid_entry}\";\n  try (VaultStringSecret secret=transcriber.getStringSecret(invalidEntry)){\n    Optional<String> optional=secret.get();\n    Assert.assertFalse(optional.isPresent());\n  }\n   try (VaultStringSecret secret=transcriber.getStringSecret(\"mysecret\")){\n    Optional<String> optional=secret.get();\n    Assert.assertTrue(optional.isPresent());\n    String secretString=optional.get();\n    Assert.assertEquals(\"mysecret\",secretString);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1364,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(KeycloakSession session){\n  VaultTranscriber transcriber=session.vault();\n  Assert.assertNotNull(transcriber);\n  try (VaultStringSecret secret=transcriber.getStringSecret(testKey)){\n    Optional<String> optional=secret.get();\n    Assert.assertTrue(optional.isPresent());\n    String secretString=optional.get();\n    Assert.assertEquals(expectedSecret,secretString);\n  }\n   String invalidEntry=\"${vault.invalid_entry}\";\n  try (VaultStringSecret secret=transcriber.getStringSecret(invalidEntry)){\n    Optional<String> optional=secret.get();\n    Assert.assertFalse(optional.isPresent());\n  }\n   try (VaultStringSecret secret=transcriber.getStringSecret(\"mysecret\")){\n    Optional<String> optional=secret.get();\n    Assert.assertTrue(optional.isPresent());\n    String secretString=optional.get();\n    Assert.assertEquals(\"mysecret\",secretString);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 145,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 76,
        "startColumnNumber" : 17,
        "endLineNumber" : 76,
        "endColumnNumber" : 80
      },
      "nodeContext" : "VaultStringSecret secret=transcriber.getStringSecret(testKey)",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "org.keycloak.vault.VaultStringSecret"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 76,
    "startColumnNumber" : 44,
    "endLineNumber" : 76,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}