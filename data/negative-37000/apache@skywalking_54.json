{
  "id" : 54,
  "expression" : "endIndex != -1",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-commons/apm-util/src/main/java/org/apache/skywalking/apm/util/PropertyPlaceholderHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "endIndex != -1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 132,
      "startColumnNumber" : 16,
      "endLineNumber" : 132,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (endIndex != -1) {\n  String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);\n  String originalPlaceholder=placeholder;\n  if (!visitedPlaceholders.add(originalPlaceholder)) {\n    throw new IllegalArgumentException(\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n  }\n  placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);\n  String propVal=placeholderResolver.resolvePlaceholder(placeholder);\n  if (propVal == null && this.valueSeparator != null) {\n    int separatorIndex=placeholder.indexOf(this.valueSeparator);\n    if (separatorIndex != -1) {\n      String actualPlaceholder=placeholder.substring(0,separatorIndex);\n      String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());\n      propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);\n      if (propVal == null) {\n        propVal=defaultValue;\n      }\n    }\n  }\n  if (propVal != null) {\n    propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);\n    result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);\n    startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());\n  }\n else   if (this.ignoreUnresolvablePlaceholders) {\n    startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());\n  }\n else {\n    throw new IllegalArgumentException(\"Could not resolve placeholder '\" + placeholder + \"'\"+ \" in value \\\"\"+ value+ \"\\\"\");\n  }\n  visitedPlaceholders.remove(originalPlaceholder);\n}\n else {\n  startIndex=-1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 212,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2635,
        "startLineNumber" : 130,
        "startColumnNumber" : 33,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int endIndex=findPlaceholderEndIndex(result,startIndex);\n  if (endIndex != -1) {\n    String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);\n    String originalPlaceholder=placeholder;\n    if (!visitedPlaceholders.add(originalPlaceholder)) {\n      throw new IllegalArgumentException(\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n    }\n    placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);\n    String propVal=placeholderResolver.resolvePlaceholder(placeholder);\n    if (propVal == null && this.valueSeparator != null) {\n      int separatorIndex=placeholder.indexOf(this.valueSeparator);\n      if (separatorIndex != -1) {\n        String actualPlaceholder=placeholder.substring(0,separatorIndex);\n        String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());\n        propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);\n        if (propVal == null) {\n          propVal=defaultValue;\n        }\n      }\n    }\n    if (propVal != null) {\n      propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);\n      result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);\n      startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());\n    }\n else     if (this.ignoreUnresolvablePlaceholders) {\n      startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());\n    }\n else {\n      throw new IllegalArgumentException(\"Could not resolve placeholder '\" + placeholder + \"'\"+ \" in value \\\"\"+ value+ \"\\\"\");\n    }\n    visitedPlaceholders.remove(originalPlaceholder);\n  }\n else {\n    startIndex=-1;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2660,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (startIndex != -1) {\n  int endIndex=findPlaceholderEndIndex(result,startIndex);\n  if (endIndex != -1) {\n    String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);\n    String originalPlaceholder=placeholder;\n    if (!visitedPlaceholders.add(originalPlaceholder)) {\n      throw new IllegalArgumentException(\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n    }\n    placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);\n    String propVal=placeholderResolver.resolvePlaceholder(placeholder);\n    if (propVal == null && this.valueSeparator != null) {\n      int separatorIndex=placeholder.indexOf(this.valueSeparator);\n      if (separatorIndex != -1) {\n        String actualPlaceholder=placeholder.substring(0,separatorIndex);\n        String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());\n        propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);\n        if (propVal == null) {\n          propVal=defaultValue;\n        }\n      }\n    }\n    if (propVal != null) {\n      propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);\n      result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);\n      startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());\n    }\n else     if (this.ignoreUnresolvablePlaceholders) {\n      startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());\n    }\n else {\n      throw new IllegalArgumentException(\"Could not resolve placeholder '\" + placeholder + \"'\"+ \" in value \\\"\"+ value+ \"\\\"\");\n    }\n    visitedPlaceholders.remove(originalPlaceholder);\n  }\n else {\n    startIndex=-1;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 226,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 125,
        "startColumnNumber" : 71,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringBuilder result=new StringBuilder(value);\n  int startIndex=value.indexOf(this.placeholderPrefix);\n  while (startIndex != -1) {\n    int endIndex=findPlaceholderEndIndex(result,startIndex);\n    if (endIndex != -1) {\n      String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);\n      String originalPlaceholder=placeholder;\n      if (!visitedPlaceholders.add(originalPlaceholder)) {\n        throw new IllegalArgumentException(\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n      }\n      placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);\n      String propVal=placeholderResolver.resolvePlaceholder(placeholder);\n      if (propVal == null && this.valueSeparator != null) {\n        int separatorIndex=placeholder.indexOf(this.valueSeparator);\n        if (separatorIndex != -1) {\n          String actualPlaceholder=placeholder.substring(0,separatorIndex);\n          String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());\n          propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);\n          if (propVal == null) {\n            propVal=defaultValue;\n          }\n        }\n      }\n      if (propVal != null) {\n        propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);\n        result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);\n        startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());\n      }\n else       if (this.ignoreUnresolvablePlaceholders) {\n        startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());\n      }\n else {\n        throw new IllegalArgumentException(\"Could not resolve placeholder '\" + placeholder + \"'\"+ \" in value \\\"\"+ value+ \"\\\"\");\n      }\n      visitedPlaceholders.remove(originalPlaceholder);\n    }\n else {\n      startIndex=-1;\n    }\n  }\n  return result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2993,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected String parseStringValue(String value,PlaceholderResolver placeholderResolver,Set<String> visitedPlaceholders){\n  StringBuilder result=new StringBuilder(value);\n  int startIndex=value.indexOf(this.placeholderPrefix);\n  while (startIndex != -1) {\n    int endIndex=findPlaceholderEndIndex(result,startIndex);\n    if (endIndex != -1) {\n      String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);\n      String originalPlaceholder=placeholder;\n      if (!visitedPlaceholders.add(originalPlaceholder)) {\n        throw new IllegalArgumentException(\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n      }\n      placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);\n      String propVal=placeholderResolver.resolvePlaceholder(placeholder);\n      if (propVal == null && this.valueSeparator != null) {\n        int separatorIndex=placeholder.indexOf(this.valueSeparator);\n        if (separatorIndex != -1) {\n          String actualPlaceholder=placeholder.substring(0,separatorIndex);\n          String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());\n          propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);\n          if (propVal == null) {\n            propVal=defaultValue;\n          }\n        }\n      }\n      if (propVal != null) {\n        propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);\n        result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);\n        startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());\n      }\n else       if (this.ignoreUnresolvablePlaceholders) {\n        startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());\n      }\n else {\n        throw new IllegalArgumentException(\"Could not resolve placeholder '\" + placeholder + \"'\"+ \" in value \\\"\"+ value+ \"\\\"\");\n      }\n      visitedPlaceholders.remove(originalPlaceholder);\n    }\n else {\n      startIndex=-1;\n    }\n  }\n  return result.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (endIndex != -1) {\n  String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);\n  String originalPlaceholder=placeholder;\n  if (!visitedPlaceholders.add(originalPlaceholder)) {\n    throw new IllegalArgumentException(\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n  }\n  placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);\n  String propVal=placeholderResolver.resolvePlaceholder(placeholder);\n  if (propVal == null && this.valueSeparator != null) {\n    int separatorIndex=placeholder.indexOf(this.valueSeparator);\n    if (separatorIndex != -1) {\n      String actualPlaceholder=placeholder.substring(0,separatorIndex);\n      String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());\n      propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);\n      if (propVal == null) {\n        propVal=defaultValue;\n      }\n    }\n  }\n  if (propVal != null) {\n    propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);\n    result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);\n    startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());\n  }\n else   if (this.ignoreUnresolvablePlaceholders) {\n    startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());\n  }\n else {\n    throw new IllegalArgumentException(\"Could not resolve placeholder '\" + placeholder + \"'\"+ \" in value \\\"\"+ value+ \"\\\"\");\n  }\n  visitedPlaceholders.remove(originalPlaceholder);\n}\n else {\n  startIndex=-1;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 212,
      "astHeight" : 13
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 132,
    "startColumnNumber" : 16,
    "endLineNumber" : 132,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}