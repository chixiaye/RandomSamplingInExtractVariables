{
  "id" : 254,
  "expression" : "connectMessage.payload()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "connectMessage.payload()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 845,
      "startColumnNumber" : 31,
      "endLineNumber" : 845,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 845,
        "startColumnNumber" : 8,
        "endLineNumber" : 845,
        "endColumnNumber" : 89
      },
      "nodeContext" : "validateConnectPayload(connectMessage.payload(),decodedConnectMessage.payload())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 845,
        "startColumnNumber" : 8,
        "endLineNumber" : 845,
        "endColumnNumber" : 90
      },
      "nodeContext" : "validateConnectPayload(connectMessage.payload(),decodedConnectMessage.payload());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1136,
        "startLineNumber" : 828,
        "startColumnNumber" : 60,
        "endLineNumber" : 848,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  clearInvocations(versionAttrMock);\n  final MqttConnectMessage connectMessage=createConnectMessage(MqttVersion.MQTT_5);\n  ByteBuf connectByteBuf=MqttEncoder.doEncode(ctx,connectMessage);\n  verify(versionAttrMock,times(1)).set(MqttVersion.MQTT_5);\n  clearInvocations(versionAttrMock);\n  ArgumentCaptor<MqttConnectMessage> captor=ArgumentCaptor.forClass(MqttConnectMessage.class);\n  mqttDecoder.channelRead(ctx,connectByteBuf);\n  verify(ctx).fireChannelRead(captor.capture());\n  verify(versionAttrMock,times(1)).set(MqttVersion.MQTT_5);\n  final MqttConnectMessage decodedConnectMessage=captor.getValue();\n  validateFixedHeaders(connectMessage.fixedHeader(),decodedConnectMessage.fixedHeader());\n  validateConnectVariableHeader(connectMessage.variableHeader(),decodedConnectMessage.variableHeader());\n  validateConnectPayload(connectMessage.payload(),decodedConnectMessage.payload());\n  verifyNoMoreInteractions(versionAttrMock);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1203,
        "startLineNumber" : 827,
        "startColumnNumber" : 4,
        "endLineNumber" : 848,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testMqttVersionDetection() throws Exception {\n  clearInvocations(versionAttrMock);\n  final MqttConnectMessage connectMessage=createConnectMessage(MqttVersion.MQTT_5);\n  ByteBuf connectByteBuf=MqttEncoder.doEncode(ctx,connectMessage);\n  verify(versionAttrMock,times(1)).set(MqttVersion.MQTT_5);\n  clearInvocations(versionAttrMock);\n  ArgumentCaptor<MqttConnectMessage> captor=ArgumentCaptor.forClass(MqttConnectMessage.class);\n  mqttDecoder.channelRead(ctx,connectByteBuf);\n  verify(ctx).fireChannelRead(captor.capture());\n  verify(versionAttrMock,times(1)).set(MqttVersion.MQTT_5);\n  final MqttConnectMessage decodedConnectMessage=captor.getValue();\n  validateFixedHeaders(connectMessage.fixedHeader(),decodedConnectMessage.fixedHeader());\n  validateConnectVariableHeader(connectMessage.variableHeader(),decodedConnectMessage.variableHeader());\n  validateConnectPayload(connectMessage.payload(),decodedConnectMessage.payload());\n  verifyNoMoreInteractions(versionAttrMock);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 131,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 845,
        "startColumnNumber" : 8,
        "endLineNumber" : 845,
        "endColumnNumber" : 90
      },
      "nodeContext" : "validateConnectPayload(connectMessage.payload(),decodedConnectMessage.payload());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "io.netty.handler.codec.mqtt.MqttConnectPayload"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 845,
    "startColumnNumber" : 31,
    "endLineNumber" : 845,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}