{
  "id" : 264,
  "expression" : "\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\"",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/http/ConnectionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 143,
      "startColumnNumber" : 8,
      "endLineNumber" : 143,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1213,
        "startLineNumber" : 130,
        "startColumnNumber" : 89,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try (Connection connection=testConnection){\n    sendFunction.send(connection,fakeRequest);\n  }\n   Mockito.verify(mockHttpRequest).setHeaders(httpHeadersArgumentCaptor.capture());\n  Mockito.verify(mockHttpResponse).disconnect();\n  Assert.assertEquals(\"fake.accept,another.fake.accept\",httpHeadersArgumentCaptor.getValue().getAccept());\n  Assert.assertEquals(\"fake user agent\",httpHeadersArgumentCaptor.getValue().getUserAgent());\n  Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization());\n  Mockito.verify(mockHttpRequestFactory).buildRequest(Mockito.eq(httpMethod),Mockito.eq(fakeUrl),blobHttpContentArgumentCaptor.capture());\n  Assert.assertEquals(\"fake.content.type\",blobHttpContentArgumentCaptor.getValue().getType());\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  blobHttpContentArgumentCaptor.getValue().writeTo(byteArrayOutputStream);\n  Assert.assertEquals(\"crepecake\",new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1300,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 156,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testSend(String httpMethod,SendFunction sendFunction) throws IOException {\n  try (Connection connection=testConnection){\n    sendFunction.send(connection,fakeRequest);\n  }\n   Mockito.verify(mockHttpRequest).setHeaders(httpHeadersArgumentCaptor.capture());\n  Mockito.verify(mockHttpResponse).disconnect();\n  Assert.assertEquals(\"fake.accept,another.fake.accept\",httpHeadersArgumentCaptor.getValue().getAccept());\n  Assert.assertEquals(\"fake user agent\",httpHeadersArgumentCaptor.getValue().getUserAgent());\n  Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization());\n  Mockito.verify(mockHttpRequestFactory).buildRequest(Mockito.eq(httpMethod),Mockito.eq(fakeUrl),blobHttpContentArgumentCaptor.capture());\n  Assert.assertEquals(\"fake.content.type\",blobHttpContentArgumentCaptor.getValue().getType());\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  blobHttpContentArgumentCaptor.getValue().writeTo(byteArrayOutputStream);\n  Assert.assertEquals(\"crepecake\",new String(byteArrayOutputStream.toByteArray(),StandardCharsets.UTF_8));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 133,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 64
      },
      "nodeContext" : "Assert.assertEquals(\"Basic ZmFrZS11c2VybmFtZTpmYWtlLXNlY3JldA==\",httpHeadersArgumentCaptor.getValue().getAuthorization())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 143,
    "startColumnNumber" : 8,
    "endLineNumber" : 143,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}