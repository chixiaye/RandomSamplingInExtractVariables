{
  "id" : 465,
  "expression" : "\"TagUtils.getScope(..) with a non-existent scope argument must \"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/web/util/TagUtilsTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"TagUtils.getScope(..) with a non-existent scope argument must \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 64,
      "startLineNumber" : 48,
      "startColumnNumber" : 15,
      "endLineNumber" : 48,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 48,
        "startColumnNumber" : 15,
        "endLineNumber" : 49,
        "endColumnNumber" : 61
      },
      "nodeContext" : "\"TagUtils.getScope(..) with a non-existent scope argument must \" + \"just return the default scope (PageContext.PAGE_SCOPE).\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertEquals(\"TagUtils.getScope(..) with a non-existent scope argument must \" + \"just return the default scope (PageContext.PAGE_SCOPE).\",PageContext.PAGE_SCOPE,TagUtils.getScope(\"bla\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertEquals(\"TagUtils.getScope(..) with a non-existent scope argument must \" + \"just return the default scope (PageContext.PAGE_SCOPE).\",PageContext.PAGE_SCOPE,TagUtils.getScope(\"bla\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 730,
        "startLineNumber" : 36,
        "startColumnNumber" : 32,
        "endLineNumber" : 51,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertEquals(\"page\",TagUtils.SCOPE_PAGE);\n  assertEquals(\"application\",TagUtils.SCOPE_APPLICATION);\n  assertEquals(\"session\",TagUtils.SCOPE_SESSION);\n  assertEquals(\"request\",TagUtils.SCOPE_REQUEST);\n  assertEquals(PageContext.PAGE_SCOPE,TagUtils.getScope(\"page\"));\n  assertEquals(PageContext.REQUEST_SCOPE,TagUtils.getScope(\"request\"));\n  assertEquals(PageContext.SESSION_SCOPE,TagUtils.getScope(\"session\"));\n  assertEquals(PageContext.APPLICATION_SCOPE,TagUtils.getScope(\"application\"));\n  assertEquals(\"TagUtils.getScope(..) with a non-existent scope argument must \" + \"just return the default scope (PageContext.PAGE_SCOPE).\",PageContext.PAGE_SCOPE,TagUtils.getScope(\"bla\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 768,
        "startLineNumber" : 35,
        "startColumnNumber" : 1,
        "endLineNumber" : 51,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void getScopeSunnyDay(){\n  assertEquals(\"page\",TagUtils.SCOPE_PAGE);\n  assertEquals(\"application\",TagUtils.SCOPE_APPLICATION);\n  assertEquals(\"session\",TagUtils.SCOPE_SESSION);\n  assertEquals(\"request\",TagUtils.SCOPE_REQUEST);\n  assertEquals(PageContext.PAGE_SCOPE,TagUtils.getScope(\"page\"));\n  assertEquals(PageContext.REQUEST_SCOPE,TagUtils.getScope(\"request\"));\n  assertEquals(PageContext.SESSION_SCOPE,TagUtils.getScope(\"session\"));\n  assertEquals(PageContext.APPLICATION_SCOPE,TagUtils.getScope(\"application\"));\n  assertEquals(\"TagUtils.getScope(..) with a non-existent scope argument must \" + \"just return the default scope (PageContext.PAGE_SCOPE).\",PageContext.PAGE_SCOPE,TagUtils.getScope(\"bla\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 88,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 48,
        "startColumnNumber" : 15,
        "endLineNumber" : 49,
        "endColumnNumber" : 61
      },
      "nodeContext" : "\"TagUtils.getScope(..) with a non-existent scope argument must \" + \"just return the default scope (PageContext.PAGE_SCOPE).\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 64,
    "startLineNumber" : 48,
    "startColumnNumber" : 15,
    "endLineNumber" : 48,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}