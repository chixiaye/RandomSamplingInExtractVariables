{
  "id" : 324,
  "expression" : "prefix.charAt(prefix.length() - 1)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/TransformationsUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "prefix.charAt(prefix.length() - 1)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 67,
      "startColumnNumber" : 26,
      "endLineNumber" : 67,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 67,
        "startColumnNumber" : 7,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Character.isLetter(prefix.charAt(prefix.length() - 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 67,
        "startColumnNumber" : 7,
        "endLineNumber" : 68,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 67,
        "startColumnNumber" : 3,
        "endLineNumber" : 68,
        "endColumnNumber" : 57
      },
      "nodeContext" : "if (Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar)) continue outer;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 58,
        "startColumnNumber" : 33,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (prefix.length() == 0)   return fieldName;\n  if (fieldName.length() <= prefix.length())   continue outer;\n  for (int i=0; i < prefix.length(); i++) {\n    if (fieldName.charAt(i) != prefix.charAt(i))     continue outer;\n  }\n  char followupChar=fieldName.charAt(prefix.length());\n  if (Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar))   continue outer;\n  return \"\" + Character.toLowerCase(followupChar) + fieldName.subSequence(prefix.length() + 1,fieldName.length());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 726,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String prefix : prefixes) {\n  if (prefix.length() == 0)   return fieldName;\n  if (fieldName.length() <= prefix.length())   continue outer;\n  for (int i=0; i < prefix.length(); i++) {\n    if (fieldName.charAt(i) != prefix.charAt(i))     continue outer;\n  }\n  char followupChar=fieldName.charAt(prefix.length());\n  if (Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar))   continue outer;\n  return \"\" + Character.toLowerCase(followupChar) + fieldName.subSequence(prefix.length() + 1,fieldName.length());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 735,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "outer: for (String prefix : prefixes) {\n  if (prefix.length() == 0)   return fieldName;\n  if (fieldName.length() <= prefix.length())   continue outer;\n  for (int i=0; i < prefix.length(); i++) {\n    if (fieldName.charAt(i) != prefix.charAt(i))     continue outer;\n  }\n  char followupChar=fieldName.charAt(prefix.length());\n  if (Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar))   continue outer;\n  return \"\" + Character.toLowerCase(followupChar) + fieldName.subSequence(prefix.length() + 1,fieldName.length());\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 829,
        "startLineNumber" : 54,
        "startColumnNumber" : 85,
        "endLineNumber" : 73,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (prefixes == null || prefixes.length == 0)   return fieldName;\n  outer:   for (  String prefix : prefixes) {\n    if (prefix.length() == 0)     return fieldName;\n    if (fieldName.length() <= prefix.length())     continue outer;\n    for (int i=0; i < prefix.length(); i++) {\n      if (fieldName.charAt(i) != prefix.charAt(i))       continue outer;\n    }\n    char followupChar=fieldName.charAt(prefix.length());\n    if (Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar))     continue outer;\n    return \"\" + Character.toLowerCase(followupChar) + fieldName.subSequence(prefix.length() + 1,fieldName.length());\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1869,
        "startLineNumber" : 42,
        "startColumnNumber" : 1,
        "endLineNumber" : 73,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Given the name of a field, return the 'base name' of that field. For example,  {@code fFoobar} becomes {@code foobar} if {@code f} is in the prefix list.For prefixes that end in a letter character, the next character must be a non-lowercase character (i.e.  {@code hashCode} is not {@code ashCode} even if{@code h} is in the prefix list, but {@code hAshcode} would become {@code ashCode}). The first prefix that matches is used. If the prefix list is empty, or the empty string is in the prefix list and no prefix before it matches, the fieldName will be returned verbatim. If no prefix matches and the empty string is not in the prefix list and the prefix list is not empty,  {@code null} is returned.\n * @param fieldName The full name of a field.\n * @param prefixes A list of prefixes, usually provided by the {@code Accessors} settings annotation, listing field prefixes.\n * @return The base name of the field.\n */\nprivate static CharSequence removePrefix(CharSequence fieldName,String[] prefixes){\n  if (prefixes == null || prefixes.length == 0)   return fieldName;\n  outer:   for (  String prefix : prefixes) {\n    if (prefix.length() == 0)     return fieldName;\n    if (fieldName.length() <= prefix.length())     continue outer;\n    for (int i=0; i < prefix.length(); i++) {\n      if (fieldName.charAt(i) != prefix.charAt(i))       continue outer;\n    }\n    char followupChar=fieldName.charAt(prefix.length());\n    if (Character.isLetter(prefix.charAt(prefix.length() - 1)) && Character.isLowerCase(followupChar))     continue outer;\n    return \"\" + Character.toLowerCase(followupChar) + fieldName.subSequence(prefix.length() + 1,fieldName.length());\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 132,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 67,
        "startColumnNumber" : 7,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Character.isLetter(prefix.charAt(prefix.length() - 1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 67,
    "startColumnNumber" : 26,
    "endLineNumber" : 67,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}