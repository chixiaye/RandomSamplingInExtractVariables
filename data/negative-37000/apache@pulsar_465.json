{
  "id" : 465,
  "expression" : "\"lenovo\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/influxdb/src/test/java/org/apache/pulsar/io/influxdb/v1/InfluxDBGenericRecordSinkTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"lenovo\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 116,
      "startColumnNumber" : 21,
      "endLineNumber" : 116,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 30
      },
      "nodeContext" : "cpu.setModel(\"lenovo\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 31
      },
      "nodeContext" : "cpu.setModel(\"lenovo\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1808,
        "startLineNumber" : 110,
        "startColumnNumber" : 52,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  message=mock(MessageImpl.class);\n  GenericSchema<GenericRecord> genericAvroSchema;\n  Cpu cpu=new Cpu();\n  cpu.setMeasurement(\"cpu\");\n  cpu.setModel(\"lenovo\");\n  cpu.setValue(10);\n  Map<String,String> tags=Maps.newHashMap();\n  tags.put(\"host\",\"server-1\");\n  tags.put(\"region\",\"us-west\");\n  cpu.setTags(tags);\n  AvroSchema<Cpu> schema=AvroSchema.of(Cpu.class);\n  byte[] bytes=schema.encode(cpu);\n  AutoConsumeSchema autoConsumeSchema=new AutoConsumeSchema();\n  autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n  Record<GenericRecord> record=PulsarRecord.<GenericRecord>builder().message(message).topicName(\"influx_cpu\").build();\n  genericAvroSchema=new GenericAvroSchema(schema.getSchemaInfo());\n  when(message.getValue()).thenReturn(genericAvroSchema.decode(bytes));\n  log.info(\"cpu:{}, Message.getValue: {}, record.getValue: {}\",cpu.toString(),message.getValue().toString(),record.getValue().toString());\n  influxSink.open(configMap,mockSinkContext);\n  verify(this.influxDB,times(1)).describeDatabases();\n  verify(this.influxDB,times(1)).createDatabase(\"testDB\");\n  doAnswer(invocationOnMock -> {\n    BatchPoints batchPoints=invocationOnMock.getArgument(0,BatchPoints.class);\n    Assert.assertNotNull(batchPoints,\"batchPoints should not be null.\");\n    return null;\n  }\n).when(influxDB).write(any(BatchPoints.class));\n  influxSink.write(record);\n  Thread.sleep(1000);\n  verify(influxDB,times(1)).write(any(BatchPoints.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testOpenAndWrite() throws Exception {\n  message=mock(MessageImpl.class);\n  GenericSchema<GenericRecord> genericAvroSchema;\n  Cpu cpu=new Cpu();\n  cpu.setMeasurement(\"cpu\");\n  cpu.setModel(\"lenovo\");\n  cpu.setValue(10);\n  Map<String,String> tags=Maps.newHashMap();\n  tags.put(\"host\",\"server-1\");\n  tags.put(\"region\",\"us-west\");\n  cpu.setTags(tags);\n  AvroSchema<Cpu> schema=AvroSchema.of(Cpu.class);\n  byte[] bytes=schema.encode(cpu);\n  AutoConsumeSchema autoConsumeSchema=new AutoConsumeSchema();\n  autoConsumeSchema.setSchema(GenericSchemaImpl.of(schema.getSchemaInfo()));\n  Record<GenericRecord> record=PulsarRecord.<GenericRecord>builder().message(message).topicName(\"influx_cpu\").build();\n  genericAvroSchema=new GenericAvroSchema(schema.getSchemaInfo());\n  when(message.getValue()).thenReturn(genericAvroSchema.decode(bytes));\n  log.info(\"cpu:{}, Message.getValue: {}, record.getValue: {}\",cpu.toString(),message.getValue().toString(),record.getValue().toString());\n  influxSink.open(configMap,mockSinkContext);\n  verify(this.influxDB,times(1)).describeDatabases();\n  verify(this.influxDB,times(1)).createDatabase(\"testDB\");\n  doAnswer(invocationOnMock -> {\n    BatchPoints batchPoints=invocationOnMock.getArgument(0,BatchPoints.class);\n    Assert.assertNotNull(batchPoints,\"batchPoints should not be null.\");\n    return null;\n  }\n).when(influxDB).write(any(BatchPoints.class));\n  influxSink.write(record);\n  Thread.sleep(1000);\n  verify(influxDB,times(1)).write(any(BatchPoints.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 270,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 31
      },
      "nodeContext" : "cpu.setModel(\"lenovo\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 116,
    "startColumnNumber" : 21,
    "endLineNumber" : 116,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}