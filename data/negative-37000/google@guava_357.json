{
  "id" : 357,
  "expression" : "maxLength",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/base/Ascii.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "maxLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 554,
      "startColumnNumber" : 27,
      "endLineNumber" : 554,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 554,
        "startColumnNumber" : 27,
        "endLineNumber" : 554,
        "endColumnNumber" : 67
      },
      "nodeContext" : "maxLength - truncationIndicator.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 554,
        "startColumnNumber" : 8,
        "endLineNumber" : 554,
        "endColumnNumber" : 67
      },
      "nodeContext" : "truncationLength=maxLength - truncationIndicator.length()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 554,
        "startColumnNumber" : 4,
        "endLineNumber" : 554,
        "endColumnNumber" : 68
      },
      "nodeContext" : "int truncationLength=maxLength - truncationIndicator.length();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 550,
        "startColumnNumber" : 93,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 518,
        "startColumnNumber" : 2,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than  {@code maxLength}, the returned string will be exactly  {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: <pre> {@code Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\" Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"}</pre> <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul>\n * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator}\n * @since 16.0\n */\npublic static String truncate(CharSequence seq,int maxLength,String truncationIndicator){\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 554,
        "startColumnNumber" : 4,
        "endLineNumber" : 554,
        "endColumnNumber" : 68
      },
      "nodeContext" : "int truncationLength=maxLength - truncationIndicator.length();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 561,
      "startColumnNumber" : 8,
      "endLineNumber" : 561,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 558,
        "startColumnNumber" : 4,
        "endLineNumber" : 562,
        "endColumnNumber" : 37
      },
      "nodeContext" : "checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 558,
        "startColumnNumber" : 4,
        "endLineNumber" : 562,
        "endColumnNumber" : 38
      },
      "nodeContext" : "checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 550,
        "startColumnNumber" : 93,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 518,
        "startColumnNumber" : 2,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than  {@code maxLength}, the returned string will be exactly  {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: <pre> {@code Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\" Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"}</pre> <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul>\n * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator}\n * @since 16.0\n */\npublic static String truncate(CharSequence seq,int maxLength,String truncationIndicator){\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 558,
        "startColumnNumber" : 4,
        "endLineNumber" : 562,
        "endColumnNumber" : 37
      },
      "nodeContext" : "checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 564,
      "startColumnNumber" : 24,
      "endLineNumber" : 564,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 564,
        "startColumnNumber" : 8,
        "endLineNumber" : 564,
        "endColumnNumber" : 33
      },
      "nodeContext" : "seq.length() <= maxLength",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 564,
        "startColumnNumber" : 4,
        "endLineNumber" : 571,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (seq.length() <= maxLength) {\n  String string=seq.toString();\n  if (string.length() <= maxLength) {\n    return string;\n  }\n  seq=string;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 550,
        "startColumnNumber" : 93,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 518,
        "startColumnNumber" : 2,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than  {@code maxLength}, the returned string will be exactly  {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: <pre> {@code Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\" Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"}</pre> <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul>\n * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator}\n * @since 16.0\n */\npublic static String truncate(CharSequence seq,int maxLength,String truncationIndicator){\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 564,
        "startColumnNumber" : 8,
        "endLineNumber" : 564,
        "endColumnNumber" : 33
      },
      "nodeContext" : "seq.length() <= maxLength",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 566,
      "startColumnNumber" : 29,
      "endLineNumber" : 566,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 566,
        "startColumnNumber" : 10,
        "endLineNumber" : 566,
        "endColumnNumber" : 38
      },
      "nodeContext" : "string.length() <= maxLength",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 566,
        "startColumnNumber" : 6,
        "endLineNumber" : 568,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (string.length() <= maxLength) {\n  return string;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 564,
        "startColumnNumber" : 35,
        "endLineNumber" : 571,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String string=seq.toString();\n  if (string.length() <= maxLength) {\n    return string;\n  }\n  seq=string;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 271,
        "startLineNumber" : 564,
        "startColumnNumber" : 4,
        "endLineNumber" : 571,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (seq.length() <= maxLength) {\n  String string=seq.toString();\n  if (string.length() <= maxLength) {\n    return string;\n  }\n  seq=string;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 550,
        "startColumnNumber" : 93,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 518,
        "startColumnNumber" : 2,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than  {@code maxLength}, the returned string will be exactly  {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: <pre> {@code Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\" Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"}</pre> <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul>\n * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator}\n * @since 16.0\n */\npublic static String truncate(CharSequence seq,int maxLength,String truncationIndicator){\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 566,
        "startColumnNumber" : 10,
        "endLineNumber" : 566,
        "endColumnNumber" : 38
      },
      "nodeContext" : "string.length() <= maxLength",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "maxLength",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 573,
      "startColumnNumber" : 29,
      "endLineNumber" : 573,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 573,
        "startColumnNumber" : 11,
        "endLineNumber" : 573,
        "endColumnNumber" : 39
      },
      "nodeContext" : "new StringBuilder(maxLength)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 573,
        "startColumnNumber" : 11,
        "endLineNumber" : 574,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new StringBuilder(maxLength).append(seq,0,truncationLength)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 573,
        "startColumnNumber" : 11,
        "endLineNumber" : 575,
        "endColumnNumber" : 36
      },
      "nodeContext" : "new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 573,
        "startColumnNumber" : 11,
        "endLineNumber" : 576,
        "endColumnNumber" : 19
      },
      "nodeContext" : "new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 573,
        "startColumnNumber" : 4,
        "endLineNumber" : 576,
        "endColumnNumber" : 20
      },
      "nodeContext" : "return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 990,
        "startLineNumber" : 550,
        "startColumnNumber" : 93,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 68,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2594,
        "startLineNumber" : 518,
        "startColumnNumber" : 2,
        "endLineNumber" : 577,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than  {@code maxLength}, the returned string will be exactly  {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: <pre> {@code Ascii.truncate(\"foobar\", 7, \"...\"); // returns \"foobar\" Ascii.truncate(\"foobar\", 5, \"...\"); // returns \"fo...\"}</pre> <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul>\n * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator}\n * @since 16.0\n */\npublic static String truncate(CharSequence seq,int maxLength,String truncationIndicator){\n  checkNotNull(seq);\n  int truncationLength=maxLength - truncationIndicator.length();\n  checkArgument(truncationLength >= 0,\"maxLength (%s) must be >= length of the truncation indicator (%s)\",maxLength,truncationIndicator.length());\n  if (seq.length() <= maxLength) {\n    String string=seq.toString();\n    if (string.length() <= maxLength) {\n      return string;\n    }\n    seq=string;\n  }\n  return new StringBuilder(maxLength).append(seq,0,truncationLength).append(truncationIndicator).toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 573,
        "startColumnNumber" : 11,
        "endLineNumber" : 573,
        "endColumnNumber" : 39
      },
      "nodeContext" : "new StringBuilder(maxLength)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 554,
    "startColumnNumber" : 27,
    "endLineNumber" : 554,
    "endColumnNumber" : 36
  }, {
    "charLength" : 9,
    "startLineNumber" : 561,
    "startColumnNumber" : 8,
    "endLineNumber" : 561,
    "endColumnNumber" : 17
  }, {
    "charLength" : 9,
    "startLineNumber" : 564,
    "startColumnNumber" : 24,
    "endLineNumber" : 564,
    "endColumnNumber" : 33
  }, {
    "charLength" : 9,
    "startLineNumber" : 566,
    "startColumnNumber" : 29,
    "endLineNumber" : 566,
    "endColumnNumber" : 38
  }, {
    "charLength" : 9,
    "startLineNumber" : 573,
    "startColumnNumber" : 29,
    "endLineNumber" : 573,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  } ]
}