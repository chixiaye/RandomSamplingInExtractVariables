{
  "id" : 142,
  "expression" : "y * 2",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/logic/LogicBlock.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "y * 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 157,
      "startColumnNumber" : 54,
      "endLineNumber" : 157,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 157,
        "startColumnNumber" : 36,
        "endLineNumber" : 157,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Tmp.p1.set(x * 2,y * 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 157,
        "startColumnNumber" : 36,
        "endLineNumber" : 157,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 73
      },
      "nodeContext" : "transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 74
      },
      "nodeContext" : "transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 501,
        "startLineNumber" : 152,
        "startColumnNumber" : 46,
        "endLineNumber" : 162,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String name=stream.readUTF();\n  short x=stream.readShort(), y=stream.readShort();\n  Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n  transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n  Tmp.p1.add(Tmp.p2);\n  Tmp.p1.x/=2;\n  Tmp.p1.y/=2;\n  links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 531,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 162,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < total; i++) {\n  String name=stream.readUTF();\n  short x=stream.readShort(), y=stream.readShort();\n  Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n  transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n  Tmp.p1.add(Tmp.p2);\n  Tmp.p1.x/=2;\n  Tmp.p1.y/=2;\n  links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 120,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 137,
        "startColumnNumber" : 118,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  stream.read();\n  int bytelen=stream.readInt();\n  if (bytelen > maxByteLen)   throw new RuntimeException(\"Malformed logic data! Length: \" + bytelen);\n  byte[] bytes=new byte[bytelen];\n  stream.readFully(bytes);\n  int total=stream.readInt();\n  Seq<LogicLink> links=new Seq<>();\n  for (int i=0; i < total; i++) {\n    String name=stream.readUTF();\n    short x=stream.readShort(), y=stream.readShort();\n    Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n    transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n    Tmp.p1.add(Tmp.p2);\n    Tmp.p1.x/=2;\n    Tmp.p1.y/=2;\n    links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n  }\n  return compress(bytes,links);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 137,
        "startColumnNumber" : 12,
        "endLineNumber" : 167,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (DataInputStream stream=new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data)))){\n  stream.read();\n  int bytelen=stream.readInt();\n  if (bytelen > maxByteLen)   throw new RuntimeException(\"Malformed logic data! Length: \" + bytelen);\n  byte[] bytes=new byte[bytelen];\n  stream.readFully(bytes);\n  int total=stream.readInt();\n  Seq<LogicLink> links=new Seq<>();\n  for (int i=0; i < total; i++) {\n    String name=stream.readUTF();\n    short x=stream.readShort(), y=stream.readShort();\n    Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n    transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n    Tmp.p1.add(Tmp.p2);\n    Tmp.p1.x/=2;\n    Tmp.p1.y/=2;\n    links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n  }\n  return compress(bytes,links);\n}\n catch (IOException e) {\n  Log.err(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 210,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1234,
        "startLineNumber" : 135,
        "startColumnNumber" : 41,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try (DataInputStream stream=new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data)))){\n    stream.read();\n    int bytelen=stream.readInt();\n    if (bytelen > maxByteLen)     throw new RuntimeException(\"Malformed logic data! Length: \" + bytelen);\n    byte[] bytes=new byte[bytelen];\n    stream.readFully(bytes);\n    int total=stream.readInt();\n    Seq<LogicLink> links=new Seq<>();\n    for (int i=0; i < total; i++) {\n      String name=stream.readUTF();\n      short x=stream.readShort(), y=stream.readShort();\n      Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n      transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n      Tmp.p1.add(Tmp.p2);\n      Tmp.p1.x/=2;\n      Tmp.p1.y/=2;\n      links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n    }\n    return compress(bytes,links);\n  }\n catch (  IOException e) {\n    Log.err(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1267,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config instanceof byte[] data) {\n  try (DataInputStream stream=new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data)))){\n    stream.read();\n    int bytelen=stream.readInt();\n    if (bytelen > maxByteLen)     throw new RuntimeException(\"Malformed logic data! Length: \" + bytelen);\n    byte[] bytes=new byte[bytelen];\n    stream.readFully(bytes);\n    int total=stream.readInt();\n    Seq<LogicLink> links=new Seq<>();\n    for (int i=0; i < total; i++) {\n      String name=stream.readUTF();\n      short x=stream.readShort(), y=stream.readShort();\n      Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n      transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n      Tmp.p1.add(Tmp.p2);\n      Tmp.p1.x/=2;\n      Tmp.p1.y/=2;\n      links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n    }\n    return compress(bytes,links);\n  }\n catch (  IOException e) {\n    Log.err(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 134,
        "startColumnNumber" : 70,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (config instanceof   byte[] data) {\n    try (DataInputStream stream=new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data)))){\n      stream.read();\n      int bytelen=stream.readInt();\n      if (bytelen > maxByteLen)       throw new RuntimeException(\"Malformed logic data! Length: \" + bytelen);\n      byte[] bytes=new byte[bytelen];\n      stream.readFully(bytes);\n      int total=stream.readInt();\n      Seq<LogicLink> links=new Seq<>();\n      for (int i=0; i < total; i++) {\n        String name=stream.readUTF();\n        short x=stream.readShort(), y=stream.readShort();\n        Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n        transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n        Tmp.p1.add(Tmp.p2);\n        Tmp.p1.x/=2;\n        Tmp.p1.y/=2;\n        links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n      }\n      return compress(bytes,links);\n    }\n catch (    IOException e) {\n      Log.err(e);\n    }\n  }\n  return config;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 222,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 170,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object pointConfig(Object config,Cons<Point2> transformer){\n  if (config instanceof   byte[] data) {\n    try (DataInputStream stream=new DataInputStream(new InflaterInputStream(new ByteArrayInputStream(data)))){\n      stream.read();\n      int bytelen=stream.readInt();\n      if (bytelen > maxByteLen)       throw new RuntimeException(\"Malformed logic data! Length: \" + bytelen);\n      byte[] bytes=new byte[bytelen];\n      stream.readFully(bytes);\n      int total=stream.readInt();\n      Seq<LogicLink> links=new Seq<>();\n      for (int i=0; i < total; i++) {\n        String name=stream.readUTF();\n        short x=stream.readShort(), y=stream.readShort();\n        Tmp.p2.set((int)(offset / (tilesize / 2)),(int)(offset / (tilesize / 2)));\n        transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n        Tmp.p1.add(Tmp.p2);\n        Tmp.p1.x/=2;\n        Tmp.p1.y/=2;\n        links.add(new LogicLink(Tmp.p1.x,Tmp.p1.y,name,true));\n      }\n      return compress(bytes,links);\n    }\n catch (    IOException e) {\n      Log.err(e);\n    }\n  }\n  return config;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 240,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 74
      },
      "nodeContext" : "transformer.get(Tmp.p1.set(x * 2,y * 2).sub(Tmp.p2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 157,
    "startColumnNumber" : 54,
    "endLineNumber" : 157,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}