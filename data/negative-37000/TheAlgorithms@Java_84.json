{
  "id" : 84,
  "expression" : "Map",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Sorts/CountingSort.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 37,
      "startColumnNumber" : 12,
      "endLineNumber" : 37,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 21
      },
      "nodeContext" : "Map.Entry",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 21
      },
      "nodeContext" : "Map.Entry",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Map.Entry<T,Integer>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Map.Entry<T,Integer> element",
      "nodeType" : "SingleVariableDeclaration",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<T,Integer> element : frequency.entrySet()) {\n  for (int j=0; j < element.getValue(); j++) {\n    sortedArray.add(element.getKey());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 555,
        "startLineNumber" : 27,
        "startColumnNumber" : 79,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<T,Integer> frequency=new TreeMap<>();\n  List<T> sortedArray=new ArrayList<>(list.size());\n  list.forEach(v -> frequency.put(v,frequency.getOrDefault(v,0) + 1));\n  for (  Map.Entry<T,Integer> element : frequency.entrySet()) {\n    for (int j=0; j < element.getValue(); j++) {\n      sortedArray.add(element.getKey());\n    }\n  }\n  return sortedArray;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 866,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 44,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method implements the Generic Counting Sort\n * @param list The list to be sortedSorts the list in increasing order The method uses list elements as keys in the frequency map\n */\npublic static <T extends Comparable<T>>List<T> countingSort(List<T> list){\n  Map<T,Integer> frequency=new TreeMap<>();\n  List<T> sortedArray=new ArrayList<>(list.size());\n  list.forEach(v -> frequency.put(v,frequency.getOrDefault(v,0) + 1));\n  for (  Map.Entry<T,Integer> element : frequency.entrySet()) {\n    for (int j=0; j < element.getValue(); j++) {\n      sortedArray.add(element.getKey());\n    }\n  }\n  return sortedArray;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 37,
        "startColumnNumber" : 12,
        "endLineNumber" : 37,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Map.Entry<T,Integer> element",
      "nodeType" : "SingleVariableDeclaration",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 37,
    "startColumnNumber" : 12,
    "endLineNumber" : 37,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}