{
  "id" : 291,
  "expression" : "new CopyOnWriteArrayList<>()",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/StandaloneDatabaseOperateImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CopyOnWriteArrayList<>()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 103,
      "startColumnNumber" : 40,
      "endLineNumber" : 103,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 4,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 103,
        "startColumnNumber" : 30,
        "endLineNumber" : 103,
        "endColumnNumber" : 68
      },
      "nodeContext" : "results=new CopyOnWriteArrayList<>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 69
      },
      "nodeContext" : "List<Boolean> results=new CopyOnWriteArrayList<>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1338,
        "startLineNumber" : 99,
        "startColumnNumber" : 81,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int batchSize=1000;\n  List<String> batchUpdate=new ArrayList<>(batchSize);\n  List<CompletableFuture<Void>> futures=new ArrayList<>();\n  List<Boolean> results=new CopyOnWriteArrayList<>();\n  while (iterator.hasNext()) {\n    String sql=iterator.next();\n    if (StringUtils.isNotBlank(sql)) {\n      batchUpdate.add(sql);\n    }\n    if (batchUpdate.size() == batchSize || !iterator.hasNext()) {\n      List<ModifyRequest> sqls=batchUpdate.stream().map(s -> {\n        ModifyRequest request=new ModifyRequest();\n        request.setSql(s);\n        return request;\n      }\n).collect(Collectors.toList());\n      futures.add(CompletableFuture.runAsync(() -> results.add(doDataImport(jdbcTemplate,sqls))));\n      batchUpdate.clear();\n    }\n  }\n  CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\n  return RestResult.<String>builder().withCode(BooleanUtils.and(results.toArray(new Boolean[0])) ? 200 : 500).withData(\"\").build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (DiskUtils.LineIterator iterator=DiskUtils.lineIterator(file)){\n  int batchSize=1000;\n  List<String> batchUpdate=new ArrayList<>(batchSize);\n  List<CompletableFuture<Void>> futures=new ArrayList<>();\n  List<Boolean> results=new CopyOnWriteArrayList<>();\n  while (iterator.hasNext()) {\n    String sql=iterator.next();\n    if (StringUtils.isNotBlank(sql)) {\n      batchUpdate.add(sql);\n    }\n    if (batchUpdate.size() == batchSize || !iterator.hasNext()) {\n      List<ModifyRequest> sqls=batchUpdate.stream().map(s -> {\n        ModifyRequest request=new ModifyRequest();\n        request.setSql(s);\n        return request;\n      }\n).collect(Collectors.toList());\n      futures.add(CompletableFuture.runAsync(() -> results.add(doDataImport(jdbcTemplate,sqls))));\n      batchUpdate.clear();\n    }\n  }\n  CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\n  return RestResult.<String>builder().withCode(BooleanUtils.and(results.toArray(new Boolean[0])) ? 200 : 500).withData(\"\").build();\n}\n catch (Throwable ex) {\n  LogUtil.DEFAULT_LOG.error(\"An exception occurred when external data was imported into Derby : {}\",ex);\n  return RestResultUtils.failed(ex.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 214,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1652,
        "startLineNumber" : 98,
        "startColumnNumber" : 51,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try (DiskUtils.LineIterator iterator=DiskUtils.lineIterator(file)){\n    int batchSize=1000;\n    List<String> batchUpdate=new ArrayList<>(batchSize);\n    List<CompletableFuture<Void>> futures=new ArrayList<>();\n    List<Boolean> results=new CopyOnWriteArrayList<>();\n    while (iterator.hasNext()) {\n      String sql=iterator.next();\n      if (StringUtils.isNotBlank(sql)) {\n        batchUpdate.add(sql);\n      }\n      if (batchUpdate.size() == batchSize || !iterator.hasNext()) {\n        List<ModifyRequest> sqls=batchUpdate.stream().map(s -> {\n          ModifyRequest request=new ModifyRequest();\n          request.setSql(s);\n          return request;\n        }\n).collect(Collectors.toList());\n        futures.add(CompletableFuture.runAsync(() -> results.add(doDataImport(jdbcTemplate,sqls))));\n        batchUpdate.clear();\n      }\n    }\n    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\n    return RestResult.<String>builder().withCode(BooleanUtils.and(results.toArray(new Boolean[0])) ? 200 : 500).withData(\"\").build();\n  }\n catch (  Throwable ex) {\n    LogUtil.DEFAULT_LOG.error(\"An exception occurred when external data was imported into Derby : {}\",ex);\n    return RestResultUtils.failed(ex.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1658,
        "startLineNumber" : 98,
        "startColumnNumber" : 45,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  try (DiskUtils.LineIterator iterator=DiskUtils.lineIterator(file)){\n    int batchSize=1000;\n    List<String> batchUpdate=new ArrayList<>(batchSize);\n    List<CompletableFuture<Void>> futures=new ArrayList<>();\n    List<Boolean> results=new CopyOnWriteArrayList<>();\n    while (iterator.hasNext()) {\n      String sql=iterator.next();\n      if (StringUtils.isNotBlank(sql)) {\n        batchUpdate.add(sql);\n      }\n      if (batchUpdate.size() == batchSize || !iterator.hasNext()) {\n        List<ModifyRequest> sqls=batchUpdate.stream().map(s -> {\n          ModifyRequest request=new ModifyRequest();\n          request.setSql(s);\n          return request;\n        }\n).collect(Collectors.toList());\n        futures.add(CompletableFuture.runAsync(() -> results.add(doDataImport(jdbcTemplate,sqls))));\n        batchUpdate.clear();\n      }\n    }\n    CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\n    return RestResult.<String>builder().withCode(BooleanUtils.and(results.toArray(new Boolean[0])) ? 200 : 500).withData(\"\").build();\n  }\n catch (  Throwable ex) {\n    LogUtil.DEFAULT_LOG.error(\"An exception occurred when external data was imported into Derby : {}\",ex);\n    return RestResultUtils.failed(ex.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 216,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 69
      },
      "nodeContext" : "List<Boolean> results=new CopyOnWriteArrayList<>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.CopyOnWriteArrayList<java.lang.Boolean>"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 103,
    "startColumnNumber" : 40,
    "endLineNumber" : 103,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}