{
  "id" : 170,
  "expression" : "additionalBeans",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/MicrometerProcessor.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "additionalBeans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 104,
      "startColumnNumber" : 8,
      "endLineNumber" : 104,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 25
      },
      "nodeContext" : "additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 26
      },
      "nodeContext" : "additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 101,
        "startColumnNumber" : 85,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build());\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build());\n  interceptorBindings.produce(new InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar(){\n    @Override public List<InterceptorBinding> getAdditionalBindings(){\n      return List.of(InterceptorBinding.of(Timed.class,m -> true));\n    }\n  }\n));\n  IndexView index=indexBuildItem.getIndex();\n  reflectiveClasses.produce(createReflectiveBuildItem(COUNTED_ANNOTATION,index));\n  reflectiveClasses.produce(createReflectiveBuildItem(TIMED_ANNOTATION,index));\n  reflectiveClasses.produce(ReflectiveClassBuildItem.builder(\"org.HdrHistogram.Histogram\",\"org.HdrHistogram.DoubleHistogram\",\"org.HdrHistogram.ConcurrentHistogram\").constructors(true).build());\n  return UnremovableBeanBuildItem.beanTypes(METER_REGISTRY,METER_BINDER,METER_FILTER,NAMING_CONVENTION);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2316,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BuildStep(onlyIf=MicrometerEnabled.class) UnremovableBeanBuildItem registerAdditionalBeans(CombinedIndexBuildItem indexBuildItem,BuildProducer<MicrometerRegistryProviderBuildItem> providerClasses,BuildProducer<ReflectiveClassBuildItem> reflectiveClasses,BuildProducer<AdditionalBeanBuildItem> additionalBeans,BuildProducer<InterceptorBindingRegistrarBuildItem> interceptorBindings){\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build());\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build());\n  interceptorBindings.produce(new InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar(){\n    @Override public List<InterceptorBinding> getAdditionalBindings(){\n      return List.of(InterceptorBinding.of(Timed.class,m -> true));\n    }\n  }\n));\n  IndexView index=indexBuildItem.getIndex();\n  reflectiveClasses.produce(createReflectiveBuildItem(COUNTED_ANNOTATION,index));\n  reflectiveClasses.produce(createReflectiveBuildItem(TIMED_ANNOTATION,index));\n  reflectiveClasses.produce(ReflectiveClassBuildItem.builder(\"org.HdrHistogram.Histogram\",\"org.HdrHistogram.DoubleHistogram\",\"org.HdrHistogram.ConcurrentHistogram\").constructors(true).build());\n  return UnremovableBeanBuildItem.beanTypes(METER_REGISTRY,METER_BINDER,METER_FILTER,NAMING_CONVENTION);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 25
      },
      "nodeContext" : "additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.annotations.BuildProducer<io.quarkus.arc.deployment.AdditionalBeanBuildItem>"
  }, {
    "nodeContext" : "additionalBeans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 111,
      "startColumnNumber" : 8,
      "endLineNumber" : 111,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 25
      },
      "nodeContext" : "additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 43,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 503,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 26
      },
      "nodeContext" : "additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 44,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 101,
        "startColumnNumber" : 85,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build());\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build());\n  interceptorBindings.produce(new InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar(){\n    @Override public List<InterceptorBinding> getAdditionalBindings(){\n      return List.of(InterceptorBinding.of(Timed.class,m -> true));\n    }\n  }\n));\n  IndexView index=indexBuildItem.getIndex();\n  reflectiveClasses.produce(createReflectiveBuildItem(COUNTED_ANNOTATION,index));\n  reflectiveClasses.produce(createReflectiveBuildItem(TIMED_ANNOTATION,index));\n  reflectiveClasses.produce(ReflectiveClassBuildItem.builder(\"org.HdrHistogram.Histogram\",\"org.HdrHistogram.DoubleHistogram\",\"org.HdrHistogram.ConcurrentHistogram\").constructors(true).build());\n  return UnremovableBeanBuildItem.beanTypes(METER_REGISTRY,METER_BINDER,METER_FILTER,NAMING_CONVENTION);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 149,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2316,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@BuildStep(onlyIf=MicrometerEnabled.class) UnremovableBeanBuildItem registerAdditionalBeans(CombinedIndexBuildItem indexBuildItem,BuildProducer<MicrometerRegistryProviderBuildItem> providerClasses,BuildProducer<ReflectiveClassBuildItem> reflectiveClasses,BuildProducer<AdditionalBeanBuildItem> additionalBeans,BuildProducer<InterceptorBindingRegistrarBuildItem> interceptorBindings){\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().setUnremovable().addBeanClass(ClockProvider.class).addBeanClass(CompositeRegistryCreator.class).build());\n  additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build());\n  interceptorBindings.produce(new InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar(){\n    @Override public List<InterceptorBinding> getAdditionalBindings(){\n      return List.of(InterceptorBinding.of(Timed.class,m -> true));\n    }\n  }\n));\n  IndexView index=indexBuildItem.getIndex();\n  reflectiveClasses.produce(createReflectiveBuildItem(COUNTED_ANNOTATION,index));\n  reflectiveClasses.produce(createReflectiveBuildItem(TIMED_ANNOTATION,index));\n  reflectiveClasses.produce(ReflectiveClassBuildItem.builder(\"org.HdrHistogram.Histogram\",\"org.HdrHistogram.DoubleHistogram\",\"org.HdrHistogram.ConcurrentHistogram\").constructors(true).build());\n  return UnremovableBeanBuildItem.beanTypes(METER_REGISTRY,METER_BINDER,METER_FILTER,NAMING_CONVENTION);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 119,
        "endColumnNumber" : 25
      },
      "nodeContext" : "additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(MeterFilterConstraint.class).addBeanClass(MeterFilterConstraints.class).addBeanClass(TIMED_ANNOTATION.toString()).addBeanClass(TIMED_INTERCEPTOR.toString()).addBeanClass(COUNTED_ANNOTATION.toString()).addBeanClass(COUNTED_BINDING.toString()).addBeanClass(COUNTED_INTERCEPTOR.toString()).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 43,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.deployment.annotations.BuildProducer<io.quarkus.arc.deployment.AdditionalBeanBuildItem>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 104,
    "startColumnNumber" : 8,
    "endLineNumber" : 104,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 111,
    "startColumnNumber" : 8,
    "endLineNumber" : 111,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}