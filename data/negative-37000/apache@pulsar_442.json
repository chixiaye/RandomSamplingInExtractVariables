{
  "id" : 442,
  "expression" : "(KafkaAbstractSource.KeyValueKafkaRecord)record",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/kafka/src/test/java/org/apache/pulsar/io/kafka/KafkaBytesSourceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(KafkaAbstractSource.KeyValueKafkaRecord)record",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 142,
      "startColumnNumber" : 59,
      "endLineNumber" : 142,
      "endColumnNumber" : 107
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 142,
        "startColumnNumber" : 48,
        "endLineNumber" : 142,
        "endColumnNumber" : 107
      },
      "nodeContext" : "kvRecord=(KafkaAbstractSource.KeyValueKafkaRecord)record",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 108
      },
      "nodeContext" : "KafkaAbstractSource.KeyValueKafkaRecord kvRecord=(KafkaAbstractSource.KeyValueKafkaRecord)record;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2083,
        "startLineNumber" : 122,
        "startColumnNumber" : 75,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KafkaBytesSource source=new KafkaBytesSource();\n  Map<String,Object> config=new HashMap<>();\n  config.put(\"topic\",\"test\");\n  config.put(\"bootstrapServers\",\"localhost:9092\");\n  config.put(\"groupId\",\"test\");\n  config.put(\"valueDeserializationClass\",valueDeserializationClass);\n  config.put(\"keyDeserializationClass\",keyDeserializationClass);\n  config.put(\"consumerConfigProperties\",ImmutableMap.builder().put(\"schema.registry.url\",\"http://localhost:8081\").build());\n  source.open(config,Mockito.mock(SourceContext.class));\n  assertTrue(source.isProduceKeyValue());\n  Schema keySchema=source.getKeySchema();\n  Schema valueSchema=source.getValueSchema();\n  assertEquals(keySchema.getSchemaInfo().getType(),expectedKeySchema.getSchemaInfo().getType());\n  assertEquals(valueSchema.getSchemaInfo().getType(),expectedValueSchema.getSchemaInfo().getType());\n  KafkaAbstractSource.KafkaRecord record=source.buildRecord(new ConsumerRecord<Object,Object>(\"test\",0,0,key,value));\n  assertThat(record,instanceOf(KafkaAbstractSource.KeyValueKafkaRecord.class));\n  KafkaAbstractSource.KeyValueKafkaRecord kvRecord=(KafkaAbstractSource.KeyValueKafkaRecord)record;\n  assertSame(keySchema,kvRecord.getKeySchema());\n  assertSame(valueSchema,kvRecord.getValueSchema());\n  assertEquals(KeyValueEncodingType.SEPARATED,kvRecord.getKeyValueEncodingType());\n  KeyValue kvValue=(KeyValue)kvRecord.getValue();\n  log.info(\"key {}\",Arrays.toString(toArray(key)));\n  log.info(\"value {}\",Arrays.toString(toArray(value)));\n  log.info(\"key {}\",Arrays.toString(toArray((ByteBuffer)kvValue.getKey())));\n  log.info(\"value {}\",Arrays.toString(toArray((ByteBuffer)kvValue.getValue())));\n  assertEquals(ByteBuffer.wrap(toArray(key)).compareTo((ByteBuffer)kvValue.getKey()),0);\n  assertEquals(ByteBuffer.wrap(toArray(value)).compareTo((ByteBuffer)kvValue.getValue()),0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 297,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2414,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 155,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void validateSchemaKeyValue(String keyDeserializationClass,Schema expectedKeySchema,String valueDeserializationClass,Schema expectedValueSchema,ByteBuffer key,ByteBuffer value) throws Exception {\n  KafkaBytesSource source=new KafkaBytesSource();\n  Map<String,Object> config=new HashMap<>();\n  config.put(\"topic\",\"test\");\n  config.put(\"bootstrapServers\",\"localhost:9092\");\n  config.put(\"groupId\",\"test\");\n  config.put(\"valueDeserializationClass\",valueDeserializationClass);\n  config.put(\"keyDeserializationClass\",keyDeserializationClass);\n  config.put(\"consumerConfigProperties\",ImmutableMap.builder().put(\"schema.registry.url\",\"http://localhost:8081\").build());\n  source.open(config,Mockito.mock(SourceContext.class));\n  assertTrue(source.isProduceKeyValue());\n  Schema keySchema=source.getKeySchema();\n  Schema valueSchema=source.getValueSchema();\n  assertEquals(keySchema.getSchemaInfo().getType(),expectedKeySchema.getSchemaInfo().getType());\n  assertEquals(valueSchema.getSchemaInfo().getType(),expectedValueSchema.getSchemaInfo().getType());\n  KafkaAbstractSource.KafkaRecord record=source.buildRecord(new ConsumerRecord<Object,Object>(\"test\",0,0,key,value));\n  assertThat(record,instanceOf(KafkaAbstractSource.KeyValueKafkaRecord.class));\n  KafkaAbstractSource.KeyValueKafkaRecord kvRecord=(KafkaAbstractSource.KeyValueKafkaRecord)record;\n  assertSame(keySchema,kvRecord.getKeySchema());\n  assertSame(valueSchema,kvRecord.getValueSchema());\n  assertEquals(KeyValueEncodingType.SEPARATED,kvRecord.getKeyValueEncodingType());\n  KeyValue kvValue=(KeyValue)kvRecord.getValue();\n  log.info(\"key {}\",Arrays.toString(toArray(key)));\n  log.info(\"value {}\",Arrays.toString(toArray(value)));\n  log.info(\"key {}\",Arrays.toString(toArray((ByteBuffer)kvValue.getKey())));\n  log.info(\"value {}\",Arrays.toString(toArray((ByteBuffer)kvValue.getValue())));\n  assertEquals(ByteBuffer.wrap(toArray(key)).compareTo((ByteBuffer)kvValue.getKey()),0);\n  assertEquals(ByteBuffer.wrap(toArray(value)).compareTo((ByteBuffer)kvValue.getValue()),0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 327,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 108
      },
      "nodeContext" : "KafkaAbstractSource.KeyValueKafkaRecord kvRecord=(KafkaAbstractSource.KeyValueKafkaRecord)record;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "org.apache.pulsar.io.kafka.KafkaAbstractSource.KeyValueKafkaRecord"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 142,
    "startColumnNumber" : 59,
    "endLineNumber" : 142,
    "endColumnNumber" : 107
  } ],
  "layoutRelationDataList" : [ ]
}