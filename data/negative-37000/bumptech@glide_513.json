{
  "id" : 513,
  "expression" : "encoder",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "encoder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 296,
      "startColumnNumber" : 25,
      "endLineNumber" : 296,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 296,
        "startColumnNumber" : 25,
        "endLineNumber" : 296,
        "endColumnNumber" : 79
      },
      "nodeContext" : "encoder.getEncodeStrategy(requestContext.getOptions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 296,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 79
      },
      "nodeContext" : "encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 296,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 80
      },
      "nodeContext" : "encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 294,
        "startColumnNumber" : 66,
        "endLineNumber" : 297,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  encoder=requestContext.getResultEncoder(transformed);\n  encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 294,
        "startColumnNumber" : 6,
        "endLineNumber" : 300,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (requestContext.isResourceEncoderAvailable(transformed)) {\n  encoder=requestContext.getResultEncoder(transformed);\n  encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n}\n else {\n  encoder=null;\n  encodeStrategy=EncodeStrategy.NONE;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 279,
        "startColumnNumber" : 62,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<Z> resourceSubClass=getResourceClass(decoded);\n  Transformation<Z> appliedTransformation=null;\n  Resource<Z> transformed=decoded;\n  if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n    appliedTransformation=requestContext.getTransformation(resourceSubClass);\n    transformed=appliedTransformation.transform(decoded,width,height);\n  }\n  if (!decoded.equals(transformed)) {\n    decoded.recycle();\n  }\n  final EncodeStrategy encodeStrategy;\n  final ResourceEncoder<Z> encoder;\n  if (requestContext.isResourceEncoderAvailable(transformed)) {\n    encoder=requestContext.getResultEncoder(transformed);\n    encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n  }\n else {\n    encoder=null;\n    encodeStrategy=EncodeStrategy.NONE;\n  }\n  long startEncodeTime=LogTime.getLogTime();\n  DiskCacheStrategy diskCacheStrategy=requestContext.getDiskCacheStrategy();\n  boolean isFromAlternateCacheKey=!requestContext.isSourceKey(currentSourceKey);\n  if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n    if (encoder == null) {\n      throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n    }\n    final Key key;\n    if (encodeStrategy == EncodeStrategy.SOURCE) {\n      key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n    }\n else     if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n      key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n    }\n    diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n    if (Logs.isEnabled(Log.VERBOSE)) {\n      logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n    }\n  }\n  return transformed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2385,
        "startLineNumber" : 278,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Resource<Z> onResourceDecoded(Resource<Z> decoded){\n  Class<Z> resourceSubClass=getResourceClass(decoded);\n  Transformation<Z> appliedTransformation=null;\n  Resource<Z> transformed=decoded;\n  if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n    appliedTransformation=requestContext.getTransformation(resourceSubClass);\n    transformed=appliedTransformation.transform(decoded,width,height);\n  }\n  if (!decoded.equals(transformed)) {\n    decoded.recycle();\n  }\n  final EncodeStrategy encodeStrategy;\n  final ResourceEncoder<Z> encoder;\n  if (requestContext.isResourceEncoderAvailable(transformed)) {\n    encoder=requestContext.getResultEncoder(transformed);\n    encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n  }\n else {\n    encoder=null;\n    encodeStrategy=EncodeStrategy.NONE;\n  }\n  long startEncodeTime=LogTime.getLogTime();\n  DiskCacheStrategy diskCacheStrategy=requestContext.getDiskCacheStrategy();\n  boolean isFromAlternateCacheKey=!requestContext.isSourceKey(currentSourceKey);\n  if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n    if (encoder == null) {\n      throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n    }\n    final Key key;\n    if (encodeStrategy == EncodeStrategy.SOURCE) {\n      key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n    }\n else     if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n      key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n    }\n    diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n    if (Logs.isEnabled(Log.VERBOSE)) {\n      logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n    }\n  }\n  return transformed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 296,
        "startColumnNumber" : 8,
        "endLineNumber" : 296,
        "endColumnNumber" : 80
      },
      "nodeContext" : "encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.bumptech.glide.load.ResourceEncoder<Z>"
  }, {
    "nodeContext" : "encoder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 307,
      "startColumnNumber" : 12,
      "endLineNumber" : 307,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 307,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 27
      },
      "nodeContext" : "encoder == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 307,
        "startColumnNumber" : 8,
        "endLineNumber" : 309,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (encoder == null) {\n  throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1026,
        "startLineNumber" : 306,
        "startColumnNumber" : 27,
        "endLineNumber" : 327,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (encoder == null) {\n    throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n  }\n  final Key key;\n  if (encodeStrategy == EncodeStrategy.SOURCE) {\n    key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n  }\n else   if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n    key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n  }\n  diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n  if (Logs.isEnabled(Log.VERBOSE)) {\n    logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 305,
        "startColumnNumber" : 6,
        "endLineNumber" : 327,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n  if (encoder == null) {\n    throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n  }\n  final Key key;\n  if (encodeStrategy == EncodeStrategy.SOURCE) {\n    key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n  }\n else   if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n    key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n  }\n  diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n  if (Logs.isEnabled(Log.VERBOSE)) {\n    logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 279,
        "startColumnNumber" : 62,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<Z> resourceSubClass=getResourceClass(decoded);\n  Transformation<Z> appliedTransformation=null;\n  Resource<Z> transformed=decoded;\n  if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n    appliedTransformation=requestContext.getTransformation(resourceSubClass);\n    transformed=appliedTransformation.transform(decoded,width,height);\n  }\n  if (!decoded.equals(transformed)) {\n    decoded.recycle();\n  }\n  final EncodeStrategy encodeStrategy;\n  final ResourceEncoder<Z> encoder;\n  if (requestContext.isResourceEncoderAvailable(transformed)) {\n    encoder=requestContext.getResultEncoder(transformed);\n    encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n  }\n else {\n    encoder=null;\n    encodeStrategy=EncodeStrategy.NONE;\n  }\n  long startEncodeTime=LogTime.getLogTime();\n  DiskCacheStrategy diskCacheStrategy=requestContext.getDiskCacheStrategy();\n  boolean isFromAlternateCacheKey=!requestContext.isSourceKey(currentSourceKey);\n  if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n    if (encoder == null) {\n      throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n    }\n    final Key key;\n    if (encodeStrategy == EncodeStrategy.SOURCE) {\n      key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n    }\n else     if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n      key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n    }\n    diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n    if (Logs.isEnabled(Log.VERBOSE)) {\n      logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n    }\n  }\n  return transformed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2385,
        "startLineNumber" : 278,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Resource<Z> onResourceDecoded(Resource<Z> decoded){\n  Class<Z> resourceSubClass=getResourceClass(decoded);\n  Transformation<Z> appliedTransformation=null;\n  Resource<Z> transformed=decoded;\n  if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n    appliedTransformation=requestContext.getTransformation(resourceSubClass);\n    transformed=appliedTransformation.transform(decoded,width,height);\n  }\n  if (!decoded.equals(transformed)) {\n    decoded.recycle();\n  }\n  final EncodeStrategy encodeStrategy;\n  final ResourceEncoder<Z> encoder;\n  if (requestContext.isResourceEncoderAvailable(transformed)) {\n    encoder=requestContext.getResultEncoder(transformed);\n    encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n  }\n else {\n    encoder=null;\n    encodeStrategy=EncodeStrategy.NONE;\n  }\n  long startEncodeTime=LogTime.getLogTime();\n  DiskCacheStrategy diskCacheStrategy=requestContext.getDiskCacheStrategy();\n  boolean isFromAlternateCacheKey=!requestContext.isSourceKey(currentSourceKey);\n  if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n    if (encoder == null) {\n      throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n    }\n    final Key key;\n    if (encodeStrategy == EncodeStrategy.SOURCE) {\n      key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n    }\n else     if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n      key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n    }\n    diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n    if (Logs.isEnabled(Log.VERBOSE)) {\n      logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n    }\n  }\n  return transformed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 307,
        "startColumnNumber" : 12,
        "endLineNumber" : 307,
        "endColumnNumber" : 27
      },
      "nodeContext" : "encoder == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.bumptech.glide.load.ResourceEncoder<Z>"
  }, {
    "nodeContext" : "encoder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 320,
      "startColumnNumber" : 72,
      "endLineNumber" : 320,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 320,
        "startColumnNumber" : 50,
        "endLineNumber" : 321,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new DataCacheWriter<>(encoder,transformed,requestContext.getOptions())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 321,
        "endColumnNumber" : 41
      },
      "nodeContext" : "diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 321,
        "endColumnNumber" : 42
      },
      "nodeContext" : "diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1026,
        "startLineNumber" : 306,
        "startColumnNumber" : 27,
        "endLineNumber" : 327,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (encoder == null) {\n    throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n  }\n  final Key key;\n  if (encodeStrategy == EncodeStrategy.SOURCE) {\n    key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n  }\n else   if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n    key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n  }\n  diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n  if (Logs.isEnabled(Log.VERBOSE)) {\n    logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 305,
        "startColumnNumber" : 6,
        "endLineNumber" : 327,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n  if (encoder == null) {\n    throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n  }\n  final Key key;\n  if (encodeStrategy == EncodeStrategy.SOURCE) {\n    key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n  }\n else   if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n    key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n  }\n  diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n  if (Logs.isEnabled(Log.VERBOSE)) {\n    logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 113,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 279,
        "startColumnNumber" : 62,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<Z> resourceSubClass=getResourceClass(decoded);\n  Transformation<Z> appliedTransformation=null;\n  Resource<Z> transformed=decoded;\n  if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n    appliedTransformation=requestContext.getTransformation(resourceSubClass);\n    transformed=appliedTransformation.transform(decoded,width,height);\n  }\n  if (!decoded.equals(transformed)) {\n    decoded.recycle();\n  }\n  final EncodeStrategy encodeStrategy;\n  final ResourceEncoder<Z> encoder;\n  if (requestContext.isResourceEncoderAvailable(transformed)) {\n    encoder=requestContext.getResultEncoder(transformed);\n    encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n  }\n else {\n    encoder=null;\n    encodeStrategy=EncodeStrategy.NONE;\n  }\n  long startEncodeTime=LogTime.getLogTime();\n  DiskCacheStrategy diskCacheStrategy=requestContext.getDiskCacheStrategy();\n  boolean isFromAlternateCacheKey=!requestContext.isSourceKey(currentSourceKey);\n  if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n    if (encoder == null) {\n      throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n    }\n    final Key key;\n    if (encodeStrategy == EncodeStrategy.SOURCE) {\n      key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n    }\n else     if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n      key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n    }\n    diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n    if (Logs.isEnabled(Log.VERBOSE)) {\n      logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n    }\n  }\n  return transformed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 251,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2385,
        "startLineNumber" : 278,
        "startColumnNumber" : 4,
        "endLineNumber" : 329,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Resource<Z> onResourceDecoded(Resource<Z> decoded){\n  Class<Z> resourceSubClass=getResourceClass(decoded);\n  Transformation<Z> appliedTransformation=null;\n  Resource<Z> transformed=decoded;\n  if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n    appliedTransformation=requestContext.getTransformation(resourceSubClass);\n    transformed=appliedTransformation.transform(decoded,width,height);\n  }\n  if (!decoded.equals(transformed)) {\n    decoded.recycle();\n  }\n  final EncodeStrategy encodeStrategy;\n  final ResourceEncoder<Z> encoder;\n  if (requestContext.isResourceEncoderAvailable(transformed)) {\n    encoder=requestContext.getResultEncoder(transformed);\n    encodeStrategy=encoder.getEncodeStrategy(requestContext.getOptions());\n  }\n else {\n    encoder=null;\n    encodeStrategy=EncodeStrategy.NONE;\n  }\n  long startEncodeTime=LogTime.getLogTime();\n  DiskCacheStrategy diskCacheStrategy=requestContext.getDiskCacheStrategy();\n  boolean isFromAlternateCacheKey=!requestContext.isSourceKey(currentSourceKey);\n  if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey,dataSource,encodeStrategy)) {\n    if (encoder == null) {\n      throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n    }\n    final Key key;\n    if (encodeStrategy == EncodeStrategy.SOURCE) {\n      key=new DataCacheKey(currentSourceKey,requestContext.getSignature());\n    }\n else     if (encodeStrategy == EncodeStrategy.TRANSFORMED) {\n      key=new ResourceCacheKey(currentSourceKey,requestContext.getSignature(),width,height,appliedTransformation,resourceSubClass,requestContext.getOptions());\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown strategy: \" + encodeStrategy);\n    }\n    diskCacheProvider.getDiskCache().put(key,new DataCacheWriter<>(encoder,transformed,requestContext.getOptions()));\n    if (Logs.isEnabled(Log.VERBOSE)) {\n      logWithTimeAndKey(\"Encoded resource to cache\",startEncodeTime,\"cache key: \" + key + \", encode strategy: \"+ encodeStrategy);\n    }\n  }\n  return transformed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 320,
        "startColumnNumber" : 50,
        "endLineNumber" : 321,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new DataCacheWriter<>(encoder,transformed,requestContext.getOptions())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.bumptech.glide.load.ResourceEncoder<Z>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 296,
    "startColumnNumber" : 25,
    "endLineNumber" : 296,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 307,
    "startColumnNumber" : 12,
    "endLineNumber" : 307,
    "endColumnNumber" : 19
  }, {
    "charLength" : 7,
    "startLineNumber" : 320,
    "startColumnNumber" : 72,
    "endLineNumber" : 320,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}