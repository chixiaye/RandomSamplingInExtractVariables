{
  "id" : 47,
  "expression" : "formatter",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/security/scram/internals/ScramFormatterTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "formatter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 66,
      "startColumnNumber" : 32,
      "endLineNumber" : 66,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 66,
        "startColumnNumber" : 32,
        "endLineNumber" : 66,
        "endColumnNumber" : 84
      },
      "nodeContext" : "formatter.saltedPassword(password,salt,iterations)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 66,
        "startColumnNumber" : 15,
        "endLineNumber" : 66,
        "endColumnNumber" : 84
      },
      "nodeContext" : "saltedPassword=formatter.saltedPassword(password,salt,iterations)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 85
      },
      "nodeContext" : "byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 38,
        "startColumnNumber" : 50,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests that the formatter implementation produces the same values for the example included in <a href=\"https://tools.ietf.org/html/rfc5802#section-5\">RFC 7677</a>\n */\n@Test public void rfc7677Example() throws Exception {\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 85
      },
      "nodeContext" : "byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.security.scram.internals.ScramFormatter"
  }, {
    "nodeContext" : "formatter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 67,
      "startColumnNumber" : 27,
      "endLineNumber" : 67,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 67,
        "startColumnNumber" : 27,
        "endLineNumber" : 67,
        "endColumnNumber" : 62
      },
      "nodeContext" : "formatter.serverKey(saltedPassword)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 67,
        "startColumnNumber" : 15,
        "endLineNumber" : 67,
        "endColumnNumber" : 62
      },
      "nodeContext" : "serverKey=formatter.serverKey(saltedPassword)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 63
      },
      "nodeContext" : "byte[] serverKey=formatter.serverKey(saltedPassword);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 38,
        "startColumnNumber" : 50,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests that the formatter implementation produces the same values for the example included in <a href=\"https://tools.ietf.org/html/rfc5802#section-5\">RFC 7677</a>\n */\n@Test public void rfc7677Example() throws Exception {\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 63
      },
      "nodeContext" : "byte[] serverKey=formatter.serverKey(saltedPassword);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.security.scram.internals.ScramFormatter"
  }, {
    "nodeContext" : "formatter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 68,
      "startColumnNumber" : 31,
      "endLineNumber" : 68,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 68,
        "startColumnNumber" : 31,
        "endLineNumber" : 68,
        "endColumnNumber" : 107
      },
      "nodeContext" : "formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 68,
        "startColumnNumber" : 15,
        "endLineNumber" : 68,
        "endColumnNumber" : 107
      },
      "nodeContext" : "computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 108
      },
      "nodeContext" : "byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 38,
        "startColumnNumber" : 50,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests that the formatter implementation produces the same values for the example included in <a href=\"https://tools.ietf.org/html/rfc5802#section-5\">RFC 7677</a>\n */\n@Test public void rfc7677Example() throws Exception {\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 108
      },
      "nodeContext" : "byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.security.scram.internals.ScramFormatter"
  }, {
    "nodeContext" : "formatter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 70,
      "startColumnNumber" : 35,
      "endLineNumber" : 70,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 70,
        "startColumnNumber" : 35,
        "endLineNumber" : 70,
        "endColumnNumber" : 110
      },
      "nodeContext" : "formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 70,
        "startColumnNumber" : 15,
        "endLineNumber" : 70,
        "endColumnNumber" : 110
      },
      "nodeContext" : "computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 111
      },
      "nodeContext" : "byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2402,
        "startLineNumber" : 38,
        "startColumnNumber" : 50,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 274,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2650,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests that the formatter implementation produces the same values for the example included in <a href=\"https://tools.ietf.org/html/rfc5802#section-5\">RFC 7677</a>\n */\n@Test public void rfc7677Example() throws Exception {\n  ScramFormatter formatter=new ScramFormatter(ScramMechanism.SCRAM_SHA_256);\n  String password=\"pencil\";\n  String c1=\"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\";\n  String s1=\"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\";\n  String c2=\"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\";\n  String s2=\"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\";\n  ClientFirstMessage clientFirst=new ClientFirstMessage(ScramFormatter.toBytes(c1));\n  ServerFirstMessage serverFirst=new ServerFirstMessage(ScramFormatter.toBytes(s1));\n  ClientFinalMessage clientFinal=new ClientFinalMessage(ScramFormatter.toBytes(c2));\n  ServerFinalMessage serverFinal=new ServerFinalMessage(ScramFormatter.toBytes(s2));\n  String username=clientFirst.saslName();\n  assertEquals(\"user\",username);\n  String clientNonce=clientFirst.nonce();\n  assertEquals(\"rOprNGfwEbeRWgbNEkqO\",clientNonce);\n  String serverNonce=serverFirst.nonce().substring(clientNonce.length());\n  assertEquals(\"%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0\",serverNonce);\n  byte[] salt=serverFirst.salt();\n  assertArrayEquals(Base64.getDecoder().decode(\"W22ZaJ0SNY7soEsUEjb6gQ==\"),salt);\n  int iterations=serverFirst.iterations();\n  assertEquals(4096,iterations);\n  byte[] channelBinding=clientFinal.channelBinding();\n  assertArrayEquals(Base64.getDecoder().decode(\"biws\"),channelBinding);\n  byte[] serverSignature=serverFinal.serverSignature();\n  assertArrayEquals(Base64.getDecoder().decode(\"6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"),serverSignature);\n  byte[] saltedPassword=formatter.saltedPassword(password,salt,iterations);\n  byte[] serverKey=formatter.serverKey(saltedPassword);\n  byte[] computedProof=formatter.clientProof(saltedPassword,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(clientFinal.proof(),computedProof);\n  byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n  assertArrayEquals(serverFinal.serverSignature(),computedSignature);\n  assertEquals(4096,ScramMechanism.SCRAM_SHA_256.minIterations());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 111
      },
      "nodeContext" : "byte[] computedSignature=formatter.serverSignature(serverKey,clientFirst,serverFirst,clientFinal);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.security.scram.internals.ScramFormatter"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 66,
    "startColumnNumber" : 32,
    "endLineNumber" : 66,
    "endColumnNumber" : 41
  }, {
    "charLength" : 9,
    "startLineNumber" : 67,
    "startColumnNumber" : 27,
    "endLineNumber" : 67,
    "endColumnNumber" : 36
  }, {
    "charLength" : 9,
    "startLineNumber" : 68,
    "startColumnNumber" : 31,
    "endLineNumber" : 68,
    "endColumnNumber" : 40
  }, {
    "charLength" : 9,
    "startLineNumber" : 70,
    "startColumnNumber" : 35,
    "endLineNumber" : 70,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}