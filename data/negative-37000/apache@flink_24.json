{
  "id" : 24,
  "expression" : "iterator",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/operators/resettable/NonReusingBlockResettableIteratorTest.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 90,
      "startColumnNumber" : 8,
      "endLineNumber" : 90,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 23
      },
      "nodeContext" : "iterator.open()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 24
      },
      "nodeContext" : "iterator.open();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 24
      },
      "nodeContext" : "iterator.open();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 99,
      "startColumnNumber" : 19,
      "endLineNumber" : 99,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 99,
        "startColumnNumber" : 19,
        "endLineNumber" : 99,
        "endColumnNumber" : 37
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (iterator.hasNext()) {\n  Record target=iterator.next();\n  int val=target.getField(0,IntValue.class).getValue();\n  Assert.assertEquals(upper++,val);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n while (iterator.nextBlock());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 99,
        "startColumnNumber" : 19,
        "endLineNumber" : 99,
        "endColumnNumber" : 37
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 100,
      "startColumnNumber" : 32,
      "endLineNumber" : 100,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 100,
        "startColumnNumber" : 32,
        "endLineNumber" : 100,
        "endColumnNumber" : 47
      },
      "nodeContext" : "iterator.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 100,
        "startColumnNumber" : 23,
        "endLineNumber" : 100,
        "endColumnNumber" : 47
      },
      "nodeContext" : "target=iterator.next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Record target=iterator.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 99,
        "startColumnNumber" : 39,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Record target=iterator.next();\n  int val=target.getField(0,IntValue.class).getValue();\n  Assert.assertEquals(upper++,val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (iterator.hasNext()) {\n  Record target=iterator.next();\n  int val=target.getField(0,IntValue.class).getValue();\n  Assert.assertEquals(upper++,val);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n while (iterator.nextBlock());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Record target=iterator.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 106,
      "startColumnNumber" : 16,
      "endLineNumber" : 106,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 32
      },
      "nodeContext" : "iterator.reset()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 33
      },
      "nodeContext" : "iterator.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  iterator.reset();\n  int count=0;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(lower + (count++),val);\n  }\n  Assert.assertEquals(upper - lower,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 5; ++i) {\n  iterator.reset();\n  int count=0;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(lower + (count++),val);\n  }\n  Assert.assertEquals(upper - lower,count);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n while (iterator.nextBlock());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 106,
        "endColumnNumber" : 33
      },
      "nodeContext" : "iterator.reset();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 108,
      "startColumnNumber" : 23,
      "endLineNumber" : 108,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 108,
        "startColumnNumber" : 23,
        "endLineNumber" : 108,
        "endColumnNumber" : 41
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (iterator.hasNext()) {\n  Record target=iterator.next();\n  int val=target.getField(0,IntValue.class).getValue();\n  Assert.assertEquals(lower + (count++),val);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  iterator.reset();\n  int count=0;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(lower + (count++),val);\n  }\n  Assert.assertEquals(upper - lower,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 5; ++i) {\n  iterator.reset();\n  int count=0;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(lower + (count++),val);\n  }\n  Assert.assertEquals(upper - lower,count);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n while (iterator.nextBlock());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 108,
        "startColumnNumber" : 23,
        "endLineNumber" : 108,
        "endColumnNumber" : 41
      },
      "nodeContext" : "iterator.hasNext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 109,
      "startColumnNumber" : 36,
      "endLineNumber" : 109,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 109,
        "startColumnNumber" : 36,
        "endLineNumber" : 109,
        "endColumnNumber" : 51
      },
      "nodeContext" : "iterator.next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 109,
        "endColumnNumber" : 51
      },
      "nodeContext" : "target=iterator.next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Record target=iterator.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 108,
        "startColumnNumber" : 43,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Record target=iterator.next();\n  int val=target.getField(0,IntValue.class).getValue();\n  Assert.assertEquals(lower + (count++),val);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 241,
        "startLineNumber" : 108,
        "startColumnNumber" : 16,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "while (iterator.hasNext()) {\n  Record target=iterator.next();\n  int val=target.getField(0,IntValue.class).getValue();\n  Assert.assertEquals(lower + (count++),val);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 36,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 105,
        "startColumnNumber" : 40,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  iterator.reset();\n  int count=0;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(lower + (count++),val);\n  }\n  Assert.assertEquals(upper - lower,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < 5; ++i) {\n  iterator.reset();\n  int count=0;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(lower + (count++),val);\n  }\n  Assert.assertEquals(upper - lower,count);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 65,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 815,
        "startLineNumber" : 95,
        "startColumnNumber" : 11,
        "endLineNumber" : 115,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n while (iterator.nextBlock());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 109,
        "startColumnNumber" : 20,
        "endLineNumber" : 109,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Record target=iterator.next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 115,
      "startColumnNumber" : 17,
      "endLineNumber" : 115,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 115,
        "startColumnNumber" : 17,
        "endLineNumber" : 115,
        "endColumnNumber" : 37
      },
      "nodeContext" : "iterator.nextBlock()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 39
      },
      "nodeContext" : "do {\n  lower=upper;\n  upper=lower;\n  while (iterator.hasNext()) {\n    Record target=iterator.next();\n    int val=target.getField(0,IntValue.class).getValue();\n    Assert.assertEquals(upper++,val);\n  }\n  for (int i=0; i < 5; ++i) {\n    iterator.reset();\n    int count=0;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(lower + (count++),val);\n    }\n    Assert.assertEquals(upper - lower,count);\n  }\n}\n while (iterator.nextBlock());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 111,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 115,
        "startColumnNumber" : 17,
        "endLineNumber" : 115,
        "endColumnNumber" : 37
      },
      "nodeContext" : "iterator.nextBlock()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  }, {
    "nodeContext" : "iterator",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 118,
      "startColumnNumber" : 8,
      "endLineNumber" : 118,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 24
      },
      "nodeContext" : "iterator.close()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 25
      },
      "nodeContext" : "iterator.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1436,
        "startLineNumber" : 83,
        "startColumnNumber" : 69,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1511,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSerialBlockResettableIterator() throws Exception {\n  final AbstractInvokable memOwner=new DummyInvokable();\n  final NonReusingBlockResettableIterator<Record> iterator=new NonReusingBlockResettableIterator<Record>(this.memman,this.reader,this.serializer,1,memOwner);\n  iterator.open();\n  int lower=0;\n  int upper=0;\n  do {\n    lower=upper;\n    upper=lower;\n    while (iterator.hasNext()) {\n      Record target=iterator.next();\n      int val=target.getField(0,IntValue.class).getValue();\n      Assert.assertEquals(upper++,val);\n    }\n    for (int i=0; i < 5; ++i) {\n      iterator.reset();\n      int count=0;\n      while (iterator.hasNext()) {\n        Record target=iterator.next();\n        int val=target.getField(0,IntValue.class).getValue();\n        Assert.assertEquals(lower + (count++),val);\n      }\n      Assert.assertEquals(upper - lower,count);\n    }\n  }\n while (iterator.nextBlock());\n  Assert.assertEquals(NUM_VALUES,upper);\n  iterator.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 25
      },
      "nodeContext" : "iterator.close();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.runtime.operators.resettable.NonReusingBlockResettableIterator<org.apache.flink.types.Record>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 90,
    "startColumnNumber" : 8,
    "endLineNumber" : 90,
    "endColumnNumber" : 16
  }, {
    "charLength" : 8,
    "startLineNumber" : 99,
    "startColumnNumber" : 19,
    "endLineNumber" : 99,
    "endColumnNumber" : 27
  }, {
    "charLength" : 8,
    "startLineNumber" : 100,
    "startColumnNumber" : 32,
    "endLineNumber" : 100,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 106,
    "startColumnNumber" : 16,
    "endLineNumber" : 106,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 108,
    "startColumnNumber" : 23,
    "endLineNumber" : 108,
    "endColumnNumber" : 31
  }, {
    "charLength" : 8,
    "startLineNumber" : 109,
    "startColumnNumber" : 36,
    "endLineNumber" : 109,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 115,
    "startColumnNumber" : 17,
    "endLineNumber" : 115,
    "endColumnNumber" : 25
  }, {
    "charLength" : 8,
    "startLineNumber" : 118,
    "startColumnNumber" : 8,
    "endLineNumber" : 118,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  } ]
}