{
  "id" : 341,
  "expression" : "new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList())",
  "projectName" : "airbnb@lottie-android",
  "commitID" : "54c2775bf2c8b67c8d24840424c13968255caea7",
  "filePath" : "/lottie/src/main/java/com/airbnb/lottie/ShapeData.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 75,
      "startLineNumber" : 133,
      "startColumnNumber" : 15,
      "endLineNumber" : 133,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 12,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 91
      },
      "nodeContext" : "return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 132,
        "startColumnNumber" : 44,
        "endLineNumber" : 134,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 134,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (pointsArray.length() == 0) {\n  return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 134,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (pointsArray == null || inTangents == null || outTangents == null || pointsArray.length() != inTangents.length() || pointsArray.length() != outTangents.length()) {\n  throw new IllegalStateException(\"Unable to process points array or tangents. \" + pointsData);\n}\n else if (pointsArray.length() == 0) {\n  return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2796,
        "startLineNumber" : 107,
        "startColumnNumber" : 75,
        "endLineNumber" : 182,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JSONObject pointsData=null;\n  if (object instanceof JSONArray) {\n    Object firstObject=((JSONArray)object).opt(0);\n    if (firstObject instanceof JSONObject && ((JSONObject)firstObject).has(\"v\")) {\n      pointsData=(JSONObject)firstObject;\n    }\n  }\n else   if (object instanceof JSONObject && ((JSONObject)object).has(\"v\")) {\n    pointsData=(JSONObject)object;\n  }\n  if (pointsData == null) {\n    return null;\n  }\n  JSONArray pointsArray=pointsData.optJSONArray(\"v\");\n  JSONArray inTangents=pointsData.optJSONArray(\"i\");\n  JSONArray outTangents=pointsData.optJSONArray(\"o\");\n  boolean closed=pointsData.optBoolean(\"c\",false);\n  if (pointsArray == null || inTangents == null || outTangents == null || pointsArray.length() != inTangents.length() || pointsArray.length() != outTangents.length()) {\n    throw new IllegalStateException(\"Unable to process points array or tangents. \" + pointsData);\n  }\n else   if (pointsArray.length() == 0) {\n    return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n  }\n  int length=pointsArray.length();\n  PointF vertex=vertexAtIndex(0,pointsArray);\n  vertex.x*=scale;\n  vertex.y*=scale;\n  PointF initialPoint=vertex;\n  List<CubicCurveData> curves=new ArrayList<>(length);\n  for (int i=1; i < length; i++) {\n    vertex=vertexAtIndex(i,pointsArray);\n    PointF previousVertex=vertexAtIndex(i - 1,pointsArray);\n    PointF cp1=vertexAtIndex(i - 1,outTangents);\n    PointF cp2=vertexAtIndex(i,inTangents);\n    PointF shapeCp1=MiscUtils.addPoints(previousVertex,cp1);\n    PointF shapeCp2=MiscUtils.addPoints(vertex,cp2);\n    shapeCp1.x*=scale;\n    shapeCp1.y*=scale;\n    shapeCp2.x*=scale;\n    shapeCp2.y*=scale;\n    vertex.x*=scale;\n    vertex.y*=scale;\n    curves.add(new CubicCurveData(shapeCp1,shapeCp2,vertex));\n  }\n  if (closed) {\n    vertex=vertexAtIndex(0,pointsArray);\n    PointF previousVertex=vertexAtIndex(length - 1,pointsArray);\n    PointF cp1=vertexAtIndex(length - 1,outTangents);\n    PointF cp2=vertexAtIndex(0,inTangents);\n    PointF shapeCp1=MiscUtils.addPoints(previousVertex,cp1);\n    PointF shapeCp2=MiscUtils.addPoints(vertex,cp2);\n    if (scale != 1f) {\n      shapeCp1.x*=scale;\n      shapeCp1.y*=scale;\n      shapeCp2.x*=scale;\n      shapeCp2.y*=scale;\n      vertex.x*=scale;\n      vertex.y*=scale;\n    }\n    curves.add(new CubicCurveData(shapeCp1,shapeCp2,vertex));\n  }\n  return new ShapeData(initialPoint,closed,curves);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 451,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2867,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 182,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ShapeData valueFromObject(Object object,float scale){\n  JSONObject pointsData=null;\n  if (object instanceof JSONArray) {\n    Object firstObject=((JSONArray)object).opt(0);\n    if (firstObject instanceof JSONObject && ((JSONObject)firstObject).has(\"v\")) {\n      pointsData=(JSONObject)firstObject;\n    }\n  }\n else   if (object instanceof JSONObject && ((JSONObject)object).has(\"v\")) {\n    pointsData=(JSONObject)object;\n  }\n  if (pointsData == null) {\n    return null;\n  }\n  JSONArray pointsArray=pointsData.optJSONArray(\"v\");\n  JSONArray inTangents=pointsData.optJSONArray(\"i\");\n  JSONArray outTangents=pointsData.optJSONArray(\"o\");\n  boolean closed=pointsData.optBoolean(\"c\",false);\n  if (pointsArray == null || inTangents == null || outTangents == null || pointsArray.length() != inTangents.length() || pointsArray.length() != outTangents.length()) {\n    throw new IllegalStateException(\"Unable to process points array or tangents. \" + pointsData);\n  }\n else   if (pointsArray.length() == 0) {\n    return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n  }\n  int length=pointsArray.length();\n  PointF vertex=vertexAtIndex(0,pointsArray);\n  vertex.x*=scale;\n  vertex.y*=scale;\n  PointF initialPoint=vertex;\n  List<CubicCurveData> curves=new ArrayList<>(length);\n  for (int i=1; i < length; i++) {\n    vertex=vertexAtIndex(i,pointsArray);\n    PointF previousVertex=vertexAtIndex(i - 1,pointsArray);\n    PointF cp1=vertexAtIndex(i - 1,outTangents);\n    PointF cp2=vertexAtIndex(i,inTangents);\n    PointF shapeCp1=MiscUtils.addPoints(previousVertex,cp1);\n    PointF shapeCp2=MiscUtils.addPoints(vertex,cp2);\n    shapeCp1.x*=scale;\n    shapeCp1.y*=scale;\n    shapeCp2.x*=scale;\n    shapeCp2.y*=scale;\n    vertex.x*=scale;\n    vertex.y*=scale;\n    curves.add(new CubicCurveData(shapeCp1,shapeCp2,vertex));\n  }\n  if (closed) {\n    vertex=vertexAtIndex(0,pointsArray);\n    PointF previousVertex=vertexAtIndex(length - 1,pointsArray);\n    PointF cp1=vertexAtIndex(length - 1,outTangents);\n    PointF cp2=vertexAtIndex(0,inTangents);\n    PointF shapeCp1=MiscUtils.addPoints(previousVertex,cp1);\n    PointF shapeCp2=MiscUtils.addPoints(vertex,cp2);\n    if (scale != 1f) {\n      shapeCp1.x*=scale;\n      shapeCp1.y*=scale;\n      shapeCp2.x*=scale;\n      shapeCp2.y*=scale;\n      vertex.x*=scale;\n      vertex.y*=scale;\n    }\n    curves.add(new CubicCurveData(shapeCp1,shapeCp2,vertex));\n  }\n  return new ShapeData(initialPoint,closed,curves);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 465,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 91
      },
      "nodeContext" : "return new ShapeData(new PointF(),false,Collections.<CubicCurveData>emptyList());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "com.airbnb.lottie.ShapeData"
  } ],
  "positionList" : [ {
    "charLength" : 75,
    "startLineNumber" : 133,
    "startColumnNumber" : 15,
    "endLineNumber" : 133,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}