{
  "id" : 311,
  "expression" : "(RegisterArg)insn.getArg(1)",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/EliminatePhiNodes.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(RegisterArg)insn.getArg(1)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 81,
      "startColumnNumber" : 23,
      "endLineNumber" : 81,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 81,
        "startColumnNumber" : 14,
        "endLineNumber" : 81,
        "endColumnNumber" : 51
      },
      "nodeContext" : "oldArg=(RegisterArg)insn.getArg(1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "RegisterArg oldArg=(RegisterArg)insn.getArg(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2006,
        "startLineNumber" : 77,
        "startColumnNumber" : 75,
        "endLineNumber" : 130,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (insn.getArgsCount() != 2) {\n    throw new JadxRuntimeException(\"Unexpected count of arguments in merge insn: \" + insn);\n  }\n  RegisterArg oldArg=(RegisterArg)insn.getArg(1);\n  RegisterArg newArg=(RegisterArg)insn.getArg(0);\n  int newRegNum=newArg.getRegNum();\n  if (oldArg.getRegNum() == newRegNum) {\n    throw new JadxRuntimeException(\"Unexpected register number in merge insn: \" + insn);\n  }\n  SSAVar oldSVar=oldArg.getSVar();\n  RegisterArg assignArg=oldSVar.getAssign();\n  InsnNode assignParentInsn=assignArg.getParentInsn();\n  BlockNode assignBlock=BlockUtils.getBlockByInsn(mth,assignParentInsn);\n  if (assignBlock == null) {\n    throw new JadxRuntimeException(\"Unknown assign block for \" + assignParentInsn);\n  }\n  BlockNode assignPred=null;\n  for (  BlockNode pred : block.getPredecessors()) {\n    if (BlockUtils.isPathExists(assignBlock,pred)) {\n      assignPred=pred;\n      break;\n    }\n  }\n  if (assignPred == null) {\n    throw new JadxRuntimeException(\"Assign predecessor not found for \" + assignBlock + \" from \"+ block);\n  }\n  RegisterArg newAssignArg=oldArg.duplicate(newRegNum,null);\n  SSAVar newSVar=mth.makeNewSVar(newRegNum,mth.getNextSVarVersion(newRegNum),newAssignArg);\n  newSVar.setName(oldSVar.getName());\n  newSVar.setType(assignArg.getType());\n  if (assignParentInsn != null) {\n    assignParentInsn.setResult(newAssignArg);\n  }\n  for (  RegisterArg useArg : new ArrayList<>(oldSVar.getUseList())) {\n    RegisterArg newUseArg=useArg.duplicate(newRegNum,newSVar);\n    InsnNode parentInsn=useArg.getParentInsn();\n    if (parentInsn != null) {\n      newSVar.use(newUseArg);\n      parentInsn.replaceArg(useArg,newUseArg);\n    }\n  }\n  block.getInstructions().remove(0);\n  PhiInsn phiInsn=SSATransform.addPhi(mth,block,newRegNum);\n  phiInsn.setResult(insn.getResult());\n  phiInsn.bindArg(newAssignArg.duplicate(),assignPred);\n  phiInsn.bindArg(newArg.duplicate(),BlockUtils.selectOtherSafe(assignPred,block.getPredecessors()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2127,
        "startLineNumber" : 74,
        "startColumnNumber" : 1,
        "endLineNumber" : 130,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Replace 'MERGE' with 'PHI' insn.\n */\nprivate void replaceMerge(MethodNode mth,BlockNode block,InsnNode insn){\n  if (insn.getArgsCount() != 2) {\n    throw new JadxRuntimeException(\"Unexpected count of arguments in merge insn: \" + insn);\n  }\n  RegisterArg oldArg=(RegisterArg)insn.getArg(1);\n  RegisterArg newArg=(RegisterArg)insn.getArg(0);\n  int newRegNum=newArg.getRegNum();\n  if (oldArg.getRegNum() == newRegNum) {\n    throw new JadxRuntimeException(\"Unexpected register number in merge insn: \" + insn);\n  }\n  SSAVar oldSVar=oldArg.getSVar();\n  RegisterArg assignArg=oldSVar.getAssign();\n  InsnNode assignParentInsn=assignArg.getParentInsn();\n  BlockNode assignBlock=BlockUtils.getBlockByInsn(mth,assignParentInsn);\n  if (assignBlock == null) {\n    throw new JadxRuntimeException(\"Unknown assign block for \" + assignParentInsn);\n  }\n  BlockNode assignPred=null;\n  for (  BlockNode pred : block.getPredecessors()) {\n    if (BlockUtils.isPathExists(assignBlock,pred)) {\n      assignPred=pred;\n      break;\n    }\n  }\n  if (assignPred == null) {\n    throw new JadxRuntimeException(\"Assign predecessor not found for \" + assignBlock + \" from \"+ block);\n  }\n  RegisterArg newAssignArg=oldArg.duplicate(newRegNum,null);\n  SSAVar newSVar=mth.makeNewSVar(newRegNum,mth.getNextSVarVersion(newRegNum),newAssignArg);\n  newSVar.setName(oldSVar.getName());\n  newSVar.setType(assignArg.getType());\n  if (assignParentInsn != null) {\n    assignParentInsn.setResult(newAssignArg);\n  }\n  for (  RegisterArg useArg : new ArrayList<>(oldSVar.getUseList())) {\n    RegisterArg newUseArg=useArg.duplicate(newRegNum,newSVar);\n    InsnNode parentInsn=useArg.getParentInsn();\n    if (parentInsn != null) {\n      newSVar.use(newUseArg);\n      parentInsn.replaceArg(useArg,newUseArg);\n    }\n  }\n  block.getInstructions().remove(0);\n  PhiInsn phiInsn=SSATransform.addPhi(mth,block,newRegNum);\n  phiInsn.setResult(insn.getResult());\n  phiInsn.bindArg(newAssignArg.duplicate(),assignPred);\n  phiInsn.bindArg(newArg.duplicate(),BlockUtils.selectOtherSafe(assignPred,block.getPredecessors()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "RegisterArg oldArg=(RegisterArg)insn.getArg(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "jadx.core.dex.instructions.args.RegisterArg"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 81,
    "startColumnNumber" : 23,
    "endLineNumber" : 81,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}