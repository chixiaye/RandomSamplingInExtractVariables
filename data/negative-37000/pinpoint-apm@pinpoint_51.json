{
  "id" : 51,
  "expression" : "new Iterable<T>(){\n  @Override public Iterator<T> iterator(){\n    return new AbstractIterator<T>(){\n      private final Iterator<? extends Optional<? extends T>> iterator=checkNotNull(optionals.iterator());\n      @Override protected T computeNext(){\n        while (iterator.hasNext()) {\n          Optional<? extends T> optional=iterator.next();\n          if (optional.isPresent()) {\n            return optional.get();\n          }\n        }\n        return endOfData();\n      }\n    }\n;\n  }\n}\n",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/base/Optional.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Iterable<T>(){\n  @Override public Iterator<T> iterator(){\n    return new AbstractIterator<T>(){\n      private final Iterator<? extends Optional<? extends T>> iterator=checkNotNull(optionals.iterator());\n      @Override protected T computeNext(){\n        while (iterator.hasNext()) {\n          Optional<? extends T> optional=iterator.next();\n          if (optional.isPresent()) {\n            return optional.get();\n          }\n        }\n        return endOfData();\n      }\n    }\n;\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 587,
      "startLineNumber" : 297,
      "startColumnNumber" : 11,
      "endLineNumber" : 316,
      "endColumnNumber" : 5
    },
    "astNodeNumber" : 83,
    "astHeight" : 16,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 595,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 316,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new Iterable<T>(){\n  @Override public Iterator<T> iterator(){\n    return new AbstractIterator<T>(){\n      private final Iterator<? extends Optional<? extends T>> iterator=checkNotNull(optionals.iterator());\n      @Override protected T computeNext(){\n        while (iterator.hasNext()) {\n          Optional<? extends T> optional=iterator.next();\n          if (optional.isPresent()) {\n            return optional.get();\n          }\n        }\n        return endOfData();\n      }\n    }\n;\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 84,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 634,
        "startLineNumber" : 295,
        "startColumnNumber" : 65,
        "endLineNumber" : 317,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(optionals);\n  return new Iterable<T>(){\n    @Override public Iterator<T> iterator(){\n      return new AbstractIterator<T>(){\n        private final Iterator<? extends Optional<? extends T>> iterator=checkNotNull(optionals.iterator());\n        @Override protected T computeNext(){\n          while (iterator.hasNext()) {\n            Optional<? extends T> optional=iterator.next();\n            if (optional.isPresent()) {\n              return optional.get();\n            }\n          }\n          return endOfData();\n        }\n      }\n;\n    }\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1253,
        "startLineNumber" : 282,
        "startColumnNumber" : 2,
        "endLineNumber" : 317,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the value of each present instance from the supplied  {@code optionals}, in order, skipping over occurrences of  {@link Optional#absent}. Iterators are unmodifiable and are evaluated lazily. <p><b>Comparison to  {@code java.util.Optional}:</b> this method has no equivalent in Java 8's {@code Optional} class; use{@code optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.\n * @since 11.0 (generics widened in 13.0)\n */\n@Beta public static <T>Iterable<T> presentInstances(final Iterable<? extends Optional<? extends T>> optionals){\n  checkNotNull(optionals);\n  return new Iterable<T>(){\n    @Override public Iterator<T> iterator(){\n      return new AbstractIterator<T>(){\n        private final Iterator<? extends Optional<? extends T>> iterator=checkNotNull(optionals.iterator());\n        @Override protected T computeNext(){\n          while (iterator.hasNext()) {\n            Optional<? extends T> optional=iterator.next();\n            if (optional.isPresent()) {\n              return optional.get();\n            }\n          }\n          return endOfData();\n        }\n      }\n;\n    }\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 595,
        "startLineNumber" : 297,
        "startColumnNumber" : 4,
        "endLineNumber" : 316,
        "endColumnNumber" : 6
      },
      "nodeContext" : "return new Iterable<T>(){\n  @Override public Iterator<T> iterator(){\n    return new AbstractIterator<T>(){\n      private final Iterator<? extends Optional<? extends T>> iterator=checkNotNull(optionals.iterator());\n      @Override protected T computeNext(){\n        while (iterator.hasNext()) {\n          Optional<? extends T> optional=iterator.next();\n          if (optional.isPresent()) {\n            return optional.get();\n          }\n        }\n        return endOfData();\n      }\n    }\n;\n  }\n}\n;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 84,
      "astHeight" : 17
    },
    "tokenLength" : 25,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 587,
    "startLineNumber" : 297,
    "startColumnNumber" : 11,
    "endLineNumber" : 316,
    "endColumnNumber" : 5
  } ],
  "layoutRelationDataList" : [ ]
}