{
  "id" : 78,
  "expression" : "\"No fee left after defrag\"",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/payments/Wallet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"No fee left after defrag\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 314,
      "startColumnNumber" : 17,
      "endLineNumber" : 314,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 314,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Log.i(TAG,\"No fee left after defrag\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 314,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Log.i(TAG,\"No fee left after defrag\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 313,
        "startColumnNumber" : 37,
        "endLineNumber" : 317,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Log.i(TAG,\"No fee left after defrag\");\n  results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 218,
        "startLineNumber" : 313,
        "startColumnNumber" : 4,
        "endLineNumber" : 317,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!feeMobileCoin.isPositive()) {\n  Log.i(TAG,\"No fee left after defrag\");\n  results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4627,
        "startLineNumber" : 291,
        "startColumnNumber" : 2,
        "endLineNumber" : 374,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Money.MobileCoin defragmentFees=Money.MobileCoin.ZERO;\n  if (defragmentFirst) {\n    try {\n      defragmentFees=defragment(amount,results);\n    }\n catch (    InsufficientFundsException e) {\n      Log.w(TAG,\"Insufficient funds\",e);\n      results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.INSUFFICIENT_FUNDS,true));\n      return;\n    }\ncatch (    TimeoutException|InvalidTransactionException|InvalidFogResponse|AttestationException|TransactionBuilderException|NetworkException|FogReportException e) {\n      Log.w(TAG,\"Defragment failed\",e);\n      results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,true));\n      return;\n    }\n  }\n  Money.MobileCoin feeMobileCoin=totalFee.subtract(defragmentFees).requireMobileCoin();\n  BigInteger picoMob=amount.requireMobileCoin().toPicoMobBigInteger();\n  PendingTransaction pendingTransaction=null;\n  Log.i(TAG,String.format(\"Total fee advised: %s\\nDefrag fees: %s\\nTransaction fee: %s\",totalFee,defragmentFees,feeMobileCoin));\n  if (!feeMobileCoin.isPositive()) {\n    Log.i(TAG,\"No fee left after defrag\");\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n    return;\n  }\n  try {\n    pendingTransaction=mobileCoinClient.prepareTransaction(to.getAddress(),picoMob,feeMobileCoin.toPicoMobBigInteger());\n  }\n catch (  InsufficientFundsException e) {\n    Log.w(TAG,\"Insufficient funds\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.INSUFFICIENT_FUNDS,false));\n  }\ncatch (  FeeRejectedException e) {\n    Log.w(TAG,\"Fee rejected \" + totalFee,e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  InvalidFogResponse|FogReportException e) {\n    Log.w(TAG,\"Invalid fog response\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  FragmentedAccountException e) {\n    if (defragmentFirst) {\n      Log.w(TAG,\"Account is fragmented, but already tried to defragment\",e);\n      results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n    }\n else {\n      Log.i(TAG,\"Account is fragmented, defragmenting and retrying\");\n      sendPayment(to,amount,totalFee,true,results);\n    }\n  }\ncatch (  AttestationException e) {\n    Log.w(TAG,\"Attestation problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  NetworkException e) {\n    Log.w(TAG,\"Network problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  TransactionBuilderException e) {\n    Log.w(TAG,\"Builder problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\n  if (pendingTransaction == null) {\n    Log.w(TAG,\"Failed to create pending transaction\");\n    return;\n  }\n  try {\n    Log.i(TAG,\"Submitting transaction\");\n    mobileCoinClient.submitTransaction(pendingTransaction.getTransaction());\n    Log.i(TAG,\"Transaction submitted\");\n    results.add(TransactionSubmissionResult.successfullySubmitted(new PaymentTransactionId.MobileCoin(pendingTransaction.getTransaction().toByteArray(),pendingTransaction.getReceipt().toByteArray(),feeMobileCoin)));\n  }\n catch (  NetworkException e) {\n    Log.w(TAG,\"Network problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.NETWORK_FAILURE,false));\n  }\ncatch (  InvalidTransactionException e) {\n    Log.w(TAG,\"Invalid transaction\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  AttestationException e) {\n    Log.w(TAG,\"Attestation problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  SerializationException e) {\n    Log.w(TAG,\"Serialization problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 539,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4962,
        "startLineNumber" : 285,
        "startColumnNumber" : 2,
        "endLineNumber" : 374,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private void sendPayment(@NonNull MobileCoinPublicAddress to,@NonNull Money.MobileCoin amount,@NonNull Money.MobileCoin totalFee,boolean defragmentFirst,@NonNull List<TransactionSubmissionResult> results){\n  Money.MobileCoin defragmentFees=Money.MobileCoin.ZERO;\n  if (defragmentFirst) {\n    try {\n      defragmentFees=defragment(amount,results);\n    }\n catch (    InsufficientFundsException e) {\n      Log.w(TAG,\"Insufficient funds\",e);\n      results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.INSUFFICIENT_FUNDS,true));\n      return;\n    }\ncatch (    TimeoutException|InvalidTransactionException|InvalidFogResponse|AttestationException|TransactionBuilderException|NetworkException|FogReportException e) {\n      Log.w(TAG,\"Defragment failed\",e);\n      results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,true));\n      return;\n    }\n  }\n  Money.MobileCoin feeMobileCoin=totalFee.subtract(defragmentFees).requireMobileCoin();\n  BigInteger picoMob=amount.requireMobileCoin().toPicoMobBigInteger();\n  PendingTransaction pendingTransaction=null;\n  Log.i(TAG,String.format(\"Total fee advised: %s\\nDefrag fees: %s\\nTransaction fee: %s\",totalFee,defragmentFees,feeMobileCoin));\n  if (!feeMobileCoin.isPositive()) {\n    Log.i(TAG,\"No fee left after defrag\");\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n    return;\n  }\n  try {\n    pendingTransaction=mobileCoinClient.prepareTransaction(to.getAddress(),picoMob,feeMobileCoin.toPicoMobBigInteger());\n  }\n catch (  InsufficientFundsException e) {\n    Log.w(TAG,\"Insufficient funds\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.INSUFFICIENT_FUNDS,false));\n  }\ncatch (  FeeRejectedException e) {\n    Log.w(TAG,\"Fee rejected \" + totalFee,e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  InvalidFogResponse|FogReportException e) {\n    Log.w(TAG,\"Invalid fog response\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  FragmentedAccountException e) {\n    if (defragmentFirst) {\n      Log.w(TAG,\"Account is fragmented, but already tried to defragment\",e);\n      results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n    }\n else {\n      Log.i(TAG,\"Account is fragmented, defragmenting and retrying\");\n      sendPayment(to,amount,totalFee,true,results);\n    }\n  }\ncatch (  AttestationException e) {\n    Log.w(TAG,\"Attestation problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  NetworkException e) {\n    Log.w(TAG,\"Network problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  TransactionBuilderException e) {\n    Log.w(TAG,\"Builder problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\n  if (pendingTransaction == null) {\n    Log.w(TAG,\"Failed to create pending transaction\");\n    return;\n  }\n  try {\n    Log.i(TAG,\"Submitting transaction\");\n    mobileCoinClient.submitTransaction(pendingTransaction.getTransaction());\n    Log.i(TAG,\"Transaction submitted\");\n    results.add(TransactionSubmissionResult.successfullySubmitted(new PaymentTransactionId.MobileCoin(pendingTransaction.getTransaction().toByteArray(),pendingTransaction.getReceipt().toByteArray(),feeMobileCoin)));\n  }\n catch (  NetworkException e) {\n    Log.w(TAG,\"Network problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.NETWORK_FAILURE,false));\n  }\ncatch (  InvalidTransactionException e) {\n    Log.w(TAG,\"Invalid transaction\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  AttestationException e) {\n    Log.w(TAG,\"Attestation problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\ncatch (  SerializationException e) {\n    Log.w(TAG,\"Serialization problem\",e);\n    results.add(TransactionSubmissionResult.failure(TransactionSubmissionResult.ErrorCode.GENERIC_FAILURE,false));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 579,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 314,
        "startColumnNumber" : 6,
        "endLineNumber" : 314,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Log.i(TAG,\"No fee left after defrag\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 314,
    "startColumnNumber" : 17,
    "endLineNumber" : 314,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}