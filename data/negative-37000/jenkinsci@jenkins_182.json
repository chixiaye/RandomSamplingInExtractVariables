{
  "id" : 182,
  "expression" : "TimeZone.getAvailableIDs()",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/scheduler/CronTabList.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeZone.getAvailableIDs()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 86,
      "startColumnNumber" : 28,
      "endLineNumber" : 86,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 86,
        "startColumnNumber" : 17,
        "endLineNumber" : 86,
        "endColumnNumber" : 54
      },
      "nodeContext" : "validIDs=TimeZone.getAvailableIDs()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String[] validIDs=TimeZone.getAvailableIDs();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 85,
        "startColumnNumber" : 73,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String[] validIDs=TimeZone.getAvailableIDs();\n  for (  String str : validIDs) {\n    if (str != null && str.equals(timezone)) {\n      return timezone;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 484,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Checks if given timezone string is supported by TimeZone and returns the same string if valid, null otherwise\n * @since 1.615\n */\npublic static @CheckForNull String getValidTimezone(String timezone){\n  String[] validIDs=TimeZone.getAvailableIDs();\n  for (  String str : validIDs) {\n    if (str != null && str.equals(timezone)) {\n      return timezone;\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 45,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "String[] validIDs=TimeZone.getAvailableIDs();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String[]"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 86,
    "startColumnNumber" : 28,
    "endLineNumber" : 86,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}