{
  "id" : 383,
  "expression" : "\"CN=\" + subject",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/common/src/main/java/org/keycloak/common/util/CertificateUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"CN=\" + subject",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 79,
      "startColumnNumber" : 46,
      "endLineNumber" : 79,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 79,
        "startColumnNumber" : 33,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "new X500Name(\"CN=\" + subject)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 62
      },
      "nodeContext" : "subjectDN=new X500Name(\"CN=\" + subject)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 63
      },
      "nodeContext" : "X500Name subjectDN=new X500Name(\"CN=\" + subject);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2368,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  X500Name subjectDN=new X500Name(\"CN=\" + subject);\n  SecureRandom random=SecureRandom.getInstance(\"SHA1PRNG\");\n  BigInteger serialNumber=BigInteger.valueOf(Math.abs(random.nextInt()));\n  Date notBefore=new Date(System.currentTimeMillis());\n  Date notAfter=new Date(System.currentTimeMillis() + (((1000L * 60 * 60* 24* 30)) * 12) * 3);\n  SubjectPublicKeyInfo subjPubKeyInfo=SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded());\n  X509v3CertificateBuilder certGen=new X509v3CertificateBuilder(new X500Name(caCert.getSubjectDN().getName()),serialNumber,notBefore,notAfter,subjectDN,subjPubKeyInfo);\n  DigestCalculator digCalc=new BcDigestCalculatorProvider().get(new AlgorithmIdentifier(OIWObjectIdentifiers.idSHA1));\n  X509ExtensionUtils x509ExtensionUtils=new X509ExtensionUtils(digCalc);\n  certGen.addExtension(Extension.subjectKeyIdentifier,false,x509ExtensionUtils.createSubjectKeyIdentifier(subjPubKeyInfo));\n  certGen.addExtension(Extension.authorityKeyIdentifier,false,x509ExtensionUtils.createAuthorityKeyIdentifier(subjPubKeyInfo));\n  certGen.addExtension(Extension.keyUsage,false,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n  KeyPurposeId[] EKU=new KeyPurposeId[2];\n  EKU[0]=KeyPurposeId.id_kp_emailProtection;\n  EKU[1]=KeyPurposeId.id_kp_serverAuth;\n  certGen.addExtension(Extension.extendedKeyUsage,false,new ExtendedKeyUsage(EKU));\n  certGen.addExtension(Extension.basicConstraints,true,new BasicConstraints(0));\n  ContentSigner sigGen=new JcaContentSignerBuilder(\"SHA1WithRSAEncryption\").setProvider(\"BC\").build(caPrivateKey);\n  return new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certGen.build(sigGen));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2484,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 128,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  X500Name subjectDN=new X500Name(\"CN=\" + subject);\n  SecureRandom random=SecureRandom.getInstance(\"SHA1PRNG\");\n  BigInteger serialNumber=BigInteger.valueOf(Math.abs(random.nextInt()));\n  Date notBefore=new Date(System.currentTimeMillis());\n  Date notAfter=new Date(System.currentTimeMillis() + (((1000L * 60 * 60* 24* 30)) * 12) * 3);\n  SubjectPublicKeyInfo subjPubKeyInfo=SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded());\n  X509v3CertificateBuilder certGen=new X509v3CertificateBuilder(new X500Name(caCert.getSubjectDN().getName()),serialNumber,notBefore,notAfter,subjectDN,subjPubKeyInfo);\n  DigestCalculator digCalc=new BcDigestCalculatorProvider().get(new AlgorithmIdentifier(OIWObjectIdentifiers.idSHA1));\n  X509ExtensionUtils x509ExtensionUtils=new X509ExtensionUtils(digCalc);\n  certGen.addExtension(Extension.subjectKeyIdentifier,false,x509ExtensionUtils.createSubjectKeyIdentifier(subjPubKeyInfo));\n  certGen.addExtension(Extension.authorityKeyIdentifier,false,x509ExtensionUtils.createAuthorityKeyIdentifier(subjPubKeyInfo));\n  certGen.addExtension(Extension.keyUsage,false,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n  KeyPurposeId[] EKU=new KeyPurposeId[2];\n  EKU[0]=KeyPurposeId.id_kp_emailProtection;\n  EKU[1]=KeyPurposeId.id_kp_serverAuth;\n  certGen.addExtension(Extension.extendedKeyUsage,false,new ExtendedKeyUsage(EKU));\n  certGen.addExtension(Extension.basicConstraints,true,new BasicConstraints(0));\n  ContentSigner sigGen=new JcaContentSignerBuilder(\"SHA1WithRSAEncryption\").setProvider(\"BC\").build(caPrivateKey);\n  return new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certGen.build(sigGen));\n}\n catch (Exception e) {\n  throw new RuntimeException(\"Error creating X509v3Certificate.\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 269,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 77,
        "startColumnNumber" : 45,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    X500Name subjectDN=new X500Name(\"CN=\" + subject);\n    SecureRandom random=SecureRandom.getInstance(\"SHA1PRNG\");\n    BigInteger serialNumber=BigInteger.valueOf(Math.abs(random.nextInt()));\n    Date notBefore=new Date(System.currentTimeMillis());\n    Date notAfter=new Date(System.currentTimeMillis() + (((1000L * 60 * 60* 24* 30)) * 12) * 3);\n    SubjectPublicKeyInfo subjPubKeyInfo=SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded());\n    X509v3CertificateBuilder certGen=new X509v3CertificateBuilder(new X500Name(caCert.getSubjectDN().getName()),serialNumber,notBefore,notAfter,subjectDN,subjPubKeyInfo);\n    DigestCalculator digCalc=new BcDigestCalculatorProvider().get(new AlgorithmIdentifier(OIWObjectIdentifiers.idSHA1));\n    X509ExtensionUtils x509ExtensionUtils=new X509ExtensionUtils(digCalc);\n    certGen.addExtension(Extension.subjectKeyIdentifier,false,x509ExtensionUtils.createSubjectKeyIdentifier(subjPubKeyInfo));\n    certGen.addExtension(Extension.authorityKeyIdentifier,false,x509ExtensionUtils.createAuthorityKeyIdentifier(subjPubKeyInfo));\n    certGen.addExtension(Extension.keyUsage,false,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n    KeyPurposeId[] EKU=new KeyPurposeId[2];\n    EKU[0]=KeyPurposeId.id_kp_emailProtection;\n    EKU[1]=KeyPurposeId.id_kp_serverAuth;\n    certGen.addExtension(Extension.extendedKeyUsage,false,new ExtendedKeyUsage(EKU));\n    certGen.addExtension(Extension.basicConstraints,true,new BasicConstraints(0));\n    ContentSigner sigGen=new JcaContentSignerBuilder(\"SHA1WithRSAEncryption\").setProvider(\"BC\").build(caPrivateKey);\n    return new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certGen.build(sigGen));\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Error creating X509v3Certificate.\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3008,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generates version 3  {@link java.security.cert.X509Certificate}.\n * @param keyPair the key pair\n * @param caPrivateKey the CA private key\n * @param caCert the CA certificate\n * @param subject the subject name\n * @return the x509 certificate\n * @throws Exception the exception\n */\npublic static X509Certificate generateV3Certificate(KeyPair keyPair,PrivateKey caPrivateKey,X509Certificate caCert,String subject) throws Exception {\n  try {\n    X500Name subjectDN=new X500Name(\"CN=\" + subject);\n    SecureRandom random=SecureRandom.getInstance(\"SHA1PRNG\");\n    BigInteger serialNumber=BigInteger.valueOf(Math.abs(random.nextInt()));\n    Date notBefore=new Date(System.currentTimeMillis());\n    Date notAfter=new Date(System.currentTimeMillis() + (((1000L * 60 * 60* 24* 30)) * 12) * 3);\n    SubjectPublicKeyInfo subjPubKeyInfo=SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded());\n    X509v3CertificateBuilder certGen=new X509v3CertificateBuilder(new X500Name(caCert.getSubjectDN().getName()),serialNumber,notBefore,notAfter,subjectDN,subjPubKeyInfo);\n    DigestCalculator digCalc=new BcDigestCalculatorProvider().get(new AlgorithmIdentifier(OIWObjectIdentifiers.idSHA1));\n    X509ExtensionUtils x509ExtensionUtils=new X509ExtensionUtils(digCalc);\n    certGen.addExtension(Extension.subjectKeyIdentifier,false,x509ExtensionUtils.createSubjectKeyIdentifier(subjPubKeyInfo));\n    certGen.addExtension(Extension.authorityKeyIdentifier,false,x509ExtensionUtils.createAuthorityKeyIdentifier(subjPubKeyInfo));\n    certGen.addExtension(Extension.keyUsage,false,new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign));\n    KeyPurposeId[] EKU=new KeyPurposeId[2];\n    EKU[0]=KeyPurposeId.id_kp_emailProtection;\n    EKU[1]=KeyPurposeId.id_kp_serverAuth;\n    certGen.addExtension(Extension.extendedKeyUsage,false,new ExtendedKeyUsage(EKU));\n    certGen.addExtension(Extension.basicConstraints,true,new BasicConstraints(0));\n    ContentSigner sigGen=new JcaContentSignerBuilder(\"SHA1WithRSAEncryption\").setProvider(\"BC\").build(caPrivateKey);\n    return new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certGen.build(sigGen));\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Error creating X509v3Certificate.\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 295,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 63
      },
      "nodeContext" : "X500Name subjectDN=new X500Name(\"CN=\" + subject);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 79,
    "startColumnNumber" : 46,
    "endLineNumber" : 79,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}