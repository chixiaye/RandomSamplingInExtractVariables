{
  "id" : 192,
  "expression" : "!SharePatchFileUtil.checkIfMd5Valid(md5)",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/ArkHotDiffPatchInternal.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!SharePatchFileUtil.checkIfMd5Valid(md5)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 63,
      "startColumnNumber" : 20,
      "endLineNumber" : 63,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n  manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1368,
        "startLineNumber" : 53,
        "startColumnNumber" : 63,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final String path=info.path;\n  final String patchRealPath;\n  if (path.equals(\"\")) {\n    patchRealPath=info.name;\n  }\n else {\n    patchRealPath=path + \"/\" + info.name;\n  }\n  final String md5=info.patchMd5;\n  if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n    return false;\n  }\n  File extractedFile=new File(dir + info.name);\n  if (extractedFile.exists()) {\n    if (md5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n      continue;\n    }\n else {\n      extractedFile.delete();\n    }\n  }\n else {\n    extractedFile.getParentFile().mkdirs();\n  }\n  ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n  if (!extract(patch,patchFileEntry,extractedFile,md5,false)) {\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 140,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1419,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (ShareArkHotDiffPatchInfo info : arkPatchList) {\n  final String path=info.path;\n  final String patchRealPath;\n  if (path.equals(\"\")) {\n    patchRealPath=info.name;\n  }\n else {\n    patchRealPath=path + \"/\" + info.name;\n  }\n  final String md5=info.patchMd5;\n  if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n    manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n    return false;\n  }\n  File extractedFile=new File(dir + info.name);\n  if (extractedFile.exists()) {\n    if (md5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n      continue;\n    }\n else {\n      extractedFile.delete();\n    }\n  }\n else {\n    extractedFile.getParentFile().mkdirs();\n  }\n  ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n  if (!extract(patch,patchFileEntry,extractedFile,md5,false)) {\n    manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n    return false;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 146,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1488,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  patch=new ZipFile(patchFile);\n  for (  ShareArkHotDiffPatchInfo info : arkPatchList) {\n    final String path=info.path;\n    final String patchRealPath;\n    if (path.equals(\"\")) {\n      patchRealPath=info.name;\n    }\n else {\n      patchRealPath=path + \"/\" + info.name;\n    }\n    final String md5=info.patchMd5;\n    if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    File extractedFile=new File(dir + info.name);\n    if (extractedFile.exists()) {\n      if (md5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n        continue;\n      }\n else {\n        extractedFile.delete();\n      }\n    }\n else {\n      extractedFile.getParentFile().mkdirs();\n    }\n    ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n    if (!extract(patch,patchFileEntry,extractedFile,md5,false)) {\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1762,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  patch=new ZipFile(patchFile);\n  for (  ShareArkHotDiffPatchInfo info : arkPatchList) {\n    final String path=info.path;\n    final String patchRealPath;\n    if (path.equals(\"\")) {\n      patchRealPath=info.name;\n    }\n else {\n      patchRealPath=path + \"/\" + info.name;\n    }\n    final String md5=info.patchMd5;\n    if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n      manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n      return false;\n    }\n    File extractedFile=new File(dir + info.name);\n    if (extractedFile.exists()) {\n      if (md5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n        continue;\n      }\n else {\n        extractedFile.delete();\n      }\n    }\n else {\n      extractedFile.getParentFile().mkdirs();\n    }\n    ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n    if (!extract(patch,patchFileEntry,extractedFile,md5,false)) {\n      manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n      return false;\n    }\n  }\n}\n catch (IOException e) {\n  throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n}\n finally {\n  SharePatchFileUtil.closeZip(patch);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 183,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 47,
        "startColumnNumber" : 103,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker manager=Tinker.with(context);\n  ZipFile patch=null;\n  try {\n    patch=new ZipFile(patchFile);\n    for (    ShareArkHotDiffPatchInfo info : arkPatchList) {\n      final String path=info.path;\n      final String patchRealPath;\n      if (path.equals(\"\")) {\n        patchRealPath=info.name;\n      }\n else {\n        patchRealPath=path + \"/\" + info.name;\n      }\n      final String md5=info.patchMd5;\n      if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      File extractedFile=new File(dir + info.name);\n      if (extractedFile.exists()) {\n        if (md5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n          continue;\n        }\n else {\n          extractedFile.delete();\n        }\n      }\n else {\n        extractedFile.getParentFile().mkdirs();\n      }\n      ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n      if (!extract(patch,patchFileEntry,extractedFile,md5,false)) {\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n  }\n finally {\n    SharePatchFileUtil.closeZip(patch);\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1976,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static boolean extractArkHotLibrary(Context context,String dir,File patchFile,int type){\n  Tinker manager=Tinker.with(context);\n  ZipFile patch=null;\n  try {\n    patch=new ZipFile(patchFile);\n    for (    ShareArkHotDiffPatchInfo info : arkPatchList) {\n      final String path=info.path;\n      final String patchRealPath;\n      if (path.equals(\"\")) {\n        patchRealPath=info.name;\n      }\n else {\n        patchRealPath=path + \"/\" + info.name;\n      }\n      final String md5=info.patchMd5;\n      if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n        manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n        return false;\n      }\n      File extractedFile=new File(dir + info.name);\n      if (extractedFile.exists()) {\n        if (md5.equals(SharePatchFileUtil.getMD5(extractedFile))) {\n          continue;\n        }\n else {\n          extractedFile.delete();\n        }\n      }\n else {\n        extractedFile.getParentFile().mkdirs();\n      }\n      ZipEntry patchFileEntry=patch.getEntry(patchRealPath);\n      if (!extract(patch,patchFileEntry,extractedFile,md5,false)) {\n        manager.getPatchReporter().onPatchTypeExtractFail(patchFile,extractedFile,info.name,type);\n        return false;\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new TinkerRuntimeException(\"patch \" + ShareTinkerInternals.getTypeString(type) + \" extract failed (\"+ e.getMessage()+ \").\",e);\n  }\n finally {\n    SharePatchFileUtil.closeZip(patch);\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!SharePatchFileUtil.checkIfMd5Valid(md5)) {\n  manager.getPatchReporter().onPatchPackageCheckFail(patchFile,BasePatchInternal.getMetaCorruptedCode(type));\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 63,
    "startColumnNumber" : 20,
    "endLineNumber" : 63,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}