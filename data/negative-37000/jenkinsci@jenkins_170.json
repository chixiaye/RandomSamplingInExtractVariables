{
  "id" : 170,
  "expression" : "source.substring(0,index)",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/cli/InstallPluginCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "source.substring(0,index)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 128,
      "startColumnNumber" : 50,
      "endLineNumber" : 128,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 128,
        "startColumnNumber" : 20,
        "endLineNumber" : 128,
        "endColumnNumber" : 85
      },
      "nodeContext" : "h.getUpdateCenter().getPlugin(source.substring(0,index),version)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 85
      },
      "nodeContext" : "p=h.getUpdateCenter().getPlugin(source.substring(0,index),version)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 86
      },
      "nodeContext" : "p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 125,
        "startColumnNumber" : 19,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  VersionNumber version=new VersionNumber(source.substring(index + 1));\n  p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n  if (p == null) {\n    p=h.getUpdateCenter().getPlugin(source);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (index == -1) {\n  p=h.getUpdateCenter().getPlugin(source);\n}\n else {\n  VersionNumber version=new VersionNumber(source.substring(index + 1));\n  p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n  if (p == null) {\n    p=h.getUpdateCenter().getPlugin(source);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3293,
        "startLineNumber" : 93,
        "startColumnNumber" : 38,
        "endLineNumber" : 164,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (source.equals(\"=\")) {\n    stdout.println(Messages.InstallPluginCommand_InstallingPluginFromStdin());\n    File f=getTmpFile();\n    FileUtils.copyInputStreamToFile(stdin,f);\n    f=moveToFinalLocation(f);\n    if (dynamicLoad) {\n      pm.dynamicLoad(f);\n    }\n    continue;\n  }\n  try {\n    URL u=new URL(source);\n    stdout.println(Messages.InstallPluginCommand_InstallingPluginFromUrl(u));\n    File f=getTmpFile();\n    FileUtils.copyURLToFile(u,f);\n    f=moveToFinalLocation(f);\n    if (dynamicLoad) {\n      pm.dynamicLoad(f);\n    }\n    continue;\n  }\n catch (  MalformedURLException e) {\n  }\n  int index=source.lastIndexOf(':');\n  UpdateSite.Plugin p;\n  if (index == -1) {\n    p=h.getUpdateCenter().getPlugin(source);\n  }\n else {\n    VersionNumber version=new VersionNumber(source.substring(index + 1));\n    p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n    if (p == null) {\n      p=h.getUpdateCenter().getPlugin(source);\n    }\n  }\n  if (p != null) {\n    stdout.println(Messages.InstallPluginCommand_InstallingFromUpdateCenter(source));\n    Throwable e=p.deploy(dynamicLoad).get().getError();\n    if (e != null) {\n      AbortException myException=new AbortException(\"Failed to install plugin \" + source);\n      myException.initCause(e);\n      throw myException;\n    }\n    continue;\n  }\n  stdout.println(Messages.InstallPluginCommand_NotAValidSourceName(source));\n  if (!source.contains(\".\") && !source.contains(\":\") && !source.contains(\"/\")&& !source.contains(\"\\\\\")) {\n    if (h.getUpdateCenter().getSites().isEmpty()) {\n      stdout.println(Messages.InstallPluginCommand_NoUpdateCenterDefined());\n    }\n else {\n      Set<String> candidates=new HashSet<>();\n      for (      UpdateSite s : h.getUpdateCenter().getSites()) {\n        Data dt=s.getData();\n        if (dt == null)         stdout.println(Messages.InstallPluginCommand_NoUpdateDataRetrieved(s.getUrl()));\n else         candidates.addAll(dt.plugins.keySet());\n      }\n      stdout.println(Messages.InstallPluginCommand_DidYouMean(source,EditDistance.findNearest(source,candidates)));\n    }\n  }\n  throw new AbortException(\"Error occurred, see previous output.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 338,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3323,
        "startLineNumber" : 93,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String source : sources) {\n  if (source.equals(\"=\")) {\n    stdout.println(Messages.InstallPluginCommand_InstallingPluginFromStdin());\n    File f=getTmpFile();\n    FileUtils.copyInputStreamToFile(stdin,f);\n    f=moveToFinalLocation(f);\n    if (dynamicLoad) {\n      pm.dynamicLoad(f);\n    }\n    continue;\n  }\n  try {\n    URL u=new URL(source);\n    stdout.println(Messages.InstallPluginCommand_InstallingPluginFromUrl(u));\n    File f=getTmpFile();\n    FileUtils.copyURLToFile(u,f);\n    f=moveToFinalLocation(f);\n    if (dynamicLoad) {\n      pm.dynamicLoad(f);\n    }\n    continue;\n  }\n catch (  MalformedURLException e) {\n  }\n  int index=source.lastIndexOf(':');\n  UpdateSite.Plugin p;\n  if (index == -1) {\n    p=h.getUpdateCenter().getPlugin(source);\n  }\n else {\n    VersionNumber version=new VersionNumber(source.substring(index + 1));\n    p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n    if (p == null) {\n      p=h.getUpdateCenter().getPlugin(source);\n    }\n  }\n  if (p != null) {\n    stdout.println(Messages.InstallPluginCommand_InstallingFromUpdateCenter(source));\n    Throwable e=p.deploy(dynamicLoad).get().getError();\n    if (e != null) {\n      AbortException myException=new AbortException(\"Failed to install plugin \" + source);\n      myException.initCause(e);\n      throw myException;\n    }\n    continue;\n  }\n  stdout.println(Messages.InstallPluginCommand_NotAValidSourceName(source));\n  if (!source.contains(\".\") && !source.contains(\":\") && !source.contains(\"/\")&& !source.contains(\"\\\\\")) {\n    if (h.getUpdateCenter().getSites().isEmpty()) {\n      stdout.println(Messages.InstallPluginCommand_NoUpdateCenterDefined());\n    }\n else {\n      Set<String> candidates=new HashSet<>();\n      for (      UpdateSite s : h.getUpdateCenter().getSites()) {\n        Data dt=s.getData();\n        if (dt == null)         stdout.println(Messages.InstallPluginCommand_NoUpdateDataRetrieved(s.getUrl()));\n else         candidates.addAll(dt.plugins.keySet());\n      }\n      stdout.println(Messages.InstallPluginCommand_DidYouMean(source,EditDistance.findNearest(source,candidates)));\n    }\n  }\n  throw new AbortException(\"Error occurred, see previous output.\");\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 344,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3699,
        "startLineNumber" : 84,
        "startColumnNumber" : 41,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Jenkins h=Jenkins.get();\n  h.checkPermission(Jenkins.ADMINISTER);\n  PluginManager pm=h.getPluginManager();\n  if (name != null) {\n    stderr.println(\"-name is deprecated; it is no longer necessary nor honored.\");\n  }\n  for (  String source : sources) {\n    if (source.equals(\"=\")) {\n      stdout.println(Messages.InstallPluginCommand_InstallingPluginFromStdin());\n      File f=getTmpFile();\n      FileUtils.copyInputStreamToFile(stdin,f);\n      f=moveToFinalLocation(f);\n      if (dynamicLoad) {\n        pm.dynamicLoad(f);\n      }\n      continue;\n    }\n    try {\n      URL u=new URL(source);\n      stdout.println(Messages.InstallPluginCommand_InstallingPluginFromUrl(u));\n      File f=getTmpFile();\n      FileUtils.copyURLToFile(u,f);\n      f=moveToFinalLocation(f);\n      if (dynamicLoad) {\n        pm.dynamicLoad(f);\n      }\n      continue;\n    }\n catch (    MalformedURLException e) {\n    }\n    int index=source.lastIndexOf(':');\n    UpdateSite.Plugin p;\n    if (index == -1) {\n      p=h.getUpdateCenter().getPlugin(source);\n    }\n else {\n      VersionNumber version=new VersionNumber(source.substring(index + 1));\n      p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n      if (p == null) {\n        p=h.getUpdateCenter().getPlugin(source);\n      }\n    }\n    if (p != null) {\n      stdout.println(Messages.InstallPluginCommand_InstallingFromUpdateCenter(source));\n      Throwable e=p.deploy(dynamicLoad).get().getError();\n      if (e != null) {\n        AbortException myException=new AbortException(\"Failed to install plugin \" + source);\n        myException.initCause(e);\n        throw myException;\n      }\n      continue;\n    }\n    stdout.println(Messages.InstallPluginCommand_NotAValidSourceName(source));\n    if (!source.contains(\".\") && !source.contains(\":\") && !source.contains(\"/\")&& !source.contains(\"\\\\\")) {\n      if (h.getUpdateCenter().getSites().isEmpty()) {\n        stdout.println(Messages.InstallPluginCommand_NoUpdateCenterDefined());\n      }\n else {\n        Set<String> candidates=new HashSet<>();\n        for (        UpdateSite s : h.getUpdateCenter().getSites()) {\n          Data dt=s.getData();\n          if (dt == null)           stdout.println(Messages.InstallPluginCommand_NoUpdateDataRetrieved(s.getUrl()));\n else           candidates.addAll(dt.plugins.keySet());\n        }\n        stdout.println(Messages.InstallPluginCommand_DidYouMean(source,EditDistance.findNearest(source,candidates)));\n      }\n    }\n    throw new AbortException(\"Error occurred, see previous output.\");\n  }\n  if (restart)   h.safeRestart();\n  return 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3751,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected int run() throws Exception {\n  Jenkins h=Jenkins.get();\n  h.checkPermission(Jenkins.ADMINISTER);\n  PluginManager pm=h.getPluginManager();\n  if (name != null) {\n    stderr.println(\"-name is deprecated; it is no longer necessary nor honored.\");\n  }\n  for (  String source : sources) {\n    if (source.equals(\"=\")) {\n      stdout.println(Messages.InstallPluginCommand_InstallingPluginFromStdin());\n      File f=getTmpFile();\n      FileUtils.copyInputStreamToFile(stdin,f);\n      f=moveToFinalLocation(f);\n      if (dynamicLoad) {\n        pm.dynamicLoad(f);\n      }\n      continue;\n    }\n    try {\n      URL u=new URL(source);\n      stdout.println(Messages.InstallPluginCommand_InstallingPluginFromUrl(u));\n      File f=getTmpFile();\n      FileUtils.copyURLToFile(u,f);\n      f=moveToFinalLocation(f);\n      if (dynamicLoad) {\n        pm.dynamicLoad(f);\n      }\n      continue;\n    }\n catch (    MalformedURLException e) {\n    }\n    int index=source.lastIndexOf(':');\n    UpdateSite.Plugin p;\n    if (index == -1) {\n      p=h.getUpdateCenter().getPlugin(source);\n    }\n else {\n      VersionNumber version=new VersionNumber(source.substring(index + 1));\n      p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n      if (p == null) {\n        p=h.getUpdateCenter().getPlugin(source);\n      }\n    }\n    if (p != null) {\n      stdout.println(Messages.InstallPluginCommand_InstallingFromUpdateCenter(source));\n      Throwable e=p.deploy(dynamicLoad).get().getError();\n      if (e != null) {\n        AbortException myException=new AbortException(\"Failed to install plugin \" + source);\n        myException.initCause(e);\n        throw myException;\n      }\n      continue;\n    }\n    stdout.println(Messages.InstallPluginCommand_NotAValidSourceName(source));\n    if (!source.contains(\".\") && !source.contains(\":\") && !source.contains(\"/\")&& !source.contains(\"\\\\\")) {\n      if (h.getUpdateCenter().getSites().isEmpty()) {\n        stdout.println(Messages.InstallPluginCommand_NoUpdateCenterDefined());\n      }\n else {\n        Set<String> candidates=new HashSet<>();\n        for (        UpdateSite s : h.getUpdateCenter().getSites()) {\n          Data dt=s.getData();\n          if (dt == null)           stdout.println(Messages.InstallPluginCommand_NoUpdateDataRetrieved(s.getUrl()));\n else           candidates.addAll(dt.plugins.keySet());\n        }\n        stdout.println(Messages.InstallPluginCommand_DidYouMean(source,EditDistance.findNearest(source,candidates)));\n      }\n    }\n    throw new AbortException(\"Error occurred, see previous output.\");\n  }\n  if (restart)   h.safeRestart();\n  return 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 394,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 86
      },
      "nodeContext" : "p=h.getUpdateCenter().getPlugin(source.substring(0,index),version);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 128,
    "startColumnNumber" : 50,
    "endLineNumber" : 128,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}