{
  "id" : 104,
  "expression" : "source",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Data Structures/Graphs/DFS.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "source",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 29,
      "startColumnNumber" : 10,
      "endLineNumber" : 29,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 17
      },
      "nodeContext" : "st.push(source)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 18
      },
      "nodeContext" : "st.push(source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 868,
        "startLineNumber" : 19,
        "startColumnNumber" : 69,
        "endLineNumber" : 41,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  byte[] b=new byte[vertices];\n  Arrays.fill(b,(byte)-1);\n  Stack st=new Stack(vertices);\n  st.push(source);\n  while (!st.isEmpty()) {\n    b[st.peek()]=(byte)0;\n    System.out.println(st.peek());\n    int pop=st.pop();\n    b[pop]=(byte)1;\n    for (int i=0; i < vertices; i++) {\n      if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n        st.push(i);\n        b[i]=(byte)0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 12,
        "startColumnNumber" : 1,
        "endLineNumber" : 41,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Implementation in code of a DFS\n * @param a structure to be DFS'ed\n * @param vertices The vertices\n * @param source The source\n */\npublic static void dfsImplement(byte[][] a,int vertices,int source){\n  byte[] b=new byte[vertices];\n  Arrays.fill(b,(byte)-1);\n  Stack st=new Stack(vertices);\n  st.push(source);\n  while (!st.isEmpty()) {\n    b[st.peek()]=(byte)0;\n    System.out.println(st.peek());\n    int pop=st.pop();\n    b[pop]=(byte)1;\n    for (int i=0; i < vertices; i++) {\n      if (a[pop][i] != 0 && b[i] != (byte)0 && b[i] != (byte)1) {\n        st.push(i);\n        b[i]=(byte)0;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 143,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 18
      },
      "nodeContext" : "st.push(source);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 29,
    "startColumnNumber" : 10,
    "endLineNumber" : 29,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ ]
}