{
  "id" : 248,
  "expression" : "PasswordEncoderUtil",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/test/src/test/java/com/alibaba/nacos/test/core/auth/User_ITCase.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "PasswordEncoderUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 148,
      "startColumnNumber" : 16,
      "endLineNumber" : 148,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 76
      },
      "nodeContext" : "PasswordEncoderUtil.matches(\"password1\",user.getPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 147,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 76
      },
      "nodeContext" : "\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 147,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n  found=true;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 146,
        "startColumnNumber" : 50,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n    found=true;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 152,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (User user : userPage.getPageItems()) {\n  if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n    found=true;\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 112,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  login();\n  ResponseEntity<String> response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"password\",\"password1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.POST);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  Page<User> userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  boolean found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"newPassword\",\"password2\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.PUT);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.DELETE);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertFalse(found);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4161,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void createUpdateDeleteUser(){\n  login();\n  ResponseEntity<String> response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"password\",\"password1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.POST);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  Page<User> userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  boolean found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"newPassword\",\"password2\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.PUT);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.DELETE);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertFalse(found);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 477,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 76
      },
      "nodeContext" : "PasswordEncoderUtil.matches(\"password1\",user.getPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.console.utils.PasswordEncoderUtil"
  }, {
    "nodeContext" : "PasswordEncoderUtil",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 185,
      "startColumnNumber" : 16,
      "endLineNumber" : 185,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "PasswordEncoderUtil.matches(\"password2\",user.getPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 184,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n  found=true;\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 183,
        "startColumnNumber" : 50,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n    found=true;\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 183,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (User user : userPage.getPageItems()) {\n  if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n    found=true;\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4114,
        "startLineNumber" : 112,
        "startColumnNumber" : 41,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  login();\n  ResponseEntity<String> response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"password\",\"password1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.POST);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  Page<User> userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  boolean found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"newPassword\",\"password2\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.PUT);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.DELETE);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertFalse(found);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4161,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 228,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void createUpdateDeleteUser(){\n  login();\n  ResponseEntity<String> response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"password\",\"password1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.POST);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  Page<User> userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  boolean found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password1\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"newPassword\",\"password2\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.PUT);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername()) && PasswordEncoderUtil.matches(\"password2\",user.getPassword())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertTrue(found);\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"username\",\"username1\").appendParam(\"accessToken\",accessToken).done(),String.class,HttpMethod.DELETE);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  response=request(\"/nacos/v1/auth/users\",Params.newParams().appendParam(\"pageNo\",\"1\").appendParam(\"pageSize\",String.valueOf(Integer.MAX_VALUE)).appendParam(\"accessToken\",accessToken).done(),String.class);\n  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());\n  userPage=JacksonUtils.toObj(response.getBody(),new TypeReference<Page<User>>(){\n  }\n);\n  Assert.assertNotNull(userPage);\n  Assert.assertNotNull(userPage.getPageItems());\n  Assert.assertTrue(userPage.getPageItems().size() > 0);\n  found=false;\n  for (  User user : userPage.getPageItems()) {\n    if (\"username1\".equals(user.getUsername())) {\n      found=true;\n      break;\n    }\n  }\n  Assert.assertFalse(found);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 477,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 185,
        "endColumnNumber" : 76
      },
      "nodeContext" : "PasswordEncoderUtil.matches(\"password2\",user.getPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.console.utils.PasswordEncoderUtil"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 148,
    "startColumnNumber" : 16,
    "endLineNumber" : 148,
    "endColumnNumber" : 35
  }, {
    "charLength" : 19,
    "startLineNumber" : 185,
    "startColumnNumber" : 16,
    "endLineNumber" : 185,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}