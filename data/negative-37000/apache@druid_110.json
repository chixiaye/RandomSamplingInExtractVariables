{
  "id" : 110,
  "expression" : "filterList",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/calcite/filtration/CombineAndSimplifyBounds.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "filterList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 144,
      "startColumnNumber" : 8,
      "endLineNumber" : 144,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 29
      },
      "nodeContext" : "filterList.add(bound)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 30
      },
      "nodeContext" : "filterList.add(bound);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 140,
        "startColumnNumber" : 43,
        "endLineNumber" : 146,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final BoundDimFilter bound=(BoundDimFilter)child;\n  final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n  final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n  filterList.add(bound);\n  allFalse=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 140,
        "startColumnNumber" : 6,
        "endLineNumber" : 148,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (child instanceof BoundDimFilter) {\n  final BoundDimFilter bound=(BoundDimFilter)child;\n  final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n  final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n  filterList.add(bound);\n  allFalse=false;\n}\n else {\n  allFalse&=child instanceof FalseDimFilter;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 420,
        "startLineNumber" : 139,
        "startColumnNumber" : 46,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (child instanceof BoundDimFilter) {\n    final BoundDimFilter bound=(BoundDimFilter)child;\n    final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n    final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n    filterList.add(bound);\n    allFalse=false;\n  }\n else {\n    allFalse&=child instanceof FalseDimFilter;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 139,
        "startColumnNumber" : 4,
        "endLineNumber" : 149,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (final DimFilter child : newChildren) {\n  if (child instanceof BoundDimFilter) {\n    final BoundDimFilter bound=(BoundDimFilter)child;\n    final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n    final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n    filterList.add(bound);\n    allFalse=false;\n  }\n else {\n    allFalse&=child instanceof FalseDimFilter;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 71,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4166,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4466,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Simplify BoundDimFilters that are children of an OR or an AND.\n * @param children    the filters\n * @param disjunction true for OR, false for AND\n * @return simplified filters\n */\nprivate static DimFilter doSimplify(final List<DimFilter> children,boolean disjunction){\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 144,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 30
      },
      "nodeContext" : "filterList.add(bound);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.filter.BoundDimFilter>"
  }, {
    "nodeContext" : "filterList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 163,
      "startColumnNumber" : 84,
      "endLineNumber" : 163,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 163,
        "startColumnNumber" : 68,
        "endLineNumber" : 163,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Bounds.toRanges(filterList)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 163,
        "startColumnNumber" : 46,
        "endLineNumber" : 163,
        "endColumnNumber" : 96
      },
      "nodeContext" : "RangeSets.unionRanges(Bounds.toRanges(filterList))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 162,
        "startColumnNumber" : 44,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 162,
        "startColumnNumber" : 33,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 164,
        "endColumnNumber" : 101
      },
      "nodeContext" : "final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 157,
        "startColumnNumber" : 81,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1439,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4166,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4466,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Simplify BoundDimFilters that are children of an OR or an AND.\n * @param children    the filters\n * @param disjunction true for OR, false for AND\n * @return simplified filters\n */\nprivate static DimFilter doSimplify(final List<DimFilter> children,boolean disjunction){\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 163,
        "startColumnNumber" : 46,
        "endLineNumber" : 163,
        "endColumnNumber" : 96
      },
      "nodeContext" : "RangeSets.unionRanges(Bounds.toRanges(filterList))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.filter.BoundDimFilter>"
  }, {
    "nodeContext" : "filterList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 164,
      "startColumnNumber" : 88,
      "endLineNumber" : 164,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 164,
        "startColumnNumber" : 72,
        "endLineNumber" : 164,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Bounds.toRanges(filterList)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 164,
        "startColumnNumber" : 46,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "RangeSets.intersectRanges(Bounds.toRanges(filterList))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 209,
        "startLineNumber" : 162,
        "startColumnNumber" : 44,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 162,
        "startColumnNumber" : 33,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 164,
        "endColumnNumber" : 101
      },
      "nodeContext" : "final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 157,
        "startColumnNumber" : 81,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1439,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4166,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4466,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Simplify BoundDimFilters that are children of an OR or an AND.\n * @param children    the filters\n * @param disjunction true for OR, false for AND\n * @return simplified filters\n */\nprivate static DimFilter doSimplify(final List<DimFilter> children,boolean disjunction){\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 164,
        "startColumnNumber" : 46,
        "endLineNumber" : 164,
        "endColumnNumber" : 100
      },
      "nodeContext" : "RangeSets.intersectRanges(Bounds.toRanges(filterList))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.filter.BoundDimFilter>"
  }, {
    "nodeContext" : "filterList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 166,
      "startColumnNumber" : 39,
      "endLineNumber" : 166,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 166,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 56
      },
      "nodeContext" : "filterList.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 166,
        "startColumnNumber" : 10,
        "endLineNumber" : 166,
        "endColumnNumber" : 56
      },
      "nodeContext" : "rangeSet.asRanges().size() < filterList.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 166,
        "startColumnNumber" : 6,
        "endLineNumber" : 188,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (rangeSet.asRanges().size() < filterList.size()) {\n  for (  final BoundDimFilter bound : filterList) {\n    if (!newChildren.remove(bound)) {\n      throw new ISE(\"Tried to remove bound, but couldn't\");\n    }\n  }\n  if (rangeSet.asRanges().isEmpty()) {\n    newChildren.add(Filtration.matchNothing());\n  }\n  for (  final Range<BoundValue> range : rangeSet.asRanges()) {\n    if (!range.hasLowerBound() && !range.hasUpperBound()) {\n      newChildren.add(Filtration.matchEverything());\n    }\n else {\n      newChildren.add(Bounds.toFilter(boundRefKey,range));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 157,
        "startColumnNumber" : 81,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1439,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4166,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4466,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Simplify BoundDimFilters that are children of an OR or an AND.\n * @param children    the filters\n * @param disjunction true for OR, false for AND\n * @return simplified filters\n */\nprivate static DimFilter doSimplify(final List<DimFilter> children,boolean disjunction){\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 166,
        "startColumnNumber" : 10,
        "endLineNumber" : 166,
        "endColumnNumber" : 56
      },
      "nodeContext" : "rangeSet.asRanges().size() < filterList.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.filter.BoundDimFilter>"
  }, {
    "nodeContext" : "filterList",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 168,
      "startColumnNumber" : 42,
      "endLineNumber" : 168,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final BoundDimFilter bound : filterList) {\n  if (!newChildren.remove(bound)) {\n    throw new ISE(\"Tried to remove bound, but couldn't\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 166,
        "startColumnNumber" : 58,
        "endLineNumber" : 188,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  final BoundDimFilter bound : filterList) {\n    if (!newChildren.remove(bound)) {\n      throw new ISE(\"Tried to remove bound, but couldn't\");\n    }\n  }\n  if (rangeSet.asRanges().isEmpty()) {\n    newChildren.add(Filtration.matchNothing());\n  }\n  for (  final Range<BoundValue> range : rangeSet.asRanges()) {\n    if (!range.hasLowerBound() && !range.hasUpperBound()) {\n      newChildren.add(Filtration.matchEverything());\n    }\n else {\n      newChildren.add(Bounds.toFilter(boundRefKey,range));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 930,
        "startLineNumber" : 166,
        "startColumnNumber" : 6,
        "endLineNumber" : 188,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (rangeSet.asRanges().size() < filterList.size()) {\n  for (  final BoundDimFilter bound : filterList) {\n    if (!newChildren.remove(bound)) {\n      throw new ISE(\"Tried to remove bound, but couldn't\");\n    }\n  }\n  if (rangeSet.asRanges().isEmpty()) {\n    newChildren.add(Filtration.matchNothing());\n  }\n  for (  final Range<BoundValue> range : rangeSet.asRanges()) {\n    if (!range.hasLowerBound() && !range.hasUpperBound()) {\n      newChildren.add(Filtration.matchEverything());\n    }\n else {\n      newChildren.add(Bounds.toFilter(boundRefKey,range));\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 157,
        "startColumnNumber" : 81,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1439,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n  final BoundRefKey boundRefKey=entry.getKey();\n  final List<BoundDimFilter> filterList=entry.getValue();\n  final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n  if (rangeSet.asRanges().size() < filterList.size()) {\n    for (    final BoundDimFilter bound : filterList) {\n      if (!newChildren.remove(bound)) {\n        throw new ISE(\"Tried to remove bound, but couldn't\");\n      }\n    }\n    if (rangeSet.asRanges().isEmpty()) {\n      newChildren.add(Filtration.matchNothing());\n    }\n    for (    final Range<BoundValue> range : rangeSet.asRanges()) {\n      if (!range.hasLowerBound() && !range.hasUpperBound()) {\n        newChildren.add(Filtration.matchEverything());\n      }\n else {\n        newChildren.add(Bounds.toFilter(boundRefKey,range));\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 151,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4166,
        "startLineNumber" : 130,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 383,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4466,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 233,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Simplify BoundDimFilters that are children of an OR or an AND.\n * @param children    the filters\n * @param disjunction true for OR, false for AND\n * @return simplified filters\n */\nprivate static DimFilter doSimplify(final List<DimFilter> children,boolean disjunction){\n  final List<DimFilter> newChildren=Lists.newArrayList(children);\n  final Map<BoundRefKey,List<BoundDimFilter>> bounds=new HashMap<>();\n  boolean allFalse=true;\n  for (  final DimFilter child : newChildren) {\n    if (child instanceof BoundDimFilter) {\n      final BoundDimFilter bound=(BoundDimFilter)child;\n      final BoundRefKey boundRefKey=BoundRefKey.from(bound);\n      final List<BoundDimFilter> filterList=bounds.computeIfAbsent(boundRefKey,k -> new ArrayList<>());\n      filterList.add(bound);\n      allFalse=false;\n    }\n else {\n      allFalse&=child instanceof FalseDimFilter;\n    }\n  }\n  if (allFalse) {\n    return Filtration.matchNothing();\n  }\n  for (  Map.Entry<BoundRefKey,List<BoundDimFilter>> entry : bounds.entrySet()) {\n    final BoundRefKey boundRefKey=entry.getKey();\n    final List<BoundDimFilter> filterList=entry.getValue();\n    final RangeSet<BoundValue> rangeSet=disjunction ? RangeSets.unionRanges(Bounds.toRanges(filterList)) : RangeSets.intersectRanges(Bounds.toRanges(filterList));\n    if (rangeSet.asRanges().size() < filterList.size()) {\n      for (      final BoundDimFilter bound : filterList) {\n        if (!newChildren.remove(bound)) {\n          throw new ISE(\"Tried to remove bound, but couldn't\");\n        }\n      }\n      if (rangeSet.asRanges().isEmpty()) {\n        newChildren.add(Filtration.matchNothing());\n      }\n      for (      final Range<BoundValue> range : rangeSet.asRanges()) {\n        if (!range.hasLowerBound() && !range.hasUpperBound()) {\n          newChildren.add(Filtration.matchEverything());\n        }\n else {\n          newChildren.add(Bounds.toFilter(boundRefKey,range));\n        }\n      }\n    }\n  }\n  Preconditions.checkState(newChildren.size() > 0,\"newChildren.size > 0\");\n  final Iterator<DimFilter> iterator=newChildren.iterator();\n  while (iterator.hasNext()) {\n    final DimFilter newChild=iterator.next();\n    if (Filtration.matchNothing().equals(newChild)) {\n      if (disjunction) {\n        iterator.remove();\n      }\n else {\n        return Filtration.matchNothing();\n      }\n    }\n else     if (Filtration.matchEverything().equals(newChild)) {\n      if (disjunction) {\n        return Filtration.matchEverything();\n      }\n else {\n        iterator.remove();\n      }\n    }\n  }\n  if (newChildren.isEmpty()) {\n    if (disjunction) {\n      return Filtration.matchNothing();\n    }\n else {\n      return Filtration.matchEverything();\n    }\n  }\n else   if (newChildren.size() == 1) {\n    return newChildren.get(0);\n  }\n else {\n    return disjunction ? new OrDimFilter(newChildren) : new AndDimFilter(newChildren);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 401,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final BoundDimFilter bound : filterList) {\n  if (!newChildren.remove(bound)) {\n    throw new ISE(\"Tried to remove bound, but couldn't\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.druid.query.filter.BoundDimFilter>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 144,
    "startColumnNumber" : 8,
    "endLineNumber" : 144,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 163,
    "startColumnNumber" : 84,
    "endLineNumber" : 163,
    "endColumnNumber" : 94
  }, {
    "charLength" : 10,
    "startLineNumber" : 164,
    "startColumnNumber" : 88,
    "endLineNumber" : 164,
    "endColumnNumber" : 98
  }, {
    "charLength" : 10,
    "startLineNumber" : 166,
    "startColumnNumber" : 39,
    "endLineNumber" : 166,
    "endColumnNumber" : 49
  }, {
    "charLength" : 10,
    "startLineNumber" : 168,
    "startColumnNumber" : 42,
    "endLineNumber" : 168,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}