{
  "id" : 503,
  "expression" : "header.blockSize - (4 * numChannels)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/wav/WavExtractor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "header.blockSize - (4 * numChannels)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 403,
      "startColumnNumber" : 13,
      "endLineNumber" : 403,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 50
      },
      "nodeContext" : "(header.blockSize - (4 * numChannels))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 403,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(header.blockSize - (4 * numChannels)) * 8",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 403,
        "startColumnNumber" : 11,
        "endLineNumber" : 403,
        "endColumnNumber" : 55
      },
      "nodeContext" : "((header.blockSize - (4 * numChannels)) * 8)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 403,
        "startColumnNumber" : 11,
        "endLineNumber" : 403,
        "endColumnNumber" : 94
      },
      "nodeContext" : "((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 403,
        "startColumnNumber" : 10,
        "endLineNumber" : 403,
        "endColumnNumber" : 95
      },
      "nodeContext" : "(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 20,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 403,
        "startColumnNumber" : 10,
        "endLineNumber" : 403,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 402,
        "startColumnNumber" : 10,
        "endLineNumber" : 403,
        "endColumnNumber" : 99
      },
      "nodeContext" : "expectedFramesPerBlock=(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)) + 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 24,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 402,
        "startColumnNumber" : 6,
        "endLineNumber" : 403,
        "endColumnNumber" : 100
      },
      "nodeContext" : "int expectedFramesPerBlock=(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)) + 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2291,
        "startLineNumber" : 388,
        "startColumnNumber" : 31,
        "endLineNumber" : 431,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.extractorOutput=extractorOutput;\n  this.trackOutput=trackOutput;\n  this.header=header;\n  targetSampleSizeFrames=max(1,header.frameRateHz / TARGET_SAMPLES_PER_SECOND);\n  ParsableByteArray scratch=new ParsableByteArray(header.extraData);\n  scratch.readLittleEndianUnsignedShort();\n  framesPerBlock=scratch.readLittleEndianUnsignedShort();\n  int numChannels=header.numChannels;\n  int expectedFramesPerBlock=(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)) + 1;\n  if (framesPerBlock != expectedFramesPerBlock) {\n    throw ParserException.createForMalformedContainer(\"Expected frames per block: \" + expectedFramesPerBlock + \"; got: \"+ framesPerBlock,null);\n  }\n  int maxBlocksToDecode=Util.ceilDivide(targetSampleSizeFrames,framesPerBlock);\n  inputData=new byte[maxBlocksToDecode * header.blockSize];\n  decodedData=new ParsableByteArray(maxBlocksToDecode * numOutputFramesToBytes(framesPerBlock,numChannels));\n  int constantBitrate=header.frameRateHz * header.blockSize * 8 / framesPerBlock;\n  format=new Format.Builder().setSampleMimeType(MimeTypes.AUDIO_RAW).setAverageBitrate(constantBitrate).setPeakBitrate(constantBitrate).setMaxInputSize(numOutputFramesToBytes(targetSampleSizeFrames,numChannels)).setChannelCount(header.numChannels).setSampleRate(header.frameRateHz).setPcmEncoding(C.ENCODING_PCM_16BIT).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2435,
        "startLineNumber" : 386,
        "startColumnNumber" : 4,
        "endLineNumber" : 431,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public ImaAdPcmOutputWriter(ExtractorOutput extractorOutput,TrackOutput trackOutput,WavHeader header) throws ParserException {\n  this.extractorOutput=extractorOutput;\n  this.trackOutput=trackOutput;\n  this.header=header;\n  targetSampleSizeFrames=max(1,header.frameRateHz / TARGET_SAMPLES_PER_SECOND);\n  ParsableByteArray scratch=new ParsableByteArray(header.extraData);\n  scratch.readLittleEndianUnsignedShort();\n  framesPerBlock=scratch.readLittleEndianUnsignedShort();\n  int numChannels=header.numChannels;\n  int expectedFramesPerBlock=(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)) + 1;\n  if (framesPerBlock != expectedFramesPerBlock) {\n    throw ParserException.createForMalformedContainer(\"Expected frames per block: \" + expectedFramesPerBlock + \"; got: \"+ framesPerBlock,null);\n  }\n  int maxBlocksToDecode=Util.ceilDivide(targetSampleSizeFrames,framesPerBlock);\n  inputData=new byte[maxBlocksToDecode * header.blockSize];\n  decodedData=new ParsableByteArray(maxBlocksToDecode * numOutputFramesToBytes(framesPerBlock,numChannels));\n  int constantBitrate=header.frameRateHz * header.blockSize * 8 / framesPerBlock;\n  format=new Format.Builder().setSampleMimeType(MimeTypes.AUDIO_RAW).setAverageBitrate(constantBitrate).setPeakBitrate(constantBitrate).setMaxInputSize(numOutputFramesToBytes(targetSampleSizeFrames,numChannels)).setChannelCount(header.numChannels).setSampleRate(header.frameRateHz).setPcmEncoding(C.ENCODING_PCM_16BIT).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 205,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 403,
        "startColumnNumber" : 10,
        "endLineNumber" : 403,
        "endColumnNumber" : 99
      },
      "nodeContext" : "(((header.blockSize - (4 * numChannels)) * 8) / (header.bitsPerSample * numChannels)) + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 10
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 403,
    "startColumnNumber" : 13,
    "endLineNumber" : 403,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}