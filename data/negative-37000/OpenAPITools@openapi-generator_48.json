{
  "id" : 48,
  "expression" : "string.length()",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/samples/client/petstore/java/apache-httpclient/src/main/java/org/openapitools/client/CustomInstantDeserializer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "string.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 184,
      "startColumnNumber" : 12,
      "endLineNumber" : 184,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 184,
        "endColumnNumber" : 32
      },
      "nodeContext" : "string.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 184,
        "startColumnNumber" : 8,
        "endLineNumber" : 186,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (string.length() == 0) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 182,
        "startColumnNumber" : 34,
        "endLineNumber" : 201,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String string=parser.getText().trim();\n  if (string.length() == 0) {\n    return null;\n  }\n  if (string.endsWith(\"+0000\")) {\n    string=string.substring(0,string.length() - 5) + \"Z\";\n  }\n  T value;\n  try {\n    TemporalAccessor acc=_formatter.parse(string);\n    value=parsedToValue.apply(acc);\n    if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n      return adjust.apply(value,this.getZone(context));\n    }\n  }\n catch (  DateTimeException e) {\n    throw _peelDTE(e);\n  }\n  return value;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1529,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (parser.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_FLOAT:{\n    BigDecimal value=parser.getDecimalValue();\n    long seconds=value.longValue();\n    int nanoseconds=DecimalUtils.extractNanosecondDecimal(value,seconds);\n    return fromNanoseconds.apply(new FromDecimalArguments(seconds,nanoseconds,getZone(context)));\n  }\ncase JsonTokenId.ID_NUMBER_INT:{\n  long timestamp=parser.getLongValue();\n  if (context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n    return this.fromNanoseconds.apply(new FromDecimalArguments(timestamp,0,this.getZone(context)));\n  }\n  return this.fromMilliseconds.apply(new FromIntegerArguments(timestamp,this.getZone(context)));\n}\ncase JsonTokenId.ID_STRING:{\nString string=parser.getText().trim();\nif (string.length() == 0) {\n  return null;\n}\nif (string.endsWith(\"+0000\")) {\n  string=string.substring(0,string.length() - 5) + \"Z\";\n}\nT value;\ntry {\n  TemporalAccessor acc=_formatter.parse(string);\n  value=parsedToValue.apply(acc);\n  if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n    return adjust.apply(value,this.getZone(context));\n  }\n}\n catch (DateTimeException e) {\n  throw _peelDTE(e);\n}\nreturn value;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 190,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1768,
        "startLineNumber" : 158,
        "startColumnNumber" : 93,
        "endLineNumber" : 204,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nswitch (parser.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_FLOAT:{\n      BigDecimal value=parser.getDecimalValue();\n      long seconds=value.longValue();\n      int nanoseconds=DecimalUtils.extractNanosecondDecimal(value,seconds);\n      return fromNanoseconds.apply(new FromDecimalArguments(seconds,nanoseconds,getZone(context)));\n    }\ncase JsonTokenId.ID_NUMBER_INT:{\n    long timestamp=parser.getLongValue();\n    if (context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n      return this.fromNanoseconds.apply(new FromDecimalArguments(timestamp,0,this.getZone(context)));\n    }\n    return this.fromMilliseconds.apply(new FromIntegerArguments(timestamp,this.getZone(context)));\n  }\ncase JsonTokenId.ID_STRING:{\n  String string=parser.getText().trim();\n  if (string.length() == 0) {\n    return null;\n  }\n  if (string.endsWith(\"+0000\")) {\n    string=string.substring(0,string.length() - 5) + \"Z\";\n  }\n  T value;\n  try {\n    TemporalAccessor acc=_formatter.parse(string);\n    value=parsedToValue.apply(acc);\n    if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n      return adjust.apply(value,this.getZone(context));\n    }\n  }\n catch (  DateTimeException e) {\n    throw _peelDTE(e);\n  }\n  return value;\n}\n}\nthrow context.mappingException(\"Expected type float, integer, or string.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 204,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public T deserialize(JsonParser parser,DeserializationContext context) throws IOException {\nswitch (parser.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_FLOAT:{\n      BigDecimal value=parser.getDecimalValue();\n      long seconds=value.longValue();\n      int nanoseconds=DecimalUtils.extractNanosecondDecimal(value,seconds);\n      return fromNanoseconds.apply(new FromDecimalArguments(seconds,nanoseconds,getZone(context)));\n    }\ncase JsonTokenId.ID_NUMBER_INT:{\n    long timestamp=parser.getLongValue();\n    if (context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n      return this.fromNanoseconds.apply(new FromDecimalArguments(timestamp,0,this.getZone(context)));\n    }\n    return this.fromMilliseconds.apply(new FromIntegerArguments(timestamp,this.getZone(context)));\n  }\ncase JsonTokenId.ID_STRING:{\n  String string=parser.getText().trim();\n  if (string.length() == 0) {\n    return null;\n  }\n  if (string.endsWith(\"+0000\")) {\n    string=string.substring(0,string.length() - 5) + \"Z\";\n  }\n  T value;\n  try {\n    TemporalAccessor acc=_formatter.parse(string);\n    value=parsedToValue.apply(acc);\n    if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n      return adjust.apply(value,this.getZone(context));\n    }\n  }\n catch (  DateTimeException e) {\n    throw _peelDTE(e);\n  }\n  return value;\n}\n}\nthrow context.mappingException(\"Expected type float, integer, or string.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 184,
        "startColumnNumber" : 12,
        "endLineNumber" : 184,
        "endColumnNumber" : 32
      },
      "nodeContext" : "string.length() == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "string.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 188,
      "startColumnNumber" : 39,
      "endLineNumber" : 188,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 188,
        "startColumnNumber" : 39,
        "endLineNumber" : 188,
        "endColumnNumber" : 58
      },
      "nodeContext" : "string.length() - 5",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 188,
        "startColumnNumber" : 19,
        "endLineNumber" : 188,
        "endColumnNumber" : 59
      },
      "nodeContext" : "string.substring(0,string.length() - 5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 188,
        "startColumnNumber" : 19,
        "endLineNumber" : 188,
        "endColumnNumber" : 65
      },
      "nodeContext" : "string.substring(0,string.length() - 5) + \"Z\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 188,
        "startColumnNumber" : 10,
        "endLineNumber" : 188,
        "endColumnNumber" : 65
      },
      "nodeContext" : "string=string.substring(0,string.length() - 5) + \"Z\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 188,
        "startColumnNumber" : 10,
        "endLineNumber" : 188,
        "endColumnNumber" : 66
      },
      "nodeContext" : "string=string.substring(0,string.length() - 5) + \"Z\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 187,
        "startColumnNumber" : 38,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  string=string.substring(0,string.length() - 5) + \"Z\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (string.endsWith(\"+0000\")) {\n  string=string.substring(0,string.length() - 5) + \"Z\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 647,
        "startLineNumber" : 182,
        "startColumnNumber" : 34,
        "endLineNumber" : 201,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String string=parser.getText().trim();\n  if (string.length() == 0) {\n    return null;\n  }\n  if (string.endsWith(\"+0000\")) {\n    string=string.substring(0,string.length() - 5) + \"Z\";\n  }\n  T value;\n  try {\n    TemporalAccessor acc=_formatter.parse(string);\n    value=parsedToValue.apply(acc);\n    if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n      return adjust.apply(value,this.getZone(context));\n    }\n  }\n catch (  DateTimeException e) {\n    throw _peelDTE(e);\n  }\n  return value;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1529,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (parser.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_FLOAT:{\n    BigDecimal value=parser.getDecimalValue();\n    long seconds=value.longValue();\n    int nanoseconds=DecimalUtils.extractNanosecondDecimal(value,seconds);\n    return fromNanoseconds.apply(new FromDecimalArguments(seconds,nanoseconds,getZone(context)));\n  }\ncase JsonTokenId.ID_NUMBER_INT:{\n  long timestamp=parser.getLongValue();\n  if (context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n    return this.fromNanoseconds.apply(new FromDecimalArguments(timestamp,0,this.getZone(context)));\n  }\n  return this.fromMilliseconds.apply(new FromIntegerArguments(timestamp,this.getZone(context)));\n}\ncase JsonTokenId.ID_STRING:{\nString string=parser.getText().trim();\nif (string.length() == 0) {\n  return null;\n}\nif (string.endsWith(\"+0000\")) {\n  string=string.substring(0,string.length() - 5) + \"Z\";\n}\nT value;\ntry {\n  TemporalAccessor acc=_formatter.parse(string);\n  value=parsedToValue.apply(acc);\n  if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n    return adjust.apply(value,this.getZone(context));\n  }\n}\n catch (DateTimeException e) {\n  throw _peelDTE(e);\n}\nreturn value;\n}\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 190,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1768,
        "startLineNumber" : 158,
        "startColumnNumber" : 93,
        "endLineNumber" : 204,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nswitch (parser.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_FLOAT:{\n      BigDecimal value=parser.getDecimalValue();\n      long seconds=value.longValue();\n      int nanoseconds=DecimalUtils.extractNanosecondDecimal(value,seconds);\n      return fromNanoseconds.apply(new FromDecimalArguments(seconds,nanoseconds,getZone(context)));\n    }\ncase JsonTokenId.ID_NUMBER_INT:{\n    long timestamp=parser.getLongValue();\n    if (context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n      return this.fromNanoseconds.apply(new FromDecimalArguments(timestamp,0,this.getZone(context)));\n    }\n    return this.fromMilliseconds.apply(new FromIntegerArguments(timestamp,this.getZone(context)));\n  }\ncase JsonTokenId.ID_STRING:{\n  String string=parser.getText().trim();\n  if (string.length() == 0) {\n    return null;\n  }\n  if (string.endsWith(\"+0000\")) {\n    string=string.substring(0,string.length() - 5) + \"Z\";\n  }\n  T value;\n  try {\n    TemporalAccessor acc=_formatter.parse(string);\n    value=parsedToValue.apply(acc);\n    if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n      return adjust.apply(value,this.getZone(context));\n    }\n  }\n catch (  DateTimeException e) {\n    throw _peelDTE(e);\n  }\n  return value;\n}\n}\nthrow context.mappingException(\"Expected type float, integer, or string.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1871,
        "startLineNumber" : 157,
        "startColumnNumber" : 2,
        "endLineNumber" : 204,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public T deserialize(JsonParser parser,DeserializationContext context) throws IOException {\nswitch (parser.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_FLOAT:{\n      BigDecimal value=parser.getDecimalValue();\n      long seconds=value.longValue();\n      int nanoseconds=DecimalUtils.extractNanosecondDecimal(value,seconds);\n      return fromNanoseconds.apply(new FromDecimalArguments(seconds,nanoseconds,getZone(context)));\n    }\ncase JsonTokenId.ID_NUMBER_INT:{\n    long timestamp=parser.getLongValue();\n    if (context.isEnabled(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS)) {\n      return this.fromNanoseconds.apply(new FromDecimalArguments(timestamp,0,this.getZone(context)));\n    }\n    return this.fromMilliseconds.apply(new FromIntegerArguments(timestamp,this.getZone(context)));\n  }\ncase JsonTokenId.ID_STRING:{\n  String string=parser.getText().trim();\n  if (string.length() == 0) {\n    return null;\n  }\n  if (string.endsWith(\"+0000\")) {\n    string=string.substring(0,string.length() - 5) + \"Z\";\n  }\n  T value;\n  try {\n    TemporalAccessor acc=_formatter.parse(string);\n    value=parsedToValue.apply(acc);\n    if (context.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)) {\n      return adjust.apply(value,this.getZone(context));\n    }\n  }\n catch (  DateTimeException e) {\n    throw _peelDTE(e);\n  }\n  return value;\n}\n}\nthrow context.mappingException(\"Expected type float, integer, or string.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 213,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 188,
        "startColumnNumber" : 10,
        "endLineNumber" : 188,
        "endColumnNumber" : 66
      },
      "nodeContext" : "string=string.substring(0,string.length() - 5) + \"Z\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 184,
    "startColumnNumber" : 12,
    "endLineNumber" : 184,
    "endColumnNumber" : 27
  }, {
    "charLength" : 15,
    "startLineNumber" : 188,
    "startColumnNumber" : 39,
    "endLineNumber" : 188,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}