{
  "id" : 102,
  "expression" : "clientResource.getProtocolMappers()",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/kerberos/AbstractKerberosSingleRealmTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "clientResource.getProtocolMappers()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 192,
      "startColumnNumber" : 28,
      "endLineNumber" : 192,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 192,
        "startColumnNumber" : 28,
        "endLineNumber" : 192,
        "endColumnNumber" : 95
      },
      "nodeContext" : "clientResource.getProtocolMappers().createMapper(protocolMapperRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 192,
        "startColumnNumber" : 17,
        "endLineNumber" : 192,
        "endColumnNumber" : 95
      },
      "nodeContext" : "response=clientResource.getProtocolMappers().createMapper(protocolMapperRep)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 192,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Response response=clientResource.getProtocolMappers().createMapper(protocolMapperRep);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2052,
        "startLineNumber" : 183,
        "startColumnNumber" : 60,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assume.assumeTrue(\"Ignoring test as the embedded server is not started\",getKerberosRule().isStartEmbeddedLdapServer());\n  ProtocolMapperModel protocolMapper=UserSessionNoteMapper.createClaimMapper(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME,KerberosConstants.GSS_DELEGATION_CREDENTIAL,KerberosConstants.GSS_DELEGATION_CREDENTIAL,\"String\",true,false);\n  ProtocolMapperRepresentation protocolMapperRep=ModelToRepresentation.toRepresentation(protocolMapper);\n  ClientResource clientResource=findClientByClientId(testRealmResource(),\"kerberos-app\");\n  Response response=clientResource.getProtocolMappers().createMapper(protocolMapperRep);\n  String protocolMapperId=ApiUtil.getCreatedId(response);\n  response.close();\n  AccessToken token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  String serializedGssCredential=(String)token.getOtherClaims().get(KerberosConstants.GSS_DELEGATION_CREDENTIAL);\n  Assert.assertNotNull(serializedGssCredential);\n  GSSCredential gssCredential=KerberosSerializationUtils.deserializeCredential(serializedGssCredential);\n  String ldapResponse=invokeLdap(gssCredential,token.getPreferredUsername());\n  Assert.assertEquals(\"Horatio Nelson\",ldapResponse);\n  oauth.openLogout();\n  events.poll();\n  clientResource.getProtocolMappers().delete(protocolMapperId);\n  token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  Assert.assertFalse(token.getOtherClaims().containsKey(KerberosConstants.GSS_DELEGATION_CREDENTIAL));\n  events.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2118,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void credentialDelegationTest() throws Exception {\n  Assume.assumeTrue(\"Ignoring test as the embedded server is not started\",getKerberosRule().isStartEmbeddedLdapServer());\n  ProtocolMapperModel protocolMapper=UserSessionNoteMapper.createClaimMapper(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME,KerberosConstants.GSS_DELEGATION_CREDENTIAL,KerberosConstants.GSS_DELEGATION_CREDENTIAL,\"String\",true,false);\n  ProtocolMapperRepresentation protocolMapperRep=ModelToRepresentation.toRepresentation(protocolMapper);\n  ClientResource clientResource=findClientByClientId(testRealmResource(),\"kerberos-app\");\n  Response response=clientResource.getProtocolMappers().createMapper(protocolMapperRep);\n  String protocolMapperId=ApiUtil.getCreatedId(response);\n  response.close();\n  AccessToken token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  String serializedGssCredential=(String)token.getOtherClaims().get(KerberosConstants.GSS_DELEGATION_CREDENTIAL);\n  Assert.assertNotNull(serializedGssCredential);\n  GSSCredential gssCredential=KerberosSerializationUtils.deserializeCredential(serializedGssCredential);\n  String ldapResponse=invokeLdap(gssCredential,token.getPreferredUsername());\n  Assert.assertEquals(\"Horatio Nelson\",ldapResponse);\n  oauth.openLogout();\n  events.poll();\n  clientResource.getProtocolMappers().delete(protocolMapperId);\n  token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  Assert.assertFalse(token.getOtherClaims().containsKey(KerberosConstants.GSS_DELEGATION_CREDENTIAL));\n  events.clear();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 192,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 96
      },
      "nodeContext" : "Response response=clientResource.getProtocolMappers().createMapper(protocolMapperRep);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.keycloak.admin.client.resource.ProtocolMappersResource"
  }, {
    "nodeContext" : "clientResource.getProtocolMappers()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 211,
      "startColumnNumber" : 8,
      "endLineNumber" : 211,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 68
      },
      "nodeContext" : "clientResource.getProtocolMappers().delete(protocolMapperId)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 69
      },
      "nodeContext" : "clientResource.getProtocolMappers().delete(protocolMapperId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2052,
        "startLineNumber" : 183,
        "startColumnNumber" : 60,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assume.assumeTrue(\"Ignoring test as the embedded server is not started\",getKerberosRule().isStartEmbeddedLdapServer());\n  ProtocolMapperModel protocolMapper=UserSessionNoteMapper.createClaimMapper(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME,KerberosConstants.GSS_DELEGATION_CREDENTIAL,KerberosConstants.GSS_DELEGATION_CREDENTIAL,\"String\",true,false);\n  ProtocolMapperRepresentation protocolMapperRep=ModelToRepresentation.toRepresentation(protocolMapper);\n  ClientResource clientResource=findClientByClientId(testRealmResource(),\"kerberos-app\");\n  Response response=clientResource.getProtocolMappers().createMapper(protocolMapperRep);\n  String protocolMapperId=ApiUtil.getCreatedId(response);\n  response.close();\n  AccessToken token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  String serializedGssCredential=(String)token.getOtherClaims().get(KerberosConstants.GSS_DELEGATION_CREDENTIAL);\n  Assert.assertNotNull(serializedGssCredential);\n  GSSCredential gssCredential=KerberosSerializationUtils.deserializeCredential(serializedGssCredential);\n  String ldapResponse=invokeLdap(gssCredential,token.getPreferredUsername());\n  Assert.assertEquals(\"Horatio Nelson\",ldapResponse);\n  oauth.openLogout();\n  events.poll();\n  clientResource.getProtocolMappers().delete(protocolMapperId);\n  token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  Assert.assertFalse(token.getOtherClaims().containsKey(KerberosConstants.GSS_DELEGATION_CREDENTIAL));\n  events.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2118,
        "startLineNumber" : 182,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void credentialDelegationTest() throws Exception {\n  Assume.assumeTrue(\"Ignoring test as the embedded server is not started\",getKerberosRule().isStartEmbeddedLdapServer());\n  ProtocolMapperModel protocolMapper=UserSessionNoteMapper.createClaimMapper(KerberosConstants.GSS_DELEGATION_CREDENTIAL_DISPLAY_NAME,KerberosConstants.GSS_DELEGATION_CREDENTIAL,KerberosConstants.GSS_DELEGATION_CREDENTIAL,\"String\",true,false);\n  ProtocolMapperRepresentation protocolMapperRep=ModelToRepresentation.toRepresentation(protocolMapper);\n  ClientResource clientResource=findClientByClientId(testRealmResource(),\"kerberos-app\");\n  Response response=clientResource.getProtocolMappers().createMapper(protocolMapperRep);\n  String protocolMapperId=ApiUtil.getCreatedId(response);\n  response.close();\n  AccessToken token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  String serializedGssCredential=(String)token.getOtherClaims().get(KerberosConstants.GSS_DELEGATION_CREDENTIAL);\n  Assert.assertNotNull(serializedGssCredential);\n  GSSCredential gssCredential=KerberosSerializationUtils.deserializeCredential(serializedGssCredential);\n  String ldapResponse=invokeLdap(gssCredential,token.getPreferredUsername());\n  Assert.assertEquals(\"Horatio Nelson\",ldapResponse);\n  oauth.openLogout();\n  events.poll();\n  clientResource.getProtocolMappers().delete(protocolMapperId);\n  token=assertSuccessfulSpnegoLogin(\"hnelson\",\"hnelson\",\"secret\");\n  Assert.assertFalse(token.getOtherClaims().containsKey(KerberosConstants.GSS_DELEGATION_CREDENTIAL));\n  events.clear();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 177,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 211,
        "startColumnNumber" : 8,
        "endLineNumber" : 211,
        "endColumnNumber" : 69
      },
      "nodeContext" : "clientResource.getProtocolMappers().delete(protocolMapperId);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "org.keycloak.admin.client.resource.ProtocolMappersResource"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 192,
    "startColumnNumber" : 28,
    "endLineNumber" : 192,
    "endColumnNumber" : 63
  }, {
    "charLength" : 35,
    "startLineNumber" : 211,
    "startColumnNumber" : 8,
    "endLineNumber" : 211,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}