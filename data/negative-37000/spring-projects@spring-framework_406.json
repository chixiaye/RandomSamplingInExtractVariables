{
  "id" : 406,
  "expression" : "debug",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-core/src/main/java/org/springframework/util/ConcurrencyThrottleSupport.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "debug",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 119,
      "startColumnNumber" : 9,
      "endLineNumber" : 119,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 119,
        "startColumnNumber" : 5,
        "endLineNumber" : 122,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (debug) {\n  logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 114,
        "startColumnNumber" : 59,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (interrupted) {\n    throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n  }\n  if (debug) {\n    logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n  }\n  try {\n    this.monitor.wait();\n  }\n catch (  InterruptedException ex) {\n    Thread.currentThread().interrupt();\n    interrupted=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (this.concurrencyCount >= this.concurrencyLimit) {\n  if (interrupted) {\n    throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n  }\n  if (debug) {\n    logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n  }\n  try {\n    this.monitor.wait();\n  }\n catch (  InterruptedException ex) {\n    Thread.currentThread().interrupt();\n    interrupted=true;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 112,
        "startColumnNumber" : 31,
        "endLineNumber" : 136,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean interrupted=false;\n  while (this.concurrencyCount >= this.concurrencyLimit) {\n    if (interrupted) {\n      throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n    }\n    if (debug) {\n      logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n    }\n    try {\n      this.monitor.wait();\n    }\n catch (    InterruptedException ex) {\n      Thread.currentThread().interrupt();\n      interrupted=true;\n    }\n  }\n  if (debug) {\n    logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n  }\n  this.concurrencyCount++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 112,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 4
      },
      "nodeContext" : "synchronized (this.monitor) {\n  boolean interrupted=false;\n  while (this.concurrencyCount >= this.concurrencyLimit) {\n    if (interrupted) {\n      throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n    }\n    if (debug) {\n      logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n    }\n    try {\n      this.monitor.wait();\n    }\n catch (    InterruptedException ex) {\n      Thread.currentThread().interrupt();\n      interrupted=true;\n    }\n  }\n  if (debug) {\n    logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n  }\n  this.concurrencyCount++;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 87,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 110,
        "startColumnNumber" : 33,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n    boolean interrupted=false;\n    while (this.concurrencyCount >= this.concurrencyLimit) {\n      if (interrupted) {\n        throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n      }\n      if (debug) {\n        logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n      }\n      try {\n        this.monitor.wait();\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        interrupted=true;\n      }\n    }\n    if (debug) {\n      logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n    }\n    this.concurrencyCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (this.concurrencyLimit > 0) {\n  boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n    boolean interrupted=false;\n    while (this.concurrencyCount >= this.concurrencyLimit) {\n      if (interrupted) {\n        throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n      }\n      if (debug) {\n        logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n      }\n      try {\n        this.monitor.wait();\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        interrupted=true;\n      }\n    }\n    if (debug) {\n      logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n    }\n    this.concurrencyCount++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 105,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.concurrencyLimit == NO_CONCURRENCY) {\n    throw new IllegalStateException(\"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY\");\n  }\n  if (this.concurrencyLimit > 0) {\n    boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n      boolean interrupted=false;\n      while (this.concurrencyCount >= this.concurrencyLimit) {\n        if (interrupted) {\n          throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n        }\n        if (debug) {\n          logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n        }\n        try {\n          this.monitor.wait();\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          interrupted=true;\n        }\n      }\n      if (debug) {\n        logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n      }\n      this.concurrencyCount++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * To be invoked before the main execution logic of concrete subclasses. <p>This implementation applies the concurrency throttle.\n * @see #afterAccess()\n */\nprotected void beforeAccess(){\n  if (this.concurrencyLimit == NO_CONCURRENCY) {\n    throw new IllegalStateException(\"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY\");\n  }\n  if (this.concurrencyLimit > 0) {\n    boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n      boolean interrupted=false;\n      while (this.concurrencyCount >= this.concurrencyLimit) {\n        if (interrupted) {\n          throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n        }\n        if (debug) {\n          logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n        }\n        try {\n          this.monitor.wait();\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          interrupted=true;\n        }\n      }\n      if (debug) {\n        logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n      }\n      this.concurrencyCount++;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 119,
        "startColumnNumber" : 5,
        "endLineNumber" : 122,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (debug) {\n  logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "boolean"
  }, {
    "nodeContext" : "debug",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 132,
      "startColumnNumber" : 8,
      "endLineNumber" : 132,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (debug) {\n  logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 839,
        "startLineNumber" : 112,
        "startColumnNumber" : 31,
        "endLineNumber" : 136,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean interrupted=false;\n  while (this.concurrencyCount >= this.concurrencyLimit) {\n    if (interrupted) {\n      throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n    }\n    if (debug) {\n      logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n    }\n    try {\n      this.monitor.wait();\n    }\n catch (    InterruptedException ex) {\n      Thread.currentThread().interrupt();\n      interrupted=true;\n    }\n  }\n  if (debug) {\n    logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n  }\n  this.concurrencyCount++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 112,
        "startColumnNumber" : 3,
        "endLineNumber" : 136,
        "endColumnNumber" : 4
      },
      "nodeContext" : "synchronized (this.monitor) {\n  boolean interrupted=false;\n  while (this.concurrencyCount >= this.concurrencyLimit) {\n    if (interrupted) {\n      throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n    }\n    if (debug) {\n      logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n    }\n    try {\n      this.monitor.wait();\n    }\n catch (    InterruptedException ex) {\n      Thread.currentThread().interrupt();\n      interrupted=true;\n    }\n  }\n  if (debug) {\n    logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n  }\n  this.concurrencyCount++;\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 87,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 110,
        "startColumnNumber" : 33,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n    boolean interrupted=false;\n    while (this.concurrencyCount >= this.concurrencyLimit) {\n      if (interrupted) {\n        throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n      }\n      if (debug) {\n        logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n      }\n      try {\n        this.monitor.wait();\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        interrupted=true;\n      }\n    }\n    if (debug) {\n      logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n    }\n    this.concurrencyCount++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (this.concurrencyLimit > 0) {\n  boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n    boolean interrupted=false;\n    while (this.concurrencyCount >= this.concurrencyLimit) {\n      if (interrupted) {\n        throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n      }\n      if (debug) {\n        logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n      }\n      try {\n        this.monitor.wait();\n      }\n catch (      InterruptedException ex) {\n        Thread.currentThread().interrupt();\n        interrupted=true;\n      }\n    }\n    if (debug) {\n      logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n    }\n    this.concurrencyCount++;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1131,
        "startLineNumber" : 105,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (this.concurrencyLimit == NO_CONCURRENCY) {\n    throw new IllegalStateException(\"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY\");\n  }\n  if (this.concurrencyLimit > 0) {\n    boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n      boolean interrupted=false;\n      while (this.concurrencyCount >= this.concurrencyLimit) {\n        if (interrupted) {\n          throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n        }\n        if (debug) {\n          logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n        }\n        try {\n          this.monitor.wait();\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          interrupted=true;\n        }\n      }\n      if (debug) {\n        logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n      }\n      this.concurrencyCount++;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 138,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * To be invoked before the main execution logic of concrete subclasses. <p>This implementation applies the concurrency throttle.\n * @see #afterAccess()\n */\nprotected void beforeAccess(){\n  if (this.concurrencyLimit == NO_CONCURRENCY) {\n    throw new IllegalStateException(\"Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY\");\n  }\n  if (this.concurrencyLimit > 0) {\n    boolean debug=logger.isDebugEnabled();\nsynchronized (this.monitor) {\n      boolean interrupted=false;\n      while (this.concurrencyCount >= this.concurrencyLimit) {\n        if (interrupted) {\n          throw new IllegalStateException(\"Thread was interrupted while waiting for invocation access, \" + \"but concurrency limit still does not allow for entering\");\n        }\n        if (debug) {\n          logger.debug(\"Concurrency count \" + this.concurrencyCount + \" has reached limit \"+ this.concurrencyLimit+ \" - blocking\");\n        }\n        try {\n          this.monitor.wait();\n        }\n catch (        InterruptedException ex) {\n          Thread.currentThread().interrupt();\n          interrupted=true;\n        }\n      }\n      if (debug) {\n        logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n      }\n      this.concurrencyCount++;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 134,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (debug) {\n  logger.debug(\"Entering throttle at concurrency count \" + this.concurrencyCount);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 119,
    "startColumnNumber" : 9,
    "endLineNumber" : 119,
    "endColumnNumber" : 14
  }, {
    "charLength" : 5,
    "startLineNumber" : 132,
    "startColumnNumber" : 8,
    "endLineNumber" : 132,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}