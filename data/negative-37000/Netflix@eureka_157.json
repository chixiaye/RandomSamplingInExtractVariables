{
  "id" : 157,
  "expression" : "cli",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-server/src/main/java/com/netflix/eureka2/server/config/EurekaCommandLineParser.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 58,
      "startColumnNumber" : 21,
      "endLineNumber" : 58,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 58,
        "startColumnNumber" : 21,
        "endLineNumber" : 58,
        "endColumnNumber" : 39
      },
      "nodeContext" : "cli.hasOption('h')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 39
      },
      "nodeContext" : "helpOption=cli.hasOption('h')",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 40
      },
      "nodeContext" : "helpOption=cli.hasOption('h');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 40
      },
      "nodeContext" : "helpOption=cli.hasOption('h');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 60,
      "startColumnNumber" : 35,
      "endLineNumber" : 60,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 60,
        "startColumnNumber" : 35,
        "endLineNumber" : 60,
        "endColumnNumber" : 58
      },
      "nodeContext" : "cli.getOptionValue(\"n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 59
      },
      "nodeContext" : "builder.withVipAddress(cli.getOptionValue(\"n\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 60
      },
      "nodeContext" : "builder.withVipAddress(cli.getOptionValue(\"n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 60
      },
      "nodeContext" : "builder.withVipAddress(cli.getOptionValue(\"n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 61,
      "startColumnNumber" : 62,
      "endLineNumber" : 61,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 61,
        "startColumnNumber" : 62,
        "endLineNumber" : 61,
        "endColumnNumber" : 94
      },
      "nodeContext" : "cli.getOptionValue(\"d\",\"Basic\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 61,
        "startColumnNumber" : 39,
        "endLineNumber" : 61,
        "endColumnNumber" : 95
      },
      "nodeContext" : "DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 96
      },
      "nodeContext" : "builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 97
      },
      "nodeContext" : "builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 63,
      "startColumnNumber" : 37,
      "endLineNumber" : 63,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 63,
        "startColumnNumber" : 37,
        "endLineNumber" : 63,
        "endColumnNumber" : 53
      },
      "nodeContext" : "cli.getArgList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 63,
        "startColumnNumber" : 37,
        "endLineNumber" : 63,
        "endColumnNumber" : 63
      },
      "nodeContext" : "cli.getArgList().isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 63,
        "startColumnNumber" : 36,
        "endLineNumber" : 63,
        "endColumnNumber" : 63
      },
      "nodeContext" : "!cli.getArgList().isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 63
      },
      "nodeContext" : "resolverRequired || !cli.getArgList().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 972,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resolverRequired || !cli.getArgList().isEmpty()) {\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 63
      },
      "nodeContext" : "resolverRequired || !cli.getArgList().isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 64,
      "startColumnNumber" : 38,
      "endLineNumber" : 64,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 64,
        "startColumnNumber" : 38,
        "endLineNumber" : 64,
        "endColumnNumber" : 70
      },
      "nodeContext" : "cli.getOptionValue(\"q\",\"fixed\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 64,
        "startColumnNumber" : 23,
        "endLineNumber" : 64,
        "endColumnNumber" : 70
      },
      "nodeContext" : "resolverType=cli.getOptionValue(\"q\",\"fixed\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 64,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 71
      },
      "nodeContext" : "String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 63,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 972,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resolverRequired || !cli.getArgList().isEmpty()) {\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 64,
        "startColumnNumber" : 16,
        "endLineNumber" : 64,
        "endColumnNumber" : 71
      },
      "nodeContext" : "String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 68,
      "startColumnNumber" : 28,
      "endLineNumber" : 68,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 44
      },
      "nodeContext" : "cli.getArgList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 51
      },
      "nodeContext" : "cli.getArgList().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 56
      },
      "nodeContext" : "cli.getArgList().size() != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 68,
        "startColumnNumber" : 24,
        "endLineNumber" : 70,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (cli.getArgList().size() != 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (resolverType) {\ncase \"dns\":  if (cli.getArgList().size() != 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n  }\nbreak;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\nthrow new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 63,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 972,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resolverRequired || !cli.getArgList().isEmpty()) {\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 68,
        "startColumnNumber" : 28,
        "endLineNumber" : 68,
        "endColumnNumber" : 56
      },
      "nodeContext" : "cli.getArgList().size() != 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 73,
      "startColumnNumber" : 28,
      "endLineNumber" : 73,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 73,
        "startColumnNumber" : 28,
        "endLineNumber" : 73,
        "endColumnNumber" : 44
      },
      "nodeContext" : "cli.getArgList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 73,
        "startColumnNumber" : 28,
        "endLineNumber" : 73,
        "endColumnNumber" : 51
      },
      "nodeContext" : "cli.getArgList().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 73,
        "startColumnNumber" : 28,
        "endLineNumber" : 73,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cli.getArgList().size() < 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 73,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 759,
        "startLineNumber" : 66,
        "startColumnNumber" : 16,
        "endLineNumber" : 79,
        "endColumnNumber" : 17
      },
      "nodeContext" : "switch (resolverType) {\ncase \"dns\":  if (cli.getArgList().size() != 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n  }\nbreak;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\nthrow new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 63,
        "startColumnNumber" : 65,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 972,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (resolverRequired || !cli.getArgList().isEmpty()) {\n  String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n  builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":    if (cli.getArgList().size() != 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n    }\n  break;\ncase \"fixed\":if (cli.getArgList().size() < 1) {\n  throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 73,
        "startColumnNumber" : 28,
        "endLineNumber" : 73,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cli.getArgList().size() < 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 82,
      "startColumnNumber" : 54,
      "endLineNumber" : 82,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 82,
        "startColumnNumber" : 54,
        "endLineNumber" : 82,
        "endColumnNumber" : 85
      },
      "nodeContext" : "cli.getOptionValue(\"s\",\"7700\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 82,
        "startColumnNumber" : 37,
        "endLineNumber" : 82,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Integer.parseInt(cli.getOptionValue(\"s\",\"7700\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 87
      },
      "nodeContext" : "builder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 88
      },
      "nodeContext" : "builder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 88
      },
      "nodeContext" : "builder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 83,
      "startColumnNumber" : 17,
      "endLineNumber" : 83,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 83,
        "startColumnNumber" : 17,
        "endLineNumber" : 83,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cli.hasOption(\"n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 35
      },
      "nodeContext" : "!cli.hasOption(\"n\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!cli.hasOption(\"n\")) {\n  throw new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 35
      },
      "nodeContext" : "!cli.hasOption(\"n\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 86,
      "startColumnNumber" : 32,
      "endLineNumber" : 86,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 86,
        "startColumnNumber" : 32,
        "endLineNumber" : 86,
        "endColumnNumber" : 55
      },
      "nodeContext" : "cli.getOptionValue(\"n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.withAppName(cli.getOptionValue(\"n\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 57
      },
      "nodeContext" : "builder.withAppName(cli.getOptionValue(\"n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 86,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 57
      },
      "nodeContext" : "builder.withAppName(cli.getOptionValue(\"n\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 87,
      "startColumnNumber" : 54,
      "endLineNumber" : 87,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 87,
        "startColumnNumber" : 54,
        "endLineNumber" : 87,
        "endColumnNumber" : 85
      },
      "nodeContext" : "cli.getOptionValue(\"a\",\"8077\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 87,
        "startColumnNumber" : 37,
        "endLineNumber" : 87,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Integer.parseInt(cli.getOptionValue(\"a\",\"8077\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 87
      },
      "nodeContext" : "builder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 88
      },
      "nodeContext" : "builder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 88
      },
      "nodeContext" : "builder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 88,
      "startColumnNumber" : 52,
      "endLineNumber" : 88,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 88,
        "startColumnNumber" : 52,
        "endLineNumber" : 88,
        "endColumnNumber" : 68
      },
      "nodeContext" : "cli.getArgList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 88,
        "startColumnNumber" : 37,
        "endLineNumber" : 88,
        "endColumnNumber" : 68
      },
      "nodeContext" : "(List<String>)cli.getArgList()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 88,
        "startColumnNumber" : 36,
        "endLineNumber" : 88,
        "endColumnNumber" : 69
      },
      "nodeContext" : "((List<String>)cli.getArgList())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 88,
        "startColumnNumber" : 36,
        "endLineNumber" : 88,
        "endColumnNumber" : 114
      },
      "nodeContext" : "((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 88,
        "startColumnNumber" : 35,
        "endLineNumber" : 88,
        "endColumnNumber" : 115
      },
      "nodeContext" : "(((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()]))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 116
      },
      "nodeContext" : "builder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 117
      },
      "nodeContext" : "builder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 117
      },
      "nodeContext" : "builder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  }, {
    "nodeContext" : "cli",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 88,
      "startColumnNumber" : 89,
      "endLineNumber" : 88,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 88,
        "startColumnNumber" : 89,
        "endLineNumber" : 88,
        "endColumnNumber" : 105
      },
      "nodeContext" : "cli.getArgList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayCreation,dimensions]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 88,
        "startColumnNumber" : 89,
        "endLineNumber" : 88,
        "endColumnNumber" : 112
      },
      "nodeContext" : "cli.getArgList().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 88,
        "startColumnNumber" : 78,
        "endLineNumber" : 88,
        "endColumnNumber" : 113
      },
      "nodeContext" : "new String[cli.getArgList().size()]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 88,
        "startColumnNumber" : 36,
        "endLineNumber" : 88,
        "endColumnNumber" : 114
      },
      "nodeContext" : "((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 88,
        "startColumnNumber" : 35,
        "endLineNumber" : 88,
        "endColumnNumber" : 115
      },
      "nodeContext" : "(((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()]))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 116
      },
      "nodeContext" : "builder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 117
      },
      "nodeContext" : "builder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1676,
        "startLineNumber" : 59,
        "startColumnNumber" : 25,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!helpOption) {\n  builder.withVipAddress(cli.getOptionValue(\"n\"));\n  builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n  if (resolverRequired || !cli.getArgList().isEmpty()) {\n    String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n    builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":      if (cli.getArgList().size() != 1) {\n        throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n      }\n    break;\ncase \"fixed\":  if (cli.getArgList().size() < 1) {\n    throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n  }\nbreak;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 162,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 57,
        "startColumnNumber" : 44,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected void process(CommandLine cli){\n  helpOption=cli.hasOption('h');\n  if (!helpOption) {\n    builder.withVipAddress(cli.getOptionValue(\"n\"));\n    builder.withDataCenterType(DataCenterType.valueOf(cli.getOptionValue(\"d\",\"Basic\")));\n    if (resolverRequired || !cli.getArgList().isEmpty()) {\n      String resolverType=cli.getOptionValue(\"q\",\"fixed\");\n      builder.withResolverType(resolverType);\nswitch (resolverType) {\ncase \"dns\":        if (cli.getArgList().size() != 1) {\n          throw new IllegalArgumentException(\"provide Eureka Write cluster <domain_name:reg:disc:repl> as parameter\");\n        }\n      break;\ncase \"fixed\":    if (cli.getArgList().size() < 1) {\n      throw new IllegalArgumentException(\"provide Eureka Write cluster server <addresse:reg:disc:repl>s as parameter list\");\n    }\n  break;\ndefault:throw new IllegalArgumentException(\"resolver type not defined ('-q dns|fixed')\");\n}\n}\nbuilder.withShutDownPort(Integer.parseInt(cli.getOptionValue(\"s\",\"7700\")));\nif (!cli.hasOption(\"n\")) {\nthrow new IllegalArgumentException(\"missing required server name option ('-n <server_name>')\");\n}\nbuilder.withAppName(cli.getOptionValue(\"n\"));\nbuilder.withWebAdminPort(Integer.parseInt(cli.getOptionValue(\"a\",\"8077\")));\nbuilder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 117
      },
      "nodeContext" : "builder.withServerList((((List<String>)cli.getArgList()).toArray(new String[cli.getArgList().size()])));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.server.config.CommandLine"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 58,
    "startColumnNumber" : 21,
    "endLineNumber" : 58,
    "endColumnNumber" : 24
  }, {
    "charLength" : 3,
    "startLineNumber" : 60,
    "startColumnNumber" : 35,
    "endLineNumber" : 60,
    "endColumnNumber" : 38
  }, {
    "charLength" : 3,
    "startLineNumber" : 61,
    "startColumnNumber" : 62,
    "endLineNumber" : 61,
    "endColumnNumber" : 65
  }, {
    "charLength" : 3,
    "startLineNumber" : 63,
    "startColumnNumber" : 37,
    "endLineNumber" : 63,
    "endColumnNumber" : 40
  }, {
    "charLength" : 3,
    "startLineNumber" : 64,
    "startColumnNumber" : 38,
    "endLineNumber" : 64,
    "endColumnNumber" : 41
  }, {
    "charLength" : 3,
    "startLineNumber" : 68,
    "startColumnNumber" : 28,
    "endLineNumber" : 68,
    "endColumnNumber" : 31
  }, {
    "charLength" : 3,
    "startLineNumber" : 73,
    "startColumnNumber" : 28,
    "endLineNumber" : 73,
    "endColumnNumber" : 31
  }, {
    "charLength" : 3,
    "startLineNumber" : 82,
    "startColumnNumber" : 54,
    "endLineNumber" : 82,
    "endColumnNumber" : 57
  }, {
    "charLength" : 3,
    "startLineNumber" : 83,
    "startColumnNumber" : 17,
    "endLineNumber" : 83,
    "endColumnNumber" : 20
  }, {
    "charLength" : 3,
    "startLineNumber" : 86,
    "startColumnNumber" : 32,
    "endLineNumber" : 86,
    "endColumnNumber" : 35
  }, {
    "charLength" : 3,
    "startLineNumber" : 87,
    "startColumnNumber" : 54,
    "endLineNumber" : 87,
    "endColumnNumber" : 57
  }, {
    "charLength" : 3,
    "startLineNumber" : 88,
    "startColumnNumber" : 52,
    "endLineNumber" : 88,
    "endColumnNumber" : 55
  }, {
    "charLength" : 3,
    "startLineNumber" : 88,
    "startColumnNumber" : 89,
    "endLineNumber" : 88,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 3
  } ]
}