{
  "id" : 372,
  "expression" : "subMask",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/SteinerTree.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "subMask",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 61,
      "startColumnNumber" : 46,
      "endLineNumber" : 61,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 61,
        "startColumnNumber" : 46,
        "endLineNumber" : 61,
        "endColumnNumber" : 57
      },
      "nodeContext" : "subMask > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n  dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < v; j++) {\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 55,
        "startColumnNumber" : 46,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int mask=1; mask < 1 << t; mask++) {\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 127,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 26,
        "startColumnNumber" : 89,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2382,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the cheapest cost to connect a given subset of nodes (which we will refer to as terminal nodes). These nodes may be either directly or indirectly connected, possibly connecting to intermediate nodes which are not terminal nodes.\n * @param distances - The adjacency matrix for the undirected graph\n * @param subsetToConnect - The 0-based indices of the terminal nodes\n * @return the minimum cost required to connect the terminal nodes\n */\npublic static double minLengthSteinerTree(double[][] distances,int[] subsetToConnect){\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 61,
        "startColumnNumber" : 46,
        "endLineNumber" : 61,
        "endColumnNumber" : 57
      },
      "nodeContext" : "subMask > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "subMask",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 61,
      "startColumnNumber" : 70,
      "endLineNumber" : 61,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 61,
        "startColumnNumber" : 70,
        "endLineNumber" : 61,
        "endColumnNumber" : 81
      },
      "nodeContext" : "subMask - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 61,
        "startColumnNumber" : 69,
        "endLineNumber" : 61,
        "endColumnNumber" : 82
      },
      "nodeContext" : "(subMask - 1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 61,
        "startColumnNumber" : 69,
        "endLineNumber" : 61,
        "endColumnNumber" : 89
      },
      "nodeContext" : "(subMask - 1) & mask",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,updaters]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 61,
        "startColumnNumber" : 59,
        "endLineNumber" : 61,
        "endColumnNumber" : 89
      },
      "nodeContext" : "subMask=(subMask - 1) & mask",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n  dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < v; j++) {\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 55,
        "startColumnNumber" : 46,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int mask=1; mask < 1 << t; mask++) {\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 127,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 26,
        "startColumnNumber" : 89,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2382,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the cheapest cost to connect a given subset of nodes (which we will refer to as terminal nodes). These nodes may be either directly or indirectly connected, possibly connecting to intermediate nodes which are not terminal nodes.\n * @param distances - The adjacency matrix for the undirected graph\n * @param subsetToConnect - The 0-based indices of the terminal nodes\n * @return the minimum cost required to connect the terminal nodes\n */\npublic static double minLengthSteinerTree(double[][] distances,int[] subsetToConnect){\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,updaters]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 61,
        "startColumnNumber" : 59,
        "endLineNumber" : 61,
        "endColumnNumber" : 89
      },
      "nodeContext" : "subMask=(subMask - 1) & mask",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "subMask",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 65,
      "startColumnNumber" : 49,
      "endLineNumber" : 65,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 65,
        "startColumnNumber" : 46,
        "endLineNumber" : 65,
        "endColumnNumber" : 57
      },
      "nodeContext" : "dp[subMask]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 65,
        "startColumnNumber" : 46,
        "endLineNumber" : 65,
        "endColumnNumber" : 60
      },
      "nodeContext" : "dp[subMask][j]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 65,
        "startColumnNumber" : 46,
        "endLineNumber" : 65,
        "endColumnNumber" : 84
      },
      "nodeContext" : "dp[subMask][j] + dp[mask ^ subMask][j]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 85
      },
      "nodeContext" : "dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 86
      },
      "nodeContext" : "dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 61,
        "startColumnNumber" : 91,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n  dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < v; j++) {\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 55,
        "startColumnNumber" : 46,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int mask=1; mask < 1 << t; mask++) {\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 127,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 26,
        "startColumnNumber" : 89,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2382,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the cheapest cost to connect a given subset of nodes (which we will refer to as terminal nodes). These nodes may be either directly or indirectly connected, possibly connecting to intermediate nodes which are not terminal nodes.\n * @param distances - The adjacency matrix for the undirected graph\n * @param subsetToConnect - The 0-based indices of the terminal nodes\n * @return the minimum cost required to connect the terminal nodes\n */\npublic static double minLengthSteinerTree(double[][] distances,int[] subsetToConnect){\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 86
      },
      "nodeContext" : "dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "subMask",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 65,
      "startColumnNumber" : 73,
      "endLineNumber" : 65,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 65,
        "startColumnNumber" : 66,
        "endLineNumber" : 65,
        "endColumnNumber" : 80
      },
      "nodeContext" : "mask ^ subMask",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 65,
        "startColumnNumber" : 63,
        "endLineNumber" : 65,
        "endColumnNumber" : 81
      },
      "nodeContext" : "dp[mask ^ subMask]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 65,
        "startColumnNumber" : 63,
        "endLineNumber" : 65,
        "endColumnNumber" : 84
      },
      "nodeContext" : "dp[mask ^ subMask][j]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 65,
        "startColumnNumber" : 46,
        "endLineNumber" : 65,
        "endColumnNumber" : 84
      },
      "nodeContext" : "dp[subMask][j] + dp[mask ^ subMask][j]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 65,
        "startColumnNumber" : 24,
        "endLineNumber" : 65,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 85
      },
      "nodeContext" : "dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 86
      },
      "nodeContext" : "dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 61,
        "startColumnNumber" : 91,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 307,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n  dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 58,
        "startColumnNumber" : 34,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 414,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 67,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < v; j++) {\n  for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n    dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 63,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 706,
        "startLineNumber" : 55,
        "startColumnNumber" : 46,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 748,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 75,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int mask=1; mask < 1 << t; mask++) {\n  for (int j=0; j < v; j++) {\n    for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n    }\n  }\n  for (int j=0; j < v; j++) {\n    for (int k=0; k < v; k++) {\n      dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 127,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 26,
        "startColumnNumber" : 89,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 246,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2382,
        "startLineNumber" : 17,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Finds the cheapest cost to connect a given subset of nodes (which we will refer to as terminal nodes). These nodes may be either directly or indirectly connected, possibly connecting to intermediate nodes which are not terminal nodes.\n * @param distances - The adjacency matrix for the undirected graph\n * @param subsetToConnect - The 0-based indices of the terminal nodes\n * @return the minimum cost required to connect the terminal nodes\n */\npublic static double minLengthSteinerTree(double[][] distances,int[] subsetToConnect){\n  int v=distances.length;\n  int t=subsetToConnect.length;\n  if (t <= 1) {\n    return 0;\n  }\n  floydWarshall(distances);\n  double[][] dp=new double[1 << t][v];\n  for (int i=0; i < dp.length; i++) {\n    Arrays.fill(dp[i],Double.POSITIVE_INFINITY);\n  }\n  for (int mask=0; mask < t; mask++) {\n    for (int j=0; j < v; j++) {\n      dp[1 << mask][j]=distances[subsetToConnect[mask]][j];\n    }\n  }\n  for (int mask=1; mask < 1 << t; mask++) {\n    for (int j=0; j < v; j++) {\n      for (int subMask=(mask - 1) & mask; subMask > 0; subMask=(subMask - 1) & mask) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n      }\n    }\n    for (int j=0; j < v; j++) {\n      for (int k=0; k < v; k++) {\n        dp[mask][j]=Math.min(dp[mask][j],dp[mask][k] + distances[k][j]);\n      }\n    }\n  }\n  return dp[(1 << t) - 1][subsetToConnect[0]];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 65,
        "startColumnNumber" : 10,
        "endLineNumber" : 65,
        "endColumnNumber" : 86
      },
      "nodeContext" : "dp[mask][j]=Math.min(dp[mask][j],dp[subMask][j] + dp[mask ^ subMask][j]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 61,
    "startColumnNumber" : 46,
    "endLineNumber" : 61,
    "endColumnNumber" : 53
  }, {
    "charLength" : 7,
    "startLineNumber" : 61,
    "startColumnNumber" : 70,
    "endLineNumber" : 61,
    "endColumnNumber" : 77
  }, {
    "charLength" : 7,
    "startLineNumber" : 65,
    "startColumnNumber" : 49,
    "endLineNumber" : 65,
    "endColumnNumber" : 56
  }, {
    "charLength" : 7,
    "startLineNumber" : 65,
    "startColumnNumber" : 73,
    "endLineNumber" : 65,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}