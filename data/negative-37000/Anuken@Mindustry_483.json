{
  "id" : 483,
  "expression" : "10",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/graphics/LoadRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 438,
      "startColumnNumber" : 70,
      "endLineNumber" : 438,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 438,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Lines.rect(0,h / 2 - bsize * barScale / 2f,w,bsize * barScale,10,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 438,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Lines.rect(0,h / 2 - bsize * barScale / 2f,w,bsize * barScale,10,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 17286,
        "startLineNumber" : 74,
        "startColumnNumber" : 22,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!preview) {\n    if (lastFrameTime == 0) {\n      lastFrameTime=Time.millis();\n    }\n    float timespace=Time.timeSinceMillis(lastFrameTime) / 1000f;\n    renderTimes.add(timespace);\n    lastFrameTime=Time.millis();\n  }\n  if (fx.getWidth() != graphics.getWidth() || fx.getHeight() != graphics.getHeight()) {\n    fx.resize(graphics.getWidth(),graphics.getHeight());\n  }\n  fx.begin();\n  if (assets.getLoadedAssets() != lastLength) {\n    assetText.setLength(0);\n    for (    String name : assets.getAssetNames()) {\n      boolean isRed=name.toLowerCase().contains(\"mod\") || assets.getAssetType(name).getSimpleName().toLowerCase().contains(\"mod\") || name.contains(\"preview\");\n      assetText.append(isRed ? red : orange).append(name.replace(OS.username,\"<<host>>\").replace(\"/\",\"::\")).append(red).append(\"::[]\").append(assets.getAssetType(name).getSimpleName()).append(\"\\n\");\n    }\n    lastLength=assets.getLoadedAssets();\n  }\n  Core.graphics.clear(Color.black);\n  float w=Core.graphics.getWidth(), h=Core.graphics.getHeight(), s=Scl.scl();\n  Draw.proj().setOrtho(0,0,Core.graphics.getWidth(),Core.graphics.getHeight());\n  int lightVerts=20;\n  float lightRad=Math.max(w,h) * 0.6f;\n  float stroke=5f * s;\n  Fill.light(w / 2,h / 2,lightVerts,lightRad,Tmp.c1.set(color).a(0.15f),Color.clear);\n  float space=s * (60);\n  float progress=assets.getProgress();\n  int dotw=(int)(w / space) / 2 + 1;\n  int doth=(int)(h / space) / 2 + 1;\n  if (preview) {\n    testprogress+=Time.delta / (60f * 3);\n    progress=testprogress;\n    if (input.keyTap(KeyCode.space)) {\n      testprogress=0;\n    }\n  }\n  Draw.color(Pal.accent,Color.black,0.9f);\n  Lines.stroke(stroke);\n  for (int cx=-dotw; cx <= dotw; cx++) {\n    for (int cy=-doth; cy <= doth; cy++) {\n      float dx=cx * space + w / 2f, dy=cy * space + h / 2f;\n      Lines.poly(dx,dy,4,space / 2f);\n    }\n  }\n  Draw.flush();\n  float aspect=1.94f;\n  Vec2 size=Scaling.fit.apply(graphics.getWidth(),graphics.getWidth() / aspect,graphics.getWidth(),graphics.getHeight());\n  int viewportWidth=(int)size.x, viewportHeight=(int)size.y, viewportX=(int)(graphics.getWidth() / 2f - size.x / 2f), viewportY=(int)(graphics.getHeight() / 2f - size.y / 2f);\n  if (graphics.getHeight() > graphics.getWidth()) {\n    viewportHeight=graphics.getHeight();\n    viewportWidth=graphics.getWidth();\n    viewportX=viewportY=0;\n  }\n  w=viewportWidth;\n  h=viewportHeight;\n  Gl.viewport(viewportX,viewportY,viewportWidth,viewportHeight);\n  Draw.proj().setOrtho(0,0,viewportWidth,viewportHeight);\n  float rads=110 * s;\n  float rad=Math.min(Math.min(w,h) / 3.1f,Math.min(w,h) / 2f - rads);\n  float rad2=rad + rads;\n  float epad=60f * s;\n  float mpad=100f * s;\n  Draw.color(color);\n  Lines.stroke(stroke);\n  Lines.poly(w / 2,h / 2,4,rad);\n  Lines.poly(w / 2,h / 2,4,rad2);\n  if (assets.isLoaded(\"tech\")) {\n    Font font=assets.get(\"tech\");\n    font.getData().markupEnabled=true;\n    int panei=0;\n    for (    int sx : Mathf.signs) {\n      for (      int sy : Mathf.signs) {\n        float y1=h / 2f + sy * rad2, y2=h / 2f + sy * 120f;\n        floats.clear();\n        if (w > h) {\n          floats.add(w / 2f + sx * mpad,y1);\n          floats.add(w / 2f + (w / 2f - epad) * sx,y1);\n          floats.add(w / 2f + (w / 2f - epad) * sx,y2);\n          floats.add(w / 2f + sx * mpad + sx * Math.abs(y2 - y1),y2);\n        }\n else {\n          float py2=h / 2f + (h / 2f - epad) * sy;\n          float testval=sy < 0 ? Math.min(y2,y1) : Math.max(y2,y1);\n          if (py2 * sy < testval * sy) {\n            continue;\n          }\n          floats.add(w / 2f + sx * mpad,y1);\n          floats.add(w / 2f + sx * mpad,py2);\n          floats.add(Mathf.clamp(w / 2f + sx * (mpad + Math.abs(y2 - y1)),stroke / 2f,w - stroke / 2f),py2);\n          floats.add(Mathf.clamp(w / 2f + sx * (mpad + Math.abs(y2 - y1)),stroke / 2f,w - stroke / 2f),y2);\n        }\n        float minx=Float.MAX_VALUE, miny=Float.MAX_VALUE, maxx=0, maxy=0;\n        for (int i=0; i < floats.size; i+=2) {\n          float x=floats.items[i], y=floats.items[i + 1];\n          minx=Math.min(x,minx);\n          miny=Math.min(y,miny);\n          maxx=Math.max(x,maxx);\n          maxy=Math.max(y,maxy);\n        }\n        Draw.flush();\n        Gl.clear(Gl.stencilBufferBit);\n        Draw.beginStencil();\n        Fill.poly(floats);\n        Draw.beginStenciled();\n        GlyphLayout layout=GlyphLayout.obtain();\n        float pad=4;\n        if (panei == 0) {\n          layout.setText(font,assetText);\n          font.draw(assetText,minx + pad,maxy - pad + Math.max(0,layout.height - (maxy - miny)));\n        }\n else         if (panei == 1) {\n          float height=maxy - miny;\n          float barpad=s * 8f;\n          int barsUsed=Math.min((int)((height - barpad) / (font.getLineHeight() * 1.4f)),bars.length);\n          float barspace=(height - barpad) / barsUsed;\n          float barheight=barspace * 0.8f;\n          for (int i=0; i < barsUsed; i++) {\n            Bar bar=bars[i];\n            if (bar.valid()) {\n              Draw.color(bar.red() ? colorRed : color);\n              float y=maxy - i * barspace - barpad - barheight;\n              float width=Mathf.clamp(bar.value());\n              float baseWidth=Core.graphics.isPortrait() ? maxx - minx : (maxx - minx) - (maxy - y) - barpad * 2f - s * 4;\n              float cx=minx + barpad, cy=y, topY=cy + barheight, botY=cy;\n              Lines.square(cx + barheight / 2f,botY + barheight / 2f,barheight / 2f);\n              Fill.quad(cx + barheight,cy,cx + barheight,topY,cx + width * baseWidth + barheight,topY,cx + width * baseWidth,botY);\n              Draw.color(Color.black);\n              Fill.quad(cx + width * baseWidth + barheight,topY,cx + width * baseWidth,botY,cx + baseWidth,botY,cx + baseWidth + barheight,topY);\n              font.setColor(Color.black);\n              layout.setText(font,bar.text);\n              font.draw(bar.text,cx + barheight * 1.5f,botY + barheight / 2f + layout.height / 2f);\n            }\n          }\n          Draw.color(color);\n        }\n else         if (panei == 2) {\n          float barw=30f * s;\n          float barspace=40f * s;\n          float barpad=10f * s;\n          int bars=(int)(maxx - minx / barspace) + 1;\n          int barmax=(int)((maxy - miny) / barspace);\n          for (int i=0; i < bars; i++) {\n            int index=i % renderTimes.getWindowSize();\n            float val=renderTimes.get(index);\n            float scale=Mathf.clamp(!renderTimes.hasEnoughData() ? Mathf.randomSeed(i) : (val / renderTimes.mean() - 0.5f));\n            Color dst=scale > 0.8f ? colorRed : color;\n            Draw.color(dst);\n            int height=Math.max((int)(scale * barmax),1);\n            float cx=maxx - barw / 2f - barpad - i * barspace;\n            for (int j=0; j < barmax; j++) {\n              if (j >= height) {\n                Draw.color(color,Color.black,0.7f);\n              }\n else {\n                Draw.color(dst);\n              }\n              Fill.square(cx,miny + j * barspace + barw / 2f + barpad,barw / 2f);\n            }\n          }\n          Draw.color(color);\n        }\n else         if (panei == 3) {\n          Draw.flush();\n          float vx=floats.get(6), vy=floats.get(7), vw=(maxx - vx), vh=(maxy - vy), cx=vx + vw / 2f, cy=vy + vh / 2f;\n          float vpad=30 * s;\n          float vcont=Math.min(vw,vh);\n          float vsize=vcont - vpad * 2;\n          int rx=(int)(vx + vw / 2f - vsize / 2f), ry=(int)(vy + vh / 2f - vsize / 2f), rw=(int)vsize, rh=(int)vsize;\n          float vrad=vsize / 2f + vpad;\n          if (!graphics.isPortrait()) {\n            String text=\"<<ready>>\";\n            layout.setText(font,text);\n            if (layout.width * 1.5f < vw) {\n              Lines.circle(cx,cy,vsize / 2f);\n              if (rw > 0 && rh > 0) {\n                Gl.viewport(viewportX + rx,viewportY + ry,rw,rh);\n                cam.position.set(2,0,2);\n                cam.resize(rw,rh);\n                cam.lookAt(0,0,0);\n                cam.fov=42f;\n                cam.update();\n                Shaders.mesh.bind();\n                Shaders.mesh.setUniformMatrix4(\"u_proj\",cam.combined.val);\n                mesh.render(Shaders.mesh,Gl.lines);\n                Gl.viewport(viewportX,viewportY,viewportWidth,viewportHeight);\n              }\n              int points=4;\n              for (int i=0; i < points; i++) {\n                float ang=i * 360f / points + 45;\n                Fill.poly(cx + Angles.trnsx(ang,vrad),cy + Angles.trnsy(ang,vrad),3,20 * s,ang);\n              }\n              Draw.color(Color.black);\n              Fill.rect(cx,cy,layout.width + 14f * s,layout.height + 14f * s);\n              font.setColor(color);\n              font.draw(text,cx - layout.width / 2f,cy + layout.height / 2f);\n              Draw.color(color);\n              Lines.square(cx,cy,vcont / 2f);\n              Lines.line(vx,vy,vx,vy + vh);\n              float pspace=70f * s;\n              int pcount=(int)(vh / pspace / 2) + 2;\n              float pw=(vw - vcont) / 2f;\n              float slope=pw / 2f;\n              for (              int i : Mathf.signs) {\n                float px=cx + i * (vcont / 2f + pw / 2f);\n                float xleft=px - pw / 2f, xright=px + pw / 2f;\n                for (int j=-2; j < pcount * 2; j++) {\n                  float py=vy + j * pspace * 2, ybot=py - slope, ytop=py + slope;\n                  Fill.quad(xleft,ybot,xleft,ybot + pspace,xright,ytop + pspace,xright,ytop);\n                }\n              }\n            }\n else {\n              Lines.line(vx,vy,vx + vw,vy + vh);\n              Lines.line(vx,vy + vh,vx + vw,vy);\n            }\n          }\n          float trispace=70f * s, tpad=5f * s;\n          int tris=(int)(vh / trispace) + 1;\n          for (int tx=0; tx < tris; tx++) {\n            for (int ty=0; ty < tris; ty++) {\n              float trix=vx - trispace / 2f - trispace * tx - tpad, triy=vy + vh - trispace / 2f - trispace * ty - tpad;\n              Draw.color(Mathf.randomSeed(Pack.longInt(tx + 91,ty + 55)) < 0.5 * (preview ? 1f : 1f - progress) ? colorRed : color);\n              Fill.square(trix,triy,trispace / 2.5f,0);\n              Draw.color(Color.black);\n              Fill.square(trix,triy,trispace / 2.5f / Mathf.sqrt2,0);\n            }\n          }\n          Draw.color(color);\n        }\n        layout.free();\n        Draw.endStencil();\n        Lines.polyline(floats,true);\n        panei++;\n      }\n    }\n  }\n  Draw.flush();\n  Gl.viewport(0,0,graphics.getWidth(),graphics.getHeight());\n  Draw.proj(0,0,graphics.getWidth(),graphics.getHeight());\n  w=graphics.getWidth();\n  h=graphics.getHeight();\n  float bspace=s * 100f;\n  float bsize=s * 80f;\n  int bars=(int)(w / bspace / 2) + 1;\n  float pscale=1f / bars;\n  float barScale=1.5f;\n  Draw.color(Color.black);\n  Fill.rect(w / 2,h / 2,w,bsize * barScale);\n  Lines.stroke(stroke);\n  Draw.color(color);\n  Lines.rect(0,h / 2 - bsize * barScale / 2f,w,bsize * barScale,10,0);\n  for (int i=1; i < bars; i++) {\n    float cx=i * bspace;\n    float fract=1f - (i - 1) / (float)(bars - 1);\n    float alpha=progress >= fract ? 1f : Mathf.clamp((pscale - (fract - progress)) / pscale);\n    Draw.color(Color.black,color,alpha);\n    for (    int dir : Mathf.signs) {\n      float width=bsize / 1.7f;\n      float skew=bsize / 2f;\n      float v=w / 2 + cx * dir - width / 2f;\n      Fill.rects(v + dir * skew,h / 2f - bsize / 2f + bsize / 2f,width,bsize / 2f,-dir * skew);\n      Fill.rects(v,h / 2f - bsize / 2f,width,bsize / 2f,dir * skew);\n    }\n  }\n  float fract=1f - (-1) / (float)(bars - 1);\n  float alpha=progress >= fract ? 1f : Mathf.clamp((pscale - (fract - progress)) / pscale);\n  Draw.color(Color.black,color,alpha);\n  Fill.square(w / 2f,h / 2f,bsize / 3f,45);\n  if (assets.isLoaded(\"tech\")) {\n    String name=assets.getCurrentLoading() != null ? assets.getCurrentLoading().fileName.toLowerCase() : \"system\";\n    String key=name.contains(\"script\") ? \"scripts\" : name.contains(\"content\") ? \"content\" : name.contains(\"mod\") ? \"mods\" : name.contains(\"msav\") || name.contains(\"maps\") ? \"map\" : name.contains(\"ogg\") || name.contains(\"mp3\") ? \"sound\" : name.contains(\"png\") ? \"image\" : \"system\";\n    Font font=assets.get(\"tech\");\n    font.setColor(Pal.accent);\n    Draw.color(Color.black);\n    font.draw(red + \"[[[[ \" + key+ \" ]]\\n\"+ orange+ \"<\"+ Version.modifier+ \"  \"+ (Version.build == 0 ? \"[init]\" : Version.buildString())+ \">\",w / 2f,h / 2f + 110 * s,Align.center);\n  }\n  Draw.flush();\n  fx.end();\n  fx.applyEffects();\n  fx.render();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 2718,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 17304,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 482,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void draw(){\n  if (!preview) {\n    if (lastFrameTime == 0) {\n      lastFrameTime=Time.millis();\n    }\n    float timespace=Time.timeSinceMillis(lastFrameTime) / 1000f;\n    renderTimes.add(timespace);\n    lastFrameTime=Time.millis();\n  }\n  if (fx.getWidth() != graphics.getWidth() || fx.getHeight() != graphics.getHeight()) {\n    fx.resize(graphics.getWidth(),graphics.getHeight());\n  }\n  fx.begin();\n  if (assets.getLoadedAssets() != lastLength) {\n    assetText.setLength(0);\n    for (    String name : assets.getAssetNames()) {\n      boolean isRed=name.toLowerCase().contains(\"mod\") || assets.getAssetType(name).getSimpleName().toLowerCase().contains(\"mod\") || name.contains(\"preview\");\n      assetText.append(isRed ? red : orange).append(name.replace(OS.username,\"<<host>>\").replace(\"/\",\"::\")).append(red).append(\"::[]\").append(assets.getAssetType(name).getSimpleName()).append(\"\\n\");\n    }\n    lastLength=assets.getLoadedAssets();\n  }\n  Core.graphics.clear(Color.black);\n  float w=Core.graphics.getWidth(), h=Core.graphics.getHeight(), s=Scl.scl();\n  Draw.proj().setOrtho(0,0,Core.graphics.getWidth(),Core.graphics.getHeight());\n  int lightVerts=20;\n  float lightRad=Math.max(w,h) * 0.6f;\n  float stroke=5f * s;\n  Fill.light(w / 2,h / 2,lightVerts,lightRad,Tmp.c1.set(color).a(0.15f),Color.clear);\n  float space=s * (60);\n  float progress=assets.getProgress();\n  int dotw=(int)(w / space) / 2 + 1;\n  int doth=(int)(h / space) / 2 + 1;\n  if (preview) {\n    testprogress+=Time.delta / (60f * 3);\n    progress=testprogress;\n    if (input.keyTap(KeyCode.space)) {\n      testprogress=0;\n    }\n  }\n  Draw.color(Pal.accent,Color.black,0.9f);\n  Lines.stroke(stroke);\n  for (int cx=-dotw; cx <= dotw; cx++) {\n    for (int cy=-doth; cy <= doth; cy++) {\n      float dx=cx * space + w / 2f, dy=cy * space + h / 2f;\n      Lines.poly(dx,dy,4,space / 2f);\n    }\n  }\n  Draw.flush();\n  float aspect=1.94f;\n  Vec2 size=Scaling.fit.apply(graphics.getWidth(),graphics.getWidth() / aspect,graphics.getWidth(),graphics.getHeight());\n  int viewportWidth=(int)size.x, viewportHeight=(int)size.y, viewportX=(int)(graphics.getWidth() / 2f - size.x / 2f), viewportY=(int)(graphics.getHeight() / 2f - size.y / 2f);\n  if (graphics.getHeight() > graphics.getWidth()) {\n    viewportHeight=graphics.getHeight();\n    viewportWidth=graphics.getWidth();\n    viewportX=viewportY=0;\n  }\n  w=viewportWidth;\n  h=viewportHeight;\n  Gl.viewport(viewportX,viewportY,viewportWidth,viewportHeight);\n  Draw.proj().setOrtho(0,0,viewportWidth,viewportHeight);\n  float rads=110 * s;\n  float rad=Math.min(Math.min(w,h) / 3.1f,Math.min(w,h) / 2f - rads);\n  float rad2=rad + rads;\n  float epad=60f * s;\n  float mpad=100f * s;\n  Draw.color(color);\n  Lines.stroke(stroke);\n  Lines.poly(w / 2,h / 2,4,rad);\n  Lines.poly(w / 2,h / 2,4,rad2);\n  if (assets.isLoaded(\"tech\")) {\n    Font font=assets.get(\"tech\");\n    font.getData().markupEnabled=true;\n    int panei=0;\n    for (    int sx : Mathf.signs) {\n      for (      int sy : Mathf.signs) {\n        float y1=h / 2f + sy * rad2, y2=h / 2f + sy * 120f;\n        floats.clear();\n        if (w > h) {\n          floats.add(w / 2f + sx * mpad,y1);\n          floats.add(w / 2f + (w / 2f - epad) * sx,y1);\n          floats.add(w / 2f + (w / 2f - epad) * sx,y2);\n          floats.add(w / 2f + sx * mpad + sx * Math.abs(y2 - y1),y2);\n        }\n else {\n          float py2=h / 2f + (h / 2f - epad) * sy;\n          float testval=sy < 0 ? Math.min(y2,y1) : Math.max(y2,y1);\n          if (py2 * sy < testval * sy) {\n            continue;\n          }\n          floats.add(w / 2f + sx * mpad,y1);\n          floats.add(w / 2f + sx * mpad,py2);\n          floats.add(Mathf.clamp(w / 2f + sx * (mpad + Math.abs(y2 - y1)),stroke / 2f,w - stroke / 2f),py2);\n          floats.add(Mathf.clamp(w / 2f + sx * (mpad + Math.abs(y2 - y1)),stroke / 2f,w - stroke / 2f),y2);\n        }\n        float minx=Float.MAX_VALUE, miny=Float.MAX_VALUE, maxx=0, maxy=0;\n        for (int i=0; i < floats.size; i+=2) {\n          float x=floats.items[i], y=floats.items[i + 1];\n          minx=Math.min(x,minx);\n          miny=Math.min(y,miny);\n          maxx=Math.max(x,maxx);\n          maxy=Math.max(y,maxy);\n        }\n        Draw.flush();\n        Gl.clear(Gl.stencilBufferBit);\n        Draw.beginStencil();\n        Fill.poly(floats);\n        Draw.beginStenciled();\n        GlyphLayout layout=GlyphLayout.obtain();\n        float pad=4;\n        if (panei == 0) {\n          layout.setText(font,assetText);\n          font.draw(assetText,minx + pad,maxy - pad + Math.max(0,layout.height - (maxy - miny)));\n        }\n else         if (panei == 1) {\n          float height=maxy - miny;\n          float barpad=s * 8f;\n          int barsUsed=Math.min((int)((height - barpad) / (font.getLineHeight() * 1.4f)),bars.length);\n          float barspace=(height - barpad) / barsUsed;\n          float barheight=barspace * 0.8f;\n          for (int i=0; i < barsUsed; i++) {\n            Bar bar=bars[i];\n            if (bar.valid()) {\n              Draw.color(bar.red() ? colorRed : color);\n              float y=maxy - i * barspace - barpad - barheight;\n              float width=Mathf.clamp(bar.value());\n              float baseWidth=Core.graphics.isPortrait() ? maxx - minx : (maxx - minx) - (maxy - y) - barpad * 2f - s * 4;\n              float cx=minx + barpad, cy=y, topY=cy + barheight, botY=cy;\n              Lines.square(cx + barheight / 2f,botY + barheight / 2f,barheight / 2f);\n              Fill.quad(cx + barheight,cy,cx + barheight,topY,cx + width * baseWidth + barheight,topY,cx + width * baseWidth,botY);\n              Draw.color(Color.black);\n              Fill.quad(cx + width * baseWidth + barheight,topY,cx + width * baseWidth,botY,cx + baseWidth,botY,cx + baseWidth + barheight,topY);\n              font.setColor(Color.black);\n              layout.setText(font,bar.text);\n              font.draw(bar.text,cx + barheight * 1.5f,botY + barheight / 2f + layout.height / 2f);\n            }\n          }\n          Draw.color(color);\n        }\n else         if (panei == 2) {\n          float barw=30f * s;\n          float barspace=40f * s;\n          float barpad=10f * s;\n          int bars=(int)(maxx - minx / barspace) + 1;\n          int barmax=(int)((maxy - miny) / barspace);\n          for (int i=0; i < bars; i++) {\n            int index=i % renderTimes.getWindowSize();\n            float val=renderTimes.get(index);\n            float scale=Mathf.clamp(!renderTimes.hasEnoughData() ? Mathf.randomSeed(i) : (val / renderTimes.mean() - 0.5f));\n            Color dst=scale > 0.8f ? colorRed : color;\n            Draw.color(dst);\n            int height=Math.max((int)(scale * barmax),1);\n            float cx=maxx - barw / 2f - barpad - i * barspace;\n            for (int j=0; j < barmax; j++) {\n              if (j >= height) {\n                Draw.color(color,Color.black,0.7f);\n              }\n else {\n                Draw.color(dst);\n              }\n              Fill.square(cx,miny + j * barspace + barw / 2f + barpad,barw / 2f);\n            }\n          }\n          Draw.color(color);\n        }\n else         if (panei == 3) {\n          Draw.flush();\n          float vx=floats.get(6), vy=floats.get(7), vw=(maxx - vx), vh=(maxy - vy), cx=vx + vw / 2f, cy=vy + vh / 2f;\n          float vpad=30 * s;\n          float vcont=Math.min(vw,vh);\n          float vsize=vcont - vpad * 2;\n          int rx=(int)(vx + vw / 2f - vsize / 2f), ry=(int)(vy + vh / 2f - vsize / 2f), rw=(int)vsize, rh=(int)vsize;\n          float vrad=vsize / 2f + vpad;\n          if (!graphics.isPortrait()) {\n            String text=\"<<ready>>\";\n            layout.setText(font,text);\n            if (layout.width * 1.5f < vw) {\n              Lines.circle(cx,cy,vsize / 2f);\n              if (rw > 0 && rh > 0) {\n                Gl.viewport(viewportX + rx,viewportY + ry,rw,rh);\n                cam.position.set(2,0,2);\n                cam.resize(rw,rh);\n                cam.lookAt(0,0,0);\n                cam.fov=42f;\n                cam.update();\n                Shaders.mesh.bind();\n                Shaders.mesh.setUniformMatrix4(\"u_proj\",cam.combined.val);\n                mesh.render(Shaders.mesh,Gl.lines);\n                Gl.viewport(viewportX,viewportY,viewportWidth,viewportHeight);\n              }\n              int points=4;\n              for (int i=0; i < points; i++) {\n                float ang=i * 360f / points + 45;\n                Fill.poly(cx + Angles.trnsx(ang,vrad),cy + Angles.trnsy(ang,vrad),3,20 * s,ang);\n              }\n              Draw.color(Color.black);\n              Fill.rect(cx,cy,layout.width + 14f * s,layout.height + 14f * s);\n              font.setColor(color);\n              font.draw(text,cx - layout.width / 2f,cy + layout.height / 2f);\n              Draw.color(color);\n              Lines.square(cx,cy,vcont / 2f);\n              Lines.line(vx,vy,vx,vy + vh);\n              float pspace=70f * s;\n              int pcount=(int)(vh / pspace / 2) + 2;\n              float pw=(vw - vcont) / 2f;\n              float slope=pw / 2f;\n              for (              int i : Mathf.signs) {\n                float px=cx + i * (vcont / 2f + pw / 2f);\n                float xleft=px - pw / 2f, xright=px + pw / 2f;\n                for (int j=-2; j < pcount * 2; j++) {\n                  float py=vy + j * pspace * 2, ybot=py - slope, ytop=py + slope;\n                  Fill.quad(xleft,ybot,xleft,ybot + pspace,xright,ytop + pspace,xright,ytop);\n                }\n              }\n            }\n else {\n              Lines.line(vx,vy,vx + vw,vy + vh);\n              Lines.line(vx,vy + vh,vx + vw,vy);\n            }\n          }\n          float trispace=70f * s, tpad=5f * s;\n          int tris=(int)(vh / trispace) + 1;\n          for (int tx=0; tx < tris; tx++) {\n            for (int ty=0; ty < tris; ty++) {\n              float trix=vx - trispace / 2f - trispace * tx - tpad, triy=vy + vh - trispace / 2f - trispace * ty - tpad;\n              Draw.color(Mathf.randomSeed(Pack.longInt(tx + 91,ty + 55)) < 0.5 * (preview ? 1f : 1f - progress) ? colorRed : color);\n              Fill.square(trix,triy,trispace / 2.5f,0);\n              Draw.color(Color.black);\n              Fill.square(trix,triy,trispace / 2.5f / Mathf.sqrt2,0);\n            }\n          }\n          Draw.color(color);\n        }\n        layout.free();\n        Draw.endStencil();\n        Lines.polyline(floats,true);\n        panei++;\n      }\n    }\n  }\n  Draw.flush();\n  Gl.viewport(0,0,graphics.getWidth(),graphics.getHeight());\n  Draw.proj(0,0,graphics.getWidth(),graphics.getHeight());\n  w=graphics.getWidth();\n  h=graphics.getHeight();\n  float bspace=s * 100f;\n  float bsize=s * 80f;\n  int bars=(int)(w / bspace / 2) + 1;\n  float pscale=1f / bars;\n  float barScale=1.5f;\n  Draw.color(Color.black);\n  Fill.rect(w / 2,h / 2,w,bsize * barScale);\n  Lines.stroke(stroke);\n  Draw.color(color);\n  Lines.rect(0,h / 2 - bsize * barScale / 2f,w,bsize * barScale,10,0);\n  for (int i=1; i < bars; i++) {\n    float cx=i * bspace;\n    float fract=1f - (i - 1) / (float)(bars - 1);\n    float alpha=progress >= fract ? 1f : Mathf.clamp((pscale - (fract - progress)) / pscale);\n    Draw.color(Color.black,color,alpha);\n    for (    int dir : Mathf.signs) {\n      float width=bsize / 1.7f;\n      float skew=bsize / 2f;\n      float v=w / 2 + cx * dir - width / 2f;\n      Fill.rects(v + dir * skew,h / 2f - bsize / 2f + bsize / 2f,width,bsize / 2f,-dir * skew);\n      Fill.rects(v,h / 2f - bsize / 2f,width,bsize / 2f,dir * skew);\n    }\n  }\n  float fract=1f - (-1) / (float)(bars - 1);\n  float alpha=progress >= fract ? 1f : Mathf.clamp((pscale - (fract - progress)) / pscale);\n  Draw.color(Color.black,color,alpha);\n  Fill.square(w / 2f,h / 2f,bsize / 3f,45);\n  if (assets.isLoaded(\"tech\")) {\n    String name=assets.getCurrentLoading() != null ? assets.getCurrentLoading().fileName.toLowerCase() : \"system\";\n    String key=name.contains(\"script\") ? \"scripts\" : name.contains(\"content\") ? \"content\" : name.contains(\"mod\") ? \"mods\" : name.contains(\"msav\") || name.contains(\"maps\") ? \"map\" : name.contains(\"ogg\") || name.contains(\"mp3\") ? \"sound\" : name.contains(\"png\") ? \"image\" : \"system\";\n    Font font=assets.get(\"tech\");\n    font.setColor(Pal.accent);\n    Draw.color(Color.black);\n    font.draw(red + \"[[[[ \" + key+ \" ]]\\n\"+ orange+ \"<\"+ Version.modifier+ \"  \"+ (Version.build == 0 ? \"[init]\" : Version.buildString())+ \">\",w / 2f,h / 2f + 110 * s,Align.center);\n  }\n  Draw.flush();\n  fx.end();\n  fx.applyEffects();\n  fx.render();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 2722,
      "astHeight" : 27
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 438,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Lines.rect(0,h / 2 - bsize * barScale / 2f,w,bsize * barScale,10,0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 438,
    "startColumnNumber" : 70,
    "endLineNumber" : 438,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}