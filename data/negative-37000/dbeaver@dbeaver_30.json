{
  "id" : 30,
  "expression" : "fileInfo.getFile().getName().equalsIgnoreCase(nativeName)",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/driver/DriverClassLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fileInfo.getFile().getName().equalsIgnoreCase(nativeName)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 53,
      "startColumnNumber" : 62,
      "endLineNumber" : 53,
      "endColumnNumber" : 119
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 53,
        "startColumnNumber" : 32,
        "endLineNumber" : 53,
        "endColumnNumber" : 119
      },
      "nodeContext" : "fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 53,
        "startColumnNumber" : 28,
        "endLineNumber" : 55,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n  return fileInfo.getFile().getAbsolutePath();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 52,
        "startColumnNumber" : 85,
        "endLineNumber" : 56,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n    return fileInfo.getFile().getAbsolutePath();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 318,
        "startLineNumber" : 52,
        "startColumnNumber" : 24,
        "endLineNumber" : 56,
        "endColumnNumber" : 25
      },
      "nodeContext" : "for (DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n  if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n    return fileInfo.getFile().getAbsolutePath();\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 51,
        "startColumnNumber" : 59,
        "endLineNumber" : 57,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  for (  DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n    if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n      return fileInfo.getFile().getAbsolutePath();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 405,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 57,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!CommonUtils.isEmpty(cachedFiles)) {\n  for (  DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n    if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n      return fileInfo.getFile().getAbsolutePath();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 601,
        "startLineNumber" : 48,
        "startColumnNumber" : 39,
        "endLineNumber" : 58,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n  if (!CommonUtils.isEmpty(cachedFiles)) {\n    for (    DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n      if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n        return fileInfo.getFile().getAbsolutePath();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 58,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (localFile == null) {\n  List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n  if (!CommonUtils.isEmpty(cachedFiles)) {\n    for (    DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n      if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n        return fileInfo.getFile().getAbsolutePath();\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 46,
        "startColumnNumber" : 110,
        "endLineNumber" : 67,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  File localFile=driverFile.getLocalFile();\n  if (localFile == null) {\n    List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n    if (!CommonUtils.isEmpty(cachedFiles)) {\n      for (      DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n        if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n          return fileInfo.getFile().getAbsolutePath();\n        }\n      }\n    }\n  }\n  if (localFile != null && localFile.exists()) {\n    if (localFile.isDirectory()) {\n      localFile=new File(localFile,nativeName);\n    }\n    if (localFile.getName().equalsIgnoreCase(nativeName)) {\n      return localFile.getAbsolutePath();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (driverFile.getType() == DBPDriverLibrary.FileType.lib && driverFile.matchesCurrentPlatform()) {\n  File localFile=driverFile.getLocalFile();\n  if (localFile == null) {\n    List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n    if (!CommonUtils.isEmpty(cachedFiles)) {\n      for (      DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n        if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n          return fileInfo.getFile().getAbsolutePath();\n        }\n      }\n    }\n  }\n  if (localFile != null && localFile.exists()) {\n    if (localFile.isDirectory()) {\n      localFile=new File(localFile,nativeName);\n    }\n    if (localFile.getName().equalsIgnoreCase(nativeName)) {\n      return localFile.getAbsolutePath();\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 114,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1219,
        "startLineNumber" : 45,
        "startColumnNumber" : 72,
        "endLineNumber" : 68,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (driverFile.getType() == DBPDriverLibrary.FileType.lib && driverFile.matchesCurrentPlatform()) {\n    File localFile=driverFile.getLocalFile();\n    if (localFile == null) {\n      List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n      if (!CommonUtils.isEmpty(cachedFiles)) {\n        for (        DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n          if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n            return fileInfo.getFile().getAbsolutePath();\n          }\n        }\n      }\n    }\n    if (localFile != null && localFile.exists()) {\n      if (localFile.isDirectory()) {\n        localFile=new File(localFile,nativeName);\n      }\n      if (localFile.getName().equalsIgnoreCase(nativeName)) {\n        return localFile.getAbsolutePath();\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1283,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (DBPDriverLibrary driverFile : driver.getDriverLibraries()) {\n  if (driverFile.getType() == DBPDriverLibrary.FileType.lib && driverFile.matchesCurrentPlatform()) {\n    File localFile=driverFile.getLocalFile();\n    if (localFile == null) {\n      List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n      if (!CommonUtils.isEmpty(cachedFiles)) {\n        for (        DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n          if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n            return fileInfo.getFile().getAbsolutePath();\n          }\n        }\n      }\n    }\n    if (localFile != null && localFile.exists()) {\n      if (localFile.isDirectory()) {\n        localFile=new File(localFile,nativeName);\n      }\n      if (localFile.getName().equalsIgnoreCase(nativeName)) {\n        return localFile.getAbsolutePath();\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1402,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String nativeName=System.mapLibraryName(libname);\n  for (  DBPDriverLibrary driverFile : driver.getDriverLibraries()) {\n    if (driverFile.getType() == DBPDriverLibrary.FileType.lib && driverFile.matchesCurrentPlatform()) {\n      File localFile=driverFile.getLocalFile();\n      if (localFile == null) {\n        List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n        if (!CommonUtils.isEmpty(cachedFiles)) {\n          for (          DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n            if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n              return fileInfo.getFile().getAbsolutePath();\n            }\n          }\n        }\n      }\n      if (localFile != null && localFile.exists()) {\n        if (localFile.isDirectory()) {\n          localFile=new File(localFile,nativeName);\n        }\n        if (localFile.getName().equalsIgnoreCase(nativeName)) {\n          return localFile.getAbsolutePath();\n        }\n      }\n    }\n  }\n  return super.findLibrary(libname);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1465,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected String findLibrary(String libname){\n  String nativeName=System.mapLibraryName(libname);\n  for (  DBPDriverLibrary driverFile : driver.getDriverLibraries()) {\n    if (driverFile.getType() == DBPDriverLibrary.FileType.lib && driverFile.matchesCurrentPlatform()) {\n      File localFile=driverFile.getLocalFile();\n      if (localFile == null) {\n        List<DriverDescriptor.DriverFileInfo> cachedFiles=driver.getCachedFiles(driverFile);\n        if (!CommonUtils.isEmpty(cachedFiles)) {\n          for (          DriverDescriptor.DriverFileInfo fileInfo : cachedFiles) {\n            if (fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)) {\n              return fileInfo.getFile().getAbsolutePath();\n            }\n          }\n        }\n      }\n      if (localFile != null && localFile.exists()) {\n        if (localFile.isDirectory()) {\n          localFile=new File(localFile,nativeName);\n        }\n        if (localFile.getName().equalsIgnoreCase(nativeName)) {\n          return localFile.getAbsolutePath();\n        }\n      }\n    }\n  }\n  return super.findLibrary(libname);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 53,
        "startColumnNumber" : 32,
        "endLineNumber" : 53,
        "endColumnNumber" : 119
      },
      "nodeContext" : "fileInfo.getFile() != null && fileInfo.getFile().getName().equalsIgnoreCase(nativeName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 53,
    "startColumnNumber" : 62,
    "endLineNumber" : 53,
    "endColumnNumber" : 119
  } ],
  "layoutRelationDataList" : [ ]
}