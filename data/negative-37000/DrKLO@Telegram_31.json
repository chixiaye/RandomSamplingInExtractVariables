{
  "id" : 31,
  "expression" : "(cY + iw / 2f)",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Components/PullForegroundDrawable.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(cY + iw / 2f)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 343,
      "startColumnNumber" : 130,
      "endLineNumber" : 343,
      "endColumnNumber" : 144
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 343,
        "startColumnNumber" : 124,
        "endLineNumber" : 343,
        "endColumnNumber" : 144
      },
      "nodeContext" : "(int)(cY + iw / 2f)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 343,
        "startColumnNumber" : 12,
        "endLineNumber" : 343,
        "endColumnNumber" : 145
      },
      "nodeContext" : "Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 37,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 343,
        "startColumnNumber" : 12,
        "endLineNumber" : 343,
        "endColumnNumber" : 146
      },
      "nodeContext" : "Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 319,
        "startColumnNumber" : 50,
        "endLineNumber" : 347,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  canvas.save();\n  int iw=Theme.dialogs_archiveAvatarDrawable.getIntrinsicWidth();\n  int startCx=startPadding + radius;\n  int startCy=cell.getHeight() - smallMargin - radius;\n  float scaleStart=(float)AndroidUtilities.dp(24) / iw;\n  float scale=scaleStart + (1f - scaleStart) * outProgress + bounceP;\n  int x=(int)cX;\n  int y=(int)cY;\n  canvas.translate((startCx - cX) * (1f - outProgress),(startCy - cY) * (1f - outProgress));\n  canvas.scale(scale,scale,cX,cY);\n  Theme.dialogs_archiveAvatarDrawable.setProgress(0f);\n  if (!Theme.dialogs_archiveAvatarDrawableRecolored) {\n    Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();\n    Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow1.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n    Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow2.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n    Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();\n    Theme.dialogs_archiveAvatarDrawableRecolored=true;\n  }\n  Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f));\n  Theme.dialogs_archiveAvatarDrawable.draw(canvas);\n  canvas.restore();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1516,
        "startLineNumber" : 319,
        "startColumnNumber" : 8,
        "endLineNumber" : 347,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (changeAvatarColor && outProgress > 0) {\n  canvas.save();\n  int iw=Theme.dialogs_archiveAvatarDrawable.getIntrinsicWidth();\n  int startCx=startPadding + radius;\n  int startCy=cell.getHeight() - smallMargin - radius;\n  float scaleStart=(float)AndroidUtilities.dp(24) / iw;\n  float scale=scaleStart + (1f - scaleStart) * outProgress + bounceP;\n  int x=(int)cX;\n  int y=(int)cY;\n  canvas.translate((startCx - cX) * (1f - outProgress),(startCy - cY) * (1f - outProgress));\n  canvas.scale(scale,scale,cX,cY);\n  Theme.dialogs_archiveAvatarDrawable.setProgress(0f);\n  if (!Theme.dialogs_archiveAvatarDrawableRecolored) {\n    Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();\n    Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow1.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n    Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow2.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n    Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();\n    Theme.dialogs_archiveAvatarDrawableRecolored=true;\n  }\n  Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f));\n  Theme.dialogs_archiveAvatarDrawable.draw(canvas);\n  canvas.restore();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 209,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8317,
        "startLineNumber" : 163,
        "startColumnNumber" : 52,
        "endLineNumber" : 348,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!willDraw || isOut || cell == null || listView == null) {\n    return;\n  }\n  int startPadding=AndroidUtilities.dp(28);\n  int smallMargin=AndroidUtilities.dp(8);\n  int radius=AndroidUtilities.dp(9);\n  int diameter=AndroidUtilities.dp(18);\n  int overscroll=(int)getViewOffset();\n  int visibleHeight=(int)(cell.getHeight() * pullProgress);\n  float bounceP=bounceIn ? (0.07f * bounceProgress) - 0.05f : 0.02f * bounceProgress;\n  updateTextProgress(pullProgress);\n  float outProgressHalf=outProgress * 2f;\n  if (outProgressHalf > 1f) {\n    outProgressHalf=1f;\n  }\n  float cX=outCx;\n  float cY=outCy;\n  if (header) {\n    cY+=overscroll;\n  }\n  int smallCircleX=startPadding + radius;\n  int smallCircleY=cell.getMeasuredHeight() - smallMargin - radius;\n  if (header) {\n    smallCircleY+=overscroll;\n  }\n  float startPullProgress=visibleHeight > diameter + smallMargin * 2 ? 1f : (float)visibleHeight / (diameter + smallMargin * 2);\n  canvas.save();\n  if (header) {\n    canvas.clipRect(0,0,listView.getMeasuredWidth(),overscroll + 1);\n  }\n  if (outProgress == 0f) {\n    if (!(accentRevalProgress == 1f || accentRevalProgressOut == 1)) {\n      canvas.drawPaint(backgroundPaint);\n    }\n  }\n else {\n    float outBackgroundRadius=outRadius + (cell.getWidth() - outRadius) * (1f - outProgress) + (outRadius * bounceP);\n    if (!(accentRevalProgress == 1f || accentRevalProgressOut == 1)) {\n      canvas.drawCircle(cX,cY,outBackgroundRadius,backgroundPaint);\n    }\n    circleClipPath.reset();\n    rectF.set(cX - outBackgroundRadius,cY - outBackgroundRadius,cX + outBackgroundRadius,cY + outBackgroundRadius);\n    circleClipPath.addOval(rectF,Path.Direction.CW);\n    canvas.clipPath(circleClipPath);\n  }\n  if (animateToColorize) {\n    if (accentRevalProgressOut > accentRevalProgress) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgressOut,backgroundPaint);\n      canvas.restore();\n    }\n    if (accentRevalProgress > 0f) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgress,paintBackgroundAccent);\n      canvas.restore();\n    }\n  }\n else {\n    if (accentRevalProgress > accentRevalProgressOut) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgress,paintBackgroundAccent);\n      canvas.restore();\n    }\n    if (accentRevalProgressOut > 0f) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgressOut,backgroundPaint);\n      canvas.restore();\n    }\n  }\n  if (visibleHeight > diameter + smallMargin * 2) {\n    paintSecondary.setAlpha((int)((1f - outProgressHalf) * 0.4f * startPullProgress* 255));\n    if (header) {\n      rectF.set(startPadding,smallMargin,startPadding + diameter,smallMargin + overscroll + radius);\n    }\n else {\n      rectF.set(startPadding,cell.getHeight() - visibleHeight + smallMargin - overscroll,startPadding + diameter,cell.getHeight() - smallMargin);\n    }\n    canvas.drawRoundRect(rectF,radius,radius,paintSecondary);\n  }\n  if (header) {\n    canvas.restore();\n    return;\n  }\n  if (outProgress == 0f) {\n    paintWhite.setAlpha((int)(startPullProgress * 255));\n    canvas.drawCircle(smallCircleX,smallCircleY,radius,paintWhite);\n    int ih=arrowDrawable.getIntrinsicHeight();\n    int iw=arrowDrawable.getIntrinsicWidth();\n    arrowDrawable.setBounds(smallCircleX - (iw >> 1),smallCircleY - (ih >> 1),smallCircleX + (iw >> 1),smallCircleY + (ih >> 1));\n    float rotateProgress=1f - arrowRotateProgress;\n    if (rotateProgress < 0) {\n      rotateProgress=0f;\n    }\n    rotateProgress=1f - rotateProgress;\n    canvas.save();\n    canvas.rotate(180 * rotateProgress,smallCircleX,smallCircleY);\n    canvas.translate(0,AndroidUtilities.dpf2(1f) * 1f - rotateProgress);\n    arrowDrawable.setColor(animateToColorize ? paintBackgroundAccent.getColor() : Theme.getColor(backgroundColorKey));\n    arrowDrawable.draw(canvas);\n    canvas.restore();\n  }\n  if (pullProgress > 0f) {\n    textIn();\n  }\n  float textY=cell.getHeight() - ((diameter + smallMargin * 2) / 2f) + AndroidUtilities.dp(6);\n  tooltipTextPaint.setAlpha((int)(255 * textSwappingProgress * startPullProgress* textInProgress));\n  float textCx=cell.getWidth() / 2f - AndroidUtilities.dp(2);\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.save();\n    float scale=0.8f + 0.2f * textSwappingProgress;\n    canvas.scale(scale,scale,textCx,textY + AndroidUtilities.dp(16) * (1f - textSwappingProgress));\n  }\n  canvas.drawText(pullTooltip,textCx,textY + AndroidUtilities.dp(8) * (1f - textSwappingProgress),tooltipTextPaint);\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.restore();\n  }\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.save();\n    float scale=0.9f + 0.1f * (1f - textSwappingProgress);\n    canvas.scale(scale,scale,textCx,textY - AndroidUtilities.dp(8) * (textSwappingProgress));\n  }\n  tooltipTextPaint.setAlpha((int)(255 * (1f - textSwappingProgress) * startPullProgress* textInProgress));\n  canvas.drawText(releaseTooltip,textCx,textY - AndroidUtilities.dp(8) * (textSwappingProgress),tooltipTextPaint);\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.restore();\n  }\n  canvas.restore();\n  if (changeAvatarColor && outProgress > 0) {\n    canvas.save();\n    int iw=Theme.dialogs_archiveAvatarDrawable.getIntrinsicWidth();\n    int startCx=startPadding + radius;\n    int startCy=cell.getHeight() - smallMargin - radius;\n    float scaleStart=(float)AndroidUtilities.dp(24) / iw;\n    float scale=scaleStart + (1f - scaleStart) * outProgress + bounceP;\n    int x=(int)cX;\n    int y=(int)cY;\n    canvas.translate((startCx - cX) * (1f - outProgress),(startCy - cY) * (1f - outProgress));\n    canvas.scale(scale,scale,cX,cY);\n    Theme.dialogs_archiveAvatarDrawable.setProgress(0f);\n    if (!Theme.dialogs_archiveAvatarDrawableRecolored) {\n      Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();\n      Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow1.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n      Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow2.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n      Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();\n      Theme.dialogs_archiveAvatarDrawableRecolored=true;\n    }\n    Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f));\n    Theme.dialogs_archiveAvatarDrawable.draw(canvas);\n    canvas.restore();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1098,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8365,
        "startLineNumber" : 163,
        "startColumnNumber" : 4,
        "endLineNumber" : 348,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void draw(Canvas canvas,boolean header){\n  if (!willDraw || isOut || cell == null || listView == null) {\n    return;\n  }\n  int startPadding=AndroidUtilities.dp(28);\n  int smallMargin=AndroidUtilities.dp(8);\n  int radius=AndroidUtilities.dp(9);\n  int diameter=AndroidUtilities.dp(18);\n  int overscroll=(int)getViewOffset();\n  int visibleHeight=(int)(cell.getHeight() * pullProgress);\n  float bounceP=bounceIn ? (0.07f * bounceProgress) - 0.05f : 0.02f * bounceProgress;\n  updateTextProgress(pullProgress);\n  float outProgressHalf=outProgress * 2f;\n  if (outProgressHalf > 1f) {\n    outProgressHalf=1f;\n  }\n  float cX=outCx;\n  float cY=outCy;\n  if (header) {\n    cY+=overscroll;\n  }\n  int smallCircleX=startPadding + radius;\n  int smallCircleY=cell.getMeasuredHeight() - smallMargin - radius;\n  if (header) {\n    smallCircleY+=overscroll;\n  }\n  float startPullProgress=visibleHeight > diameter + smallMargin * 2 ? 1f : (float)visibleHeight / (diameter + smallMargin * 2);\n  canvas.save();\n  if (header) {\n    canvas.clipRect(0,0,listView.getMeasuredWidth(),overscroll + 1);\n  }\n  if (outProgress == 0f) {\n    if (!(accentRevalProgress == 1f || accentRevalProgressOut == 1)) {\n      canvas.drawPaint(backgroundPaint);\n    }\n  }\n else {\n    float outBackgroundRadius=outRadius + (cell.getWidth() - outRadius) * (1f - outProgress) + (outRadius * bounceP);\n    if (!(accentRevalProgress == 1f || accentRevalProgressOut == 1)) {\n      canvas.drawCircle(cX,cY,outBackgroundRadius,backgroundPaint);\n    }\n    circleClipPath.reset();\n    rectF.set(cX - outBackgroundRadius,cY - outBackgroundRadius,cX + outBackgroundRadius,cY + outBackgroundRadius);\n    circleClipPath.addOval(rectF,Path.Direction.CW);\n    canvas.clipPath(circleClipPath);\n  }\n  if (animateToColorize) {\n    if (accentRevalProgressOut > accentRevalProgress) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgressOut,backgroundPaint);\n      canvas.restore();\n    }\n    if (accentRevalProgress > 0f) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgress,paintBackgroundAccent);\n      canvas.restore();\n    }\n  }\n else {\n    if (accentRevalProgress > accentRevalProgressOut) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgress,paintBackgroundAccent);\n      canvas.restore();\n    }\n    if (accentRevalProgressOut > 0f) {\n      canvas.save();\n      canvas.translate((cX - smallCircleX) * (outProgress),(cY - smallCircleY) * (outProgress));\n      canvas.drawCircle(smallCircleX,smallCircleY,cell.getWidth() * accentRevalProgressOut,backgroundPaint);\n      canvas.restore();\n    }\n  }\n  if (visibleHeight > diameter + smallMargin * 2) {\n    paintSecondary.setAlpha((int)((1f - outProgressHalf) * 0.4f * startPullProgress* 255));\n    if (header) {\n      rectF.set(startPadding,smallMargin,startPadding + diameter,smallMargin + overscroll + radius);\n    }\n else {\n      rectF.set(startPadding,cell.getHeight() - visibleHeight + smallMargin - overscroll,startPadding + diameter,cell.getHeight() - smallMargin);\n    }\n    canvas.drawRoundRect(rectF,radius,radius,paintSecondary);\n  }\n  if (header) {\n    canvas.restore();\n    return;\n  }\n  if (outProgress == 0f) {\n    paintWhite.setAlpha((int)(startPullProgress * 255));\n    canvas.drawCircle(smallCircleX,smallCircleY,radius,paintWhite);\n    int ih=arrowDrawable.getIntrinsicHeight();\n    int iw=arrowDrawable.getIntrinsicWidth();\n    arrowDrawable.setBounds(smallCircleX - (iw >> 1),smallCircleY - (ih >> 1),smallCircleX + (iw >> 1),smallCircleY + (ih >> 1));\n    float rotateProgress=1f - arrowRotateProgress;\n    if (rotateProgress < 0) {\n      rotateProgress=0f;\n    }\n    rotateProgress=1f - rotateProgress;\n    canvas.save();\n    canvas.rotate(180 * rotateProgress,smallCircleX,smallCircleY);\n    canvas.translate(0,AndroidUtilities.dpf2(1f) * 1f - rotateProgress);\n    arrowDrawable.setColor(animateToColorize ? paintBackgroundAccent.getColor() : Theme.getColor(backgroundColorKey));\n    arrowDrawable.draw(canvas);\n    canvas.restore();\n  }\n  if (pullProgress > 0f) {\n    textIn();\n  }\n  float textY=cell.getHeight() - ((diameter + smallMargin * 2) / 2f) + AndroidUtilities.dp(6);\n  tooltipTextPaint.setAlpha((int)(255 * textSwappingProgress * startPullProgress* textInProgress));\n  float textCx=cell.getWidth() / 2f - AndroidUtilities.dp(2);\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.save();\n    float scale=0.8f + 0.2f * textSwappingProgress;\n    canvas.scale(scale,scale,textCx,textY + AndroidUtilities.dp(16) * (1f - textSwappingProgress));\n  }\n  canvas.drawText(pullTooltip,textCx,textY + AndroidUtilities.dp(8) * (1f - textSwappingProgress),tooltipTextPaint);\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.restore();\n  }\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.save();\n    float scale=0.9f + 0.1f * (1f - textSwappingProgress);\n    canvas.scale(scale,scale,textCx,textY - AndroidUtilities.dp(8) * (textSwappingProgress));\n  }\n  tooltipTextPaint.setAlpha((int)(255 * (1f - textSwappingProgress) * startPullProgress* textInProgress));\n  canvas.drawText(releaseTooltip,textCx,textY - AndroidUtilities.dp(8) * (textSwappingProgress),tooltipTextPaint);\n  if (textSwappingProgress > 0 && textSwappingProgress < 1f) {\n    canvas.restore();\n  }\n  canvas.restore();\n  if (changeAvatarColor && outProgress > 0) {\n    canvas.save();\n    int iw=Theme.dialogs_archiveAvatarDrawable.getIntrinsicWidth();\n    int startCx=startPadding + radius;\n    int startCy=cell.getHeight() - smallMargin - radius;\n    float scaleStart=(float)AndroidUtilities.dp(24) / iw;\n    float scale=scaleStart + (1f - scaleStart) * outProgress + bounceP;\n    int x=(int)cX;\n    int y=(int)cY;\n    canvas.translate((startCx - cX) * (1f - outProgress),(startCy - cY) * (1f - outProgress));\n    canvas.scale(scale,scale,cX,cY);\n    Theme.dialogs_archiveAvatarDrawable.setProgress(0f);\n    if (!Theme.dialogs_archiveAvatarDrawableRecolored) {\n      Theme.dialogs_archiveAvatarDrawable.beginApplyLayerColors();\n      Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow1.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n      Theme.dialogs_archiveAvatarDrawable.setLayerColor(\"Arrow2.**\",Theme.getNonAnimatedColor(avatarBackgroundColorKey));\n      Theme.dialogs_archiveAvatarDrawable.commitApplyLayerColors();\n      Theme.dialogs_archiveAvatarDrawableRecolored=true;\n    }\n    Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f));\n    Theme.dialogs_archiveAvatarDrawable.draw(canvas);\n    canvas.restore();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1109,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 343,
        "startColumnNumber" : 12,
        "endLineNumber" : 343,
        "endColumnNumber" : 146
      },
      "nodeContext" : "Theme.dialogs_archiveAvatarDrawable.setBounds((int)(cX - iw / 2f),(int)(cY - iw / 2f),(int)(cX + iw / 2f),(int)(cY + iw / 2f));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 38,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 343,
    "startColumnNumber" : 130,
    "endLineNumber" : 343,
    "endColumnNumber" : 144
  } ],
  "layoutRelationDataList" : [ ]
}