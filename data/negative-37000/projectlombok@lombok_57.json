{
  "id" : 57,
  "expression" : "methodDecl",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleDelegate.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "methodDecl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 112,
      "startColumnNumber" : 8,
      "endLineNumber" : 112,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 25
      },
      "nodeContext" : "methodDecl.params",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 35
      },
      "nodeContext" : "methodDecl.params.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 112,
        "startColumnNumber" : 7,
        "endLineNumber" : 112,
        "endColumnNumber" : 35
      },
      "nodeContext" : "!methodDecl.params.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 112,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!methodDecl.params.isEmpty()) {\n  annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 106,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 106,
        "startColumnNumber" : 9,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (annotationNode.up().getKind() == Kind.METHOD) {\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n else {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (annotationNode.up().getKind() == Kind.FIELD) {\n  delegateReceiver=DelegateReceiver.FIELD;\n  delegateType=annotationNode.up().get().type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=annotationNode.up().get().type;\n}\n else if (annotationNode.up().getKind() == Kind.METHOD) {\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n else {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3919,
        "startLineNumber" : 94,
        "startColumnNumber" : 113,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,Delegate.class);\n  Type delegateType;\n  Name delegateName=annotationNode.toName(annotationNode.up().getName());\n  DelegateReceiver delegateReceiver;\n  JavacResolution reso=new JavacResolution(annotationNode.getContext());\n  if (annotationNode.up().getKind() == Kind.FIELD) {\n    delegateReceiver=DelegateReceiver.FIELD;\n    delegateType=annotationNode.up().get().type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=annotationNode.up().get().type;\n  }\n else   if (annotationNode.up().getKind() == Kind.METHOD) {\n    if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n    if (!methodDecl.params.isEmpty()) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    delegateReceiver=DelegateReceiver.METHOD;\n    delegateType=methodDecl.restype.type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=methodDecl.restype.type;\n  }\n else {\n    return;\n  }\n  List<Object> delegateTypes=annotation.getActualExpressions(\"types\");\n  List<Object> excludeTypes=annotation.getActualExpressions(\"excludes\");\n  List<Type> toDelegate=new ArrayList<Type>();\n  List<Type> toExclude=new ArrayList<Type>();\n  if (delegateTypes.isEmpty()) {\n    if (delegateType != null)     toDelegate.add(delegateType);\n  }\n else {\n    for (    Object dt : delegateTypes) {\n      if (dt instanceof JCFieldAccess && ((JCFieldAccess)dt).name.toString().equals(\"class\")) {\n        Type type=((JCFieldAccess)dt).selected.type;\n        if (type == null)         reso.resolveClassMember(annotationNode);\n        type=((JCFieldAccess)dt).selected.type;\n        if (type != null)         toDelegate.add(type);\n      }\n    }\n  }\n  for (  Object et : excludeTypes) {\n    if (et instanceof JCFieldAccess && ((JCFieldAccess)et).name.toString().equals(\"class\")) {\n      Type type=((JCFieldAccess)et).selected.type;\n      if (type == null)       reso.resolveClassMember(annotationNode);\n      type=((JCFieldAccess)et).selected.type;\n      if (type != null)       toExclude.add(type);\n    }\n  }\n  List<MethodSig> signaturesToDelegate=new ArrayList<MethodSig>();\n  List<MethodSig> signaturesToExclude=new ArrayList<MethodSig>();\n  Set<String> banList=new HashSet<String>();\n  banList.addAll(METHODS_IN_OBJECT);\n  for (  Type t : toExclude) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToExclude,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToExclude) {\n    banList.add(printSig(sig.type,sig.name,annotationNode.getTypesUtil()));\n  }\n  for (  Type t : toDelegate) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToDelegate,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToDelegate)   generateAndAdd(sig,annotationNode,delegateName,delegateReceiver);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4031,
        "startLineNumber" : 94,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<Delegate> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,Delegate.class);\n  Type delegateType;\n  Name delegateName=annotationNode.toName(annotationNode.up().getName());\n  DelegateReceiver delegateReceiver;\n  JavacResolution reso=new JavacResolution(annotationNode.getContext());\n  if (annotationNode.up().getKind() == Kind.FIELD) {\n    delegateReceiver=DelegateReceiver.FIELD;\n    delegateType=annotationNode.up().get().type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=annotationNode.up().get().type;\n  }\n else   if (annotationNode.up().getKind() == Kind.METHOD) {\n    if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n    if (!methodDecl.params.isEmpty()) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    delegateReceiver=DelegateReceiver.METHOD;\n    delegateType=methodDecl.restype.type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=methodDecl.restype.type;\n  }\n else {\n    return;\n  }\n  List<Object> delegateTypes=annotation.getActualExpressions(\"types\");\n  List<Object> excludeTypes=annotation.getActualExpressions(\"excludes\");\n  List<Type> toDelegate=new ArrayList<Type>();\n  List<Type> toExclude=new ArrayList<Type>();\n  if (delegateTypes.isEmpty()) {\n    if (delegateType != null)     toDelegate.add(delegateType);\n  }\n else {\n    for (    Object dt : delegateTypes) {\n      if (dt instanceof JCFieldAccess && ((JCFieldAccess)dt).name.toString().equals(\"class\")) {\n        Type type=((JCFieldAccess)dt).selected.type;\n        if (type == null)         reso.resolveClassMember(annotationNode);\n        type=((JCFieldAccess)dt).selected.type;\n        if (type != null)         toDelegate.add(type);\n      }\n    }\n  }\n  for (  Object et : excludeTypes) {\n    if (et instanceof JCFieldAccess && ((JCFieldAccess)et).name.toString().equals(\"class\")) {\n      Type type=((JCFieldAccess)et).selected.type;\n      if (type == null)       reso.resolveClassMember(annotationNode);\n      type=((JCFieldAccess)et).selected.type;\n      if (type != null)       toExclude.add(type);\n    }\n  }\n  List<MethodSig> signaturesToDelegate=new ArrayList<MethodSig>();\n  List<MethodSig> signaturesToExclude=new ArrayList<MethodSig>();\n  Set<String> banList=new HashSet<String>();\n  banList.addAll(METHODS_IN_OBJECT);\n  for (  Type t : toExclude) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToExclude,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToExclude) {\n    banList.add(printSig(sig.type,sig.name,annotationNode.getTypesUtil()));\n  }\n  for (  Type t : toDelegate) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToDelegate,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToDelegate)   generateAndAdd(sig,annotationNode,delegateName,delegateReceiver);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 567,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 112,
        "startColumnNumber" : 7,
        "endLineNumber" : 112,
        "endColumnNumber" : 35
      },
      "nodeContext" : "!methodDecl.params.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "methodDecl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 117,
      "startColumnNumber" : 18,
      "endLineNumber" : 117,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 117,
        "startColumnNumber" : 18,
        "endLineNumber" : 117,
        "endColumnNumber" : 36
      },
      "nodeContext" : "methodDecl.restype",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 117,
        "startColumnNumber" : 18,
        "endLineNumber" : 117,
        "endColumnNumber" : 41
      },
      "nodeContext" : "methodDecl.restype.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 41
      },
      "nodeContext" : "delegateType=methodDecl.restype.type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 42
      },
      "nodeContext" : "delegateType=methodDecl.restype.type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 106,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 106,
        "startColumnNumber" : 9,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (annotationNode.up().getKind() == Kind.METHOD) {\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n else {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (annotationNode.up().getKind() == Kind.FIELD) {\n  delegateReceiver=DelegateReceiver.FIELD;\n  delegateType=annotationNode.up().get().type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=annotationNode.up().get().type;\n}\n else if (annotationNode.up().getKind() == Kind.METHOD) {\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n else {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3919,
        "startLineNumber" : 94,
        "startColumnNumber" : 113,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,Delegate.class);\n  Type delegateType;\n  Name delegateName=annotationNode.toName(annotationNode.up().getName());\n  DelegateReceiver delegateReceiver;\n  JavacResolution reso=new JavacResolution(annotationNode.getContext());\n  if (annotationNode.up().getKind() == Kind.FIELD) {\n    delegateReceiver=DelegateReceiver.FIELD;\n    delegateType=annotationNode.up().get().type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=annotationNode.up().get().type;\n  }\n else   if (annotationNode.up().getKind() == Kind.METHOD) {\n    if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n    if (!methodDecl.params.isEmpty()) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    delegateReceiver=DelegateReceiver.METHOD;\n    delegateType=methodDecl.restype.type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=methodDecl.restype.type;\n  }\n else {\n    return;\n  }\n  List<Object> delegateTypes=annotation.getActualExpressions(\"types\");\n  List<Object> excludeTypes=annotation.getActualExpressions(\"excludes\");\n  List<Type> toDelegate=new ArrayList<Type>();\n  List<Type> toExclude=new ArrayList<Type>();\n  if (delegateTypes.isEmpty()) {\n    if (delegateType != null)     toDelegate.add(delegateType);\n  }\n else {\n    for (    Object dt : delegateTypes) {\n      if (dt instanceof JCFieldAccess && ((JCFieldAccess)dt).name.toString().equals(\"class\")) {\n        Type type=((JCFieldAccess)dt).selected.type;\n        if (type == null)         reso.resolveClassMember(annotationNode);\n        type=((JCFieldAccess)dt).selected.type;\n        if (type != null)         toDelegate.add(type);\n      }\n    }\n  }\n  for (  Object et : excludeTypes) {\n    if (et instanceof JCFieldAccess && ((JCFieldAccess)et).name.toString().equals(\"class\")) {\n      Type type=((JCFieldAccess)et).selected.type;\n      if (type == null)       reso.resolveClassMember(annotationNode);\n      type=((JCFieldAccess)et).selected.type;\n      if (type != null)       toExclude.add(type);\n    }\n  }\n  List<MethodSig> signaturesToDelegate=new ArrayList<MethodSig>();\n  List<MethodSig> signaturesToExclude=new ArrayList<MethodSig>();\n  Set<String> banList=new HashSet<String>();\n  banList.addAll(METHODS_IN_OBJECT);\n  for (  Type t : toExclude) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToExclude,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToExclude) {\n    banList.add(printSig(sig.type,sig.name,annotationNode.getTypesUtil()));\n  }\n  for (  Type t : toDelegate) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToDelegate,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToDelegate)   generateAndAdd(sig,annotationNode,delegateName,delegateReceiver);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4031,
        "startLineNumber" : 94,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<Delegate> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,Delegate.class);\n  Type delegateType;\n  Name delegateName=annotationNode.toName(annotationNode.up().getName());\n  DelegateReceiver delegateReceiver;\n  JavacResolution reso=new JavacResolution(annotationNode.getContext());\n  if (annotationNode.up().getKind() == Kind.FIELD) {\n    delegateReceiver=DelegateReceiver.FIELD;\n    delegateType=annotationNode.up().get().type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=annotationNode.up().get().type;\n  }\n else   if (annotationNode.up().getKind() == Kind.METHOD) {\n    if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n    if (!methodDecl.params.isEmpty()) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    delegateReceiver=DelegateReceiver.METHOD;\n    delegateType=methodDecl.restype.type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=methodDecl.restype.type;\n  }\n else {\n    return;\n  }\n  List<Object> delegateTypes=annotation.getActualExpressions(\"types\");\n  List<Object> excludeTypes=annotation.getActualExpressions(\"excludes\");\n  List<Type> toDelegate=new ArrayList<Type>();\n  List<Type> toExclude=new ArrayList<Type>();\n  if (delegateTypes.isEmpty()) {\n    if (delegateType != null)     toDelegate.add(delegateType);\n  }\n else {\n    for (    Object dt : delegateTypes) {\n      if (dt instanceof JCFieldAccess && ((JCFieldAccess)dt).name.toString().equals(\"class\")) {\n        Type type=((JCFieldAccess)dt).selected.type;\n        if (type == null)         reso.resolveClassMember(annotationNode);\n        type=((JCFieldAccess)dt).selected.type;\n        if (type != null)         toDelegate.add(type);\n      }\n    }\n  }\n  for (  Object et : excludeTypes) {\n    if (et instanceof JCFieldAccess && ((JCFieldAccess)et).name.toString().equals(\"class\")) {\n      Type type=((JCFieldAccess)et).selected.type;\n      if (type == null)       reso.resolveClassMember(annotationNode);\n      type=((JCFieldAccess)et).selected.type;\n      if (type != null)       toExclude.add(type);\n    }\n  }\n  List<MethodSig> signaturesToDelegate=new ArrayList<MethodSig>();\n  List<MethodSig> signaturesToExclude=new ArrayList<MethodSig>();\n  Set<String> banList=new HashSet<String>();\n  banList.addAll(METHODS_IN_OBJECT);\n  for (  Type t : toExclude) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToExclude,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToExclude) {\n    banList.add(printSig(sig.type,sig.name,annotationNode.getTypesUtil()));\n  }\n  for (  Type t : toDelegate) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToDelegate,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToDelegate)   generateAndAdd(sig,annotationNode,delegateName,delegateReceiver);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 567,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 117,
        "startColumnNumber" : 3,
        "endLineNumber" : 117,
        "endColumnNumber" : 42
      },
      "nodeContext" : "delegateType=methodDecl.restype.type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "methodDecl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 119,
      "startColumnNumber" : 18,
      "endLineNumber" : 119,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 119,
        "startColumnNumber" : 18,
        "endLineNumber" : 119,
        "endColumnNumber" : 36
      },
      "nodeContext" : "methodDecl.restype",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 119,
        "startColumnNumber" : 18,
        "endLineNumber" : 119,
        "endColumnNumber" : 41
      },
      "nodeContext" : "methodDecl.restype.type",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 119,
        "startColumnNumber" : 3,
        "endLineNumber" : 119,
        "endColumnNumber" : 41
      },
      "nodeContext" : "delegateType=methodDecl.restype.type",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 119,
        "startColumnNumber" : 3,
        "endLineNumber" : 119,
        "endColumnNumber" : 42
      },
      "nodeContext" : "delegateType=methodDecl.restype.type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 580,
        "startLineNumber" : 106,
        "startColumnNumber" : 59,
        "endLineNumber" : 120,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 106,
        "startColumnNumber" : 9,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (annotationNode.up().getKind() == Kind.METHOD) {\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n else {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 91,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1061,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 123,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (annotationNode.up().getKind() == Kind.FIELD) {\n  delegateReceiver=DelegateReceiver.FIELD;\n  delegateType=annotationNode.up().get().type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=annotationNode.up().get().type;\n}\n else if (annotationNode.up().getKind() == Kind.METHOD) {\n  if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n  if (!methodDecl.params.isEmpty()) {\n    annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n    return;\n  }\n  delegateReceiver=DelegateReceiver.METHOD;\n  delegateType=methodDecl.restype.type;\n  if (delegateType == null)   reso.resolveClassMember(annotationNode.up());\n  delegateType=methodDecl.restype.type;\n}\n else {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3919,
        "startLineNumber" : 94,
        "startColumnNumber" : 113,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  deleteAnnotationIfNeccessary(annotationNode,Delegate.class);\n  Type delegateType;\n  Name delegateName=annotationNode.toName(annotationNode.up().getName());\n  DelegateReceiver delegateReceiver;\n  JavacResolution reso=new JavacResolution(annotationNode.getContext());\n  if (annotationNode.up().getKind() == Kind.FIELD) {\n    delegateReceiver=DelegateReceiver.FIELD;\n    delegateType=annotationNode.up().get().type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=annotationNode.up().get().type;\n  }\n else   if (annotationNode.up().getKind() == Kind.METHOD) {\n    if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n    if (!methodDecl.params.isEmpty()) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    delegateReceiver=DelegateReceiver.METHOD;\n    delegateType=methodDecl.restype.type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=methodDecl.restype.type;\n  }\n else {\n    return;\n  }\n  List<Object> delegateTypes=annotation.getActualExpressions(\"types\");\n  List<Object> excludeTypes=annotation.getActualExpressions(\"excludes\");\n  List<Type> toDelegate=new ArrayList<Type>();\n  List<Type> toExclude=new ArrayList<Type>();\n  if (delegateTypes.isEmpty()) {\n    if (delegateType != null)     toDelegate.add(delegateType);\n  }\n else {\n    for (    Object dt : delegateTypes) {\n      if (dt instanceof JCFieldAccess && ((JCFieldAccess)dt).name.toString().equals(\"class\")) {\n        Type type=((JCFieldAccess)dt).selected.type;\n        if (type == null)         reso.resolveClassMember(annotationNode);\n        type=((JCFieldAccess)dt).selected.type;\n        if (type != null)         toDelegate.add(type);\n      }\n    }\n  }\n  for (  Object et : excludeTypes) {\n    if (et instanceof JCFieldAccess && ((JCFieldAccess)et).name.toString().equals(\"class\")) {\n      Type type=((JCFieldAccess)et).selected.type;\n      if (type == null)       reso.resolveClassMember(annotationNode);\n      type=((JCFieldAccess)et).selected.type;\n      if (type != null)       toExclude.add(type);\n    }\n  }\n  List<MethodSig> signaturesToDelegate=new ArrayList<MethodSig>();\n  List<MethodSig> signaturesToExclude=new ArrayList<MethodSig>();\n  Set<String> banList=new HashSet<String>();\n  banList.addAll(METHODS_IN_OBJECT);\n  for (  Type t : toExclude) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToExclude,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToExclude) {\n    banList.add(printSig(sig.type,sig.name,annotationNode.getTypesUtil()));\n  }\n  for (  Type t : toDelegate) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToDelegate,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToDelegate)   generateAndAdd(sig,annotationNode,delegateName,delegateReceiver);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4031,
        "startLineNumber" : 94,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void handle(AnnotationValues<Delegate> annotation,JCAnnotation ast,JavacNode annotationNode){\n  deleteAnnotationIfNeccessary(annotationNode,Delegate.class);\n  Type delegateType;\n  Name delegateName=annotationNode.toName(annotationNode.up().getName());\n  DelegateReceiver delegateReceiver;\n  JavacResolution reso=new JavacResolution(annotationNode.getContext());\n  if (annotationNode.up().getKind() == Kind.FIELD) {\n    delegateReceiver=DelegateReceiver.FIELD;\n    delegateType=annotationNode.up().get().type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=annotationNode.up().get().type;\n  }\n else   if (annotationNode.up().getKind() == Kind.METHOD) {\n    if (!(annotationNode.up().get() instanceof JCMethodDecl)) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    JCMethodDecl methodDecl=(JCMethodDecl)annotationNode.up().get();\n    if (!methodDecl.params.isEmpty()) {\n      annotationNode.addError(\"@Delegate is legal only on no-argument methods.\");\n      return;\n    }\n    delegateReceiver=DelegateReceiver.METHOD;\n    delegateType=methodDecl.restype.type;\n    if (delegateType == null)     reso.resolveClassMember(annotationNode.up());\n    delegateType=methodDecl.restype.type;\n  }\n else {\n    return;\n  }\n  List<Object> delegateTypes=annotation.getActualExpressions(\"types\");\n  List<Object> excludeTypes=annotation.getActualExpressions(\"excludes\");\n  List<Type> toDelegate=new ArrayList<Type>();\n  List<Type> toExclude=new ArrayList<Type>();\n  if (delegateTypes.isEmpty()) {\n    if (delegateType != null)     toDelegate.add(delegateType);\n  }\n else {\n    for (    Object dt : delegateTypes) {\n      if (dt instanceof JCFieldAccess && ((JCFieldAccess)dt).name.toString().equals(\"class\")) {\n        Type type=((JCFieldAccess)dt).selected.type;\n        if (type == null)         reso.resolveClassMember(annotationNode);\n        type=((JCFieldAccess)dt).selected.type;\n        if (type != null)         toDelegate.add(type);\n      }\n    }\n  }\n  for (  Object et : excludeTypes) {\n    if (et instanceof JCFieldAccess && ((JCFieldAccess)et).name.toString().equals(\"class\")) {\n      Type type=((JCFieldAccess)et).selected.type;\n      if (type == null)       reso.resolveClassMember(annotationNode);\n      type=((JCFieldAccess)et).selected.type;\n      if (type != null)       toExclude.add(type);\n    }\n  }\n  List<MethodSig> signaturesToDelegate=new ArrayList<MethodSig>();\n  List<MethodSig> signaturesToExclude=new ArrayList<MethodSig>();\n  Set<String> banList=new HashSet<String>();\n  banList.addAll(METHODS_IN_OBJECT);\n  for (  Type t : toExclude) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToExclude,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToExclude) {\n    banList.add(printSig(sig.type,sig.name,annotationNode.getTypesUtil()));\n  }\n  for (  Type t : toDelegate) {\n    if (t instanceof ClassType) {\n      ClassType ct=(ClassType)t;\n      addMethodBindings(signaturesToDelegate,ct,annotationNode.getTypesUtil(),banList);\n    }\n else {\n      annotationNode.addError(\"@Delegate can only use concrete class types, not wildcards, arrays, type variables, or primitives.\");\n      return;\n    }\n  }\n  for (  MethodSig sig : signaturesToDelegate)   generateAndAdd(sig,annotationNode,delegateName,delegateReceiver);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 567,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 119,
        "startColumnNumber" : 3,
        "endLineNumber" : 119,
        "endColumnNumber" : 42
      },
      "nodeContext" : "delegateType=methodDecl.restype.type;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 112,
    "startColumnNumber" : 8,
    "endLineNumber" : 112,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 117,
    "startColumnNumber" : 18,
    "endLineNumber" : 117,
    "endColumnNumber" : 28
  }, {
    "charLength" : 10,
    "startLineNumber" : 119,
    "startColumnNumber" : 18,
    "endLineNumber" : 119,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}