{
  "id" : 123,
  "expression" : "!skipTripleQuote(quot)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/net/starlark/java/syntax/Lexer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!skipTripleQuote(quot)",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 380,
      "startColumnNumber" : 45,
      "endLineNumber" : 380,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 380,
        "startColumnNumber" : 28,
        "endLineNumber" : 380,
        "endColumnNumber" : 67
      },
      "nodeContext" : "inTriplequote && !skipTripleQuote(quot)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 380,
        "startColumnNumber" : 27,
        "endLineNumber" : 380,
        "endColumnNumber" : 68
      },
      "nodeContext" : "(inTriplequote && !skipTripleQuote(quot))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 380,
        "startColumnNumber" : 14,
        "endLineNumber" : 380,
        "endColumnNumber" : 68
      },
      "nodeContext" : "c != quot || (inTriplequote && !skipTripleQuote(quot))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 363,
        "startLineNumber" : 380,
        "startColumnNumber" : 10,
        "endLineNumber" : 388,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (c != quot || (inTriplequote && !skipTripleQuote(quot))) {\n  literal.append(c);\n}\n else {\n  setToken(TokenKind.STRING,literalStartPos,pos);\n  setValue(literal.toString());\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4138,
        "startLineNumber" : 260,
        "startColumnNumber" : 6,
        "endLineNumber" : 393,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (c) {\ncase '\\n':  if (inTriplequote) {\n    literal.append(c);\n    break;\n  }\n else {\n    error(\"unclosed string literal\",literalStartPos);\n    setToken(TokenKind.STRING,literalStartPos,pos);\n    setValue(literal.toString());\n    return;\n  }\ncase '\\\\':if (pos == buffer.length) {\n  error(\"unclosed string literal\",literalStartPos);\n  setToken(TokenKind.STRING,literalStartPos,pos);\n  setValue(literal.toString());\n  return;\n}\nif (isRaw) {\nliteral.append('\\\\');\nif (peek(0) == '\\r' && peek(1) == '\\n') {\n  literal.append(\"\\n\");\n  pos+=2;\n}\n else if (buffer[pos] == '\\r' || buffer[pos] == '\\n') {\n  literal.append(\"\\n\");\n  pos+=1;\n}\n else {\n  literal.append(buffer[pos]);\n  pos+=1;\n}\nbreak;\n}\nc=buffer[pos];\npos++;\nswitch (c) {\ncase '\\r':if (peek(0) == '\\n') {\npos+=1;\nbreak;\n}\n else {\nbreak;\n}\ncase '\\n':break;\ncase 'a':literal.append('\\u0007');\nbreak;\ncase 'b':literal.append('\\b');\nbreak;\ncase 'f':literal.append('\\f');\nbreak;\ncase 'n':literal.append('\\n');\nbreak;\ncase 'r':literal.append('\\r');\nbreak;\ncase 't':literal.append('\\t');\nbreak;\ncase 'v':literal.append('\\u000b');\nbreak;\ncase '\\\\':literal.append('\\\\');\nbreak;\ncase '\\'':literal.append('\\'');\nbreak;\ncase '\"':literal.append('\"');\nbreak;\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{\nint octal=c - '0';\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\n}\n}\n}\n}\nif (octal > 0xff) {\nerror(\"octal escape sequence out of range (maximum is \\\\377)\",pos - 1);\n}\nliteral.append((char)(octal & 0xff));\nbreak;\n}\ncase 'N':case 'u':case 'U':default:error(\"invalid escape sequence: \\\\\" + c + \". Use '\\\\\\\\' to insert '\\\\'.\",pos - 1);\nliteral.append('\\\\');\nliteral.append(c);\nbreak;\n}\nbreak;\ncase '\\'':case '\"':if (c != quot || (inTriplequote && !skipTripleQuote(quot))) {\nliteral.append(c);\n}\n else {\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\nreturn;\n}\nbreak;\ndefault:literal.append(c);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 434,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4193,
        "startLineNumber" : 257,
        "startColumnNumber" : 32,
        "endLineNumber" : 394,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  char c=buffer[pos];\n  pos++;\nswitch (c) {\ncase '\\n':    if (inTriplequote) {\n      literal.append(c);\n      break;\n    }\n else {\n      error(\"unclosed string literal\",literalStartPos);\n      setToken(TokenKind.STRING,literalStartPos,pos);\n      setValue(literal.toString());\n      return;\n    }\ncase '\\\\':  if (pos == buffer.length) {\n    error(\"unclosed string literal\",literalStartPos);\n    setToken(TokenKind.STRING,literalStartPos,pos);\n    setValue(literal.toString());\n    return;\n  }\nif (isRaw) {\n  literal.append('\\\\');\n  if (peek(0) == '\\r' && peek(1) == '\\n') {\n    literal.append(\"\\n\");\n    pos+=2;\n  }\n else   if (buffer[pos] == '\\r' || buffer[pos] == '\\n') {\n    literal.append(\"\\n\");\n    pos+=1;\n  }\n else {\n    literal.append(buffer[pos]);\n    pos+=1;\n  }\n  break;\n}\nc=buffer[pos];\npos++;\nswitch (c) {\ncase '\\r':if (peek(0) == '\\n') {\npos+=1;\nbreak;\n}\n else {\nbreak;\n}\ncase '\\n':break;\ncase 'a':literal.append('\\u0007');\nbreak;\ncase 'b':literal.append('\\b');\nbreak;\ncase 'f':literal.append('\\f');\nbreak;\ncase 'n':literal.append('\\n');\nbreak;\ncase 'r':literal.append('\\r');\nbreak;\ncase 't':literal.append('\\t');\nbreak;\ncase 'v':literal.append('\\u000b');\nbreak;\ncase '\\\\':literal.append('\\\\');\nbreak;\ncase '\\'':literal.append('\\'');\nbreak;\ncase '\"':literal.append('\"');\nbreak;\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{\nint octal=c - '0';\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\n}\n}\n}\n}\nif (octal > 0xff) {\nerror(\"octal escape sequence out of range (maximum is \\\\377)\",pos - 1);\n}\nliteral.append((char)(octal & 0xff));\nbreak;\n}\ncase 'N':case 'u':case 'U':default:error(\"invalid escape sequence: \\\\\" + c + \". Use '\\\\\\\\' to insert '\\\\'.\",pos - 1);\nliteral.append('\\\\');\nliteral.append(c);\nbreak;\n}\nbreak;\ncase '\\'':case '\"':if (c != quot || (inTriplequote && !skipTripleQuote(quot))) {\nliteral.append(c);\n}\n else {\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\nreturn;\n}\nbreak;\ndefault:literal.append(c);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 445,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4221,
        "startLineNumber" : 257,
        "startColumnNumber" : 4,
        "endLineNumber" : 394,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (pos < buffer.length) {\n  char c=buffer[pos];\n  pos++;\nswitch (c) {\ncase '\\n':    if (inTriplequote) {\n      literal.append(c);\n      break;\n    }\n else {\n      error(\"unclosed string literal\",literalStartPos);\n      setToken(TokenKind.STRING,literalStartPos,pos);\n      setValue(literal.toString());\n      return;\n    }\ncase '\\\\':  if (pos == buffer.length) {\n    error(\"unclosed string literal\",literalStartPos);\n    setToken(TokenKind.STRING,literalStartPos,pos);\n    setValue(literal.toString());\n    return;\n  }\nif (isRaw) {\n  literal.append('\\\\');\n  if (peek(0) == '\\r' && peek(1) == '\\n') {\n    literal.append(\"\\n\");\n    pos+=2;\n  }\n else   if (buffer[pos] == '\\r' || buffer[pos] == '\\n') {\n    literal.append(\"\\n\");\n    pos+=1;\n  }\n else {\n    literal.append(buffer[pos]);\n    pos+=1;\n  }\n  break;\n}\nc=buffer[pos];\npos++;\nswitch (c) {\ncase '\\r':if (peek(0) == '\\n') {\npos+=1;\nbreak;\n}\n else {\nbreak;\n}\ncase '\\n':break;\ncase 'a':literal.append('\\u0007');\nbreak;\ncase 'b':literal.append('\\b');\nbreak;\ncase 'f':literal.append('\\f');\nbreak;\ncase 'n':literal.append('\\n');\nbreak;\ncase 'r':literal.append('\\r');\nbreak;\ncase 't':literal.append('\\t');\nbreak;\ncase 'v':literal.append('\\u000b');\nbreak;\ncase '\\\\':literal.append('\\\\');\nbreak;\ncase '\\'':literal.append('\\'');\nbreak;\ncase '\"':literal.append('\"');\nbreak;\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{\nint octal=c - '0';\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\n}\n}\n}\n}\nif (octal > 0xff) {\nerror(\"octal escape sequence out of range (maximum is \\\\377)\",pos - 1);\n}\nliteral.append((char)(octal & 0xff));\nbreak;\n}\ncase 'N':case 'u':case 'U':default:error(\"invalid escape sequence: \\\\\" + c + \". Use '\\\\\\\\' to insert '\\\\'.\",pos - 1);\nliteral.append('\\\\');\nliteral.append(c);\nbreak;\n}\nbreak;\ncase '\\'':case '\"':if (c != quot || (inTriplequote && !skipTripleQuote(quot))) {\nliteral.append(c);\n}\n else {\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\nreturn;\n}\nbreak;\ndefault:literal.append(c);\nbreak;\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 451,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4598,
        "startLineNumber" : 252,
        "startColumnNumber" : 62,
        "endLineNumber" : 398,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int literalStartPos=isRaw ? pos - 2 : pos - 1;\n  boolean inTriplequote=skipTripleQuote(quot);\n  StringBuilder literal=new StringBuilder();\n  while (pos < buffer.length) {\n    char c=buffer[pos];\n    pos++;\nswitch (c) {\ncase '\\n':      if (inTriplequote) {\n        literal.append(c);\n        break;\n      }\n else {\n        error(\"unclosed string literal\",literalStartPos);\n        setToken(TokenKind.STRING,literalStartPos,pos);\n        setValue(literal.toString());\n        return;\n      }\ncase '\\\\':    if (pos == buffer.length) {\n      error(\"unclosed string literal\",literalStartPos);\n      setToken(TokenKind.STRING,literalStartPos,pos);\n      setValue(literal.toString());\n      return;\n    }\n  if (isRaw) {\n    literal.append('\\\\');\n    if (peek(0) == '\\r' && peek(1) == '\\n') {\n      literal.append(\"\\n\");\n      pos+=2;\n    }\n else     if (buffer[pos] == '\\r' || buffer[pos] == '\\n') {\n      literal.append(\"\\n\");\n      pos+=1;\n    }\n else {\n      literal.append(buffer[pos]);\n      pos+=1;\n    }\n    break;\n  }\nc=buffer[pos];\npos++;\nswitch (c) {\ncase '\\r':if (peek(0) == '\\n') {\npos+=1;\nbreak;\n}\n else {\nbreak;\n}\ncase '\\n':break;\ncase 'a':literal.append('\\u0007');\nbreak;\ncase 'b':literal.append('\\b');\nbreak;\ncase 'f':literal.append('\\f');\nbreak;\ncase 'n':literal.append('\\n');\nbreak;\ncase 'r':literal.append('\\r');\nbreak;\ncase 't':literal.append('\\t');\nbreak;\ncase 'v':literal.append('\\u000b');\nbreak;\ncase '\\\\':literal.append('\\\\');\nbreak;\ncase '\\'':literal.append('\\'');\nbreak;\ncase '\"':literal.append('\"');\nbreak;\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{\nint octal=c - '0';\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\n}\n}\n}\n}\nif (octal > 0xff) {\nerror(\"octal escape sequence out of range (maximum is \\\\377)\",pos - 1);\n}\nliteral.append((char)(octal & 0xff));\nbreak;\n}\ncase 'N':case 'u':case 'U':default:error(\"invalid escape sequence: \\\\\" + c + \". Use '\\\\\\\\' to insert '\\\\'.\",pos - 1);\nliteral.append('\\\\');\nliteral.append(c);\nbreak;\n}\nbreak;\ncase '\\'':case '\"':if (c != quot || (inTriplequote && !skipTripleQuote(quot))) {\nliteral.append(c);\n}\n else {\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\nreturn;\n}\nbreak;\ndefault:literal.append(c);\nbreak;\n}\n}\nerror(\"unclosed string literal\",literalStartPos);\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 498,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4877,
        "startLineNumber" : 246,
        "startColumnNumber" : 2,
        "endLineNumber" : 398,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Scans a string literal delimited by 'quot', containing escape sequences. <p>ON ENTRY: 'pos' is 1 + the index of the first delimiter ON EXIT: 'pos' is 1 + the index of the last delimiter.\n */\nprivate void escapedStringLiteral(char quot,boolean isRaw){\n  int literalStartPos=isRaw ? pos - 2 : pos - 1;\n  boolean inTriplequote=skipTripleQuote(quot);\n  StringBuilder literal=new StringBuilder();\n  while (pos < buffer.length) {\n    char c=buffer[pos];\n    pos++;\nswitch (c) {\ncase '\\n':      if (inTriplequote) {\n        literal.append(c);\n        break;\n      }\n else {\n        error(\"unclosed string literal\",literalStartPos);\n        setToken(TokenKind.STRING,literalStartPos,pos);\n        setValue(literal.toString());\n        return;\n      }\ncase '\\\\':    if (pos == buffer.length) {\n      error(\"unclosed string literal\",literalStartPos);\n      setToken(TokenKind.STRING,literalStartPos,pos);\n      setValue(literal.toString());\n      return;\n    }\n  if (isRaw) {\n    literal.append('\\\\');\n    if (peek(0) == '\\r' && peek(1) == '\\n') {\n      literal.append(\"\\n\");\n      pos+=2;\n    }\n else     if (buffer[pos] == '\\r' || buffer[pos] == '\\n') {\n      literal.append(\"\\n\");\n      pos+=1;\n    }\n else {\n      literal.append(buffer[pos]);\n      pos+=1;\n    }\n    break;\n  }\nc=buffer[pos];\npos++;\nswitch (c) {\ncase '\\r':if (peek(0) == '\\n') {\npos+=1;\nbreak;\n}\n else {\nbreak;\n}\ncase '\\n':break;\ncase 'a':literal.append('\\u0007');\nbreak;\ncase 'b':literal.append('\\b');\nbreak;\ncase 'f':literal.append('\\f');\nbreak;\ncase 'n':literal.append('\\n');\nbreak;\ncase 'r':literal.append('\\r');\nbreak;\ncase 't':literal.append('\\t');\nbreak;\ncase 'v':literal.append('\\u000b');\nbreak;\ncase '\\\\':literal.append('\\\\');\nbreak;\ncase '\\'':literal.append('\\'');\nbreak;\ncase '\"':literal.append('\"');\nbreak;\ncase '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':{\nint octal=c - '0';\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\nif (pos < buffer.length) {\nc=buffer[pos];\nif (c >= '0' && c <= '7') {\npos++;\noctal=(octal << 3) | (c - '0');\n}\n}\n}\n}\nif (octal > 0xff) {\nerror(\"octal escape sequence out of range (maximum is \\\\377)\",pos - 1);\n}\nliteral.append((char)(octal & 0xff));\nbreak;\n}\ncase 'N':case 'u':case 'U':default:error(\"invalid escape sequence: \\\\\" + c + \". Use '\\\\\\\\' to insert '\\\\'.\",pos - 1);\nliteral.append('\\\\');\nliteral.append(c);\nbreak;\n}\nbreak;\ncase '\\'':case '\"':if (c != quot || (inTriplequote && !skipTripleQuote(quot))) {\nliteral.append(c);\n}\n else {\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\nreturn;\n}\nbreak;\ndefault:literal.append(c);\nbreak;\n}\n}\nerror(\"unclosed string literal\",literalStartPos);\nsetToken(TokenKind.STRING,literalStartPos,pos);\nsetValue(literal.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 509,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 380,
        "startColumnNumber" : 14,
        "endLineNumber" : 380,
        "endColumnNumber" : 68
      },
      "nodeContext" : "c != quot || (inTriplequote && !skipTripleQuote(quot))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 380,
    "startColumnNumber" : 45,
    "endLineNumber" : 380,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}