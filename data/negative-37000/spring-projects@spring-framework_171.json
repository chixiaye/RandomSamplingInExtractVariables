{
  "id" : 171,
  "expression" : "calendar.get(Calendar.HOUR_OF_DAY)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "calendar.get(Calendar.HOUR_OF_DAY)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 178,
      "startColumnNumber" : 13,
      "endLineNumber" : 178,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 178,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 47
      },
      "nodeContext" : "hour=calendar.get(Calendar.HOUR_OF_DAY)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 178,
        "startColumnNumber" : 2,
        "endLineNumber" : 178,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int hour=calendar.get(Calendar.HOUR_OF_DAY);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1599,
        "startLineNumber" : 159,
        "startColumnNumber" : 49,
        "endLineNumber" : 207,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<Integer> resets=new ArrayList<>();\n  int second=calendar.get(Calendar.SECOND);\n  List<Integer> emptyList=Collections.emptyList();\n  int updateSecond=findNext(this.seconds,second,calendar,Calendar.SECOND,Calendar.MINUTE,emptyList);\n  if (second == updateSecond) {\n    resets.add(Calendar.SECOND);\n  }\n  int minute=calendar.get(Calendar.MINUTE);\n  int updateMinute=findNext(this.minutes,minute,calendar,Calendar.MINUTE,Calendar.HOUR_OF_DAY,resets);\n  if (minute == updateMinute) {\n    resets.add(Calendar.MINUTE);\n  }\n else {\n    doNext(calendar,dot);\n  }\n  int hour=calendar.get(Calendar.HOUR_OF_DAY);\n  int updateHour=findNext(this.hours,hour,calendar,Calendar.HOUR_OF_DAY,Calendar.DAY_OF_WEEK,resets);\n  if (hour == updateHour) {\n    resets.add(Calendar.HOUR_OF_DAY);\n  }\n else {\n    doNext(calendar,dot);\n  }\n  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);\n  int dayOfMonth=calendar.get(Calendar.DAY_OF_MONTH);\n  int updateDayOfMonth=findNextDay(calendar,this.daysOfMonth,dayOfMonth,this.daysOfWeek,dayOfWeek,resets);\n  if (dayOfMonth == updateDayOfMonth) {\n    resets.add(Calendar.DAY_OF_MONTH);\n  }\n else {\n    doNext(calendar,dot);\n  }\n  int month=calendar.get(Calendar.MONTH);\n  int updateMonth=findNext(this.months,month,calendar,Calendar.MONTH,Calendar.YEAR,resets);\n  if (month != updateMonth) {\n    if (calendar.get(Calendar.YEAR) - dot > 4) {\n      throw new IllegalArgumentException(\"Invalid cron expression \\\"\" + this.expression + \"\\\" led to runaway search for next trigger\");\n    }\n    doNext(calendar,dot);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 270,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 159,
        "startColumnNumber" : 1,
        "endLineNumber" : 207,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void doNext(Calendar calendar,int dot){\n  List<Integer> resets=new ArrayList<>();\n  int second=calendar.get(Calendar.SECOND);\n  List<Integer> emptyList=Collections.emptyList();\n  int updateSecond=findNext(this.seconds,second,calendar,Calendar.SECOND,Calendar.MINUTE,emptyList);\n  if (second == updateSecond) {\n    resets.add(Calendar.SECOND);\n  }\n  int minute=calendar.get(Calendar.MINUTE);\n  int updateMinute=findNext(this.minutes,minute,calendar,Calendar.MINUTE,Calendar.HOUR_OF_DAY,resets);\n  if (minute == updateMinute) {\n    resets.add(Calendar.MINUTE);\n  }\n else {\n    doNext(calendar,dot);\n  }\n  int hour=calendar.get(Calendar.HOUR_OF_DAY);\n  int updateHour=findNext(this.hours,hour,calendar,Calendar.HOUR_OF_DAY,Calendar.DAY_OF_WEEK,resets);\n  if (hour == updateHour) {\n    resets.add(Calendar.HOUR_OF_DAY);\n  }\n else {\n    doNext(calendar,dot);\n  }\n  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);\n  int dayOfMonth=calendar.get(Calendar.DAY_OF_MONTH);\n  int updateDayOfMonth=findNextDay(calendar,this.daysOfMonth,dayOfMonth,this.daysOfWeek,dayOfWeek,resets);\n  if (dayOfMonth == updateDayOfMonth) {\n    resets.add(Calendar.DAY_OF_MONTH);\n  }\n else {\n    doNext(calendar,dot);\n  }\n  int month=calendar.get(Calendar.MONTH);\n  int updateMonth=findNext(this.months,month,calendar,Calendar.MONTH,Calendar.YEAR,resets);\n  if (month != updateMonth) {\n    if (calendar.get(Calendar.YEAR) - dot > 4) {\n      throw new IllegalArgumentException(\"Invalid cron expression \\\"\" + this.expression + \"\\\" led to runaway search for next trigger\");\n    }\n    doNext(calendar,dot);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 281,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 178,
        "startColumnNumber" : 2,
        "endLineNumber" : 178,
        "endColumnNumber" : 48
      },
      "nodeContext" : "int hour=calendar.get(Calendar.HOUR_OF_DAY);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 178,
    "startColumnNumber" : 13,
    "endLineNumber" : 178,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}