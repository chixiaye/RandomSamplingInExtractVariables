{
  "id" : 298,
  "expression" : "this.defaultMQPushConsumer.getInstanceName()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/client/src/main/java/org/apache/rocketmq/client/impl/consumer/DefaultMQPushConsumerImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.defaultMQPushConsumer.getInstanceName()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 44,
      "startLineNumber" : 216,
      "startColumnNumber" : 99,
      "endLineNumber" : 216,
      "endColumnNumber" : 143
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 191
      },
      "nodeContext" : "log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 192
      },
      "nodeContext" : "log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 215,
        "startColumnNumber" : 28,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup());\n  this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 215,
        "startColumnNumber" : 8,
        "endLineNumber" : 219,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (this.isPause()) {\n  log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup());\n  this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 12747,
        "startLineNumber" : 198,
        "startColumnNumber" : 59,
        "endLineNumber" : 435,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ProcessQueue processQueue=pullRequest.getProcessQueue();\n  if (processQueue.isDropped()) {\n    log.info(\"the pull request[{}] is dropped.\",pullRequest.toString());\n    return;\n  }\n  pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());\n  try {\n    this.makeSureStateOK();\n  }\n catch (  MQClientException e) {\n    log.warn(\"pullMessage exception, consumer state not ok\",e);\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n    return;\n  }\n  if (this.isPause()) {\n    log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup());\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);\n    return;\n  }\n  long cachedMessageCount=processQueue.getMsgCount().get();\n  long cachedMessageSizeInMiB=processQueue.getMsgSize().get() / (1024 * 1024);\n  if (cachedMessageCount > this.defaultMQPushConsumer.getPullThresholdForQueue()) {\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n    if ((queueFlowControlTimes++ % 1000) == 0) {\n      log.warn(\"the cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}\",this.defaultMQPushConsumer.getPullThresholdForQueue(),processQueue.getMsgTreeMap().firstKey(),processQueue.getMsgTreeMap().lastKey(),cachedMessageCount,cachedMessageSizeInMiB,pullRequest,queueFlowControlTimes);\n    }\n    return;\n  }\n  if (cachedMessageSizeInMiB > this.defaultMQPushConsumer.getPullThresholdSizeForQueue()) {\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n    if ((queueFlowControlTimes++ % 1000) == 0) {\n      log.warn(\"the cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}\",this.defaultMQPushConsumer.getPullThresholdSizeForQueue(),processQueue.getMsgTreeMap().firstKey(),processQueue.getMsgTreeMap().lastKey(),cachedMessageCount,cachedMessageSizeInMiB,pullRequest,queueFlowControlTimes);\n    }\n    return;\n  }\n  if (!this.consumeOrderly) {\n    if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {\n      this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n      if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {\n        log.warn(\"the queue's messages, span too long, so do flow control, minOffset={}, maxOffset={}, maxSpan={}, pullRequest={}, flowControlTimes={}\",processQueue.getMsgTreeMap().firstKey(),processQueue.getMsgTreeMap().lastKey(),processQueue.getMaxSpan(),pullRequest,queueMaxSpanFlowControlTimes);\n      }\n      return;\n    }\n  }\n else {\n    if (processQueue.isLocked()) {\n      if (!pullRequest.isLockedFirst()) {\n        final long offset=this.rebalanceImpl.computePullFromWhere(pullRequest.getMessageQueue());\n        boolean brokerBusy=offset < pullRequest.getNextOffset();\n        log.info(\"the first time to pull message, so fix offset from broker. pullRequest: {} NewOffset: {} brokerBusy: {}\",pullRequest,offset,brokerBusy);\n        if (brokerBusy) {\n          log.info(\"[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: {} NewOffset: {}\",pullRequest,offset);\n        }\n        pullRequest.setLockedFirst(true);\n        pullRequest.setNextOffset(offset);\n      }\n    }\n else {\n      this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n      log.info(\"pull message later because not locked in broker, {}\",pullRequest);\n      return;\n    }\n  }\n  final SubscriptionData subscriptionData=this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());\n  if (null == subscriptionData) {\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n    log.warn(\"find the consumer's subscription failed, {}\",pullRequest);\n    return;\n  }\n  final long beginTimestamp=System.currentTimeMillis();\n  PullCallback pullCallback=new PullCallback(){\n    @Override public void onSuccess(    PullResult pullResult){\n      if (pullResult != null) {\n        pullResult=DefaultMQPushConsumerImpl.this.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(),pullResult,subscriptionData);\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          long prevRequestOffset=pullRequest.getNextOffset();\n        pullRequest.setNextOffset(pullResult.getNextBeginOffset());\n      long pullRT=System.currentTimeMillis() - beginTimestamp;\n    DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),pullRequest.getMessageQueue().getTopic(),pullRT);\n  long firstMsgOffset=Long.MAX_VALUE;\nif (pullResult.getMsgFoundList() == null || pullResult.getMsgFoundList().isEmpty()) {\n  DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\n}\n else {\n  firstMsgOffset=pullResult.getMsgFoundList().get(0).getQueueOffset();\n  DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),pullRequest.getMessageQueue().getTopic(),pullResult.getMsgFoundList().size());\n  boolean dispatchToConsume=processQueue.putMessage(pullResult.getMsgFoundList());\n  DefaultMQPushConsumerImpl.this.consumeMessageService.submitConsumeRequest(pullResult.getMsgFoundList(),processQueue,pullRequest.getMessageQueue(),dispatchToConsume);\n  if (DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval() > 0) {\n    DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval());\n  }\n else {\n    DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\n  }\n}\nif (pullResult.getNextBeginOffset() < prevRequestOffset || firstMsgOffset < prevRequestOffset) {\nlog.warn(\"[BUG] pull message result maybe data wrong, nextBeginOffset: {} firstMsgOffset: {} prevRequestOffset: {}\",pullResult.getNextBeginOffset(),firstMsgOffset,prevRequestOffset);\n}\nbreak;\ncase NO_NEW_MSG:pullRequest.setNextOffset(pullResult.getNextBeginOffset());\nDefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);\nDefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\nbreak;\ncase NO_MATCHED_MSG:pullRequest.setNextOffset(pullResult.getNextBeginOffset());\nDefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);\nDefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\nbreak;\ncase OFFSET_ILLEGAL:log.warn(\"the pull request offset illegal, {} {}\",pullRequest.toString(),pullResult.toString());\npullRequest.setNextOffset(pullResult.getNextBeginOffset());\npullRequest.getProcessQueue().setDropped(true);\nDefaultMQPushConsumerImpl.this.executeTaskLater(new Runnable(){\n@Override public void run(){\ntry {\nDefaultMQPushConsumerImpl.this.offsetStore.updateOffset(pullRequest.getMessageQueue(),pullRequest.getNextOffset(),false);\nDefaultMQPushConsumerImpl.this.offsetStore.persist(pullRequest.getMessageQueue());\nDefaultMQPushConsumerImpl.this.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());\nlog.warn(\"fix the pull request offset, {}\",pullRequest);\n}\n catch (Throwable e) {\nlog.error(\"executeTaskLater Exception\",e);\n}\n}\n}\n,10000);\nbreak;\ndefault:break;\n}\n}\n}\n@Override public void onException(Throwable e){\nif (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\nlog.warn(\"execute the pull request exception\",e);\n}\nDefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n}\n}\n;\nboolean commitOffsetEnable=false;\nlong commitOffsetValue=0L;\nif (MessageModel.CLUSTERING == this.defaultMQPushConsumer.getMessageModel()) {\ncommitOffsetValue=this.offsetStore.readOffset(pullRequest.getMessageQueue(),ReadOffsetType.READ_FROM_MEMORY);\nif (commitOffsetValue > 0) {\ncommitOffsetEnable=true;\n}\n}\nString subExpression=null;\nboolean classFilter=false;\nSubscriptionData sd=this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());\nif (sd != null) {\nif (this.defaultMQPushConsumer.isPostSubscriptionWhenPull() && !sd.isClassFilterMode()) {\nsubExpression=sd.getSubString();\n}\nclassFilter=sd.isClassFilterMode();\n}\nint sysFlag=PullSysFlag.buildSysFlag(commitOffsetEnable,true,subExpression != null,classFilter);\ntry {\nthis.pullAPIWrapper.pullKernelImpl(pullRequest.getMessageQueue(),subExpression,subscriptionData.getExpressionType(),subscriptionData.getSubVersion(),pullRequest.getNextOffset(),this.defaultMQPushConsumer.getPullBatchSize(),sysFlag,commitOffsetValue,BROKER_SUSPEND_MAX_TIME_MILLIS,CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND,CommunicationMode.ASYNC,pullCallback);\n}\n catch (Exception e) {\nlog.error(\"pullKernelImpl exception\",e);\nthis.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 945,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12802,
        "startLineNumber" : 198,
        "startColumnNumber" : 4,
        "endLineNumber" : 435,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void pullMessage(final PullRequest pullRequest){\n  final ProcessQueue processQueue=pullRequest.getProcessQueue();\n  if (processQueue.isDropped()) {\n    log.info(\"the pull request[{}] is dropped.\",pullRequest.toString());\n    return;\n  }\n  pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());\n  try {\n    this.makeSureStateOK();\n  }\n catch (  MQClientException e) {\n    log.warn(\"pullMessage exception, consumer state not ok\",e);\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n    return;\n  }\n  if (this.isPause()) {\n    log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup());\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);\n    return;\n  }\n  long cachedMessageCount=processQueue.getMsgCount().get();\n  long cachedMessageSizeInMiB=processQueue.getMsgSize().get() / (1024 * 1024);\n  if (cachedMessageCount > this.defaultMQPushConsumer.getPullThresholdForQueue()) {\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n    if ((queueFlowControlTimes++ % 1000) == 0) {\n      log.warn(\"the cached message count exceeds the threshold {}, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}\",this.defaultMQPushConsumer.getPullThresholdForQueue(),processQueue.getMsgTreeMap().firstKey(),processQueue.getMsgTreeMap().lastKey(),cachedMessageCount,cachedMessageSizeInMiB,pullRequest,queueFlowControlTimes);\n    }\n    return;\n  }\n  if (cachedMessageSizeInMiB > this.defaultMQPushConsumer.getPullThresholdSizeForQueue()) {\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n    if ((queueFlowControlTimes++ % 1000) == 0) {\n      log.warn(\"the cached message size exceeds the threshold {} MiB, so do flow control, minOffset={}, maxOffset={}, count={}, size={} MiB, pullRequest={}, flowControlTimes={}\",this.defaultMQPushConsumer.getPullThresholdSizeForQueue(),processQueue.getMsgTreeMap().firstKey(),processQueue.getMsgTreeMap().lastKey(),cachedMessageCount,cachedMessageSizeInMiB,pullRequest,queueFlowControlTimes);\n    }\n    return;\n  }\n  if (!this.consumeOrderly) {\n    if (processQueue.getMaxSpan() > this.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) {\n      this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL);\n      if ((queueMaxSpanFlowControlTimes++ % 1000) == 0) {\n        log.warn(\"the queue's messages, span too long, so do flow control, minOffset={}, maxOffset={}, maxSpan={}, pullRequest={}, flowControlTimes={}\",processQueue.getMsgTreeMap().firstKey(),processQueue.getMsgTreeMap().lastKey(),processQueue.getMaxSpan(),pullRequest,queueMaxSpanFlowControlTimes);\n      }\n      return;\n    }\n  }\n else {\n    if (processQueue.isLocked()) {\n      if (!pullRequest.isLockedFirst()) {\n        final long offset=this.rebalanceImpl.computePullFromWhere(pullRequest.getMessageQueue());\n        boolean brokerBusy=offset < pullRequest.getNextOffset();\n        log.info(\"the first time to pull message, so fix offset from broker. pullRequest: {} NewOffset: {} brokerBusy: {}\",pullRequest,offset,brokerBusy);\n        if (brokerBusy) {\n          log.info(\"[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: {} NewOffset: {}\",pullRequest,offset);\n        }\n        pullRequest.setLockedFirst(true);\n        pullRequest.setNextOffset(offset);\n      }\n    }\n else {\n      this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n      log.info(\"pull message later because not locked in broker, {}\",pullRequest);\n      return;\n    }\n  }\n  final SubscriptionData subscriptionData=this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());\n  if (null == subscriptionData) {\n    this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n    log.warn(\"find the consumer's subscription failed, {}\",pullRequest);\n    return;\n  }\n  final long beginTimestamp=System.currentTimeMillis();\n  PullCallback pullCallback=new PullCallback(){\n    @Override public void onSuccess(    PullResult pullResult){\n      if (pullResult != null) {\n        pullResult=DefaultMQPushConsumerImpl.this.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(),pullResult,subscriptionData);\nswitch (pullResult.getPullStatus()) {\ncase FOUND:          long prevRequestOffset=pullRequest.getNextOffset();\n        pullRequest.setNextOffset(pullResult.getNextBeginOffset());\n      long pullRT=System.currentTimeMillis() - beginTimestamp;\n    DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),pullRequest.getMessageQueue().getTopic(),pullRT);\n  long firstMsgOffset=Long.MAX_VALUE;\nif (pullResult.getMsgFoundList() == null || pullResult.getMsgFoundList().isEmpty()) {\n  DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\n}\n else {\n  firstMsgOffset=pullResult.getMsgFoundList().get(0).getQueueOffset();\n  DefaultMQPushConsumerImpl.this.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),pullRequest.getMessageQueue().getTopic(),pullResult.getMsgFoundList().size());\n  boolean dispatchToConsume=processQueue.putMessage(pullResult.getMsgFoundList());\n  DefaultMQPushConsumerImpl.this.consumeMessageService.submitConsumeRequest(pullResult.getMsgFoundList(),processQueue,pullRequest.getMessageQueue(),dispatchToConsume);\n  if (DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval() > 0) {\n    DefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,DefaultMQPushConsumerImpl.this.defaultMQPushConsumer.getPullInterval());\n  }\n else {\n    DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\n  }\n}\nif (pullResult.getNextBeginOffset() < prevRequestOffset || firstMsgOffset < prevRequestOffset) {\nlog.warn(\"[BUG] pull message result maybe data wrong, nextBeginOffset: {} firstMsgOffset: {} prevRequestOffset: {}\",pullResult.getNextBeginOffset(),firstMsgOffset,prevRequestOffset);\n}\nbreak;\ncase NO_NEW_MSG:pullRequest.setNextOffset(pullResult.getNextBeginOffset());\nDefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);\nDefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\nbreak;\ncase NO_MATCHED_MSG:pullRequest.setNextOffset(pullResult.getNextBeginOffset());\nDefaultMQPushConsumerImpl.this.correctTagsOffset(pullRequest);\nDefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest);\nbreak;\ncase OFFSET_ILLEGAL:log.warn(\"the pull request offset illegal, {} {}\",pullRequest.toString(),pullResult.toString());\npullRequest.setNextOffset(pullResult.getNextBeginOffset());\npullRequest.getProcessQueue().setDropped(true);\nDefaultMQPushConsumerImpl.this.executeTaskLater(new Runnable(){\n@Override public void run(){\ntry {\nDefaultMQPushConsumerImpl.this.offsetStore.updateOffset(pullRequest.getMessageQueue(),pullRequest.getNextOffset(),false);\nDefaultMQPushConsumerImpl.this.offsetStore.persist(pullRequest.getMessageQueue());\nDefaultMQPushConsumerImpl.this.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());\nlog.warn(\"fix the pull request offset, {}\",pullRequest);\n}\n catch (Throwable e) {\nlog.error(\"executeTaskLater Exception\",e);\n}\n}\n}\n,10000);\nbreak;\ndefault:break;\n}\n}\n}\n@Override public void onException(Throwable e){\nif (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\nlog.warn(\"execute the pull request exception\",e);\n}\nDefaultMQPushConsumerImpl.this.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n}\n}\n;\nboolean commitOffsetEnable=false;\nlong commitOffsetValue=0L;\nif (MessageModel.CLUSTERING == this.defaultMQPushConsumer.getMessageModel()) {\ncommitOffsetValue=this.offsetStore.readOffset(pullRequest.getMessageQueue(),ReadOffsetType.READ_FROM_MEMORY);\nif (commitOffsetValue > 0) {\ncommitOffsetEnable=true;\n}\n}\nString subExpression=null;\nboolean classFilter=false;\nSubscriptionData sd=this.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());\nif (sd != null) {\nif (this.defaultMQPushConsumer.isPostSubscriptionWhenPull() && !sd.isClassFilterMode()) {\nsubExpression=sd.getSubString();\n}\nclassFilter=sd.isClassFilterMode();\n}\nint sysFlag=PullSysFlag.buildSysFlag(commitOffsetEnable,true,subExpression != null,classFilter);\ntry {\nthis.pullAPIWrapper.pullKernelImpl(pullRequest.getMessageQueue(),subExpression,subscriptionData.getExpressionType(),subscriptionData.getSubVersion(),pullRequest.getNextOffset(),this.defaultMQPushConsumer.getPullBatchSize(),sysFlag,commitOffsetValue,BROKER_SUSPEND_MAX_TIME_MILLIS,CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND,CommunicationMode.ASYNC,pullCallback);\n}\n catch (Exception e) {\nlog.error(\"pullKernelImpl exception\",e);\nthis.executePullRequestLater(pullRequest,PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 954,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 180,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 216,
        "endColumnNumber" : 192
      },
      "nodeContext" : "log.warn(\"consumer was paused, execute pull request later. instanceName={}, group={}\",this.defaultMQPushConsumer.getInstanceName(),this.defaultMQPushConsumer.getConsumerGroup());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 44,
    "startLineNumber" : 216,
    "startColumnNumber" : 99,
    "endLineNumber" : 216,
    "endColumnNumber" : 143
  } ],
  "layoutRelationDataList" : [ ]
}