{
  "id" : 446,
  "expression" : "RxJavaPlugins",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/operators/completable/CompletableMergeIterable.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RxJavaPlugins",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 66,
      "startColumnNumber" : 20,
      "endLineNumber" : 66,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 66,
        "startColumnNumber" : 20,
        "endLineNumber" : 66,
        "endColumnNumber" : 44
      },
      "nodeContext" : "RxJavaPlugins.onError(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 66,
        "startColumnNumber" : 20,
        "endLineNumber" : 66,
        "endColumnNumber" : 45
      },
      "nodeContext" : "RxJavaPlugins.onError(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 65,
        "startColumnNumber" : 23,
        "endLineNumber" : 67,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  RxJavaPlugins.onError(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 63,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (once.compareAndSet(false,true)) {\n  s.onError(e);\n}\n else {\n  RxJavaPlugins.onError(e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 61,
        "startColumnNumber" : 34,
        "endLineNumber" : 69,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  set.dispose();\n  if (once.compareAndSet(false,true)) {\n    s.onError(e);\n  }\n else {\n    RxJavaPlugins.onError(e);\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 61,
        "startColumnNumber" : 14,
        "endLineNumber" : 69,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Throwable e) {\n  set.dispose();\n  if (once.compareAndSet(false,true)) {\n    s.onError(e);\n  }\n else {\n    RxJavaPlugins.onError(e);\n  }\n  return;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 338,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  b=iterator.hasNext();\n}\n catch (Throwable e) {\n  set.dispose();\n  if (once.compareAndSet(false,true)) {\n    s.onError(e);\n  }\n else {\n    RxJavaPlugins.onError(e);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 53,
        "startColumnNumber" : 17,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3313,
        "startLineNumber" : 31,
        "startColumnNumber" : 63,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void subscribeActual(final CompletableSubscriber s){\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 66,
        "startColumnNumber" : 20,
        "endLineNumber" : 66,
        "endColumnNumber" : 45
      },
      "nodeContext" : "RxJavaPlugins.onError(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.plugins.RxJavaPlugins"
  }, {
    "nodeContext" : "RxJavaPlugins",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 88,
      "startColumnNumber" : 20,
      "endLineNumber" : 88,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 44
      },
      "nodeContext" : "RxJavaPlugins.onError(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 45
      },
      "nodeContext" : "RxJavaPlugins.onError(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 87,
        "startColumnNumber" : 23,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  RxJavaPlugins.onError(e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 89,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (once.compareAndSet(false,true)) {\n  s.onError(e);\n}\n else {\n  RxJavaPlugins.onError(e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 83,
        "startColumnNumber" : 34,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  set.dispose();\n  if (once.compareAndSet(false,true)) {\n    s.onError(e);\n  }\n else {\n    RxJavaPlugins.onError(e);\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 83,
        "startColumnNumber" : 14,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Throwable e) {\n  set.dispose();\n  if (once.compareAndSet(false,true)) {\n    s.onError(e);\n  }\n else {\n    RxJavaPlugins.onError(e);\n  }\n  return;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  c=iterator.next();\n}\n catch (Throwable e) {\n  set.dispose();\n  if (once.compareAndSet(false,true)) {\n    s.onError(e);\n  }\n else {\n    RxJavaPlugins.onError(e);\n  }\n  return;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 53,
        "startColumnNumber" : 17,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3313,
        "startLineNumber" : 31,
        "startColumnNumber" : 63,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void subscribeActual(final CompletableSubscriber s){\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 45
      },
      "nodeContext" : "RxJavaPlugins.onError(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.plugins.RxJavaPlugins"
  }, {
    "nodeContext" : "RxJavaPlugins",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 103,
      "startColumnNumber" : 20,
      "endLineNumber" : 103,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 46
      },
      "nodeContext" : "RxJavaPlugins.onError(npe)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 47
      },
      "nodeContext" : "RxJavaPlugins.onError(npe);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 102,
        "startColumnNumber" : 23,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  RxJavaPlugins.onError(npe);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 169,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (once.compareAndSet(false,true)) {\n  s.onError(npe);\n}\n else {\n  RxJavaPlugins.onError(npe);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 97,
        "startColumnNumber" : 27,
        "endLineNumber" : 106,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  set.dispose();\n  NullPointerException npe=new NullPointerException(\"A completable source is null\");\n  if (once.compareAndSet(false,true)) {\n    s.onError(npe);\n  }\n else {\n    RxJavaPlugins.onError(npe);\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 377,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (c == null) {\n  set.dispose();\n  NullPointerException npe=new NullPointerException(\"A completable source is null\");\n  if (once.compareAndSet(false,true)) {\n    s.onError(npe);\n  }\n else {\n    RxJavaPlugins.onError(npe);\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2500,
        "startLineNumber" : 53,
        "startColumnNumber" : 17,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 230,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 136,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (; ; ) {\n  if (set.isDisposed()) {\n    return;\n  }\n  boolean b;\n  try {\n    b=iterator.hasNext();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (!b) {\n    break;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  CompletableConsumable c;\n  try {\n    c=iterator.next();\n  }\n catch (  Throwable e) {\n    set.dispose();\n    if (once.compareAndSet(false,true)) {\n      s.onError(e);\n    }\n else {\n      RxJavaPlugins.onError(e);\n    }\n    return;\n  }\n  if (set.isDisposed()) {\n    return;\n  }\n  if (c == null) {\n    set.dispose();\n    NullPointerException npe=new NullPointerException(\"A completable source is null\");\n    if (once.compareAndSet(false,true)) {\n      s.onError(npe);\n    }\n else {\n      RxJavaPlugins.onError(npe);\n    }\n    return;\n  }\n  wip.getAndIncrement();\n  c.subscribe(new CompletableSubscriber(){\n    @Override public void onSubscribe(    Disposable d){\n      set.add(d);\n    }\n    @Override public void onError(    Throwable e){\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n    }\n    @Override public void onComplete(){\n      if (wip.decrementAndGet() == 0) {\n        if (once.compareAndSet(false,true)) {\n          s.onComplete();\n        }\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 231,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3313,
        "startLineNumber" : 31,
        "startColumnNumber" : 63,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3387,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void subscribeActual(final CompletableSubscriber s){\n  final CompositeDisposable set=new CompositeDisposable();\n  s.onSubscribe(set);\n  Iterator<? extends CompletableConsumable> iterator;\n  try {\n    iterator=sources.iterator();\n  }\n catch (  Throwable e) {\n    s.onError(e);\n    return;\n  }\n  if (iterator == null) {\n    s.onError(new NullPointerException(\"The source iterator returned is null\"));\n    return;\n  }\n  final AtomicInteger wip=new AtomicInteger(1);\n  final AtomicBoolean once=new AtomicBoolean();\n  for (; ; ) {\n    if (set.isDisposed()) {\n      return;\n    }\n    boolean b;\n    try {\n      b=iterator.hasNext();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (!b) {\n      break;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    CompletableConsumable c;\n    try {\n      c=iterator.next();\n    }\n catch (    Throwable e) {\n      set.dispose();\n      if (once.compareAndSet(false,true)) {\n        s.onError(e);\n      }\n else {\n        RxJavaPlugins.onError(e);\n      }\n      return;\n    }\n    if (set.isDisposed()) {\n      return;\n    }\n    if (c == null) {\n      set.dispose();\n      NullPointerException npe=new NullPointerException(\"A completable source is null\");\n      if (once.compareAndSet(false,true)) {\n        s.onError(npe);\n      }\n else {\n        RxJavaPlugins.onError(npe);\n      }\n      return;\n    }\n    wip.getAndIncrement();\n    c.subscribe(new CompletableSubscriber(){\n      @Override public void onSubscribe(      Disposable d){\n        set.add(d);\n      }\n      @Override public void onError(      Throwable e){\n        set.dispose();\n        if (once.compareAndSet(false,true)) {\n          s.onError(e);\n        }\n else {\n          RxJavaPlugins.onError(e);\n        }\n      }\n      @Override public void onComplete(){\n        if (wip.decrementAndGet() == 0) {\n          if (once.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n        }\n      }\n    }\n);\n  }\n  if (wip.decrementAndGet() == 0) {\n    if (once.compareAndSet(false,true)) {\n      s.onComplete();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 47
      },
      "nodeContext" : "RxJavaPlugins.onError(npe);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.plugins.RxJavaPlugins"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 66,
    "startColumnNumber" : 20,
    "endLineNumber" : 66,
    "endColumnNumber" : 33
  }, {
    "charLength" : 13,
    "startLineNumber" : 88,
    "startColumnNumber" : 20,
    "endLineNumber" : 88,
    "endColumnNumber" : 33
  }, {
    "charLength" : 13,
    "startLineNumber" : 103,
    "startColumnNumber" : 20,
    "endLineNumber" : 103,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  } ]
}