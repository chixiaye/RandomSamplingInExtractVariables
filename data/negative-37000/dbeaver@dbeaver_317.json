{
  "id" : 317,
  "expression" : "!isBlockQuery",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/sql/SQLUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!isBlockQuery",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 384,
      "startColumnNumber" : 16,
      "endLineNumber" : 384,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 384,
        "startColumnNumber" : 12,
        "endLineNumber" : 386,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!isBlockQuery) {\n  sql=trimmed;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1933,
        "startLineNumber" : 348,
        "startColumnNumber" : 81,
        "endLineNumber" : 388,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!sql.endsWith(statementDelimiter) && sql.length() > statementDelimiter.length()) {\n    continue;\n  }\n  if (Character.isAlphabetic(statementDelimiter.charAt(0))) {\n    char lastChar=sql.charAt(sql.length() - statementDelimiter.length() - 1);\n    if (Character.isUnicodeIdentifierPart(lastChar)) {\n      break;\n    }\n  }\n  boolean isBlockQuery=false;\n  String trimmed=sql.substring(0,sql.length() - statementDelimiter.length());\n{\n    String test=trimmed.toUpperCase().trim();\n    String[][] blockBoundStrings=syntaxManager.getDialect().getBlockBoundStrings();\n    if (blockBoundStrings != null) {\n      for (      String[] blocks : blockBoundStrings) {\n        int endIndex=test.indexOf(blocks[1]);\n        if (endIndex > 0) {\n          if (test.endsWith(blocks[1])) {\n            isBlockQuery=true;\n            break;\n          }\n else {\n            String afterEnd=test.substring(endIndex + blocks[1].length()).trim();\n            if (CommonUtils.isJavaIdentifier(afterEnd)) {\n              isBlockQuery=true;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (!isBlockQuery) {\n    sql=trimmed;\n  }\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2006,
        "startLineNumber" : 348,
        "startColumnNumber" : 8,
        "endLineNumber" : 388,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String statementDelimiter : syntaxManager.getStatementDelimiters()) {\n  if (!sql.endsWith(statementDelimiter) && sql.length() > statementDelimiter.length()) {\n    continue;\n  }\n  if (Character.isAlphabetic(statementDelimiter.charAt(0))) {\n    char lastChar=sql.charAt(sql.length() - statementDelimiter.length() - 1);\n    if (Character.isUnicodeIdentifierPart(lastChar)) {\n      break;\n    }\n  }\n  boolean isBlockQuery=false;\n  String trimmed=sql.substring(0,sql.length() - statementDelimiter.length());\n{\n    String test=trimmed.toUpperCase().trim();\n    String[][] blockBoundStrings=syntaxManager.getDialect().getBlockBoundStrings();\n    if (blockBoundStrings != null) {\n      for (      String[] blocks : blockBoundStrings) {\n        int endIndex=test.indexOf(blocks[1]);\n        if (endIndex > 0) {\n          if (test.endsWith(blocks[1])) {\n            isBlockQuery=true;\n            break;\n          }\n else {\n            String afterEnd=test.substring(endIndex + blocks[1].length()).trim();\n            if (CommonUtils.isJavaIdentifier(afterEnd)) {\n              isBlockQuery=true;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n  if (!isBlockQuery) {\n    sql=trimmed;\n  }\n  break;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 181,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3123,
        "startLineNumber" : 324,
        "startColumnNumber" : 4,
        "endLineNumber" : 390,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (sql.isEmpty() || !trimDelimiter) {\n    return sql;\n  }\n  String trailingSpaces=\"\";\n{\n    int trailingSpacesCount=0;\n    for (int i=sql.length() - 1; i >= 0; i--) {\n      if (!Character.isWhitespace(sql.charAt(i))) {\n        break;\n      }\n      trailingSpacesCount++;\n    }\n    if (trailingSpacesCount > 0) {\n      trailingSpaces=sql.substring(sql.length() - trailingSpacesCount);\n      sql=sql.substring(0,sql.length() - trailingSpacesCount);\n    }\n  }\n  for (  String statementDelimiter : syntaxManager.getStatementDelimiters()) {\n    if (!sql.endsWith(statementDelimiter) && sql.length() > statementDelimiter.length()) {\n      continue;\n    }\n    if (Character.isAlphabetic(statementDelimiter.charAt(0))) {\n      char lastChar=sql.charAt(sql.length() - statementDelimiter.length() - 1);\n      if (Character.isUnicodeIdentifierPart(lastChar)) {\n        break;\n      }\n    }\n    boolean isBlockQuery=false;\n    String trimmed=sql.substring(0,sql.length() - statementDelimiter.length());\n{\n      String test=trimmed.toUpperCase().trim();\n      String[][] blockBoundStrings=syntaxManager.getDialect().getBlockBoundStrings();\n      if (blockBoundStrings != null) {\n        for (        String[] blocks : blockBoundStrings) {\n          int endIndex=test.indexOf(blocks[1]);\n          if (endIndex > 0) {\n            if (test.endsWith(blocks[1])) {\n              isBlockQuery=true;\n              break;\n            }\n else {\n              String afterEnd=test.substring(endIndex + blocks[1].length()).trim();\n              if (CommonUtils.isJavaIdentifier(afterEnd)) {\n                isBlockQuery=true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!isBlockQuery) {\n      sql=trimmed;\n    }\n    break;\n  }\n  return sql + trailingSpaces;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 266,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3234,
        "startLineNumber" : 323,
        "startColumnNumber" : 4,
        "endLineNumber" : 390,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String trimQueryStatement(SQLSyntaxManager syntaxManager,String sql,boolean trimDelimiter){\n  if (sql.isEmpty() || !trimDelimiter) {\n    return sql;\n  }\n  String trailingSpaces=\"\";\n{\n    int trailingSpacesCount=0;\n    for (int i=sql.length() - 1; i >= 0; i--) {\n      if (!Character.isWhitespace(sql.charAt(i))) {\n        break;\n      }\n      trailingSpacesCount++;\n    }\n    if (trailingSpacesCount > 0) {\n      trailingSpaces=sql.substring(sql.length() - trailingSpacesCount);\n      sql=sql.substring(0,sql.length() - trailingSpacesCount);\n    }\n  }\n  for (  String statementDelimiter : syntaxManager.getStatementDelimiters()) {\n    if (!sql.endsWith(statementDelimiter) && sql.length() > statementDelimiter.length()) {\n      continue;\n    }\n    if (Character.isAlphabetic(statementDelimiter.charAt(0))) {\n      char lastChar=sql.charAt(sql.length() - statementDelimiter.length() - 1);\n      if (Character.isUnicodeIdentifierPart(lastChar)) {\n        break;\n      }\n    }\n    boolean isBlockQuery=false;\n    String trimmed=sql.substring(0,sql.length() - statementDelimiter.length());\n{\n      String test=trimmed.toUpperCase().trim();\n      String[][] blockBoundStrings=syntaxManager.getDialect().getBlockBoundStrings();\n      if (blockBoundStrings != null) {\n        for (        String[] blocks : blockBoundStrings) {\n          int endIndex=test.indexOf(blocks[1]);\n          if (endIndex > 0) {\n            if (test.endsWith(blocks[1])) {\n              isBlockQuery=true;\n              break;\n            }\n else {\n              String afterEnd=test.substring(endIndex + blocks[1].length()).trim();\n              if (CommonUtils.isJavaIdentifier(afterEnd)) {\n                isBlockQuery=true;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!isBlockQuery) {\n      sql=trimmed;\n    }\n    break;\n  }\n  return sql + trailingSpaces;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 283,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 384,
        "startColumnNumber" : 12,
        "endLineNumber" : 386,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!isBlockQuery) {\n  sql=trimmed;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 384,
    "startColumnNumber" : 16,
    "endLineNumber" : 384,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}