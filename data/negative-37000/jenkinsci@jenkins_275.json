{
  "id" : 275,
  "expression" : "cls",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/test/java/hudson/model/listeners/SCMListenerTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 54,
      "startColumnNumber" : 40,
      "endLineNumber" : 54,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 44
      },
      "nodeContext" : "l.onChangeLogParsed(ab,bl,cls)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(ab,bl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 52,
        "startColumnNumber" : 59,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(0,l.cnt);\n  l.onChangeLogParsed(ab,bl,cls);\n  assertEquals(1,l.cnt);\n  l.onChangeLogParsed(ab,scm,bl,cls);\n  assertEquals(2,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (L l : new L[]{new L1(),new L2(),new L3()}) {\n  assertEquals(0,l.cnt);\n  l.onChangeLogParsed(ab,bl,cls);\n  assertEquals(1,l.cnt);\n  l.onChangeLogParsed(ab,scm,bl,cls);\n  assertEquals(2,l.cnt);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1175,
        "startLineNumber" : 44,
        "startColumnNumber" : 59,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Issue(\"JENKINS-23522\") @SuppressWarnings({\"rawtypes\"}) @Test public void onChangeLogParsed() throws Exception {\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(ab,bl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.scm.ChangeLogSet"
  }, {
    "nodeContext" : "cls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 56,
      "startColumnNumber" : 45,
      "endLineNumber" : 56,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 49
      },
      "nodeContext" : "l.onChangeLogParsed(ab,scm,bl,cls)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 50
      },
      "nodeContext" : "l.onChangeLogParsed(ab,scm,bl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 52,
        "startColumnNumber" : 59,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertEquals(0,l.cnt);\n  l.onChangeLogParsed(ab,bl,cls);\n  assertEquals(1,l.cnt);\n  l.onChangeLogParsed(ab,scm,bl,cls);\n  assertEquals(2,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (L l : new L[]{new L1(),new L2(),new L3()}) {\n  assertEquals(0,l.cnt);\n  l.onChangeLogParsed(ab,bl,cls);\n  assertEquals(1,l.cnt);\n  l.onChangeLogParsed(ab,scm,bl,cls);\n  assertEquals(2,l.cnt);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 57,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1175,
        "startLineNumber" : 44,
        "startColumnNumber" : 59,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Issue(\"JENKINS-23522\") @SuppressWarnings({\"rawtypes\"}) @Test public void onChangeLogParsed() throws Exception {\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 56,
        "endColumnNumber" : 50
      },
      "nodeContext" : "l.onChangeLogParsed(ab,scm,bl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.scm.ChangeLogSet"
  }, {
    "nodeContext" : "cls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 62,
      "startColumnNumber" : 40,
      "endLineNumber" : 62,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 44
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1175,
        "startLineNumber" : 44,
        "startColumnNumber" : 59,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Issue(\"JENKINS-23522\") @SuppressWarnings({\"rawtypes\"}) @Test public void onChangeLogParsed() throws Exception {\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.scm.ChangeLogSet"
  }, {
    "nodeContext" : "cls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 65,
      "startColumnNumber" : 40,
      "endLineNumber" : 65,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 44
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1175,
        "startLineNumber" : 44,
        "startColumnNumber" : 59,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Issue(\"JENKINS-23522\") @SuppressWarnings({\"rawtypes\"}) @Test public void onChangeLogParsed() throws Exception {\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.scm.ChangeLogSet"
  }, {
    "nodeContext" : "cls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 68,
      "startColumnNumber" : 40,
      "endLineNumber" : 68,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 44
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1175,
        "startLineNumber" : 44,
        "startColumnNumber" : 59,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Issue(\"JENKINS-23522\") @SuppressWarnings({\"rawtypes\"}) @Test public void onChangeLogParsed() throws Exception {\n  SCM scm=Mockito.mock(SCM.class);\n  BuildListener bl=Mockito.mock(BuildListener.class);\n  ChangeLogSet cls=Mockito.mock(ChangeLogSet.class);\n  AbstractBuild ab=Mockito.mock(AbstractBuild.class);\n  AbstractProject ap=Mockito.mock(AbstractProject.class);\n  Mockito.when(ab.getProject()).thenReturn(ap);\n  Mockito.when(ap.getScm()).thenReturn(scm);\n  for (  L l : new L[]{new L1(),new L2(),new L3()}) {\n    assertEquals(0,l.cnt);\n    l.onChangeLogParsed(ab,bl,cls);\n    assertEquals(1,l.cnt);\n    l.onChangeLogParsed(ab,scm,bl,cls);\n    assertEquals(2,l.cnt);\n  }\n  Run r=Mockito.mock(Run.class);\n  TaskListener tl=Mockito.mock(TaskListener.class);\n  L l=new L1();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n  l=new L2();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"does handle this\",1,l.cnt);\n  l=new L3();\n  l.onChangeLogParsed(r,scm,tl,cls);\n  assertEquals(\"cannot handle this\",0,l.cnt);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 238,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 45
      },
      "nodeContext" : "l.onChangeLogParsed(r,scm,tl,cls);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.scm.ChangeLogSet"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 54,
    "startColumnNumber" : 40,
    "endLineNumber" : 54,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 56,
    "startColumnNumber" : 45,
    "endLineNumber" : 56,
    "endColumnNumber" : 48
  }, {
    "charLength" : 3,
    "startLineNumber" : 62,
    "startColumnNumber" : 40,
    "endLineNumber" : 62,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 65,
    "startColumnNumber" : 40,
    "endLineNumber" : 65,
    "endColumnNumber" : 43
  }, {
    "charLength" : 3,
    "startLineNumber" : 68,
    "startColumnNumber" : 40,
    "endLineNumber" : 68,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}