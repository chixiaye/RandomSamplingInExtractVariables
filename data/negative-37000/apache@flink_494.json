{
  "id" : 494,
  "expression" : "\"DataSource (\"",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/DataSourceNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"DataSource (\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 215,
      "startColumnNumber" : 24,
      "endLineNumber" : 215,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 215,
        "startColumnNumber" : 24,
        "endLineNumber" : 215,
        "endColumnNumber" : 75
      },
      "nodeContext" : "\"DataSource (\" + this.getOperator().getName() + \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 213,
        "startColumnNumber" : 16,
        "endLineNumber" : 217,
        "endColumnNumber" : 36
      },
      "nodeContext" : "new SourcePlanNode(this,\"DataSource (\" + this.getOperator().getName() + \")\",this.gprops,this.lprops)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 228,
        "startLineNumber" : 212,
        "startColumnNumber" : 23,
        "endLineNumber" : 217,
        "endColumnNumber" : 36
      },
      "nodeContext" : "candidate=new SourcePlanNode(this,\"DataSource (\" + this.getOperator().getName() + \")\",this.gprops,this.lprops)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 212,
        "startColumnNumber" : 8,
        "endLineNumber" : 217,
        "endColumnNumber" : 37
      },
      "nodeContext" : "SourcePlanNode candidate=new SourcePlanNode(this,\"DataSource (\" + this.getOperator().getName() + \")\",this.gprops,this.lprops);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1720,
        "startLineNumber" : 207,
        "startColumnNumber" : 71,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (this.cachedPlans != null) {\n    return this.cachedPlans;\n  }\n  SourcePlanNode candidate=new SourcePlanNode(this,\"DataSource (\" + this.getOperator().getName() + \")\",this.gprops,this.lprops);\n  if (!replicatedInput) {\n    candidate.updatePropertiesWithUniqueSets(getUniqueFields());\n    final Costs costs=new Costs();\n    if (FileInputFormat.class.isAssignableFrom(getOperator().getFormatWrapper().getUserCodeClass()) && this.estimatedOutputSize >= 0) {\n      estimator.addFileInputCost(this.estimatedOutputSize,costs);\n    }\n    candidate.setCosts(costs);\n  }\n else {\n    final Costs costs=new Costs();\n    InputFormat<?,?> inputFormat=((ReplicatingInputFormat<?,?>)getOperator().getFormatWrapper().getUserCodeObject()).getReplicatedInputFormat();\n    if (FileInputFormat.class.isAssignableFrom(inputFormat.getClass()) && this.estimatedOutputSize >= 0) {\n      estimator.addFileInputCost(this.estimatedOutputSize * this.getParallelism(),costs);\n    }\n    candidate.setCosts(costs);\n  }\n  List<PlanNode> plans=new ArrayList<PlanNode>(1);\n  plans.add(candidate);\n  this.cachedPlans=plans;\n  return plans;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1801,
        "startLineNumber" : 206,
        "startColumnNumber" : 4,
        "endLineNumber" : 250,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<PlanNode> getAlternativePlans(CostEstimator estimator){\n  if (this.cachedPlans != null) {\n    return this.cachedPlans;\n  }\n  SourcePlanNode candidate=new SourcePlanNode(this,\"DataSource (\" + this.getOperator().getName() + \")\",this.gprops,this.lprops);\n  if (!replicatedInput) {\n    candidate.updatePropertiesWithUniqueSets(getUniqueFields());\n    final Costs costs=new Costs();\n    if (FileInputFormat.class.isAssignableFrom(getOperator().getFormatWrapper().getUserCodeClass()) && this.estimatedOutputSize >= 0) {\n      estimator.addFileInputCost(this.estimatedOutputSize,costs);\n    }\n    candidate.setCosts(costs);\n  }\n else {\n    final Costs costs=new Costs();\n    InputFormat<?,?> inputFormat=((ReplicatingInputFormat<?,?>)getOperator().getFormatWrapper().getUserCodeObject()).getReplicatedInputFormat();\n    if (FileInputFormat.class.isAssignableFrom(inputFormat.getClass()) && this.estimatedOutputSize >= 0) {\n      estimator.addFileInputCost(this.estimatedOutputSize * this.getParallelism(),costs);\n    }\n    candidate.setCosts(costs);\n  }\n  List<PlanNode> plans=new ArrayList<PlanNode>(1);\n  plans.add(candidate);\n  this.cachedPlans=plans;\n  return plans;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 215,
        "startColumnNumber" : 24,
        "endLineNumber" : 215,
        "endColumnNumber" : 75
      },
      "nodeContext" : "\"DataSource (\" + this.getOperator().getName() + \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 215,
    "startColumnNumber" : 24,
    "endLineNumber" : 215,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}