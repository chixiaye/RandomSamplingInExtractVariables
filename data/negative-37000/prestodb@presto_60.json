{
  "id" : 60,
  "expression" : "stack.pop()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/sql/gen/OrCodeGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stack.pop()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 49,
      "startColumnNumber" : 36,
      "endLineNumber" : 49,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 49,
        "startColumnNumber" : 26,
        "endLineNumber" : 49,
        "endColumnNumber" : 47
      },
      "nodeContext" : "operand=stack.pop()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 48
      },
      "nodeContext" : "RowExpression operand=stack.pop();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 481,
        "startLineNumber" : 48,
        "startColumnNumber" : 11,
        "endLineNumber" : 58,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  RowExpression operand=stack.pop();\n  if (operand instanceof SpecialFormExpression && ((SpecialFormExpression)operand).getForm() == SpecialFormExpression.Form.OR) {\n    stack.push(((SpecialFormExpression)operand).getArguments().get(1));\n    stack.push(((SpecialFormExpression)operand).getArguments().get(0));\n  }\n else {\n    flattenedArgs.add(operand);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 510,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 58,
        "endColumnNumber" : 35
      },
      "nodeContext" : "do {\n  RowExpression operand=stack.pop();\n  if (operand instanceof SpecialFormExpression && ((SpecialFormExpression)operand).getForm() == SpecialFormExpression.Form.OR) {\n    stack.push(((SpecialFormExpression)operand).getArguments().get(1));\n    stack.push(((SpecialFormExpression)operand).getArguments().get(0));\n  }\n else {\n    flattenedArgs.add(operand);\n  }\n}\n while (!stack.isEmpty());\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 68,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2896,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Preconditions.checkArgument(arguments.size() == 2);\n  Deque<RowExpression> stack=new ArrayDeque<>();\n  stack.push(arguments.get(1));\n  stack.push(arguments.get(0));\n  ImmutableList.Builder<RowExpression> flattenedArgs=ImmutableList.builder();\n  do {\n    RowExpression operand=stack.pop();\n    if (operand instanceof SpecialFormExpression && ((SpecialFormExpression)operand).getForm() == SpecialFormExpression.Form.OR) {\n      stack.push(((SpecialFormExpression)operand).getArguments().get(1));\n      stack.push(((SpecialFormExpression)operand).getArguments().get(0));\n    }\n else {\n      flattenedArgs.add(operand);\n    }\n  }\n while (!stack.isEmpty());\n  BytecodeBlock block=new BytecodeBlock().comment(\"OR\").setDescription(\"OR\");\n  LabelNode trueLabel=new LabelNode(\"true\");\n  LabelNode endLabel=new LabelNode(\"end\");\n  Variable wasNull=generator.wasNull();\n  Variable hasNulls=generator.getScope().createTempVariable(boolean.class);\n  block.initializeVariable(hasNulls);\n  for (  RowExpression expression : flattenedArgs.build()) {\n    block.comment(\"do { eval arg; if (wasNull) { hasNull = true; wasNull = false; } else if (true) goto ret_true; }\").append(generator.generate(expression,Optional.empty()));\n    IfStatement ifOperandIsNull=new IfStatement(\"if left wasNull...\").condition(wasNull);\n    ifOperandIsNull.ifTrue().comment(\"clear the null flag and remember there was a null\").putVariable(hasNulls,true).putVariable(wasNull,false).pop(boolean.class);\n    ifOperandIsNull.ifFalse().ifTrueGoto(trueLabel);\n    block.append(ifOperandIsNull);\n  }\n  IfStatement ifHasNulls=new IfStatement(\"hasNulls is true\");\n  ifHasNulls.condition().append(hasNulls);\n  ifHasNulls.ifTrue().comment(\"at least one of the arguments is null and none of them is true. So set wasNull to true\").putVariable(wasNull,true).push(false);\n  ifHasNulls.ifFalse().push(false);\n  block.append(ifHasNulls).gotoLabel(endLabel);\n  block.visitLabel(trueLabel).comment(\"at least one of the args is true, clear wasNull and return true\").push(true).gotoLabel(endLabel);\n  block.visitLabel(endLabel);\n  outputBlockVariable.ifPresent(output -> block.append(generateWrite(generator,returnType,output)));\n  return block;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3077,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public BytecodeNode generateExpression(BytecodeGeneratorContext generator,Type returnType,List<RowExpression> arguments,Optional<Variable> outputBlockVariable){\n  Preconditions.checkArgument(arguments.size() == 2);\n  Deque<RowExpression> stack=new ArrayDeque<>();\n  stack.push(arguments.get(1));\n  stack.push(arguments.get(0));\n  ImmutableList.Builder<RowExpression> flattenedArgs=ImmutableList.builder();\n  do {\n    RowExpression operand=stack.pop();\n    if (operand instanceof SpecialFormExpression && ((SpecialFormExpression)operand).getForm() == SpecialFormExpression.Form.OR) {\n      stack.push(((SpecialFormExpression)operand).getArguments().get(1));\n      stack.push(((SpecialFormExpression)operand).getArguments().get(0));\n    }\n else {\n      flattenedArgs.add(operand);\n    }\n  }\n while (!stack.isEmpty());\n  BytecodeBlock block=new BytecodeBlock().comment(\"OR\").setDescription(\"OR\");\n  LabelNode trueLabel=new LabelNode(\"true\");\n  LabelNode endLabel=new LabelNode(\"end\");\n  Variable wasNull=generator.wasNull();\n  Variable hasNulls=generator.getScope().createTempVariable(boolean.class);\n  block.initializeVariable(hasNulls);\n  for (  RowExpression expression : flattenedArgs.build()) {\n    block.comment(\"do { eval arg; if (wasNull) { hasNull = true; wasNull = false; } else if (true) goto ret_true; }\").append(generator.generate(expression,Optional.empty()));\n    IfStatement ifOperandIsNull=new IfStatement(\"if left wasNull...\").condition(wasNull);\n    ifOperandIsNull.ifTrue().comment(\"clear the null flag and remember there was a null\").putVariable(hasNulls,true).putVariable(wasNull,false).pop(boolean.class);\n    ifOperandIsNull.ifFalse().ifTrueGoto(trueLabel);\n    block.append(ifOperandIsNull);\n  }\n  IfStatement ifHasNulls=new IfStatement(\"hasNulls is true\");\n  ifHasNulls.condition().append(hasNulls);\n  ifHasNulls.ifTrue().comment(\"at least one of the arguments is null and none of them is true. So set wasNull to true\").putVariable(wasNull,true).push(false);\n  ifHasNulls.ifFalse().push(false);\n  block.append(ifHasNulls).gotoLabel(endLabel);\n  block.visitLabel(trueLabel).comment(\"at least one of the args is true, clear wasNull and return true\").push(true).gotoLabel(endLabel);\n  block.visitLabel(endLabel);\n  outputBlockVariable.ifPresent(output -> block.append(generateWrite(generator,returnType,output)));\n  return block;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 49,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 48
      },
      "nodeContext" : "RowExpression operand=stack.pop();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.facebook.presto.spi.relation.RowExpression"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 49,
    "startColumnNumber" : 36,
    "endLineNumber" : 49,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ ]
}