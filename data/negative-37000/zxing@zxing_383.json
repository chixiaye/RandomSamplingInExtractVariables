{
  "id" : 383,
  "expression" : "email != null && ATEXT_ALPHANUMERIC.matcher(email).matches()",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/com/google/zxing/client/result/EmailDoCoMoResultParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "email != null && ATEXT_ALPHANUMERIC.matcher(email).matches()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 60,
      "startLineNumber" : 60,
      "startColumnNumber" : 11,
      "endLineNumber" : 60,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 60,
        "startColumnNumber" : 11,
        "endLineNumber" : 60,
        "endColumnNumber" : 98
      },
      "nodeContext" : "email != null && ATEXT_ALPHANUMERIC.matcher(email).matches() && email.indexOf('@') >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 99
      },
      "nodeContext" : "return email != null && ATEXT_ALPHANUMERIC.matcher(email).matches() && email.indexOf('@') >= 0;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 59,
        "startColumnNumber" : 60,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return email != null && ATEXT_ALPHANUMERIC.matcher(email).matches() && email.indexOf('@') >= 0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 523,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This implements only the most basic checking for an email address's validity -- that it contains an '@' and contains no characters disallowed by RFC 2822. This is an overly lenient definition of validity. We want to generally be lenient here since this class is only intended to encapsulate what's in a barcode, not \"judge\" it.\n */\nstatic boolean isBasicallyValidEmailAddress(String email){\n  return email != null && ATEXT_ALPHANUMERIC.matcher(email).matches() && email.indexOf('@') >= 0;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 28,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 99
      },
      "nodeContext" : "return email != null && ATEXT_ALPHANUMERIC.matcher(email).matches() && email.indexOf('@') >= 0;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 60,
    "startLineNumber" : 60,
    "startColumnNumber" : 11,
    "endLineNumber" : 60,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}