{
  "id" : 242,
  "expression" : "ClassLoaderUsage",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ClassLoaderUsage",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 658,
      "startColumnNumber" : 32,
      "endLineNumber" : 658,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 658,
        "startColumnNumber" : 32,
        "endLineNumber" : 658,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ClassLoaderUsage.CURRENT_CLASSLOADER",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 658,
        "startColumnNumber" : 8,
        "endLineNumber" : 658,
        "endColumnNumber" : 87
      },
      "nodeContext" : "expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 658,
        "startColumnNumber" : 8,
        "endLineNumber" : 658,
        "endColumnNumber" : 88
      },
      "nodeContext" : "expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3492,
        "startLineNumber" : 632,
        "startColumnNumber" : 53,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  expectConverters();\n  expectStartStorage();\n  expectFileConfigProvider();\n  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n  expectNewWorkerTask();\n  Map<String,String> origProps=new HashMap<>();\n  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());\n  TaskConfig taskConfig=new TaskConfig(origProps);\n  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n  EasyMock.expect(task.version()).andReturn(\"1.0\");\n  workerTask.initialize(taskConfig);\n  EasyMock.expectLastCall();\n  assertNotNull(taskKeyConverter);\n  assertNotNull(taskValueConverter);\n  assertNotNull(taskHeaderConverter);\n  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n  EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);\n  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);\n  plugins.connectorClass(WorkerTestConnector.class.getName());\n  EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n  workerTask.stop();\n  EasyMock.expectLastCall();\n  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n  EasyMock.expectLastCall();\n  workerTask.removeMetrics();\n  EasyMock.expectLastCall();\n  expectStopStorage();\n  expectClusterId();\n  PowerMock.replayAll();\n  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy);\n  worker.herder=herder;\n  worker.start();\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);\n  assertStatistics(worker,0,1);\n  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());\n  worker.stopAndAwaitTask(TASK_ID);\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.stop();\n  assertStatistics(worker,0,0);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3551,
        "startLineNumber" : 631,
        "startColumnNumber" : 4,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddRemoveTask() throws Exception {\n  expectConverters();\n  expectStartStorage();\n  expectFileConfigProvider();\n  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n  expectNewWorkerTask();\n  Map<String,String> origProps=new HashMap<>();\n  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());\n  TaskConfig taskConfig=new TaskConfig(origProps);\n  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n  EasyMock.expect(task.version()).andReturn(\"1.0\");\n  workerTask.initialize(taskConfig);\n  EasyMock.expectLastCall();\n  assertNotNull(taskKeyConverter);\n  assertNotNull(taskValueConverter);\n  assertNotNull(taskHeaderConverter);\n  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n  EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);\n  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);\n  plugins.connectorClass(WorkerTestConnector.class.getName());\n  EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n  workerTask.stop();\n  EasyMock.expectLastCall();\n  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n  EasyMock.expectLastCall();\n  workerTask.removeMetrics();\n  EasyMock.expectLastCall();\n  expectStopStorage();\n  expectClusterId();\n  PowerMock.replayAll();\n  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy);\n  worker.herder=herder;\n  worker.start();\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);\n  assertStatistics(worker,0,1);\n  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());\n  worker.stopAndAwaitTask(TASK_ID);\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.stop();\n  assertStatistics(worker,0,0);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 388,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 658,
        "startColumnNumber" : 8,
        "endLineNumber" : 658,
        "endColumnNumber" : 88
      },
      "nodeContext" : "expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.connect.runtime.isolation.Plugins.ClassLoaderUsage"
  }, {
    "nodeContext" : "ClassLoaderUsage",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 659,
      "startColumnNumber" : 34,
      "endLineNumber" : 659,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 659,
        "startColumnNumber" : 34,
        "endLineNumber" : 659,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ClassLoaderUsage.CURRENT_CLASSLOADER",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 659,
        "startColumnNumber" : 8,
        "endLineNumber" : 659,
        "endColumnNumber" : 91
      },
      "nodeContext" : "expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 659,
        "startColumnNumber" : 8,
        "endLineNumber" : 659,
        "endColumnNumber" : 92
      },
      "nodeContext" : "expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3492,
        "startLineNumber" : 632,
        "startColumnNumber" : 53,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  expectConverters();\n  expectStartStorage();\n  expectFileConfigProvider();\n  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n  expectNewWorkerTask();\n  Map<String,String> origProps=new HashMap<>();\n  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());\n  TaskConfig taskConfig=new TaskConfig(origProps);\n  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n  EasyMock.expect(task.version()).andReturn(\"1.0\");\n  workerTask.initialize(taskConfig);\n  EasyMock.expectLastCall();\n  assertNotNull(taskKeyConverter);\n  assertNotNull(taskValueConverter);\n  assertNotNull(taskHeaderConverter);\n  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n  EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);\n  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);\n  plugins.connectorClass(WorkerTestConnector.class.getName());\n  EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n  workerTask.stop();\n  EasyMock.expectLastCall();\n  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n  EasyMock.expectLastCall();\n  workerTask.removeMetrics();\n  EasyMock.expectLastCall();\n  expectStopStorage();\n  expectClusterId();\n  PowerMock.replayAll();\n  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy);\n  worker.herder=herder;\n  worker.start();\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);\n  assertStatistics(worker,0,1);\n  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());\n  worker.stopAndAwaitTask(TASK_ID);\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.stop();\n  assertStatistics(worker,0,0);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3551,
        "startLineNumber" : 631,
        "startColumnNumber" : 4,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddRemoveTask() throws Exception {\n  expectConverters();\n  expectStartStorage();\n  expectFileConfigProvider();\n  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n  expectNewWorkerTask();\n  Map<String,String> origProps=new HashMap<>();\n  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());\n  TaskConfig taskConfig=new TaskConfig(origProps);\n  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n  EasyMock.expect(task.version()).andReturn(\"1.0\");\n  workerTask.initialize(taskConfig);\n  EasyMock.expectLastCall();\n  assertNotNull(taskKeyConverter);\n  assertNotNull(taskValueConverter);\n  assertNotNull(taskHeaderConverter);\n  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n  EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);\n  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);\n  plugins.connectorClass(WorkerTestConnector.class.getName());\n  EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n  workerTask.stop();\n  EasyMock.expectLastCall();\n  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n  EasyMock.expectLastCall();\n  workerTask.removeMetrics();\n  EasyMock.expectLastCall();\n  expectStopStorage();\n  expectClusterId();\n  PowerMock.replayAll();\n  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy);\n  worker.herder=herder;\n  worker.start();\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);\n  assertStatistics(worker,0,1);\n  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());\n  worker.stopAndAwaitTask(TASK_ID);\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.stop();\n  assertStatistics(worker,0,0);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 388,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 659,
        "startColumnNumber" : 8,
        "endLineNumber" : 659,
        "endColumnNumber" : 92
      },
      "nodeContext" : "expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.connect.runtime.isolation.Plugins.ClassLoaderUsage"
  }, {
    "nodeContext" : "ClassLoaderUsage",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 660,
      "startColumnNumber" : 34,
      "endLineNumber" : 660,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 660,
        "startColumnNumber" : 34,
        "endLineNumber" : 660,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ClassLoaderUsage.CURRENT_CLASSLOADER",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 660,
        "startColumnNumber" : 8,
        "endLineNumber" : 660,
        "endColumnNumber" : 92
      },
      "nodeContext" : "expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 660,
        "startColumnNumber" : 8,
        "endLineNumber" : 660,
        "endColumnNumber" : 93
      },
      "nodeContext" : "expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3492,
        "startLineNumber" : 632,
        "startColumnNumber" : 53,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  expectConverters();\n  expectStartStorage();\n  expectFileConfigProvider();\n  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n  expectNewWorkerTask();\n  Map<String,String> origProps=new HashMap<>();\n  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());\n  TaskConfig taskConfig=new TaskConfig(origProps);\n  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n  EasyMock.expect(task.version()).andReturn(\"1.0\");\n  workerTask.initialize(taskConfig);\n  EasyMock.expectLastCall();\n  assertNotNull(taskKeyConverter);\n  assertNotNull(taskValueConverter);\n  assertNotNull(taskHeaderConverter);\n  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n  EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);\n  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);\n  plugins.connectorClass(WorkerTestConnector.class.getName());\n  EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n  workerTask.stop();\n  EasyMock.expectLastCall();\n  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n  EasyMock.expectLastCall();\n  workerTask.removeMetrics();\n  EasyMock.expectLastCall();\n  expectStopStorage();\n  expectClusterId();\n  PowerMock.replayAll();\n  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy);\n  worker.herder=herder;\n  worker.start();\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);\n  assertStatistics(worker,0,1);\n  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());\n  worker.stopAndAwaitTask(TASK_ID);\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.stop();\n  assertStatistics(worker,0,0);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 380,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3551,
        "startLineNumber" : 631,
        "startColumnNumber" : 4,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAddRemoveTask() throws Exception {\n  expectConverters();\n  expectStartStorage();\n  expectFileConfigProvider();\n  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n  expectNewWorkerTask();\n  Map<String,String> origProps=new HashMap<>();\n  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());\n  TaskConfig taskConfig=new TaskConfig(origProps);\n  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n  EasyMock.expect(task.version()).andReturn(\"1.0\");\n  workerTask.initialize(taskConfig);\n  EasyMock.expectLastCall();\n  assertNotNull(taskKeyConverter);\n  assertNotNull(taskValueConverter);\n  assertNotNull(taskHeaderConverter);\n  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);\n  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);\n  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n  EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);\n  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);\n  plugins.connectorClass(WorkerTestConnector.class.getName());\n  EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n  workerTask.stop();\n  EasyMock.expectLastCall();\n  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n  EasyMock.expectLastCall();\n  workerTask.removeMetrics();\n  EasyMock.expectLastCall();\n  expectStopStorage();\n  expectClusterId();\n  PowerMock.replayAll();\n  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore,executorService,noneConnectorClientConfigOverridePolicy);\n  worker.herder=herder;\n  worker.start();\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);\n  assertStatistics(worker,0,1);\n  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());\n  worker.stopAndAwaitTask(TASK_ID);\n  assertStatistics(worker,0,0);\n  assertEquals(Collections.emptySet(),worker.taskIds());\n  worker.stop();\n  assertStatistics(worker,0,0);\n  PowerMock.verifyAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 388,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 660,
        "startColumnNumber" : 8,
        "endLineNumber" : 660,
        "endColumnNumber" : 93
      },
      "nodeContext" : "expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.connect.runtime.isolation.Plugins.ClassLoaderUsage"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 658,
    "startColumnNumber" : 32,
    "endLineNumber" : 658,
    "endColumnNumber" : 48
  }, {
    "charLength" : 16,
    "startLineNumber" : 659,
    "startColumnNumber" : 34,
    "endLineNumber" : 659,
    "endColumnNumber" : 50
  }, {
    "charLength" : 16,
    "startLineNumber" : 660,
    "startColumnNumber" : 34,
    "endLineNumber" : 660,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}