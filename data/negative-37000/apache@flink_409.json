{
  "id" : 409,
  "expression" : "fieldSerializerSnapshots",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshot.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "fieldSerializerSnapshots",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 206,
      "startColumnNumber" : 71,
      "endLineNumber" : 206,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 206,
        "startColumnNumber" : 16,
        "endLineNumber" : 206,
        "endColumnNumber" : 96
      },
      "nodeContext" : "getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 205,
        "startColumnNumber" : 49,
        "endLineNumber" : 206,
        "endColumnNumber" : 96
      },
      "nodeContext" : "preExistingFieldSerializersCompatibility=getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 206,
        "endColumnNumber" : 97
      },
      "nodeContext" : "final IntermediateCompatibilityResult<T> preExistingFieldSerializersCompatibility=getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3309,
        "startLineNumber" : 176,
        "startColumnNumber" : 45,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (newSerializer.getClass() != PojoSerializer.class) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final PojoSerializer<T> newPojoSerializer=(PojoSerializer<T>)newSerializer;\n  final Class<T> previousPojoClass=snapshotData.getPojoClass();\n  final LinkedOptionalMap<Field,TypeSerializerSnapshot<?>> fieldSerializerSnapshots=snapshotData.getFieldSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots=snapshotData.getRegisteredSubclassSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots=snapshotData.getNonRegisteredSubclassSerializerSnapshots();\n  if (previousPojoClass != newPojoSerializer.getPojoClass()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (registeredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (nonRegisteredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingFieldSerializersCompatibility=getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots);\n  if (preExistingFieldSerializersCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility=getCompatibilityOfPreExistingRegisteredSubclasses(newPojoSerializer,registeredSubclassSerializerSnapshots);\n  if (preExistingRegistrationsCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleAfterMigration();\n  }\n  if (newPojoSerializerIsCompatibleWithReconfiguredSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,registeredSubclassSerializerSnapshots,nonRegisteredSubclassSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleWithReconfiguredSerializer(constructReconfiguredPojoSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,registeredSubclassSerializerSnapshots,preExistingRegistrationsCompatibility,nonRegisteredSubclassSerializerSnapshots));\n  }\n  return TypeSerializerSchemaCompatibility.compatibleAsIs();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3440,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer){\n  if (newSerializer.getClass() != PojoSerializer.class) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final PojoSerializer<T> newPojoSerializer=(PojoSerializer<T>)newSerializer;\n  final Class<T> previousPojoClass=snapshotData.getPojoClass();\n  final LinkedOptionalMap<Field,TypeSerializerSnapshot<?>> fieldSerializerSnapshots=snapshotData.getFieldSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots=snapshotData.getRegisteredSubclassSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots=snapshotData.getNonRegisteredSubclassSerializerSnapshots();\n  if (previousPojoClass != newPojoSerializer.getPojoClass()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (registeredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (nonRegisteredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingFieldSerializersCompatibility=getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots);\n  if (preExistingFieldSerializersCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility=getCompatibilityOfPreExistingRegisteredSubclasses(newPojoSerializer,registeredSubclassSerializerSnapshots);\n  if (preExistingRegistrationsCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleAfterMigration();\n  }\n  if (newPojoSerializerIsCompatibleWithReconfiguredSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,registeredSubclassSerializerSnapshots,nonRegisteredSubclassSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleWithReconfiguredSerializer(constructReconfiguredPojoSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,registeredSubclassSerializerSnapshots,preExistingRegistrationsCompatibility,nonRegisteredSubclassSerializerSnapshots));\n  }\n  return TypeSerializerSchemaCompatibility.compatibleAsIs();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 206,
        "startColumnNumber" : 16,
        "endLineNumber" : 206,
        "endColumnNumber" : 96
      },
      "nodeContext" : "getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.util.LinkedOptionalMap<java.lang.reflect.Field,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot<?>>"
  }, {
    "nodeContext" : "fieldSerializerSnapshots",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 224,
      "startColumnNumber" : 16,
      "endLineNumber" : 224,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 41
      },
      "nodeContext" : "newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 220,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)) {\n  return TypeSerializerSchemaCompatibility.compatibleAfterMigration();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3309,
        "startLineNumber" : 176,
        "startColumnNumber" : 45,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (newSerializer.getClass() != PojoSerializer.class) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final PojoSerializer<T> newPojoSerializer=(PojoSerializer<T>)newSerializer;\n  final Class<T> previousPojoClass=snapshotData.getPojoClass();\n  final LinkedOptionalMap<Field,TypeSerializerSnapshot<?>> fieldSerializerSnapshots=snapshotData.getFieldSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots=snapshotData.getRegisteredSubclassSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots=snapshotData.getNonRegisteredSubclassSerializerSnapshots();\n  if (previousPojoClass != newPojoSerializer.getPojoClass()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (registeredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (nonRegisteredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingFieldSerializersCompatibility=getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots);\n  if (preExistingFieldSerializersCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility=getCompatibilityOfPreExistingRegisteredSubclasses(newPojoSerializer,registeredSubclassSerializerSnapshots);\n  if (preExistingRegistrationsCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleAfterMigration();\n  }\n  if (newPojoSerializerIsCompatibleWithReconfiguredSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,registeredSubclassSerializerSnapshots,nonRegisteredSubclassSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleWithReconfiguredSerializer(constructReconfiguredPojoSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,registeredSubclassSerializerSnapshots,preExistingRegistrationsCompatibility,nonRegisteredSubclassSerializerSnapshots));\n  }\n  return TypeSerializerSchemaCompatibility.compatibleAsIs();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3440,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public TypeSerializerSchemaCompatibility<T> resolveSchemaCompatibility(TypeSerializer<T> newSerializer){\n  if (newSerializer.getClass() != PojoSerializer.class) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final PojoSerializer<T> newPojoSerializer=(PojoSerializer<T>)newSerializer;\n  final Class<T> previousPojoClass=snapshotData.getPojoClass();\n  final LinkedOptionalMap<Field,TypeSerializerSnapshot<?>> fieldSerializerSnapshots=snapshotData.getFieldSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots=snapshotData.getRegisteredSubclassSerializerSnapshots();\n  final LinkedOptionalMap<Class<?>,TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots=snapshotData.getNonRegisteredSubclassSerializerSnapshots();\n  if (previousPojoClass != newPojoSerializer.getPojoClass()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (registeredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (nonRegisteredSubclassSerializerSnapshots.hasAbsentKeysOrValues()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingFieldSerializersCompatibility=getCompatibilityOfPreExistingFields(newPojoSerializer,fieldSerializerSnapshots);\n  if (preExistingFieldSerializersCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  final IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility=getCompatibilityOfPreExistingRegisteredSubclasses(newPojoSerializer,registeredSubclassSerializerSnapshots);\n  if (preExistingRegistrationsCompatibility.isIncompatible()) {\n    return TypeSerializerSchemaCompatibility.incompatible();\n  }\n  if (newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleAfterMigration();\n  }\n  if (newPojoSerializerIsCompatibleWithReconfiguredSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,registeredSubclassSerializerSnapshots,nonRegisteredSubclassSerializerSnapshots)) {\n    return TypeSerializerSchemaCompatibility.compatibleWithReconfiguredSerializer(constructReconfiguredPojoSerializer(newPojoSerializer,preExistingFieldSerializersCompatibility,registeredSubclassSerializerSnapshots,preExistingRegistrationsCompatibility,nonRegisteredSubclassSerializerSnapshots));\n  }\n  return TypeSerializerSchemaCompatibility.compatibleAsIs();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 234,
        "startLineNumber" : 220,
        "startColumnNumber" : 12,
        "endLineNumber" : 224,
        "endColumnNumber" : 41
      },
      "nodeContext" : "newPojoSerializerIsCompatibleAfterMigration(newPojoSerializer,preExistingFieldSerializersCompatibility,preExistingRegistrationsCompatibility,fieldSerializerSnapshots)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.util.LinkedOptionalMap<java.lang.reflect.Field,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot<?>>"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 206,
    "startColumnNumber" : 71,
    "endLineNumber" : 206,
    "endColumnNumber" : 95
  }, {
    "charLength" : 24,
    "startLineNumber" : 224,
    "startColumnNumber" : 16,
    "endLineNumber" : 224,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}