{
  "id" : 319,
  "expression" : "config.getWebServicePortTls().get()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-proxy/src/main/java/org/apache/pulsar/proxy/server/WebServer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config.getWebServicePortTls().get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 127,
      "startColumnNumber" : 37,
      "endLineNumber" : 127,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 73
      },
      "nodeContext" : "connectorTls.setPort(config.getWebServicePortTls().get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 74
      },
      "nodeContext" : "connectorTls.setPort(config.getWebServicePortTls().get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1659,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  SslContextFactory sslCtxFactory;\n  if (config.isTlsEnabledWithKeyStore()) {\n    sslCtxFactory=KeyStoreSSLContext.createSslContextFactory(config.getTlsProvider(),config.getTlsKeyStoreType(),config.getTlsKeyStore(),config.getTlsKeyStorePassword(),config.isTlsAllowInsecureConnection(),config.getTlsTrustStoreType(),config.getTlsTrustStore(),config.getTlsTrustStorePassword(),config.isTlsRequireTrustedClientCertOnConnect(),config.getTlsCertRefreshCheckDurationSec());\n  }\n else {\n    sslCtxFactory=SecurityUtility.createSslContextFactory(config.isTlsAllowInsecureConnection(),config.getTlsTrustCertsFilePath(),config.getTlsCertificateFilePath(),config.getTlsKeyFilePath(),config.isTlsRequireTrustedClientCertOnConnect(),true,config.getTlsCertRefreshCheckDurationSec());\n  }\n  connectorTls=new ServerConnector(server,1,1,sslCtxFactory);\n  connectorTls.setPort(config.getWebServicePortTls().get());\n  connectorTls.setHost(config.getBindAddress());\n  connectors.add(connectorTls);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1746,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 132,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  SslContextFactory sslCtxFactory;\n  if (config.isTlsEnabledWithKeyStore()) {\n    sslCtxFactory=KeyStoreSSLContext.createSslContextFactory(config.getTlsProvider(),config.getTlsKeyStoreType(),config.getTlsKeyStore(),config.getTlsKeyStorePassword(),config.isTlsAllowInsecureConnection(),config.getTlsTrustStoreType(),config.getTlsTrustStore(),config.getTlsTrustStorePassword(),config.isTlsRequireTrustedClientCertOnConnect(),config.getTlsCertRefreshCheckDurationSec());\n  }\n else {\n    sslCtxFactory=SecurityUtility.createSslContextFactory(config.isTlsAllowInsecureConnection(),config.getTlsTrustCertsFilePath(),config.getTlsCertificateFilePath(),config.getTlsKeyFilePath(),config.isTlsRequireTrustedClientCertOnConnect(),true,config.getTlsCertRefreshCheckDurationSec());\n  }\n  connectorTls=new ServerConnector(server,1,1,sslCtxFactory);\n  connectorTls.setPort(config.getWebServicePortTls().get());\n  connectorTls.setHost(config.getBindAddress());\n  connectors.add(connectorTls);\n}\n catch (Exception e) {\n  throw new RuntimeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 116,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1770,
        "startLineNumber" : 100,
        "startColumnNumber" : 55,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    SslContextFactory sslCtxFactory;\n    if (config.isTlsEnabledWithKeyStore()) {\n      sslCtxFactory=KeyStoreSSLContext.createSslContextFactory(config.getTlsProvider(),config.getTlsKeyStoreType(),config.getTlsKeyStore(),config.getTlsKeyStorePassword(),config.isTlsAllowInsecureConnection(),config.getTlsTrustStoreType(),config.getTlsTrustStore(),config.getTlsTrustStorePassword(),config.isTlsRequireTrustedClientCertOnConnect(),config.getTlsCertRefreshCheckDurationSec());\n    }\n else {\n      sslCtxFactory=SecurityUtility.createSslContextFactory(config.isTlsAllowInsecureConnection(),config.getTlsTrustCertsFilePath(),config.getTlsCertificateFilePath(),config.getTlsKeyFilePath(),config.isTlsRequireTrustedClientCertOnConnect(),true,config.getTlsCertRefreshCheckDurationSec());\n    }\n    connectorTls=new ServerConnector(server,1,1,sslCtxFactory);\n    connectorTls.setPort(config.getWebServicePortTls().get());\n    connectorTls.setHost(config.getBindAddress());\n    connectors.add(connectorTls);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1817,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config.getWebServicePortTls().isPresent()) {\n  try {\n    SslContextFactory sslCtxFactory;\n    if (config.isTlsEnabledWithKeyStore()) {\n      sslCtxFactory=KeyStoreSSLContext.createSslContextFactory(config.getTlsProvider(),config.getTlsKeyStoreType(),config.getTlsKeyStore(),config.getTlsKeyStorePassword(),config.isTlsAllowInsecureConnection(),config.getTlsTrustStoreType(),config.getTlsTrustStore(),config.getTlsTrustStorePassword(),config.isTlsRequireTrustedClientCertOnConnect(),config.getTlsCertRefreshCheckDurationSec());\n    }\n else {\n      sslCtxFactory=SecurityUtility.createSslContextFactory(config.isTlsAllowInsecureConnection(),config.getTlsTrustCertsFilePath(),config.getTlsCertificateFilePath(),config.getTlsKeyFilePath(),config.isTlsRequireTrustedClientCertOnConnect(),true,config.getTlsCertRefreshCheckDurationSec());\n    }\n    connectorTls=new ServerConnector(server,1,1,sslCtxFactory);\n    connectorTls.setPort(config.getWebServicePortTls().get());\n    connectorTls.setHost(config.getBindAddress());\n    connectors.add(connectorTls);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2957,
        "startLineNumber" : 82,
        "startColumnNumber" : 112,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.webServiceExecutor=new WebExecutorThreadPool(config.getHttpNumThreads(),\"pulsar-external-web\");\n  this.server=new Server(webServiceExecutor);\n  this.authenticationService=authenticationService;\n  this.config=config;\n  List<ServerConnector> connectors=Lists.newArrayList();\n  HttpConfiguration http_config=new HttpConfiguration();\n  http_config.setOutputBufferSize(config.getHttpOutputBufferSize());\n  if (config.getWebServicePort().isPresent()) {\n    this.externalServicePort=config.getWebServicePort().get();\n    connector=new ServerConnector(server,1,1,new HttpConnectionFactory(http_config));\n    connector.setHost(config.getBindAddress());\n    connector.setPort(externalServicePort);\n    connectors.add(connector);\n  }\n  if (config.getWebServicePortTls().isPresent()) {\n    try {\n      SslContextFactory sslCtxFactory;\n      if (config.isTlsEnabledWithKeyStore()) {\n        sslCtxFactory=KeyStoreSSLContext.createSslContextFactory(config.getTlsProvider(),config.getTlsKeyStoreType(),config.getTlsKeyStore(),config.getTlsKeyStorePassword(),config.isTlsAllowInsecureConnection(),config.getTlsTrustStoreType(),config.getTlsTrustStore(),config.getTlsTrustStorePassword(),config.isTlsRequireTrustedClientCertOnConnect(),config.getTlsCertRefreshCheckDurationSec());\n      }\n else {\n        sslCtxFactory=SecurityUtility.createSslContextFactory(config.isTlsAllowInsecureConnection(),config.getTlsTrustCertsFilePath(),config.getTlsCertificateFilePath(),config.getTlsKeyFilePath(),config.isTlsRequireTrustedClientCertOnConnect(),true,config.getTlsCertRefreshCheckDurationSec());\n      }\n      connectorTls=new ServerConnector(server,1,1,sslCtxFactory);\n      connectorTls.setPort(config.getWebServicePortTls().get());\n      connectorTls.setHost(config.getBindAddress());\n      connectors.add(connectorTls);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  connectors.stream().forEach(c -> c.setAcceptQueueSize(1024 / connectors.size()));\n  server.setConnectors(connectors.toArray(new ServerConnector[connectors.size()]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3065,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public WebServer(ProxyConfiguration config,AuthenticationService authenticationService) throws IOException {\n  this.webServiceExecutor=new WebExecutorThreadPool(config.getHttpNumThreads(),\"pulsar-external-web\");\n  this.server=new Server(webServiceExecutor);\n  this.authenticationService=authenticationService;\n  this.config=config;\n  List<ServerConnector> connectors=Lists.newArrayList();\n  HttpConfiguration http_config=new HttpConfiguration();\n  http_config.setOutputBufferSize(config.getHttpOutputBufferSize());\n  if (config.getWebServicePort().isPresent()) {\n    this.externalServicePort=config.getWebServicePort().get();\n    connector=new ServerConnector(server,1,1,new HttpConnectionFactory(http_config));\n    connector.setHost(config.getBindAddress());\n    connector.setPort(externalServicePort);\n    connectors.add(connector);\n  }\n  if (config.getWebServicePortTls().isPresent()) {\n    try {\n      SslContextFactory sslCtxFactory;\n      if (config.isTlsEnabledWithKeyStore()) {\n        sslCtxFactory=KeyStoreSSLContext.createSslContextFactory(config.getTlsProvider(),config.getTlsKeyStoreType(),config.getTlsKeyStore(),config.getTlsKeyStorePassword(),config.isTlsAllowInsecureConnection(),config.getTlsTrustStoreType(),config.getTlsTrustStore(),config.getTlsTrustStorePassword(),config.isTlsRequireTrustedClientCertOnConnect(),config.getTlsCertRefreshCheckDurationSec());\n      }\n else {\n        sslCtxFactory=SecurityUtility.createSslContextFactory(config.isTlsAllowInsecureConnection(),config.getTlsTrustCertsFilePath(),config.getTlsCertificateFilePath(),config.getTlsKeyFilePath(),config.isTlsRequireTrustedClientCertOnConnect(),true,config.getTlsCertRefreshCheckDurationSec());\n      }\n      connectorTls=new ServerConnector(server,1,1,sslCtxFactory);\n      connectorTls.setPort(config.getWebServicePortTls().get());\n      connectorTls.setHost(config.getBindAddress());\n      connectors.add(connectorTls);\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  connectors.stream().forEach(c -> c.setAcceptQueueSize(1024 / connectors.size()));\n  server.setConnectors(connectors.toArray(new ServerConnector[connectors.size()]));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 275,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 74
      },
      "nodeContext" : "connectorTls.setPort(config.getWebServicePortTls().get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 127,
    "startColumnNumber" : 37,
    "endLineNumber" : 127,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}