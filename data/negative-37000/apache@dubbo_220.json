{
  "id" : 220,
  "expression" : "Boolean.TRUE.toString()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean.TRUE.toString()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 58,
      "startColumnNumber" : 23,
      "endLineNumber" : 58,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 58,
        "startColumnNumber" : 23,
        "endLineNumber" : 58,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Boolean.TRUE.toString().equalsIgnoreCase(value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 58,
        "startColumnNumber" : 19,
        "endLineNumber" : 60,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\n  return getMockedInvokers(invokers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (value == null) {\n  return getNormalInvokers(invokers);\n}\n else if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\n  return getMockedInvokers(invokers);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 54,
        "startColumnNumber" : 15,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String value=(String)invocation.getObjectAttachments().get(INVOCATION_NEED_MOCK);\n  if (value == null) {\n    return getNormalInvokers(invokers);\n  }\n else   if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\n    return getMockedInvokers(invokers);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (invocation.getObjectAttachments() == null) {\n  return getNormalInvokers(invokers);\n}\n else {\n  String value=(String)invocation.getObjectAttachments().get(INVOCATION_NEED_MOCK);\n  if (value == null) {\n    return getNormalInvokers(invokers);\n  }\n else   if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\n    return getMockedInvokers(invokers);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 575,
        "startLineNumber" : 47,
        "startColumnNumber" : 96,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (CollectionUtils.isEmpty(invokers)) {\n    return invokers;\n  }\n  if (invocation.getObjectAttachments() == null) {\n    return getNormalInvokers(invokers);\n  }\n else {\n    String value=(String)invocation.getObjectAttachments().get(INVOCATION_NEED_MOCK);\n    if (value == null) {\n      return getNormalInvokers(invokers);\n    }\n else     if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\n      return getMockedInvokers(invokers);\n    }\n  }\n  return invokers;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 752,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public <T>List<Invoker<T>> route(final List<Invoker<T>> invokers,URL url,final Invocation invocation) throws RpcException {\n  if (CollectionUtils.isEmpty(invokers)) {\n    return invokers;\n  }\n  if (invocation.getObjectAttachments() == null) {\n    return getNormalInvokers(invokers);\n  }\n else {\n    String value=(String)invocation.getObjectAttachments().get(INVOCATION_NEED_MOCK);\n    if (value == null) {\n      return getNormalInvokers(invokers);\n    }\n else     if (Boolean.TRUE.toString().equalsIgnoreCase(value)) {\n      return getMockedInvokers(invokers);\n    }\n  }\n  return invokers;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 97,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 58,
        "startColumnNumber" : 23,
        "endLineNumber" : 58,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Boolean.TRUE.toString().equalsIgnoreCase(value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 58,
    "startColumnNumber" : 23,
    "endLineNumber" : 58,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}