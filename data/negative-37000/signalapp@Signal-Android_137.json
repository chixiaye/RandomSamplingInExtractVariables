{
  "id" : 137,
  "expression" : "null",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/database/helpers/PreKeyMigrationHelper.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 43,
      "startColumnNumber" : 23,
      "endLineNumber" : 43,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 27
      },
      "nodeContext" : "preKeyFiles != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 945,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (preKeyFiles != null) {\n  for (  File preKeyFile : preKeyFiles) {\n    if (!\"index.dat\".equals(preKeyFile.getName())) {\n      try {\n        PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n        contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n        contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n        database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n        Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n      }\n catch (      IOException|InvalidMessageException e) {\n        Log.w(TAG,e);\n        clean=false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3722,
        "startLineNumber" : 39,
        "startColumnNumber" : 74,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3794,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static boolean migratePreKeys(Context context,SQLiteDatabase database){\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 27
      },
      "nodeContext" : "preKeyFiles != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 53,
      "startColumnNumber" : 62,
      "endLineNumber" : 53,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 82
      },
      "nodeContext" : "database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 83
      },
      "nodeContext" : "database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 46,
        "startColumnNumber" : 14,
        "endLineNumber" : 55,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n  contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n  contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n  database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n  Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 46,
        "startColumnNumber" : 10,
        "endLineNumber" : 58,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n  contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n  contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n  database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n  Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n}\n catch (IOException|InvalidMessageException e) {\n  Log.w(TAG,e);\n  clean=false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 103,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 805,
        "startLineNumber" : 45,
        "startColumnNumber" : 55,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n    contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n    contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n    database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n    Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n  }\n catch (  IOException|InvalidMessageException e) {\n    Log.w(TAG,e);\n    clean=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!\"index.dat\".equals(preKeyFile.getName())) {\n  try {\n    PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n    contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n    contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n    database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n    Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n  }\n catch (  IOException|InvalidMessageException e) {\n    Log.w(TAG,e);\n    clean=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 870,
        "startLineNumber" : 44,
        "startColumnNumber" : 42,
        "endLineNumber" : 60,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (!\"index.dat\".equals(preKeyFile.getName())) {\n    try {\n      PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n      contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n      contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n      database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n      Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n    }\n catch (    IOException|InvalidMessageException e) {\n      Log.w(TAG,e);\n      clean=false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 906,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 60,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (File preKeyFile : preKeyFiles) {\n  if (!\"index.dat\".equals(preKeyFile.getName())) {\n    try {\n      PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n      contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n      contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n      database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n      Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n    }\n catch (    IOException|InvalidMessageException e) {\n      Log.w(TAG,e);\n      clean=false;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 119,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 920,
        "startLineNumber" : 43,
        "startColumnNumber" : 29,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  File preKeyFile : preKeyFiles) {\n    if (!\"index.dat\".equals(preKeyFile.getName())) {\n      try {\n        PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n        contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n        contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n        database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n        Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n      }\n catch (      IOException|InvalidMessageException e) {\n        Log.w(TAG,e);\n        clean=false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 945,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (preKeyFiles != null) {\n  for (  File preKeyFile : preKeyFiles) {\n    if (!\"index.dat\".equals(preKeyFile.getName())) {\n      try {\n        PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n        contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n        contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n        database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n        Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n      }\n catch (      IOException|InvalidMessageException e) {\n        Log.w(TAG,e);\n        clean=false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 124,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3722,
        "startLineNumber" : 39,
        "startColumnNumber" : 74,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3794,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static boolean migratePreKeys(Context context,SQLiteDatabase database){\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 83
      },
      "nodeContext" : "database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 65,
      "startColumnNumber" : 29,
      "endLineNumber" : 65,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 33
      },
      "nodeContext" : "signedPreKeyFiles != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1215,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (signedPreKeyFiles != null) {\n  for (  File signedPreKeyFile : signedPreKeyFiles) {\n    if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n      try {\n        SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n        contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n        contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n        contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n        contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n        database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n        Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n      }\n catch (      IOException|InvalidMessageException e) {\n        Log.w(TAG,e);\n        clean=false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3722,
        "startLineNumber" : 39,
        "startColumnNumber" : 74,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3794,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static boolean migratePreKeys(Context context,SQLiteDatabase database){\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 33
      },
      "nodeContext" : "signedPreKeyFiles != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 77,
      "startColumnNumber" : 61,
      "endLineNumber" : 77,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 81
      },
      "nodeContext" : "database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 82
      },
      "nodeContext" : "database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 909,
        "startLineNumber" : 68,
        "startColumnNumber" : 14,
        "endLineNumber" : 79,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n  contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n  contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n  contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n  contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n  database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n  Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 68,
        "startColumnNumber" : 10,
        "endLineNumber" : 82,
        "endColumnNumber" : 11
      },
      "nodeContext" : "try {\n  SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n  ContentValues contentValues=new ContentValues();\n  contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n  contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n  contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n  contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n  contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n  database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n  Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n}\n catch (IOException|InvalidMessageException e) {\n  Log.w(TAG,e);\n  clean=false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 126,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 67,
        "startColumnNumber" : 61,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n    contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n    contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n    contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n    contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n    database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n    Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n  }\n catch (  IOException|InvalidMessageException e) {\n    Log.w(TAG,e);\n    clean=false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1104,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n  try {\n    SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n    ContentValues contentValues=new ContentValues();\n    contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n    contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n    contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n    contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n    contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n    database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n    Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n  }\n catch (  IOException|InvalidMessageException e) {\n    Log.w(TAG,e);\n    clean=false;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 135,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1122,
        "startLineNumber" : 66,
        "startColumnNumber" : 54,
        "endLineNumber" : 84,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n    try {\n      SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n      contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n      contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n      contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n      contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n      database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n      Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n    }\n catch (    IOException|InvalidMessageException e) {\n      Log.w(TAG,e);\n      clean=false;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1170,
        "startLineNumber" : 66,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (File signedPreKeyFile : signedPreKeyFiles) {\n  if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n    try {\n      SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n      ContentValues contentValues=new ContentValues();\n      contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n      contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n      contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n      contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n      contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n      database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n      Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n    }\n catch (    IOException|InvalidMessageException e) {\n      Log.w(TAG,e);\n      clean=false;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 142,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 65,
        "startColumnNumber" : 35,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  File signedPreKeyFile : signedPreKeyFiles) {\n    if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n      try {\n        SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n        contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n        contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n        contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n        contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n        database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n        Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n      }\n catch (      IOException|InvalidMessageException e) {\n        Log.w(TAG,e);\n        clean=false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1215,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (signedPreKeyFiles != null) {\n  for (  File signedPreKeyFile : signedPreKeyFiles) {\n    if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n      try {\n        SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n        ContentValues contentValues=new ContentValues();\n        contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n        contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n        contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n        contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n        contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n        database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n        Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n      }\n catch (      IOException|InvalidMessageException e) {\n        Log.w(TAG,e);\n        clean=false;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 147,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3722,
        "startLineNumber" : 39,
        "startColumnNumber" : 74,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3794,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static boolean migratePreKeys(Context context,SQLiteDatabase database){\n  File[] preKeyFiles=getPreKeyDirectory(context).listFiles();\n  boolean clean=true;\n  if (preKeyFiles != null) {\n    for (    File preKeyFile : preKeyFiles) {\n      if (!\"index.dat\".equals(preKeyFile.getName())) {\n        try {\n          PreKeyRecord preKey=new PreKeyRecord(loadSerializedRecord(preKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(OneTimePreKeyDatabase.KEY_ID,preKey.getId());\n          contentValues.put(OneTimePreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(preKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(OneTimePreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(preKey.getKeyPair().getPrivateKey().serialize()));\n          database.insert(OneTimePreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated one-time prekey: \" + preKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File[] signedPreKeyFiles=getSignedPreKeyDirectory(context).listFiles();\n  if (signedPreKeyFiles != null) {\n    for (    File signedPreKeyFile : signedPreKeyFiles) {\n      if (!\"index.dat\".equals(signedPreKeyFile.getName())) {\n        try {\n          SignedPreKeyRecord signedPreKey=new SignedPreKeyRecord(loadSerializedRecord(signedPreKeyFile));\n          ContentValues contentValues=new ContentValues();\n          contentValues.put(SignedPreKeyDatabase.KEY_ID,signedPreKey.getId());\n          contentValues.put(SignedPreKeyDatabase.PUBLIC_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPublicKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.PRIVATE_KEY,Base64.encodeBytes(signedPreKey.getKeyPair().getPrivateKey().serialize()));\n          contentValues.put(SignedPreKeyDatabase.SIGNATURE,Base64.encodeBytes(signedPreKey.getSignature()));\n          contentValues.put(SignedPreKeyDatabase.TIMESTAMP,signedPreKey.getTimestamp());\n          database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n          Log.i(TAG,\"Migrated signed prekey: \" + signedPreKey.getId());\n        }\n catch (        IOException|InvalidMessageException e) {\n          Log.w(TAG,e);\n          clean=false;\n        }\n      }\n    }\n  }\n  File oneTimePreKeyIndex=new File(getPreKeyDirectory(context),PreKeyIndex.FILE_NAME);\n  File signedPreKeyIndex=new File(getSignedPreKeyDirectory(context),SignedPreKeyIndex.FILE_NAME);\n  if (oneTimePreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(oneTimePreKeyIndex));\n      PreKeyIndex index=JsonUtils.fromJson(reader,PreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next prekey id: \" + index.nextPreKeyId);\n      TextSecurePreferences.setNextPreKeyId(context,index.nextPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  if (signedPreKeyIndex.exists()) {\n    try {\n      InputStreamReader reader=new InputStreamReader(new FileInputStream(signedPreKeyIndex));\n      SignedPreKeyIndex index=JsonUtils.fromJson(reader,SignedPreKeyIndex.class);\n      reader.close();\n      Log.i(TAG,\"Setting next signed prekey id: \" + index.nextSignedPreKeyId);\n      Log.i(TAG,\"Setting active signed prekey id: \" + index.activeSignedPreKeyId);\n      TextSecurePreferences.setNextSignedPreKeyId(context,index.nextSignedPreKeyId);\n      TextSecurePreferences.setActiveSignedPreKeyId(context,index.activeSignedPreKeyId);\n    }\n catch (    IOException e) {\n      Log.w(TAG,e);\n    }\n  }\n  return clean;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 82
      },
      "nodeContext" : "database.insert(SignedPreKeyDatabase.TABLE_NAME,null,contentValues);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 43,
    "startColumnNumber" : 23,
    "endLineNumber" : 43,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 53,
    "startColumnNumber" : 62,
    "endLineNumber" : 53,
    "endColumnNumber" : 66
  }, {
    "charLength" : 4,
    "startLineNumber" : 65,
    "startColumnNumber" : 29,
    "endLineNumber" : 65,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 77,
    "startColumnNumber" : 61,
    "endLineNumber" : 77,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 10
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 9
  } ]
}