{
  "id" : 142,
  "expression" : "\"name 2\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriterTests.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"name 2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 101,
      "startColumnNumber" : 19,
      "endLineNumber" : 101,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 41
      },
      "nodeContext" : "bodyBuilder.part(\"name 2\",\"value 2+1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bodyBuilder.part(\"name 2\",\"value 2+1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3097,
        "startLineNumber" : 86,
        "startColumnNumber" : 47,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 516,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3150,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void writeMultipart() throws Exception {\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 524,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bodyBuilder.part(\"name 2\",\"value 2+1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"name 2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 102,
      "startColumnNumber" : 19,
      "endLineNumber" : 102,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 102,
        "endColumnNumber" : 41
      },
      "nodeContext" : "bodyBuilder.part(\"name 2\",\"value 2+2\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 102,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bodyBuilder.part(\"name 2\",\"value 2+2\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3097,
        "startLineNumber" : 86,
        "startColumnNumber" : 47,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 516,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3150,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void writeMultipart() throws Exception {\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 524,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 102,
        "endColumnNumber" : 42
      },
      "nodeContext" : "bodyBuilder.part(\"name 2\",\"value 2+2\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"name 2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 120,
      "startColumnNumber" : 39,
      "endLineNumber" : 120,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 120,
        "startColumnNumber" : 22,
        "endLineNumber" : 120,
        "endColumnNumber" : 48
      },
      "nodeContext" : "requestParts.get(\"name 2\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 120,
        "startColumnNumber" : 13,
        "endLineNumber" : 120,
        "endColumnNumber" : 48
      },
      "nodeContext" : "parts2=requestParts.get(\"name 2\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 49
      },
      "nodeContext" : "List<Part> parts2=requestParts.get(\"name 2\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3097,
        "startLineNumber" : 86,
        "startColumnNumber" : 47,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 516,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3150,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void writeMultipart() throws Exception {\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 524,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 49
      },
      "nodeContext" : "List<Part> parts2=requestParts.get(\"name 2\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"name 2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 124,
      "startColumnNumber" : 15,
      "endLineNumber" : 124,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertEquals(\"name 2\",part.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"name 2\",part.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3097,
        "startLineNumber" : 86,
        "startColumnNumber" : 47,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 516,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3150,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void writeMultipart() throws Exception {\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 524,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 124,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"name 2\",part.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"name 2\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 128,
      "startColumnNumber" : 15,
      "endLineNumber" : 128,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertEquals(\"name 2\",part.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"name 2\",part.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3097,
        "startLineNumber" : 86,
        "startColumnNumber" : 47,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 516,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3150,
        "startLineNumber" : 85,
        "startColumnNumber" : 1,
        "endLineNumber" : 163,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void writeMultipart() throws Exception {\n  Resource logo=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\");\n  Resource utf8=new ClassPathResource(\"/org/springframework/http/converter/logo.jpg\"){\n    @Override public String getFilename(){\n      return \"Hall\\u00F6le.jpg\";\n    }\n  }\n;\n  Publisher<String> publisher=Flux.just(\"foo\",\"bar\",\"baz\");\n  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();\n  bodyBuilder.part(\"name 1\",\"value 1\");\n  bodyBuilder.part(\"name 2\",\"value 2+1\");\n  bodyBuilder.part(\"name 2\",\"value 2+2\");\n  bodyBuilder.part(\"logo\",logo);\n  bodyBuilder.part(\"utf8\",utf8);\n  bodyBuilder.part(\"json\",new Foo(\"bar\"),MediaType.APPLICATION_JSON_UTF8);\n  bodyBuilder.asyncPart(\"publisher\",publisher,String.class);\n  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());\n  Map<String,Object> hints=Collections.emptyMap();\n  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));\n  MultiValueMap<String,Part> requestParts=parse(hints);\n  assertEquals(6,requestParts.size());\n  Part part=requestParts.getFirst(\"name 1\");\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 1\",part.name());\n  assertEquals(\"value 1\",((FormFieldPart)part).value());\n  List<Part> parts2=requestParts.get(\"name 2\");\n  assertEquals(2,parts2.size());\n  part=parts2.get(0);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+1\",((FormFieldPart)part).value());\n  part=parts2.get(1);\n  assertTrue(part instanceof FormFieldPart);\n  assertEquals(\"name 2\",part.name());\n  assertEquals(\"value 2+2\",((FormFieldPart)part).value());\n  part=requestParts.getFirst(\"logo\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"logo\",part.name());\n  assertEquals(\"logo.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(logo.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"utf8\");\n  assertTrue(part instanceof FilePart);\n  assertEquals(\"utf8\",part.name());\n  assertEquals(\"Hall\\u00F6le.jpg\",((FilePart)part).filename());\n  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());\n  assertEquals(utf8.getFile().length(),part.headers().getContentLength());\n  part=requestParts.getFirst(\"json\");\n  assertEquals(\"json\",part.name());\n  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());\n  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"{\\\"bar\\\":\\\"bar\\\"}\",value);\n  part=requestParts.getFirst(\"publisher\");\n  assertEquals(\"publisher\",part.name());\n  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);\n  assertEquals(\"foobarbaz\",value);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 524,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 128,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(\"name 2\",part.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 101,
    "startColumnNumber" : 19,
    "endLineNumber" : 101,
    "endColumnNumber" : 27
  }, {
    "charLength" : 8,
    "startLineNumber" : 102,
    "startColumnNumber" : 19,
    "endLineNumber" : 102,
    "endColumnNumber" : 27
  }, {
    "charLength" : 8,
    "startLineNumber" : 120,
    "startColumnNumber" : 39,
    "endLineNumber" : 120,
    "endColumnNumber" : 47
  }, {
    "charLength" : 8,
    "startLineNumber" : 124,
    "startColumnNumber" : 15,
    "endLineNumber" : 124,
    "endColumnNumber" : 23
  }, {
    "charLength" : 8,
    "startLineNumber" : 128,
    "startColumnNumber" : 15,
    "endLineNumber" : 128,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}