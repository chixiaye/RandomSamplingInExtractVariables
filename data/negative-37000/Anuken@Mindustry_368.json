{
  "id" : 368,
  "expression" : "item.explosiveness",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/power/ItemLiquidGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "item.explosiveness",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 136,
      "startColumnNumber" : 36,
      "endLineNumber" : 136,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 136,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 54
      },
      "nodeContext" : "explosiveness=item.explosiveness",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 136,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 55
      },
      "nodeContext" : "explosiveness=item.explosiveness;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 132,
        "startColumnNumber" : 59,
        "endLineNumber" : 138,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n  Item item=items.take();\n  productionEfficiency=getItemEfficiency(item);\n  explosiveness=item.explosiveness;\n  generateTime=1f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 138,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (generateTime <= 0f && items.total() > 0) {\n  generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n  Item item=items.take();\n  productionEfficiency=getItemEfficiency(item);\n  explosiveness=item.explosiveness;\n  generateTime=1f;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 51,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1266,
        "startLineNumber" : 130,
        "startColumnNumber" : 30,
        "endLineNumber" : 153,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (generateTime <= 0f && items.total() > 0) {\n    generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n    Item item=items.take();\n    productionEfficiency=getItemEfficiency(item);\n    explosiveness=item.explosiveness;\n    generateTime=1f;\n  }\n  if (generateTime > 0f) {\n    generateTime-=Math.min(1f / itemDuration * delta() * power.graph.getUsageFraction(),generateTime);\n    if (randomlyExplode && state.rules.reactorExplosions && Mathf.chance(delta() * 0.06 * Mathf.clamp(explosiveness - 0.5f))) {\n      Core.app.post(() -> {\n        damage(Mathf.random(11f));\n        explodeEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n      }\n);\n    }\n  }\n else {\n    productionEfficiency=0.0f;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1278,
        "startLineNumber" : 130,
        "startColumnNumber" : 18,
        "endLineNumber" : 153,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasItems) {\n  if (generateTime <= 0f && items.total() > 0) {\n    generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n    Item item=items.take();\n    productionEfficiency=getItemEfficiency(item);\n    explosiveness=item.explosiveness;\n    generateTime=1f;\n  }\n  if (generateTime > 0f) {\n    generateTime-=Math.min(1f / itemDuration * delta() * power.graph.getUsageFraction(),generateTime);\n    if (randomlyExplode && state.rules.reactorExplosions && Mathf.chance(delta() * 0.06 * Mathf.clamp(explosiveness - 0.5f))) {\n      Core.app.post(() -> {\n        damage(Mathf.random(11f));\n        explodeEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n      }\n);\n    }\n  }\n else {\n    productionEfficiency=0.0f;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 144,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1944,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 153,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (hasLiquids && liquid != null && liquids.get(liquid) >= 0.001f) {\n  float baseLiquidEfficiency=getLiquidEfficiency(liquid);\n  float maximumPossible=maxLiquidGenerate * calculationDelta;\n  float used=Math.min(liquids.get(liquid) * calculationDelta,maximumPossible);\n  liquids.remove(liquid,used * power.graph.getUsageFraction());\n  productionEfficiency=baseLiquidEfficiency * used / maximumPossible;\n  if (used > 0.001f && Mathf.chance(0.05 * delta())) {\n    generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n  }\n}\n else if (hasItems) {\n  if (generateTime <= 0f && items.total() > 0) {\n    generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n    Item item=items.take();\n    productionEfficiency=getItemEfficiency(item);\n    explosiveness=item.explosiveness;\n    generateTime=1f;\n  }\n  if (generateTime > 0f) {\n    generateTime-=Math.min(1f / itemDuration * delta() * power.graph.getUsageFraction(),generateTime);\n    if (randomlyExplode && state.rules.reactorExplosions && Mathf.chance(delta() * 0.06 * Mathf.clamp(explosiveness - 0.5f))) {\n      Core.app.post(() -> {\n        damage(Mathf.random(11f));\n        explodeEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n      }\n);\n    }\n  }\n else {\n    productionEfficiency=0.0f;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 235,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2836,
        "startLineNumber" : 96,
        "startColumnNumber" : 32,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float calculationDelta=delta();\n  heat=Mathf.lerpDelta(heat,generateTime >= 0.001f && enabled ? 1f : 0f,0.05f);\n  if (!consValid()) {\n    productionEfficiency=0.0f;\n    return;\n  }\n  Liquid liquid=null;\n  for (  Liquid other : content.liquids()) {\n    if (hasLiquids && liquids.get(other) >= 0.001f && getLiquidEfficiency(other) >= minLiquidEfficiency) {\n      liquid=other;\n      break;\n    }\n  }\n  totalTime+=heat * Time.delta;\n  if (hasLiquids && liquid != null && liquids.get(liquid) >= 0.001f) {\n    float baseLiquidEfficiency=getLiquidEfficiency(liquid);\n    float maximumPossible=maxLiquidGenerate * calculationDelta;\n    float used=Math.min(liquids.get(liquid) * calculationDelta,maximumPossible);\n    liquids.remove(liquid,used * power.graph.getUsageFraction());\n    productionEfficiency=baseLiquidEfficiency * used / maximumPossible;\n    if (used > 0.001f && Mathf.chance(0.05 * delta())) {\n      generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n    }\n  }\n else   if (hasItems) {\n    if (generateTime <= 0f && items.total() > 0) {\n      generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n      Item item=items.take();\n      productionEfficiency=getItemEfficiency(item);\n      explosiveness=item.explosiveness;\n      generateTime=1f;\n    }\n    if (generateTime > 0f) {\n      generateTime-=Math.min(1f / itemDuration * delta() * power.graph.getUsageFraction(),generateTime);\n      if (randomlyExplode && state.rules.reactorExplosions && Mathf.chance(delta() * 0.06 * Mathf.clamp(explosiveness - 0.5f))) {\n        Core.app.post(() -> {\n          damage(Mathf.random(11f));\n          explodeEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n        }\n);\n      }\n    }\n else {\n      productionEfficiency=0.0f;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 312,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2878,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 154,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void updateTile(){\n  float calculationDelta=delta();\n  heat=Mathf.lerpDelta(heat,generateTime >= 0.001f && enabled ? 1f : 0f,0.05f);\n  if (!consValid()) {\n    productionEfficiency=0.0f;\n    return;\n  }\n  Liquid liquid=null;\n  for (  Liquid other : content.liquids()) {\n    if (hasLiquids && liquids.get(other) >= 0.001f && getLiquidEfficiency(other) >= minLiquidEfficiency) {\n      liquid=other;\n      break;\n    }\n  }\n  totalTime+=heat * Time.delta;\n  if (hasLiquids && liquid != null && liquids.get(liquid) >= 0.001f) {\n    float baseLiquidEfficiency=getLiquidEfficiency(liquid);\n    float maximumPossible=maxLiquidGenerate * calculationDelta;\n    float used=Math.min(liquids.get(liquid) * calculationDelta,maximumPossible);\n    liquids.remove(liquid,used * power.graph.getUsageFraction());\n    productionEfficiency=baseLiquidEfficiency * used / maximumPossible;\n    if (used > 0.001f && Mathf.chance(0.05 * delta())) {\n      generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n    }\n  }\n else   if (hasItems) {\n    if (generateTime <= 0f && items.total() > 0) {\n      generateEffect.at(x + Mathf.range(3f),y + Mathf.range(3f));\n      Item item=items.take();\n      productionEfficiency=getItemEfficiency(item);\n      explosiveness=item.explosiveness;\n      generateTime=1f;\n    }\n    if (generateTime > 0f) {\n      generateTime-=Math.min(1f / itemDuration * delta() * power.graph.getUsageFraction(),generateTime);\n      if (randomlyExplode && state.rules.reactorExplosions && Mathf.chance(delta() * 0.06 * Mathf.clamp(explosiveness - 0.5f))) {\n        Core.app.post(() -> {\n          damage(Mathf.random(11f));\n          explodeEffect.at(x + Mathf.range(size * tilesize / 2f),y + Mathf.range(size * tilesize / 2f));\n        }\n);\n      }\n    }\n else {\n      productionEfficiency=0.0f;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 136,
        "startColumnNumber" : 20,
        "endLineNumber" : 136,
        "endColumnNumber" : 55
      },
      "nodeContext" : "explosiveness=item.explosiveness;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 136,
    "startColumnNumber" : 36,
    "endLineNumber" : 136,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}