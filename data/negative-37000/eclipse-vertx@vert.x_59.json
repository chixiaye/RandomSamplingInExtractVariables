{
  "id" : 59,
  "expression" : "client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n  int id=request.nextStreamId();\n  Http2ConnectionEncoder encoder=request.encoder;\n  encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n  request.context.flush();\n  when.setHandler(ar -> {\n    request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n    request.context.flush();\n  }\n);\n}\n)",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/Http2ServerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n  int id=request.nextStreamId();\n  Http2ConnectionEncoder encoder=request.encoder;\n  encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n  request.context.flush();\n  when.setHandler(ar -> {\n    request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n    request.context.flush();\n  }\n);\n}\n)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 1208,
      "startLineNumber" : 1490,
      "startColumnNumber" : 24,
      "endLineNumber" : 1507,
      "endColumnNumber" : 6
    },
    "astNodeNumber" : 110,
    "astHeight" : 17,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1214,
        "startLineNumber" : 1490,
        "startColumnNumber" : 18,
        "endLineNumber" : 1507,
        "endColumnNumber" : 6
      },
      "nodeContext" : "fut=client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n  int id=request.nextStreamId();\n  Http2ConnectionEncoder encoder=request.encoder;\n  encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n  request.context.flush();\n  when.setHandler(ar -> {\n    request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n    request.context.flush();\n  }\n);\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 112,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1229,
        "startLineNumber" : 1490,
        "startColumnNumber" : 4,
        "endLineNumber" : 1507,
        "endColumnNumber" : 7
      },
      "nodeContext" : "ChannelFuture fut=client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n  int id=request.nextStreamId();\n  Http2ConnectionEncoder encoder=request.encoder;\n  encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n  request.context.flush();\n  when.setHandler(ar -> {\n    request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n    request.context.flush();\n  }\n);\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 115,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1788,
        "startLineNumber" : 1471,
        "startColumnNumber" : 49,
        "endLineNumber" : 1510,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  waitFor(4);\n  Future<Void> when=Future.future();\n  Context ctx=vertx.getOrCreateContext();\n  server.requestHandler(req -> {\n    req.exceptionHandler(err -> {\n      assertOnIOContext(ctx);\n      complete();\n    }\n);\n    req.response().exceptionHandler(err -> {\n      assertOnIOContext(ctx);\n      complete();\n    }\n);\n    when.complete();\n  }\n);\n  startServer(ctx);\n  TestClient client=new TestClient();\n  ChannelFuture fut=client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n    int id=request.nextStreamId();\n    Http2ConnectionEncoder encoder=request.encoder;\n    encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n    request.context.flush();\n    when.setHandler(ar -> {\n      request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n      request.context.flush();\n    }\n);\n  }\n);\n  fut.sync();\n  await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1843,
        "startLineNumber" : 1470,
        "startColumnNumber" : 2,
        "endLineNumber" : 1510,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testStreamError() throws Exception {\n  waitFor(4);\n  Future<Void> when=Future.future();\n  Context ctx=vertx.getOrCreateContext();\n  server.requestHandler(req -> {\n    req.exceptionHandler(err -> {\n      assertOnIOContext(ctx);\n      complete();\n    }\n);\n    req.response().exceptionHandler(err -> {\n      assertOnIOContext(ctx);\n      complete();\n    }\n);\n    when.complete();\n  }\n);\n  startServer(ctx);\n  TestClient client=new TestClient();\n  ChannelFuture fut=client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n    int id=request.nextStreamId();\n    Http2ConnectionEncoder encoder=request.encoder;\n    encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n    request.context.flush();\n    when.setHandler(ar -> {\n      request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n      request.context.flush();\n    }\n);\n  }\n);\n  fut.sync();\n  await();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 210,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1229,
        "startLineNumber" : 1490,
        "startColumnNumber" : 4,
        "endLineNumber" : 1507,
        "endColumnNumber" : 7
      },
      "nodeContext" : "ChannelFuture fut=client.connect(DEFAULT_HTTPS_PORT,DEFAULT_HTTPS_HOST,request -> {\n  int id=request.nextStreamId();\n  Http2ConnectionEncoder encoder=request.encoder;\n  encoder.writeHeaders(request.context,id,GET(\"/\"),0,false,request.context.newPromise());\n  request.context.flush();\n  when.setHandler(ar -> {\n    request.channel.write(Buffer.buffer(new byte[]{0x00,0x00,0x12,0x00,0x08,0x00,0x00,0x00,(byte)(id & 0xFF),0x1F,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}).getByteBuf());\n    request.context.flush();\n  }\n);\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 115,
      "astHeight" : 19
    },
    "tokenLength" : 72,
    "type" : "io.vertx.test.core.ChannelFuture"
  } ],
  "positionList" : [ {
    "charLength" : 1208,
    "startLineNumber" : 1490,
    "startColumnNumber" : 24,
    "endLineNumber" : 1507,
    "endColumnNumber" : 6
  } ],
  "layoutRelationDataList" : [ ]
}