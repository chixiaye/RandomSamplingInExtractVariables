{
  "id" : 353,
  "expression" : "org.apache.skywalking.oap.server.core.alarm.grpc",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "org.apache.skywalking.oap.server.core.alarm.grpc",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 74,
      "startColumnNumber" : 23,
      "endLineNumber" : 74,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 15,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 74,
        "startColumnNumber" : 23,
        "endLineNumber" : 74,
        "endColumnNumber" : 84
      },
      "nodeContext" : "org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 17,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 74,
        "startColumnNumber" : 23,
        "endLineNumber" : 74,
        "endColumnNumber" : 84
      },
      "nodeContext" : "org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 18,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 85
      },
      "nodeContext" : "StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 21,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 15
      },
      "nodeContext" : "StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver=alarmServiceStub.withDeadlineAfter(10,TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>(){\n  @Override public void onNext(  Response response){\n  }\n  @Override public void onError(  Throwable throwable){\n    status.done();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Send alarm message failed: {}\",throwable.getMessage());\n    }\n  }\n  @Override public void onCompleted(){\n    status.done();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Send alarm message successful.\");\n    }\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2963,
        "startLineNumber" : 59,
        "startColumnNumber" : 57,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (alarmSetting == null || alarmSetting.isEmptySetting()) {\n    return;\n  }\n  onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n  GRPCStreamStatus status=new GRPCStreamStatus();\n  if (alarmServiceStub == null) {\n    return;\n  }\n  StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver=alarmServiceStub.withDeadlineAfter(10,TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>(){\n    @Override public void onNext(    Response response){\n    }\n    @Override public void onError(    Throwable throwable){\n      status.done();\n      if (log.isDebugEnabled()) {\n        log.debug(\"Send alarm message failed: {}\",throwable.getMessage());\n      }\n    }\n    @Override public void onCompleted(){\n      status.done();\n      if (log.isDebugEnabled()) {\n        log.debug(\"Send alarm message successful.\");\n      }\n    }\n  }\n);\n  alarmMessage.forEach(message -> {\n    org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder=org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n    builder.setScopeId(message.getScopeId());\n    builder.setScope(message.getScope());\n    builder.setName(message.getName());\n    builder.setId0(message.getId0());\n    builder.setId1(message.getId1());\n    builder.setRuleName(message.getRuleName());\n    builder.setAlarmMessage(message.getAlarmMessage());\n    builder.setStartTime(message.getStartTime());\n    streamObserver.onNext(builder.build());\n  }\n);\n  streamObserver.onCompleted();\n  long sleepTime=0;\n  long cycle=100L;\n  while (!status.isDone()) {\n    try {\n      sleepTime+=cycle;\n      Thread.sleep(cycle);\n    }\n catch (    InterruptedException ignored) {\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Send {} alarm message to {}:{}.\",alarmMessage.size(),alarmSetting.getTargetHost(),alarmSetting.getTargetPort());\n    }\n    if (sleepTime > 2000L) {\n      log.warn(\"Send {} alarm message to {}:{}, wait {} milliseconds.\",alarmMessage.size(),alarmSetting.getTargetHost(),alarmSetting.getTargetPort(),sleepTime);\n      cycle=2000L;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 324,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3030,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void doAlarm(List<AlarmMessage> alarmMessage){\n  if (alarmSetting == null || alarmSetting.isEmptySetting()) {\n    return;\n  }\n  onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n  GRPCStreamStatus status=new GRPCStreamStatus();\n  if (alarmServiceStub == null) {\n    return;\n  }\n  StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver=alarmServiceStub.withDeadlineAfter(10,TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>(){\n    @Override public void onNext(    Response response){\n    }\n    @Override public void onError(    Throwable throwable){\n      status.done();\n      if (log.isDebugEnabled()) {\n        log.debug(\"Send alarm message failed: {}\",throwable.getMessage());\n      }\n    }\n    @Override public void onCompleted(){\n      status.done();\n      if (log.isDebugEnabled()) {\n        log.debug(\"Send alarm message successful.\");\n      }\n    }\n  }\n);\n  alarmMessage.forEach(message -> {\n    org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder=org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n    builder.setScopeId(message.getScopeId());\n    builder.setScope(message.getScope());\n    builder.setName(message.getName());\n    builder.setId0(message.getId0());\n    builder.setId1(message.getId1());\n    builder.setRuleName(message.getRuleName());\n    builder.setAlarmMessage(message.getAlarmMessage());\n    builder.setStartTime(message.getStartTime());\n    streamObserver.onNext(builder.build());\n  }\n);\n  streamObserver.onCompleted();\n  long sleepTime=0;\n  long cycle=100L;\n  while (!status.isDone()) {\n    try {\n      sleepTime+=cycle;\n      Thread.sleep(cycle);\n    }\n catch (    InterruptedException ignored) {\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Send {} alarm message to {}:{}.\",alarmMessage.size(),alarmSetting.getTargetHost(),alarmSetting.getTargetPort());\n    }\n    if (sleepTime > 2000L) {\n      log.warn(\"Send {} alarm message to {}:{}, wait {} milliseconds.\",alarmMessage.size(),alarmSetting.getTargetHost(),alarmSetting.getTargetPort(),sleepTime);\n      cycle=2000L;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 85
      },
      "nodeContext" : "StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 21,
      "astHeight" : 11
    },
    "tokenLength" : 8,
    "type" : "org.apache.skywalking.oap.server.core.alarm.grpc"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 74,
    "startColumnNumber" : 23,
    "endLineNumber" : 74,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}