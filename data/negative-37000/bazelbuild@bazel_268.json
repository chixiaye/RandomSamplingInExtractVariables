{
  "id" : 268,
  "expression" : "ImmutableSet.Builder",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/bazel/repository/downloader/UrlRewriterConfig.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ImmutableSet.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 89,
      "startColumnNumber" : 4,
      "endLineNumber" : 89,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 24
      },
      "nodeContext" : "ImmutableSet.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ImmutableSet.Builder<String>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ImmutableSet.Builder<String> allowList=ImmutableSet.builder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2671,
        "startLineNumber" : 88,
        "startColumnNumber" : 39,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableSet.Builder<String> allowList=ImmutableSet.builder();\n  ImmutableSet.Builder<String> blockList=ImmutableSet.builder();\n  ImmutableMultimap.Builder<Pattern,String> rewrites=ImmutableMultimap.builder();\n  String allBlockedMessage=null;\n  try (BufferedReader reader=new BufferedReader(config)){\n    int lineNumber=1;\n    for (String line=reader.readLine(); line != null; line=reader.readLine(), lineNumber++) {\n      List<String> parts=SPLITTER.splitToList(line);\n      if (parts.isEmpty()) {\n        continue;\n      }\n      if (parts.get(0).startsWith(\"#\")) {\n        continue;\n      }\n      Location location=Location.fromFileLineColumn(filePathForErrorReporting,lineNumber,0);\nswitch (parts.get(0)) {\ncase \"allow\":        if (parts.size() != 2) {\n          throw new UrlRewriterParseException(\"Only the host name is allowed after `allow`: \" + line,location);\n        }\n      allowList.add(parts.get(1));\n    break;\ncase \"block\":  if (parts.size() != 2) {\n    throw new UrlRewriterParseException(\"Only the host name is allowed after `block`: \" + line,location);\n  }\nblockList.add(parts.get(1));\nbreak;\ncase \"rewrite\":if (parts.size() != 3) {\nthrow new UrlRewriterParseException(\"Only the matching pattern and rewrite pattern is allowed after `rewrite`: \" + line,location);\n}\nrewrites.put(Pattern.compile(parts.get(1)),parts.get(2));\nbreak;\ncase ALL_BLOCKED_MESSAGE_DIRECTIVE:if (parts.size() == 1) {\nthrow new UrlRewriterParseException(\"all_blocked_message must be followed by a message\",location);\n}\nif (allBlockedMessage != null) {\nthrow new UrlRewriterParseException(\"At most one all_blocked_message directive is allowed\",location);\n}\nallBlockedMessage=line.substring(ALL_BLOCKED_MESSAGE_DIRECTIVE.length() + 1);\nbreak;\ndefault:throw new UrlRewriterParseException(\"Unable to parse: \" + line,location);\n}\n}\n}\n catch (IOException e) {\nthrow new UncheckedIOException(e);\n}\nthis.allowList=allowList.build();\nthis.blockList=blockList.build();\nthis.rewrites=rewrites.build();\nthis.allBlockedMessage=allBlockedMessage;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 301,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3014,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructor to use. The  {@code config} will be read to completion.\n * @throws UrlRewriterParseException If the file contents was invalid.\n * @throws UncheckedIOException If any processing problems occur.\n */\npublic UrlRewriterConfig(String filePathForErrorReporting,Reader config) throws UrlRewriterParseException {\n  ImmutableSet.Builder<String> allowList=ImmutableSet.builder();\n  ImmutableSet.Builder<String> blockList=ImmutableSet.builder();\n  ImmutableMultimap.Builder<Pattern,String> rewrites=ImmutableMultimap.builder();\n  String allBlockedMessage=null;\n  try (BufferedReader reader=new BufferedReader(config)){\n    int lineNumber=1;\n    for (String line=reader.readLine(); line != null; line=reader.readLine(), lineNumber++) {\n      List<String> parts=SPLITTER.splitToList(line);\n      if (parts.isEmpty()) {\n        continue;\n      }\n      if (parts.get(0).startsWith(\"#\")) {\n        continue;\n      }\n      Location location=Location.fromFileLineColumn(filePathForErrorReporting,lineNumber,0);\nswitch (parts.get(0)) {\ncase \"allow\":        if (parts.size() != 2) {\n          throw new UrlRewriterParseException(\"Only the host name is allowed after `allow`: \" + line,location);\n        }\n      allowList.add(parts.get(1));\n    break;\ncase \"block\":  if (parts.size() != 2) {\n    throw new UrlRewriterParseException(\"Only the host name is allowed after `block`: \" + line,location);\n  }\nblockList.add(parts.get(1));\nbreak;\ncase \"rewrite\":if (parts.size() != 3) {\nthrow new UrlRewriterParseException(\"Only the matching pattern and rewrite pattern is allowed after `rewrite`: \" + line,location);\n}\nrewrites.put(Pattern.compile(parts.get(1)),parts.get(2));\nbreak;\ncase ALL_BLOCKED_MESSAGE_DIRECTIVE:if (parts.size() == 1) {\nthrow new UrlRewriterParseException(\"all_blocked_message must be followed by a message\",location);\n}\nif (allBlockedMessage != null) {\nthrow new UrlRewriterParseException(\"At most one all_blocked_message directive is allowed\",location);\n}\nallBlockedMessage=line.substring(ALL_BLOCKED_MESSAGE_DIRECTIVE.length() + 1);\nbreak;\ndefault:throw new UrlRewriterParseException(\"Unable to parse: \" + line,location);\n}\n}\n}\n catch (IOException e) {\nthrow new UncheckedIOException(e);\n}\nthis.allowList=allowList.build();\nthis.blockList=blockList.build();\nthis.rewrites=rewrites.build();\nthis.allBlockedMessage=allBlockedMessage;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ImmutableSet.Builder<String> allowList=ImmutableSet.builder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "ImmutableSet"
  }, {
    "nodeContext" : "ImmutableSet.Builder",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 90,
      "startColumnNumber" : 4,
      "endLineNumber" : 90,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 24
      },
      "nodeContext" : "ImmutableSet.Builder",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 32
      },
      "nodeContext" : "ImmutableSet.Builder<String>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ImmutableSet.Builder<String> blockList=ImmutableSet.builder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2671,
        "startLineNumber" : 88,
        "startColumnNumber" : 39,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ImmutableSet.Builder<String> allowList=ImmutableSet.builder();\n  ImmutableSet.Builder<String> blockList=ImmutableSet.builder();\n  ImmutableMultimap.Builder<Pattern,String> rewrites=ImmutableMultimap.builder();\n  String allBlockedMessage=null;\n  try (BufferedReader reader=new BufferedReader(config)){\n    int lineNumber=1;\n    for (String line=reader.readLine(); line != null; line=reader.readLine(), lineNumber++) {\n      List<String> parts=SPLITTER.splitToList(line);\n      if (parts.isEmpty()) {\n        continue;\n      }\n      if (parts.get(0).startsWith(\"#\")) {\n        continue;\n      }\n      Location location=Location.fromFileLineColumn(filePathForErrorReporting,lineNumber,0);\nswitch (parts.get(0)) {\ncase \"allow\":        if (parts.size() != 2) {\n          throw new UrlRewriterParseException(\"Only the host name is allowed after `allow`: \" + line,location);\n        }\n      allowList.add(parts.get(1));\n    break;\ncase \"block\":  if (parts.size() != 2) {\n    throw new UrlRewriterParseException(\"Only the host name is allowed after `block`: \" + line,location);\n  }\nblockList.add(parts.get(1));\nbreak;\ncase \"rewrite\":if (parts.size() != 3) {\nthrow new UrlRewriterParseException(\"Only the matching pattern and rewrite pattern is allowed after `rewrite`: \" + line,location);\n}\nrewrites.put(Pattern.compile(parts.get(1)),parts.get(2));\nbreak;\ncase ALL_BLOCKED_MESSAGE_DIRECTIVE:if (parts.size() == 1) {\nthrow new UrlRewriterParseException(\"all_blocked_message must be followed by a message\",location);\n}\nif (allBlockedMessage != null) {\nthrow new UrlRewriterParseException(\"At most one all_blocked_message directive is allowed\",location);\n}\nallBlockedMessage=line.substring(ALL_BLOCKED_MESSAGE_DIRECTIVE.length() + 1);\nbreak;\ndefault:throw new UrlRewriterParseException(\"Unable to parse: \" + line,location);\n}\n}\n}\n catch (IOException e) {\nthrow new UncheckedIOException(e);\n}\nthis.allowList=allowList.build();\nthis.blockList=blockList.build();\nthis.rewrites=rewrites.build();\nthis.allBlockedMessage=allBlockedMessage;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 301,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3014,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 161,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Constructor to use. The  {@code config} will be read to completion.\n * @throws UrlRewriterParseException If the file contents was invalid.\n * @throws UncheckedIOException If any processing problems occur.\n */\npublic UrlRewriterConfig(String filePathForErrorReporting,Reader config) throws UrlRewriterParseException {\n  ImmutableSet.Builder<String> allowList=ImmutableSet.builder();\n  ImmutableSet.Builder<String> blockList=ImmutableSet.builder();\n  ImmutableMultimap.Builder<Pattern,String> rewrites=ImmutableMultimap.builder();\n  String allBlockedMessage=null;\n  try (BufferedReader reader=new BufferedReader(config)){\n    int lineNumber=1;\n    for (String line=reader.readLine(); line != null; line=reader.readLine(), lineNumber++) {\n      List<String> parts=SPLITTER.splitToList(line);\n      if (parts.isEmpty()) {\n        continue;\n      }\n      if (parts.get(0).startsWith(\"#\")) {\n        continue;\n      }\n      Location location=Location.fromFileLineColumn(filePathForErrorReporting,lineNumber,0);\nswitch (parts.get(0)) {\ncase \"allow\":        if (parts.size() != 2) {\n          throw new UrlRewriterParseException(\"Only the host name is allowed after `allow`: \" + line,location);\n        }\n      allowList.add(parts.get(1));\n    break;\ncase \"block\":  if (parts.size() != 2) {\n    throw new UrlRewriterParseException(\"Only the host name is allowed after `block`: \" + line,location);\n  }\nblockList.add(parts.get(1));\nbreak;\ncase \"rewrite\":if (parts.size() != 3) {\nthrow new UrlRewriterParseException(\"Only the matching pattern and rewrite pattern is allowed after `rewrite`: \" + line,location);\n}\nrewrites.put(Pattern.compile(parts.get(1)),parts.get(2));\nbreak;\ncase ALL_BLOCKED_MESSAGE_DIRECTIVE:if (parts.size() == 1) {\nthrow new UrlRewriterParseException(\"all_blocked_message must be followed by a message\",location);\n}\nif (allBlockedMessage != null) {\nthrow new UrlRewriterParseException(\"At most one all_blocked_message directive is allowed\",location);\n}\nallBlockedMessage=line.substring(ALL_BLOCKED_MESSAGE_DIRECTIVE.length() + 1);\nbreak;\ndefault:throw new UrlRewriterParseException(\"Unable to parse: \" + line,location);\n}\n}\n}\n catch (IOException e) {\nthrow new UncheckedIOException(e);\n}\nthis.allowList=allowList.build();\nthis.blockList=blockList.build();\nthis.rewrites=rewrites.build();\nthis.allBlockedMessage=allBlockedMessage;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 90,
        "startColumnNumber" : 4,
        "endLineNumber" : 90,
        "endColumnNumber" : 68
      },
      "nodeContext" : "ImmutableSet.Builder<String> blockList=ImmutableSet.builder();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "ImmutableSet"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 89,
    "startColumnNumber" : 4,
    "endLineNumber" : 89,
    "endColumnNumber" : 24
  }, {
    "charLength" : 20,
    "startLineNumber" : 90,
    "startColumnNumber" : 4,
    "endLineNumber" : 90,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}