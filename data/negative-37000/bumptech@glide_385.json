{
  "id" : 385,
  "expression" : "Bitmap.Config",
  "projectName" : "bumptech@glide",
  "commitID" : "7d9c28ec2763e973775abd5c3e3c971728a48a56",
  "filePath" : "/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Bitmap.Config",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 112,
      "startColumnNumber" : 4,
      "endLineNumber" : 112,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 17
      },
      "nodeContext" : "Bitmap.Config",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Bitmap.Config config=getSafeConfig(toFit);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1946,
        "startLineNumber" : 88,
        "startColumnNumber" : 87,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toFit.getWidth() == width && toFit.getHeight() == height) {\n    if (Log.isLoggable(TAG,Log.VERBOSE)) {\n      Log.v(TAG,\"requested target size matches input, returning input\");\n    }\n    return toFit;\n  }\n  final float widthPercentage=width / (float)toFit.getWidth();\n  final float heightPercentage=height / (float)toFit.getHeight();\n  final float minPercentage=Math.min(widthPercentage,heightPercentage);\n  final int targetWidth=(int)(minPercentage * toFit.getWidth());\n  final int targetHeight=(int)(minPercentage * toFit.getHeight());\n  if (toFit.getWidth() == targetWidth && toFit.getHeight() == targetHeight) {\n    if (Log.isLoggable(TAG,Log.VERBOSE)) {\n      Log.v(TAG,\"adjusted target size matches input, returning input\");\n    }\n    return toFit;\n  }\n  Bitmap.Config config=getSafeConfig(toFit);\n  Bitmap toReuse=pool.get(targetWidth,targetHeight,config);\n  if (toReuse == null) {\n    toReuse=Bitmap.createBitmap(targetWidth,targetHeight,config);\n  }\n  TransformationUtils.setAlpha(toFit,toReuse);\n  if (Log.isLoggable(TAG,Log.VERBOSE)) {\n    Log.v(TAG,\"request: \" + width + \"x\"+ height);\n    Log.v(TAG,\"toFit:   \" + toFit.getWidth() + \"x\"+ toFit.getHeight());\n    Log.v(TAG,\"toReuse: \" + toReuse.getWidth() + \"x\"+ toReuse.getHeight());\n    Log.v(TAG,\"minPct:   \" + minPercentage);\n  }\n  Canvas canvas=new Canvas(toReuse);\n  Matrix matrix=new Matrix();\n  matrix.setScale(minPercentage,minPercentage);\n  Paint paint=new Paint(PAINT_FLAGS);\n  canvas.drawBitmap(toFit,matrix,paint);\n  return toReuse;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 258,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2625,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 134,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * An expensive operation to resize the given Bitmap down so that it fits within the given dimensions maintain the original proportions.\n * @param toFit  The Bitmap to shrink.\n * @param pool   The BitmapPool to try to reuse a bitmap from.\n * @param width  The width in pixels the final image will fit within.\n * @param height The height in pixels the final image will fit within.\n * @return A new Bitmap shrunk to fit within the given dimensions, or toFit if toFit's width orheight matches the given dimensions and toFit fits within the given dimensions\n */\npublic static Bitmap fitCenter(Bitmap toFit,BitmapPool pool,int width,int height){\n  if (toFit.getWidth() == width && toFit.getHeight() == height) {\n    if (Log.isLoggable(TAG,Log.VERBOSE)) {\n      Log.v(TAG,\"requested target size matches input, returning input\");\n    }\n    return toFit;\n  }\n  final float widthPercentage=width / (float)toFit.getWidth();\n  final float heightPercentage=height / (float)toFit.getHeight();\n  final float minPercentage=Math.min(widthPercentage,heightPercentage);\n  final int targetWidth=(int)(minPercentage * toFit.getWidth());\n  final int targetHeight=(int)(minPercentage * toFit.getHeight());\n  if (toFit.getWidth() == targetWidth && toFit.getHeight() == targetHeight) {\n    if (Log.isLoggable(TAG,Log.VERBOSE)) {\n      Log.v(TAG,\"adjusted target size matches input, returning input\");\n    }\n    return toFit;\n  }\n  Bitmap.Config config=getSafeConfig(toFit);\n  Bitmap toReuse=pool.get(targetWidth,targetHeight,config);\n  if (toReuse == null) {\n    toReuse=Bitmap.createBitmap(targetWidth,targetHeight,config);\n  }\n  TransformationUtils.setAlpha(toFit,toReuse);\n  if (Log.isLoggable(TAG,Log.VERBOSE)) {\n    Log.v(TAG,\"request: \" + width + \"x\"+ height);\n    Log.v(TAG,\"toFit:   \" + toFit.getWidth() + \"x\"+ toFit.getHeight());\n    Log.v(TAG,\"toReuse: \" + toReuse.getWidth() + \"x\"+ toReuse.getHeight());\n    Log.v(TAG,\"minPct:   \" + minPercentage);\n  }\n  Canvas canvas=new Canvas(toReuse);\n  Matrix matrix=new Matrix();\n  matrix.setScale(minPercentage,minPercentage);\n  Paint paint=new Paint(PAINT_FLAGS);\n  canvas.drawBitmap(toFit,matrix,paint);\n  return toReuse;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 279,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 112,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Bitmap.Config config=getSafeConfig(toFit);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "Bitmap"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 112,
    "startColumnNumber" : 4,
    "endLineNumber" : 112,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}