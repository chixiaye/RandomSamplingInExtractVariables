{
  "id" : 443,
  "expression" : "\"Failed to dump config info\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerStatsRecorderImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Failed to dump config info\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 120,
      "startColumnNumber" : 22,
      "endLineNumber" : 120,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 54
      },
      "nodeContext" : "log.error(\"Failed to dump config info\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 55
      },
      "nodeContext" : "log.error(\"Failed to dump config info\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 119,
        "startColumnNumber" : 32,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  log.error(\"Failed to dump config info\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 119,
        "startColumnNumber" : 10,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException e) {\n  log.error(\"Failed to dump config info\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  log.info(\"Starting Pulsar consumer status recorder with config: {}\",w.writeValueAsString(conf));\n  log.info(\"Pulsar client config: {}\",w.withoutAttribute(\"authentication\").writeValueAsString(pulsarClient.getConfiguration()));\n}\n catch (IOException e) {\n  log.error(\"Failed to dump config info\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3537,
        "startLineNumber" : 111,
        "startColumnNumber" : 57,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ObjectMapper m=new ObjectMapper();\n  m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);\n  ObjectWriter w=m.writerWithDefaultPrettyPrinter();\n  try {\n    log.info(\"Starting Pulsar consumer status recorder with config: {}\",w.writeValueAsString(conf));\n    log.info(\"Pulsar client config: {}\",w.withoutAttribute(\"authentication\").writeValueAsString(pulsarClient.getConfiguration()));\n  }\n catch (  IOException e) {\n    log.error(\"Failed to dump config info\",e);\n  }\n  stat=(timeout) -> {\n    if (timeout.isCancelled() || !(consumer instanceof ConsumerImpl)) {\n      return;\n    }\n    ConsumerImpl<?> consumerImpl=(ConsumerImpl<?>)consumer;\n    try {\n      long now=System.nanoTime();\n      double elapsed=(now - oldTime) / 1e9;\n      oldTime=now;\n      long currentNumMsgsReceived=numMsgsReceived.sumThenReset();\n      long currentNumBytesReceived=numBytesReceived.sumThenReset();\n      long currentNumReceiveFailed=numReceiveFailed.sumThenReset();\n      long currentNumBatchReceiveFailed=numBatchReceiveFailed.sumThenReset();\n      long currentNumAcksSent=numAcksSent.sumThenReset();\n      long currentNumAcksFailed=numAcksFailed.sumThenReset();\n      totalMsgsReceived.add(currentNumMsgsReceived);\n      totalBytesReceived.add(currentNumBytesReceived);\n      totalReceiveFailed.add(currentNumReceiveFailed);\n      totalBatchReceiveFailed.add(currentNumBatchReceiveFailed);\n      totalAcksSent.add(currentNumAcksSent);\n      totalAcksFailed.add(currentNumAcksFailed);\n      receivedMsgsRate=currentNumMsgsReceived / elapsed;\n      receivedBytesRate=currentNumBytesReceived / elapsed;\n      if ((currentNumMsgsReceived | currentNumBytesReceived | currentNumReceiveFailed| currentNumAcksSent| currentNumAcksFailed) != 0) {\n        log.info(\"[{}] [{}] [{}] Prefetched messages: {} --- \" + \"Consume throughput received: {} msgs/s --- {} Mbit/s --- \" + \"Ack sent rate: {} ack/s --- \"+ \"Failed messages: {} --- batch messages: {} ---\"+ \"Failed acks: {}\",consumerImpl.getTopic(),consumerImpl.getSubscription(),consumerImpl.consumerName,consumerImpl.incomingMessages.size(),THROUGHPUT_FORMAT.format(receivedMsgsRate),THROUGHPUT_FORMAT.format(receivedBytesRate * 8 / 1024 / 1024),THROUGHPUT_FORMAT.format(currentNumAcksSent / elapsed),currentNumReceiveFailed,currentNumBatchReceiveFailed,currentNumAcksFailed);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"[{}] [{}] [{}]: {}\",consumerImpl.getTopic(),consumerImpl.subscription,consumerImpl.consumerName,e.getMessage());\n    }\n finally {\n      statTimeout=pulsarClient.timer().newTimeout(stat,statsIntervalSeconds,TimeUnit.SECONDS);\n    }\n  }\n;\n  oldTime=System.nanoTime();\n  statTimeout=pulsarClient.timer().newTimeout(stat,statsIntervalSeconds,TimeUnit.SECONDS);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3590,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void init(ConsumerConfigurationData<?> conf){\n  ObjectMapper m=new ObjectMapper();\n  m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);\n  ObjectWriter w=m.writerWithDefaultPrettyPrinter();\n  try {\n    log.info(\"Starting Pulsar consumer status recorder with config: {}\",w.writeValueAsString(conf));\n    log.info(\"Pulsar client config: {}\",w.withoutAttribute(\"authentication\").writeValueAsString(pulsarClient.getConfiguration()));\n  }\n catch (  IOException e) {\n    log.error(\"Failed to dump config info\",e);\n  }\n  stat=(timeout) -> {\n    if (timeout.isCancelled() || !(consumer instanceof ConsumerImpl)) {\n      return;\n    }\n    ConsumerImpl<?> consumerImpl=(ConsumerImpl<?>)consumer;\n    try {\n      long now=System.nanoTime();\n      double elapsed=(now - oldTime) / 1e9;\n      oldTime=now;\n      long currentNumMsgsReceived=numMsgsReceived.sumThenReset();\n      long currentNumBytesReceived=numBytesReceived.sumThenReset();\n      long currentNumReceiveFailed=numReceiveFailed.sumThenReset();\n      long currentNumBatchReceiveFailed=numBatchReceiveFailed.sumThenReset();\n      long currentNumAcksSent=numAcksSent.sumThenReset();\n      long currentNumAcksFailed=numAcksFailed.sumThenReset();\n      totalMsgsReceived.add(currentNumMsgsReceived);\n      totalBytesReceived.add(currentNumBytesReceived);\n      totalReceiveFailed.add(currentNumReceiveFailed);\n      totalBatchReceiveFailed.add(currentNumBatchReceiveFailed);\n      totalAcksSent.add(currentNumAcksSent);\n      totalAcksFailed.add(currentNumAcksFailed);\n      receivedMsgsRate=currentNumMsgsReceived / elapsed;\n      receivedBytesRate=currentNumBytesReceived / elapsed;\n      if ((currentNumMsgsReceived | currentNumBytesReceived | currentNumReceiveFailed| currentNumAcksSent| currentNumAcksFailed) != 0) {\n        log.info(\"[{}] [{}] [{}] Prefetched messages: {} --- \" + \"Consume throughput received: {} msgs/s --- {} Mbit/s --- \" + \"Ack sent rate: {} ack/s --- \"+ \"Failed messages: {} --- batch messages: {} ---\"+ \"Failed acks: {}\",consumerImpl.getTopic(),consumerImpl.getSubscription(),consumerImpl.consumerName,consumerImpl.incomingMessages.size(),THROUGHPUT_FORMAT.format(receivedMsgsRate),THROUGHPUT_FORMAT.format(receivedBytesRate * 8 / 1024 / 1024),THROUGHPUT_FORMAT.format(currentNumAcksSent / elapsed),currentNumReceiveFailed,currentNumBatchReceiveFailed,currentNumAcksFailed);\n      }\n    }\n catch (    Exception e) {\n      log.error(\"[{}] [{}] [{}]: {}\",consumerImpl.getTopic(),consumerImpl.subscription,consumerImpl.consumerName,e.getMessage());\n    }\n finally {\n      statTimeout=pulsarClient.timer().newTimeout(stat,statsIntervalSeconds,TimeUnit.SECONDS);\n    }\n  }\n;\n  oldTime=System.nanoTime();\n  statTimeout=pulsarClient.timer().newTimeout(stat,statsIntervalSeconds,TimeUnit.SECONDS);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 55
      },
      "nodeContext" : "log.error(\"Failed to dump config info\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 120,
    "startColumnNumber" : 22,
    "endLineNumber" : 120,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}