{
  "id" : 471,
  "expression" : "(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/AnnotationValues.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 84,
      "startLineNumber" : 229,
      "startColumnNumber" : 26,
      "endLineNumber" : 229,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 17,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 229,
        "startColumnNumber" : 9,
        "endLineNumber" : 229,
        "endColumnNumber" : 110
      },
      "nodeContext" : "cachedInstance=(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 229,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return cachedInstance=(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2065,
        "startLineNumber" : 171,
        "startColumnNumber" : 24,
        "endLineNumber" : 230,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (cachedInstance != null)   return cachedInstance;\n  InvocationHandler invocations=new InvocationHandler(){\n    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {\n      AnnotationValue v=values.get(method.getName());\n      if (v == null) {\n        Object defaultValue=method.getDefaultValue();\n        if (defaultValue != null)         return defaultValue;\n        throw makeNoDefaultFail(v,method);\n      }\n      boolean isArray=false;\n      Class<?> expected=method.getReturnType();\n      Object array=null;\n      if (expected.isArray()) {\n        isArray=true;\n        expected=expected.getComponentType();\n        array=Array.newInstance(expected,v.valueGuesses.size());\n      }\n      if (!isArray && v.valueGuesses.size() > 1) {\n        throw new AnnotationValueDecodeFail(v,\"Expected a single value, but \" + method.getName() + \" has an array of values\",-1);\n      }\n      if (v.valueGuesses.size() == 0 && !isArray) {\n        Object defaultValue=method.getDefaultValue();\n        if (defaultValue == null)         throw makeNoDefaultFail(v,method);\n        return defaultValue;\n      }\n      int idx=0;\n      for (      Object guess : v.valueGuesses) {\n        Object result=guess == null ? null : guessToType(guess,expected,v,idx);\n        if (!isArray) {\n          if (result == null) {\n            Object defaultValue=method.getDefaultValue();\n            if (defaultValue == null)             throw makeNoDefaultFail(v,method);\n            return defaultValue;\n          }\n          return result;\n        }\n        if (result == null) {\n          if (v.valueGuesses.size() == 1) {\n            Object defaultValue=method.getDefaultValue();\n            if (defaultValue == null)             throw makeNoDefaultFail(v,method);\n            return defaultValue;\n          }\n          throw new AnnotationValueDecodeFail(v,\"I can't make sense of this annotation value. Try using a fully qualified literal.\",idx);\n        }\n        Array.set(array,idx++,result);\n      }\n      return array;\n    }\n  }\n;\n  return cachedInstance=(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 307,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2541,
        "startLineNumber" : 163,
        "startColumnNumber" : 1,
        "endLineNumber" : 230,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Creates an actual annotation instance. You can use this to query any annotation methods, except for those annotation methods with class literals, as those can most likely not be turned into Class objects. If some of the methods cannot be implemented, this method still works; it's only when you call a method that has a problematic value that an AnnotationValueDecodeFail exception occurs.\n */\n@SuppressWarnings(\"unchecked\") public A getInstance(){\n  if (cachedInstance != null)   return cachedInstance;\n  InvocationHandler invocations=new InvocationHandler(){\n    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {\n      AnnotationValue v=values.get(method.getName());\n      if (v == null) {\n        Object defaultValue=method.getDefaultValue();\n        if (defaultValue != null)         return defaultValue;\n        throw makeNoDefaultFail(v,method);\n      }\n      boolean isArray=false;\n      Class<?> expected=method.getReturnType();\n      Object array=null;\n      if (expected.isArray()) {\n        isArray=true;\n        expected=expected.getComponentType();\n        array=Array.newInstance(expected,v.valueGuesses.size());\n      }\n      if (!isArray && v.valueGuesses.size() > 1) {\n        throw new AnnotationValueDecodeFail(v,\"Expected a single value, but \" + method.getName() + \" has an array of values\",-1);\n      }\n      if (v.valueGuesses.size() == 0 && !isArray) {\n        Object defaultValue=method.getDefaultValue();\n        if (defaultValue == null)         throw makeNoDefaultFail(v,method);\n        return defaultValue;\n      }\n      int idx=0;\n      for (      Object guess : v.valueGuesses) {\n        Object result=guess == null ? null : guessToType(guess,expected,v,idx);\n        if (!isArray) {\n          if (result == null) {\n            Object defaultValue=method.getDefaultValue();\n            if (defaultValue == null)             throw makeNoDefaultFail(v,method);\n            return defaultValue;\n          }\n          return result;\n        }\n        if (result == null) {\n          if (v.valueGuesses.size() == 1) {\n            Object defaultValue=method.getDefaultValue();\n            if (defaultValue == null)             throw makeNoDefaultFail(v,method);\n            return defaultValue;\n          }\n          throw new AnnotationValueDecodeFail(v,\"I can't make sense of this annotation value. Try using a fully qualified literal.\",idx);\n        }\n        Array.set(array,idx++,result);\n      }\n      return array;\n    }\n  }\n;\n  return cachedInstance=(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 316,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 229,
        "startColumnNumber" : 2,
        "endLineNumber" : 229,
        "endColumnNumber" : 111
      },
      "nodeContext" : "return cachedInstance=(A)Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},invocations);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 8
    },
    "tokenLength" : 8,
    "type" : "A"
  } ],
  "positionList" : [ {
    "charLength" : 84,
    "startLineNumber" : 229,
    "startColumnNumber" : 26,
    "endLineNumber" : 229,
    "endColumnNumber" : 110
  } ],
  "layoutRelationDataList" : [ ]
}