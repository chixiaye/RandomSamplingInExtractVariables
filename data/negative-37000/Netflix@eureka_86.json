{
  "id" : 86,
  "expression" : "channel.hello(new ReplicationHello(ownInstanceId,registry.size()))",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-write-server/src/main/java/com/netflix/eureka2/server/service/replication/RegistryReplicator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "channel.hello(new ReplicationHello(ownInstanceId,registry.size()))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 67,
      "startLineNumber" : 66,
      "startColumnNumber" : 23,
      "endLineNumber" : 66,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 10,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 66,
        "startColumnNumber" : 23,
        "endLineNumber" : 77,
        "endColumnNumber" : 18
      },
      "nodeContext" : "channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n  @Override public Observable<ChangeNotification<InstanceInfo>> call(  ReplicationHelloReply replicationHelloReply){\n    if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n      logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n      return Observable.empty();\n    }\n    logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n    return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 2329,
        "startLineNumber" : 66,
        "startColumnNumber" : 23,
        "endLineNumber" : 104,
        "endColumnNumber" : 18
      },
      "nodeContext" : "channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n  @Override public Observable<ChangeNotification<InstanceInfo>> call(  ReplicationHelloReply replicationHelloReply){\n    if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n      logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n      return Observable.empty();\n    }\n    logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n    return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n  }\n}\n).subscribe(new Subscriber<ChangeNotification<InstanceInfo>>(){\n  @Override public void onCompleted(){\n    logger.info(\"{}: Replication change notification stream closed\",ownInstanceId);\n    channel.close();\n  }\n  @Override public void onError(  Throwable e){\n    logger.error(\"{}: Registry interest stream terminated with an error\",ownInstanceId,e);\n    channel.close();\n  }\n  @Override public void onNext(  ChangeNotification<InstanceInfo> changeNotification){\nswitch (changeNotification.getKind()) {\ncase Add:      subscribeToTransportSend(channel.register(changeNotification.getData()),\"register request\");\n    break;\ncase Modify:  subscribeToTransportSend(channel.register(changeNotification.getData()),\"update request\");\nbreak;\ncase Delete:subscribeToTransportSend(channel.unregister(changeNotification.getData().getId()),\"delete request\");\nbreak;\n}\n}\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 192,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 2344,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 18
      },
      "nodeContext" : "subscription=channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n  @Override public Observable<ChangeNotification<InstanceInfo>> call(  ReplicationHelloReply replicationHelloReply){\n    if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n      logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n      return Observable.empty();\n    }\n    logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n    return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n  }\n}\n).subscribe(new Subscriber<ChangeNotification<InstanceInfo>>(){\n  @Override public void onCompleted(){\n    logger.info(\"{}: Replication change notification stream closed\",ownInstanceId);\n    channel.close();\n  }\n  @Override public void onError(  Throwable e){\n    logger.error(\"{}: Registry interest stream terminated with an error\",ownInstanceId,e);\n    channel.close();\n  }\n  @Override public void onNext(  ChangeNotification<InstanceInfo> changeNotification){\nswitch (changeNotification.getKind()) {\ncase Add:      subscribeToTransportSend(channel.register(changeNotification.getData()),\"register request\");\n    break;\ncase Modify:  subscribeToTransportSend(channel.register(changeNotification.getData()),\"update request\");\nbreak;\ncase Delete:subscribeToTransportSend(channel.unregister(changeNotification.getData().getId()),\"delete request\");\nbreak;\n}\n}\n}\n)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 194,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2345,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 104,
        "endColumnNumber" : 19
      },
      "nodeContext" : "subscription=channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n  @Override public Observable<ChangeNotification<InstanceInfo>> call(  ReplicationHelloReply replicationHelloReply){\n    if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n      logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n      return Observable.empty();\n    }\n    logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n    return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n  }\n}\n).subscribe(new Subscriber<ChangeNotification<InstanceInfo>>(){\n  @Override public void onCompleted(){\n    logger.info(\"{}: Replication change notification stream closed\",ownInstanceId);\n    channel.close();\n  }\n  @Override public void onError(  Throwable e){\n    logger.error(\"{}: Registry interest stream terminated with an error\",ownInstanceId,e);\n    channel.close();\n  }\n  @Override public void onNext(  ChangeNotification<InstanceInfo> changeNotification){\nswitch (changeNotification.getKind()) {\ncase Add:      subscribeToTransportSend(channel.register(changeNotification.getData()),\"register request\");\n    break;\ncase Modify:  subscribeToTransportSend(channel.register(changeNotification.getData()),\"update request\");\nbreak;\ncase Delete:subscribeToTransportSend(channel.unregister(changeNotification.getData().getId()),\"delete request\");\nbreak;\n}\n}\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 195,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2555,
        "startLineNumber" : 55,
        "startColumnNumber" : 68,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (subscription != null) {\n    subscription.unsubscribe();\n  }\n  if (channel != null) {\n    channel.close();\n  }\n  channel=delegateChannel;\n  subscription=channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n    @Override public Observable<ChangeNotification<InstanceInfo>> call(    ReplicationHelloReply replicationHelloReply){\n      if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n        logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n        return Observable.empty();\n      }\n      logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n      return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n    }\n  }\n).subscribe(new Subscriber<ChangeNotification<InstanceInfo>>(){\n    @Override public void onCompleted(){\n      logger.info(\"{}: Replication change notification stream closed\",ownInstanceId);\n      channel.close();\n    }\n    @Override public void onError(    Throwable e){\n      logger.error(\"{}: Registry interest stream terminated with an error\",ownInstanceId,e);\n      channel.close();\n    }\n    @Override public void onNext(    ChangeNotification<InstanceInfo> changeNotification){\nswitch (changeNotification.getKind()) {\ncase Add:        subscribeToTransportSend(channel.register(changeNotification.getData()),\"register request\");\n      break;\ncase Modify:    subscribeToTransportSend(channel.register(changeNotification.getData()),\"update request\");\n  break;\ncase Delete:subscribeToTransportSend(channel.unregister(changeNotification.getData().getId()),\"delete request\");\nbreak;\n}\n}\n}\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2619,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void reconnect(final ReplicationChannel delegateChannel){\n  if (subscription != null) {\n    subscription.unsubscribe();\n  }\n  if (channel != null) {\n    channel.close();\n  }\n  channel=delegateChannel;\n  subscription=channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n    @Override public Observable<ChangeNotification<InstanceInfo>> call(    ReplicationHelloReply replicationHelloReply){\n      if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n        logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n        return Observable.empty();\n      }\n      logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n      return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n    }\n  }\n).subscribe(new Subscriber<ChangeNotification<InstanceInfo>>(){\n    @Override public void onCompleted(){\n      logger.info(\"{}: Replication change notification stream closed\",ownInstanceId);\n      channel.close();\n    }\n    @Override public void onError(    Throwable e){\n      logger.error(\"{}: Registry interest stream terminated with an error\",ownInstanceId,e);\n      channel.close();\n    }\n    @Override public void onNext(    ChangeNotification<InstanceInfo> changeNotification){\nswitch (changeNotification.getKind()) {\ncase Add:        subscribeToTransportSend(channel.register(changeNotification.getData()),\"register request\");\n      break;\ncase Modify:    subscribeToTransportSend(channel.register(changeNotification.getData()),\"update request\");\n  break;\ncase Delete:subscribeToTransportSend(channel.unregister(changeNotification.getData().getId()),\"delete request\");\nbreak;\n}\n}\n}\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 881,
        "startLineNumber" : 66,
        "startColumnNumber" : 23,
        "endLineNumber" : 77,
        "endColumnNumber" : 18
      },
      "nodeContext" : "channel.hello(new ReplicationHello(ownInstanceId,registry.size())).flatMap(new Func1<ReplicationHelloReply,Observable<ChangeNotification<InstanceInfo>>>(){\n  @Override public Observable<ChangeNotification<InstanceInfo>> call(  ReplicationHelloReply replicationHelloReply){\n    if (replicationHelloReply.getSourceId().equals(ownInstanceId)) {\n      logger.info(\"{}: Taking out replication connection to itself\",ownInstanceId);\n      return Observable.empty();\n    }\n    logger.info(\"{} received hello back from {}\",ownInstanceId,replicationHelloReply.getSourceId());\n    return registry.forInterest(Interests.forFullRegistry(),SourceMatcher.localSource());\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 82,
      "astHeight" : 10
    },
    "tokenLength" : 6,
    "type" : "com.netflix.eureka2.server.channel.Observable<com.netflix.eureka2.protocol.replication.ReplicationHelloReply>"
  } ],
  "positionList" : [ {
    "charLength" : 67,
    "startLineNumber" : 66,
    "startColumnNumber" : 23,
    "endLineNumber" : 66,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}