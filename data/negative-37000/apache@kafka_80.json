{
  "id" : 80,
  "expression" : "6L",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "6L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 320,
      "startColumnNumber" : 21,
      "endLineNumber" : 320,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 320,
        "endColumnNumber" : 47
      },
      "nodeContext" : "assertEquals(6L,consumer.position(tp))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 320,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(6L,consumer.position(tp));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 296,
        "startColumnNumber" : 65,
        "endLineNumber" : 362,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final TaskId taskId=new TaskId(0,0);\n  EasyMock.expect(storeMetadata.offset()).andReturn(5L).anyTimes();\n  EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp,5L));\n  EasyMock.expect(stateManager.taskId()).andReturn(taskId).anyTimes();\n  EasyMock.replay(stateManager,storeMetadata,store);\n  adminClient.updateEndOffsets(Collections.singletonMap(tp,10L));\n  final StoreChangelogReader changelogReader=new StoreChangelogReader(time,config,logContext,adminClient,consumer,callback);\n  changelogReader.register(tp,stateManager);\n  if (type == STANDBY) {\n    changelogReader.transitToUpdateStandby();\n  }\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n  assertEquals(0L,changelogReader.changelogMetadata(tp).totalRestored());\n  assertTrue(changelogReader.completedChangelogs().isEmpty());\n  assertEquals(6L,consumer.position(tp));\n  assertEquals(Collections.emptySet(),consumer.paused());\n  if (type == ACTIVE) {\n    assertEquals(10L,(long)changelogReader.changelogMetadata(tp).endOffset());\n    assertEquals(tp,callback.restoreTopicPartition);\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_START));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n  }\n else {\n    assertNull(changelogReader.changelogMetadata(tp).endOffset());\n  }\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,7L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,8L,null,\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,9L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,11L,\"key\".getBytes(),\"value\".getBytes()));\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(12L,consumer.position(tp));\n  if (type == ACTIVE) {\n    assertEquals(StoreChangelogReader.ChangelogState.COMPLETED,changelogReader.changelogMetadata(tp).state());\n    assertEquals(3L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(1,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.singleton(tp),changelogReader.completedChangelogs());\n    assertEquals(Collections.singleton(tp),consumer.paused());\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_BATCH));\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_END));\n  }\n else {\n    assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n    assertEquals(4L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(0,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.emptySet(),changelogReader.completedChangelogs());\n    assertEquals(Collections.emptySet(),consumer.paused());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 459,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3725,
        "startLineNumber" : 295,
        "startColumnNumber" : 4,
        "endLineNumber" : 362,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldRestoreFromPositionAndCheckForCompletion(){\n  final TaskId taskId=new TaskId(0,0);\n  EasyMock.expect(storeMetadata.offset()).andReturn(5L).anyTimes();\n  EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp,5L));\n  EasyMock.expect(stateManager.taskId()).andReturn(taskId).anyTimes();\n  EasyMock.replay(stateManager,storeMetadata,store);\n  adminClient.updateEndOffsets(Collections.singletonMap(tp,10L));\n  final StoreChangelogReader changelogReader=new StoreChangelogReader(time,config,logContext,adminClient,consumer,callback);\n  changelogReader.register(tp,stateManager);\n  if (type == STANDBY) {\n    changelogReader.transitToUpdateStandby();\n  }\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n  assertEquals(0L,changelogReader.changelogMetadata(tp).totalRestored());\n  assertTrue(changelogReader.completedChangelogs().isEmpty());\n  assertEquals(6L,consumer.position(tp));\n  assertEquals(Collections.emptySet(),consumer.paused());\n  if (type == ACTIVE) {\n    assertEquals(10L,(long)changelogReader.changelogMetadata(tp).endOffset());\n    assertEquals(tp,callback.restoreTopicPartition);\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_START));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n  }\n else {\n    assertNull(changelogReader.changelogMetadata(tp).endOffset());\n  }\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,7L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,8L,null,\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,9L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,11L,\"key\".getBytes(),\"value\".getBytes()));\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(12L,consumer.position(tp));\n  if (type == ACTIVE) {\n    assertEquals(StoreChangelogReader.ChangelogState.COMPLETED,changelogReader.changelogMetadata(tp).state());\n    assertEquals(3L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(1,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.singleton(tp),changelogReader.completedChangelogs());\n    assertEquals(Collections.singleton(tp),consumer.paused());\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_BATCH));\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_END));\n  }\n else {\n    assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n    assertEquals(4L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(0,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.emptySet(),changelogReader.completedChangelogs());\n    assertEquals(Collections.emptySet(),consumer.paused());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 465,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 320,
        "startColumnNumber" : 8,
        "endLineNumber" : 320,
        "endColumnNumber" : 48
      },
      "nodeContext" : "assertEquals(6L,consumer.position(tp));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "6L",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 334,
      "startColumnNumber" : 62,
      "endLineNumber" : 334,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 334,
        "startColumnNumber" : 27,
        "endLineNumber" : 334,
        "endColumnNumber" : 103
      },
      "nodeContext" : "new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 334,
        "startColumnNumber" : 8,
        "endLineNumber" : 334,
        "endColumnNumber" : 104
      },
      "nodeContext" : "consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 334,
        "startColumnNumber" : 8,
        "endLineNumber" : 334,
        "endColumnNumber" : 105
      },
      "nodeContext" : "consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3654,
        "startLineNumber" : 296,
        "startColumnNumber" : 65,
        "endLineNumber" : 362,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final TaskId taskId=new TaskId(0,0);\n  EasyMock.expect(storeMetadata.offset()).andReturn(5L).anyTimes();\n  EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp,5L));\n  EasyMock.expect(stateManager.taskId()).andReturn(taskId).anyTimes();\n  EasyMock.replay(stateManager,storeMetadata,store);\n  adminClient.updateEndOffsets(Collections.singletonMap(tp,10L));\n  final StoreChangelogReader changelogReader=new StoreChangelogReader(time,config,logContext,adminClient,consumer,callback);\n  changelogReader.register(tp,stateManager);\n  if (type == STANDBY) {\n    changelogReader.transitToUpdateStandby();\n  }\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n  assertEquals(0L,changelogReader.changelogMetadata(tp).totalRestored());\n  assertTrue(changelogReader.completedChangelogs().isEmpty());\n  assertEquals(6L,consumer.position(tp));\n  assertEquals(Collections.emptySet(),consumer.paused());\n  if (type == ACTIVE) {\n    assertEquals(10L,(long)changelogReader.changelogMetadata(tp).endOffset());\n    assertEquals(tp,callback.restoreTopicPartition);\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_START));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n  }\n else {\n    assertNull(changelogReader.changelogMetadata(tp).endOffset());\n  }\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,7L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,8L,null,\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,9L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,11L,\"key\".getBytes(),\"value\".getBytes()));\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(12L,consumer.position(tp));\n  if (type == ACTIVE) {\n    assertEquals(StoreChangelogReader.ChangelogState.COMPLETED,changelogReader.changelogMetadata(tp).state());\n    assertEquals(3L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(1,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.singleton(tp),changelogReader.completedChangelogs());\n    assertEquals(Collections.singleton(tp),consumer.paused());\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_BATCH));\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_END));\n  }\n else {\n    assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n    assertEquals(4L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(0,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.emptySet(),changelogReader.completedChangelogs());\n    assertEquals(Collections.emptySet(),consumer.paused());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 459,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3725,
        "startLineNumber" : 295,
        "startColumnNumber" : 4,
        "endLineNumber" : 362,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldRestoreFromPositionAndCheckForCompletion(){\n  final TaskId taskId=new TaskId(0,0);\n  EasyMock.expect(storeMetadata.offset()).andReturn(5L).anyTimes();\n  EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp,5L));\n  EasyMock.expect(stateManager.taskId()).andReturn(taskId).anyTimes();\n  EasyMock.replay(stateManager,storeMetadata,store);\n  adminClient.updateEndOffsets(Collections.singletonMap(tp,10L));\n  final StoreChangelogReader changelogReader=new StoreChangelogReader(time,config,logContext,adminClient,consumer,callback);\n  changelogReader.register(tp,stateManager);\n  if (type == STANDBY) {\n    changelogReader.transitToUpdateStandby();\n  }\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n  assertEquals(0L,changelogReader.changelogMetadata(tp).totalRestored());\n  assertTrue(changelogReader.completedChangelogs().isEmpty());\n  assertEquals(6L,consumer.position(tp));\n  assertEquals(Collections.emptySet(),consumer.paused());\n  if (type == ACTIVE) {\n    assertEquals(10L,(long)changelogReader.changelogMetadata(tp).endOffset());\n    assertEquals(tp,callback.restoreTopicPartition);\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_START));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n    assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n  }\n else {\n    assertNull(changelogReader.changelogMetadata(tp).endOffset());\n  }\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,7L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,8L,null,\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,9L,\"key\".getBytes(),\"value\".getBytes()));\n  consumer.addRecord(new ConsumerRecord<>(topicName,0,11L,\"key\".getBytes(),\"value\".getBytes()));\n  changelogReader.restore(Collections.singletonMap(taskId,mock(Task.class)));\n  assertEquals(12L,consumer.position(tp));\n  if (type == ACTIVE) {\n    assertEquals(StoreChangelogReader.ChangelogState.COMPLETED,changelogReader.changelogMetadata(tp).state());\n    assertEquals(3L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(1,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.singleton(tp),changelogReader.completedChangelogs());\n    assertEquals(Collections.singleton(tp),consumer.paused());\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_BATCH));\n    assertEquals(storeName,callback.storeNameCalledStates.get(RESTORE_END));\n  }\n else {\n    assertEquals(StoreChangelogReader.ChangelogState.RESTORING,changelogReader.changelogMetadata(tp).state());\n    assertEquals(4L,changelogReader.changelogMetadata(tp).totalRestored());\n    assertEquals(0,changelogReader.changelogMetadata(tp).bufferedRecords().size());\n    assertEquals(Collections.emptySet(),changelogReader.completedChangelogs());\n    assertEquals(Collections.emptySet(),consumer.paused());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 465,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 334,
        "startColumnNumber" : 8,
        "endLineNumber" : 334,
        "endColumnNumber" : 105
      },
      "nodeContext" : "consumer.addRecord(new ConsumerRecord<>(topicName,0,6L,\"key\".getBytes(),\"value\".getBytes()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 320,
    "startColumnNumber" : 21,
    "endLineNumber" : 320,
    "endColumnNumber" : 23
  }, {
    "charLength" : 2,
    "startLineNumber" : 334,
    "startColumnNumber" : 62,
    "endLineNumber" : 334,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}