{
  "id" : 202,
  "expression" : "new CountDownLatch(1)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/curator/announcement/AnnouncerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new CountDownLatch(1)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 101,
      "startColumnNumber" : 35,
      "endLineNumber" : 101,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 101,
        "startColumnNumber" : 27,
        "endLineNumber" : 101,
        "endColumnNumber" : 56
      },
      "nodeContext" : "latch=new CountDownLatch(1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 101,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 57
      },
      "nodeContext" : "final CountDownLatch latch=new CountDownLatch(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2150,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertArrayEquals(\"/test1 has data\",billy,curator.getData().decompressed().forPath(testPath1));\n  Assert.assertNull(\"/somewhere/test2 still does not exist\",curator.checkExists().forPath(testPath2));\n  announcer.announce(testPath2,billy);\n  Assert.assertArrayEquals(\"/test1 still has data\",billy,curator.getData().decompressed().forPath(testPath1));\n  Assert.assertArrayEquals(\"/somewhere/test2 has data\",billy,curator.getData().decompressed().forPath(testPath2));\n  final CountDownLatch latch=new CountDownLatch(1);\n  curator.getCuratorListenable().addListener(new CuratorListener(){\n    @Override public void eventReceived(    CuratorFramework client,    CuratorEvent event){\n      if (event.getType() == CuratorEventType.CREATE && event.getPath().equals(testPath1)) {\n        latch.countDown();\n      }\n    }\n  }\n);\n  final CuratorOp deleteOp=curator.transactionOp().delete().forPath(testPath1);\n  final Collection<CuratorTransactionResult> results=curator.transaction().forOperations(deleteOp);\n  Assert.assertEquals(1,results.size());\n  final CuratorTransactionResult result=results.iterator().next();\n  Assert.assertEquals(Code.OK.intValue(),result.getError());\n  Assert.assertTrue(\"Wait for /test1 to be created\",timing.forWaiting().awaitLatch(latch));\n  Assert.assertArrayEquals(\"expect /test1 data is restored\",billy,curator.getData().decompressed().forPath(testPath1));\n  Assert.assertArrayEquals(\"expect /somewhere/test2 is still there\",billy,curator.getData().decompressed().forPath(testPath2));\n  announcer.unannounce(testPath1);\n  Assert.assertNull(\"expect /test1 unannounced\",curator.checkExists().forPath(testPath1));\n  Assert.assertArrayEquals(\"expect /somewhere/test2 is still still there\",billy,curator.getData().decompressed().forPath(testPath2));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2198,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Assert.assertArrayEquals(\"/test1 has data\",billy,curator.getData().decompressed().forPath(testPath1));\n  Assert.assertNull(\"/somewhere/test2 still does not exist\",curator.checkExists().forPath(testPath2));\n  announcer.announce(testPath2,billy);\n  Assert.assertArrayEquals(\"/test1 still has data\",billy,curator.getData().decompressed().forPath(testPath1));\n  Assert.assertArrayEquals(\"/somewhere/test2 has data\",billy,curator.getData().decompressed().forPath(testPath2));\n  final CountDownLatch latch=new CountDownLatch(1);\n  curator.getCuratorListenable().addListener(new CuratorListener(){\n    @Override public void eventReceived(    CuratorFramework client,    CuratorEvent event){\n      if (event.getType() == CuratorEventType.CREATE && event.getPath().equals(testPath1)) {\n        latch.countDown();\n      }\n    }\n  }\n);\n  final CuratorOp deleteOp=curator.transactionOp().delete().forPath(testPath1);\n  final Collection<CuratorTransactionResult> results=curator.transaction().forOperations(deleteOp);\n  Assert.assertEquals(1,results.size());\n  final CuratorTransactionResult result=results.iterator().next();\n  Assert.assertEquals(Code.OK.intValue(),result.getError());\n  Assert.assertTrue(\"Wait for /test1 to be created\",timing.forWaiting().awaitLatch(latch));\n  Assert.assertArrayEquals(\"expect /test1 data is restored\",billy,curator.getData().decompressed().forPath(testPath1));\n  Assert.assertArrayEquals(\"expect /somewhere/test2 is still there\",billy,curator.getData().decompressed().forPath(testPath2));\n  announcer.unannounce(testPath1);\n  Assert.assertNull(\"expect /test1 unannounced\",curator.checkExists().forPath(testPath1));\n  Assert.assertArrayEquals(\"expect /somewhere/test2 is still still there\",billy,curator.getData().decompressed().forPath(testPath2));\n}\n  finally {\n  announcer.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 250,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3065,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  curator.start();\n  curator.blockUntilConnected();\n  Announcer announcer=new Announcer(curator,exec);\n  announcer.initializeAddedChildren();\n  final byte[] billy=StringUtils.toUtf8(\"billy\");\n  final String testPath1=\"/test1\";\n  final String testPath2=\"/somewhere/test2\";\n  announcer.announce(testPath1,billy);\n  Assert.assertNull(\"/test1 does not exists\",curator.checkExists().forPath(testPath1));\n  Assert.assertNull(\"/somewhere/test2 does not exists\",curator.checkExists().forPath(testPath2));\n  announcer.start();\n  while (!announcer.getAddedChildren().contains(\"/test1\")) {\n    Thread.sleep(100);\n  }\n  try {\n    Assert.assertArrayEquals(\"/test1 has data\",billy,curator.getData().decompressed().forPath(testPath1));\n    Assert.assertNull(\"/somewhere/test2 still does not exist\",curator.checkExists().forPath(testPath2));\n    announcer.announce(testPath2,billy);\n    Assert.assertArrayEquals(\"/test1 still has data\",billy,curator.getData().decompressed().forPath(testPath1));\n    Assert.assertArrayEquals(\"/somewhere/test2 has data\",billy,curator.getData().decompressed().forPath(testPath2));\n    final CountDownLatch latch=new CountDownLatch(1);\n    curator.getCuratorListenable().addListener(new CuratorListener(){\n      @Override public void eventReceived(      CuratorFramework client,      CuratorEvent event){\n        if (event.getType() == CuratorEventType.CREATE && event.getPath().equals(testPath1)) {\n          latch.countDown();\n        }\n      }\n    }\n);\n    final CuratorOp deleteOp=curator.transactionOp().delete().forPath(testPath1);\n    final Collection<CuratorTransactionResult> results=curator.transaction().forOperations(deleteOp);\n    Assert.assertEquals(1,results.size());\n    final CuratorTransactionResult result=results.iterator().next();\n    Assert.assertEquals(Code.OK.intValue(),result.getError());\n    Assert.assertTrue(\"Wait for /test1 to be created\",timing.forWaiting().awaitLatch(latch));\n    Assert.assertArrayEquals(\"expect /test1 data is restored\",billy,curator.getData().decompressed().forPath(testPath1));\n    Assert.assertArrayEquals(\"expect /somewhere/test2 is still there\",billy,curator.getData().decompressed().forPath(testPath2));\n    announcer.unannounce(testPath1);\n    Assert.assertNull(\"expect /test1 unannounced\",curator.checkExists().forPath(testPath1));\n    Assert.assertArrayEquals(\"expect /somewhere/test2 is still still there\",billy,curator.getData().decompressed().forPath(testPath2));\n  }\n  finally {\n    announcer.stop();\n  }\n  Assert.assertNull(\"expect /test1 remains unannounced\",curator.checkExists().forPath(testPath1));\n  Assert.assertNull(\"expect /somewhere/test2 unannounced\",curator.checkExists().forPath(testPath2));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3136,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 147,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test(timeout=60_000L) public void testSanity() throws Exception {\n  curator.start();\n  curator.blockUntilConnected();\n  Announcer announcer=new Announcer(curator,exec);\n  announcer.initializeAddedChildren();\n  final byte[] billy=StringUtils.toUtf8(\"billy\");\n  final String testPath1=\"/test1\";\n  final String testPath2=\"/somewhere/test2\";\n  announcer.announce(testPath1,billy);\n  Assert.assertNull(\"/test1 does not exists\",curator.checkExists().forPath(testPath1));\n  Assert.assertNull(\"/somewhere/test2 does not exists\",curator.checkExists().forPath(testPath2));\n  announcer.start();\n  while (!announcer.getAddedChildren().contains(\"/test1\")) {\n    Thread.sleep(100);\n  }\n  try {\n    Assert.assertArrayEquals(\"/test1 has data\",billy,curator.getData().decompressed().forPath(testPath1));\n    Assert.assertNull(\"/somewhere/test2 still does not exist\",curator.checkExists().forPath(testPath2));\n    announcer.announce(testPath2,billy);\n    Assert.assertArrayEquals(\"/test1 still has data\",billy,curator.getData().decompressed().forPath(testPath1));\n    Assert.assertArrayEquals(\"/somewhere/test2 has data\",billy,curator.getData().decompressed().forPath(testPath2));\n    final CountDownLatch latch=new CountDownLatch(1);\n    curator.getCuratorListenable().addListener(new CuratorListener(){\n      @Override public void eventReceived(      CuratorFramework client,      CuratorEvent event){\n        if (event.getType() == CuratorEventType.CREATE && event.getPath().equals(testPath1)) {\n          latch.countDown();\n        }\n      }\n    }\n);\n    final CuratorOp deleteOp=curator.transactionOp().delete().forPath(testPath1);\n    final Collection<CuratorTransactionResult> results=curator.transaction().forOperations(deleteOp);\n    Assert.assertEquals(1,results.size());\n    final CuratorTransactionResult result=results.iterator().next();\n    Assert.assertEquals(Code.OK.intValue(),result.getError());\n    Assert.assertTrue(\"Wait for /test1 to be created\",timing.forWaiting().awaitLatch(latch));\n    Assert.assertArrayEquals(\"expect /test1 data is restored\",billy,curator.getData().decompressed().forPath(testPath1));\n    Assert.assertArrayEquals(\"expect /somewhere/test2 is still there\",billy,curator.getData().decompressed().forPath(testPath2));\n    announcer.unannounce(testPath1);\n    Assert.assertNull(\"expect /test1 unannounced\",curator.checkExists().forPath(testPath1));\n    Assert.assertArrayEquals(\"expect /somewhere/test2 is still still there\",billy,curator.getData().decompressed().forPath(testPath2));\n  }\n  finally {\n    announcer.stop();\n  }\n  Assert.assertNull(\"expect /test1 remains unannounced\",curator.checkExists().forPath(testPath1));\n  Assert.assertNull(\"expect /somewhere/test2 unannounced\",curator.checkExists().forPath(testPath2));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 377,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 101,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 57
      },
      "nodeContext" : "final CountDownLatch latch=new CountDownLatch(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.concurrent.CountDownLatch"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 101,
    "startColumnNumber" : 35,
    "endLineNumber" : 101,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}