{
  "id" : 39,
  "expression" : "isLazyWorker",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/main/java/org/apache/druid/indexing/overlord/autoscaling/SimpleWorkerProvisioningStrategy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isLazyWorker",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 225,
      "startColumnNumber" : 41,
      "endLineNumber" : 225,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 225,
        "startColumnNumber" : 18,
        "endLineNumber" : 225,
        "endColumnNumber" : 69
      },
      "nodeContext" : "runner.markWorkersLazy(isLazyWorker,excessWorkers)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 224,
        "startColumnNumber" : 14,
        "endLineNumber" : 234,
        "endColumnNumber" : 15
      },
      "nodeContext" : "Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n  @Override public String apply(  Worker worker){\n    return worker.getIp();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 223,
        "startColumnNumber" : 35,
        "endLineNumber" : 234,
        "endColumnNumber" : 15
      },
      "nodeContext" : "laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n  @Override public String apply(  Worker worker){\n    return worker.getIp();\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 223,
        "startColumnNumber" : 10,
        "endLineNumber" : 234,
        "endColumnNumber" : 16
      },
      "nodeContext" : "final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n  @Override public String apply(  Worker worker){\n    return worker.getIp();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 221,
        "startColumnNumber" : 31,
        "endLineNumber" : 254,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Predicate<ImmutableWorkerInfo> isLazyWorker=ProvisioningUtil.createLazyWorkerPredicate(config);\n  final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n    @Override public String apply(    Worker worker){\n      return worker.getIp();\n    }\n  }\n);\n  if (laziestWorkerIps.isEmpty()) {\n    log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers);\n  }\n else {\n    log.info(\"Terminating %,d workers (wanted %,d): %s\",laziestWorkerIps.size(),excessWorkers,Joiner.on(\", \").join(laziestWorkerIps));\n    final AutoScalingData terminated=workerConfig.getAutoScaler().terminate(ImmutableList.copyOf(laziestWorkerIps));\n    if (terminated != null) {\n      currentlyTerminating.addAll(terminated.getNodeIds());\n      lastTerminateTime=DateTimes.nowUtc();\n      scalingStats.addTerminateEvent(terminated);\n      didTerminate=true;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1451,
        "startLineNumber" : 221,
        "startColumnNumber" : 8,
        "endLineNumber" : 254,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (excessWorkers > 0) {\n  final Predicate<ImmutableWorkerInfo> isLazyWorker=ProvisioningUtil.createLazyWorkerPredicate(config);\n  final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n    @Override public String apply(    Worker worker){\n      return worker.getIp();\n    }\n  }\n);\n  if (laziestWorkerIps.isEmpty()) {\n    log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers);\n  }\n else {\n    log.info(\"Terminating %,d workers (wanted %,d): %s\",laziestWorkerIps.size(),excessWorkers,Joiner.on(\", \").join(laziestWorkerIps));\n    final AutoScalingData terminated=workerConfig.getAutoScaler().terminate(ImmutableList.copyOf(laziestWorkerIps));\n    if (terminated != null) {\n      currentlyTerminating.addAll(terminated.getNodeIds());\n      lastTerminateTime=DateTimes.nowUtc();\n      scalingStats.addTerminateEvent(terminated);\n      didTerminate=true;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 130,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 218,
        "startColumnNumber" : 42,
        "endLineNumber" : 255,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final int excessWorkers=(workers.size() + currentlyProvisioning.size()) - targetWorkerCount;\n  if (excessWorkers > 0) {\n    final Predicate<ImmutableWorkerInfo> isLazyWorker=ProvisioningUtil.createLazyWorkerPredicate(config);\n    final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n      @Override public String apply(      Worker worker){\n        return worker.getIp();\n      }\n    }\n);\n    if (laziestWorkerIps.isEmpty()) {\n      log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers);\n    }\n else {\n      log.info(\"Terminating %,d workers (wanted %,d): %s\",laziestWorkerIps.size(),excessWorkers,Joiner.on(\", \").join(laziestWorkerIps));\n      final AutoScalingData terminated=workerConfig.getAutoScaler().terminate(ImmutableList.copyOf(laziestWorkerIps));\n      if (terminated != null) {\n        currentlyTerminating.addAll(terminated.getNodeIds());\n        lastTerminateTime=DateTimes.nowUtc();\n        scalingStats.addTerminateEvent(terminated);\n        didTerminate=true;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 218,
        "startColumnNumber" : 6,
        "endLineNumber" : 268,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (currentlyTerminating.isEmpty()) {\n  final int excessWorkers=(workers.size() + currentlyProvisioning.size()) - targetWorkerCount;\n  if (excessWorkers > 0) {\n    final Predicate<ImmutableWorkerInfo> isLazyWorker=ProvisioningUtil.createLazyWorkerPredicate(config);\n    final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n      @Override public String apply(      Worker worker){\n        return worker.getIp();\n      }\n    }\n);\n    if (laziestWorkerIps.isEmpty()) {\n      log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers);\n    }\n else {\n      log.info(\"Terminating %,d workers (wanted %,d): %s\",laziestWorkerIps.size(),excessWorkers,Joiner.on(\", \").join(laziestWorkerIps));\n      final AutoScalingData terminated=workerConfig.getAutoScaler().terminate(ImmutableList.copyOf(laziestWorkerIps));\n      if (terminated != null) {\n        currentlyTerminating.addAll(terminated.getNodeIds());\n        lastTerminateTime=DateTimes.nowUtc();\n        scalingStats.addTerminateEvent(terminated);\n        didTerminate=true;\n      }\n    }\n  }\n}\n else {\n  Duration durSinceLastTerminate=new Duration(lastTerminateTime,DateTimes.nowUtc());\n  log.info(\"%s terminating. Current wait time: %s\",currentlyTerminating,durSinceLastTerminate);\n  if (durSinceLastTerminate.isLongerThan(config.getMaxScalingDuration().toStandardDuration())) {\n    log.makeAlert(\"Worker node termination taking too long!\").addData(\"millisSinceLastTerminate\",durSinceLastTerminate.getMillis()).addData(\"terminatingCount\",currentlyTerminating.size()).emit();\n    currentlyTerminating.clear();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 203,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 186,
        "startColumnNumber" : 4,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Collection<? extends TaskRunnerWorkItem> pendingTasks=runner.getPendingTasks();\n  final DefaultWorkerBehaviorConfig workerConfig=PendingTaskBasedWorkerProvisioningStrategy.getDefaultWorkerBehaviorConfig(workerConfigRef,\"terminate\",log);\n  if (workerConfig == null) {\n    return false;\n  }\n  boolean didTerminate=false;\n  final Set<String> workerNodeIds=Sets.newHashSet(workerConfig.getAutoScaler().ipToIdLookup(Lists.newArrayList(Iterables.transform(runner.getLazyWorkers(),new Function<Worker,String>(){\n    @Override public String apply(    Worker input){\n      return input.getIp();\n    }\n  }\n))));\n  currentlyTerminating.retainAll(workerNodeIds);\n  Collection<ImmutableWorkerInfo> workers=runner.getWorkers();\n  updateTargetWorkerCount(workerConfig,pendingTasks,workers);\n  if (currentlyTerminating.isEmpty()) {\n    final int excessWorkers=(workers.size() + currentlyProvisioning.size()) - targetWorkerCount;\n    if (excessWorkers > 0) {\n      final Predicate<ImmutableWorkerInfo> isLazyWorker=ProvisioningUtil.createLazyWorkerPredicate(config);\n      final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n        @Override public String apply(        Worker worker){\n          return worker.getIp();\n        }\n      }\n);\n      if (laziestWorkerIps.isEmpty()) {\n        log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers);\n      }\n else {\n        log.info(\"Terminating %,d workers (wanted %,d): %s\",laziestWorkerIps.size(),excessWorkers,Joiner.on(\", \").join(laziestWorkerIps));\n        final AutoScalingData terminated=workerConfig.getAutoScaler().terminate(ImmutableList.copyOf(laziestWorkerIps));\n        if (terminated != null) {\n          currentlyTerminating.addAll(terminated.getNodeIds());\n          lastTerminateTime=DateTimes.nowUtc();\n          scalingStats.addTerminateEvent(terminated);\n          didTerminate=true;\n        }\n      }\n    }\n  }\n else {\n    Duration durSinceLastTerminate=new Duration(lastTerminateTime,DateTimes.nowUtc());\n    log.info(\"%s terminating. Current wait time: %s\",currentlyTerminating,durSinceLastTerminate);\n    if (durSinceLastTerminate.isLongerThan(config.getMaxScalingDuration().toStandardDuration())) {\n      log.makeAlert(\"Worker node termination taking too long!\").addData(\"millisSinceLastTerminate\",durSinceLastTerminate.getMillis()).addData(\"terminatingCount\",currentlyTerminating.size()).emit();\n      currentlyTerminating.clear();\n    }\n  }\n  return didTerminate;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3463,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 271,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public synchronized boolean doTerminate(){\n  Collection<? extends TaskRunnerWorkItem> pendingTasks=runner.getPendingTasks();\n  final DefaultWorkerBehaviorConfig workerConfig=PendingTaskBasedWorkerProvisioningStrategy.getDefaultWorkerBehaviorConfig(workerConfigRef,\"terminate\",log);\n  if (workerConfig == null) {\n    return false;\n  }\n  boolean didTerminate=false;\n  final Set<String> workerNodeIds=Sets.newHashSet(workerConfig.getAutoScaler().ipToIdLookup(Lists.newArrayList(Iterables.transform(runner.getLazyWorkers(),new Function<Worker,String>(){\n    @Override public String apply(    Worker input){\n      return input.getIp();\n    }\n  }\n))));\n  currentlyTerminating.retainAll(workerNodeIds);\n  Collection<ImmutableWorkerInfo> workers=runner.getWorkers();\n  updateTargetWorkerCount(workerConfig,pendingTasks,workers);\n  if (currentlyTerminating.isEmpty()) {\n    final int excessWorkers=(workers.size() + currentlyProvisioning.size()) - targetWorkerCount;\n    if (excessWorkers > 0) {\n      final Predicate<ImmutableWorkerInfo> isLazyWorker=ProvisioningUtil.createLazyWorkerPredicate(config);\n      final Collection<String> laziestWorkerIps=Collections2.transform(runner.markWorkersLazy(isLazyWorker,excessWorkers),new Function<Worker,String>(){\n        @Override public String apply(        Worker worker){\n          return worker.getIp();\n        }\n      }\n);\n      if (laziestWorkerIps.isEmpty()) {\n        log.info(\"Wanted to terminate %,d workers, but couldn't find any lazy ones!\",excessWorkers);\n      }\n else {\n        log.info(\"Terminating %,d workers (wanted %,d): %s\",laziestWorkerIps.size(),excessWorkers,Joiner.on(\", \").join(laziestWorkerIps));\n        final AutoScalingData terminated=workerConfig.getAutoScaler().terminate(ImmutableList.copyOf(laziestWorkerIps));\n        if (terminated != null) {\n          currentlyTerminating.addAll(terminated.getNodeIds());\n          lastTerminateTime=DateTimes.nowUtc();\n          scalingStats.addTerminateEvent(terminated);\n          didTerminate=true;\n        }\n      }\n    }\n  }\n else {\n    Duration durSinceLastTerminate=new Duration(lastTerminateTime,DateTimes.nowUtc());\n    log.info(\"%s terminating. Current wait time: %s\",currentlyTerminating,durSinceLastTerminate);\n    if (durSinceLastTerminate.isLongerThan(config.getMaxScalingDuration().toStandardDuration())) {\n      log.makeAlert(\"Worker node termination taking too long!\").addData(\"millisSinceLastTerminate\",durSinceLastTerminate.getMillis()).addData(\"terminatingCount\",currentlyTerminating.size()).emit();\n      currentlyTerminating.clear();\n    }\n  }\n  return didTerminate;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 322,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 225,
        "startColumnNumber" : 18,
        "endLineNumber" : 225,
        "endColumnNumber" : 69
      },
      "nodeContext" : "runner.markWorkersLazy(isLazyWorker,excessWorkers)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.indexing.overlord.autoscaling.Predicate<org.apache.druid.indexing.overlord.ImmutableWorkerInfo>"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 225,
    "startColumnNumber" : 41,
    "endLineNumber" : 225,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}