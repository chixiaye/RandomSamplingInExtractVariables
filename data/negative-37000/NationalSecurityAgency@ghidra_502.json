{
  "id" : 502,
  "expression" : "addrSet.iterator()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/program/model/util/MemoryByteIterator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "addrSet.iterator()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 58,
      "startColumnNumber" : 24,
      "endLineNumber" : 58,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 58,
        "endColumnNumber" : 49
      },
      "nodeContext" : "addrSet.iterator().next()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 58,
        "startColumnNumber" : 16,
        "endLineNumber" : 58,
        "endColumnNumber" : 49
      },
      "nodeContext" : "range=addrSet.iterator().next()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 58,
        "startColumnNumber" : 3,
        "endLineNumber" : 58,
        "endColumnNumber" : 50
      },
      "nodeContext" : "AddressRange range=addrSet.iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 57,
        "startColumnNumber" : 18,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AddressRange range=addrSet.iterator().next();\n  Address start=range.getMinAddress();\n  long size=range.getLength();\n  if (size > BUF_SIZE) {\n    range=new AddressRangeImpl(start,start.add(BUF_SIZE - 1));\n    size=BUF_SIZE;\n  }\n  count=(int)size;\n  pos=0;\n  addrSet.delete(range);\n  mem.getBytes(start,buf,0,count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 57,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (count == 0) {\n  AddressRange range=addrSet.iterator().next();\n  Address start=range.getMinAddress();\n  long size=range.getLength();\n  if (size > BUF_SIZE) {\n    range=new AddressRangeImpl(start,start.add(BUF_SIZE - 1));\n    size=BUF_SIZE;\n  }\n  count=(int)size;\n  pos=0;\n  addrSet.delete(range);\n  mem.getBytes(start,buf,0,count);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 423,
        "startLineNumber" : 56,
        "startColumnNumber" : 49,
        "endLineNumber" : 73,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (count == 0) {\n    AddressRange range=addrSet.iterator().next();\n    Address start=range.getMinAddress();\n    long size=range.getLength();\n    if (size > BUF_SIZE) {\n      range=new AddressRangeImpl(start,start.add(BUF_SIZE - 1));\n      size=BUF_SIZE;\n    }\n    count=(int)size;\n    pos=0;\n    addrSet.delete(range);\n    mem.getBytes(start,buf,0,count);\n  }\n  count--;\n  return buf[pos++];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 52,
        "startColumnNumber" : 1,
        "endLineNumber" : 73,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns the next byte.\n * @throws MemoryAccessException if the next byte could not be read\n */\npublic byte next() throws MemoryAccessException {\n  if (count == 0) {\n    AddressRange range=addrSet.iterator().next();\n    Address start=range.getMinAddress();\n    long size=range.getLength();\n    if (size > BUF_SIZE) {\n      range=new AddressRangeImpl(start,start.add(BUF_SIZE - 1));\n      size=BUF_SIZE;\n    }\n    count=(int)size;\n    pos=0;\n    addrSet.delete(range);\n    mem.getBytes(start,buf,0,count);\n  }\n  count--;\n  return buf[pos++];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 91,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 58,
        "startColumnNumber" : 3,
        "endLineNumber" : 58,
        "endColumnNumber" : 50
      },
      "nodeContext" : "AddressRange range=addrSet.iterator().next();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.Iterator<ghidra.program.model.address.AddressRange>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 58,
    "startColumnNumber" : 24,
    "endLineNumber" : 58,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}