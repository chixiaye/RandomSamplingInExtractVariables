{
  "id" : 9,
  "expression" : "new LongConsumer(){\n  private long nextIterPos;\n  private RedisClient client;\n  private AtomicLong elementsRead=new AtomicLong();\n  private boolean finished;\n  private volatile boolean completed;\n  private AtomicLong readAmount=new AtomicLong();\n  @Override public void accept(  long value) throws Exception {\n    readAmount.addAndGet(value);\n    if (completed || elementsRead.get() == 0) {\n      nextValues();\n      completed=false;\n    }\n  }\n  protected void nextValues(){\n    map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n      if (e != null) {\n        p.onError(e);\n        return;\n      }\n      if (finished) {\n        client=null;\n        nextIterPos=0;\n        return;\n      }\n      client=res.getRedisClient();\n      nextIterPos=res.getPos();\n      for (      Entry<Object,Object> entry : res.getMap().entrySet()) {\n        M val=getValue(entry);\n        p.onNext(val);\n        elementsRead.incrementAndGet();\n      }\n      if (elementsRead.get() >= readAmount.get()) {\n        p.onComplete();\n        elementsRead.set(0);\n        completed=true;\n        return;\n      }\n      if (res.getPos() == 0 && !tryAgain()) {\n        finished=true;\n        p.onComplete();\n      }\n      if (finished || completed) {\n        return;\n      }\n      nextValues();\n    }\n);\n  }\n}\n",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/main/java/org/redisson/rx/RedissonMapRxIterator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new LongConsumer(){\n  private long nextIterPos;\n  private RedisClient client;\n  private AtomicLong elementsRead=new AtomicLong();\n  private boolean finished;\n  private volatile boolean completed;\n  private AtomicLong readAmount=new AtomicLong();\n  @Override public void accept(  long value) throws Exception {\n    readAmount.addAndGet(value);\n    if (completed || elementsRead.get() == 0) {\n      nextValues();\n      completed=false;\n    }\n  }\n  protected void nextValues(){\n    map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n      if (e != null) {\n        p.onError(e);\n        return;\n      }\n      if (finished) {\n        client=null;\n        nextIterPos=0;\n        return;\n      }\n      client=res.getRedisClient();\n      nextIterPos=res.getPos();\n      for (      Entry<Object,Object> entry : res.getMap().entrySet()) {\n        M val=getValue(entry);\n        p.onNext(val);\n        elementsRead.incrementAndGet();\n      }\n      if (elementsRead.get() >= readAmount.get()) {\n        p.onComplete();\n        elementsRead.set(0);\n        completed=true;\n        return;\n      }\n      if (res.getPos() == 0 && !tryAgain()) {\n        finished=true;\n        p.onComplete();\n      }\n      if (finished || completed) {\n        return;\n      }\n      nextValues();\n    }\n);\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 2117,
      "startLineNumber" : 51,
      "startColumnNumber" : 29,
      "endLineNumber" : 110,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 220,
    "astHeight" : 14,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 2132,
        "startLineNumber" : 51,
        "startColumnNumber" : 15,
        "endLineNumber" : 110,
        "endColumnNumber" : 10
      },
      "nodeContext" : "p.doOnRequest(new LongConsumer(){\n  private long nextIterPos;\n  private RedisClient client;\n  private AtomicLong elementsRead=new AtomicLong();\n  private boolean finished;\n  private volatile boolean completed;\n  private AtomicLong readAmount=new AtomicLong();\n  @Override public void accept(  long value) throws Exception {\n    readAmount.addAndGet(value);\n    if (completed || elementsRead.get() == 0) {\n      nextValues();\n      completed=false;\n    }\n  }\n  protected void nextValues(){\n    map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n      if (e != null) {\n        p.onError(e);\n        return;\n      }\n      if (finished) {\n        client=null;\n        nextIterPos=0;\n        return;\n      }\n      client=res.getRedisClient();\n      nextIterPos=res.getPos();\n      for (      Entry<Object,Object> entry : res.getMap().entrySet()) {\n        M val=getValue(entry);\n        p.onNext(val);\n        elementsRead.incrementAndGet();\n      }\n      if (elementsRead.get() >= readAmount.get()) {\n        p.onComplete();\n        elementsRead.set(0);\n        completed=true;\n        return;\n      }\n      if (res.getPos() == 0 && !tryAgain()) {\n        finished=true;\n        p.onComplete();\n      }\n      if (finished || completed) {\n        return;\n      }\n      nextValues();\n    }\n);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 223,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 11
      },
      "nodeContext" : "return p.doOnRequest(new LongConsumer(){\n  private long nextIterPos;\n  private RedisClient client;\n  private AtomicLong elementsRead=new AtomicLong();\n  private boolean finished;\n  private volatile boolean completed;\n  private AtomicLong readAmount=new AtomicLong();\n  @Override public void accept(  long value) throws Exception {\n    readAmount.addAndGet(value);\n    if (completed || elementsRead.get() == 0) {\n      nextValues();\n      completed=false;\n    }\n  }\n  protected void nextValues(){\n    map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n      if (e != null) {\n        p.onError(e);\n        return;\n      }\n      if (finished) {\n        client=null;\n        nextIterPos=0;\n        return;\n      }\n      client=res.getRedisClient();\n      nextIterPos=res.getPos();\n      for (      Entry<Object,Object> entry : res.getMap().entrySet()) {\n        M val=getValue(entry);\n        p.onNext(val);\n        elementsRead.incrementAndGet();\n      }\n      if (elementsRead.get() >= readAmount.get()) {\n        p.onComplete();\n        elementsRead.set(0);\n        completed=true;\n        return;\n      }\n      if (res.getPos() == 0 && !tryAgain()) {\n        finished=true;\n        p.onComplete();\n      }\n      if (finished || completed) {\n        return;\n      }\n      nextValues();\n    }\n);\n  }\n}\n);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 224,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2213,
        "startLineNumber" : 49,
        "startColumnNumber" : 32,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ReplayProcessor<M> p=ReplayProcessor.create();\n  return p.doOnRequest(new LongConsumer(){\n    private long nextIterPos;\n    private RedisClient client;\n    private AtomicLong elementsRead=new AtomicLong();\n    private boolean finished;\n    private volatile boolean completed;\n    private AtomicLong readAmount=new AtomicLong();\n    @Override public void accept(    long value) throws Exception {\n      readAmount.addAndGet(value);\n      if (completed || elementsRead.get() == 0) {\n        nextValues();\n        completed=false;\n      }\n    }\n    protected void nextValues(){\n      map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n        if (e != null) {\n          p.onError(e);\n          return;\n        }\n        if (finished) {\n          client=null;\n          nextIterPos=0;\n          return;\n        }\n        client=res.getRedisClient();\n        nextIterPos=res.getPos();\n        for (        Entry<Object,Object> entry : res.getMap().entrySet()) {\n          M val=getValue(entry);\n          p.onNext(val);\n          elementsRead.incrementAndGet();\n        }\n        if (elementsRead.get() >= readAmount.get()) {\n          p.onComplete();\n          elementsRead.set(0);\n          completed=true;\n          return;\n        }\n        if (res.getPos() == 0 && !tryAgain()) {\n          finished=true;\n          p.onComplete();\n        }\n        if (finished || completed) {\n          return;\n        }\n        nextValues();\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 236,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2241,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Flowable<M> create(){\n  ReplayProcessor<M> p=ReplayProcessor.create();\n  return p.doOnRequest(new LongConsumer(){\n    private long nextIterPos;\n    private RedisClient client;\n    private AtomicLong elementsRead=new AtomicLong();\n    private boolean finished;\n    private volatile boolean completed;\n    private AtomicLong readAmount=new AtomicLong();\n    @Override public void accept(    long value) throws Exception {\n      readAmount.addAndGet(value);\n      if (completed || elementsRead.get() == 0) {\n        nextValues();\n        completed=false;\n      }\n    }\n    protected void nextValues(){\n      map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n        if (e != null) {\n          p.onError(e);\n          return;\n        }\n        if (finished) {\n          client=null;\n          nextIterPos=0;\n          return;\n        }\n        client=res.getRedisClient();\n        nextIterPos=res.getPos();\n        for (        Entry<Object,Object> entry : res.getMap().entrySet()) {\n          M val=getValue(entry);\n          p.onNext(val);\n          elementsRead.incrementAndGet();\n        }\n        if (elementsRead.get() >= readAmount.get()) {\n          p.onComplete();\n          elementsRead.set(0);\n          completed=true;\n          return;\n        }\n        if (res.getPos() == 0 && !tryAgain()) {\n          finished=true;\n          p.onComplete();\n        }\n        if (finished || completed) {\n          return;\n        }\n        nextValues();\n      }\n);\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 244,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 110,
        "endColumnNumber" : 11
      },
      "nodeContext" : "return p.doOnRequest(new LongConsumer(){\n  private long nextIterPos;\n  private RedisClient client;\n  private AtomicLong elementsRead=new AtomicLong();\n  private boolean finished;\n  private volatile boolean completed;\n  private AtomicLong readAmount=new AtomicLong();\n  @Override public void accept(  long value) throws Exception {\n    readAmount.addAndGet(value);\n    if (completed || elementsRead.get() == 0) {\n      nextValues();\n      completed=false;\n    }\n  }\n  protected void nextValues(){\n    map.scanIteratorAsync(map.getName(),client,nextIterPos,pattern,count).onComplete((res,e) -> {\n      if (e != null) {\n        p.onError(e);\n        return;\n      }\n      if (finished) {\n        client=null;\n        nextIterPos=0;\n        return;\n      }\n      client=res.getRedisClient();\n      nextIterPos=res.getPos();\n      for (      Entry<Object,Object> entry : res.getMap().entrySet()) {\n        M val=getValue(entry);\n        p.onNext(val);\n        elementsRead.incrementAndGet();\n      }\n      if (elementsRead.get() >= readAmount.get()) {\n        p.onComplete();\n        elementsRead.set(0);\n        completed=true;\n        return;\n      }\n      if (res.getPos() == 0 && !tryAgain()) {\n        finished=true;\n        p.onComplete();\n      }\n      if (finished || completed) {\n        return;\n      }\n      nextValues();\n    }\n);\n  }\n}\n);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 224,
      "astHeight" : 16
    },
    "tokenLength" : 91,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 2117,
    "startLineNumber" : 51,
    "startColumnNumber" : 29,
    "endLineNumber" : 110,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}