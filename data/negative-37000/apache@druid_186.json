{
  "id" : 186,
  "expression" : "false",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/main/java/org/apache/druid/segment/loading/LocalDataSegmentPuller.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 167,
      "startColumnNumber" : 12,
      "endLineNumber" : 167,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 163,
        "startColumnNumber" : 48,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 163,
        "startColumnNumber" : 39,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 163,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 10
      },
      "nodeContext" : "final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 413,
        "startLineNumber" : 162,
        "startColumnNumber" : 10,
        "endLineNumber" : 176,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n  log.info(\"Unzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 560,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n  log.info(\"Unzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n  return result;\n}\n catch (IOException e) {\n  throw new SegmentLoadingException(e,\"Unable to unzip file [%s]\",sourceFile.getAbsolutePath());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 161,
        "startColumnNumber" : 54,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n    log.info(\"Unzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n    return result;\n  }\n catch (  IOException e) {\n    throw new SegmentLoadingException(e,\"Unable to unzip file [%s]\",sourceFile.getAbsolutePath());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (CompressionUtils.isZip(sourceFile.getName())) {\n  try {\n    final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n    log.info(\"Unzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n    return result;\n  }\n catch (  IOException e) {\n    throw new SegmentLoadingException(e,\"Unable to unzip file [%s]\",sourceFile.getAbsolutePath());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2411,
        "startLineNumber" : 126,
        "startColumnNumber" : 2,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (sourceFile.isDirectory()) {\n    if (sourceFile.equals(dir)) {\n      log.info(\"Asked to load [%s] into itself, done!\",dir);\n      return new FileUtils.FileCopyResult(sourceFile);\n    }\n    final File[] files=sourceFile.listFiles();\n    if (files == null) {\n      throw new SegmentLoadingException(\"No files found in [%s]\",sourceFile.getAbsolutePath());\n    }\n    final FileUtils.FileCopyResult result=new FileUtils.FileCopyResult(sourceFile);\n    for (    final File oldFile : files) {\n      if (oldFile.isDirectory()) {\n        log.info(\"[%s] is a child directory, skipping\",oldFile.getAbsolutePath());\n        continue;\n      }\n      result.addFiles(FileUtils.retryCopy(Files.asByteSource(oldFile),new File(dir,oldFile.getName()),shouldRetryPredicate(),DEFAULT_RETRY_COUNT).getFiles());\n    }\n    log.info(\"Copied %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n    return result;\n  }\n  if (CompressionUtils.isZip(sourceFile.getName())) {\n    try {\n      final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n      log.info(\"Unzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n      return result;\n    }\n catch (    IOException e) {\n      throw new SegmentLoadingException(e,\"Unable to unzip file [%s]\",sourceFile.getAbsolutePath());\n    }\n  }\n  if (CompressionUtils.isGz(sourceFile.getName())) {\n    final File outFile=new File(dir,CompressionUtils.getGzBaseName(sourceFile.getName()));\n    final FileUtils.FileCopyResult result=CompressionUtils.gunzip(Files.asByteSource(sourceFile),outFile,shouldRetryPredicate());\n    log.info(\"Gunzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),outFile.getAbsolutePath());\n    return result;\n  }\n  throw new SegmentLoadingException(\"Do not know how to handle source [%s]\",sourceFile.getAbsolutePath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2531,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 197,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public FileUtils.FileCopyResult getSegmentFiles(final File sourceFile,final File dir) throws SegmentLoadingException {\n  if (sourceFile.isDirectory()) {\n    if (sourceFile.equals(dir)) {\n      log.info(\"Asked to load [%s] into itself, done!\",dir);\n      return new FileUtils.FileCopyResult(sourceFile);\n    }\n    final File[] files=sourceFile.listFiles();\n    if (files == null) {\n      throw new SegmentLoadingException(\"No files found in [%s]\",sourceFile.getAbsolutePath());\n    }\n    final FileUtils.FileCopyResult result=new FileUtils.FileCopyResult(sourceFile);\n    for (    final File oldFile : files) {\n      if (oldFile.isDirectory()) {\n        log.info(\"[%s] is a child directory, skipping\",oldFile.getAbsolutePath());\n        continue;\n      }\n      result.addFiles(FileUtils.retryCopy(Files.asByteSource(oldFile),new File(dir,oldFile.getName()),shouldRetryPredicate(),DEFAULT_RETRY_COUNT).getFiles());\n    }\n    log.info(\"Copied %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n    return result;\n  }\n  if (CompressionUtils.isZip(sourceFile.getName())) {\n    try {\n      final FileUtils.FileCopyResult result=CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false);\n      log.info(\"Unzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),dir.getAbsolutePath());\n      return result;\n    }\n catch (    IOException e) {\n      throw new SegmentLoadingException(e,\"Unable to unzip file [%s]\",sourceFile.getAbsolutePath());\n    }\n  }\n  if (CompressionUtils.isGz(sourceFile.getName())) {\n    final File outFile=new File(dir,CompressionUtils.getGzBaseName(sourceFile.getName()));\n    final FileUtils.FileCopyResult result=CompressionUtils.gunzip(Files.asByteSource(sourceFile),outFile,shouldRetryPredicate());\n    log.info(\"Gunzipped %d bytes from [%s] to [%s]\",result.size(),sourceFile.getAbsolutePath(),outFile.getAbsolutePath());\n    return result;\n  }\n  throw new SegmentLoadingException(\"Do not know how to handle source [%s]\",sourceFile.getAbsolutePath());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 269,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 163,
        "startColumnNumber" : 48,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "CompressionUtils.unzip(Files.asByteSource(sourceFile),dir,shouldRetryPredicate(),false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 167,
    "startColumnNumber" : 12,
    "endLineNumber" : 167,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}