{
  "id" : 148,
  "expression" : "\"unexpected event\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/WatcherTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"unexpected event\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 248,
      "startColumnNumber" : 23,
      "endLineNumber" : 248,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertNull(\"unexpected event\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 247,
        "startColumnNumber" : 15,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ClientCnxn.disableAutoWatchReset) {\n  assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n  assertEquals(\"/watchtest/child\",e.getPath());\n}\n else {\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"unexpected event\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 258,
      "startColumnNumber" : 23,
      "endLineNumber" : 258,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertNull(\"unexpected event\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 257,
        "startColumnNumber" : 15,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 252,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ClientCnxn.disableAutoWatchReset) {\n  assertEquals(EventType.NodeCreated,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n}\n else {\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 258,
        "startColumnNumber" : 12,
        "endLineNumber" : 258,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"unexpected event\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 266,
      "startColumnNumber" : 23,
      "endLineNumber" : 266,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 266,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertNull(\"unexpected event\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 266,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 265,
        "startColumnNumber" : 15,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 237,
        "startLineNumber" : 262,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ClientCnxn.disableAutoWatchReset) {\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n}\n else {\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 266,
        "startColumnNumber" : 12,
        "endLineNumber" : 266,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"unexpected event\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 335,
      "startColumnNumber" : 23,
      "endLineNumber" : 335,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 335,
        "startColumnNumber" : 12,
        "endLineNumber" : 335,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertNull(\"unexpected event\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 335,
        "startColumnNumber" : 12,
        "endLineNumber" : 335,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 334,
        "startColumnNumber" : 15,
        "endLineNumber" : 336,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 331,
        "startColumnNumber" : 8,
        "endLineNumber" : 336,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!ClientCnxn.disableAutoWatchReset) {\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child\",e.getPath());\n}\n else {\n  assertNull(\"unexpected event\",e);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4980,
        "startLineNumber" : 212,
        "startColumnNumber" : 53,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 593,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5106,
        "startLineNumber" : 211,
        "startColumnNumber" : 4,
        "endLineNumber" : 342,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testWatcherAutoReset(ZooKeeper zk,MyWatcher globalWatcher,MyWatcher localWatcher) throws Exception {\n  boolean isGlobal=(localWatcher == globalWatcher);\n  zk.create(\"/watchtest\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  zk.create(\"/watchtest/child\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  assertTrue(localWatcher.events.isEmpty());\n  zk.setData(\"/watchtest/child\",new byte[1],-1);\n  zk.create(\"/watchtest/child2\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  WatchedEvent e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(e.getPath(),EventType.NodeDataChanged,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeCreated,e.getType());\n    assertEquals(\"/watchtest/child2\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeChildrenChanged,e.getType());\n    assertEquals(\"/watchtest\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(4000);\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  try {\n    try {\n      localWatcher.waitForDisconnected(500);\n      if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n        fail(\"Got an event when I shouldn't have\");\n      }\n    }\n catch (    TimeoutException toe) {\n      if (ClientCnxn.disableAutoWatchReset) {\n        fail(\"Didn't get an event when I should have\");\n      }\n    }\n  }\n catch (  Exception e1) {\n    LOG.error(\"bad\",e1);\n    throw new RuntimeException(e1);\n  }\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (isGlobal) {\n    zk.getChildren(\"/watchtest\",true);\n    zk.getData(\"/watchtest/child\",true,new Stat());\n    zk.exists(\"/watchtest/child2\",true);\n  }\n else {\n    zk.getChildren(\"/watchtest\",localWatcher);\n    zk.getData(\"/watchtest/child\",localWatcher,new Stat());\n    zk.exists(\"/watchtest/child2\",localWatcher);\n  }\n  zk.delete(\"/watchtest/child2\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeDeleted,e.getType());\n  assertEquals(\"/watchtest/child2\",e.getPath());\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  assertEquals(EventType.NodeChildrenChanged,e.getType());\n  assertEquals(\"/watchtest\",e.getPath());\n  assertTrue(localWatcher.events.isEmpty());\n  stopServer();\n  globalWatcher.waitForDisconnected(3000);\n  localWatcher.waitForDisconnected(500);\n  startServer();\n  globalWatcher.waitForConnected(3000);\n  if (!isGlobal && !ClientCnxn.disableAutoWatchReset) {\n    localWatcher.waitForConnected(500);\n  }\n  zk.delete(\"/watchtest/child\",-1);\n  zk.delete(\"/watchtest\",-1);\n  e=localWatcher.events.poll(10,TimeUnit.SECONDS);\n  if (!ClientCnxn.disableAutoWatchReset) {\n    assertEquals(EventType.NodeDeleted,e.getType());\n    assertEquals(\"/watchtest/child\",e.getPath());\n  }\n else {\n    assertNull(\"unexpected event\",e);\n  }\n  Thread.sleep(1000);\n  assertTrue(localWatcher.events.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 611,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 335,
        "startColumnNumber" : 12,
        "endLineNumber" : 335,
        "endColumnNumber" : 46
      },
      "nodeContext" : "assertNull(\"unexpected event\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 248,
    "startColumnNumber" : 23,
    "endLineNumber" : 248,
    "endColumnNumber" : 41
  }, {
    "charLength" : 18,
    "startLineNumber" : 258,
    "startColumnNumber" : 23,
    "endLineNumber" : 258,
    "endColumnNumber" : 41
  }, {
    "charLength" : 18,
    "startLineNumber" : 266,
    "startColumnNumber" : 23,
    "endLineNumber" : 266,
    "endColumnNumber" : 41
  }, {
    "charLength" : 18,
    "startLineNumber" : 335,
    "startColumnNumber" : 23,
    "endLineNumber" : 335,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}