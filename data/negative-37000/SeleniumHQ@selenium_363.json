{
  "id" : 363,
  "expression" : "alwaysMatch == null",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/remote/NewSessionPayload.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "alwaysMatch == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 160,
      "startColumnNumber" : 8,
      "endLineNumber" : 160,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (alwaysMatch == null) {\n  alwaysMatch=ImmutableMap.of();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1955,
        "startLineNumber" : 158,
        "startColumnNumber" : 45,
        "endLineNumber" : 208,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,Object> alwaysMatch=getAlwaysMatch();\n  if (alwaysMatch == null) {\n    alwaysMatch=ImmutableMap.of();\n  }\n  Map<String,Object> always=alwaysMatch;\n  Collection<Map<String,Object>> firsts=getFirstMatches();\n  if (firsts == null) {\n    firsts=ImmutableList.of(ImmutableMap.of());\n  }\n  if (firsts.isEmpty()) {\n    throw new IllegalArgumentException(\"First match w3c capabilities is zero length\");\n  }\n  firsts.stream().peek(map -> {\n    Set<String> overlap=Sets.intersection(always.keySet(),map.keySet());\n    if (!overlap.isEmpty()) {\n      throw new IllegalArgumentException(\"Overlapping keys between w3c always and first match capabilities: \" + overlap);\n    }\n  }\n).map(first -> {\n    Map<String,Object> toReturn=new HashMap<>();\n    toReturn.putAll(always);\n    toReturn.putAll(first);\n    return toReturn;\n  }\n).peek(map -> {\n    ImmutableSortedSet<String> nullKeys=map.entrySet().stream().filter(entry -> entry.getValue() == null).map(Map.Entry::getKey).collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));\n    if (!nullKeys.isEmpty()) {\n      throw new IllegalArgumentException(\"Null values found in w3c capabilities. Keys are: \" + nullKeys);\n    }\n  }\n).peek(map -> {\n    ImmutableSortedSet<String> illegalKeys=map.entrySet().stream().filter(entry -> !ACCEPTED_W3C_PATTERNS.test(entry.getKey())).map(Map.Entry::getKey).collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));\n    if (!illegalKeys.isEmpty()) {\n      throw new IllegalArgumentException(\"Illegal key values seen in w3c capabilities: \" + illegalKeys);\n    }\n  }\n).forEach(map -> {\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1998,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 208,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void validate() throws IOException {\n  Map<String,Object> alwaysMatch=getAlwaysMatch();\n  if (alwaysMatch == null) {\n    alwaysMatch=ImmutableMap.of();\n  }\n  Map<String,Object> always=alwaysMatch;\n  Collection<Map<String,Object>> firsts=getFirstMatches();\n  if (firsts == null) {\n    firsts=ImmutableList.of(ImmutableMap.of());\n  }\n  if (firsts.isEmpty()) {\n    throw new IllegalArgumentException(\"First match w3c capabilities is zero length\");\n  }\n  firsts.stream().peek(map -> {\n    Set<String> overlap=Sets.intersection(always.keySet(),map.keySet());\n    if (!overlap.isEmpty()) {\n      throw new IllegalArgumentException(\"Overlapping keys between w3c always and first match capabilities: \" + overlap);\n    }\n  }\n).map(first -> {\n    Map<String,Object> toReturn=new HashMap<>();\n    toReturn.putAll(always);\n    toReturn.putAll(first);\n    return toReturn;\n  }\n).peek(map -> {\n    ImmutableSortedSet<String> nullKeys=map.entrySet().stream().filter(entry -> entry.getValue() == null).map(Map.Entry::getKey).collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));\n    if (!nullKeys.isEmpty()) {\n      throw new IllegalArgumentException(\"Null values found in w3c capabilities. Keys are: \" + nullKeys);\n    }\n  }\n).peek(map -> {\n    ImmutableSortedSet<String> illegalKeys=map.entrySet().stream().filter(entry -> !ACCEPTED_W3C_PATTERNS.test(entry.getKey())).map(Map.Entry::getKey).collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));\n    if (!illegalKeys.isEmpty()) {\n      throw new IllegalArgumentException(\"Illegal key values seen in w3c capabilities: \" + illegalKeys);\n    }\n  }\n).forEach(map -> {\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 274,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (alwaysMatch == null) {\n  alwaysMatch=ImmutableMap.of();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 160,
    "startColumnNumber" : 8,
    "endLineNumber" : 160,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}