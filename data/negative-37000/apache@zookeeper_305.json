{
  "id" : 305,
  "expression" : "\"For \" + i",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/WatcherTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"For \" + i",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 168,
      "startColumnNumber" : 24,
      "endLineNumber" : 168,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 168,
        "startColumnNumber" : 11,
        "endLineNumber" : 168,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(\"For \" + i,1,watches[i].events.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 168,
        "startColumnNumber" : 11,
        "endLineNumber" : 168,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(\"For \" + i,1,watches[i].events.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 167,
        "startColumnNumber" : 40,
        "endLineNumber" : 169,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  assertEquals(\"For \" + i,1,watches[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 167,
        "startColumnNumber" : 7,
        "endLineNumber" : 169,
        "endColumnNumber" : 8
      },
      "nodeContext" : "for (int i=0; i < COUNT / 2; i++) {\n  assertEquals(\"For \" + i,1,watches[i].events.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 139,
        "startColumnNumber" : 65,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MyWatcher watches[]=new MyWatcher[COUNT];\n  MyStatCallback cbs[]=new MyStatCallback[COUNT];\n  MyWatcher watcher=new MyWatcher();\n  int count[]=new int[1];\n  TestableZooKeeper zk=createClient(watcher,hostPort);\n  ZooKeeper zk2=createClient(watcher,hostPort);\n  zk2.create(\"/test\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  for (int i=0; i < COUNT / 2; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  zk.exists(\"/test\",false);\n  zk.pauseCnxn(4000);\n  Thread.sleep(50);\n  zk2.close();\n  stopServer();\n  watches[0].waitForDisconnected(3000);\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  startServer();\n  watches[49].waitForConnected(4000);\n  assertEquals(null,zk.exists(\"/test\",false));\n  Thread.sleep(10);\n  for (int i=0; i < COUNT / 2; i++) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    if (cbs[i].rc == 0) {\n      assertEquals(\"For \" + i,1,watches[i].events.size());\n    }\n else {\n      assertEquals(\"For \" + i,0,watches[i].events.size());\n    }\n  }\n  assertEquals(COUNT,count[0]);\n  zk.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1780,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This test checks that watches for pending requests do not get triggered, but watches set by previous requests do.\n * @throws Exception\n */\n@Test public void testWatchAutoResetWithPending() throws Exception {\n  MyWatcher watches[]=new MyWatcher[COUNT];\n  MyStatCallback cbs[]=new MyStatCallback[COUNT];\n  MyWatcher watcher=new MyWatcher();\n  int count[]=new int[1];\n  TestableZooKeeper zk=createClient(watcher,hostPort);\n  ZooKeeper zk2=createClient(watcher,hostPort);\n  zk2.create(\"/test\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  for (int i=0; i < COUNT / 2; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  zk.exists(\"/test\",false);\n  zk.pauseCnxn(4000);\n  Thread.sleep(50);\n  zk2.close();\n  stopServer();\n  watches[0].waitForDisconnected(3000);\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  startServer();\n  watches[49].waitForConnected(4000);\n  assertEquals(null,zk.exists(\"/test\",false));\n  Thread.sleep(10);\n  for (int i=0; i < COUNT / 2; i++) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    if (cbs[i].rc == 0) {\n      assertEquals(\"For \" + i,1,watches[i].events.size());\n    }\n else {\n      assertEquals(\"For \" + i,0,watches[i].events.size());\n    }\n  }\n  assertEquals(COUNT,count[0]);\n  zk.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 168,
        "startColumnNumber" : 11,
        "endLineNumber" : 168,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(\"For \" + i,1,watches[i].events.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"For \" + i",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 172,
      "startColumnNumber" : 28,
      "endLineNumber" : 172,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 172,
        "startColumnNumber" : 15,
        "endLineNumber" : 172,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertEquals(\"For \" + i,1,watches[i].events.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 172,
        "startColumnNumber" : 15,
        "endLineNumber" : 172,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals(\"For \" + i,1,watches[i].events.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 171,
        "startColumnNumber" : 31,
        "endLineNumber" : 173,
        "endColumnNumber" : 12
      },
      "nodeContext" : "{\n  assertEquals(\"For \" + i,1,watches[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 171,
        "startColumnNumber" : 11,
        "endLineNumber" : 175,
        "endColumnNumber" : 12
      },
      "nodeContext" : "if (cbs[i].rc == 0) {\n  assertEquals(\"For \" + i,1,watches[i].events.size());\n}\n else {\n  assertEquals(\"For \" + i,0,watches[i].events.size());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 170,
        "startColumnNumber" : 44,
        "endLineNumber" : 176,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  if (cbs[i].rc == 0) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n else {\n    assertEquals(\"For \" + i,0,watches[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 170,
        "startColumnNumber" : 7,
        "endLineNumber" : 176,
        "endColumnNumber" : 8
      },
      "nodeContext" : "for (int i=COUNT / 2; i < COUNT; i++) {\n  if (cbs[i].rc == 0) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n else {\n    assertEquals(\"For \" + i,0,watches[i].events.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 139,
        "startColumnNumber" : 65,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MyWatcher watches[]=new MyWatcher[COUNT];\n  MyStatCallback cbs[]=new MyStatCallback[COUNT];\n  MyWatcher watcher=new MyWatcher();\n  int count[]=new int[1];\n  TestableZooKeeper zk=createClient(watcher,hostPort);\n  ZooKeeper zk2=createClient(watcher,hostPort);\n  zk2.create(\"/test\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  for (int i=0; i < COUNT / 2; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  zk.exists(\"/test\",false);\n  zk.pauseCnxn(4000);\n  Thread.sleep(50);\n  zk2.close();\n  stopServer();\n  watches[0].waitForDisconnected(3000);\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  startServer();\n  watches[49].waitForConnected(4000);\n  assertEquals(null,zk.exists(\"/test\",false));\n  Thread.sleep(10);\n  for (int i=0; i < COUNT / 2; i++) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    if (cbs[i].rc == 0) {\n      assertEquals(\"For \" + i,1,watches[i].events.size());\n    }\n else {\n      assertEquals(\"For \" + i,0,watches[i].events.size());\n    }\n  }\n  assertEquals(COUNT,count[0]);\n  zk.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1780,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This test checks that watches for pending requests do not get triggered, but watches set by previous requests do.\n * @throws Exception\n */\n@Test public void testWatchAutoResetWithPending() throws Exception {\n  MyWatcher watches[]=new MyWatcher[COUNT];\n  MyStatCallback cbs[]=new MyStatCallback[COUNT];\n  MyWatcher watcher=new MyWatcher();\n  int count[]=new int[1];\n  TestableZooKeeper zk=createClient(watcher,hostPort);\n  ZooKeeper zk2=createClient(watcher,hostPort);\n  zk2.create(\"/test\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  for (int i=0; i < COUNT / 2; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  zk.exists(\"/test\",false);\n  zk.pauseCnxn(4000);\n  Thread.sleep(50);\n  zk2.close();\n  stopServer();\n  watches[0].waitForDisconnected(3000);\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  startServer();\n  watches[49].waitForConnected(4000);\n  assertEquals(null,zk.exists(\"/test\",false));\n  Thread.sleep(10);\n  for (int i=0; i < COUNT / 2; i++) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    if (cbs[i].rc == 0) {\n      assertEquals(\"For \" + i,1,watches[i].events.size());\n    }\n else {\n      assertEquals(\"For \" + i,0,watches[i].events.size());\n    }\n  }\n  assertEquals(COUNT,count[0]);\n  zk.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 172,
        "startColumnNumber" : 15,
        "endLineNumber" : 172,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals(\"For \" + i,1,watches[i].events.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"For \" + i",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 174,
      "startColumnNumber" : 28,
      "endLineNumber" : 174,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 174,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertEquals(\"For \" + i,0,watches[i].events.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 174,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals(\"For \" + i,0,watches[i].events.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 173,
        "startColumnNumber" : 18,
        "endLineNumber" : 175,
        "endColumnNumber" : 12
      },
      "nodeContext" : "{\n  assertEquals(\"For \" + i,0,watches[i].events.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 171,
        "startColumnNumber" : 11,
        "endLineNumber" : 175,
        "endColumnNumber" : 12
      },
      "nodeContext" : "if (cbs[i].rc == 0) {\n  assertEquals(\"For \" + i,1,watches[i].events.size());\n}\n else {\n  assertEquals(\"For \" + i,0,watches[i].events.size());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 170,
        "startColumnNumber" : 44,
        "endLineNumber" : 176,
        "endColumnNumber" : 8
      },
      "nodeContext" : "{\n  if (cbs[i].rc == 0) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n else {\n    assertEquals(\"For \" + i,0,watches[i].events.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 170,
        "startColumnNumber" : 7,
        "endLineNumber" : 176,
        "endColumnNumber" : 8
      },
      "nodeContext" : "for (int i=COUNT / 2; i < COUNT; i++) {\n  if (cbs[i].rc == 0) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n else {\n    assertEquals(\"For \" + i,0,watches[i].events.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 139,
        "startColumnNumber" : 65,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MyWatcher watches[]=new MyWatcher[COUNT];\n  MyStatCallback cbs[]=new MyStatCallback[COUNT];\n  MyWatcher watcher=new MyWatcher();\n  int count[]=new int[1];\n  TestableZooKeeper zk=createClient(watcher,hostPort);\n  ZooKeeper zk2=createClient(watcher,hostPort);\n  zk2.create(\"/test\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  for (int i=0; i < COUNT / 2; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  zk.exists(\"/test\",false);\n  zk.pauseCnxn(4000);\n  Thread.sleep(50);\n  zk2.close();\n  stopServer();\n  watches[0].waitForDisconnected(3000);\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  startServer();\n  watches[49].waitForConnected(4000);\n  assertEquals(null,zk.exists(\"/test\",false));\n  Thread.sleep(10);\n  for (int i=0; i < COUNT / 2; i++) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    if (cbs[i].rc == 0) {\n      assertEquals(\"For \" + i,1,watches[i].events.size());\n    }\n else {\n      assertEquals(\"For \" + i,0,watches[i].events.size());\n    }\n  }\n  assertEquals(COUNT,count[0]);\n  zk.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1780,
        "startLineNumber" : 132,
        "startColumnNumber" : 4,
        "endLineNumber" : 179,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This test checks that watches for pending requests do not get triggered, but watches set by previous requests do.\n * @throws Exception\n */\n@Test public void testWatchAutoResetWithPending() throws Exception {\n  MyWatcher watches[]=new MyWatcher[COUNT];\n  MyStatCallback cbs[]=new MyStatCallback[COUNT];\n  MyWatcher watcher=new MyWatcher();\n  int count[]=new int[1];\n  TestableZooKeeper zk=createClient(watcher,hostPort);\n  ZooKeeper zk2=createClient(watcher,hostPort);\n  zk2.create(\"/test\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  for (int i=0; i < COUNT / 2; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  zk.exists(\"/test\",false);\n  zk.pauseCnxn(4000);\n  Thread.sleep(50);\n  zk2.close();\n  stopServer();\n  watches[0].waitForDisconnected(3000);\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    watches[i]=new MyWatcher();\n    cbs[i]=new MyStatCallback();\n    zk.exists(\"/test\",watches[i],cbs[i],count);\n  }\n  startServer();\n  watches[49].waitForConnected(4000);\n  assertEquals(null,zk.exists(\"/test\",false));\n  Thread.sleep(10);\n  for (int i=0; i < COUNT / 2; i++) {\n    assertEquals(\"For \" + i,1,watches[i].events.size());\n  }\n  for (int i=COUNT / 2; i < COUNT; i++) {\n    if (cbs[i].rc == 0) {\n      assertEquals(\"For \" + i,1,watches[i].events.size());\n    }\n else {\n      assertEquals(\"For \" + i,0,watches[i].events.size());\n    }\n  }\n  assertEquals(COUNT,count[0]);\n  zk.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 315,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 174,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertEquals(\"For \" + i,0,watches[i].events.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 168,
    "startColumnNumber" : 24,
    "endLineNumber" : 168,
    "endColumnNumber" : 34
  }, {
    "charLength" : 9,
    "startLineNumber" : 172,
    "startColumnNumber" : 28,
    "endLineNumber" : 172,
    "endColumnNumber" : 37
  }, {
    "charLength" : 9,
    "startLineNumber" : 174,
    "startColumnNumber" : 28,
    "endLineNumber" : 174,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}