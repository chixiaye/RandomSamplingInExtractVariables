{
  "id" : 233,
  "expression" : "BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/strings/RabinKarp.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 49,
      "startLineNumber" : 89,
      "startColumnNumber" : 18,
      "endLineNumber" : 89,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 67
      },
      "nodeContext" : "POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "for (int i=0; i < N_HASHES; i++) POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1113,
        "startLineNumber" : 73,
        "startColumnNumber" : 69,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<Integer> matches=new ArrayList<>();\n  if (text == null || pattern == null)   return matches;\n  final int PL=pattern.length(), TL=text.length();\n  if (PL > TL)   return matches;\n  long[] patternHash=computeHash(pattern);\n  long[] rollingHash=computeHash(text.substring(0,PL));\n  final BigInteger BIG_PL=new BigInteger(String.valueOf(PL));\n  final long[] POWERS=new long[N_HASHES];\n  for (int i=0; i < N_HASHES; i++)   POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n  for (int i=PL - 1; ; ) {\n    if (Arrays.equals(patternHash,rollingHash)) {\n      matches.add(i - PL + 1);\n    }\n    if (++i == TL)     return matches;\n    char firstValue=text.charAt(i - PL);\n    char lastValue=text.charAt(i);\n    for (int j=0; j < patternHash.length; j++) {\n      rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n      rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 205,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1180,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static List<Integer> rabinKarp(String text,String pattern){\n  List<Integer> matches=new ArrayList<>();\n  if (text == null || pattern == null)   return matches;\n  final int PL=pattern.length(), TL=text.length();\n  if (PL > TL)   return matches;\n  long[] patternHash=computeHash(pattern);\n  long[] rollingHash=computeHash(text.substring(0,PL));\n  final BigInteger BIG_PL=new BigInteger(String.valueOf(PL));\n  final long[] POWERS=new long[N_HASHES];\n  for (int i=0; i < N_HASHES; i++)   POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n  for (int i=PL - 1; ; ) {\n    if (Arrays.equals(patternHash,rollingHash)) {\n      matches.add(i - PL + 1);\n    }\n    if (++i == TL)     return matches;\n    char firstValue=text.charAt(i - PL);\n    char lastValue=text.charAt(i);\n    for (int j=0; j < patternHash.length; j++) {\n      rollingHash[j]=addRight(rollingHash[j],lastValue,j);\n      rollingHash[j]=removeLeft(rollingHash[j],POWERS[j],firstValue,j);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 89,
        "startColumnNumber" : 6,
        "endLineNumber" : 89,
        "endColumnNumber" : 68
      },
      "nodeContext" : "POWERS[i]=BIG_ALPHA.modPow(BIG_PL,BIG_MODS[i]).longValue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 9,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 49,
    "startLineNumber" : 89,
    "startColumnNumber" : 18,
    "endLineNumber" : 89,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}