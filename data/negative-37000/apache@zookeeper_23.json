{
  "id" : 23,
  "expression" : "7",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/compiler/generated/RccTokenManager.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 743,
      "startColumnNumber" : 50,
      "endLineNumber" : 743,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 743,
        "startColumnNumber" : 34,
        "endLineNumber" : 743,
        "endColumnNumber" : 51
      },
      "nodeContext" : "jjmatchedKind > 7",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 743,
        "startColumnNumber" : 13,
        "endLineNumber" : 743,
        "endColumnNumber" : 51
      },
      "nodeContext" : "jjmatchedPos == 0 && jjmatchedKind > 7",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 743,
        "startColumnNumber" : 9,
        "endLineNumber" : 746,
        "endColumnNumber" : 10
      },
      "nodeContext" : "if (jjmatchedPos == 0 && jjmatchedKind > 7) {\n  jjmatchedKind=7;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 727,
        "startColumnNumber" : 5,
        "endLineNumber" : 757,
        "endColumnNumber" : 6
      },
      "nodeContext" : "switch (curLexState) {\ncase 0:  try {\n    input_stream.backup(0);\n    while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)     curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e1) {\n    continue EOFLoop;\n  }\njjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 726,
        "startColumnNumber" : 3,
        "endLineNumber" : 821,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\nswitch (curLexState) {\ncase 0:    try {\n      input_stream.backup(0);\n      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)       curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e1) {\n      continue EOFLoop;\n    }\n  jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 426,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3281,
        "startLineNumber" : 725,
        "startColumnNumber" : 3,
        "endLineNumber" : 821,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (; ; ) {\nswitch (curLexState) {\ncase 0:    try {\n      input_stream.backup(0);\n      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)       curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e1) {\n      continue EOFLoop;\n    }\n  jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 427,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3589,
        "startLineNumber" : 710,
        "startColumnNumber" : 2,
        "endLineNumber" : 822,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e) {\n    jjmatchedKind=0;\n    matchedToken=jjFillToken();\n    matchedToken.specialToken=specialToken;\n    return matchedToken;\n  }\n  image=null;\n  jjimageLen=0;\n  for (; ; ) {\nswitch (curLexState) {\ncase 0:      try {\n        input_stream.backup(0);\n        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)         curChar=input_stream.BeginToken();\n      }\n catch (      java.io.IOException e1) {\n        continue EOFLoop;\n      }\n    jjmatchedKind=0x7fffffff;\n  jjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 3600,
        "startLineNumber" : 709,
        "startColumnNumber" : 2,
        "endLineNumber" : 822,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (; ; ) {\n  try {\n    curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e) {\n    jjmatchedKind=0;\n    matchedToken=jjFillToken();\n    matchedToken.specialToken=specialToken;\n    return matchedToken;\n  }\n  image=null;\n  jjimageLen=0;\n  for (; ; ) {\nswitch (curLexState) {\ncase 0:      try {\n        input_stream.backup(0);\n        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)         curChar=input_stream.BeginToken();\n      }\n catch (      java.io.IOException e1) {\n        continue EOFLoop;\n      }\n    jjmatchedKind=0x7fffffff;\n  jjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 472,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3612,
        "startLineNumber" : 708,
        "startColumnNumber" : 2,
        "endLineNumber" : 822,
        "endColumnNumber" : 3
      },
      "nodeContext" : "EOFLoop: for (; ; ) {\n  try {\n    curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e) {\n    jjmatchedKind=0;\n    matchedToken=jjFillToken();\n    matchedToken.specialToken=specialToken;\n    return matchedToken;\n  }\n  image=null;\n  jjimageLen=0;\n  for (; ; ) {\nswitch (curLexState) {\ncase 0:      try {\n        input_stream.backup(0);\n        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)         curChar=input_stream.BeginToken();\n      }\n catch (      java.io.IOException e1) {\n        continue EOFLoop;\n      }\n    jjmatchedKind=0x7fffffff;\n  jjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 474,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3700,
        "startLineNumber" : 702,
        "startColumnNumber" : 0,
        "endLineNumber" : 823,
        "endColumnNumber" : 1
      },
      "nodeContext" : "{\n  int kind;\n  Token specialToken=null;\n  Token matchedToken;\n  int curPos=0;\n  EOFLoop:   for (; ; ) {\n    try {\n      curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e) {\n      jjmatchedKind=0;\n      matchedToken=jjFillToken();\n      matchedToken.specialToken=specialToken;\n      return matchedToken;\n    }\n    image=null;\n    jjimageLen=0;\n    for (; ; ) {\nswitch (curLexState) {\ncase 0:        try {\n          input_stream.backup(0);\n          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)           curChar=input_stream.BeginToken();\n        }\n catch (        java.io.IOException e1) {\n          continue EOFLoop;\n        }\n      jjmatchedKind=0x7fffffff;\n    jjmatchedPos=0;\n  curPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 495,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3729,
        "startLineNumber" : 701,
        "startColumnNumber" : 0,
        "endLineNumber" : 823,
        "endColumnNumber" : 1
      },
      "nodeContext" : "public Token getNextToken(){\n  int kind;\n  Token specialToken=null;\n  Token matchedToken;\n  int curPos=0;\n  EOFLoop:   for (; ; ) {\n    try {\n      curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e) {\n      jjmatchedKind=0;\n      matchedToken=jjFillToken();\n      matchedToken.specialToken=specialToken;\n      return matchedToken;\n    }\n    image=null;\n    jjimageLen=0;\n    for (; ; ) {\nswitch (curLexState) {\ncase 0:        try {\n          input_stream.backup(0);\n          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)           curChar=input_stream.BeginToken();\n        }\n catch (        java.io.IOException e1) {\n          continue EOFLoop;\n        }\n      jjmatchedKind=0x7fffffff;\n    jjmatchedPos=0;\n  curPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 743,
        "startColumnNumber" : 13,
        "endLineNumber" : 743,
        "endColumnNumber" : 51
      },
      "nodeContext" : "jjmatchedPos == 0 && jjmatchedKind > 7",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 745,
      "startColumnNumber" : 28,
      "endLineNumber" : 745,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 745,
        "startColumnNumber" : 12,
        "endLineNumber" : 745,
        "endColumnNumber" : 29
      },
      "nodeContext" : "jjmatchedKind=7",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 745,
        "startColumnNumber" : 12,
        "endLineNumber" : 745,
        "endColumnNumber" : 30
      },
      "nodeContext" : "jjmatchedKind=7;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 744,
        "startColumnNumber" : 9,
        "endLineNumber" : 746,
        "endColumnNumber" : 10
      },
      "nodeContext" : "{\n  jjmatchedKind=7;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 743,
        "startColumnNumber" : 9,
        "endLineNumber" : 746,
        "endColumnNumber" : 10
      },
      "nodeContext" : "if (jjmatchedPos == 0 && jjmatchedKind > 7) {\n  jjmatchedKind=7;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 913,
        "startLineNumber" : 727,
        "startColumnNumber" : 5,
        "endLineNumber" : 757,
        "endColumnNumber" : 6
      },
      "nodeContext" : "switch (curLexState) {\ncase 0:  try {\n    input_stream.backup(0);\n    while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)     curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e1) {\n    continue EOFLoop;\n  }\njjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3269,
        "startLineNumber" : 726,
        "startColumnNumber" : 3,
        "endLineNumber" : 821,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\nswitch (curLexState) {\ncase 0:    try {\n      input_stream.backup(0);\n      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)       curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e1) {\n      continue EOFLoop;\n    }\n  jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 426,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3281,
        "startLineNumber" : 725,
        "startColumnNumber" : 3,
        "endLineNumber" : 821,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (; ; ) {\nswitch (curLexState) {\ncase 0:    try {\n      input_stream.backup(0);\n      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)       curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e1) {\n      continue EOFLoop;\n    }\n  jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 427,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3589,
        "startLineNumber" : 710,
        "startColumnNumber" : 2,
        "endLineNumber" : 822,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e) {\n    jjmatchedKind=0;\n    matchedToken=jjFillToken();\n    matchedToken.specialToken=specialToken;\n    return matchedToken;\n  }\n  image=null;\n  jjimageLen=0;\n  for (; ; ) {\nswitch (curLexState) {\ncase 0:      try {\n        input_stream.backup(0);\n        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)         curChar=input_stream.BeginToken();\n      }\n catch (      java.io.IOException e1) {\n        continue EOFLoop;\n      }\n    jjmatchedKind=0x7fffffff;\n  jjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 3600,
        "startLineNumber" : 709,
        "startColumnNumber" : 2,
        "endLineNumber" : 822,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (; ; ) {\n  try {\n    curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e) {\n    jjmatchedKind=0;\n    matchedToken=jjFillToken();\n    matchedToken.specialToken=specialToken;\n    return matchedToken;\n  }\n  image=null;\n  jjimageLen=0;\n  for (; ; ) {\nswitch (curLexState) {\ncase 0:      try {\n        input_stream.backup(0);\n        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)         curChar=input_stream.BeginToken();\n      }\n catch (      java.io.IOException e1) {\n        continue EOFLoop;\n      }\n    jjmatchedKind=0x7fffffff;\n  jjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 472,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3612,
        "startLineNumber" : 708,
        "startColumnNumber" : 2,
        "endLineNumber" : 822,
        "endColumnNumber" : 3
      },
      "nodeContext" : "EOFLoop: for (; ; ) {\n  try {\n    curChar=input_stream.BeginToken();\n  }\n catch (  java.io.IOException e) {\n    jjmatchedKind=0;\n    matchedToken=jjFillToken();\n    matchedToken.specialToken=specialToken;\n    return matchedToken;\n  }\n  image=null;\n  jjimageLen=0;\n  for (; ; ) {\nswitch (curLexState) {\ncase 0:      try {\n        input_stream.backup(0);\n        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)         curChar=input_stream.BeginToken();\n      }\n catch (      java.io.IOException e1) {\n        continue EOFLoop;\n      }\n    jjmatchedKind=0x7fffffff;\n  jjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 474,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3700,
        "startLineNumber" : 702,
        "startColumnNumber" : 0,
        "endLineNumber" : 823,
        "endColumnNumber" : 1
      },
      "nodeContext" : "{\n  int kind;\n  Token specialToken=null;\n  Token matchedToken;\n  int curPos=0;\n  EOFLoop:   for (; ; ) {\n    try {\n      curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e) {\n      jjmatchedKind=0;\n      matchedToken=jjFillToken();\n      matchedToken.specialToken=specialToken;\n      return matchedToken;\n    }\n    image=null;\n    jjimageLen=0;\n    for (; ; ) {\nswitch (curLexState) {\ncase 0:        try {\n          input_stream.backup(0);\n          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)           curChar=input_stream.BeginToken();\n        }\n catch (        java.io.IOException e1) {\n          continue EOFLoop;\n        }\n      jjmatchedKind=0x7fffffff;\n    jjmatchedPos=0;\n  curPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 495,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3729,
        "startLineNumber" : 701,
        "startColumnNumber" : 0,
        "endLineNumber" : 823,
        "endColumnNumber" : 1
      },
      "nodeContext" : "public Token getNextToken(){\n  int kind;\n  Token specialToken=null;\n  Token matchedToken;\n  int curPos=0;\n  EOFLoop:   for (; ; ) {\n    try {\n      curChar=input_stream.BeginToken();\n    }\n catch (    java.io.IOException e) {\n      jjmatchedKind=0;\n      matchedToken=jjFillToken();\n      matchedToken.specialToken=specialToken;\n      return matchedToken;\n    }\n    image=null;\n    jjimageLen=0;\n    for (; ; ) {\nswitch (curLexState) {\ncase 0:        try {\n          input_stream.backup(0);\n          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)           curChar=input_stream.BeginToken();\n        }\n catch (        java.io.IOException e1) {\n          continue EOFLoop;\n        }\n      jjmatchedKind=0x7fffffff;\n    jjmatchedPos=0;\n  curPos=jjMoveStringLiteralDfa0_0();\nbreak;\ncase 1:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_1();\nif (jjmatchedPos == 0 && jjmatchedKind > 7) {\njjmatchedKind=7;\n}\nbreak;\ncase 2:jjmatchedKind=0x7fffffff;\njjmatchedPos=0;\ncurPos=jjMoveStringLiteralDfa0_2();\nif (jjmatchedPos == 0 && jjmatchedKind > 10) {\njjmatchedKind=10;\n}\nbreak;\n}\nif (jjmatchedKind != 0x7fffffff) {\nif (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);\nif ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nmatchedToken.specialToken=specialToken;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\nreturn matchedToken;\n}\n else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nif ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {\nmatchedToken=jjFillToken();\nif (specialToken == null) specialToken=matchedToken;\n else {\nmatchedToken.specialToken=specialToken;\nspecialToken=(specialToken.next=matchedToken);\n}\nSkipLexicalActions(matchedToken);\n}\n else SkipLexicalActions(null);\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncontinue EOFLoop;\n}\njjimageLen+=jjmatchedPos + 1;\nif (jjnewLexState[jjmatchedKind] != -1) curLexState=jjnewLexState[jjmatchedKind];\ncurPos=0;\njjmatchedKind=0x7fffffff;\ntry {\ncurChar=input_stream.readChar();\ncontinue;\n}\n catch (java.io.IOException e1) {\n}\n}\nint error_line=input_stream.getEndLine();\nint error_column=input_stream.getEndColumn();\nString error_after=null;\nboolean EOFSeen=false;\ntry {\ninput_stream.readChar();\ninput_stream.backup(1);\n}\n catch (java.io.IOException e1) {\nEOFSeen=true;\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\nif (curChar == '\\n' || curChar == '\\r') {\nerror_line++;\nerror_column=0;\n}\n else error_column++;\n}\nif (!EOFSeen) {\ninput_stream.backup(1);\nerror_after=curPos <= 1 ? \"\" : input_stream.GetImage();\n}\nthrow new TokenMgrError(EOFSeen,curLexState,error_line,error_column,error_after,curChar,TokenMgrError.LEXICAL_ERROR);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 500,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 745,
        "startColumnNumber" : 12,
        "endLineNumber" : 745,
        "endColumnNumber" : 30
      },
      "nodeContext" : "jjmatchedKind=7;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 743,
    "startColumnNumber" : 50,
    "endLineNumber" : 743,
    "endColumnNumber" : 51
  }, {
    "charLength" : 1,
    "startLineNumber" : 745,
    "startColumnNumber" : 28,
    "endLineNumber" : 745,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}