{
  "id" : 42,
  "expression" : "new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true)",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/parser/JSONScannerTest_ISO8601.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 56,
      "startLineNumber" : 30,
      "startColumnNumber" : 35,
      "endLineNumber" : 30,
      "endColumnNumber" : 91
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 92
      },
      "nodeContext" : "Assert.assertEquals(false,new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(false,new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8587,
        "startLineNumber" : 12,
        "startColumnNumber" : 42,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertEquals(false,new JSONLexer(\"1\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"3\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"3000-10-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997-2-2\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"1997-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997:02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997-02:02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2A00-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2!00-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"20A0-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"20!0-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"200A-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"200!-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-32-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-1A-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-10-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-11-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-12-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-13-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-20-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-0A-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-0!-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-0!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-0A\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-20\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-2A\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-2!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-30\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-31\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-32\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-42\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00-00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T01:01:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T0A:01:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T0!:01:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:10:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T10011:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T10:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T1!:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T1a:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:1A:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:1!:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T20:20:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T21:21:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T22:22:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T23:23:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T24:24:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T25:25:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T2!:20:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T30:20:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00A22:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:22:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:!2:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:A2:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:2A:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:2!:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:60:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:61:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:0!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:0A\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:60\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:61\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:70\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:!0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:A0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:00.000\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.A00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.!00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.0A0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.0!0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.00!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.00a\").scanISO8601DateIfMatch(true));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1033,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8625,
        "startLineNumber" : 12,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  Assert.assertEquals(false,new JSONLexer(\"1\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"3\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"3000-10-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997-2-2\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"1997-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997:02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"1997-02:02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2A00-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2!00-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"20A0-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"20!0-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"200A-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"200!-02-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-32-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-1A-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-10-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-11-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-12-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-13-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-20-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-0A-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-0!-02\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-0!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-0A\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-20\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-2A\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-2!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-30\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-31\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-32\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-42\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00-00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T01:01:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T0A:01:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T0!:01:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:10:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T10011:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T10:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T1!:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T1a:11:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:1A:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:1!:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T20:20:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T21:21:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T22:22:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T23:23:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T24:24:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T25:25:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T2!:20:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T30:20:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00A22:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:22:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:!2:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:A2:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:2A:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:2!:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:60:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:61:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:01\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:0!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:0A\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:60\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:61\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:70\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:!0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:A0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(true,new JSONLexer(\"2000-02-10T00:00:00.000\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.A00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.!00\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.0A0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.0!0\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.00!\").scanISO8601DateIfMatch(true));\n  Assert.assertEquals(false,new JSONLexer(\"2000-02-10T00:00:00.00a\").scanISO8601DateIfMatch(true));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1039,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Assert.assertEquals(false,new JSONLexer(\"2000-1!-02\").scanISO8601DateIfMatch(true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 56,
    "startLineNumber" : 30,
    "startColumnNumber" : 35,
    "endLineNumber" : 30,
    "endColumnNumber" : 91
  } ],
  "layoutRelationDataList" : [ ]
}