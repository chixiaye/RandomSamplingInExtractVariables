{
  "id" : 187,
  "expression" : "\"id\"",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/test/java/io/seata/rm/datasource/sql/struct/TableMetaTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"id\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 96,
      "startColumnNumber" : 32,
      "endLineNumber" : 96,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 60
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getPkName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getPkName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The table meta fetch test.\n */\n@Test public void getTableMetaTest_0(){\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 61
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getPkName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"id\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 98,
      "startColumnNumber" : 32,
      "endLineNumber" : 98,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The table meta fetch test.\n */\n@Test public void getTableMetaTest_0(){\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"id\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 98,
      "startColumnNumber" : 62,
      "endLineNumber" : 98,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 98,
        "startColumnNumber" : 38,
        "endLineNumber" : 98,
        "endColumnNumber" : 67
      },
      "nodeContext" : "tableMeta.getColumnMeta(\"id\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 98,
        "startColumnNumber" : 38,
        "endLineNumber" : 98,
        "endColumnNumber" : 83
      },
      "nodeContext" : "tableMeta.getColumnMeta(\"id\").getColumnName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The table meta fetch test.\n */\n@Test public void getTableMetaTest_0(){\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"id\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 99,
      "startColumnNumber" : 32,
      "endLineNumber" : 99,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The table meta fetch test.\n */\n@Test public void getTableMetaTest_0(){\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"id\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 101,
      "startColumnNumber" : 58,
      "endLineNumber" : 101,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 101,
        "startColumnNumber" : 32,
        "endLineNumber" : 101,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Collections.singletonList(\"id\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 99
      },
      "nodeContext" : "Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The table meta fetch test.\n */\n@Test public void getTableMetaTest_0(){\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"id\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 105,
      "startColumnNumber" : 77,
      "endLineNumber" : 105,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 105,
        "startColumnNumber" : 47,
        "endLineNumber" : 105,
        "endColumnNumber" : 82
      },
      "nodeContext" : "tableMeta.getAllColumns().get(\"id\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 83
      },
      "nodeContext" : "assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2548,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * The table meta fetch test.\n */\n@Test public void getTableMetaTest_0(){\n  MockDriver mockDriver=new MockDriver();\n  mockDriver.setExecuteHandler(new MockExecuteHandler(){\n    @Override public ResultSet executeQuery(    MockStatementBase statement,    String s) throws SQLException {\n      com.alibaba.druid.mock.MockResultSet resultSet=new com.alibaba.druid.mock.MockResultSet(statement);\n      List<ResultSetMetaDataBase.ColumnMetaData> columns=resultSet.getMockMetaData().getColumns();\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      columns.add(new ResultSetMetaDataBase.ColumnMetaData());\n      return resultSet;\n    }\n  }\n);\n  DruidDataSource dataSource=new DruidDataSource();\n  dataSource.setUrl(\"jdbc:mock:xxx\");\n  dataSource.setDriver(mockDriver);\n  DataSourceProxy proxy=new DataSourceProxy(dataSource);\n  TableMeta tableMeta=TableMetaCache.getTableMeta(proxy,\"t1\");\n  Assertions.assertEquals(\"t1\",tableMeta.getTableName());\n  Assertions.assertEquals(\"id\",tableMeta.getPkName());\n  Assertions.assertEquals(\"id\",tableMeta.getColumnMeta(\"id\").getColumnName());\n  Assertions.assertEquals(\"id\",tableMeta.getAutoIncreaseColumn().getColumnName());\n  Assertions.assertEquals(1,tableMeta.getPrimaryKeyMap().size());\n  Assertions.assertEquals(Collections.singletonList(\"id\"),tableMeta.getPrimaryKeyOnlyName());\n  Assertions.assertEquals(4,tableMeta.getAllColumns().size());\n  assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n  assertColumnMetaEquals(columnMetas[1],tableMeta.getAllColumns().get(\"name1\"));\n  assertColumnMetaEquals(columnMetas[2],tableMeta.getAllColumns().get(\"name2\"));\n  assertColumnMetaEquals(columnMetas[3],tableMeta.getAllColumns().get(\"name3\"));\n  Assertions.assertEquals(2,tableMeta.getAllIndexes().size());\n  assertIndexMetaEquals(indexMetas[0],tableMeta.getAllIndexes().get(\"PRIMARY\"));\n  Assertions.assertEquals(IndexType.PRIMARY,tableMeta.getAllIndexes().get(\"PRIMARY\").getIndextype());\n  assertIndexMetaEquals(indexMetas[1],tableMeta.getAllIndexes().get(\"name1\"));\n  Assertions.assertEquals(IndexType.Unique,tableMeta.getAllIndexes().get(\"name1\").getIndextype());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 337,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 84
      },
      "nodeContext" : "assertColumnMetaEquals(columnMetas[0],tableMeta.getAllColumns().get(\"id\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 96,
    "startColumnNumber" : 32,
    "endLineNumber" : 96,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 98,
    "startColumnNumber" : 32,
    "endLineNumber" : 98,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 98,
    "startColumnNumber" : 62,
    "endLineNumber" : 98,
    "endColumnNumber" : 66
  }, {
    "charLength" : 4,
    "startLineNumber" : 99,
    "startColumnNumber" : 32,
    "endLineNumber" : 99,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 101,
    "startColumnNumber" : 58,
    "endLineNumber" : 101,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 105,
    "startColumnNumber" : 77,
    "endLineNumber" : 105,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}