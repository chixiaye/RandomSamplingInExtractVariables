{
  "id" : 233,
  "expression" : "Types",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-end-to-end-tests/flink-stream-sql-test/src/main/java/org/apache/flink/sql/tests/StreamSQLTestProgram.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Types",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 149,
      "startColumnNumber" : 44,
      "endLineNumber" : 149,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 149,
        "startColumnNumber" : 44,
        "endLineNumber" : 149,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Types.ROW(Types.INT,Types.SQL_TIMESTAMP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 148,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 87
      },
      "nodeContext" : "DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4501,
        "startLineNumber" : 77,
        "startColumnNumber" : 60,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterTool params=ParameterTool.fromArgs(args);\n  String outputPath=params.getRequired(\"outputPath\");\n  final StreamExecutionEnvironment sEnv=StreamExecutionEnvironment.getExecutionEnvironment();\n  sEnv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,Time.of(10,TimeUnit.SECONDS)));\n  sEnv.enableCheckpointing(4000);\n  sEnv.getConfig().setAutoWatermarkInterval(1000);\n  final StreamTableEnvironment tEnv=StreamTableEnvironment.create(sEnv);\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table1\",new GeneratorTableSource(10,100,60,0));\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table2\",new GeneratorTableSource(5,0.2f,60,5));\n  int overWindowSizeSeconds=1;\n  int tumbleWindowSizeSeconds=10;\n  String overQuery=String.format(\"SELECT \" + \"  key, \" + \"  rowtime, \"+ \"  COUNT(*) OVER (PARTITION BY key ORDER BY rowtime RANGE BETWEEN INTERVAL '%d' SECOND PRECEDING AND CURRENT ROW) AS cnt \"+ \"FROM table1\",overWindowSizeSeconds);\n  String tumbleQuery=String.format(\"SELECT \" + \"  key, \" + \"  CASE SUM(cnt) / COUNT(*) WHEN 101 THEN 1 ELSE 99 END AS correct, \"+ \"  TUMBLE_START(rowtime, INTERVAL '%d' SECOND) AS wStart, \"+ \"  TUMBLE_ROWTIME(rowtime, INTERVAL '%d' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"WHERE rowtime > TIMESTAMP '1970-01-01 00:00:01' \"+ \"GROUP BY key, TUMBLE(rowtime, INTERVAL '%d' SECOND)\",tumbleWindowSizeSeconds,tumbleWindowSizeSeconds,overQuery,tumbleWindowSizeSeconds);\n  String joinQuery=String.format(\"SELECT \" + \"  t1.key, \" + \"  t2.rowtime AS rowtime, \"+ \"  t2.correct,\"+ \"  t2.wStart \"+ \"FROM table2 t1, (%s) t2 \"+ \"WHERE \"+ \"  t1.key = t2.key AND \"+ \"  t1.rowtime BETWEEN t2.rowtime AND t2.rowtime + INTERVAL '%d' SECOND\",tumbleQuery,tumbleWindowSizeSeconds);\n  String finalAgg=String.format(\"SELECT \" + \"  SUM(correct) AS correct, \" + \"  TUMBLE_START(rowtime, INTERVAL '20' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"GROUP BY TUMBLE(rowtime, INTERVAL '20' SECOND)\",joinQuery);\n  Table result=tEnv.sqlQuery(finalAgg);\n  DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n  final StreamingFileSink<Row> sink=StreamingFileSink.forRowFormat(new Path(outputPath),(Encoder<Row>)(element,stream) -> {\n    PrintStream out=new PrintStream(stream);\n    out.println(element.toString());\n  }\n).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build();\n  resultStream.map(new KillMapper()).setParallelism(1).addSink(sink).setParallelism(1);\n  sEnv.execute();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4557,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  ParameterTool params=ParameterTool.fromArgs(args);\n  String outputPath=params.getRequired(\"outputPath\");\n  final StreamExecutionEnvironment sEnv=StreamExecutionEnvironment.getExecutionEnvironment();\n  sEnv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,Time.of(10,TimeUnit.SECONDS)));\n  sEnv.enableCheckpointing(4000);\n  sEnv.getConfig().setAutoWatermarkInterval(1000);\n  final StreamTableEnvironment tEnv=StreamTableEnvironment.create(sEnv);\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table1\",new GeneratorTableSource(10,100,60,0));\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table2\",new GeneratorTableSource(5,0.2f,60,5));\n  int overWindowSizeSeconds=1;\n  int tumbleWindowSizeSeconds=10;\n  String overQuery=String.format(\"SELECT \" + \"  key, \" + \"  rowtime, \"+ \"  COUNT(*) OVER (PARTITION BY key ORDER BY rowtime RANGE BETWEEN INTERVAL '%d' SECOND PRECEDING AND CURRENT ROW) AS cnt \"+ \"FROM table1\",overWindowSizeSeconds);\n  String tumbleQuery=String.format(\"SELECT \" + \"  key, \" + \"  CASE SUM(cnt) / COUNT(*) WHEN 101 THEN 1 ELSE 99 END AS correct, \"+ \"  TUMBLE_START(rowtime, INTERVAL '%d' SECOND) AS wStart, \"+ \"  TUMBLE_ROWTIME(rowtime, INTERVAL '%d' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"WHERE rowtime > TIMESTAMP '1970-01-01 00:00:01' \"+ \"GROUP BY key, TUMBLE(rowtime, INTERVAL '%d' SECOND)\",tumbleWindowSizeSeconds,tumbleWindowSizeSeconds,overQuery,tumbleWindowSizeSeconds);\n  String joinQuery=String.format(\"SELECT \" + \"  t1.key, \" + \"  t2.rowtime AS rowtime, \"+ \"  t2.correct,\"+ \"  t2.wStart \"+ \"FROM table2 t1, (%s) t2 \"+ \"WHERE \"+ \"  t1.key = t2.key AND \"+ \"  t1.rowtime BETWEEN t2.rowtime AND t2.rowtime + INTERVAL '%d' SECOND\",tumbleQuery,tumbleWindowSizeSeconds);\n  String finalAgg=String.format(\"SELECT \" + \"  SUM(correct) AS correct, \" + \"  TUMBLE_START(rowtime, INTERVAL '20' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"GROUP BY TUMBLE(rowtime, INTERVAL '20' SECOND)\",joinQuery);\n  Table result=tEnv.sqlQuery(finalAgg);\n  DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n  final StreamingFileSink<Row> sink=StreamingFileSink.forRowFormat(new Path(outputPath),(Encoder<Row>)(element,stream) -> {\n    PrintStream out=new PrintStream(stream);\n    out.println(element.toString());\n  }\n).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build();\n  resultStream.map(new KillMapper()).setParallelism(1).addSink(sink).setParallelism(1);\n  sEnv.execute();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.typeinfo.Types"
  }, {
    "nodeContext" : "Types",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 149,
      "startColumnNumber" : 54,
      "endLineNumber" : 149,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 149,
        "startColumnNumber" : 54,
        "endLineNumber" : 149,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Types.INT",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 149,
        "startColumnNumber" : 44,
        "endLineNumber" : 149,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Types.ROW(Types.INT,Types.SQL_TIMESTAMP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 148,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 87
      },
      "nodeContext" : "DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4501,
        "startLineNumber" : 77,
        "startColumnNumber" : 60,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterTool params=ParameterTool.fromArgs(args);\n  String outputPath=params.getRequired(\"outputPath\");\n  final StreamExecutionEnvironment sEnv=StreamExecutionEnvironment.getExecutionEnvironment();\n  sEnv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,Time.of(10,TimeUnit.SECONDS)));\n  sEnv.enableCheckpointing(4000);\n  sEnv.getConfig().setAutoWatermarkInterval(1000);\n  final StreamTableEnvironment tEnv=StreamTableEnvironment.create(sEnv);\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table1\",new GeneratorTableSource(10,100,60,0));\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table2\",new GeneratorTableSource(5,0.2f,60,5));\n  int overWindowSizeSeconds=1;\n  int tumbleWindowSizeSeconds=10;\n  String overQuery=String.format(\"SELECT \" + \"  key, \" + \"  rowtime, \"+ \"  COUNT(*) OVER (PARTITION BY key ORDER BY rowtime RANGE BETWEEN INTERVAL '%d' SECOND PRECEDING AND CURRENT ROW) AS cnt \"+ \"FROM table1\",overWindowSizeSeconds);\n  String tumbleQuery=String.format(\"SELECT \" + \"  key, \" + \"  CASE SUM(cnt) / COUNT(*) WHEN 101 THEN 1 ELSE 99 END AS correct, \"+ \"  TUMBLE_START(rowtime, INTERVAL '%d' SECOND) AS wStart, \"+ \"  TUMBLE_ROWTIME(rowtime, INTERVAL '%d' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"WHERE rowtime > TIMESTAMP '1970-01-01 00:00:01' \"+ \"GROUP BY key, TUMBLE(rowtime, INTERVAL '%d' SECOND)\",tumbleWindowSizeSeconds,tumbleWindowSizeSeconds,overQuery,tumbleWindowSizeSeconds);\n  String joinQuery=String.format(\"SELECT \" + \"  t1.key, \" + \"  t2.rowtime AS rowtime, \"+ \"  t2.correct,\"+ \"  t2.wStart \"+ \"FROM table2 t1, (%s) t2 \"+ \"WHERE \"+ \"  t1.key = t2.key AND \"+ \"  t1.rowtime BETWEEN t2.rowtime AND t2.rowtime + INTERVAL '%d' SECOND\",tumbleQuery,tumbleWindowSizeSeconds);\n  String finalAgg=String.format(\"SELECT \" + \"  SUM(correct) AS correct, \" + \"  TUMBLE_START(rowtime, INTERVAL '20' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"GROUP BY TUMBLE(rowtime, INTERVAL '20' SECOND)\",joinQuery);\n  Table result=tEnv.sqlQuery(finalAgg);\n  DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n  final StreamingFileSink<Row> sink=StreamingFileSink.forRowFormat(new Path(outputPath),(Encoder<Row>)(element,stream) -> {\n    PrintStream out=new PrintStream(stream);\n    out.println(element.toString());\n  }\n).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build();\n  resultStream.map(new KillMapper()).setParallelism(1).addSink(sink).setParallelism(1);\n  sEnv.execute();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4557,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  ParameterTool params=ParameterTool.fromArgs(args);\n  String outputPath=params.getRequired(\"outputPath\");\n  final StreamExecutionEnvironment sEnv=StreamExecutionEnvironment.getExecutionEnvironment();\n  sEnv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,Time.of(10,TimeUnit.SECONDS)));\n  sEnv.enableCheckpointing(4000);\n  sEnv.getConfig().setAutoWatermarkInterval(1000);\n  final StreamTableEnvironment tEnv=StreamTableEnvironment.create(sEnv);\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table1\",new GeneratorTableSource(10,100,60,0));\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table2\",new GeneratorTableSource(5,0.2f,60,5));\n  int overWindowSizeSeconds=1;\n  int tumbleWindowSizeSeconds=10;\n  String overQuery=String.format(\"SELECT \" + \"  key, \" + \"  rowtime, \"+ \"  COUNT(*) OVER (PARTITION BY key ORDER BY rowtime RANGE BETWEEN INTERVAL '%d' SECOND PRECEDING AND CURRENT ROW) AS cnt \"+ \"FROM table1\",overWindowSizeSeconds);\n  String tumbleQuery=String.format(\"SELECT \" + \"  key, \" + \"  CASE SUM(cnt) / COUNT(*) WHEN 101 THEN 1 ELSE 99 END AS correct, \"+ \"  TUMBLE_START(rowtime, INTERVAL '%d' SECOND) AS wStart, \"+ \"  TUMBLE_ROWTIME(rowtime, INTERVAL '%d' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"WHERE rowtime > TIMESTAMP '1970-01-01 00:00:01' \"+ \"GROUP BY key, TUMBLE(rowtime, INTERVAL '%d' SECOND)\",tumbleWindowSizeSeconds,tumbleWindowSizeSeconds,overQuery,tumbleWindowSizeSeconds);\n  String joinQuery=String.format(\"SELECT \" + \"  t1.key, \" + \"  t2.rowtime AS rowtime, \"+ \"  t2.correct,\"+ \"  t2.wStart \"+ \"FROM table2 t1, (%s) t2 \"+ \"WHERE \"+ \"  t1.key = t2.key AND \"+ \"  t1.rowtime BETWEEN t2.rowtime AND t2.rowtime + INTERVAL '%d' SECOND\",tumbleQuery,tumbleWindowSizeSeconds);\n  String finalAgg=String.format(\"SELECT \" + \"  SUM(correct) AS correct, \" + \"  TUMBLE_START(rowtime, INTERVAL '20' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"GROUP BY TUMBLE(rowtime, INTERVAL '20' SECOND)\",joinQuery);\n  Table result=tEnv.sqlQuery(finalAgg);\n  DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n  final StreamingFileSink<Row> sink=StreamingFileSink.forRowFormat(new Path(outputPath),(Encoder<Row>)(element,stream) -> {\n    PrintStream out=new PrintStream(stream);\n    out.println(element.toString());\n  }\n).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build();\n  resultStream.map(new KillMapper()).setParallelism(1).addSink(sink).setParallelism(1);\n  sEnv.execute();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.typeinfo.Types"
  }, {
    "nodeContext" : "Types",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 149,
      "startColumnNumber" : 65,
      "endLineNumber" : 149,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 149,
        "startColumnNumber" : 65,
        "endLineNumber" : 149,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Types.SQL_TIMESTAMP",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 149,
        "startColumnNumber" : 44,
        "endLineNumber" : 149,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Types.ROW(Types.INT,Types.SQL_TIMESTAMP)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 148,
        "startColumnNumber" : 24,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 148,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 87
      },
      "nodeContext" : "DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4501,
        "startLineNumber" : 77,
        "startColumnNumber" : 60,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterTool params=ParameterTool.fromArgs(args);\n  String outputPath=params.getRequired(\"outputPath\");\n  final StreamExecutionEnvironment sEnv=StreamExecutionEnvironment.getExecutionEnvironment();\n  sEnv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,Time.of(10,TimeUnit.SECONDS)));\n  sEnv.enableCheckpointing(4000);\n  sEnv.getConfig().setAutoWatermarkInterval(1000);\n  final StreamTableEnvironment tEnv=StreamTableEnvironment.create(sEnv);\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table1\",new GeneratorTableSource(10,100,60,0));\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table2\",new GeneratorTableSource(5,0.2f,60,5));\n  int overWindowSizeSeconds=1;\n  int tumbleWindowSizeSeconds=10;\n  String overQuery=String.format(\"SELECT \" + \"  key, \" + \"  rowtime, \"+ \"  COUNT(*) OVER (PARTITION BY key ORDER BY rowtime RANGE BETWEEN INTERVAL '%d' SECOND PRECEDING AND CURRENT ROW) AS cnt \"+ \"FROM table1\",overWindowSizeSeconds);\n  String tumbleQuery=String.format(\"SELECT \" + \"  key, \" + \"  CASE SUM(cnt) / COUNT(*) WHEN 101 THEN 1 ELSE 99 END AS correct, \"+ \"  TUMBLE_START(rowtime, INTERVAL '%d' SECOND) AS wStart, \"+ \"  TUMBLE_ROWTIME(rowtime, INTERVAL '%d' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"WHERE rowtime > TIMESTAMP '1970-01-01 00:00:01' \"+ \"GROUP BY key, TUMBLE(rowtime, INTERVAL '%d' SECOND)\",tumbleWindowSizeSeconds,tumbleWindowSizeSeconds,overQuery,tumbleWindowSizeSeconds);\n  String joinQuery=String.format(\"SELECT \" + \"  t1.key, \" + \"  t2.rowtime AS rowtime, \"+ \"  t2.correct,\"+ \"  t2.wStart \"+ \"FROM table2 t1, (%s) t2 \"+ \"WHERE \"+ \"  t1.key = t2.key AND \"+ \"  t1.rowtime BETWEEN t2.rowtime AND t2.rowtime + INTERVAL '%d' SECOND\",tumbleQuery,tumbleWindowSizeSeconds);\n  String finalAgg=String.format(\"SELECT \" + \"  SUM(correct) AS correct, \" + \"  TUMBLE_START(rowtime, INTERVAL '20' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"GROUP BY TUMBLE(rowtime, INTERVAL '20' SECOND)\",joinQuery);\n  Table result=tEnv.sqlQuery(finalAgg);\n  DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n  final StreamingFileSink<Row> sink=StreamingFileSink.forRowFormat(new Path(outputPath),(Encoder<Row>)(element,stream) -> {\n    PrintStream out=new PrintStream(stream);\n    out.println(element.toString());\n  }\n).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build();\n  resultStream.map(new KillMapper()).setParallelism(1).addSink(sink).setParallelism(1);\n  sEnv.execute();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4557,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  ParameterTool params=ParameterTool.fromArgs(args);\n  String outputPath=params.getRequired(\"outputPath\");\n  final StreamExecutionEnvironment sEnv=StreamExecutionEnvironment.getExecutionEnvironment();\n  sEnv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3,Time.of(10,TimeUnit.SECONDS)));\n  sEnv.enableCheckpointing(4000);\n  sEnv.getConfig().setAutoWatermarkInterval(1000);\n  final StreamTableEnvironment tEnv=StreamTableEnvironment.create(sEnv);\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table1\",new GeneratorTableSource(10,100,60,0));\n  ((TableEnvironmentInternal)tEnv).registerTableSourceInternal(\"table2\",new GeneratorTableSource(5,0.2f,60,5));\n  int overWindowSizeSeconds=1;\n  int tumbleWindowSizeSeconds=10;\n  String overQuery=String.format(\"SELECT \" + \"  key, \" + \"  rowtime, \"+ \"  COUNT(*) OVER (PARTITION BY key ORDER BY rowtime RANGE BETWEEN INTERVAL '%d' SECOND PRECEDING AND CURRENT ROW) AS cnt \"+ \"FROM table1\",overWindowSizeSeconds);\n  String tumbleQuery=String.format(\"SELECT \" + \"  key, \" + \"  CASE SUM(cnt) / COUNT(*) WHEN 101 THEN 1 ELSE 99 END AS correct, \"+ \"  TUMBLE_START(rowtime, INTERVAL '%d' SECOND) AS wStart, \"+ \"  TUMBLE_ROWTIME(rowtime, INTERVAL '%d' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"WHERE rowtime > TIMESTAMP '1970-01-01 00:00:01' \"+ \"GROUP BY key, TUMBLE(rowtime, INTERVAL '%d' SECOND)\",tumbleWindowSizeSeconds,tumbleWindowSizeSeconds,overQuery,tumbleWindowSizeSeconds);\n  String joinQuery=String.format(\"SELECT \" + \"  t1.key, \" + \"  t2.rowtime AS rowtime, \"+ \"  t2.correct,\"+ \"  t2.wStart \"+ \"FROM table2 t1, (%s) t2 \"+ \"WHERE \"+ \"  t1.key = t2.key AND \"+ \"  t1.rowtime BETWEEN t2.rowtime AND t2.rowtime + INTERVAL '%d' SECOND\",tumbleQuery,tumbleWindowSizeSeconds);\n  String finalAgg=String.format(\"SELECT \" + \"  SUM(correct) AS correct, \" + \"  TUMBLE_START(rowtime, INTERVAL '20' SECOND) AS rowtime \"+ \"FROM (%s) \"+ \"GROUP BY TUMBLE(rowtime, INTERVAL '20' SECOND)\",joinQuery);\n  Table result=tEnv.sqlQuery(finalAgg);\n  DataStream<Row> resultStream=tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP));\n  final StreamingFileSink<Row> sink=StreamingFileSink.forRowFormat(new Path(outputPath),(Encoder<Row>)(element,stream) -> {\n    PrintStream out=new PrintStream(stream);\n    out.println(element.toString());\n  }\n).withBucketAssigner(new KeyBucketAssigner()).withRollingPolicy(OnCheckpointRollingPolicy.build()).build();\n  resultStream.map(new KillMapper()).setParallelism(1).addSink(sink).setParallelism(1);\n  sEnv.execute();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 297,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 149,
        "startColumnNumber" : 16,
        "endLineNumber" : 149,
        "endColumnNumber" : 86
      },
      "nodeContext" : "tEnv.toAppendStream(result,Types.ROW(Types.INT,Types.SQL_TIMESTAMP))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.api.common.typeinfo.Types"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 149,
    "startColumnNumber" : 44,
    "endLineNumber" : 149,
    "endColumnNumber" : 49
  }, {
    "charLength" : 5,
    "startLineNumber" : 149,
    "startColumnNumber" : 54,
    "endLineNumber" : 149,
    "endColumnNumber" : 59
  }, {
    "charLength" : 5,
    "startLineNumber" : 149,
    "startColumnNumber" : 65,
    "endLineNumber" : 149,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}