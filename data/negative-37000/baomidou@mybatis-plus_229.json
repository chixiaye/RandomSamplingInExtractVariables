{
  "id" : 229,
  "expression" : "StringUtils",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/toolkit/TableInfoHelper.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 104,
      "startColumnNumber" : 12,
      "endLineNumber" : 104,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 50
      },
      "nodeContext" : "StringUtils.checkValNotNull(tableInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.checkValNotNull(tableInfo)) {\n  if (StringUtils.checkValNotNull(builderAssistant)) {\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n  }\n  return tableInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 104,
        "endColumnNumber" : 50
      },
      "nodeContext" : "StringUtils.checkValNotNull(tableInfo)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  }, {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 105,
      "startColumnNumber" : 16,
      "endLineNumber" : 105,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 61
      },
      "nodeContext" : "StringUtils.checkValNotNull(builderAssistant)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (StringUtils.checkValNotNull(builderAssistant)) {\n  tableInfo.setConfigMark(builderAssistant.getConfiguration());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 104,
        "startColumnNumber" : 52,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (StringUtils.checkValNotNull(builderAssistant)) {\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n  }\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 242,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.checkValNotNull(tableInfo)) {\n  if (StringUtils.checkValNotNull(builderAssistant)) {\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n  }\n  return tableInfo;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 61
      },
      "nodeContext" : "StringUtils.checkValNotNull(builderAssistant)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  }, {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 123,
      "startColumnNumber" : 29,
      "endLineNumber" : 123,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 123,
        "startColumnNumber" : 29,
        "endLineNumber" : 123,
        "endColumnNumber" : 66
      },
      "nodeContext" : "StringUtils.isNotEmpty(table.value())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 66
      },
      "nodeContext" : "table != null && StringUtils.isNotEmpty(table.value())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (table != null && StringUtils.isNotEmpty(table.value())) {\n  tableName=table.value();\n}\n else {\n  if (globalConfig.isDbColumnUnderline()) {\n    tableName=StringUtils.camelToUnderline(tableName);\n  }\n  if (globalConfig.isCapitalMode()) {\n    tableName=tableName.toUpperCase();\n  }\n else {\n    tableName=StringUtils.firstToLowerCase(tableName);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 66
      },
      "nodeContext" : "table != null && StringUtils.isNotEmpty(table.value())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  }, {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 128,
      "startColumnNumber" : 28,
      "endLineNumber" : 128,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 128,
        "startColumnNumber" : 28,
        "endLineNumber" : 128,
        "endColumnNumber" : 67
      },
      "nodeContext" : "StringUtils.camelToUnderline(tableName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 67
      },
      "nodeContext" : "tableName=StringUtils.camelToUnderline(tableName)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 68
      },
      "nodeContext" : "tableName=StringUtils.camelToUnderline(tableName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 127,
        "startColumnNumber" : 52,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableName=StringUtils.camelToUnderline(tableName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 129,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (globalConfig.isDbColumnUnderline()) {\n  tableName=StringUtils.camelToUnderline(tableName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 125,
        "startColumnNumber" : 15,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (globalConfig.isDbColumnUnderline()) {\n    tableName=StringUtils.camelToUnderline(tableName);\n  }\n  if (globalConfig.isCapitalMode()) {\n    tableName=tableName.toUpperCase();\n  }\n else {\n    tableName=StringUtils.firstToLowerCase(tableName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (table != null && StringUtils.isNotEmpty(table.value())) {\n  tableName=table.value();\n}\n else {\n  if (globalConfig.isDbColumnUnderline()) {\n    tableName=StringUtils.camelToUnderline(tableName);\n  }\n  if (globalConfig.isCapitalMode()) {\n    tableName=tableName.toUpperCase();\n  }\n else {\n    tableName=StringUtils.firstToLowerCase(tableName);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 68
      },
      "nodeContext" : "tableName=StringUtils.camelToUnderline(tableName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  }, {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 135,
      "startColumnNumber" : 28,
      "endLineNumber" : 135,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 135,
        "startColumnNumber" : 28,
        "endLineNumber" : 135,
        "endColumnNumber" : 67
      },
      "nodeContext" : "StringUtils.firstToLowerCase(tableName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 67
      },
      "nodeContext" : "tableName=StringUtils.firstToLowerCase(tableName)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 68
      },
      "nodeContext" : "tableName=StringUtils.firstToLowerCase(tableName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 133,
        "startColumnNumber" : 19,
        "endLineNumber" : 136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  tableName=StringUtils.firstToLowerCase(tableName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 131,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (globalConfig.isCapitalMode()) {\n  tableName=tableName.toUpperCase();\n}\n else {\n  tableName=StringUtils.firstToLowerCase(tableName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 425,
        "startLineNumber" : 125,
        "startColumnNumber" : 15,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (globalConfig.isDbColumnUnderline()) {\n    tableName=StringUtils.camelToUnderline(tableName);\n  }\n  if (globalConfig.isCapitalMode()) {\n    tableName=tableName.toUpperCase();\n  }\n else {\n    tableName=StringUtils.firstToLowerCase(tableName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 541,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (table != null && StringUtils.isNotEmpty(table.value())) {\n  tableName=table.value();\n}\n else {\n  if (globalConfig.isDbColumnUnderline()) {\n    tableName=StringUtils.camelToUnderline(tableName);\n  }\n  if (globalConfig.isCapitalMode()) {\n    tableName=tableName.toUpperCase();\n  }\n else {\n    tableName=StringUtils.firstToLowerCase(tableName);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 68
      },
      "nodeContext" : "tableName=StringUtils.firstToLowerCase(tableName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  }, {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 146,
      "startColumnNumber" : 29,
      "endLineNumber" : 146,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 146,
        "startColumnNumber" : 29,
        "endLineNumber" : 146,
        "endColumnNumber" : 70
      },
      "nodeContext" : "StringUtils.isNotEmpty(table.resultMap())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 70
      },
      "nodeContext" : "table != null && StringUtils.isNotEmpty(table.resultMap())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 146,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n  tableInfo.setResultMap(table.resultMap());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 70
      },
      "nodeContext" : "table != null && StringUtils.isNotEmpty(table.resultMap())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  }, {
    "nodeContext" : "StringUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 187,
      "startColumnNumber" : 12,
      "endLineNumber" : 187,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 57
      },
      "nodeContext" : "StringUtils.isEmpty(tableInfo.getKeyColumn())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 187,
        "startColumnNumber" : 8,
        "endLineNumber" : 189,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n  logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3307,
        "startLineNumber" : 102,
        "startColumnNumber" : 112,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 316,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3524,
        "startLineNumber" : 94,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> 实体类反射获取表信息【初始化】 <p>\n * @param clazz 反射实体类\n * @return\n */\npublic synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant,Class<?> clazz){\n  TableInfo tableInfo=tableInfoCache.get(clazz.getName());\n  if (StringUtils.checkValNotNull(tableInfo)) {\n    if (StringUtils.checkValNotNull(builderAssistant)) {\n      tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    }\n    return tableInfo;\n  }\n  tableInfo=new TableInfo();\n  GlobalConfiguration globalConfig;\n  if (null != builderAssistant) {\n    tableInfo.setCurrentNamespace(builderAssistant.getCurrentNamespace());\n    tableInfo.setConfigMark(builderAssistant.getConfiguration());\n    globalConfig=GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());\n  }\n else {\n    globalConfig=GlobalConfigUtils.DEFAULT;\n  }\n  TableName table=clazz.getAnnotation(TableName.class);\n  String tableName=clazz.getSimpleName();\n  if (table != null && StringUtils.isNotEmpty(table.value())) {\n    tableName=table.value();\n  }\n else {\n    if (globalConfig.isDbColumnUnderline()) {\n      tableName=StringUtils.camelToUnderline(tableName);\n    }\n    if (globalConfig.isCapitalMode()) {\n      tableName=tableName.toUpperCase();\n    }\n else {\n      tableName=StringUtils.firstToLowerCase(tableName);\n    }\n  }\n  tableInfo.setTableName(tableName);\n  if (null != globalConfig.getKeyGenerator()) {\n    tableInfo.setKeySequence(clazz.getAnnotation(KeySequence.class));\n  }\n  if (table != null && StringUtils.isNotEmpty(table.resultMap())) {\n    tableInfo.setResultMap(table.resultMap());\n  }\n  List<TableFieldInfo> fieldList=new ArrayList<>();\n  List<Field> list=getAllFields(clazz);\n  boolean isReadPK=false;\n  boolean existTableId=existTableId(list);\n  for (  Field field : list) {\n    if (!isReadPK) {\n      if (existTableId) {\n        isReadPK=initTableId(globalConfig,tableInfo,field,clazz);\n      }\n else {\n        isReadPK=initFieldId(globalConfig,tableInfo,field,clazz);\n      }\n      if (isReadPK) {\n        continue;\n      }\n    }\n    if (initTableField(globalConfig,tableInfo,fieldList,field,clazz)) {\n      continue;\n    }\n    fieldList.add(new TableFieldInfo(globalConfig,tableInfo,field));\n  }\n  tableInfo.setFieldList(globalConfig,fieldList);\n  if (StringUtils.isEmpty(tableInfo.getKeyColumn())) {\n    logger.warn(String.format(\"Warn: Could not find @TableId in Class: %s.\",clazz.getName()));\n  }\n  tableInfoCache.put(clazz.getName(),tableInfo);\n  return tableInfo;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 187,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 57
      },
      "nodeContext" : "StringUtils.isEmpty(tableInfo.getKeyColumn())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.toolkit.StringUtils"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 104,
    "startColumnNumber" : 12,
    "endLineNumber" : 104,
    "endColumnNumber" : 23
  }, {
    "charLength" : 11,
    "startLineNumber" : 105,
    "startColumnNumber" : 16,
    "endLineNumber" : 105,
    "endColumnNumber" : 27
  }, {
    "charLength" : 11,
    "startLineNumber" : 123,
    "startColumnNumber" : 29,
    "endLineNumber" : 123,
    "endColumnNumber" : 40
  }, {
    "charLength" : 11,
    "startLineNumber" : 128,
    "startColumnNumber" : 28,
    "endLineNumber" : 128,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 135,
    "startColumnNumber" : 28,
    "endLineNumber" : 135,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 146,
    "startColumnNumber" : 29,
    "endLineNumber" : 146,
    "endColumnNumber" : 40
  }, {
    "charLength" : 11,
    "startLineNumber" : 187,
    "startColumnNumber" : 12,
    "endLineNumber" : 187,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  } ]
}