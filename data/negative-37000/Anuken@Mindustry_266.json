{
  "id" : 266,
  "expression" : "((int)Core.input.axisTap(Binding.rotate) != 0)",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/input/DesktopInput.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((int)Core.input.axisTap(Binding.rotate) != 0)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 525,
      "startColumnNumber" : 137,
      "endLineNumber" : 525,
      "endColumnNumber" : 183
    },
    "astNodeNumber" : 13,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 525,
        "startColumnNumber" : 15,
        "endLineNumber" : 525,
        "endColumnNumber" : 183
      },
      "nodeContext" : "!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 525,
        "startColumnNumber" : 12,
        "endLineNumber" : 528,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)) {\n  rotation=((int)((Angles.angle(selectX,selectY,cursorX,cursorY) + 45) / 90f)) % 4;\n  overrideLineRotation=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 524,
        "startColumnNumber" : 44,
        "endLineNumber" : 529,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)) {\n    rotation=((int)((Angles.angle(selectX,selectY,cursorX,cursorY) + 45) / 90f)) % 4;\n    overrideLineRotation=true;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 524,
        "startColumnNumber" : 8,
        "endLineNumber" : 531,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mode == placing && block != null) {\n  if (!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)) {\n    rotation=((int)((Angles.angle(selectX,selectY,cursorX,cursorY) + 45) / 90f)) % 4;\n    overrideLineRotation=true;\n  }\n}\n else {\n  overrideLineRotation=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8374,
        "startLineNumber" : 369,
        "startColumnNumber" : 20,
        "endLineNumber" : 579,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (scene.getKeyboardFocus() instanceof TextField)   return;\n  Tile selected=tileAt(Core.input.mouseX(),Core.input.mouseY());\n  int cursorX=tileX(Core.input.mouseX());\n  int cursorY=tileY(Core.input.mouseY());\n  int rawCursorX=World.toTile(Core.input.mouseWorld().x), rawCursorY=World.toTile(Core.input.mouseWorld().y);\n  if (Core.settings.getBool(\"buildautopause\") && isBuilding && !player.unit().isBuilding()) {\n    isBuilding=false;\n    buildWasAutoPaused=true;\n  }\n  if (!selectRequests.isEmpty()) {\n    int shiftX=rawCursorX - schematicX, shiftY=rawCursorY - schematicY;\n    selectRequests.each(s -> {\n      s.x+=shiftX;\n      s.y+=shiftY;\n    }\n);\n    schematicX+=shiftX;\n    schematicY+=shiftY;\n  }\n  if (Core.input.keyTap(Binding.deselect) && !isPlacing()) {\n    player.unit().mineTile=null;\n  }\n  if (Core.input.keyTap(Binding.clear_building)) {\n    player.unit().clearBuilding();\n  }\n  if (Core.input.keyTap(Binding.schematic_select) && !Core.scene.hasKeyboard() && mode != breaking) {\n    schemX=rawCursorX;\n    schemY=rawCursorY;\n  }\n  if (Core.input.keyTap(Binding.schematic_menu) && !Core.scene.hasKeyboard()) {\n    if (ui.schematics.isShown()) {\n      ui.schematics.hide();\n    }\n else {\n      ui.schematics.show();\n    }\n  }\n  if (Core.input.keyTap(Binding.clear_building) || isPlacing()) {\n    lastSchematic=null;\n    selectRequests.clear();\n  }\n  if (Core.input.keyRelease(Binding.schematic_select) && !Core.scene.hasKeyboard() && selectX == -1 && selectY == -1 && schemX != -1 && schemY != -1) {\n    lastSchematic=schematics.create(schemX,schemY,rawCursorX,rawCursorY);\n    useSchematic(lastSchematic);\n    if (selectRequests.isEmpty()) {\n      lastSchematic=null;\n    }\n    schemX=-1;\n    schemY=-1;\n  }\n  if (!selectRequests.isEmpty()) {\n    if (Core.input.keyTap(Binding.schematic_flip_x)) {\n      flipRequests(selectRequests,true);\n    }\n    if (Core.input.keyTap(Binding.schematic_flip_y)) {\n      flipRequests(selectRequests,false);\n    }\n  }\n  if (sreq != null) {\n    float offset=((sreq.block.size + 2) % 2) * tilesize / 2f;\n    float x=Core.input.mouseWorld().x + offset;\n    float y=Core.input.mouseWorld().y + offset;\n    sreq.x=(int)(x / tilesize);\n    sreq.y=(int)(y / tilesize);\n  }\n  if (block == null || mode != placing) {\n    lineRequests.clear();\n  }\n  if (Core.input.keyTap(Binding.pause_building)) {\n    isBuilding=!isBuilding;\n    buildWasAutoPaused=false;\n    if (isBuilding) {\n      player.shooting=false;\n    }\n  }\n  if ((cursorX != lastLineX || cursorY != lastLineY) && isPlacing() && mode == placing) {\n    updateLine(selectX,selectY);\n    lastLineX=cursorX;\n    lastLineY=cursorY;\n  }\n  if (Core.input.keyTap(Binding.select) && !Core.scene.hasMouse()) {\n    if (selected != null) {\n      Call.tileTap(player,selected);\n    }\n    BuildPlan req=getRequest(cursorX,cursorY);\n    if (Core.input.keyDown(Binding.break_block)) {\n      mode=none;\n    }\n else     if (!selectRequests.isEmpty()) {\n      flushRequests(selectRequests);\n    }\n else     if (isPlacing()) {\n      selectX=cursorX;\n      selectY=cursorY;\n      lastLineX=cursorX;\n      lastLineY=cursorY;\n      mode=placing;\n      updateLine(selectX,selectY);\n    }\n else     if (req != null && !req.breaking && mode == none && !req.initialized) {\n      sreq=req;\n    }\n else     if (req != null && req.breaking) {\n      deleting=true;\n    }\n else     if (selected != null) {\n      if (!tryTapPlayer(Core.input.mouseWorld().x,Core.input.mouseWorld().y) && !tileTapped(selected.build) && !player.unit().activelyBuilding()&& !droppingItem&& !tryBeginMine(selected)&& player.unit().mineTile == null && !Core.scene.hasKeyboard()) {\n        player.shooting=shouldShoot;\n      }\n    }\n else     if (!Core.scene.hasKeyboard()) {\n      player.shooting=shouldShoot;\n    }\n  }\n else   if (Core.input.keyTap(Binding.deselect) && isPlacing()) {\n    block=null;\n    mode=none;\n  }\n else   if (Core.input.keyTap(Binding.deselect) && !selectRequests.isEmpty()) {\n    selectRequests.clear();\n    lastSchematic=null;\n  }\n else   if (Core.input.keyTap(Binding.break_block) && !Core.scene.hasMouse() && player.isBuilder()) {\n    deleting=false;\n    mode=breaking;\n    selectX=tileX(Core.input.mouseX());\n    selectY=tileY(Core.input.mouseY());\n    schemX=rawCursorX;\n    schemY=rawCursorY;\n  }\n  if (Core.input.keyDown(Binding.select) && mode == none && !isPlacing() && deleting) {\n    BuildPlan req=getRequest(cursorX,cursorY);\n    if (req != null && req.breaking) {\n      player.unit().plans().remove(req);\n    }\n  }\n else {\n    deleting=false;\n  }\n  if (mode == placing && block != null) {\n    if (!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)) {\n      rotation=((int)((Angles.angle(selectX,selectY,cursorX,cursorY) + 45) / 90f)) % 4;\n      overrideLineRotation=true;\n    }\n  }\n else {\n    overrideLineRotation=false;\n  }\n  if (Core.input.keyRelease(Binding.break_block) && Core.input.keyDown(Binding.schematic_select) && mode == breaking) {\n    lastSchematic=schematics.create(schemX,schemY,rawCursorX,rawCursorY);\n    schemX=-1;\n    schemY=-1;\n  }\n  if (Core.input.keyRelease(Binding.break_block) || Core.input.keyRelease(Binding.select)) {\n    if (mode == placing && block != null) {\n      flushRequests(lineRequests);\n      lineRequests.clear();\n      Events.fire(new LineConfirmEvent());\n    }\n else     if (mode == breaking) {\n      removeSelection(selectX,selectY,cursorX,cursorY,!Core.input.keyDown(Binding.schematic_select) ? maxLength : Vars.maxSchematicSize);\n      if (lastSchematic != null) {\n        useSchematic(lastSchematic);\n        lastSchematic=null;\n      }\n    }\n    selectX=-1;\n    selectY=-1;\n    tryDropItems(selected == null ? null : selected.build,Core.input.mouseWorld().x,Core.input.mouseWorld().y);\n    if (sreq != null) {\n      if (getRequest(sreq.x,sreq.y,sreq.block.size,sreq) != null) {\n        player.unit().plans().remove(sreq,true);\n      }\n      sreq=null;\n    }\n    mode=none;\n  }\n  if (Core.input.keyTap(Binding.toggle_block_status)) {\n    Core.settings.put(\"blockstatus\",!Core.settings.getBool(\"blockstatus\"));\n  }\n  if (Core.input.keyTap(Binding.toggle_power_lines)) {\n    if (Core.settings.getInt(\"lasersopacity\") == 0) {\n      Core.settings.put(\"lasersopacity\",Core.settings.getInt(\"preferredlaseropacity\",100));\n    }\n else {\n      Core.settings.put(\"preferredlaseropacity\",Core.settings.getInt(\"lasersopacity\"));\n      Core.settings.put(\"lasersopacity\",0);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1224,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8390,
        "startLineNumber" : 369,
        "startColumnNumber" : 4,
        "endLineNumber" : 579,
        "endColumnNumber" : 5
      },
      "nodeContext" : "void pollInput(){\n  if (scene.getKeyboardFocus() instanceof TextField)   return;\n  Tile selected=tileAt(Core.input.mouseX(),Core.input.mouseY());\n  int cursorX=tileX(Core.input.mouseX());\n  int cursorY=tileY(Core.input.mouseY());\n  int rawCursorX=World.toTile(Core.input.mouseWorld().x), rawCursorY=World.toTile(Core.input.mouseWorld().y);\n  if (Core.settings.getBool(\"buildautopause\") && isBuilding && !player.unit().isBuilding()) {\n    isBuilding=false;\n    buildWasAutoPaused=true;\n  }\n  if (!selectRequests.isEmpty()) {\n    int shiftX=rawCursorX - schematicX, shiftY=rawCursorY - schematicY;\n    selectRequests.each(s -> {\n      s.x+=shiftX;\n      s.y+=shiftY;\n    }\n);\n    schematicX+=shiftX;\n    schematicY+=shiftY;\n  }\n  if (Core.input.keyTap(Binding.deselect) && !isPlacing()) {\n    player.unit().mineTile=null;\n  }\n  if (Core.input.keyTap(Binding.clear_building)) {\n    player.unit().clearBuilding();\n  }\n  if (Core.input.keyTap(Binding.schematic_select) && !Core.scene.hasKeyboard() && mode != breaking) {\n    schemX=rawCursorX;\n    schemY=rawCursorY;\n  }\n  if (Core.input.keyTap(Binding.schematic_menu) && !Core.scene.hasKeyboard()) {\n    if (ui.schematics.isShown()) {\n      ui.schematics.hide();\n    }\n else {\n      ui.schematics.show();\n    }\n  }\n  if (Core.input.keyTap(Binding.clear_building) || isPlacing()) {\n    lastSchematic=null;\n    selectRequests.clear();\n  }\n  if (Core.input.keyRelease(Binding.schematic_select) && !Core.scene.hasKeyboard() && selectX == -1 && selectY == -1 && schemX != -1 && schemY != -1) {\n    lastSchematic=schematics.create(schemX,schemY,rawCursorX,rawCursorY);\n    useSchematic(lastSchematic);\n    if (selectRequests.isEmpty()) {\n      lastSchematic=null;\n    }\n    schemX=-1;\n    schemY=-1;\n  }\n  if (!selectRequests.isEmpty()) {\n    if (Core.input.keyTap(Binding.schematic_flip_x)) {\n      flipRequests(selectRequests,true);\n    }\n    if (Core.input.keyTap(Binding.schematic_flip_y)) {\n      flipRequests(selectRequests,false);\n    }\n  }\n  if (sreq != null) {\n    float offset=((sreq.block.size + 2) % 2) * tilesize / 2f;\n    float x=Core.input.mouseWorld().x + offset;\n    float y=Core.input.mouseWorld().y + offset;\n    sreq.x=(int)(x / tilesize);\n    sreq.y=(int)(y / tilesize);\n  }\n  if (block == null || mode != placing) {\n    lineRequests.clear();\n  }\n  if (Core.input.keyTap(Binding.pause_building)) {\n    isBuilding=!isBuilding;\n    buildWasAutoPaused=false;\n    if (isBuilding) {\n      player.shooting=false;\n    }\n  }\n  if ((cursorX != lastLineX || cursorY != lastLineY) && isPlacing() && mode == placing) {\n    updateLine(selectX,selectY);\n    lastLineX=cursorX;\n    lastLineY=cursorY;\n  }\n  if (Core.input.keyTap(Binding.select) && !Core.scene.hasMouse()) {\n    if (selected != null) {\n      Call.tileTap(player,selected);\n    }\n    BuildPlan req=getRequest(cursorX,cursorY);\n    if (Core.input.keyDown(Binding.break_block)) {\n      mode=none;\n    }\n else     if (!selectRequests.isEmpty()) {\n      flushRequests(selectRequests);\n    }\n else     if (isPlacing()) {\n      selectX=cursorX;\n      selectY=cursorY;\n      lastLineX=cursorX;\n      lastLineY=cursorY;\n      mode=placing;\n      updateLine(selectX,selectY);\n    }\n else     if (req != null && !req.breaking && mode == none && !req.initialized) {\n      sreq=req;\n    }\n else     if (req != null && req.breaking) {\n      deleting=true;\n    }\n else     if (selected != null) {\n      if (!tryTapPlayer(Core.input.mouseWorld().x,Core.input.mouseWorld().y) && !tileTapped(selected.build) && !player.unit().activelyBuilding()&& !droppingItem&& !tryBeginMine(selected)&& player.unit().mineTile == null && !Core.scene.hasKeyboard()) {\n        player.shooting=shouldShoot;\n      }\n    }\n else     if (!Core.scene.hasKeyboard()) {\n      player.shooting=shouldShoot;\n    }\n  }\n else   if (Core.input.keyTap(Binding.deselect) && isPlacing()) {\n    block=null;\n    mode=none;\n  }\n else   if (Core.input.keyTap(Binding.deselect) && !selectRequests.isEmpty()) {\n    selectRequests.clear();\n    lastSchematic=null;\n  }\n else   if (Core.input.keyTap(Binding.break_block) && !Core.scene.hasMouse() && player.isBuilder()) {\n    deleting=false;\n    mode=breaking;\n    selectX=tileX(Core.input.mouseX());\n    selectY=tileY(Core.input.mouseY());\n    schemX=rawCursorX;\n    schemY=rawCursorY;\n  }\n  if (Core.input.keyDown(Binding.select) && mode == none && !isPlacing() && deleting) {\n    BuildPlan req=getRequest(cursorX,cursorY);\n    if (req != null && req.breaking) {\n      player.unit().plans().remove(req);\n    }\n  }\n else {\n    deleting=false;\n  }\n  if (mode == placing && block != null) {\n    if (!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)) {\n      rotation=((int)((Angles.angle(selectX,selectY,cursorX,cursorY) + 45) / 90f)) % 4;\n      overrideLineRotation=true;\n    }\n  }\n else {\n    overrideLineRotation=false;\n  }\n  if (Core.input.keyRelease(Binding.break_block) && Core.input.keyDown(Binding.schematic_select) && mode == breaking) {\n    lastSchematic=schematics.create(schemX,schemY,rawCursorX,rawCursorY);\n    schemX=-1;\n    schemY=-1;\n  }\n  if (Core.input.keyRelease(Binding.break_block) || Core.input.keyRelease(Binding.select)) {\n    if (mode == placing && block != null) {\n      flushRequests(lineRequests);\n      lineRequests.clear();\n      Events.fire(new LineConfirmEvent());\n    }\n else     if (mode == breaking) {\n      removeSelection(selectX,selectY,cursorX,cursorY,!Core.input.keyDown(Binding.schematic_select) ? maxLength : Vars.maxSchematicSize);\n      if (lastSchematic != null) {\n        useSchematic(lastSchematic);\n        lastSchematic=null;\n      }\n    }\n    selectX=-1;\n    selectY=-1;\n    tryDropItems(selected == null ? null : selected.build,Core.input.mouseWorld().x,Core.input.mouseWorld().y);\n    if (sreq != null) {\n      if (getRequest(sreq.x,sreq.y,sreq.block.size,sreq) != null) {\n        player.unit().plans().remove(sreq,true);\n      }\n      sreq=null;\n    }\n    mode=none;\n  }\n  if (Core.input.keyTap(Binding.toggle_block_status)) {\n    Core.settings.put(\"blockstatus\",!Core.settings.getBool(\"blockstatus\"));\n  }\n  if (Core.input.keyTap(Binding.toggle_power_lines)) {\n    if (Core.settings.getInt(\"lasersopacity\") == 0) {\n      Core.settings.put(\"lasersopacity\",Core.settings.getInt(\"preferredlaseropacity\",100));\n    }\n else {\n      Core.settings.put(\"preferredlaseropacity\",Core.settings.getInt(\"lasersopacity\"));\n      Core.settings.put(\"lasersopacity\",0);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1227,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 525,
        "startColumnNumber" : 15,
        "endLineNumber" : 525,
        "endColumnNumber" : 183
      },
      "nodeContext" : "!overrideLineRotation && !Core.input.keyDown(Binding.diagonal_placement) && (selectX != cursorX || selectY != cursorY)&& ((int)Core.input.axisTap(Binding.rotate) != 0)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 33,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 525,
    "startColumnNumber" : 137,
    "endLineNumber" : 525,
    "endColumnNumber" : 183
  } ],
  "layoutRelationDataList" : [ ]
}