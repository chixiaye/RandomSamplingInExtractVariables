{
  "id" : 312,
  "expression" : "ComplexQuadrilateral.class.equals(Float.class)",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/samples/openapi3/client/petstore/java/jersey2-java8/src/main/java/org/openapitools/client/model/Quadrilateral.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ComplexQuadrilateral.class.equals(Float.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 122,
      "startColumnNumber" : 121,
      "endLineNumber" : 122,
      "endColumnNumber" : 167
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 122,
        "startColumnNumber" : 20,
        "endLineNumber" : 122,
        "endColumnNumber" : 321
      },
      "nodeContext" : "ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 49,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\n  attemptParsing=typeCoercion;\n  if (!attemptParsing) {\n    attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n    attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n    attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n    attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1827,
        "startLineNumber" : 119,
        "startColumnNumber" : 16,
        "endLineNumber" : 139,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean attemptParsing=true;\n  if (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\n    attemptParsing=typeCoercion;\n    if (!attemptParsing) {\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n      attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n      attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n    }\n  }\n  if (attemptParsing) {\n    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n    match++;\n    log.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2019,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  boolean attemptParsing=true;\n  if (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\n    attemptParsing=typeCoercion;\n    if (!attemptParsing) {\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n      attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n      attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n    }\n  }\n  if (attemptParsing) {\n    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n    match++;\n    log.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n  }\n}\n catch (Exception e) {\n  log.log(Level.FINER,\"Input data does not match schema 'ComplexQuadrilateral'\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 208,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5845,
        "startLineNumber" : 96,
        "startColumnNumber" : 129,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonNode tree=jp.readValueAsTree();\n  Object deserialized=null;\n  Quadrilateral newQuadrilateral=new Quadrilateral();\n  Map<String,Object> result2=tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String,Object>>(){\n  }\n);\n  String discriminatorValue=(String)result2.get(\"quadrilateralType\");\nswitch (discriminatorValue) {\ncase \"ComplexQuadrilateral\":    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n  newQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ncase \"SimpleQuadrilateral\":deserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nnewQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ndefault:log.log(Level.WARNING,String.format(\"Failed to lookup discriminator value `%s` for Quadrilateral. Possible values: ComplexQuadrilateral SimpleQuadrilateral\",discriminatorValue));\n}\nboolean typeCoercion=ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\nint match=0;\nJsonToken token=tree.traverse(jp.getCodec()).nextToken();\ntry {\nboolean attemptParsing=true;\nif (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'ComplexQuadrilateral'\",e);\n}\ntry {\nboolean attemptParsing=true;\nif (SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class) || SimpleQuadrilateral.class.equals(Float.class)|| SimpleQuadrilateral.class.equals(Double.class)|| SimpleQuadrilateral.class.equals(Boolean.class)|| SimpleQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((SimpleQuadrilateral.class.equals(Float.class) || SimpleQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(SimpleQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(SimpleQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'SimpleQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'SimpleQuadrilateral'\",e);\n}\nif (match == 1) {\nQuadrilateral ret=new Quadrilateral();\nret.setActualInstance(deserialized);\nreturn ret;\n}\nthrow new IOException(String.format(\"Failed deserialization for Quadrilateral: %d classes match result, expected 1\",match));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 599,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5984,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public Quadrilateral deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {\n  JsonNode tree=jp.readValueAsTree();\n  Object deserialized=null;\n  Quadrilateral newQuadrilateral=new Quadrilateral();\n  Map<String,Object> result2=tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String,Object>>(){\n  }\n);\n  String discriminatorValue=(String)result2.get(\"quadrilateralType\");\nswitch (discriminatorValue) {\ncase \"ComplexQuadrilateral\":    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n  newQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ncase \"SimpleQuadrilateral\":deserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nnewQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ndefault:log.log(Level.WARNING,String.format(\"Failed to lookup discriminator value `%s` for Quadrilateral. Possible values: ComplexQuadrilateral SimpleQuadrilateral\",discriminatorValue));\n}\nboolean typeCoercion=ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\nint match=0;\nJsonToken token=tree.traverse(jp.getCodec()).nextToken();\ntry {\nboolean attemptParsing=true;\nif (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'ComplexQuadrilateral'\",e);\n}\ntry {\nboolean attemptParsing=true;\nif (SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class) || SimpleQuadrilateral.class.equals(Float.class)|| SimpleQuadrilateral.class.equals(Double.class)|| SimpleQuadrilateral.class.equals(Boolean.class)|| SimpleQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((SimpleQuadrilateral.class.equals(Float.class) || SimpleQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(SimpleQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(SimpleQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'SimpleQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'SimpleQuadrilateral'\",e);\n}\nif (match == 1) {\nQuadrilateral ret=new Quadrilateral();\nret.setActualInstance(deserialized);\nreturn ret;\n}\nthrow new IOException(String.format(\"Failed deserialization for Quadrilateral: %d classes match result, expected 1\",match));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 618,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 122,
        "startColumnNumber" : 20,
        "endLineNumber" : 122,
        "endColumnNumber" : 321
      },
      "nodeContext" : "ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 49,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "ComplexQuadrilateral.class.equals(Float.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 46,
      "startLineNumber" : 126,
      "startColumnNumber" : 44,
      "endLineNumber" : 126,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 126,
        "startColumnNumber" : 44,
        "endLineNumber" : 126,
        "endColumnNumber" : 141
      },
      "nodeContext" : "ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 126,
        "startColumnNumber" : 43,
        "endLineNumber" : 126,
        "endColumnNumber" : 142
      },
      "nodeContext" : "(ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 126,
        "startColumnNumber" : 43,
        "endLineNumber" : 126,
        "endColumnNumber" : 183
      },
      "nodeContext" : "(ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 142,
        "startLineNumber" : 126,
        "startColumnNumber" : 42,
        "endLineNumber" : 126,
        "endColumnNumber" : 184
      },
      "nodeContext" : "((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 126,
        "startColumnNumber" : 24,
        "endLineNumber" : 126,
        "endColumnNumber" : 184
      },
      "nodeContext" : "attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 126,
        "startColumnNumber" : 24,
        "endLineNumber" : 126,
        "endColumnNumber" : 185
      },
      "nodeContext" : "attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 684,
        "startLineNumber" : 124,
        "startColumnNumber" : 41,
        "endLineNumber" : 129,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n  attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n  attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n  attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 124,
        "startColumnNumber" : 20,
        "endLineNumber" : 129,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (!attemptParsing) {\n  attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n  attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n  attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n  attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 796,
        "startLineNumber" : 122,
        "startColumnNumber" : 323,
        "endLineNumber" : 130,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  attemptParsing=typeCoercion;\n  if (!attemptParsing) {\n    attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n    attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n    attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n    attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1103,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 130,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\n  attemptParsing=typeCoercion;\n  if (!attemptParsing) {\n    attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n    attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n    attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n    attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1827,
        "startLineNumber" : 119,
        "startColumnNumber" : 16,
        "endLineNumber" : 139,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean attemptParsing=true;\n  if (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\n    attemptParsing=typeCoercion;\n    if (!attemptParsing) {\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n      attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n      attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n    }\n  }\n  if (attemptParsing) {\n    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n    match++;\n    log.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2019,
        "startLineNumber" : 119,
        "startColumnNumber" : 12,
        "endLineNumber" : 142,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  boolean attemptParsing=true;\n  if (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\n    attemptParsing=typeCoercion;\n    if (!attemptParsing) {\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\n      attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n      attemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\n      attemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n    }\n  }\n  if (attemptParsing) {\n    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n    match++;\n    log.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n  }\n}\n catch (Exception e) {\n  log.log(Level.FINER,\"Input data does not match schema 'ComplexQuadrilateral'\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 208,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5845,
        "startLineNumber" : 96,
        "startColumnNumber" : 129,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonNode tree=jp.readValueAsTree();\n  Object deserialized=null;\n  Quadrilateral newQuadrilateral=new Quadrilateral();\n  Map<String,Object> result2=tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String,Object>>(){\n  }\n);\n  String discriminatorValue=(String)result2.get(\"quadrilateralType\");\nswitch (discriminatorValue) {\ncase \"ComplexQuadrilateral\":    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n  newQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ncase \"SimpleQuadrilateral\":deserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nnewQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ndefault:log.log(Level.WARNING,String.format(\"Failed to lookup discriminator value `%s` for Quadrilateral. Possible values: ComplexQuadrilateral SimpleQuadrilateral\",discriminatorValue));\n}\nboolean typeCoercion=ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\nint match=0;\nJsonToken token=tree.traverse(jp.getCodec()).nextToken();\ntry {\nboolean attemptParsing=true;\nif (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'ComplexQuadrilateral'\",e);\n}\ntry {\nboolean attemptParsing=true;\nif (SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class) || SimpleQuadrilateral.class.equals(Float.class)|| SimpleQuadrilateral.class.equals(Double.class)|| SimpleQuadrilateral.class.equals(Boolean.class)|| SimpleQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((SimpleQuadrilateral.class.equals(Float.class) || SimpleQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(SimpleQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(SimpleQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'SimpleQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'SimpleQuadrilateral'\",e);\n}\nif (match == 1) {\nQuadrilateral ret=new Quadrilateral();\nret.setActualInstance(deserialized);\nreturn ret;\n}\nthrow new IOException(String.format(\"Failed deserialization for Quadrilateral: %d classes match result, expected 1\",match));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 599,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5984,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public Quadrilateral deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {\n  JsonNode tree=jp.readValueAsTree();\n  Object deserialized=null;\n  Quadrilateral newQuadrilateral=new Quadrilateral();\n  Map<String,Object> result2=tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String,Object>>(){\n  }\n);\n  String discriminatorValue=(String)result2.get(\"quadrilateralType\");\nswitch (discriminatorValue) {\ncase \"ComplexQuadrilateral\":    deserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\n  newQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ncase \"SimpleQuadrilateral\":deserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nnewQuadrilateral.setActualInstance(deserialized);\nreturn newQuadrilateral;\ndefault:log.log(Level.WARNING,String.format(\"Failed to lookup discriminator value `%s` for Quadrilateral. Possible values: ComplexQuadrilateral SimpleQuadrilateral\",discriminatorValue));\n}\nboolean typeCoercion=ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);\nint match=0;\nJsonToken token=tree.traverse(jp.getCodec()).nextToken();\ntry {\nboolean attemptParsing=true;\nif (ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class) || ComplexQuadrilateral.class.equals(Float.class)|| ComplexQuadrilateral.class.equals(Double.class)|| ComplexQuadrilateral.class.equals(Boolean.class)|| ComplexQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((ComplexQuadrilateral.class.equals(Integer.class) || ComplexQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(ComplexQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(ComplexQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(ComplexQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'ComplexQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'ComplexQuadrilateral'\",e);\n}\ntry {\nboolean attemptParsing=true;\nif (SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class) || SimpleQuadrilateral.class.equals(Float.class)|| SimpleQuadrilateral.class.equals(Double.class)|| SimpleQuadrilateral.class.equals(Boolean.class)|| SimpleQuadrilateral.class.equals(String.class)) {\nattemptParsing=typeCoercion;\nif (!attemptParsing) {\nattemptParsing|=((SimpleQuadrilateral.class.equals(Integer.class) || SimpleQuadrilateral.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);\nattemptParsing|=((SimpleQuadrilateral.class.equals(Float.class) || SimpleQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\nattemptParsing|=(SimpleQuadrilateral.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));\nattemptParsing|=(SimpleQuadrilateral.class.equals(String.class) && token == JsonToken.VALUE_STRING);\n}\n}\nif (attemptParsing) {\ndeserialized=tree.traverse(jp.getCodec()).readValueAs(SimpleQuadrilateral.class);\nmatch++;\nlog.log(Level.FINER,\"Input data matches schema 'SimpleQuadrilateral'\");\n}\n}\n catch (Exception e) {\nlog.log(Level.FINER,\"Input data does not match schema 'SimpleQuadrilateral'\",e);\n}\nif (match == 1) {\nQuadrilateral ret=new Quadrilateral();\nret.setActualInstance(deserialized);\nreturn ret;\n}\nthrow new IOException(String.format(\"Failed deserialization for Quadrilateral: %d classes match result, expected 1\",match));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 618,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 126,
        "startColumnNumber" : 24,
        "endLineNumber" : 126,
        "endColumnNumber" : 185
      },
      "nodeContext" : "attemptParsing|=((ComplexQuadrilateral.class.equals(Float.class) || ComplexQuadrilateral.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 28,
      "astHeight" : 10
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 46,
    "startLineNumber" : 122,
    "startColumnNumber" : 121,
    "endLineNumber" : 122,
    "endColumnNumber" : 167
  }, {
    "charLength" : 46,
    "startLineNumber" : 126,
    "startColumnNumber" : 44,
    "endLineNumber" : 126,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  } ]
}