{
  "id" : 101,
  "expression" : "width",
  "projectName" : "termux@termux-app",
  "commitID" : "6334470f81bdf003b8567af9e3531cec4dce560d",
  "filePath" : "/app/src/test/java/com/termux/terminal/TerminalTestCase.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "width",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 164,
      "startColumnNumber" : 100,
      "endLineNumber" : 164,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 164,
        "startColumnNumber" : 100,
        "endLineNumber" : 164,
        "endColumnNumber" : 109
      },
      "nodeContext" : "width < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 164,
        "startColumnNumber" : 78,
        "endLineNumber" : 164,
        "endColumnNumber" : 109
      },
      "nodeContext" : "currentColumn == 0 && width < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 110
      },
      "nodeContext" : "assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 111
      },
      "nodeContext" : "assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 744,
        "startLineNumber" : 151,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  char c=text[j];\n  int codePoint;\n  if (Character.isHighSurrogate(c)) {\n    char lowSurrogate=text[++j];\n    assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n    codePoint=Character.toCodePoint(c,lowSurrogate);\n  }\n else {\n    assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n    codePoint=c;\n  }\n  assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n  int width=WcWidth.width(codePoint);\n  assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n  if (width > 0)   currentColumn+=width;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 151,
        "startColumnNumber" : 3,
        "endLineNumber" : 166,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int j=0; j < usedChars; j++) {\n  char c=text[j];\n  int codePoint;\n  if (Character.isHighSurrogate(c)) {\n    char lowSurrogate=text[++j];\n    assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n    codePoint=Character.toCodePoint(c,lowSurrogate);\n  }\n else {\n    assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n    codePoint=c;\n  }\n  assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n  int width=WcWidth.width(codePoint);\n  assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n  if (width > 0)   currentColumn+=width;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 145,
        "startColumnNumber" : 41,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (lines[i] == null)   continue;\n  assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n  char[] text=lines[i].mText;\n  int usedChars=lines[i].getSpaceUsed();\n  int currentColumn=0;\n  for (int j=0; j < usedChars; j++) {\n    char c=text[j];\n    int codePoint;\n    if (Character.isHighSurrogate(c)) {\n      char lowSurrogate=text[++j];\n      assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n      codePoint=Character.toCodePoint(c,lowSurrogate);\n    }\n else {\n      assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n      codePoint=c;\n    }\n    assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n    int width=WcWidth.width(codePoint);\n    assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n    if (width > 0)     currentColumn+=width;\n  }\n  assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lines.length; i++) {\n  if (lines[i] == null)   continue;\n  assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n  char[] text=lines[i].mText;\n  int usedChars=lines[i].getSpaceUsed();\n  int currentColumn=0;\n  for (int j=0; j < usedChars; j++) {\n    char c=text[j];\n    int codePoint;\n    if (Character.isHighSurrogate(c)) {\n      char lowSurrogate=text[++j];\n      assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n      codePoint=Character.toCodePoint(c,lowSurrogate);\n    }\n else {\n      assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n      codePoint=c;\n    }\n    assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n    int width=WcWidth.width(codePoint);\n    assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n    if (width > 0)     currentColumn+=width;\n  }\n  assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1684,
        "startLineNumber" : 140,
        "startColumnNumber" : 47,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TerminalBuffer screen=mTerminal.getScreen();\n  TerminalRow[] lines=screen.mLines;\n  Set<LineWrapper> linesSet=new HashSet<>();\n  for (int i=0; i < lines.length; i++) {\n    if (lines[i] == null)     continue;\n    assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n    char[] text=lines[i].mText;\n    int usedChars=lines[i].getSpaceUsed();\n    int currentColumn=0;\n    for (int j=0; j < usedChars; j++) {\n      char c=text[j];\n      int codePoint;\n      if (Character.isHighSurrogate(c)) {\n        char lowSurrogate=text[++j];\n        assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n        codePoint=Character.toCodePoint(c,lowSurrogate);\n      }\n else {\n        assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n        codePoint=c;\n      }\n      assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n      int width=WcWidth.width(codePoint);\n      assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n      if (width > 0)       currentColumn+=width;\n    }\n    assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n  }\n  assertEquals(\"The alt buffer should have have no history\",mTerminal.mAltBuffer.mTotalRows,mTerminal.mAltBuffer.mScreenRows);\n  if (mTerminal.isAlternateBufferActive()) {\n    assertEquals(\"The alt buffer should be the same size as the screen\",mTerminal.mRows,mTerminal.mAltBuffer.mTotalRows);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1730,
        "startLineNumber" : 140,
        "startColumnNumber" : 1,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected TerminalTestCase assertInvariants(){\n  TerminalBuffer screen=mTerminal.getScreen();\n  TerminalRow[] lines=screen.mLines;\n  Set<LineWrapper> linesSet=new HashSet<>();\n  for (int i=0; i < lines.length; i++) {\n    if (lines[i] == null)     continue;\n    assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n    char[] text=lines[i].mText;\n    int usedChars=lines[i].getSpaceUsed();\n    int currentColumn=0;\n    for (int j=0; j < usedChars; j++) {\n      char c=text[j];\n      int codePoint;\n      if (Character.isHighSurrogate(c)) {\n        char lowSurrogate=text[++j];\n        assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n        codePoint=Character.toCodePoint(c,lowSurrogate);\n      }\n else {\n        assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n        codePoint=c;\n      }\n      assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n      int width=WcWidth.width(codePoint);\n      assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n      if (width > 0)       currentColumn+=width;\n    }\n    assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n  }\n  assertEquals(\"The alt buffer should have have no history\",mTerminal.mAltBuffer.mTotalRows,mTerminal.mAltBuffer.mScreenRows);\n  if (mTerminal.isAlternateBufferActive()) {\n    assertEquals(\"The alt buffer should be the same size as the screen\",mTerminal.mRows,mTerminal.mAltBuffer.mTotalRows);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 164,
        "startColumnNumber" : 4,
        "endLineNumber" : 164,
        "endColumnNumber" : 111
      },
      "nodeContext" : "assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "width",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 165,
      "startColumnNumber" : 8,
      "endLineNumber" : 165,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 165,
        "startColumnNumber" : 8,
        "endLineNumber" : 165,
        "endColumnNumber" : 17
      },
      "nodeContext" : "width > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 42
      },
      "nodeContext" : "if (width > 0) currentColumn+=width;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 744,
        "startLineNumber" : 151,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  char c=text[j];\n  int codePoint;\n  if (Character.isHighSurrogate(c)) {\n    char lowSurrogate=text[++j];\n    assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n    codePoint=Character.toCodePoint(c,lowSurrogate);\n  }\n else {\n    assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n    codePoint=c;\n  }\n  assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n  int width=WcWidth.width(codePoint);\n  assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n  if (width > 0)   currentColumn+=width;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 151,
        "startColumnNumber" : 3,
        "endLineNumber" : 166,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int j=0; j < usedChars; j++) {\n  char c=text[j];\n  int codePoint;\n  if (Character.isHighSurrogate(c)) {\n    char lowSurrogate=text[++j];\n    assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n    codePoint=Character.toCodePoint(c,lowSurrogate);\n  }\n else {\n    assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n    codePoint=c;\n  }\n  assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n  int width=WcWidth.width(codePoint);\n  assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n  if (width > 0)   currentColumn+=width;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 145,
        "startColumnNumber" : 41,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (lines[i] == null)   continue;\n  assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n  char[] text=lines[i].mText;\n  int usedChars=lines[i].getSpaceUsed();\n  int currentColumn=0;\n  for (int j=0; j < usedChars; j++) {\n    char c=text[j];\n    int codePoint;\n    if (Character.isHighSurrogate(c)) {\n      char lowSurrogate=text[++j];\n      assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n      codePoint=Character.toCodePoint(c,lowSurrogate);\n    }\n else {\n      assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n      codePoint=c;\n    }\n    assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n    int width=WcWidth.width(codePoint);\n    assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n    if (width > 0)     currentColumn+=width;\n  }\n  assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lines.length; i++) {\n  if (lines[i] == null)   continue;\n  assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n  char[] text=lines[i].mText;\n  int usedChars=lines[i].getSpaceUsed();\n  int currentColumn=0;\n  for (int j=0; j < usedChars; j++) {\n    char c=text[j];\n    int codePoint;\n    if (Character.isHighSurrogate(c)) {\n      char lowSurrogate=text[++j];\n      assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n      codePoint=Character.toCodePoint(c,lowSurrogate);\n    }\n else {\n      assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n      codePoint=c;\n    }\n    assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n    int width=WcWidth.width(codePoint);\n    assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n    if (width > 0)     currentColumn+=width;\n  }\n  assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1684,
        "startLineNumber" : 140,
        "startColumnNumber" : 47,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TerminalBuffer screen=mTerminal.getScreen();\n  TerminalRow[] lines=screen.mLines;\n  Set<LineWrapper> linesSet=new HashSet<>();\n  for (int i=0; i < lines.length; i++) {\n    if (lines[i] == null)     continue;\n    assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n    char[] text=lines[i].mText;\n    int usedChars=lines[i].getSpaceUsed();\n    int currentColumn=0;\n    for (int j=0; j < usedChars; j++) {\n      char c=text[j];\n      int codePoint;\n      if (Character.isHighSurrogate(c)) {\n        char lowSurrogate=text[++j];\n        assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n        codePoint=Character.toCodePoint(c,lowSurrogate);\n      }\n else {\n        assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n        codePoint=c;\n      }\n      assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n      int width=WcWidth.width(codePoint);\n      assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n      if (width > 0)       currentColumn+=width;\n    }\n    assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n  }\n  assertEquals(\"The alt buffer should have have no history\",mTerminal.mAltBuffer.mTotalRows,mTerminal.mAltBuffer.mScreenRows);\n  if (mTerminal.isAlternateBufferActive()) {\n    assertEquals(\"The alt buffer should be the same size as the screen\",mTerminal.mRows,mTerminal.mAltBuffer.mTotalRows);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1730,
        "startLineNumber" : 140,
        "startColumnNumber" : 1,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected TerminalTestCase assertInvariants(){\n  TerminalBuffer screen=mTerminal.getScreen();\n  TerminalRow[] lines=screen.mLines;\n  Set<LineWrapper> linesSet=new HashSet<>();\n  for (int i=0; i < lines.length; i++) {\n    if (lines[i] == null)     continue;\n    assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n    char[] text=lines[i].mText;\n    int usedChars=lines[i].getSpaceUsed();\n    int currentColumn=0;\n    for (int j=0; j < usedChars; j++) {\n      char c=text[j];\n      int codePoint;\n      if (Character.isHighSurrogate(c)) {\n        char lowSurrogate=text[++j];\n        assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n        codePoint=Character.toCodePoint(c,lowSurrogate);\n      }\n else {\n        assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n        codePoint=c;\n      }\n      assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n      int width=WcWidth.width(codePoint);\n      assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n      if (width > 0)       currentColumn+=width;\n    }\n    assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n  }\n  assertEquals(\"The alt buffer should have have no history\",mTerminal.mAltBuffer.mTotalRows,mTerminal.mAltBuffer.mScreenRows);\n  if (mTerminal.isAlternateBufferActive()) {\n    assertEquals(\"The alt buffer should be the same size as the screen\",mTerminal.mRows,mTerminal.mAltBuffer.mTotalRows);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 42
      },
      "nodeContext" : "if (width > 0) currentColumn+=width;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "width",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 165,
      "startColumnNumber" : 36,
      "endLineNumber" : 165,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 165,
        "startColumnNumber" : 19,
        "endLineNumber" : 165,
        "endColumnNumber" : 41
      },
      "nodeContext" : "currentColumn+=width",
      "nodeType" : "Assignment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 165,
        "startColumnNumber" : 19,
        "endLineNumber" : 165,
        "endColumnNumber" : 42
      },
      "nodeContext" : "currentColumn+=width;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 42
      },
      "nodeContext" : "if (width > 0) currentColumn+=width;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 744,
        "startLineNumber" : 151,
        "startColumnNumber" : 39,
        "endLineNumber" : 166,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  char c=text[j];\n  int codePoint;\n  if (Character.isHighSurrogate(c)) {\n    char lowSurrogate=text[++j];\n    assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n    codePoint=Character.toCodePoint(c,lowSurrogate);\n  }\n else {\n    assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n    codePoint=c;\n  }\n  assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n  int width=WcWidth.width(codePoint);\n  assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n  if (width > 0)   currentColumn+=width;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 151,
        "startColumnNumber" : 3,
        "endLineNumber" : 166,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int j=0; j < usedChars; j++) {\n  char c=text[j];\n  int codePoint;\n  if (Character.isHighSurrogate(c)) {\n    char lowSurrogate=text[++j];\n    assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n    codePoint=Character.toCodePoint(c,lowSurrogate);\n  }\n else {\n    assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n    codePoint=c;\n  }\n  assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n  int width=WcWidth.width(codePoint);\n  assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n  if (width > 0)   currentColumn+=width;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 145,
        "startColumnNumber" : 41,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (lines[i] == null)   continue;\n  assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n  char[] text=lines[i].mText;\n  int usedChars=lines[i].getSpaceUsed();\n  int currentColumn=0;\n  for (int j=0; j < usedChars; j++) {\n    char c=text[j];\n    int codePoint;\n    if (Character.isHighSurrogate(c)) {\n      char lowSurrogate=text[++j];\n      assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n      codePoint=Character.toCodePoint(c,lowSurrogate);\n    }\n else {\n      assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n      codePoint=c;\n    }\n    assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n    int width=WcWidth.width(codePoint);\n    assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n    if (width > 0)     currentColumn+=width;\n  }\n  assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 176,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1223,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lines.length; i++) {\n  if (lines[i] == null)   continue;\n  assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n  char[] text=lines[i].mText;\n  int usedChars=lines[i].getSpaceUsed();\n  int currentColumn=0;\n  for (int j=0; j < usedChars; j++) {\n    char c=text[j];\n    int codePoint;\n    if (Character.isHighSurrogate(c)) {\n      char lowSurrogate=text[++j];\n      assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n      codePoint=Character.toCodePoint(c,lowSurrogate);\n    }\n else {\n      assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n      codePoint=c;\n    }\n    assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n    int width=WcWidth.width(codePoint);\n    assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n    if (width > 0)     currentColumn+=width;\n  }\n  assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 189,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1684,
        "startLineNumber" : 140,
        "startColumnNumber" : 47,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TerminalBuffer screen=mTerminal.getScreen();\n  TerminalRow[] lines=screen.mLines;\n  Set<LineWrapper> linesSet=new HashSet<>();\n  for (int i=0; i < lines.length; i++) {\n    if (lines[i] == null)     continue;\n    assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n    char[] text=lines[i].mText;\n    int usedChars=lines[i].getSpaceUsed();\n    int currentColumn=0;\n    for (int j=0; j < usedChars; j++) {\n      char c=text[j];\n      int codePoint;\n      if (Character.isHighSurrogate(c)) {\n        char lowSurrogate=text[++j];\n        assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n        codePoint=Character.toCodePoint(c,lowSurrogate);\n      }\n else {\n        assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n        codePoint=c;\n      }\n      assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n      int width=WcWidth.width(codePoint);\n      assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n      if (width > 0)       currentColumn+=width;\n    }\n    assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n  }\n  assertEquals(\"The alt buffer should have have no history\",mTerminal.mAltBuffer.mTotalRows,mTerminal.mAltBuffer.mScreenRows);\n  if (mTerminal.isAlternateBufferActive()) {\n    assertEquals(\"The alt buffer should be the same size as the screen\",mTerminal.mRows,mTerminal.mAltBuffer.mTotalRows);\n  }\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 253,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1730,
        "startLineNumber" : 140,
        "startColumnNumber" : 1,
        "endLineNumber" : 177,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected TerminalTestCase assertInvariants(){\n  TerminalBuffer screen=mTerminal.getScreen();\n  TerminalRow[] lines=screen.mLines;\n  Set<LineWrapper> linesSet=new HashSet<>();\n  for (int i=0; i < lines.length; i++) {\n    if (lines[i] == null)     continue;\n    assertTrue(\"Line exists at multiple places: \" + i,linesSet.add(new LineWrapper(lines[i])));\n    char[] text=lines[i].mText;\n    int usedChars=lines[i].getSpaceUsed();\n    int currentColumn=0;\n    for (int j=0; j < usedChars; j++) {\n      char c=text[j];\n      int codePoint;\n      if (Character.isHighSurrogate(c)) {\n        char lowSurrogate=text[++j];\n        assertTrue(\"High surrogate without following low surrogate\",Character.isLowSurrogate(lowSurrogate));\n        codePoint=Character.toCodePoint(c,lowSurrogate);\n      }\n else {\n        assertFalse(\"Low surrogate without preceding high surrogate\",Character.isLowSurrogate(c));\n        codePoint=c;\n      }\n      assertFalse(\"Screen should never contain unassigned characters\",Character.getType(codePoint) == Character.UNASSIGNED);\n      int width=WcWidth.width(codePoint);\n      assertFalse(\"The first column should not start with combining character\",currentColumn == 0 && width < 0);\n      if (width > 0)       currentColumn+=width;\n    }\n    assertEquals(\"Line whose width does not match screens. line=\" + new String(lines[i].mText,0,lines[i].getSpaceUsed()),screen.mColumns,currentColumn);\n  }\n  assertEquals(\"The alt buffer should have have no history\",mTerminal.mAltBuffer.mTotalRows,mTerminal.mAltBuffer.mScreenRows);\n  if (mTerminal.isAlternateBufferActive()) {\n    assertEquals(\"The alt buffer should be the same size as the screen\",mTerminal.mRows,mTerminal.mAltBuffer.mTotalRows);\n  }\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 258,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 165,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 42
      },
      "nodeContext" : "if (width > 0) currentColumn+=width;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 164,
    "startColumnNumber" : 100,
    "endLineNumber" : 164,
    "endColumnNumber" : 105
  }, {
    "charLength" : 5,
    "startLineNumber" : 165,
    "startColumnNumber" : 8,
    "endLineNumber" : 165,
    "endColumnNumber" : 13
  }, {
    "charLength" : 5,
    "startLineNumber" : 165,
    "startColumnNumber" : 36,
    "endLineNumber" : 165,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}