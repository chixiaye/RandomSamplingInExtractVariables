{
  "id" : 145,
  "expression" : "pollardRho(divisor)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/PrimeFactorization.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pollardRho(divisor)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 20,
      "startColumnNumber" : 26,
      "endLineNumber" : 20,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 20,
        "startColumnNumber" : 11,
        "endLineNumber" : 20,
        "endColumnNumber" : 45
      },
      "nodeContext" : "next_divisor=pollardRho(divisor)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 20,
        "endColumnNumber" : 46
      },
      "nodeContext" : "long next_divisor=pollardRho(divisor);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 14,
        "startColumnNumber" : 36,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 8,
        "startColumnNumber" : 59,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 8,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 20,
        "endColumnNumber" : 46
      },
      "nodeContext" : "long next_divisor=pollardRho(divisor);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 20,
    "startColumnNumber" : 26,
    "endLineNumber" : 20,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}