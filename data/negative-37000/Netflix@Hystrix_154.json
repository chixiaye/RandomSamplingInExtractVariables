{
  "id" : 154,
  "expression" : "equals(tv1.getBounds(),tv2.getBounds())",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/FallbackMethod.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "equals(tv1.getBounds(),tv2.getBounds())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 249,
      "startColumnNumber" : 32,
      "endLineNumber" : 249,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 249,
        "startColumnNumber" : 23,
        "endLineNumber" : 249,
        "endColumnNumber" : 72
      },
      "nodeContext" : "result=equals(tv1.getBounds(),tv2.getBounds())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 249,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Result result=equals(tv1.getBounds(),tv2.getBounds());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 248,
        "startColumnNumber" : 112,
        "endLineNumber" : 256,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Result result=equals(tv1.getBounds(),tv2.getBounds());\n  return result.append(new Supplier<List<Error>>(){\n    @Override public List<Error> get(){\n      return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 494,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 256,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (tv1.getGenericDeclaration() instanceof Method && tv2.getGenericDeclaration() instanceof Method) {\n  Result result=equals(tv1.getBounds(),tv2.getBounds());\n  return result.append(new Supplier<List<Error>>(){\n    @Override public List<Error> get(){\n      return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n    }\n  }\n);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 693,
        "startLineNumber" : 245,
        "startColumnNumber" : 80,
        "endLineNumber" : 258,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final TypeVariable tv1=(TypeVariable)commandType;\n  final TypeVariable tv2=(TypeVariable)fallbackType;\n  if (tv1.getGenericDeclaration() instanceof Method && tv2.getGenericDeclaration() instanceof Method) {\n    Result result=equals(tv1.getBounds(),tv2.getBounds());\n    return result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n      }\n    }\n);\n  }\n  return regularEquals(tv1,tv2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1849,
        "startLineNumber" : 245,
        "startColumnNumber" : 15,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isTypeVariable(commandType) && isTypeVariable(fallbackType)) {\n  final TypeVariable tv1=(TypeVariable)commandType;\n  final TypeVariable tv2=(TypeVariable)fallbackType;\n  if (tv1.getGenericDeclaration() instanceof Method && tv2.getGenericDeclaration() instanceof Method) {\n    Result result=equals(tv1.getBounds(),tv2.getBounds());\n    return result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n      }\n    }\n);\n  }\n  return regularEquals(tv1,tv2);\n}\n else if (isWildcardType(commandType) && isWildcardType(fallbackType)) {\n  final WildcardType wt1=(WildcardType)commandType;\n  final WildcardType wt2=(WildcardType)fallbackType;\n  Result result=equals(wt1.getLowerBounds(),wt2.getLowerBounds());\n  result=result.append(new Supplier<List<Error>>(){\n    @Override public List<Error> get(){\n      return Collections.singletonList(boundsError(wt1,wt1.getLowerBounds(),\"lower\",wt2,wt2.getLowerBounds()));\n    }\n  }\n);\n  if (result.isFailure())   return result;\n  result=equals(wt1.getUpperBounds(),wt2.getUpperBounds());\n  return result.append(new Supplier<List<Error>>(){\n    @Override public List<Error> get(){\n      return Collections.singletonList(boundsError(wt1,wt1.getUpperBounds(),\"upper\",wt2,wt2.getUpperBounds()));\n    }\n  }\n);\n}\n else {\n  return regularEquals(commandType,fallbackType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 249,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2436,
        "startLineNumber" : 235,
        "startColumnNumber" : 8,
        "endLineNumber" : 280,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isParametrizedType(commandType) && isParametrizedType(fallbackType)) {\n  final ParameterizedType pt1=(ParameterizedType)commandType;\n  final ParameterizedType pt2=(ParameterizedType)fallbackType;\n  Result result=regularEquals(pt1.getRawType(),pt2.getRawType());\n  return result.andThen(new Supplier<Result>(){\n    @Override public Result get(){\n      return FallbackMethod.equals(pt1.getActualTypeArguments(),pt2.getActualTypeArguments());\n    }\n  }\n);\n}\n else if (isTypeVariable(commandType) && isTypeVariable(fallbackType)) {\n  final TypeVariable tv1=(TypeVariable)commandType;\n  final TypeVariable tv2=(TypeVariable)fallbackType;\n  if (tv1.getGenericDeclaration() instanceof Method && tv2.getGenericDeclaration() instanceof Method) {\n    Result result=equals(tv1.getBounds(),tv2.getBounds());\n    return result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n      }\n    }\n);\n  }\n  return regularEquals(tv1,tv2);\n}\n else if (isWildcardType(commandType) && isWildcardType(fallbackType)) {\n  final WildcardType wt1=(WildcardType)commandType;\n  final WildcardType wt2=(WildcardType)fallbackType;\n  Result result=equals(wt1.getLowerBounds(),wt2.getLowerBounds());\n  result=result.append(new Supplier<List<Error>>(){\n    @Override public List<Error> get(){\n      return Collections.singletonList(boundsError(wt1,wt1.getLowerBounds(),\"lower\",wt2,wt2.getLowerBounds()));\n    }\n  }\n);\n  if (result.isFailure())   return result;\n  result=equals(wt1.getUpperBounds(),wt2.getUpperBounds());\n  return result.append(new Supplier<List<Error>>(){\n    @Override public List<Error> get(){\n      return Collections.singletonList(boundsError(wt1,wt1.getUpperBounds(),\"upper\",wt2,wt2.getUpperBounds()));\n    }\n  }\n);\n}\n else {\n  return regularEquals(commandType,fallbackType);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 320,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2452,
        "startLineNumber" : 234,
        "startColumnNumber" : 70,
        "endLineNumber" : 281,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isParametrizedType(commandType) && isParametrizedType(fallbackType)) {\n    final ParameterizedType pt1=(ParameterizedType)commandType;\n    final ParameterizedType pt2=(ParameterizedType)fallbackType;\n    Result result=regularEquals(pt1.getRawType(),pt2.getRawType());\n    return result.andThen(new Supplier<Result>(){\n      @Override public Result get(){\n        return FallbackMethod.equals(pt1.getActualTypeArguments(),pt2.getActualTypeArguments());\n      }\n    }\n);\n  }\n else   if (isTypeVariable(commandType) && isTypeVariable(fallbackType)) {\n    final TypeVariable tv1=(TypeVariable)commandType;\n    final TypeVariable tv2=(TypeVariable)fallbackType;\n    if (tv1.getGenericDeclaration() instanceof Method && tv2.getGenericDeclaration() instanceof Method) {\n      Result result=equals(tv1.getBounds(),tv2.getBounds());\n      return result.append(new Supplier<List<Error>>(){\n        @Override public List<Error> get(){\n          return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n        }\n      }\n);\n    }\n    return regularEquals(tv1,tv2);\n  }\n else   if (isWildcardType(commandType) && isWildcardType(fallbackType)) {\n    final WildcardType wt1=(WildcardType)commandType;\n    final WildcardType wt2=(WildcardType)fallbackType;\n    Result result=equals(wt1.getLowerBounds(),wt2.getLowerBounds());\n    result=result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(wt1,wt1.getLowerBounds(),\"lower\",wt2,wt2.getLowerBounds()));\n      }\n    }\n);\n    if (result.isFailure())     return result;\n    result=equals(wt1.getUpperBounds(),wt2.getUpperBounds());\n    return result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(wt1,wt1.getUpperBounds(),\"upper\",wt2,wt2.getUpperBounds()));\n      }\n    }\n);\n  }\n else {\n    return regularEquals(commandType,fallbackType);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2518,
        "startLineNumber" : 234,
        "startColumnNumber" : 4,
        "endLineNumber" : 281,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static Result equals(Type commandType,Type fallbackType){\n  if (isParametrizedType(commandType) && isParametrizedType(fallbackType)) {\n    final ParameterizedType pt1=(ParameterizedType)commandType;\n    final ParameterizedType pt2=(ParameterizedType)fallbackType;\n    Result result=regularEquals(pt1.getRawType(),pt2.getRawType());\n    return result.andThen(new Supplier<Result>(){\n      @Override public Result get(){\n        return FallbackMethod.equals(pt1.getActualTypeArguments(),pt2.getActualTypeArguments());\n      }\n    }\n);\n  }\n else   if (isTypeVariable(commandType) && isTypeVariable(fallbackType)) {\n    final TypeVariable tv1=(TypeVariable)commandType;\n    final TypeVariable tv2=(TypeVariable)fallbackType;\n    if (tv1.getGenericDeclaration() instanceof Method && tv2.getGenericDeclaration() instanceof Method) {\n      Result result=equals(tv1.getBounds(),tv2.getBounds());\n      return result.append(new Supplier<List<Error>>(){\n        @Override public List<Error> get(){\n          return Collections.singletonList(boundsError(tv1,tv1.getBounds(),\"\",tv2,tv2.getBounds()));\n        }\n      }\n);\n    }\n    return regularEquals(tv1,tv2);\n  }\n else   if (isWildcardType(commandType) && isWildcardType(fallbackType)) {\n    final WildcardType wt1=(WildcardType)commandType;\n    final WildcardType wt2=(WildcardType)fallbackType;\n    Result result=equals(wt1.getLowerBounds(),wt2.getLowerBounds());\n    result=result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(wt1,wt1.getLowerBounds(),\"lower\",wt2,wt2.getLowerBounds()));\n      }\n    }\n);\n    if (result.isFailure())     return result;\n    result=equals(wt1.getUpperBounds(),wt2.getUpperBounds());\n    return result.append(new Supplier<List<Error>>(){\n      @Override public List<Error> get(){\n        return Collections.singletonList(boundsError(wt1,wt1.getUpperBounds(),\"upper\",wt2,wt2.getUpperBounds()));\n      }\n    }\n);\n  }\n else {\n    return regularEquals(commandType,fallbackType);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 335,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 249,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "Result result=equals(tv1.getBounds(),tv2.getBounds());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "com.netflix.hystrix.contrib.javanica.utils.FallbackMethod.Result"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 249,
    "startColumnNumber" : 32,
    "endLineNumber" : 249,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ ]
}