{
  "id" : 135,
  "expression" : "Log",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/logsubmit/SubmitDebugLogRepository.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 130,
      "startColumnNumber" : 8,
      "endLineNumber" : 130,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Log.w(TAG,\"Error during trace upload.\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Log.w(TAG,\"Error during trace upload.\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 129,
        "startColumnNumber" : 30,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Log.w(TAG,\"Error during trace upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 129,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IOException e) {\n  Log.w(TAG,\"Error during trace upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 264,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try {\n  traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n}\n catch (IOException e) {\n  Log.w(TAG,\"Error during trace upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 126,
        "startColumnNumber" : 23,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n  }\n catch (  IOException e) {\n    Log.w(TAG,\"Error during trace upload.\",e);\n    return Optional.absent();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (trace != null) {\n  try {\n    traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n  }\n catch (  IOException e) {\n    Log.w(TAG,\"Error during trace upload.\",e);\n    return Optional.absent();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2744,
        "startLineNumber" : 124,
        "startColumnNumber" : 130,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String traceUrl=null;\n  if (trace != null) {\n    try {\n      traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Error during trace upload.\",e);\n      return Optional.absent();\n    }\n  }\n  StringBuilder prefixStringBuilder=new StringBuilder();\n  for (  LogLine line : prefixLines) {\nswitch (line.getPlaceholderType()) {\ncase NONE:      prefixStringBuilder.append(line.getText()).append('\\n');\n    break;\ncase TRACE:  prefixStringBuilder.append(traceUrl).append('\\n');\nbreak;\n}\n}\ntry {\nStopwatch stopwatch=new Stopwatch(\"log-upload\");\nParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\nUri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\nOutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\ngzipOutput.write(prefixStringBuilder.toString().getBytes());\nstopwatch.split(\"front-matter\");\ntry (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\nwhile (reader.hasNext()) {\ngzipOutput.write(reader.next().getBytes());\ngzipOutput.write(\"\\n\".getBytes());\n}\n}\n catch (IllegalStateException e) {\nLog.e(TAG,\"Failed to read row!\",e);\nreturn Optional.absent();\n}\nStreamUtil.close(gzipOutput);\nstopwatch.split(\"body\");\nString logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n@Override public @NonNull MediaType contentType(){\nreturn MediaType.get(\"application/gzip\");\n}\n@Override public long contentLength(){\nreturn BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n}\n@Override public void writeTo(@NonNull BufferedSink sink) throws IOException {\nSource source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\nsink.writeAll(source);\n}\n}\n);\nstopwatch.split(\"upload\");\nstopwatch.stop(TAG);\nBlobProvider.getInstance().delete(context,gzipUri);\nreturn Optional.of(logUrl);\n}\n catch (IOException e) {\nLog.w(TAG,\"Error during log upload.\",e);\nreturn Optional.absent();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private @NonNull Optional<String> submitLogInternal(long untilTime,@NonNull List<LogLine> prefixLines,@Nullable byte[] trace){\n  String traceUrl=null;\n  if (trace != null) {\n    try {\n      traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Error during trace upload.\",e);\n      return Optional.absent();\n    }\n  }\n  StringBuilder prefixStringBuilder=new StringBuilder();\n  for (  LogLine line : prefixLines) {\nswitch (line.getPlaceholderType()) {\ncase NONE:      prefixStringBuilder.append(line.getText()).append('\\n');\n    break;\ncase TRACE:  prefixStringBuilder.append(traceUrl).append('\\n');\nbreak;\n}\n}\ntry {\nStopwatch stopwatch=new Stopwatch(\"log-upload\");\nParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\nUri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\nOutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\ngzipOutput.write(prefixStringBuilder.toString().getBytes());\nstopwatch.split(\"front-matter\");\ntry (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\nwhile (reader.hasNext()) {\ngzipOutput.write(reader.next().getBytes());\ngzipOutput.write(\"\\n\".getBytes());\n}\n}\n catch (IllegalStateException e) {\nLog.e(TAG,\"Failed to read row!\",e);\nreturn Optional.absent();\n}\nStreamUtil.close(gzipOutput);\nstopwatch.split(\"body\");\nString logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n@Override public @NonNull MediaType contentType(){\nreturn MediaType.get(\"application/gzip\");\n}\n@Override public long contentLength(){\nreturn BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n}\n@Override public void writeTo(@NonNull BufferedSink sink) throws IOException {\nSource source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\nsink.writeAll(source);\n}\n}\n);\nstopwatch.split(\"upload\");\nstopwatch.stop(TAG);\nBlobProvider.getInstance().delete(context,gzipUri);\nreturn Optional.of(logUrl);\n}\n catch (IOException e) {\nLog.w(TAG,\"Error during log upload.\",e);\nreturn Optional.absent();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Log.w(TAG,\"Error during trace upload.\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.signal.core.util.logging.Log"
  }, {
    "nodeContext" : "Log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 168,
      "startColumnNumber" : 8,
      "endLineNumber" : 168,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Log.e(TAG,\"Failed to read row!\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Log.e(TAG,\"Failed to read row!\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 167,
        "startColumnNumber" : 40,
        "endLineNumber" : 170,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Log.e(TAG,\"Failed to read row!\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IllegalStateException e) {\n  Log.e(TAG,\"Failed to read row!\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 162,
        "startColumnNumber" : 6,
        "endLineNumber" : 170,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\n  while (reader.hasNext()) {\n    gzipOutput.write(reader.next().getBytes());\n    gzipOutput.write(\"\\n\".getBytes());\n  }\n}\n catch (IllegalStateException e) {\n  Log.e(TAG,\"Failed to read row!\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1929,
        "startLineNumber" : 147,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Stopwatch stopwatch=new Stopwatch(\"log-upload\");\n  ParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\n  Uri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\n  OutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\n  gzipOutput.write(prefixStringBuilder.toString().getBytes());\n  stopwatch.split(\"front-matter\");\n  try (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\n    while (reader.hasNext()) {\n      gzipOutput.write(reader.next().getBytes());\n      gzipOutput.write(\"\\n\".getBytes());\n    }\n  }\n catch (  IllegalStateException e) {\n    Log.e(TAG,\"Failed to read row!\",e);\n    return Optional.absent();\n  }\n  StreamUtil.close(gzipOutput);\n  stopwatch.split(\"body\");\n  String logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n    @Override public @NonNull MediaType contentType(){\n      return MediaType.get(\"application/gzip\");\n    }\n    @Override public long contentLength(){\n      return BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n    }\n    @Override public void writeTo(    @NonNull BufferedSink sink) throws IOException {\n      Source source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\n      sink.writeAll(source);\n    }\n  }\n);\n  stopwatch.split(\"upload\");\n  stopwatch.stop(TAG);\n  BlobProvider.getInstance().delete(context,gzipUri);\n  return Optional.of(logUrl);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 241,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2044,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Stopwatch stopwatch=new Stopwatch(\"log-upload\");\n  ParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\n  Uri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\n  OutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\n  gzipOutput.write(prefixStringBuilder.toString().getBytes());\n  stopwatch.split(\"front-matter\");\n  try (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\n    while (reader.hasNext()) {\n      gzipOutput.write(reader.next().getBytes());\n      gzipOutput.write(\"\\n\".getBytes());\n    }\n  }\n catch (  IllegalStateException e) {\n    Log.e(TAG,\"Failed to read row!\",e);\n    return Optional.absent();\n  }\n  StreamUtil.close(gzipOutput);\n  stopwatch.split(\"body\");\n  String logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n    @Override public @NonNull MediaType contentType(){\n      return MediaType.get(\"application/gzip\");\n    }\n    @Override public long contentLength(){\n      return BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n    }\n    @Override public void writeTo(    @NonNull BufferedSink sink) throws IOException {\n      Source source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\n      sink.writeAll(source);\n    }\n  }\n);\n  stopwatch.split(\"upload\");\n  stopwatch.stop(TAG);\n  BlobProvider.getInstance().delete(context,gzipUri);\n  return Optional.of(logUrl);\n}\n catch (IOException e) {\n  Log.w(TAG,\"Error during log upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 259,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2744,
        "startLineNumber" : 124,
        "startColumnNumber" : 130,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String traceUrl=null;\n  if (trace != null) {\n    try {\n      traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Error during trace upload.\",e);\n      return Optional.absent();\n    }\n  }\n  StringBuilder prefixStringBuilder=new StringBuilder();\n  for (  LogLine line : prefixLines) {\nswitch (line.getPlaceholderType()) {\ncase NONE:      prefixStringBuilder.append(line.getText()).append('\\n');\n    break;\ncase TRACE:  prefixStringBuilder.append(traceUrl).append('\\n');\nbreak;\n}\n}\ntry {\nStopwatch stopwatch=new Stopwatch(\"log-upload\");\nParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\nUri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\nOutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\ngzipOutput.write(prefixStringBuilder.toString().getBytes());\nstopwatch.split(\"front-matter\");\ntry (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\nwhile (reader.hasNext()) {\ngzipOutput.write(reader.next().getBytes());\ngzipOutput.write(\"\\n\".getBytes());\n}\n}\n catch (IllegalStateException e) {\nLog.e(TAG,\"Failed to read row!\",e);\nreturn Optional.absent();\n}\nStreamUtil.close(gzipOutput);\nstopwatch.split(\"body\");\nString logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n@Override public @NonNull MediaType contentType(){\nreturn MediaType.get(\"application/gzip\");\n}\n@Override public long contentLength(){\nreturn BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n}\n@Override public void writeTo(@NonNull BufferedSink sink) throws IOException {\nSource source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\nsink.writeAll(source);\n}\n}\n);\nstopwatch.split(\"upload\");\nstopwatch.stop(TAG);\nBlobProvider.getInstance().delete(context,gzipUri);\nreturn Optional.of(logUrl);\n}\n catch (IOException e) {\nLog.w(TAG,\"Error during log upload.\",e);\nreturn Optional.absent();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private @NonNull Optional<String> submitLogInternal(long untilTime,@NonNull List<LogLine> prefixLines,@Nullable byte[] trace){\n  String traceUrl=null;\n  if (trace != null) {\n    try {\n      traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Error during trace upload.\",e);\n      return Optional.absent();\n    }\n  }\n  StringBuilder prefixStringBuilder=new StringBuilder();\n  for (  LogLine line : prefixLines) {\nswitch (line.getPlaceholderType()) {\ncase NONE:      prefixStringBuilder.append(line.getText()).append('\\n');\n    break;\ncase TRACE:  prefixStringBuilder.append(traceUrl).append('\\n');\nbreak;\n}\n}\ntry {\nStopwatch stopwatch=new Stopwatch(\"log-upload\");\nParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\nUri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\nOutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\ngzipOutput.write(prefixStringBuilder.toString().getBytes());\nstopwatch.split(\"front-matter\");\ntry (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\nwhile (reader.hasNext()) {\ngzipOutput.write(reader.next().getBytes());\ngzipOutput.write(\"\\n\".getBytes());\n}\n}\n catch (IllegalStateException e) {\nLog.e(TAG,\"Failed to read row!\",e);\nreturn Optional.absent();\n}\nStreamUtil.close(gzipOutput);\nstopwatch.split(\"body\");\nString logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n@Override public @NonNull MediaType contentType(){\nreturn MediaType.get(\"application/gzip\");\n}\n@Override public long contentLength(){\nreturn BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n}\n@Override public void writeTo(@NonNull BufferedSink sink) throws IOException {\nSource source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\nsink.writeAll(source);\n}\n}\n);\nstopwatch.split(\"upload\");\nstopwatch.stop(TAG);\nBlobProvider.getInstance().delete(context,gzipUri);\nreturn Optional.of(logUrl);\n}\n catch (IOException e) {\nLog.w(TAG,\"Error during log upload.\",e);\nreturn Optional.absent();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 168,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Log.e(TAG,\"Failed to read row!\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.signal.core.util.logging.Log"
  }, {
    "nodeContext" : "Log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 200,
      "startColumnNumber" : 6,
      "endLineNumber" : 200,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Log.w(TAG,\"Error during log upload.\",e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Log.w(TAG,\"Error during log upload.\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 199,
        "startColumnNumber" : 28,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Log.w(TAG,\"Error during log upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 199,
        "startColumnNumber" : 6,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "catch (IOException e) {\n  Log.w(TAG,\"Error during log upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2044,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 202,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Stopwatch stopwatch=new Stopwatch(\"log-upload\");\n  ParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\n  Uri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\n  OutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\n  gzipOutput.write(prefixStringBuilder.toString().getBytes());\n  stopwatch.split(\"front-matter\");\n  try (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\n    while (reader.hasNext()) {\n      gzipOutput.write(reader.next().getBytes());\n      gzipOutput.write(\"\\n\".getBytes());\n    }\n  }\n catch (  IllegalStateException e) {\n    Log.e(TAG,\"Failed to read row!\",e);\n    return Optional.absent();\n  }\n  StreamUtil.close(gzipOutput);\n  stopwatch.split(\"body\");\n  String logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n    @Override public @NonNull MediaType contentType(){\n      return MediaType.get(\"application/gzip\");\n    }\n    @Override public long contentLength(){\n      return BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n    }\n    @Override public void writeTo(    @NonNull BufferedSink sink) throws IOException {\n      Source source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\n      sink.writeAll(source);\n    }\n  }\n);\n  stopwatch.split(\"upload\");\n  stopwatch.stop(TAG);\n  BlobProvider.getInstance().delete(context,gzipUri);\n  return Optional.of(logUrl);\n}\n catch (IOException e) {\n  Log.w(TAG,\"Error during log upload.\",e);\n  return Optional.absent();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 259,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2744,
        "startLineNumber" : 124,
        "startColumnNumber" : 130,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String traceUrl=null;\n  if (trace != null) {\n    try {\n      traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Error during trace upload.\",e);\n      return Optional.absent();\n    }\n  }\n  StringBuilder prefixStringBuilder=new StringBuilder();\n  for (  LogLine line : prefixLines) {\nswitch (line.getPlaceholderType()) {\ncase NONE:      prefixStringBuilder.append(line.getText()).append('\\n');\n    break;\ncase TRACE:  prefixStringBuilder.append(traceUrl).append('\\n');\nbreak;\n}\n}\ntry {\nStopwatch stopwatch=new Stopwatch(\"log-upload\");\nParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\nUri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\nOutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\ngzipOutput.write(prefixStringBuilder.toString().getBytes());\nstopwatch.split(\"front-matter\");\ntry (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\nwhile (reader.hasNext()) {\ngzipOutput.write(reader.next().getBytes());\ngzipOutput.write(\"\\n\".getBytes());\n}\n}\n catch (IllegalStateException e) {\nLog.e(TAG,\"Failed to read row!\",e);\nreturn Optional.absent();\n}\nStreamUtil.close(gzipOutput);\nstopwatch.split(\"body\");\nString logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n@Override public @NonNull MediaType contentType(){\nreturn MediaType.get(\"application/gzip\");\n}\n@Override public long contentLength(){\nreturn BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n}\n@Override public void writeTo(@NonNull BufferedSink sink) throws IOException {\nSource source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\nsink.writeAll(source);\n}\n}\n);\nstopwatch.split(\"upload\");\nstopwatch.stop(TAG);\nBlobProvider.getInstance().delete(context,gzipUri);\nreturn Optional.of(logUrl);\n}\n catch (IOException e) {\nLog.w(TAG,\"Error during log upload.\",e);\nreturn Optional.absent();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 123,
        "startColumnNumber" : 2,
        "endLineNumber" : 203,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread private @NonNull Optional<String> submitLogInternal(long untilTime,@NonNull List<LogLine> prefixLines,@Nullable byte[] trace){\n  String traceUrl=null;\n  if (trace != null) {\n    try {\n      traceUrl=uploadContent(\"application/octet-stream\",RequestBody.create(MediaType.get(\"application/octet-stream\"),trace));\n    }\n catch (    IOException e) {\n      Log.w(TAG,\"Error during trace upload.\",e);\n      return Optional.absent();\n    }\n  }\n  StringBuilder prefixStringBuilder=new StringBuilder();\n  for (  LogLine line : prefixLines) {\nswitch (line.getPlaceholderType()) {\ncase NONE:      prefixStringBuilder.append(line.getText()).append('\\n');\n    break;\ncase TRACE:  prefixStringBuilder.append(traceUrl).append('\\n');\nbreak;\n}\n}\ntry {\nStopwatch stopwatch=new Stopwatch(\"log-upload\");\nParcelFileDescriptor[] fds=ParcelFileDescriptor.createPipe();\nUri gzipUri=BlobProvider.getInstance().forData(new ParcelFileDescriptor.AutoCloseInputStream(fds[0]),0).withMimeType(\"application/gzip\").createForSingleSessionOnDiskAsync(context,null,null);\nOutputStream gzipOutput=new GZIPOutputStream(new ParcelFileDescriptor.AutoCloseOutputStream(fds[1]));\ngzipOutput.write(prefixStringBuilder.toString().getBytes());\nstopwatch.split(\"front-matter\");\ntry (LogDatabase.Reader reader=LogDatabase.getInstance(context).getAllBeforeTime(untilTime)){\nwhile (reader.hasNext()) {\ngzipOutput.write(reader.next().getBytes());\ngzipOutput.write(\"\\n\".getBytes());\n}\n}\n catch (IllegalStateException e) {\nLog.e(TAG,\"Failed to read row!\",e);\nreturn Optional.absent();\n}\nStreamUtil.close(gzipOutput);\nstopwatch.split(\"body\");\nString logUrl=uploadContent(\"application/gzip\",new RequestBody(){\n@Override public @NonNull MediaType contentType(){\nreturn MediaType.get(\"application/gzip\");\n}\n@Override public long contentLength(){\nreturn BlobProvider.getInstance().calculateFileSize(context,gzipUri);\n}\n@Override public void writeTo(@NonNull BufferedSink sink) throws IOException {\nSource source=Okio.source(BlobProvider.getInstance().getStream(context,gzipUri));\nsink.writeAll(source);\n}\n}\n);\nstopwatch.split(\"upload\");\nstopwatch.stop(TAG);\nBlobProvider.getInstance().delete(context,gzipUri);\nreturn Optional.of(logUrl);\n}\n catch (IOException e) {\nLog.w(TAG,\"Error during log upload.\",e);\nreturn Optional.absent();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Log.w(TAG,\"Error during log upload.\",e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.signal.core.util.logging.Log"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 130,
    "startColumnNumber" : 8,
    "endLineNumber" : 130,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 168,
    "startColumnNumber" : 8,
    "endLineNumber" : 168,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 200,
    "startColumnNumber" : 6,
    "endLineNumber" : 200,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}