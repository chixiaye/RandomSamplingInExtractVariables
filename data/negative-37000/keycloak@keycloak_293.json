{
  "id" : 293,
  "expression" : "issueInstant",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/saml-core/src/test/java/org/keycloak/saml/processing/core/saml/v2/writers/SAMLAssertionWriterTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "issueInstant",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 24,
      "startColumnNumber" : 69,
      "endLineNumber" : 24,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 24,
        "startColumnNumber" : 53,
        "endLineNumber" : 24,
        "endColumnNumber" : 106
      },
      "nodeContext" : "XMLTimeUtil.add(issueInstant,sessionLengthInSeconds)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 24,
        "startColumnNumber" : 29,
        "endLineNumber" : 24,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 107
      },
      "nodeContext" : "XMLGregorianCalendar sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1096,
        "startLineNumber" : 20,
        "startColumnNumber" : 89,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long sessionLengthInSeconds=3600;\n  XMLGregorianCalendar issueInstant=XMLTimeUtil.getIssueInstant();\n  XMLGregorianCalendar sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds);\n  AuthnStatementType authnStatementType=new AuthnStatementType(issueInstant);\n  authnStatementType.setSessionIndex(\"9b3cf799-225b-424a-8e5e-ee3c38e06ded::24b2f572-163c-43ad-8011-de6cd3803f76\");\n  authnStatementType.setSessionNotOnOrAfter(sessionExpirationDate);\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  SAMLAssertionWriter samlAssertionWriter=new SAMLAssertionWriter(StaxUtil.getXMLStreamWriter(byteArrayOutputStream));\n  samlAssertionWriter.write(authnStatementType,true);\n  String serializedAssertion=new String(byteArrayOutputStream.toByteArray(),GeneralConstants.SAML_CHARSET);\n  String expectedXMLAttribute=\"SessionNotOnOrAfter=\\\"\" + sessionExpirationDate.toString() + \"\\\"\";\n  Assert.assertTrue(serializedAssertion.contains(expectedXMLAttribute));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1191,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthnStatementSessionNotOnOrAfterExists() throws ProcessingException {\n  long sessionLengthInSeconds=3600;\n  XMLGregorianCalendar issueInstant=XMLTimeUtil.getIssueInstant();\n  XMLGregorianCalendar sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds);\n  AuthnStatementType authnStatementType=new AuthnStatementType(issueInstant);\n  authnStatementType.setSessionIndex(\"9b3cf799-225b-424a-8e5e-ee3c38e06ded::24b2f572-163c-43ad-8011-de6cd3803f76\");\n  authnStatementType.setSessionNotOnOrAfter(sessionExpirationDate);\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  SAMLAssertionWriter samlAssertionWriter=new SAMLAssertionWriter(StaxUtil.getXMLStreamWriter(byteArrayOutputStream));\n  samlAssertionWriter.write(authnStatementType,true);\n  String serializedAssertion=new String(byteArrayOutputStream.toByteArray(),GeneralConstants.SAML_CHARSET);\n  String expectedXMLAttribute=\"SessionNotOnOrAfter=\\\"\" + sessionExpirationDate.toString() + \"\\\"\";\n  Assert.assertTrue(serializedAssertion.contains(expectedXMLAttribute));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 110,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 24,
        "startColumnNumber" : 8,
        "endLineNumber" : 24,
        "endColumnNumber" : 107
      },
      "nodeContext" : "XMLGregorianCalendar sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "javax.xml.datatype.XMLGregorianCalendar"
  }, {
    "nodeContext" : "issueInstant",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 26,
      "startColumnNumber" : 71,
      "endLineNumber" : 26,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 26,
        "startColumnNumber" : 48,
        "endLineNumber" : 26,
        "endColumnNumber" : 84
      },
      "nodeContext" : "new AuthnStatementType(issueInstant)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 26,
        "startColumnNumber" : 27,
        "endLineNumber" : 26,
        "endColumnNumber" : 84
      },
      "nodeContext" : "authnStatementType=new AuthnStatementType(issueInstant)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 85
      },
      "nodeContext" : "AuthnStatementType authnStatementType=new AuthnStatementType(issueInstant);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1096,
        "startLineNumber" : 20,
        "startColumnNumber" : 89,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long sessionLengthInSeconds=3600;\n  XMLGregorianCalendar issueInstant=XMLTimeUtil.getIssueInstant();\n  XMLGregorianCalendar sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds);\n  AuthnStatementType authnStatementType=new AuthnStatementType(issueInstant);\n  authnStatementType.setSessionIndex(\"9b3cf799-225b-424a-8e5e-ee3c38e06ded::24b2f572-163c-43ad-8011-de6cd3803f76\");\n  authnStatementType.setSessionNotOnOrAfter(sessionExpirationDate);\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  SAMLAssertionWriter samlAssertionWriter=new SAMLAssertionWriter(StaxUtil.getXMLStreamWriter(byteArrayOutputStream));\n  samlAssertionWriter.write(authnStatementType,true);\n  String serializedAssertion=new String(byteArrayOutputStream.toByteArray(),GeneralConstants.SAML_CHARSET);\n  String expectedXMLAttribute=\"SessionNotOnOrAfter=\\\"\" + sessionExpirationDate.toString() + \"\\\"\";\n  Assert.assertTrue(serializedAssertion.contains(expectedXMLAttribute));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1191,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 40,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAuthnStatementSessionNotOnOrAfterExists() throws ProcessingException {\n  long sessionLengthInSeconds=3600;\n  XMLGregorianCalendar issueInstant=XMLTimeUtil.getIssueInstant();\n  XMLGregorianCalendar sessionExpirationDate=XMLTimeUtil.add(issueInstant,sessionLengthInSeconds);\n  AuthnStatementType authnStatementType=new AuthnStatementType(issueInstant);\n  authnStatementType.setSessionIndex(\"9b3cf799-225b-424a-8e5e-ee3c38e06ded::24b2f572-163c-43ad-8011-de6cd3803f76\");\n  authnStatementType.setSessionNotOnOrAfter(sessionExpirationDate);\n  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();\n  SAMLAssertionWriter samlAssertionWriter=new SAMLAssertionWriter(StaxUtil.getXMLStreamWriter(byteArrayOutputStream));\n  samlAssertionWriter.write(authnStatementType,true);\n  String serializedAssertion=new String(byteArrayOutputStream.toByteArray(),GeneralConstants.SAML_CHARSET);\n  String expectedXMLAttribute=\"SessionNotOnOrAfter=\\\"\" + sessionExpirationDate.toString() + \"\\\"\";\n  Assert.assertTrue(serializedAssertion.contains(expectedXMLAttribute));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 110,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 85
      },
      "nodeContext" : "AuthnStatementType authnStatementType=new AuthnStatementType(issueInstant);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.xml.datatype.XMLGregorianCalendar"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 24,
    "startColumnNumber" : 69,
    "endLineNumber" : 24,
    "endColumnNumber" : 81
  }, {
    "charLength" : 12,
    "startLineNumber" : 26,
    "startColumnNumber" : 71,
    "endLineNumber" : 26,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}