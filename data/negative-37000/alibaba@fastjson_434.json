{
  "id" : 434,
  "expression" : "ex1.getStackTrace()",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/serializer/exception/RuntimeExceptionTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ex1.getStackTrace()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 21,
      "startColumnNumber" : 55,
      "endLineNumber" : 21,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 21,
        "startColumnNumber" : 55,
        "endLineNumber" : 21,
        "endColumnNumber" : 81
      },
      "nodeContext" : "ex1.getStackTrace().length",
      "nodeType" : "FieldAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 11,
        "startColumnNumber" : 42,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.StackTraceElement[]"
  }, {
    "nodeContext" : "ex1.getStackTrace()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 24,
      "startColumnNumber" : 70,
      "endLineNumber" : 24,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 24,
        "startColumnNumber" : 70,
        "endLineNumber" : 24,
        "endColumnNumber" : 92
      },
      "nodeContext" : "ex1.getStackTrace()[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 24,
        "startColumnNumber" : 70,
        "endLineNumber" : 24,
        "endColumnNumber" : 107
      },
      "nodeContext" : "ex1.getStackTrace()[i].getClassName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 109
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 23,
        "startColumnNumber" : 60,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < ex.getStackTrace().length; ++i) {\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 11,
        "startColumnNumber" : 42,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 24,
        "startColumnNumber" : 12,
        "endLineNumber" : 24,
        "endColumnNumber" : 109
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.StackTraceElement[]"
  }, {
    "nodeContext" : "ex1.getStackTrace()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 25,
      "startColumnNumber" : 69,
      "endLineNumber" : 25,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 25,
        "startColumnNumber" : 69,
        "endLineNumber" : 25,
        "endColumnNumber" : 91
      },
      "nodeContext" : "ex1.getStackTrace()[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 25,
        "startColumnNumber" : 69,
        "endLineNumber" : 25,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ex1.getStackTrace()[i].getFileName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 106
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 107
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 23,
        "startColumnNumber" : 60,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < ex.getStackTrace().length; ++i) {\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 11,
        "startColumnNumber" : 42,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 25,
        "startColumnNumber" : 12,
        "endLineNumber" : 25,
        "endColumnNumber" : 107
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.StackTraceElement[]"
  }, {
    "nodeContext" : "ex1.getStackTrace()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 26,
      "startColumnNumber" : 71,
      "endLineNumber" : 26,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 26,
        "startColumnNumber" : 71,
        "endLineNumber" : 26,
        "endColumnNumber" : 93
      },
      "nodeContext" : "ex1.getStackTrace()[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 26,
        "startColumnNumber" : 71,
        "endLineNumber" : 26,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ex1.getStackTrace()[i].getLineNumber()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 26,
        "endColumnNumber" : 110
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 26,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 23,
        "startColumnNumber" : 60,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < ex.getStackTrace().length; ++i) {\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 11,
        "startColumnNumber" : 42,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 26,
        "startColumnNumber" : 12,
        "endLineNumber" : 26,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.StackTraceElement[]"
  }, {
    "nodeContext" : "ex1.getStackTrace()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 27,
      "startColumnNumber" : 71,
      "endLineNumber" : 27,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 27,
        "startColumnNumber" : 71,
        "endLineNumber" : 27,
        "endColumnNumber" : 93
      },
      "nodeContext" : "ex1.getStackTrace()[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 27,
        "startColumnNumber" : 71,
        "endLineNumber" : 27,
        "endColumnNumber" : 109
      },
      "nodeContext" : "ex1.getStackTrace()[i].getMethodName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 110
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 453,
        "startLineNumber" : 23,
        "startColumnNumber" : 60,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 23,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < ex.getStackTrace().length; ++i) {\n  Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n  Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n  Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n  Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1195,
        "startLineNumber" : 11,
        "startColumnNumber" : 42,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1233,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 34,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  RuntimeException ex=new RuntimeException();\n  JSONObject json=JSON.parseObject(JSON.toJSONString(ex));\n  String jsonString=JSON.toJSONString(ex);\n  Exception ex1=JSON.parseObject(jsonString,Exception.class);\n  Assert.assertEquals(ex.getMessage(),ex1.getMessage());\n  Assert.assertEquals(ex.getStackTrace().length,ex1.getStackTrace().length);\n  for (int i=0; i < ex.getStackTrace().length; ++i) {\n    Assert.assertEquals(ex.getStackTrace()[i].getClassName(),ex1.getStackTrace()[i].getClassName());\n    Assert.assertEquals(ex.getStackTrace()[i].getFileName(),ex1.getStackTrace()[i].getFileName());\n    Assert.assertEquals(ex.getStackTrace()[i].getLineNumber(),ex1.getStackTrace()[i].getLineNumber());\n    Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n  }\n  Assert.assertEquals(ex1.getClass(),ex.getClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 27,
        "startColumnNumber" : 12,
        "endLineNumber" : 27,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Assert.assertEquals(ex.getStackTrace()[i].getMethodName(),ex1.getStackTrace()[i].getMethodName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.lang.StackTraceElement[]"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 21,
    "startColumnNumber" : 55,
    "endLineNumber" : 21,
    "endColumnNumber" : 74
  }, {
    "charLength" : 19,
    "startLineNumber" : 24,
    "startColumnNumber" : 70,
    "endLineNumber" : 24,
    "endColumnNumber" : 89
  }, {
    "charLength" : 19,
    "startLineNumber" : 25,
    "startColumnNumber" : 69,
    "endLineNumber" : 25,
    "endColumnNumber" : 88
  }, {
    "charLength" : 19,
    "startLineNumber" : 26,
    "startColumnNumber" : 71,
    "endLineNumber" : 26,
    "endColumnNumber" : 90
  }, {
    "charLength" : 19,
    "startLineNumber" : 27,
    "startColumnNumber" : 71,
    "endLineNumber" : 27,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}