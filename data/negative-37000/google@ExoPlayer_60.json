{
  "id" : 60,
  "expression" : "EbmlProcessor.ELEMENT_TYPE_STRING",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/mkv/DefaultEbmlReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EbmlProcessor.ELEMENT_TYPE_STRING",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 132,
      "startColumnNumber" : 13,
      "endLineNumber" : 132,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 47
      },
      "nodeContext" : "case EbmlProcessor.ELEMENT_TYPE_STRING:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2349,
        "startLineNumber" : 107,
        "startColumnNumber" : 6,
        "endLineNumber" : 151,
        "endColumnNumber" : 7
      },
      "nodeContext" : "switch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:  long elementContentPosition=input.getPosition();\nlong elementEndPosition=elementContentPosition + elementContentSize;\nmasterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid integer size: \" + elementContentSize,null);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid float size: \" + elementContentSize,null);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow ParserException.createForMalformedContainer(\"String element size: \" + elementContentSize,null);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw ParserException.createForMalformedContainer(\"Invalid element type \" + type,null);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 194,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 3413,
        "startLineNumber" : 81,
        "startColumnNumber" : 17,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MasterElement head=masterElementsStack.peek();\n  if (head != null && input.getPosition() >= head.elementEndPosition) {\n    processor.endMasterElement(masterElementsStack.pop().elementId);\n    return true;\n  }\n  if (elementState == ELEMENT_STATE_READ_ID) {\n    long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n    if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n      result=maybeResyncToNextLevel1Element(input);\n    }\n    if (result == C.RESULT_END_OF_INPUT) {\n      return false;\n    }\n    elementId=(int)result;\n    elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n  }\n  if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n    elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n    elementState=ELEMENT_STATE_READ_CONTENT;\n  }\n  @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:    long elementContentPosition=input.getPosition();\n  long elementEndPosition=elementContentPosition + elementContentSize;\nmasterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid integer size: \" + elementContentSize,null);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid float size: \" + elementContentSize,null);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow ParserException.createForMalformedContainer(\"String element size: \" + elementContentSize,null);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw ParserException.createForMalformedContainer(\"Invalid element type \" + type,null);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 306,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3426,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 152,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (true) {\n  MasterElement head=masterElementsStack.peek();\n  if (head != null && input.getPosition() >= head.elementEndPosition) {\n    processor.endMasterElement(masterElementsStack.pop().elementId);\n    return true;\n  }\n  if (elementState == ELEMENT_STATE_READ_ID) {\n    long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n    if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n      result=maybeResyncToNextLevel1Element(input);\n    }\n    if (result == C.RESULT_END_OF_INPUT) {\n      return false;\n    }\n    elementId=(int)result;\n    elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n  }\n  if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n    elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n    elementState=ELEMENT_STATE_READ_CONTENT;\n  }\n  @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:    long elementContentPosition=input.getPosition();\n  long elementEndPosition=elementContentPosition + elementContentSize;\nmasterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid integer size: \" + elementContentSize,null);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid float size: \" + elementContentSize,null);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow ParserException.createForMalformedContainer(\"String element size: \" + elementContentSize,null);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw ParserException.createForMalformedContainer(\"Invalid element type \" + type,null);\n}\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 308,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3481,
        "startLineNumber" : 79,
        "startColumnNumber" : 63,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Assertions.checkStateNotNull(processor);\n  while (true) {\n    MasterElement head=masterElementsStack.peek();\n    if (head != null && input.getPosition() >= head.elementEndPosition) {\n      processor.endMasterElement(masterElementsStack.pop().elementId);\n      return true;\n    }\n    if (elementState == ELEMENT_STATE_READ_ID) {\n      long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n      if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n        result=maybeResyncToNextLevel1Element(input);\n      }\n      if (result == C.RESULT_END_OF_INPUT) {\n        return false;\n      }\n      elementId=(int)result;\n      elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n    }\n    if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n      elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n      elementState=ELEMENT_STATE_READ_CONTENT;\n    }\n    @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:      long elementContentPosition=input.getPosition();\n    long elementEndPosition=elementContentPosition + elementContentSize;\n  masterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid integer size: \" + elementContentSize,null);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid float size: \" + elementContentSize,null);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow ParserException.createForMalformedContainer(\"String element size: \" + elementContentSize,null);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw ParserException.createForMalformedContainer(\"Invalid element type \" + type,null);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3554,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 153,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public boolean read(ExtractorInput input) throws IOException {\n  Assertions.checkStateNotNull(processor);\n  while (true) {\n    MasterElement head=masterElementsStack.peek();\n    if (head != null && input.getPosition() >= head.elementEndPosition) {\n      processor.endMasterElement(masterElementsStack.pop().elementId);\n      return true;\n    }\n    if (elementState == ELEMENT_STATE_READ_ID) {\n      long result=varintReader.readUnsignedVarint(input,true,false,MAX_ID_BYTES);\n      if (result == C.RESULT_MAX_LENGTH_EXCEEDED) {\n        result=maybeResyncToNextLevel1Element(input);\n      }\n      if (result == C.RESULT_END_OF_INPUT) {\n        return false;\n      }\n      elementId=(int)result;\n      elementState=ELEMENT_STATE_READ_CONTENT_SIZE;\n    }\n    if (elementState == ELEMENT_STATE_READ_CONTENT_SIZE) {\n      elementContentSize=varintReader.readUnsignedVarint(input,false,true,MAX_LENGTH_BYTES);\n      elementState=ELEMENT_STATE_READ_CONTENT;\n    }\n    @EbmlProcessor.ElementType int type=processor.getElementType(elementId);\nswitch (type) {\ncase EbmlProcessor.ELEMENT_TYPE_MASTER:      long elementContentPosition=input.getPosition();\n    long elementEndPosition=elementContentPosition + elementContentSize;\n  masterElementsStack.push(new MasterElement(elementId,elementEndPosition));\nprocessor.startMasterElement(elementId,elementContentPosition,elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNSIGNED_INT:if (elementContentSize > MAX_INTEGER_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid integer size: \" + elementContentSize,null);\n}\nprocessor.integerElement(elementId,readInteger(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_FLOAT:if (elementContentSize != VALID_FLOAT32_ELEMENT_SIZE_BYTES && elementContentSize != VALID_FLOAT64_ELEMENT_SIZE_BYTES) {\nthrow ParserException.createForMalformedContainer(\"Invalid float size: \" + elementContentSize,null);\n}\nprocessor.floatElement(elementId,readFloat(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_STRING:if (elementContentSize > Integer.MAX_VALUE) {\nthrow ParserException.createForMalformedContainer(\"String element size: \" + elementContentSize,null);\n}\nprocessor.stringElement(elementId,readString(input,(int)elementContentSize));\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_BINARY:processor.binaryElement(elementId,(int)elementContentSize,input);\nelementState=ELEMENT_STATE_READ_ID;\nreturn true;\ncase EbmlProcessor.ELEMENT_TYPE_UNKNOWN:input.skipFully((int)elementContentSize);\nelementState=ELEMENT_STATE_READ_ID;\nbreak;\ndefault:throw ParserException.createForMalformedContainer(\"Invalid element type \" + type,null);\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 326,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 132,
        "endColumnNumber" : 47
      },
      "nodeContext" : "case EbmlProcessor.ELEMENT_TYPE_STRING:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 132,
    "startColumnNumber" : 13,
    "endLineNumber" : 132,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}