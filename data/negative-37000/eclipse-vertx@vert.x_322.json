{
  "id" : 322,
  "expression" : "new DeploymentOptions()",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/LocalEventBusTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DeploymentOptions()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 703,
      "startColumnNumber" : 35,
      "endLineNumber" : 703,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 703,
        "startColumnNumber" : 35,
        "endLineNumber" : 703,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new DeploymentOptions().setWorker(worker)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 703,
        "startColumnNumber" : 35,
        "endLineNumber" : 703,
        "endColumnNumber" : 108
      },
      "nodeContext" : "new DeploymentOptions().setWorker(worker).setMultiThreaded(multiThreaded)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 703,
        "startColumnNumber" : 4,
        "endLineNumber" : 703,
        "endColumnNumber" : 109
      },
      "nodeContext" : "vertx.deployVerticle(verticle,new DeploymentOptions().setWorker(worker).setMultiThreaded(multiThreaded))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 703,
        "startColumnNumber" : 4,
        "endLineNumber" : 703,
        "endColumnNumber" : 110
      },
      "nodeContext" : "vertx.deployVerticle(verticle,new DeploymentOptions().setWorker(worker).setMultiThreaded(multiThreaded));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1479,
        "startLineNumber" : 662,
        "startColumnNumber" : 87,
        "endLineNumber" : 705,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nclass MyVerticle extends AbstractVerticle {\n    Context ctx;\n    @Override public void start(){\n      ctx=context;\n      if (worker) {\n        if (multiThreaded) {\n          assertTrue(ctx instanceof MultiThreadedWorkerContext);\n        }\n else {\n          assertTrue(ctx instanceof WorkerContext && !(ctx instanceof MultiThreadedWorkerContext));\n        }\n      }\n else {\n        assertTrue(ctx instanceof EventLoopContext);\n      }\n      Thread thr=Thread.currentThread();\n      MessageConsumer<?> reg=vertx.eventBus().consumer(ADDRESS1).handler(msg -> {\n        assertSame(ctx,context);\n        if (!worker) {\n          assertSame(thr,Thread.currentThread());\n        }\n        msg.reply(\"bar\");\n      }\n);\n      reg.completionHandler(ar -> {\n        assertTrue(ar.succeeded());\n        assertSame(ctx,context);\n        if (!worker) {\n          assertSame(thr,Thread.currentThread());\n        }\n        vertx.eventBus().send(ADDRESS1,\"foo\",onSuccess((        Message<Object> reply) -> {\n          assertSame(ctx,context);\n          if (!worker) {\n            assertSame(thr,Thread.currentThread());\n          }\n          assertEquals(\"bar\",reply.body());\n          testComplete();\n        }\n));\n      }\n);\n    }\n  }\n  MyVerticle verticle=new MyVerticle();\n  vertx.deployVerticle(verticle,new DeploymentOptions().setWorker(worker).setMultiThreaded(multiThreaded));\n  await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1564,
        "startLineNumber" : 662,
        "startColumnNumber" : 2,
        "endLineNumber" : 705,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testInVerticle(boolean worker,boolean multiThreaded) throws Exception {\nclass MyVerticle extends AbstractVerticle {\n    Context ctx;\n    @Override public void start(){\n      ctx=context;\n      if (worker) {\n        if (multiThreaded) {\n          assertTrue(ctx instanceof MultiThreadedWorkerContext);\n        }\n else {\n          assertTrue(ctx instanceof WorkerContext && !(ctx instanceof MultiThreadedWorkerContext));\n        }\n      }\n else {\n        assertTrue(ctx instanceof EventLoopContext);\n      }\n      Thread thr=Thread.currentThread();\n      MessageConsumer<?> reg=vertx.eventBus().consumer(ADDRESS1).handler(msg -> {\n        assertSame(ctx,context);\n        if (!worker) {\n          assertSame(thr,Thread.currentThread());\n        }\n        msg.reply(\"bar\");\n      }\n);\n      reg.completionHandler(ar -> {\n        assertTrue(ar.succeeded());\n        assertSame(ctx,context);\n        if (!worker) {\n          assertSame(thr,Thread.currentThread());\n        }\n        vertx.eventBus().send(ADDRESS1,\"foo\",onSuccess((        Message<Object> reply) -> {\n          assertSame(ctx,context);\n          if (!worker) {\n            assertSame(thr,Thread.currentThread());\n          }\n          assertEquals(\"bar\",reply.body());\n          testComplete();\n        }\n));\n      }\n);\n    }\n  }\n  MyVerticle verticle=new MyVerticle();\n  vertx.deployVerticle(verticle,new DeploymentOptions().setWorker(worker).setMultiThreaded(multiThreaded));\n  await();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 703,
        "startColumnNumber" : 4,
        "endLineNumber" : 703,
        "endColumnNumber" : 110
      },
      "nodeContext" : "vertx.deployVerticle(verticle,new DeploymentOptions().setWorker(worker).setMultiThreaded(multiThreaded));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "io.vertx.core.DeploymentOptions"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 703,
    "startColumnNumber" : 35,
    "endLineNumber" : 703,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}