{
  "id" : 152,
  "expression" : "line.charAt(0)",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/helpers/PreferencesMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "line.charAt(0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 99,
      "startColumnNumber" : 32,
      "endLineNumber" : 99,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 99,
        "startColumnNumber" : 32,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "line.charAt(0) == '#'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "line.length() == 0 || line.charAt(0) == '#'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 99,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (line.length() == 0 || line.charAt(0) == '#') continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 538,
        "startLineNumber" : 98,
        "startColumnNumber" : 30,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (line.length() == 0 || line.charAt(0) == '#')   continue;\n  int equals=line.indexOf('=');\n  if (equals != -1) {\n    String key=line.substring(0,equals).trim();\n    String value=line.substring(equals + 1).trim();\n    key=processPlatformSuffix(key,\".linux\",OSUtils.isLinux());\n    key=processPlatformSuffix(key,\".windows\",OSUtils.isWindows());\n    key=processPlatformSuffix(key,\".macosx\",OSUtils.isMacOS());\n    if (key != null)     put(key,value);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String line : lines) {\n  if (line.length() == 0 || line.charAt(0) == '#')   continue;\n  int equals=line.indexOf('=');\n  if (equals != -1) {\n    String key=line.substring(0,equals).trim();\n    String value=line.substring(equals + 1).trim();\n    key=processPlatformSuffix(key,\".linux\",OSUtils.isLinux());\n    key=processPlatformSuffix(key,\".windows\",OSUtils.isWindows());\n    key=processPlatformSuffix(key,\".macosx\",OSUtils.isMacOS());\n    if (key != null)     put(key,value);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 96,
        "startColumnNumber" : 57,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String[] lines=PApplet.loadStrings(input);\n  for (  String line : lines) {\n    if (line.length() == 0 || line.charAt(0) == '#')     continue;\n    int equals=line.indexOf('=');\n    if (equals != -1) {\n      String key=line.substring(0,equals).trim();\n      String value=line.substring(equals + 1).trim();\n      key=processPlatformSuffix(key,\".linux\",OSUtils.isLinux());\n      key=processPlatformSuffix(key,\".windows\",OSUtils.isWindows());\n      key=processPlatformSuffix(key,\".macosx\",OSUtils.isMacOS());\n      if (key != null)       put(key,value);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 115,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parse a property list stream and put key/value pairs into the Map\n * @param input\n * @throws IOException\n */\npublic void load(InputStream input) throws IOException {\n  String[] lines=PApplet.loadStrings(input);\n  for (  String line : lines) {\n    if (line.length() == 0 || line.charAt(0) == '#')     continue;\n    int equals=line.indexOf('=');\n    if (equals != -1) {\n      String key=line.substring(0,equals).trim();\n      String value=line.substring(equals + 1).trim();\n      key=processPlatformSuffix(key,\".linux\",OSUtils.isLinux());\n      key=processPlatformSuffix(key,\".windows\",OSUtils.isWindows());\n      key=processPlatformSuffix(key,\".macosx\",OSUtils.isMacOS());\n      if (key != null)       put(key,value);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 122,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 99,
        "startColumnNumber" : 10,
        "endLineNumber" : 99,
        "endColumnNumber" : 53
      },
      "nodeContext" : "line.length() == 0 || line.charAt(0) == '#'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 99,
    "startColumnNumber" : 32,
    "endLineNumber" : 99,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}