{
  "id" : 324,
  "expression" : "new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper)",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/test/java/com/google/devtools/build/lib/skyframe/ContainingPackageLookupFunctionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 181,
      "startLineNumber" : 132,
      "startColumnNumber" : 8,
      "endLineNumber" : 135,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 17,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 33
      },
      "nodeContext" : "skyFunctions.put(FileStateValue.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 244,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 34
      },
      "nodeContext" : "skyFunctions.put(FileStateValue.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4880,
        "startLineNumber" : 82,
        "startColumnNumber" : 46,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  AnalysisMock analysisMock=AnalysisMock.get();\n  AtomicReference<PathPackageLocator> pkgLocator=new AtomicReference<>(new PathPackageLocator(outputBase,ImmutableList.of(Root.fromPath(rootDirectory)),BazelSkyframeExecutorConstants.BUILD_FILES_BY_PRIORITY));\n  deletedPackages=new AtomicReference<>(ImmutableSet.<PackageIdentifier>of());\n  BlazeDirectories directories=new BlazeDirectories(new ServerDirectories(rootDirectory,outputBase,outputBase),rootDirectory,null,analysisMock.getProductName());\n  ExternalFilesHelper externalFilesHelper=ExternalFilesHelper.createForTesting(pkgLocator,ExternalFileAction.DEPEND_ON_EXTERNAL_PKG_FOR_EXTERNAL_REPO_PATHS,directories);\n  Map<SkyFunctionName,SkyFunction> skyFunctions=new HashMap<>();\n  skyFunctions.put(SkyFunctions.CONTAINING_PACKAGE_LOOKUP,new ContainingPackageLookupFunction());\n  skyFunctions.put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(deletedPackages,CrossRepositoryLabelViolationStrategy.ERROR,BazelSkyframeExecutorConstants.BUILD_FILES_BY_PRIORITY,BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  skyFunctions.put(SkyFunctions.PACKAGE,new PackageFunction(null,null,null,null,null,null,PackageFunction.ActionOnIOExceptionReadingBuildFile.UseOriginalIOException.INSTANCE,PackageFunction.IncrementalityIntent.INCREMENTAL,k -> ThreadStateReceiver.NULL_INSTANCE));\n  skyFunctions.put(SkyFunctions.IGNORED_PACKAGE_PREFIXES,new IgnoredPackagePrefixesFunction(PathFragment.EMPTY_FRAGMENT));\n  skyFunctions.put(FileStateValue.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper));\n  skyFunctions.put(FileValue.FILE,new FileFunction(pkgLocator));\n  skyFunctions.put(SkyFunctions.DIRECTORY_LISTING,new DirectoryListingFunction());\n  skyFunctions.put(SkyFunctions.DIRECTORY_LISTING_STATE,new DirectoryListingStateFunction(externalFilesHelper,new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS)));\n  RuleClassProvider ruleClassProvider=analysisMock.createRuleClassProvider();\n  skyFunctions.put(WorkspaceFileValue.WORKSPACE_FILE,new WorkspaceFileFunction(ruleClassProvider,analysisMock.getPackageFactoryBuilderForTesting(directories).build(ruleClassProvider,fileSystem),directories,null));\n  skyFunctions.put(SkyFunctions.EXTERNAL_PACKAGE,new ExternalPackageFunction(BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  skyFunctions.put(SkyFunctions.LOCAL_REPOSITORY_LOOKUP,new LocalRepositoryLookupFunction(BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  skyFunctions.put(FileSymlinkCycleUniquenessFunction.NAME,new FileSymlinkCycleUniquenessFunction());\n  ImmutableMap<String,RepositoryFunction> repositoryHandlers=ImmutableMap.of(LocalRepositoryRule.NAME,(RepositoryFunction)new LocalRepositoryFunction());\n  skyFunctions.put(SkyFunctions.REPOSITORY_DIRECTORY,new RepositoryDelegatorFunction(repositoryHandlers,null,new AtomicBoolean(true),ImmutableMap::of,directories,ManagedDirectoriesKnowledge.NO_MANAGED_DIRECTORIES,BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  differencer=new SequencedRecordingDifferencer();\n  evaluator=new InMemoryMemoizingEvaluator(skyFunctions,differencer);\n  driver=new SequentialBuildDriver(evaluator);\n  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());\n  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator.get());\n  PrecomputedValue.STARLARK_SEMANTICS.set(differencer,StarlarkSemantics.DEFAULT);\n  RepositoryDelegatorFunction.REPOSITORY_OVERRIDES.set(differencer,ImmutableMap.of());\n  RepositoryDelegatorFunction.DEPENDENCY_FOR_UNCONDITIONAL_FETCHING.set(differencer,RepositoryDelegatorFunction.DONT_FETCH_UNCONDITIONALLY);\n  RepositoryDelegatorFunction.RESOLVED_FILE_INSTEAD_OF_WORKSPACE.set(differencer,Optional.empty());\n  RepositoryDelegatorFunction.ENABLE_BZLMOD.set(differencer,false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 435,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4934,
        "startLineNumber" : 81,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public final void setUp() throws Exception {\n  AnalysisMock analysisMock=AnalysisMock.get();\n  AtomicReference<PathPackageLocator> pkgLocator=new AtomicReference<>(new PathPackageLocator(outputBase,ImmutableList.of(Root.fromPath(rootDirectory)),BazelSkyframeExecutorConstants.BUILD_FILES_BY_PRIORITY));\n  deletedPackages=new AtomicReference<>(ImmutableSet.<PackageIdentifier>of());\n  BlazeDirectories directories=new BlazeDirectories(new ServerDirectories(rootDirectory,outputBase,outputBase),rootDirectory,null,analysisMock.getProductName());\n  ExternalFilesHelper externalFilesHelper=ExternalFilesHelper.createForTesting(pkgLocator,ExternalFileAction.DEPEND_ON_EXTERNAL_PKG_FOR_EXTERNAL_REPO_PATHS,directories);\n  Map<SkyFunctionName,SkyFunction> skyFunctions=new HashMap<>();\n  skyFunctions.put(SkyFunctions.CONTAINING_PACKAGE_LOOKUP,new ContainingPackageLookupFunction());\n  skyFunctions.put(SkyFunctions.PACKAGE_LOOKUP,new PackageLookupFunction(deletedPackages,CrossRepositoryLabelViolationStrategy.ERROR,BazelSkyframeExecutorConstants.BUILD_FILES_BY_PRIORITY,BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  skyFunctions.put(SkyFunctions.PACKAGE,new PackageFunction(null,null,null,null,null,null,PackageFunction.ActionOnIOExceptionReadingBuildFile.UseOriginalIOException.INSTANCE,PackageFunction.IncrementalityIntent.INCREMENTAL,k -> ThreadStateReceiver.NULL_INSTANCE));\n  skyFunctions.put(SkyFunctions.IGNORED_PACKAGE_PREFIXES,new IgnoredPackagePrefixesFunction(PathFragment.EMPTY_FRAGMENT));\n  skyFunctions.put(FileStateValue.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper));\n  skyFunctions.put(FileValue.FILE,new FileFunction(pkgLocator));\n  skyFunctions.put(SkyFunctions.DIRECTORY_LISTING,new DirectoryListingFunction());\n  skyFunctions.put(SkyFunctions.DIRECTORY_LISTING_STATE,new DirectoryListingStateFunction(externalFilesHelper,new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS)));\n  RuleClassProvider ruleClassProvider=analysisMock.createRuleClassProvider();\n  skyFunctions.put(WorkspaceFileValue.WORKSPACE_FILE,new WorkspaceFileFunction(ruleClassProvider,analysisMock.getPackageFactoryBuilderForTesting(directories).build(ruleClassProvider,fileSystem),directories,null));\n  skyFunctions.put(SkyFunctions.EXTERNAL_PACKAGE,new ExternalPackageFunction(BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  skyFunctions.put(SkyFunctions.LOCAL_REPOSITORY_LOOKUP,new LocalRepositoryLookupFunction(BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  skyFunctions.put(FileSymlinkCycleUniquenessFunction.NAME,new FileSymlinkCycleUniquenessFunction());\n  ImmutableMap<String,RepositoryFunction> repositoryHandlers=ImmutableMap.of(LocalRepositoryRule.NAME,(RepositoryFunction)new LocalRepositoryFunction());\n  skyFunctions.put(SkyFunctions.REPOSITORY_DIRECTORY,new RepositoryDelegatorFunction(repositoryHandlers,null,new AtomicBoolean(true),ImmutableMap::of,directories,ManagedDirectoriesKnowledge.NO_MANAGED_DIRECTORIES,BazelSkyframeExecutorConstants.EXTERNAL_PACKAGE_HELPER));\n  differencer=new SequencedRecordingDifferencer();\n  evaluator=new InMemoryMemoizingEvaluator(skyFunctions,differencer);\n  driver=new SequentialBuildDriver(evaluator);\n  PrecomputedValue.BUILD_ID.set(differencer,UUID.randomUUID());\n  PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer,pkgLocator.get());\n  PrecomputedValue.STARLARK_SEMANTICS.set(differencer,StarlarkSemantics.DEFAULT);\n  RepositoryDelegatorFunction.REPOSITORY_OVERRIDES.set(differencer,ImmutableMap.of());\n  RepositoryDelegatorFunction.DEPENDENCY_FOR_UNCONDITIONAL_FETCHING.set(differencer,RepositoryDelegatorFunction.DONT_FETCH_UNCONDITIONALLY);\n  RepositoryDelegatorFunction.RESOLVED_FILE_INSTEAD_OF_WORKSPACE.set(differencer,Optional.empty());\n  RepositoryDelegatorFunction.ENABLE_BZLMOD.set(differencer,false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 444,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 243,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 33
      },
      "nodeContext" : "skyFunctions.put(FileStateValue.FILE_STATE,new FileStateFunction(new AtomicReference<TimestampGranularityMonitor>(),new AtomicReference<>(UnixGlob.DEFAULT_SYSCALLS),externalFilesHelper))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 7,
    "type" : "com.google.devtools.build.lib.skyframe.FileStateFunction"
  } ],
  "positionList" : [ {
    "charLength" : 181,
    "startLineNumber" : 132,
    "startColumnNumber" : 8,
    "endLineNumber" : 135,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}