{
  "id" : 447,
  "expression" : "sb.append(\"* ### About \").append(utilsName)",
  "projectName" : "Blankj@AndroidUtilCode",
  "commitID" : "b0f09e2df62a8b5e40c07016bf0588e3d1eb4151",
  "filePath" : "/utilcode/src/test/java/com/blankj/utilcode/util/TestUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sb.append(\"* ### About \").append(utilsName)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 57,
      "startColumnNumber" : 20,
      "endLineNumber" : 57,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 57,
        "startColumnNumber" : 20,
        "endLineNumber" : 57,
        "endColumnNumber" : 105
      },
      "nodeContext" : "sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 57,
        "startColumnNumber" : 20,
        "endLineNumber" : 57,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 55,
        "startColumnNumber" : 44,
        "endLineNumber" : 58,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n  sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 36,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 55,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (line.contains(\"Utils\")) {\n  String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n  sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n}\n else {\n  sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 54,
        "startColumnNumber" : 40,
        "endLineNumber" : 61,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (line.contains(\"Utils\")) {\n    String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n    sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n  }\n else {\n    sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 871,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (line.contains(\"* ###\")) {\n  if (line.contains(\"Utils\")) {\n    String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n    sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n  }\n else {\n    sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n  }\n}\n else if (line.contains(\": \") && !line.contains(\"[\")) {\n  sb.append(line.substring(0,line.indexOf(':')).trim());\n}\n else if (line.contains(\"* 做\")) {\n  sb.append(\"* **I'm so sorry for that the code is annotated with Chinese.**\");\n}\n else if (line.contains(\"* QQ\") || line.contains(\"* 我的\")) {\n  continue;\n}\n else {\n  sb.append(line);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 108,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 931,
        "startLineNumber" : 53,
        "startColumnNumber" : 34,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (line.contains(\"* ###\")) {\n    if (line.contains(\"Utils\")) {\n      String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n      sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n    }\n else {\n      sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n    }\n  }\n else   if (line.contains(\": \") && !line.contains(\"[\")) {\n    sb.append(line.substring(0,line.indexOf(':')).trim());\n  }\n else   if (line.contains(\"* 做\")) {\n    sb.append(\"* **I'm so sorry for that the code is annotated with Chinese.**\");\n  }\n else   if (line.contains(\"* QQ\") || line.contains(\"* 我的\")) {\n    continue;\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 957,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String line : lines) {\n  if (line.contains(\"* ###\")) {\n    if (line.contains(\"Utils\")) {\n      String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n      sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n    }\n else {\n      sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n    }\n  }\n else   if (line.contains(\": \") && !line.contains(\"[\")) {\n    sb.append(line.substring(0,line.indexOf(':')).trim());\n  }\n else   if (line.contains(\"* 做\")) {\n    sb.append(\"* **I'm so sorry for that the code is annotated with Chinese.**\");\n  }\n else   if (line.contains(\"* QQ\") || line.contains(\"* 我的\")) {\n    continue;\n  }\n else {\n    sb.append(line);\n  }\n  sb.append(LINE_SEP);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 120,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1842,
        "startLineNumber" : 43,
        "startColumnNumber" : 46,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  formatCN();\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  File readmeEng=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder(\"![logo][logo]\" + LINE_SEP + LINE_SEP+ \"[![auc][aucsvg]][auc] [![api][apisvg]][api] [![build][buildsvg]][build] [![Insight][insightsvg]][insight] [![License][licensesvg]][license]\"+ LINE_SEP+ LINE_SEP+ \"## [README of Chinese][readme-cn.md]\"+ LINE_SEP+ LINE_SEP+ \"## API\"+ LINE_SEP+ LINE_SEP);\n  List<String> lines=list.subList(8,list.size());\n  for (  String line : lines) {\n    if (line.contains(\"* ###\")) {\n      if (line.contains(\"Utils\")) {\n        String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n        sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n      }\n else {\n        sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n      }\n    }\n else     if (line.contains(\": \") && !line.contains(\"[\")) {\n      sb.append(line.substring(0,line.indexOf(':')).trim());\n    }\n else     if (line.contains(\"* 做\")) {\n      sb.append(\"* **I'm so sorry for that the code is annotated with Chinese.**\");\n    }\n else     if (line.contains(\"* QQ\") || line.contains(\"* 我的\")) {\n      continue;\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeEng,sb.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1884,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void readme2Eng() throws Exception {\n  formatCN();\n  File readmeCN=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README-CN.md\");\n  File readmeEng=new File(new File(System.getProperty(\"user.dir\")).getAbsolutePath() + FILE_SEP + \"README.md\");\n  List<String> list=FileIOUtils.readFile2List(readmeCN,\"UTF-8\");\n  StringBuilder sb=new StringBuilder(\"![logo][logo]\" + LINE_SEP + LINE_SEP+ \"[![auc][aucsvg]][auc] [![api][apisvg]][api] [![build][buildsvg]][build] [![Insight][insightsvg]][insight] [![License][licensesvg]][license]\"+ LINE_SEP+ LINE_SEP+ \"## [README of Chinese][readme-cn.md]\"+ LINE_SEP+ LINE_SEP+ \"## API\"+ LINE_SEP+ LINE_SEP);\n  List<String> lines=list.subList(8,list.size());\n  for (  String line : lines) {\n    if (line.contains(\"* ###\")) {\n      if (line.contains(\"Utils\")) {\n        String utilsName=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"Utils\"));\n        sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n      }\n else {\n        sb.append(\"* ### About Log→[update_log.md][update_log.md]\");\n      }\n    }\n else     if (line.contains(\": \") && !line.contains(\"[\")) {\n      sb.append(line.substring(0,line.indexOf(':')).trim());\n    }\n else     if (line.contains(\"* 做\")) {\n      sb.append(\"* **I'm so sorry for that the code is annotated with Chinese.**\");\n    }\n else     if (line.contains(\"* QQ\") || line.contains(\"* 我的\")) {\n      continue;\n    }\n else {\n      sb.append(line);\n    }\n    sb.append(LINE_SEP);\n  }\n  FileIOUtils.writeFileFromString(readmeEng,sb.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 57,
        "startColumnNumber" : 20,
        "endLineNumber" : 57,
        "endColumnNumber" : 106
      },
      "nodeContext" : "sb.append(\"* ### About \").append(utilsName).append(line.substring(line.indexOf(\"→\")));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 57,
    "startColumnNumber" : 20,
    "endLineNumber" : 57,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}