{
  "id" : 267,
  "expression" : "\"AES/CFB8/NoPadding\"",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/jenkins/slaves/EncryptedSlaveAgentJnlpFile.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"AES/CFB8/NoPadding\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 100,
      "startColumnNumber" : 44,
      "endLineNumber" : 100,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 100,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Secret.getCipher(\"AES/CFB8/NoPadding\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 100,
        "startColumnNumber" : 23,
        "endLineNumber" : 100,
        "endColumnNumber" : 65
      },
      "nodeContext" : "c=Secret.getCipher(\"AES/CFB8/NoPadding\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 99,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n  c.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv));\n  encrypted=c.doFinal(csos.getBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 99,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n  c.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv));\n  encrypted=c.doFinal(csos.getBytes());\n}\n catch (GeneralSecurityException x) {\n  throw new IOException(x);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1584,
        "startLineNumber" : 76,
        "startColumnNumber" : 56,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final CapturingServletOutputStream csos=new CapturingServletOutputStream();\n  StaplerResponse temp=new ResponseImpl(req.getStapler(),new HttpServletResponseWrapper(res){\n    @Override public ServletOutputStream getOutputStream() throws IOException {\n      return csos;\n    }\n    @Override public PrintWriter getWriter() throws IOException {\n      throw new IllegalStateException();\n    }\n  }\n);\n  view.forward(req,temp);\n  byte[] iv=new byte[128 / 8];\n  new SecureRandom().nextBytes(iv);\n  byte[] jnlpMac;\n  if (it instanceof SlaveComputer) {\n    jnlpMac=Util.fromHexString(((SlaveComputer)it).getJnlpMac());\n  }\n else {\n    jnlpMac=JnlpAgentReceiver.SLAVE_SECRET.mac(slaveName.getBytes(StandardCharsets.UTF_8));\n  }\n  SecretKey key=new SecretKeySpec(jnlpMac,0,128 / 8,\"AES\");\n  byte[] encrypted;\n  try {\n    Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n    c.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv));\n    encrypted=c.doFinal(csos.getBytes());\n  }\n catch (  GeneralSecurityException x) {\n    throw new IOException(x);\n  }\n  res.setContentType(\"application/octet-stream\");\n  res.getOutputStream().write(iv);\n  res.getOutputStream().write(encrypted);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1739,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (\"true\".equals(req.getParameter(\"encrypt\"))) {\n  final CapturingServletOutputStream csos=new CapturingServletOutputStream();\n  StaplerResponse temp=new ResponseImpl(req.getStapler(),new HttpServletResponseWrapper(res){\n    @Override public ServletOutputStream getOutputStream() throws IOException {\n      return csos;\n    }\n    @Override public PrintWriter getWriter() throws IOException {\n      throw new IllegalStateException();\n    }\n  }\n);\n  view.forward(req,temp);\n  byte[] iv=new byte[128 / 8];\n  new SecureRandom().nextBytes(iv);\n  byte[] jnlpMac;\n  if (it instanceof SlaveComputer) {\n    jnlpMac=Util.fromHexString(((SlaveComputer)it).getJnlpMac());\n  }\n else {\n    jnlpMac=JnlpAgentReceiver.SLAVE_SECRET.mac(slaveName.getBytes(StandardCharsets.UTF_8));\n  }\n  SecretKey key=new SecretKeySpec(jnlpMac,0,128 / 8,\"AES\");\n  byte[] encrypted;\n  try {\n    Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n    c.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv));\n    encrypted=c.doFinal(csos.getBytes());\n  }\n catch (  GeneralSecurityException x) {\n    throw new IOException(x);\n  }\n  res.setContentType(\"application/octet-stream\");\n  res.getOutputStream().write(iv);\n  res.getOutputStream().write(encrypted);\n}\n else {\n  it.checkPermission(connectPermission);\n  view.forward(req,res);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1818,
        "startLineNumber" : 74,
        "startColumnNumber" : 130,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RequestDispatcher view=req.getView(it,viewName);\n  if (\"true\".equals(req.getParameter(\"encrypt\"))) {\n    final CapturingServletOutputStream csos=new CapturingServletOutputStream();\n    StaplerResponse temp=new ResponseImpl(req.getStapler(),new HttpServletResponseWrapper(res){\n      @Override public ServletOutputStream getOutputStream() throws IOException {\n        return csos;\n      }\n      @Override public PrintWriter getWriter() throws IOException {\n        throw new IllegalStateException();\n      }\n    }\n);\n    view.forward(req,temp);\n    byte[] iv=new byte[128 / 8];\n    new SecureRandom().nextBytes(iv);\n    byte[] jnlpMac;\n    if (it instanceof SlaveComputer) {\n      jnlpMac=Util.fromHexString(((SlaveComputer)it).getJnlpMac());\n    }\n else {\n      jnlpMac=JnlpAgentReceiver.SLAVE_SECRET.mac(slaveName.getBytes(StandardCharsets.UTF_8));\n    }\n    SecretKey key=new SecretKeySpec(jnlpMac,0,128 / 8,\"AES\");\n    byte[] encrypted;\n    try {\n      Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n      c.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv));\n      encrypted=c.doFinal(csos.getBytes());\n    }\n catch (    GeneralSecurityException x) {\n      throw new IOException(x);\n    }\n    res.setContentType(\"application/octet-stream\");\n    res.getOutputStream().write(iv);\n    res.getOutputStream().write(encrypted);\n  }\n else {\n    it.checkPermission(connectPermission);\n    view.forward(req,res);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 231,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void generateResponse(StaplerRequest req,final StaplerResponse res,Object node) throws IOException, ServletException {\n  RequestDispatcher view=req.getView(it,viewName);\n  if (\"true\".equals(req.getParameter(\"encrypt\"))) {\n    final CapturingServletOutputStream csos=new CapturingServletOutputStream();\n    StaplerResponse temp=new ResponseImpl(req.getStapler(),new HttpServletResponseWrapper(res){\n      @Override public ServletOutputStream getOutputStream() throws IOException {\n        return csos;\n      }\n      @Override public PrintWriter getWriter() throws IOException {\n        throw new IllegalStateException();\n      }\n    }\n);\n    view.forward(req,temp);\n    byte[] iv=new byte[128 / 8];\n    new SecureRandom().nextBytes(iv);\n    byte[] jnlpMac;\n    if (it instanceof SlaveComputer) {\n      jnlpMac=Util.fromHexString(((SlaveComputer)it).getJnlpMac());\n    }\n else {\n      jnlpMac=JnlpAgentReceiver.SLAVE_SECRET.mac(slaveName.getBytes(StandardCharsets.UTF_8));\n    }\n    SecretKey key=new SecretKeySpec(jnlpMac,0,128 / 8,\"AES\");\n    byte[] encrypted;\n    try {\n      Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n      c.init(Cipher.ENCRYPT_MODE,key,new IvParameterSpec(iv));\n      encrypted=c.doFinal(csos.getBytes());\n    }\n catch (    GeneralSecurityException x) {\n      throw new IOException(x);\n    }\n    res.setContentType(\"application/octet-stream\");\n    res.getOutputStream().write(iv);\n    res.getOutputStream().write(encrypted);\n  }\n else {\n    it.checkPermission(connectPermission);\n    view.forward(req,res);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Cipher c=Secret.getCipher(\"AES/CFB8/NoPadding\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 100,
    "startColumnNumber" : 44,
    "endLineNumber" : 100,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}