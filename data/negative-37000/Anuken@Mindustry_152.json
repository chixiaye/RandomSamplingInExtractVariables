{
  "id" : 152,
  "expression" : "sclwidth / 2f",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/editor/MapView.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "sclwidth / 2f",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 263,
      "startColumnNumber" : 33,
      "endLineNumber" : 263,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 263,
        "startColumnNumber" : 23,
        "endLineNumber" : 263,
        "endColumnNumber" : 44
      },
      "nodeContext" : "centerx - sclwidth / 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 256,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Draw.color(Color.gray);\n  image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n  image.draw();\n  Lines.stroke(3f);\n  Draw.color(Pal.accent);\n  Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n  Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n  Draw.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 256,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (grid) {\n  Draw.color(Color.gray);\n  image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n  image.draw();\n  Lines.stroke(3f);\n  Draw.color(Pal.accent);\n  Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n  Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n  Draw.reset();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3310,
        "startLineNumber" : 236,
        "startColumnNumber" : 22,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float ratio=1f / ((float)editor.width() / editor.height());\n  float size=Math.min(width,height);\n  float sclwidth=size * zoom;\n  float sclheight=size * zoom * ratio;\n  float centerx=x + width / 2 + offsetx * zoom;\n  float centery=y + height / 2 + offsety * zoom;\n  image.setImageSize(editor.width(),editor.height());\n  if (!ScissorStack.push(rect.set(x,y + Core.scene.marginBottom,width,height))) {\n    return;\n  }\n  Draw.color(Pal.remove);\n  Lines.stroke(2f);\n  Lines.rect(centerx - sclwidth / 2 - 1,centery - sclheight / 2 - 1,sclwidth + 2,sclheight + 2);\n  editor.renderer.draw(centerx - sclwidth / 2,centery - sclheight / 2 + Core.scene.marginBottom,sclwidth,sclheight);\n  Draw.reset();\n  if (grid) {\n    Draw.color(Color.gray);\n    image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n    image.draw();\n    Lines.stroke(3f);\n    Draw.color(Pal.accent);\n    Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n    Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n    Draw.reset();\n  }\n  int index=0;\n  for (int i=0; i < MapEditor.brushSizes.length; i++) {\n    if (editor.brushSize == MapEditor.brushSizes[i]) {\n      index=i;\n      break;\n    }\n  }\n  float scaling=zoom * Math.min(width,height) / editor.width();\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(2f));\n  if ((!editor.drawBlock.isMultiblock() || tool == EditorTool.eraser) && tool != EditorTool.fill) {\n    if (tool == EditorTool.line && drawing) {\n      Vec2 v1=unproject(startx,starty).add(x,y);\n      float sx=v1.x, sy=v1.y;\n      Vec2 v2=unproject(lastx,lasty).add(x,y);\n      Lines.poly(brushPolygons[index],sx,sy,scaling);\n      Lines.poly(brushPolygons[index],v2.x,v2.y,scaling);\n    }\n    if ((tool.edit || (tool == EditorTool.line && !drawing)) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      if (tool == EditorTool.pencil && tool.mode == 1) {\n        Lines.square(v.x + scaling / 2f,v.y + scaling / 2f,scaling * (editor.brushSize + 0.5f));\n      }\n else {\n        Lines.poly(brushPolygons[index],v.x,v.y,scaling);\n      }\n    }\n  }\n else {\n    if ((tool.edit || tool == EditorTool.line) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      float offset=(editor.drawBlock.size % 2 == 0 ? scaling / 2f : 0f);\n      Lines.square(v.x + scaling / 2f + offset,v.y + scaling / 2f + offset,scaling * editor.drawBlock.size / 2f);\n    }\n  }\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(3f));\n  Lines.rect(x,y,width,height);\n  Draw.reset();\n  ScissorStack.pop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 626,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3342,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(){\n  float ratio=1f / ((float)editor.width() / editor.height());\n  float size=Math.min(width,height);\n  float sclwidth=size * zoom;\n  float sclheight=size * zoom * ratio;\n  float centerx=x + width / 2 + offsetx * zoom;\n  float centery=y + height / 2 + offsety * zoom;\n  image.setImageSize(editor.width(),editor.height());\n  if (!ScissorStack.push(rect.set(x,y + Core.scene.marginBottom,width,height))) {\n    return;\n  }\n  Draw.color(Pal.remove);\n  Lines.stroke(2f);\n  Lines.rect(centerx - sclwidth / 2 - 1,centery - sclheight / 2 - 1,sclwidth + 2,sclheight + 2);\n  editor.renderer.draw(centerx - sclwidth / 2,centery - sclheight / 2 + Core.scene.marginBottom,sclwidth,sclheight);\n  Draw.reset();\n  if (grid) {\n    Draw.color(Color.gray);\n    image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n    image.draw();\n    Lines.stroke(3f);\n    Draw.color(Pal.accent);\n    Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n    Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n    Draw.reset();\n  }\n  int index=0;\n  for (int i=0; i < MapEditor.brushSizes.length; i++) {\n    if (editor.brushSize == MapEditor.brushSizes[i]) {\n      index=i;\n      break;\n    }\n  }\n  float scaling=zoom * Math.min(width,height) / editor.width();\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(2f));\n  if ((!editor.drawBlock.isMultiblock() || tool == EditorTool.eraser) && tool != EditorTool.fill) {\n    if (tool == EditorTool.line && drawing) {\n      Vec2 v1=unproject(startx,starty).add(x,y);\n      float sx=v1.x, sy=v1.y;\n      Vec2 v2=unproject(lastx,lasty).add(x,y);\n      Lines.poly(brushPolygons[index],sx,sy,scaling);\n      Lines.poly(brushPolygons[index],v2.x,v2.y,scaling);\n    }\n    if ((tool.edit || (tool == EditorTool.line && !drawing)) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      if (tool == EditorTool.pencil && tool.mode == 1) {\n        Lines.square(v.x + scaling / 2f,v.y + scaling / 2f,scaling * (editor.brushSize + 0.5f));\n      }\n else {\n        Lines.poly(brushPolygons[index],v.x,v.y,scaling);\n      }\n    }\n  }\n else {\n    if ((tool.edit || tool == EditorTool.line) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      float offset=(editor.drawBlock.size % 2 == 0 ? scaling / 2f : 0f);\n      Lines.square(v.x + scaling / 2f + offset,v.y + scaling / 2f + offset,scaling * editor.drawBlock.size / 2f);\n    }\n  }\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(3f));\n  Lines.rect(x,y,width,height);\n  Draw.reset();\n  ScissorStack.pop();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 632,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "float"
  }, {
    "nodeContext" : "sclwidth / 2f",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 263,
      "startColumnNumber" : 65,
      "endLineNumber" : 263,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 263,
        "startColumnNumber" : 55,
        "endLineNumber" : 263,
        "endColumnNumber" : 76
      },
      "nodeContext" : "centerx + sclwidth / 2f",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 256,
        "startColumnNumber" : 16,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Draw.color(Color.gray);\n  image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n  image.draw();\n  Lines.stroke(3f);\n  Draw.color(Pal.accent);\n  Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n  Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n  Draw.reset();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 256,
        "startColumnNumber" : 8,
        "endLineNumber" : 267,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (grid) {\n  Draw.color(Color.gray);\n  image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n  image.draw();\n  Lines.stroke(3f);\n  Draw.color(Pal.accent);\n  Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n  Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n  Draw.reset();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3310,
        "startLineNumber" : 236,
        "startColumnNumber" : 22,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float ratio=1f / ((float)editor.width() / editor.height());\n  float size=Math.min(width,height);\n  float sclwidth=size * zoom;\n  float sclheight=size * zoom * ratio;\n  float centerx=x + width / 2 + offsetx * zoom;\n  float centery=y + height / 2 + offsety * zoom;\n  image.setImageSize(editor.width(),editor.height());\n  if (!ScissorStack.push(rect.set(x,y + Core.scene.marginBottom,width,height))) {\n    return;\n  }\n  Draw.color(Pal.remove);\n  Lines.stroke(2f);\n  Lines.rect(centerx - sclwidth / 2 - 1,centery - sclheight / 2 - 1,sclwidth + 2,sclheight + 2);\n  editor.renderer.draw(centerx - sclwidth / 2,centery - sclheight / 2 + Core.scene.marginBottom,sclwidth,sclheight);\n  Draw.reset();\n  if (grid) {\n    Draw.color(Color.gray);\n    image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n    image.draw();\n    Lines.stroke(3f);\n    Draw.color(Pal.accent);\n    Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n    Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n    Draw.reset();\n  }\n  int index=0;\n  for (int i=0; i < MapEditor.brushSizes.length; i++) {\n    if (editor.brushSize == MapEditor.brushSizes[i]) {\n      index=i;\n      break;\n    }\n  }\n  float scaling=zoom * Math.min(width,height) / editor.width();\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(2f));\n  if ((!editor.drawBlock.isMultiblock() || tool == EditorTool.eraser) && tool != EditorTool.fill) {\n    if (tool == EditorTool.line && drawing) {\n      Vec2 v1=unproject(startx,starty).add(x,y);\n      float sx=v1.x, sy=v1.y;\n      Vec2 v2=unproject(lastx,lasty).add(x,y);\n      Lines.poly(brushPolygons[index],sx,sy,scaling);\n      Lines.poly(brushPolygons[index],v2.x,v2.y,scaling);\n    }\n    if ((tool.edit || (tool == EditorTool.line && !drawing)) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      if (tool == EditorTool.pencil && tool.mode == 1) {\n        Lines.square(v.x + scaling / 2f,v.y + scaling / 2f,scaling * (editor.brushSize + 0.5f));\n      }\n else {\n        Lines.poly(brushPolygons[index],v.x,v.y,scaling);\n      }\n    }\n  }\n else {\n    if ((tool.edit || tool == EditorTool.line) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      float offset=(editor.drawBlock.size % 2 == 0 ? scaling / 2f : 0f);\n      Lines.square(v.x + scaling / 2f + offset,v.y + scaling / 2f + offset,scaling * editor.drawBlock.size / 2f);\n    }\n  }\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(3f));\n  Lines.rect(x,y,width,height);\n  Draw.reset();\n  ScissorStack.pop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 626,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3342,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(){\n  float ratio=1f / ((float)editor.width() / editor.height());\n  float size=Math.min(width,height);\n  float sclwidth=size * zoom;\n  float sclheight=size * zoom * ratio;\n  float centerx=x + width / 2 + offsetx * zoom;\n  float centery=y + height / 2 + offsety * zoom;\n  image.setImageSize(editor.width(),editor.height());\n  if (!ScissorStack.push(rect.set(x,y + Core.scene.marginBottom,width,height))) {\n    return;\n  }\n  Draw.color(Pal.remove);\n  Lines.stroke(2f);\n  Lines.rect(centerx - sclwidth / 2 - 1,centery - sclheight / 2 - 1,sclwidth + 2,sclheight + 2);\n  editor.renderer.draw(centerx - sclwidth / 2,centery - sclheight / 2 + Core.scene.marginBottom,sclwidth,sclheight);\n  Draw.reset();\n  if (grid) {\n    Draw.color(Color.gray);\n    image.setBounds(centerx - sclwidth / 2,centery - sclheight / 2,sclwidth,sclheight);\n    image.draw();\n    Lines.stroke(3f);\n    Draw.color(Pal.accent);\n    Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n    Lines.line(centerx,centery - sclheight / 2f,centerx,centery + sclheight / 2f);\n    Draw.reset();\n  }\n  int index=0;\n  for (int i=0; i < MapEditor.brushSizes.length; i++) {\n    if (editor.brushSize == MapEditor.brushSizes[i]) {\n      index=i;\n      break;\n    }\n  }\n  float scaling=zoom * Math.min(width,height) / editor.width();\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(2f));\n  if ((!editor.drawBlock.isMultiblock() || tool == EditorTool.eraser) && tool != EditorTool.fill) {\n    if (tool == EditorTool.line && drawing) {\n      Vec2 v1=unproject(startx,starty).add(x,y);\n      float sx=v1.x, sy=v1.y;\n      Vec2 v2=unproject(lastx,lasty).add(x,y);\n      Lines.poly(brushPolygons[index],sx,sy,scaling);\n      Lines.poly(brushPolygons[index],v2.x,v2.y,scaling);\n    }\n    if ((tool.edit || (tool == EditorTool.line && !drawing)) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      if (tool == EditorTool.pencil && tool.mode == 1) {\n        Lines.square(v.x + scaling / 2f,v.y + scaling / 2f,scaling * (editor.brushSize + 0.5f));\n      }\n else {\n        Lines.poly(brushPolygons[index],v.x,v.y,scaling);\n      }\n    }\n  }\n else {\n    if ((tool.edit || tool == EditorTool.line) && (!mobile || drawing)) {\n      Point2 p=project(mousex,mousey);\n      Vec2 v=unproject(p.x,p.y).add(x,y);\n      float offset=(editor.drawBlock.size % 2 == 0 ? scaling / 2f : 0f);\n      Lines.square(v.x + scaling / 2f + offset,v.y + scaling / 2f + offset,scaling * editor.drawBlock.size / 2f);\n    }\n  }\n  Draw.color(Pal.accent);\n  Lines.stroke(Scl.scl(3f));\n  Lines.rect(x,y,width,height);\n  Draw.reset();\n  ScissorStack.pop();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 632,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 263,
        "startColumnNumber" : 12,
        "endLineNumber" : 263,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Lines.line(centerx - sclwidth / 2f,centery,centerx + sclwidth / 2f,centery);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 263,
    "startColumnNumber" : 33,
    "endLineNumber" : 263,
    "endColumnNumber" : 44
  }, {
    "charLength" : 11,
    "startLineNumber" : 263,
    "startColumnNumber" : 65,
    "endLineNumber" : 263,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}