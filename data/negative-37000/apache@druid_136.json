{
  "id" : 136,
  "expression" : "rand.nextFloat()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/filter/BloomKFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rand.nextFloat()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 320,
      "startColumnNumber" : 16,
      "endLineNumber" : 320,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 32
      },
      "nodeContext" : "randVal=rand.nextFloat()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 33
      },
      "nodeContext" : "randVal=rand.nextFloat();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 319,
        "startColumnNumber" : 36,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  randVal=rand.nextFloat();\n  BloomKFilter.addFloat(buffer,randVal);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 319,
        "startColumnNumber" : 4,
        "endLineNumber" : 322,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < COUNT; i++) {\n  randVal=rand.nextFloat();\n  BloomKFilter.addFloat(buffer,randVal);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2265,
        "startLineNumber" : 277,
        "startColumnNumber" : 2,
        "endLineNumber" : 331,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BloomKFilter bf=new BloomKFilter(10000);\n  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();\n  BloomKFilter.serialize(bytesOut,bf);\n  byte[] bfBytes=bytesOut.toByteArray();\n  ByteBuffer buffer=ByteBuffer.wrap(bfBytes);\n  float val=Float.NEGATIVE_INFINITY;\n  float val1=1.1f;\n  float val2=2.2f;\n  float val3=Float.POSITIVE_INFINITY;\n  BloomKFilter.addFloat(buffer,val);\n  BloomKFilter rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertFalse(rehydrated.testFloat(val1));\n  Assert.assertFalse(rehydrated.testFloat(val2));\n  Assert.assertFalse(rehydrated.testFloat(val3));\n  BloomKFilter.addFloat(buffer,val1);\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertTrue(rehydrated.testFloat(val1));\n  Assert.assertFalse(rehydrated.testFloat(val2));\n  Assert.assertFalse(rehydrated.testFloat(val3));\n  BloomKFilter.addFloat(buffer,val2);\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertTrue(rehydrated.testFloat(val1));\n  Assert.assertTrue(rehydrated.testFloat(val2));\n  Assert.assertFalse(rehydrated.testFloat(val3));\n  BloomKFilter.addFloat(buffer,val3);\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertTrue(rehydrated.testFloat(val1));\n  Assert.assertTrue(rehydrated.testFloat(val2));\n  Assert.assertTrue(rehydrated.testFloat(val3));\n  float randVal=0;\n  for (int i=0; i < COUNT; i++) {\n    randVal=rand.nextFloat();\n    BloomKFilter.addFloat(buffer,randVal);\n  }\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  Assert.assertTrue(rehydrated.testFloat(randVal));\n  Assert.assertFalse(rehydrated.testFloat(-120.2f));\n  Assert.assertEquals(7808,rehydrated.sizeInBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2330,
        "startLineNumber" : 275,
        "startColumnNumber" : 2,
        "endLineNumber" : 331,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBloomKFilterFloat() throws IOException {\n  BloomKFilter bf=new BloomKFilter(10000);\n  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();\n  BloomKFilter.serialize(bytesOut,bf);\n  byte[] bfBytes=bytesOut.toByteArray();\n  ByteBuffer buffer=ByteBuffer.wrap(bfBytes);\n  float val=Float.NEGATIVE_INFINITY;\n  float val1=1.1f;\n  float val2=2.2f;\n  float val3=Float.POSITIVE_INFINITY;\n  BloomKFilter.addFloat(buffer,val);\n  BloomKFilter rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertFalse(rehydrated.testFloat(val1));\n  Assert.assertFalse(rehydrated.testFloat(val2));\n  Assert.assertFalse(rehydrated.testFloat(val3));\n  BloomKFilter.addFloat(buffer,val1);\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertTrue(rehydrated.testFloat(val1));\n  Assert.assertFalse(rehydrated.testFloat(val2));\n  Assert.assertFalse(rehydrated.testFloat(val3));\n  BloomKFilter.addFloat(buffer,val2);\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertTrue(rehydrated.testFloat(val1));\n  Assert.assertTrue(rehydrated.testFloat(val2));\n  Assert.assertFalse(rehydrated.testFloat(val3));\n  BloomKFilter.addFloat(buffer,val3);\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  buffer.position(0);\n  Assert.assertTrue(rehydrated.testFloat(val));\n  Assert.assertTrue(rehydrated.testFloat(val1));\n  Assert.assertTrue(rehydrated.testFloat(val2));\n  Assert.assertTrue(rehydrated.testFloat(val3));\n  float randVal=0;\n  for (int i=0; i < COUNT; i++) {\n    randVal=rand.nextFloat();\n    BloomKFilter.addFloat(buffer,randVal);\n  }\n  rehydrated=BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n  Assert.assertTrue(rehydrated.testFloat(randVal));\n  Assert.assertFalse(rehydrated.testFloat(-120.2f));\n  Assert.assertEquals(7808,rehydrated.sizeInBytes());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 352,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 320,
        "startColumnNumber" : 6,
        "endLineNumber" : 320,
        "endColumnNumber" : 33
      },
      "nodeContext" : "randVal=rand.nextFloat();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 320,
    "startColumnNumber" : 16,
    "endLineNumber" : 320,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}