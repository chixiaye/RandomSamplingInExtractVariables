{
  "id" : 381,
  "expression" : "(char)(0x0180 + i)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/hash/FarmHashFingerprint64Test.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(char)(0x0180 + i)",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 62,
      "startColumnNumber" : 20,
      "endLineNumber" : 62,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 39
      },
      "nodeContext" : "charsA[i]=(char)(0x0180 + i)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "charsA[i]=(char)(0x0180 + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 60,
        "startColumnNumber" : 13,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  charsA[i]=(char)(0x0180 + i);\n  charsB[i]=(char)(0x0280 + i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 57,
        "startColumnNumber" : 6,
        "endLineNumber" : 64,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i < 100) {\n  charsA[i]='a';\n  charsB[i]='a';\n}\n else {\n  charsA[i]=(char)(0x0180 + i);\n  charsB[i]=(char)(0x0280 + i);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 56,
        "startColumnNumber" : 44,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i < 100) {\n    charsA[i]='a';\n    charsB[i]='a';\n  }\n else {\n    charsA[i]=(char)(0x0180 + i);\n    charsB[i]=(char)(0x0280 + i);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < charsA.length; i++) {\n  if (i < 100) {\n    charsA[i]='a';\n    charsB[i]='a';\n  }\n else {\n    charsA[i]=(char)(0x0180 + i);\n    charsB[i]=(char)(0x0280 + i);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 54,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 52,
        "startColumnNumber" : 25,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  char[] charsA=new char[128];\n  char[] charsB=new char[128];\n  for (int i=0; i < charsA.length; i++) {\n    if (i < 100) {\n      charsA[i]='a';\n      charsB[i]='a';\n    }\n else {\n      charsA[i]=(char)(0x0180 + i);\n      charsB[i]=(char)(0x0280 + i);\n    }\n  }\n  String stringA=new String(charsA);\n  String stringB=new String(charsB);\n  assertThat(stringA).isNotEqualTo(stringB);\n  assertThat(HASH_FN.hashUnencodedChars(stringA)).isNotEqualTo(HASH_FN.hashUnencodedChars(stringB));\n  assertThat(fingerprint(stringA.getBytes(UTF_8))).isNotEqualTo(fingerprint(stringB.getBytes(UTF_8)));\n  assertEquals(fingerprint(stringA.getBytes(ISO_8859_1)),fingerprint(stringB.getBytes(ISO_8859_1)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1071,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testUtf8(){\n  char[] charsA=new char[128];\n  char[] charsB=new char[128];\n  for (int i=0; i < charsA.length; i++) {\n    if (i < 100) {\n      charsA[i]='a';\n      charsB[i]='a';\n    }\n else {\n      charsA[i]=(char)(0x0180 + i);\n      charsB[i]=(char)(0x0280 + i);\n    }\n  }\n  String stringA=new String(charsA);\n  String stringB=new String(charsB);\n  assertThat(stringA).isNotEqualTo(stringB);\n  assertThat(HASH_FN.hashUnencodedChars(stringA)).isNotEqualTo(HASH_FN.hashUnencodedChars(stringB));\n  assertThat(fingerprint(stringA.getBytes(UTF_8))).isNotEqualTo(fingerprint(stringB.getBytes(UTF_8)));\n  assertEquals(fingerprint(stringA.getBytes(ISO_8859_1)),fingerprint(stringB.getBytes(ISO_8859_1)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 40
      },
      "nodeContext" : "charsA[i]=(char)(0x0180 + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 62,
    "startColumnNumber" : 20,
    "endLineNumber" : 62,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}