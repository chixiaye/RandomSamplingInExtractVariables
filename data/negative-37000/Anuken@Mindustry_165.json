{
  "id" : 165,
  "expression" : "zone.name",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/tests/src/test/java/SectorTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "zone.name",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 38,
      "startColumnNumber" : 32,
      "endLineNumber" : 38,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 38,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 14
      },
      "nodeContext" : "dynamicTest(zone.name,() -> {\n  logic.reset();\n  try {\n    world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n  }\n catch (  SaveException e) {\n    e.printStackTrace();\n    return;\n  }\n  zone.rules.get(state.rules);\n  ObjectSet<Item> resources=new ObjectSet<>();\n  boolean hasSpawnPoint=false;\n  for (  Tile tile : world.tiles) {\n    if (tile.drop() != null) {\n      resources.add(tile.drop());\n    }\n    if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n      hasSpawnPoint=true;\n    }\n  }\n  Seq<SpawnGroup> spawns=state.rules.spawns;\n  int bossWave=0;\n  if (state.rules.winWave > 0) {\n    bossWave=state.rules.winWave;\n  }\n else {\n    outer:     for (int i=1; i <= 1000; i++) {\n      for (      SpawnGroup spawn : spawns) {\n        if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n          bossWave=i;\n          break outer;\n        }\n      }\n    }\n  }\n  if (state.rules.attackMode) {\n    bossWave=100;\n  }\n else {\n    assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n  }\n  for (int i=1; i <= bossWave; i++) {\n    int total=0;\n    for (    SpawnGroup spawn : spawns) {\n      total+=spawn.getSpawned(i);\n    }\n    assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n  }\n  assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n  assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n  assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n  assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 334,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 2882,
        "startLineNumber" : 38,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 15
      },
      "nodeContext" : "out.add(dynamicTest(zone.name,() -> {\n  logic.reset();\n  try {\n    world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n  }\n catch (  SaveException e) {\n    e.printStackTrace();\n    return;\n  }\n  zone.rules.get(state.rules);\n  ObjectSet<Item> resources=new ObjectSet<>();\n  boolean hasSpawnPoint=false;\n  for (  Tile tile : world.tiles) {\n    if (tile.drop() != null) {\n      resources.add(tile.drop());\n    }\n    if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n      hasSpawnPoint=true;\n    }\n  }\n  Seq<SpawnGroup> spawns=state.rules.spawns;\n  int bossWave=0;\n  if (state.rules.winWave > 0) {\n    bossWave=state.rules.winWave;\n  }\n else {\n    outer:     for (int i=1; i <= 1000; i++) {\n      for (      SpawnGroup spawn : spawns) {\n        if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n          bossWave=i;\n          break outer;\n        }\n      }\n    }\n  }\n  if (state.rules.attackMode) {\n    bossWave=100;\n  }\n else {\n    assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n  }\n  for (int i=1; i <= bossWave; i++) {\n    int total=0;\n    for (    SpawnGroup spawn : spawns) {\n      total+=spawn.getSpawned(i);\n    }\n    assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n  }\n  assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n  assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n  assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n  assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n}\n))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 337,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2883,
        "startLineNumber" : 38,
        "startColumnNumber" : 12,
        "endLineNumber" : 100,
        "endColumnNumber" : 16
      },
      "nodeContext" : "out.add(dynamicTest(zone.name,() -> {\n  logic.reset();\n  try {\n    world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n  }\n catch (  SaveException e) {\n    e.printStackTrace();\n    return;\n  }\n  zone.rules.get(state.rules);\n  ObjectSet<Item> resources=new ObjectSet<>();\n  boolean hasSpawnPoint=false;\n  for (  Tile tile : world.tiles) {\n    if (tile.drop() != null) {\n      resources.add(tile.drop());\n    }\n    if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n      hasSpawnPoint=true;\n    }\n  }\n  Seq<SpawnGroup> spawns=state.rules.spawns;\n  int bossWave=0;\n  if (state.rules.winWave > 0) {\n    bossWave=state.rules.winWave;\n  }\n else {\n    outer:     for (int i=1; i <= 1000; i++) {\n      for (      SpawnGroup spawn : spawns) {\n        if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n          bossWave=i;\n          break outer;\n        }\n      }\n    }\n  }\n  if (state.rules.attackMode) {\n    bossWave=100;\n  }\n else {\n    assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n  }\n  for (int i=1; i <= bossWave; i++) {\n    int total=0;\n    for (    SpawnGroup spawn : spawns) {\n      total+=spawn.getSpawned(i);\n    }\n    assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n  }\n  assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n  assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n  assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n  assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n}\n));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 338,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2908,
        "startLineNumber" : 36,
        "startColumnNumber" : 50,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  out.add(dynamicTest(zone.name,() -> {\n    logic.reset();\n    try {\n      world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n    }\n catch (    SaveException e) {\n      e.printStackTrace();\n      return;\n    }\n    zone.rules.get(state.rules);\n    ObjectSet<Item> resources=new ObjectSet<>();\n    boolean hasSpawnPoint=false;\n    for (    Tile tile : world.tiles) {\n      if (tile.drop() != null) {\n        resources.add(tile.drop());\n      }\n      if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n        hasSpawnPoint=true;\n      }\n    }\n    Seq<SpawnGroup> spawns=state.rules.spawns;\n    int bossWave=0;\n    if (state.rules.winWave > 0) {\n      bossWave=state.rules.winWave;\n    }\n else {\n      outer:       for (int i=1; i <= 1000; i++) {\n        for (        SpawnGroup spawn : spawns) {\n          if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n            bossWave=i;\n            break outer;\n          }\n        }\n      }\n    }\n    if (state.rules.attackMode) {\n      bossWave=100;\n    }\n else {\n      assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n    }\n    for (int i=1; i <= bossWave; i++) {\n      int total=0;\n      for (      SpawnGroup spawn : spawns) {\n        total+=spawn.getSpawned(i);\n      }\n      assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n    }\n    assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n    assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n    assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n    assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n  }\n));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 339,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2950,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (SectorPreset zone : content.sectors()) {\n  out.add(dynamicTest(zone.name,() -> {\n    logic.reset();\n    try {\n      world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n    }\n catch (    SaveException e) {\n      e.printStackTrace();\n      return;\n    }\n    zone.rules.get(state.rules);\n    ObjectSet<Item> resources=new ObjectSet<>();\n    boolean hasSpawnPoint=false;\n    for (    Tile tile : world.tiles) {\n      if (tile.drop() != null) {\n        resources.add(tile.drop());\n      }\n      if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n        hasSpawnPoint=true;\n      }\n    }\n    Seq<SpawnGroup> spawns=state.rules.spawns;\n    int bossWave=0;\n    if (state.rules.winWave > 0) {\n      bossWave=state.rules.winWave;\n    }\n else {\n      outer:       for (int i=1; i <= 1000; i++) {\n        for (        SpawnGroup spawn : spawns) {\n          if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n            bossWave=i;\n            break outer;\n          }\n        }\n      }\n    }\n    if (state.rules.attackMode) {\n      bossWave=100;\n    }\n else {\n      assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n    }\n    for (int i=1; i <= bossWave; i++) {\n      int total=0;\n      for (      SpawnGroup spawn : spawns) {\n        total+=spawn.getSpawned(i);\n      }\n      assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n    }\n    assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n    assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n    assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n    assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n  }\n));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 347,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3106,
        "startLineNumber" : 32,
        "startColumnNumber" : 36,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Seq<DynamicTest> out=new Seq<>();\n  if (world == null)   world=new World();\n  for (  SectorPreset zone : content.sectors()) {\n    out.add(dynamicTest(zone.name,() -> {\n      logic.reset();\n      try {\n        world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n      }\n catch (      SaveException e) {\n        e.printStackTrace();\n        return;\n      }\n      zone.rules.get(state.rules);\n      ObjectSet<Item> resources=new ObjectSet<>();\n      boolean hasSpawnPoint=false;\n      for (      Tile tile : world.tiles) {\n        if (tile.drop() != null) {\n          resources.add(tile.drop());\n        }\n        if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n          hasSpawnPoint=true;\n        }\n      }\n      Seq<SpawnGroup> spawns=state.rules.spawns;\n      int bossWave=0;\n      if (state.rules.winWave > 0) {\n        bossWave=state.rules.winWave;\n      }\n else {\n        outer:         for (int i=1; i <= 1000; i++) {\n          for (          SpawnGroup spawn : spawns) {\n            if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n              bossWave=i;\n              break outer;\n            }\n          }\n        }\n      }\n      if (state.rules.attackMode) {\n        bossWave=100;\n      }\n else {\n        assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n      }\n      for (int i=1; i <= bossWave; i++) {\n        int total=0;\n        for (        SpawnGroup spawn : spawns) {\n          total+=spawn.getSpawned(i);\n        }\n        assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n      }\n      assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n      assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n      assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n      assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n    }\n));\n  }\n  return out.toArray(DynamicTest.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3155,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@TestFactory DynamicTest[] testZoneValidity(){\n  Seq<DynamicTest> out=new Seq<>();\n  if (world == null)   world=new World();\n  for (  SectorPreset zone : content.sectors()) {\n    out.add(dynamicTest(zone.name,() -> {\n      logic.reset();\n      try {\n        world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n      }\n catch (      SaveException e) {\n        e.printStackTrace();\n        return;\n      }\n      zone.rules.get(state.rules);\n      ObjectSet<Item> resources=new ObjectSet<>();\n      boolean hasSpawnPoint=false;\n      for (      Tile tile : world.tiles) {\n        if (tile.drop() != null) {\n          resources.add(tile.drop());\n        }\n        if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n          hasSpawnPoint=true;\n        }\n      }\n      Seq<SpawnGroup> spawns=state.rules.spawns;\n      int bossWave=0;\n      if (state.rules.winWave > 0) {\n        bossWave=state.rules.winWave;\n      }\n else {\n        outer:         for (int i=1; i <= 1000; i++) {\n          for (          SpawnGroup spawn : spawns) {\n            if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n              bossWave=i;\n              break outer;\n            }\n          }\n        }\n      }\n      if (state.rules.attackMode) {\n        bossWave=100;\n      }\n else {\n        assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n      }\n      for (int i=1; i <= bossWave; i++) {\n        int total=0;\n        for (        SpawnGroup spawn : spawns) {\n          total+=spawn.getSpawned(i);\n        }\n        assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n      }\n      assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n      assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n      assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n      assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n    }\n));\n  }\n  return out.toArray(DynamicTest.class);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 385,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 2873,
        "startLineNumber" : 38,
        "startColumnNumber" : 20,
        "endLineNumber" : 100,
        "endColumnNumber" : 14
      },
      "nodeContext" : "dynamicTest(zone.name,() -> {\n  logic.reset();\n  try {\n    world.loadGenerator(zone.generator.map.width,zone.generator.map.height,zone.generator::generate);\n  }\n catch (  SaveException e) {\n    e.printStackTrace();\n    return;\n  }\n  zone.rules.get(state.rules);\n  ObjectSet<Item> resources=new ObjectSet<>();\n  boolean hasSpawnPoint=false;\n  for (  Tile tile : world.tiles) {\n    if (tile.drop() != null) {\n      resources.add(tile.drop());\n    }\n    if (tile.block() instanceof CoreBlock && tile.team() == state.rules.defaultTeam) {\n      hasSpawnPoint=true;\n    }\n  }\n  Seq<SpawnGroup> spawns=state.rules.spawns;\n  int bossWave=0;\n  if (state.rules.winWave > 0) {\n    bossWave=state.rules.winWave;\n  }\n else {\n    outer:     for (int i=1; i <= 1000; i++) {\n      for (      SpawnGroup spawn : spawns) {\n        if (spawn.effect == StatusEffects.boss && spawn.getSpawned(i) > 0) {\n          bossWave=i;\n          break outer;\n        }\n      }\n    }\n  }\n  if (state.rules.attackMode) {\n    bossWave=100;\n  }\n else {\n    assertNotEquals(0,bossWave,\"Sector doesn't have a boss wave.\");\n  }\n  for (int i=1; i <= bossWave; i++) {\n    int total=0;\n    for (    SpawnGroup spawn : spawns) {\n      total+=spawn.getSpawned(i);\n    }\n    assertNotEquals(0,total,\"Sector \" + zone + \" has no spawned enemies at wave \"+ i);\n  }\n  assertEquals(1,Team.sharded.cores().size,\"Sector must have one core: \" + zone);\n  assertTrue(Team.sharded.core().items.total() < 1000,\"Sector must not have starting resources: \" + zone);\n  assertTrue(hasSpawnPoint,\"Sector \\\"\" + zone.name + \"\\\" has no spawn points.\");\n  assertTrue(spawner.countSpawns() > 0 || (state.rules.attackMode && state.teams.get(state.rules.waveTeam).hasCore()),\"Sector \\\"\" + zone.name + \"\\\" has no enemy spawn points: \"+ spawner.countSpawns());\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 334,
      "astHeight" : 15
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 38,
    "startColumnNumber" : 32,
    "endLineNumber" : 38,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}