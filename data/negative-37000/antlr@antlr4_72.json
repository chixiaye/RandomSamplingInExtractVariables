{
  "id" : 72,
  "expression" : "config.toString(recog,true)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "config.toString(recog,true)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 405,
      "startColumnNumber" : 33,
      "endLineNumber" : 405,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 405,
        "startColumnNumber" : 22,
        "endLineNumber" : 405,
        "endColumnNumber" : 65
      },
      "nodeContext" : "\"closure(\" + config.toString(recog,true) + \")\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 405,
        "startColumnNumber" : 3,
        "endLineNumber" : 405,
        "endColumnNumber" : 66
      },
      "nodeContext" : "System.out.println(\"closure(\" + config.toString(recog,true) + \")\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 405,
        "startColumnNumber" : 3,
        "endLineNumber" : 405,
        "endColumnNumber" : 67
      },
      "nodeContext" : "System.out.println(\"closure(\" + config.toString(recog,true) + \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 404,
        "startColumnNumber" : 15,
        "endLineNumber" : 406,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  System.out.println(\"closure(\" + config.toString(recog,true) + \")\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 404,
        "startColumnNumber" : 2,
        "endLineNumber" : 406,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (debug) {\n  System.out.println(\"closure(\" + config.toString(recog,true) + \")\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2055,
        "startLineNumber" : 403,
        "startColumnNumber" : 176,
        "endLineNumber" : 460,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (debug) {\n    System.out.println(\"closure(\" + config.toString(recog,true) + \")\");\n  }\n  if (config.state instanceof RuleStopState) {\n    if (debug) {\n      if (recog != null) {\n        System.out.format(Locale.getDefault(),\"closure at %s rule stop %s\\n\",recog.getRuleNames()[config.state.ruleIndex],config);\n      }\n else {\n        System.out.format(Locale.getDefault(),\"closure at rule stop %s\\n\",config);\n      }\n    }\n    if (config.context == null || config.context.hasEmptyPath()) {\n      if (config.context == null || config.context.isEmpty()) {\n        configs.add(config);\n        return true;\n      }\n else {\n        configs.add(new LexerATNConfig(config,config.state,PredictionContext.EMPTY));\n        currentAltReachedAcceptState=true;\n      }\n    }\n    if (config.context != null && !config.context.isEmpty()) {\n      for (int i=0; i < config.context.size(); i++) {\n        if (config.context.getReturnState(i) != PredictionContext.EMPTY_RETURN_STATE) {\n          PredictionContext newContext=config.context.getParent(i);\n          ATNState returnState=atn.states.get(config.context.getReturnState(i));\n          LexerATNConfig c=new LexerATNConfig(config,returnState,newContext);\n          currentAltReachedAcceptState=closure(input,c,configs,currentAltReachedAcceptState,speculative,treatEofAsEpsilon);\n        }\n      }\n    }\n    return currentAltReachedAcceptState;\n  }\n  if (!config.state.onlyHasEpsilonTransitions()) {\n    if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision()) {\n      configs.add(config);\n    }\n  }\n  ATNState p=config.state;\n  for (int i=0; i < p.getNumberOfTransitions(); i++) {\n    Transition t=p.transition(i);\n    LexerATNConfig c=getEpsilonTarget(input,config,t,configs,speculative,treatEofAsEpsilon);\n    if (c != null) {\n      currentAltReachedAcceptState=closure(input,c,configs,currentAltReachedAcceptState,speculative,treatEofAsEpsilon);\n    }\n  }\n  return currentAltReachedAcceptState;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 295,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2680,
        "startLineNumber" : 393,
        "startColumnNumber" : 1,
        "endLineNumber" : 460,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Since the alternatives within any lexer decision are ordered by preference, this method stops pursuing the closure as soon as an accept state is reached. After the first accept state is reached by depth-first search from  {@code config}, all other (potentially reachable) states for this rule would have a lower priority.\n * @return {@code true} if an accept state is reached, otherwise{@code false}.\n */\nprotected boolean closure(CharStream input,LexerATNConfig config,ATNConfigSet configs,boolean currentAltReachedAcceptState,boolean speculative,boolean treatEofAsEpsilon){\n  if (debug) {\n    System.out.println(\"closure(\" + config.toString(recog,true) + \")\");\n  }\n  if (config.state instanceof RuleStopState) {\n    if (debug) {\n      if (recog != null) {\n        System.out.format(Locale.getDefault(),\"closure at %s rule stop %s\\n\",recog.getRuleNames()[config.state.ruleIndex],config);\n      }\n else {\n        System.out.format(Locale.getDefault(),\"closure at rule stop %s\\n\",config);\n      }\n    }\n    if (config.context == null || config.context.hasEmptyPath()) {\n      if (config.context == null || config.context.isEmpty()) {\n        configs.add(config);\n        return true;\n      }\n else {\n        configs.add(new LexerATNConfig(config,config.state,PredictionContext.EMPTY));\n        currentAltReachedAcceptState=true;\n      }\n    }\n    if (config.context != null && !config.context.isEmpty()) {\n      for (int i=0; i < config.context.size(); i++) {\n        if (config.context.getReturnState(i) != PredictionContext.EMPTY_RETURN_STATE) {\n          PredictionContext newContext=config.context.getParent(i);\n          ATNState returnState=atn.states.get(config.context.getReturnState(i));\n          LexerATNConfig c=new LexerATNConfig(config,returnState,newContext);\n          currentAltReachedAcceptState=closure(input,c,configs,currentAltReachedAcceptState,speculative,treatEofAsEpsilon);\n        }\n      }\n    }\n    return currentAltReachedAcceptState;\n  }\n  if (!config.state.onlyHasEpsilonTransitions()) {\n    if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision()) {\n      configs.add(config);\n    }\n  }\n  ATNState p=config.state;\n  for (int i=0; i < p.getNumberOfTransitions(); i++) {\n    Transition t=p.transition(i);\n    LexerATNConfig c=getEpsilonTarget(input,config,t,configs,speculative,treatEofAsEpsilon);\n    if (c != null) {\n      currentAltReachedAcceptState=closure(input,c,configs,currentAltReachedAcceptState,speculative,treatEofAsEpsilon);\n    }\n  }\n  return currentAltReachedAcceptState;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 321,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 405,
        "startColumnNumber" : 3,
        "endLineNumber" : 405,
        "endColumnNumber" : 67
      },
      "nodeContext" : "System.out.println(\"closure(\" + config.toString(recog,true) + \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 405,
    "startColumnNumber" : 33,
    "endLineNumber" : 405,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}