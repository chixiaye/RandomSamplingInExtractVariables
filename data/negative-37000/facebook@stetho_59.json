{
  "id" : 59,
  "expression" : "1024",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho-okhttp/src/test/java/com/facebook/stetho/okhttp/StethoInterceptorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1024",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 111,
      "startColumnNumber" : 42,
      "endLineNumber" : 111,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 111,
        "startColumnNumber" : 30,
        "endLineNumber" : 111,
        "endColumnNumber" : 47
      },
      "nodeContext" : "repeat(\".\",1024)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 111,
        "startColumnNumber" : 30,
        "endLineNumber" : 111,
        "endColumnNumber" : 58
      },
      "nodeContext" : "repeat(\".\",1024).getBytes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 111,
        "startColumnNumber" : 11,
        "endLineNumber" : 111,
        "endColumnNumber" : 58
      },
      "nodeContext" : "uncompressedData=repeat(\".\",1024).getBytes()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 59
      },
      "nodeContext" : "byte[] uncompressedData=repeat(\".\",1024).getBytes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 103,
        "startColumnNumber" : 55,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  PowerMockito.mockStatic(NetworkEventReporterImpl.class);\n  final NetworkEventReporter mockEventReporter=Mockito.mock(NetworkEventReporter.class);\n  Mockito.when(mockEventReporter.isEnabled()).thenReturn(true);\n  ByteArrayOutputStream capturedOutput=hookAlmostRealInterpretResponseStream(mockEventReporter);\n  PowerMockito.when(NetworkEventReporterImpl.get()).thenReturn(mockEventReporter);\n  byte[] uncompressedData=repeat(\".\",1024).getBytes();\n  byte[] compressedData=compress(uncompressedData);\n  MockWebServer server=new MockWebServer();\n  server.play();\n  server.enqueue(new MockResponse().setBody(compressedData).addHeader(\"Content-Encoding: gzip\"));\n  OkHttpClient client=new OkHttpClient();\n  client.networkInterceptors().add(new StethoInterceptor());\n  Request request=new Request.Builder().url(server.getUrl(\"/\")).build();\n  Response response=client.newCall(request).execute();\n  assertArrayEquals(uncompressedData,response.body().bytes());\n  assertArrayEquals(uncompressedData,capturedOutput.toByteArray());\n  Mockito.verify(mockEventReporter).dataReceived(anyString(),eq(compressedData.length),eq(uncompressedData.length));\n  server.shutdown();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1523,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testWithCompression() throws IOException {\n  PowerMockito.mockStatic(NetworkEventReporterImpl.class);\n  final NetworkEventReporter mockEventReporter=Mockito.mock(NetworkEventReporter.class);\n  Mockito.when(mockEventReporter.isEnabled()).thenReturn(true);\n  ByteArrayOutputStream capturedOutput=hookAlmostRealInterpretResponseStream(mockEventReporter);\n  PowerMockito.when(NetworkEventReporterImpl.get()).thenReturn(mockEventReporter);\n  byte[] uncompressedData=repeat(\".\",1024).getBytes();\n  byte[] compressedData=compress(uncompressedData);\n  MockWebServer server=new MockWebServer();\n  server.play();\n  server.enqueue(new MockResponse().setBody(compressedData).addHeader(\"Content-Encoding: gzip\"));\n  OkHttpClient client=new OkHttpClient();\n  client.networkInterceptors().add(new StethoInterceptor());\n  Request request=new Request.Builder().url(server.getUrl(\"/\")).build();\n  Response response=client.newCall(request).execute();\n  assertArrayEquals(uncompressedData,response.body().bytes());\n  assertArrayEquals(uncompressedData,capturedOutput.toByteArray());\n  Mockito.verify(mockEventReporter).dataReceived(anyString(),eq(compressedData.length),eq(uncompressedData.length));\n  server.shutdown();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 59
      },
      "nodeContext" : "byte[] uncompressedData=repeat(\".\",1024).getBytes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 111,
    "startColumnNumber" : 42,
    "endLineNumber" : 111,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}