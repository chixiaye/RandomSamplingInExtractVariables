{
  "id" : 514,
  "expression" : "storeCheckpoint",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/store/src/test/java/org/apache/rocketmq/store/StoreCheckpointTest.java",
  "occurrences" : 7,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 38,
      "startColumnNumber" : 8,
      "endLineNumber" : 38,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 65
      },
      "nodeContext" : "storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 66
      },
      "nodeContext" : "storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 38,
        "endColumnNumber" : 66
      },
      "nodeContext" : "storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  }, {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 39,
      "startColumnNumber" : 8,
      "endLineNumber" : 39,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 65
      },
      "nodeContext" : "storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 66
      },
      "nodeContext" : "storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 66
      },
      "nodeContext" : "storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  }, {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 40,
      "startColumnNumber" : 8,
      "endLineNumber" : 40,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 31
      },
      "nodeContext" : "storeCheckpoint.flush()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 32
      },
      "nodeContext" : "storeCheckpoint.flush();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 32
      },
      "nodeContext" : "storeCheckpoint.flush();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  }, {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 42,
      "startColumnNumber" : 41,
      "endLineNumber" : 42,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 42,
        "startColumnNumber" : 41,
        "endLineNumber" : 42,
        "endColumnNumber" : 74
      },
      "nodeContext" : "storeCheckpoint.getMinTimestamp()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 42,
        "startColumnNumber" : 20,
        "endLineNumber" : 42,
        "endColumnNumber" : 74
      },
      "nodeContext" : "physicMsgTimestamp - storeCheckpoint.getMinTimestamp()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 42,
        "startColumnNumber" : 13,
        "endLineNumber" : 42,
        "endColumnNumber" : 74
      },
      "nodeContext" : "diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 75
      },
      "nodeContext" : "long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 75
      },
      "nodeContext" : "long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  }, {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 44,
      "startColumnNumber" : 8,
      "endLineNumber" : 44,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 34
      },
      "nodeContext" : "storeCheckpoint.shutdown()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 35
      },
      "nodeContext" : "storeCheckpoint.shutdown();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 35
      },
      "nodeContext" : "storeCheckpoint.shutdown();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  }, {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 46,
      "startColumnNumber" : 19,
      "endLineNumber" : 46,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 46,
        "startColumnNumber" : 19,
        "endLineNumber" : 46,
        "endColumnNumber" : 58
      },
      "nodeContext" : "storeCheckpoint.getPhysicMsgTimestamp()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertThat(storeCheckpoint.getPhysicMsgTimestamp())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  }, {
    "nodeContext" : "storeCheckpoint",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 47,
      "startColumnNumber" : 19,
      "endLineNumber" : 47,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 47,
        "startColumnNumber" : 19,
        "endLineNumber" : 47,
        "endColumnNumber" : 58
      },
      "nodeContext" : "storeCheckpoint.getLogicsMsgTimestamp()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 59
      },
      "nodeContext" : "assertThat(storeCheckpoint.getLogicsMsgTimestamp())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 767,
        "startLineNumber" : 34,
        "startColumnNumber" : 54,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 79,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 48,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWriteAndRead() throws IOException {\n  StoreCheckpoint storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  long physicMsgTimestamp=0xAABB;\n  long logicsMsgTimestamp=0xCCDD;\n  storeCheckpoint.setPhysicMsgTimestamp(physicMsgTimestamp);\n  storeCheckpoint.setLogicsMsgTimestamp(logicsMsgTimestamp);\n  storeCheckpoint.flush();\n  long diff=physicMsgTimestamp - storeCheckpoint.getMinTimestamp();\n  assertThat(diff).isEqualTo(3000);\n  storeCheckpoint.shutdown();\n  storeCheckpoint=new StoreCheckpoint(\"target/checkpoint_test/0000\");\n  assertThat(storeCheckpoint.getPhysicMsgTimestamp()).isEqualTo(physicMsgTimestamp);\n  assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 87,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 47,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 90
      },
      "nodeContext" : "assertThat(storeCheckpoint.getLogicsMsgTimestamp()).isEqualTo(logicsMsgTimestamp);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.rocketmq.store.StoreCheckpoint"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 38,
    "startColumnNumber" : 8,
    "endLineNumber" : 38,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 39,
    "startColumnNumber" : 8,
    "endLineNumber" : 39,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 40,
    "startColumnNumber" : 8,
    "endLineNumber" : 40,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 42,
    "startColumnNumber" : 41,
    "endLineNumber" : 42,
    "endColumnNumber" : 56
  }, {
    "charLength" : 15,
    "startLineNumber" : 44,
    "startColumnNumber" : 8,
    "endLineNumber" : 44,
    "endColumnNumber" : 23
  }, {
    "charLength" : 15,
    "startLineNumber" : 46,
    "startColumnNumber" : 19,
    "endLineNumber" : 46,
    "endColumnNumber" : 34
  }, {
    "charLength" : 15,
    "startLineNumber" : 47,
    "startColumnNumber" : 19,
    "endLineNumber" : 47,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  } ]
}