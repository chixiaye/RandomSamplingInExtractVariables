{
  "id" : 163,
  "expression" : "configuration == null",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/spring/boot/starter/MybatisPlusAutoConfiguration.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "configuration == null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 120,
      "startColumnNumber" : 12,
      "endLineNumber" : 120,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 94
      },
      "nodeContext" : "configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n  configuration=new MybatisConfiguration();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3403,
        "startLineNumber" : 112,
        "startColumnNumber" : 87,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 384,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3526,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 178,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n  MybatisSqlSessionFactoryBean factory=new MybatisSqlSessionFactoryBean();\n  factory.setDataSource(dataSource);\n  factory.setVfs(SpringBootVFS.class);\n  if (StringUtils.hasText(this.properties.getConfigLocation())) {\n    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n  }\n  MybatisConfiguration configuration=this.properties.getConfiguration();\n  if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n    configuration=new MybatisConfiguration();\n  }\n  if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n    for (    ConfigurationCustomizer customizer : this.configurationCustomizers) {\n      customizer.customize(configuration);\n    }\n  }\n  configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);\n  factory.setConfiguration(configuration);\n  if (this.properties.getConfigurationProperties() != null) {\n    factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n  }\n  if (!ObjectUtils.isEmpty(this.interceptors)) {\n    factory.setPlugins(this.interceptors);\n  }\n  if (this.databaseIdProvider != null) {\n    factory.setDatabaseIdProvider(this.databaseIdProvider);\n  }\n  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeEnumsPackage())) {\n    factory.setTypeEnumsPackage(this.properties.getTypeEnumsPackage());\n  }\n  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n  }\n  if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n    factory.setMapperLocations(this.properties.resolveMapperLocations());\n  }\n  GlobalConfiguration globalConfig;\n  if (!ObjectUtils.isEmpty(this.properties.getGlobalConfig())) {\n    globalConfig=this.properties.getGlobalConfig().convertGlobalConfiguration();\n  }\n else {\n    globalConfig=new GlobalConfiguration();\n  }\n  if (this.applicationContext.getBeanNamesForType(MetaObjectHandler.class,false,false).length > 0) {\n    MetaObjectHandler metaObjectHandler=this.applicationContext.getBean(MetaObjectHandler.class);\n    globalConfig.setMetaObjectHandler(metaObjectHandler);\n  }\n  if (this.applicationContext.getBeanNamesForType(IKeyGenerator.class,false,false).length > 0) {\n    IKeyGenerator keyGenerator=this.applicationContext.getBean(IKeyGenerator.class);\n    globalConfig.setKeyGenerator(keyGenerator);\n  }\n  if (this.applicationContext.getBeanNamesForType(ISqlInjector.class,false,false).length > 0) {\n    ISqlInjector iSqlInjector=this.applicationContext.getBean(ISqlInjector.class);\n    globalConfig.setSqlInjector(iSqlInjector);\n  }\n  factory.setGlobalConfig(globalConfig);\n  return factory.getObject();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 399,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 120,
        "endColumnNumber" : 94
      },
      "nodeContext" : "configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 120,
    "startColumnNumber" : 12,
    "endLineNumber" : 120,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}