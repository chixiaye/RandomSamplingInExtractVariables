{
  "id" : 511,
  "expression" : "AnnotationProcessor.class",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-anno-support/src/main/java/com/tencent/tinker/anno/AnnotationProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "AnnotationProcessor.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 85,
      "startColumnNumber" : 35,
      "endLineNumber" : 85,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 85,
        "startColumnNumber" : 35,
        "endLineNumber" : 85,
        "endColumnNumber" : 107
      },
      "nodeContext" : "AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 85,
        "startColumnNumber" : 30,
        "endLineNumber" : 85,
        "endColumnNumber" : 107
      },
      "nodeContext" : "is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 108
      },
      "nodeContext" : "final InputStream is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2577,
        "startLineNumber" : 66,
        "startColumnNumber" : 35,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DefaultLifeCycle ca=e.getAnnotation(DefaultLifeCycle.class);\n  String lifeCycleClassName=((TypeElement)e).getQualifiedName().toString();\n  String lifeCyclePackageName=lifeCycleClassName.substring(0,lifeCycleClassName.lastIndexOf('.'));\n  lifeCycleClassName=lifeCycleClassName.substring(lifeCycleClassName.lastIndexOf('.') + 1);\n  String applicationClassName=ca.application();\n  if (applicationClassName.startsWith(\".\")) {\n    applicationClassName=lifeCyclePackageName + applicationClassName;\n  }\n  String applicationPackageName=applicationClassName.substring(0,applicationClassName.lastIndexOf('.'));\n  applicationClassName=applicationClassName.substring(applicationClassName.lastIndexOf('.') + 1);\n  String loaderClassName=ca.loaderClass();\n  if (loaderClassName.startsWith(\".\")) {\n    loaderClassName=lifeCyclePackageName + loaderClassName;\n  }\n  final InputStream is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH);\n  final Scanner scanner=new Scanner(is);\n  final String template=scanner.useDelimiter(\"\\\\A\").next();\n  final String fileContent=template.replaceAll(\"%PACKAGE%\",applicationPackageName).replaceAll(\"%APPLICATION%\",applicationClassName).replaceAll(\"%APPLICATION_LIFE_CYCLE%\",lifeCyclePackageName + \".\" + lifeCycleClassName).replaceAll(\"%TINKER_FLAGS%\",\"\" + ca.flags()).replaceAll(\"%TINKER_LOADER_CLASS%\",\"\" + loaderClassName).replaceAll(\"%TINKER_LOAD_VERIFY_FLAG%\",\"\" + ca.loadVerifyFlag()).replaceAll(\"%TINKER_USE_DLC%\",\"\" + ca.useDelegateLastClassLoader());\n  try {\n    JavaFileObject fileObject=processingEnv.getFiler().createSourceFile(applicationPackageName + \".\" + applicationClassName);\n    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\"Creating \" + fileObject.toUri());\n    Writer writer=fileObject.openWriter();\n    try {\n      PrintWriter pw=new PrintWriter(writer);\n      pw.print(fileContent);\n      pw.flush();\n    }\n  finally {\n      writer.close();\n    }\n  }\n catch (  IOException x) {\n    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,x.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 287,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2604,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Element e : elements) {\n  DefaultLifeCycle ca=e.getAnnotation(DefaultLifeCycle.class);\n  String lifeCycleClassName=((TypeElement)e).getQualifiedName().toString();\n  String lifeCyclePackageName=lifeCycleClassName.substring(0,lifeCycleClassName.lastIndexOf('.'));\n  lifeCycleClassName=lifeCycleClassName.substring(lifeCycleClassName.lastIndexOf('.') + 1);\n  String applicationClassName=ca.application();\n  if (applicationClassName.startsWith(\".\")) {\n    applicationClassName=lifeCyclePackageName + applicationClassName;\n  }\n  String applicationPackageName=applicationClassName.substring(0,applicationClassName.lastIndexOf('.'));\n  applicationClassName=applicationClassName.substring(applicationClassName.lastIndexOf('.') + 1);\n  String loaderClassName=ca.loaderClass();\n  if (loaderClassName.startsWith(\".\")) {\n    loaderClassName=lifeCyclePackageName + loaderClassName;\n  }\n  final InputStream is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH);\n  final Scanner scanner=new Scanner(is);\n  final String template=scanner.useDelimiter(\"\\\\A\").next();\n  final String fileContent=template.replaceAll(\"%PACKAGE%\",applicationPackageName).replaceAll(\"%APPLICATION%\",applicationClassName).replaceAll(\"%APPLICATION_LIFE_CYCLE%\",lifeCyclePackageName + \".\" + lifeCycleClassName).replaceAll(\"%TINKER_FLAGS%\",\"\" + ca.flags()).replaceAll(\"%TINKER_LOADER_CLASS%\",\"\" + loaderClassName).replaceAll(\"%TINKER_LOAD_VERIFY_FLAG%\",\"\" + ca.loadVerifyFlag()).replaceAll(\"%TINKER_USE_DLC%\",\"\" + ca.useDelegateLastClassLoader());\n  try {\n    JavaFileObject fileObject=processingEnv.getFiler().createSourceFile(applicationPackageName + \".\" + applicationClassName);\n    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\"Creating \" + fileObject.toUri());\n    Writer writer=fileObject.openWriter();\n    try {\n      PrintWriter pw=new PrintWriter(writer);\n      pw.print(fileContent);\n      pw.flush();\n    }\n  finally {\n      writer.close();\n    }\n  }\n catch (  IOException x) {\n    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,x.toString());\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 293,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2648,
        "startLineNumber" : 64,
        "startColumnNumber" : 74,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  Element e : elements) {\n    DefaultLifeCycle ca=e.getAnnotation(DefaultLifeCycle.class);\n    String lifeCycleClassName=((TypeElement)e).getQualifiedName().toString();\n    String lifeCyclePackageName=lifeCycleClassName.substring(0,lifeCycleClassName.lastIndexOf('.'));\n    lifeCycleClassName=lifeCycleClassName.substring(lifeCycleClassName.lastIndexOf('.') + 1);\n    String applicationClassName=ca.application();\n    if (applicationClassName.startsWith(\".\")) {\n      applicationClassName=lifeCyclePackageName + applicationClassName;\n    }\n    String applicationPackageName=applicationClassName.substring(0,applicationClassName.lastIndexOf('.'));\n    applicationClassName=applicationClassName.substring(applicationClassName.lastIndexOf('.') + 1);\n    String loaderClassName=ca.loaderClass();\n    if (loaderClassName.startsWith(\".\")) {\n      loaderClassName=lifeCyclePackageName + loaderClassName;\n    }\n    final InputStream is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH);\n    final Scanner scanner=new Scanner(is);\n    final String template=scanner.useDelimiter(\"\\\\A\").next();\n    final String fileContent=template.replaceAll(\"%PACKAGE%\",applicationPackageName).replaceAll(\"%APPLICATION%\",applicationClassName).replaceAll(\"%APPLICATION_LIFE_CYCLE%\",lifeCyclePackageName + \".\" + lifeCycleClassName).replaceAll(\"%TINKER_FLAGS%\",\"\" + ca.flags()).replaceAll(\"%TINKER_LOADER_CLASS%\",\"\" + loaderClassName).replaceAll(\"%TINKER_LOAD_VERIFY_FLAG%\",\"\" + ca.loadVerifyFlag()).replaceAll(\"%TINKER_USE_DLC%\",\"\" + ca.useDelegateLastClassLoader());\n    try {\n      JavaFileObject fileObject=processingEnv.getFiler().createSourceFile(applicationPackageName + \".\" + applicationClassName);\n      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\"Creating \" + fileObject.toUri());\n      Writer writer=fileObject.openWriter();\n      try {\n        PrintWriter pw=new PrintWriter(writer);\n        pw.print(fileContent);\n        pw.flush();\n      }\n  finally {\n        writer.close();\n      }\n    }\n catch (    IOException x) {\n      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,x.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2718,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void processDefaultLifeCycle(Set<? extends Element> elements){\n  for (  Element e : elements) {\n    DefaultLifeCycle ca=e.getAnnotation(DefaultLifeCycle.class);\n    String lifeCycleClassName=((TypeElement)e).getQualifiedName().toString();\n    String lifeCyclePackageName=lifeCycleClassName.substring(0,lifeCycleClassName.lastIndexOf('.'));\n    lifeCycleClassName=lifeCycleClassName.substring(lifeCycleClassName.lastIndexOf('.') + 1);\n    String applicationClassName=ca.application();\n    if (applicationClassName.startsWith(\".\")) {\n      applicationClassName=lifeCyclePackageName + applicationClassName;\n    }\n    String applicationPackageName=applicationClassName.substring(0,applicationClassName.lastIndexOf('.'));\n    applicationClassName=applicationClassName.substring(applicationClassName.lastIndexOf('.') + 1);\n    String loaderClassName=ca.loaderClass();\n    if (loaderClassName.startsWith(\".\")) {\n      loaderClassName=lifeCyclePackageName + loaderClassName;\n    }\n    final InputStream is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH);\n    final Scanner scanner=new Scanner(is);\n    final String template=scanner.useDelimiter(\"\\\\A\").next();\n    final String fileContent=template.replaceAll(\"%PACKAGE%\",applicationPackageName).replaceAll(\"%APPLICATION%\",applicationClassName).replaceAll(\"%APPLICATION_LIFE_CYCLE%\",lifeCyclePackageName + \".\" + lifeCycleClassName).replaceAll(\"%TINKER_FLAGS%\",\"\" + ca.flags()).replaceAll(\"%TINKER_LOADER_CLASS%\",\"\" + loaderClassName).replaceAll(\"%TINKER_LOAD_VERIFY_FLAG%\",\"\" + ca.loadVerifyFlag()).replaceAll(\"%TINKER_USE_DLC%\",\"\" + ca.useDelegateLastClassLoader());\n    try {\n      JavaFileObject fileObject=processingEnv.getFiler().createSourceFile(applicationPackageName + \".\" + applicationClassName);\n      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\"Creating \" + fileObject.toUri());\n      Writer writer=fileObject.openWriter();\n      try {\n        PrintWriter pw=new PrintWriter(writer);\n        pw.print(fileContent);\n        pw.flush();\n      }\n  finally {\n        writer.close();\n      }\n    }\n catch (    IOException x) {\n      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,x.toString());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 85,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 108
      },
      "nodeContext" : "final InputStream is=AnnotationProcessor.class.getResourceAsStream(APPLICATION_TEMPLATE_PATH);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<com.tencent.tinker.anno.AnnotationProcessor>"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 85,
    "startColumnNumber" : 35,
    "endLineNumber" : 85,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}