{
  "id" : 152,
  "expression" : "encoding",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "encoding",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 81,
      "startColumnNumber" : 12,
      "endLineNumber" : 81,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 28
      },
      "nodeContext" : "encoding != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "encoding != null && encoding.contains(\"gzip\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (encoding != null && encoding.contains(\"gzip\")) {\n  try {\n    Buffer result=new Buffer();\n    GzipSource source=new GzipSource(new Buffer().write(body));\n    while (source.read(result,Integer.MAX_VALUE) != -1)     ;\n    body=result.readByteArray();\n  }\n catch (  IOException e) {\n    String message=logger.errorReading(\"Cannot gunzip spans\",e);\n    return new MockResponse().setResponseCode(400).setBody(message);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 77,
        "startColumnNumber" : 53,
        "endLineNumber" : 107,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  logger.acceptedMessage();\n  byte[] body=request.getBody().readByteArray();\n  String encoding=request.getHeader(\"Content-Encoding\");\n  if (encoding != null && encoding.contains(\"gzip\")) {\n    try {\n      Buffer result=new Buffer();\n      GzipSource source=new GzipSource(new Buffer().write(body));\n      while (source.read(result,Integer.MAX_VALUE) != -1)       ;\n      body=result.readByteArray();\n    }\n catch (    IOException e) {\n      String message=logger.errorReading(\"Cannot gunzip spans\",e);\n      return new MockResponse().setResponseCode(400).setBody(message);\n    }\n  }\n  logger.readBytes(body.length);\n  String type=request.getHeader(\"Content-Type\");\n  Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n  List<Span> spans=codec.readSpans(body);\n  if (spans.isEmpty())   return new MockResponse().setResponseCode(202);\n  logger.readSpans(spans.size());\n  try {\n    consumer.accept(spans,logger.acceptSpansCallback(spans));\n  }\n catch (  RuntimeException e) {\n    String message=logger.errorAcceptingSpans(spans,e);\n    return new MockResponse().setResponseCode(500).setBody(message);\n  }\n  return new MockResponse().setResponseCode(202);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1413,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (url.encodedPath().equals(\"/api/v1/spans\")) {\n  logger.acceptedMessage();\n  byte[] body=request.getBody().readByteArray();\n  String encoding=request.getHeader(\"Content-Encoding\");\n  if (encoding != null && encoding.contains(\"gzip\")) {\n    try {\n      Buffer result=new Buffer();\n      GzipSource source=new GzipSource(new Buffer().write(body));\n      while (source.read(result,Integer.MAX_VALUE) != -1)       ;\n      body=result.readByteArray();\n    }\n catch (    IOException e) {\n      String message=logger.errorReading(\"Cannot gunzip spans\",e);\n      return new MockResponse().setResponseCode(400).setBody(message);\n    }\n  }\n  logger.readBytes(body.length);\n  String type=request.getHeader(\"Content-Type\");\n  Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n  List<Span> spans=codec.readSpans(body);\n  if (spans.isEmpty())   return new MockResponse().setResponseCode(202);\n  logger.readSpans(spans.size());\n  try {\n    consumer.accept(spans,logger.acceptSpansCallback(spans));\n  }\n catch (  RuntimeException e) {\n    String message=logger.errorAcceptingSpans(spans,e);\n    return new MockResponse().setResponseCode(500).setBody(message);\n  }\n  return new MockResponse().setResponseCode(202);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1427,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    logger.acceptedMessage();\n    byte[] body=request.getBody().readByteArray();\n    String encoding=request.getHeader(\"Content-Encoding\");\n    if (encoding != null && encoding.contains(\"gzip\")) {\n      try {\n        Buffer result=new Buffer();\n        GzipSource source=new GzipSource(new Buffer().write(body));\n        while (source.read(result,Integer.MAX_VALUE) != -1)         ;\n        body=result.readByteArray();\n      }\n catch (      IOException e) {\n        String message=logger.errorReading(\"Cannot gunzip spans\",e);\n        return new MockResponse().setResponseCode(400).setBody(message);\n      }\n    }\n    logger.readBytes(body.length);\n    String type=request.getHeader(\"Content-Type\");\n    Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n    List<Span> spans=codec.readSpans(body);\n    if (spans.isEmpty())     return new MockResponse().setResponseCode(202);\n    logger.readSpans(spans.size());\n    try {\n      consumer.accept(spans,logger.acceptSpansCallback(spans));\n    }\n catch (    RuntimeException e) {\n      String message=logger.errorAcceptingSpans(spans,e);\n      return new MockResponse().setResponseCode(500).setBody(message);\n    }\n    return new MockResponse().setResponseCode(202);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1556,
        "startLineNumber" : 76,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (request.getMethod().equals(\"POST\")) {\n  if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    logger.acceptedMessage();\n    byte[] body=request.getBody().readByteArray();\n    String encoding=request.getHeader(\"Content-Encoding\");\n    if (encoding != null && encoding.contains(\"gzip\")) {\n      try {\n        Buffer result=new Buffer();\n        GzipSource source=new GzipSource(new Buffer().write(body));\n        while (source.read(result,Integer.MAX_VALUE) != -1)         ;\n        body=result.readByteArray();\n      }\n catch (      IOException e) {\n        String message=logger.errorReading(\"Cannot gunzip spans\",e);\n        return new MockResponse().setResponseCode(400).setBody(message);\n      }\n    }\n    logger.readBytes(body.length);\n    String type=request.getHeader(\"Content-Type\");\n    Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n    List<Span> spans=codec.readSpans(body);\n    if (spans.isEmpty())     return new MockResponse().setResponseCode(202);\n    logger.readSpans(spans.size());\n    try {\n      consumer.accept(spans,logger.acceptSpansCallback(spans));\n    }\n catch (    RuntimeException e) {\n      String message=logger.errorAcceptingSpans(spans,e);\n      return new MockResponse().setResponseCode(500).setBody(message);\n    }\n    return new MockResponse().setResponseCode(202);\n  }\n}\n else {\n  return new MockResponse().setResponseCode(405);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 236,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3049,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (request.getMethod().equals(\"GET\")) {\n  if (url.encodedPath().equals(\"/health\")) {\n    return new MockResponse().setBody(\"OK\\n\");\n  }\n else   if (url.encodedPath().equals(\"/api/v1/services\")) {\n    return jsonResponse(Codec.JSON.writeStrings(store.getServiceNames()));\n  }\n else   if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    String serviceName=url.queryParameter(\"serviceName\");\n    return jsonResponse(Codec.JSON.writeStrings(store.getSpanNames(serviceName)));\n  }\n else   if (url.encodedPath().equals(\"/api/v1/dependencies\")) {\n    Long endTs=maybeLong(url.queryParameter(\"endTs\"));\n    Long lookback=maybeLong(url.queryParameter(\"lookback\"));\n    List<DependencyLink> result=store.getDependencies(endTs,lookback);\n    return jsonResponse(Codec.JSON.writeDependencyLinks(result));\n  }\n else   if (url.encodedPath().equals(\"/api/v1/traces\")) {\n    QueryRequest queryRequest=toQueryRequest(url);\n    return jsonResponse(Codec.JSON.writeTraces(store.getTraces(queryRequest)));\n  }\n else   if (url.encodedPath().startsWith(\"/api/v1/trace/\")) {\n    String traceId=url.encodedPath().replace(\"/api/v1/trace/\",\"\");\n    long id=new Buffer().writeUtf8(traceId).readHexadecimalUnsignedLong();\n    List<Span> trace=url.queryParameterNames().contains(\"raw\") ? store.getRawTrace(id) : store.getTrace(id);\n    if (trace != null)     return jsonResponse(Codec.JSON.writeSpans(trace));\n  }\n}\n else if (request.getMethod().equals(\"POST\")) {\n  if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    logger.acceptedMessage();\n    byte[] body=request.getBody().readByteArray();\n    String encoding=request.getHeader(\"Content-Encoding\");\n    if (encoding != null && encoding.contains(\"gzip\")) {\n      try {\n        Buffer result=new Buffer();\n        GzipSource source=new GzipSource(new Buffer().write(body));\n        while (source.read(result,Integer.MAX_VALUE) != -1)         ;\n        body=result.readByteArray();\n      }\n catch (      IOException e) {\n        String message=logger.errorReading(\"Cannot gunzip spans\",e);\n        return new MockResponse().setResponseCode(400).setBody(message);\n      }\n    }\n    logger.readBytes(body.length);\n    String type=request.getHeader(\"Content-Type\");\n    Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n    List<Span> spans=codec.readSpans(body);\n    if (spans.isEmpty())     return new MockResponse().setResponseCode(202);\n    logger.readSpans(spans.size());\n    try {\n      consumer.accept(spans,logger.acceptSpansCallback(spans));\n    }\n catch (    RuntimeException e) {\n      String message=logger.errorAcceptingSpans(spans,e);\n      return new MockResponse().setResponseCode(500).setBody(message);\n    }\n    return new MockResponse().setResponseCode(202);\n  }\n}\n else {\n  return new MockResponse().setResponseCode(405);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 455,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3160,
        "startLineNumber" : 51,
        "startColumnNumber" : 56,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HttpUrl url=server.url(request.getPath());\n  if (request.getMethod().equals(\"GET\")) {\n    if (url.encodedPath().equals(\"/health\")) {\n      return new MockResponse().setBody(\"OK\\n\");\n    }\n else     if (url.encodedPath().equals(\"/api/v1/services\")) {\n      return jsonResponse(Codec.JSON.writeStrings(store.getServiceNames()));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      String serviceName=url.queryParameter(\"serviceName\");\n      return jsonResponse(Codec.JSON.writeStrings(store.getSpanNames(serviceName)));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/dependencies\")) {\n      Long endTs=maybeLong(url.queryParameter(\"endTs\"));\n      Long lookback=maybeLong(url.queryParameter(\"lookback\"));\n      List<DependencyLink> result=store.getDependencies(endTs,lookback);\n      return jsonResponse(Codec.JSON.writeDependencyLinks(result));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/traces\")) {\n      QueryRequest queryRequest=toQueryRequest(url);\n      return jsonResponse(Codec.JSON.writeTraces(store.getTraces(queryRequest)));\n    }\n else     if (url.encodedPath().startsWith(\"/api/v1/trace/\")) {\n      String traceId=url.encodedPath().replace(\"/api/v1/trace/\",\"\");\n      long id=new Buffer().writeUtf8(traceId).readHexadecimalUnsignedLong();\n      List<Span> trace=url.queryParameterNames().contains(\"raw\") ? store.getRawTrace(id) : store.getTrace(id);\n      if (trace != null)       return jsonResponse(Codec.JSON.writeSpans(trace));\n    }\n  }\n else   if (request.getMethod().equals(\"POST\")) {\n    if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      logger.acceptedMessage();\n      byte[] body=request.getBody().readByteArray();\n      String encoding=request.getHeader(\"Content-Encoding\");\n      if (encoding != null && encoding.contains(\"gzip\")) {\n        try {\n          Buffer result=new Buffer();\n          GzipSource source=new GzipSource(new Buffer().write(body));\n          while (source.read(result,Integer.MAX_VALUE) != -1)           ;\n          body=result.readByteArray();\n        }\n catch (        IOException e) {\n          String message=logger.errorReading(\"Cannot gunzip spans\",e);\n          return new MockResponse().setResponseCode(400).setBody(message);\n        }\n      }\n      logger.readBytes(body.length);\n      String type=request.getHeader(\"Content-Type\");\n      Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n      List<Span> spans=codec.readSpans(body);\n      if (spans.isEmpty())       return new MockResponse().setResponseCode(202);\n      logger.readSpans(spans.size());\n      try {\n        consumer.accept(spans,logger.acceptSpansCallback(spans));\n      }\n catch (      RuntimeException e) {\n        String message=logger.errorAcceptingSpans(spans,e);\n        return new MockResponse().setResponseCode(500).setBody(message);\n      }\n      return new MockResponse().setResponseCode(202);\n    }\n  }\n else {\n    return new MockResponse().setResponseCode(405);\n  }\n  return new MockResponse().setResponseCode(404);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 474,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3226,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public MockResponse dispatch(RecordedRequest request){\n  HttpUrl url=server.url(request.getPath());\n  if (request.getMethod().equals(\"GET\")) {\n    if (url.encodedPath().equals(\"/health\")) {\n      return new MockResponse().setBody(\"OK\\n\");\n    }\n else     if (url.encodedPath().equals(\"/api/v1/services\")) {\n      return jsonResponse(Codec.JSON.writeStrings(store.getServiceNames()));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      String serviceName=url.queryParameter(\"serviceName\");\n      return jsonResponse(Codec.JSON.writeStrings(store.getSpanNames(serviceName)));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/dependencies\")) {\n      Long endTs=maybeLong(url.queryParameter(\"endTs\"));\n      Long lookback=maybeLong(url.queryParameter(\"lookback\"));\n      List<DependencyLink> result=store.getDependencies(endTs,lookback);\n      return jsonResponse(Codec.JSON.writeDependencyLinks(result));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/traces\")) {\n      QueryRequest queryRequest=toQueryRequest(url);\n      return jsonResponse(Codec.JSON.writeTraces(store.getTraces(queryRequest)));\n    }\n else     if (url.encodedPath().startsWith(\"/api/v1/trace/\")) {\n      String traceId=url.encodedPath().replace(\"/api/v1/trace/\",\"\");\n      long id=new Buffer().writeUtf8(traceId).readHexadecimalUnsignedLong();\n      List<Span> trace=url.queryParameterNames().contains(\"raw\") ? store.getRawTrace(id) : store.getTrace(id);\n      if (trace != null)       return jsonResponse(Codec.JSON.writeSpans(trace));\n    }\n  }\n else   if (request.getMethod().equals(\"POST\")) {\n    if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      logger.acceptedMessage();\n      byte[] body=request.getBody().readByteArray();\n      String encoding=request.getHeader(\"Content-Encoding\");\n      if (encoding != null && encoding.contains(\"gzip\")) {\n        try {\n          Buffer result=new Buffer();\n          GzipSource source=new GzipSource(new Buffer().write(body));\n          while (source.read(result,Integer.MAX_VALUE) != -1)           ;\n          body=result.readByteArray();\n        }\n catch (        IOException e) {\n          String message=logger.errorReading(\"Cannot gunzip spans\",e);\n          return new MockResponse().setResponseCode(400).setBody(message);\n        }\n      }\n      logger.readBytes(body.length);\n      String type=request.getHeader(\"Content-Type\");\n      Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n      List<Span> spans=codec.readSpans(body);\n      if (spans.isEmpty())       return new MockResponse().setResponseCode(202);\n      logger.readSpans(spans.size());\n      try {\n        consumer.accept(spans,logger.acceptSpansCallback(spans));\n      }\n catch (      RuntimeException e) {\n        String message=logger.errorAcceptingSpans(spans,e);\n        return new MockResponse().setResponseCode(500).setBody(message);\n      }\n      return new MockResponse().setResponseCode(202);\n    }\n  }\n else {\n    return new MockResponse().setResponseCode(405);\n  }\n  return new MockResponse().setResponseCode(404);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 485,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "encoding != null && encoding.contains(\"gzip\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "encoding",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 81,
      "startColumnNumber" : 32,
      "endLineNumber" : 81,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 81,
        "startColumnNumber" : 32,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "encoding.contains(\"gzip\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "encoding != null && encoding.contains(\"gzip\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (encoding != null && encoding.contains(\"gzip\")) {\n  try {\n    Buffer result=new Buffer();\n    GzipSource source=new GzipSource(new Buffer().write(body));\n    while (source.read(result,Integer.MAX_VALUE) != -1)     ;\n    body=result.readByteArray();\n  }\n catch (  IOException e) {\n    String message=logger.errorReading(\"Cannot gunzip spans\",e);\n    return new MockResponse().setResponseCode(400).setBody(message);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 78,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1366,
        "startLineNumber" : 77,
        "startColumnNumber" : 53,
        "endLineNumber" : 107,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  logger.acceptedMessage();\n  byte[] body=request.getBody().readByteArray();\n  String encoding=request.getHeader(\"Content-Encoding\");\n  if (encoding != null && encoding.contains(\"gzip\")) {\n    try {\n      Buffer result=new Buffer();\n      GzipSource source=new GzipSource(new Buffer().write(body));\n      while (source.read(result,Integer.MAX_VALUE) != -1)       ;\n      body=result.readByteArray();\n    }\n catch (    IOException e) {\n      String message=logger.errorReading(\"Cannot gunzip spans\",e);\n      return new MockResponse().setResponseCode(400).setBody(message);\n    }\n  }\n  logger.readBytes(body.length);\n  String type=request.getHeader(\"Content-Type\");\n  Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n  List<Span> spans=codec.readSpans(body);\n  if (spans.isEmpty())   return new MockResponse().setResponseCode(202);\n  logger.readSpans(spans.size());\n  try {\n    consumer.accept(spans,logger.acceptSpansCallback(spans));\n  }\n catch (  RuntimeException e) {\n    String message=logger.errorAcceptingSpans(spans,e);\n    return new MockResponse().setResponseCode(500).setBody(message);\n  }\n  return new MockResponse().setResponseCode(202);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 213,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1413,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 107,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (url.encodedPath().equals(\"/api/v1/spans\")) {\n  logger.acceptedMessage();\n  byte[] body=request.getBody().readByteArray();\n  String encoding=request.getHeader(\"Content-Encoding\");\n  if (encoding != null && encoding.contains(\"gzip\")) {\n    try {\n      Buffer result=new Buffer();\n      GzipSource source=new GzipSource(new Buffer().write(body));\n      while (source.read(result,Integer.MAX_VALUE) != -1)       ;\n      body=result.readByteArray();\n    }\n catch (    IOException e) {\n      String message=logger.errorReading(\"Cannot gunzip spans\",e);\n      return new MockResponse().setResponseCode(400).setBody(message);\n    }\n  }\n  logger.readBytes(body.length);\n  String type=request.getHeader(\"Content-Type\");\n  Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n  List<Span> spans=codec.readSpans(body);\n  if (spans.isEmpty())   return new MockResponse().setResponseCode(202);\n  logger.readSpans(spans.size());\n  try {\n    consumer.accept(spans,logger.acceptSpansCallback(spans));\n  }\n catch (  RuntimeException e) {\n    String message=logger.errorAcceptingSpans(spans,e);\n    return new MockResponse().setResponseCode(500).setBody(message);\n  }\n  return new MockResponse().setResponseCode(202);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 220,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1427,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    logger.acceptedMessage();\n    byte[] body=request.getBody().readByteArray();\n    String encoding=request.getHeader(\"Content-Encoding\");\n    if (encoding != null && encoding.contains(\"gzip\")) {\n      try {\n        Buffer result=new Buffer();\n        GzipSource source=new GzipSource(new Buffer().write(body));\n        while (source.read(result,Integer.MAX_VALUE) != -1)         ;\n        body=result.readByteArray();\n      }\n catch (      IOException e) {\n        String message=logger.errorReading(\"Cannot gunzip spans\",e);\n        return new MockResponse().setResponseCode(400).setBody(message);\n      }\n    }\n    logger.readBytes(body.length);\n    String type=request.getHeader(\"Content-Type\");\n    Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n    List<Span> spans=codec.readSpans(body);\n    if (spans.isEmpty())     return new MockResponse().setResponseCode(202);\n    logger.readSpans(spans.size());\n    try {\n      consumer.accept(spans,logger.acceptSpansCallback(spans));\n    }\n catch (    RuntimeException e) {\n      String message=logger.errorAcceptingSpans(spans,e);\n      return new MockResponse().setResponseCode(500).setBody(message);\n    }\n    return new MockResponse().setResponseCode(202);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 221,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1556,
        "startLineNumber" : 76,
        "startColumnNumber" : 11,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (request.getMethod().equals(\"POST\")) {\n  if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    logger.acceptedMessage();\n    byte[] body=request.getBody().readByteArray();\n    String encoding=request.getHeader(\"Content-Encoding\");\n    if (encoding != null && encoding.contains(\"gzip\")) {\n      try {\n        Buffer result=new Buffer();\n        GzipSource source=new GzipSource(new Buffer().write(body));\n        while (source.read(result,Integer.MAX_VALUE) != -1)         ;\n        body=result.readByteArray();\n      }\n catch (      IOException e) {\n        String message=logger.errorReading(\"Cannot gunzip spans\",e);\n        return new MockResponse().setResponseCode(400).setBody(message);\n      }\n    }\n    logger.readBytes(body.length);\n    String type=request.getHeader(\"Content-Type\");\n    Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n    List<Span> spans=codec.readSpans(body);\n    if (spans.isEmpty())     return new MockResponse().setResponseCode(202);\n    logger.readSpans(spans.size());\n    try {\n      consumer.accept(spans,logger.acceptSpansCallback(spans));\n    }\n catch (    RuntimeException e) {\n      String message=logger.errorAcceptingSpans(spans,e);\n      return new MockResponse().setResponseCode(500).setBody(message);\n    }\n    return new MockResponse().setResponseCode(202);\n  }\n}\n else {\n  return new MockResponse().setResponseCode(405);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 236,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3049,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (request.getMethod().equals(\"GET\")) {\n  if (url.encodedPath().equals(\"/health\")) {\n    return new MockResponse().setBody(\"OK\\n\");\n  }\n else   if (url.encodedPath().equals(\"/api/v1/services\")) {\n    return jsonResponse(Codec.JSON.writeStrings(store.getServiceNames()));\n  }\n else   if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    String serviceName=url.queryParameter(\"serviceName\");\n    return jsonResponse(Codec.JSON.writeStrings(store.getSpanNames(serviceName)));\n  }\n else   if (url.encodedPath().equals(\"/api/v1/dependencies\")) {\n    Long endTs=maybeLong(url.queryParameter(\"endTs\"));\n    Long lookback=maybeLong(url.queryParameter(\"lookback\"));\n    List<DependencyLink> result=store.getDependencies(endTs,lookback);\n    return jsonResponse(Codec.JSON.writeDependencyLinks(result));\n  }\n else   if (url.encodedPath().equals(\"/api/v1/traces\")) {\n    QueryRequest queryRequest=toQueryRequest(url);\n    return jsonResponse(Codec.JSON.writeTraces(store.getTraces(queryRequest)));\n  }\n else   if (url.encodedPath().startsWith(\"/api/v1/trace/\")) {\n    String traceId=url.encodedPath().replace(\"/api/v1/trace/\",\"\");\n    long id=new Buffer().writeUtf8(traceId).readHexadecimalUnsignedLong();\n    List<Span> trace=url.queryParameterNames().contains(\"raw\") ? store.getRawTrace(id) : store.getTrace(id);\n    if (trace != null)     return jsonResponse(Codec.JSON.writeSpans(trace));\n  }\n}\n else if (request.getMethod().equals(\"POST\")) {\n  if (url.encodedPath().equals(\"/api/v1/spans\")) {\n    logger.acceptedMessage();\n    byte[] body=request.getBody().readByteArray();\n    String encoding=request.getHeader(\"Content-Encoding\");\n    if (encoding != null && encoding.contains(\"gzip\")) {\n      try {\n        Buffer result=new Buffer();\n        GzipSource source=new GzipSource(new Buffer().write(body));\n        while (source.read(result,Integer.MAX_VALUE) != -1)         ;\n        body=result.readByteArray();\n      }\n catch (      IOException e) {\n        String message=logger.errorReading(\"Cannot gunzip spans\",e);\n        return new MockResponse().setResponseCode(400).setBody(message);\n      }\n    }\n    logger.readBytes(body.length);\n    String type=request.getHeader(\"Content-Type\");\n    Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n    List<Span> spans=codec.readSpans(body);\n    if (spans.isEmpty())     return new MockResponse().setResponseCode(202);\n    logger.readSpans(spans.size());\n    try {\n      consumer.accept(spans,logger.acceptSpansCallback(spans));\n    }\n catch (    RuntimeException e) {\n      String message=logger.errorAcceptingSpans(spans,e);\n      return new MockResponse().setResponseCode(500).setBody(message);\n    }\n    return new MockResponse().setResponseCode(202);\n  }\n}\n else {\n  return new MockResponse().setResponseCode(405);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 455,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3160,
        "startLineNumber" : 51,
        "startColumnNumber" : 56,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HttpUrl url=server.url(request.getPath());\n  if (request.getMethod().equals(\"GET\")) {\n    if (url.encodedPath().equals(\"/health\")) {\n      return new MockResponse().setBody(\"OK\\n\");\n    }\n else     if (url.encodedPath().equals(\"/api/v1/services\")) {\n      return jsonResponse(Codec.JSON.writeStrings(store.getServiceNames()));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      String serviceName=url.queryParameter(\"serviceName\");\n      return jsonResponse(Codec.JSON.writeStrings(store.getSpanNames(serviceName)));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/dependencies\")) {\n      Long endTs=maybeLong(url.queryParameter(\"endTs\"));\n      Long lookback=maybeLong(url.queryParameter(\"lookback\"));\n      List<DependencyLink> result=store.getDependencies(endTs,lookback);\n      return jsonResponse(Codec.JSON.writeDependencyLinks(result));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/traces\")) {\n      QueryRequest queryRequest=toQueryRequest(url);\n      return jsonResponse(Codec.JSON.writeTraces(store.getTraces(queryRequest)));\n    }\n else     if (url.encodedPath().startsWith(\"/api/v1/trace/\")) {\n      String traceId=url.encodedPath().replace(\"/api/v1/trace/\",\"\");\n      long id=new Buffer().writeUtf8(traceId).readHexadecimalUnsignedLong();\n      List<Span> trace=url.queryParameterNames().contains(\"raw\") ? store.getRawTrace(id) : store.getTrace(id);\n      if (trace != null)       return jsonResponse(Codec.JSON.writeSpans(trace));\n    }\n  }\n else   if (request.getMethod().equals(\"POST\")) {\n    if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      logger.acceptedMessage();\n      byte[] body=request.getBody().readByteArray();\n      String encoding=request.getHeader(\"Content-Encoding\");\n      if (encoding != null && encoding.contains(\"gzip\")) {\n        try {\n          Buffer result=new Buffer();\n          GzipSource source=new GzipSource(new Buffer().write(body));\n          while (source.read(result,Integer.MAX_VALUE) != -1)           ;\n          body=result.readByteArray();\n        }\n catch (        IOException e) {\n          String message=logger.errorReading(\"Cannot gunzip spans\",e);\n          return new MockResponse().setResponseCode(400).setBody(message);\n        }\n      }\n      logger.readBytes(body.length);\n      String type=request.getHeader(\"Content-Type\");\n      Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n      List<Span> spans=codec.readSpans(body);\n      if (spans.isEmpty())       return new MockResponse().setResponseCode(202);\n      logger.readSpans(spans.size());\n      try {\n        consumer.accept(spans,logger.acceptSpansCallback(spans));\n      }\n catch (      RuntimeException e) {\n        String message=logger.errorAcceptingSpans(spans,e);\n        return new MockResponse().setResponseCode(500).setBody(message);\n      }\n      return new MockResponse().setResponseCode(202);\n    }\n  }\n else {\n    return new MockResponse().setResponseCode(405);\n  }\n  return new MockResponse().setResponseCode(404);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 474,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3226,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 112,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public MockResponse dispatch(RecordedRequest request){\n  HttpUrl url=server.url(request.getPath());\n  if (request.getMethod().equals(\"GET\")) {\n    if (url.encodedPath().equals(\"/health\")) {\n      return new MockResponse().setBody(\"OK\\n\");\n    }\n else     if (url.encodedPath().equals(\"/api/v1/services\")) {\n      return jsonResponse(Codec.JSON.writeStrings(store.getServiceNames()));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      String serviceName=url.queryParameter(\"serviceName\");\n      return jsonResponse(Codec.JSON.writeStrings(store.getSpanNames(serviceName)));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/dependencies\")) {\n      Long endTs=maybeLong(url.queryParameter(\"endTs\"));\n      Long lookback=maybeLong(url.queryParameter(\"lookback\"));\n      List<DependencyLink> result=store.getDependencies(endTs,lookback);\n      return jsonResponse(Codec.JSON.writeDependencyLinks(result));\n    }\n else     if (url.encodedPath().equals(\"/api/v1/traces\")) {\n      QueryRequest queryRequest=toQueryRequest(url);\n      return jsonResponse(Codec.JSON.writeTraces(store.getTraces(queryRequest)));\n    }\n else     if (url.encodedPath().startsWith(\"/api/v1/trace/\")) {\n      String traceId=url.encodedPath().replace(\"/api/v1/trace/\",\"\");\n      long id=new Buffer().writeUtf8(traceId).readHexadecimalUnsignedLong();\n      List<Span> trace=url.queryParameterNames().contains(\"raw\") ? store.getRawTrace(id) : store.getTrace(id);\n      if (trace != null)       return jsonResponse(Codec.JSON.writeSpans(trace));\n    }\n  }\n else   if (request.getMethod().equals(\"POST\")) {\n    if (url.encodedPath().equals(\"/api/v1/spans\")) {\n      logger.acceptedMessage();\n      byte[] body=request.getBody().readByteArray();\n      String encoding=request.getHeader(\"Content-Encoding\");\n      if (encoding != null && encoding.contains(\"gzip\")) {\n        try {\n          Buffer result=new Buffer();\n          GzipSource source=new GzipSource(new Buffer().write(body));\n          while (source.read(result,Integer.MAX_VALUE) != -1)           ;\n          body=result.readByteArray();\n        }\n catch (        IOException e) {\n          String message=logger.errorReading(\"Cannot gunzip spans\",e);\n          return new MockResponse().setResponseCode(400).setBody(message);\n        }\n      }\n      logger.readBytes(body.length);\n      String type=request.getHeader(\"Content-Type\");\n      Codec codec=type != null && type.contains(\"/x-thrift\") ? Codec.THRIFT : Codec.JSON;\n      List<Span> spans=codec.readSpans(body);\n      if (spans.isEmpty())       return new MockResponse().setResponseCode(202);\n      logger.readSpans(spans.size());\n      try {\n        consumer.accept(spans,logger.acceptSpansCallback(spans));\n      }\n catch (      RuntimeException e) {\n        String message=logger.errorAcceptingSpans(spans,e);\n        return new MockResponse().setResponseCode(500).setBody(message);\n      }\n      return new MockResponse().setResponseCode(202);\n    }\n  }\n else {\n    return new MockResponse().setResponseCode(405);\n  }\n  return new MockResponse().setResponseCode(404);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 485,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 57
      },
      "nodeContext" : "encoding != null && encoding.contains(\"gzip\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 81,
    "startColumnNumber" : 12,
    "endLineNumber" : 81,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 81,
    "startColumnNumber" : 32,
    "endLineNumber" : 81,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}