{
  "id" : 17,
  "expression" : "this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable()",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 92,
      "startLineNumber" : 241,
      "startColumnNumber" : 12,
      "endLineNumber" : 241,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 10,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 240,
        "startColumnNumber" : 58,
        "endLineNumber" : 241,
        "endColumnNumber" : 104
      },
      "nodeContext" : "channelInfoTable=this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 240,
        "startColumnNumber" : 8,
        "endLineNumber" : 241,
        "endColumnNumber" : 105
      },
      "nodeContext" : "ConcurrentMap<RemotingChannel,ClientChannelInfo> channelInfoTable=this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3584,
        "startLineNumber" : 228,
        "startColumnNumber" : 95,
        "endLineNumber" : 296,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final RemotingCommand result=RemotingCommand.createResponseCommand(null);\n  GetConsumerStatusRequestHeader requestHeader=new GetConsumerStatusRequestHeader();\n  requestHeader.setTopic(topic);\n  requestHeader.setGroup(group);\n  RemotingCommand request=RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_STATUS_FROM_CLIENT,requestHeader);\n  Map<String,Map<MessageQueue,Long>> consumerStatusTable=new HashMap<String,Map<MessageQueue,Long>>();\n  ConcurrentMap<RemotingChannel,ClientChannelInfo> channelInfoTable=this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable();\n  if (null == channelInfoTable || channelInfoTable.isEmpty()) {\n    result.setCode(ResponseCode.SYSTEM_ERROR);\n    result.setRemark(String.format(\"No Any Consumer online in the consumer group: [%s]\",group));\n    return result;\n  }\n  for (  Map.Entry<RemotingChannel,ClientChannelInfo> entry : channelInfoTable.entrySet()) {\n    int version=entry.getValue().getVersion();\n    String clientId=entry.getValue().getClientId();\n    if (version < MQVersion.Version.V3_0_7_SNAPSHOT.ordinal()) {\n      result.setCode(ResponseCode.SYSTEM_ERROR);\n      result.setRemark(\"the client does not support this feature. version=\" + MQVersion.getVersionDesc(version));\n      log.warn(\"[get-consumer-status] the client does not support this feature. version={}\",RemotingHelper.parseChannelRemoteAddr(entry.getKey().remoteAddress()),MQVersion.getVersionDesc(version));\n      return result;\n    }\n else     if (UtilAll.isBlank(originClientId) || originClientId.equals(clientId)) {\n      try {\n        RemotingCommand response=this.brokerController.getRemotingServer().invokeSync(entry.getKey(),request,5000);\n        assert response != null;\nswitch (response.getCode()) {\ncase ResponseCode.SUCCESS:{\n            if (response.getBody() != null) {\n              GetConsumerStatusBody body=GetConsumerStatusBody.decode(response.getBody(),GetConsumerStatusBody.class);\n              consumerStatusTable.put(clientId,body.getMessageQueueTable());\n              log.info(\"[get-consumer-status] get consumer status success. topic={}, group={}, channelRemoteAddr={}\",topic,group,clientId);\n            }\n          }\ndefault:        break;\n    }\n  }\n catch (  Exception e) {\n    log.error(\"[get-consumer-status] get consumer status exception. topic={}, group={}, offset={}\",new Object[]{topic,group},e);\n  }\n  if (!UtilAll.isBlank(originClientId) && originClientId.equals(clientId)) {\n    break;\n  }\n}\n}\nresult.setCode(ResponseCode.SUCCESS);\nGetConsumerStatusBody resBody=new GetConsumerStatusBody();\nresBody.setConsumerTable(consumerStatusTable);\nresult.setBody(resBody.encode());\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3675,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 296,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RemotingCommand getConsumeStatus(String topic,String group,String originClientId){\n  final RemotingCommand result=RemotingCommand.createResponseCommand(null);\n  GetConsumerStatusRequestHeader requestHeader=new GetConsumerStatusRequestHeader();\n  requestHeader.setTopic(topic);\n  requestHeader.setGroup(group);\n  RemotingCommand request=RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_STATUS_FROM_CLIENT,requestHeader);\n  Map<String,Map<MessageQueue,Long>> consumerStatusTable=new HashMap<String,Map<MessageQueue,Long>>();\n  ConcurrentMap<RemotingChannel,ClientChannelInfo> channelInfoTable=this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable();\n  if (null == channelInfoTable || channelInfoTable.isEmpty()) {\n    result.setCode(ResponseCode.SYSTEM_ERROR);\n    result.setRemark(String.format(\"No Any Consumer online in the consumer group: [%s]\",group));\n    return result;\n  }\n  for (  Map.Entry<RemotingChannel,ClientChannelInfo> entry : channelInfoTable.entrySet()) {\n    int version=entry.getValue().getVersion();\n    String clientId=entry.getValue().getClientId();\n    if (version < MQVersion.Version.V3_0_7_SNAPSHOT.ordinal()) {\n      result.setCode(ResponseCode.SYSTEM_ERROR);\n      result.setRemark(\"the client does not support this feature. version=\" + MQVersion.getVersionDesc(version));\n      log.warn(\"[get-consumer-status] the client does not support this feature. version={}\",RemotingHelper.parseChannelRemoteAddr(entry.getKey().remoteAddress()),MQVersion.getVersionDesc(version));\n      return result;\n    }\n else     if (UtilAll.isBlank(originClientId) || originClientId.equals(clientId)) {\n      try {\n        RemotingCommand response=this.brokerController.getRemotingServer().invokeSync(entry.getKey(),request,5000);\n        assert response != null;\nswitch (response.getCode()) {\ncase ResponseCode.SUCCESS:{\n            if (response.getBody() != null) {\n              GetConsumerStatusBody body=GetConsumerStatusBody.decode(response.getBody(),GetConsumerStatusBody.class);\n              consumerStatusTable.put(clientId,body.getMessageQueueTable());\n              log.info(\"[get-consumer-status] get consumer status success. topic={}, group={}, channelRemoteAddr={}\",topic,group,clientId);\n            }\n          }\ndefault:        break;\n    }\n  }\n catch (  Exception e) {\n    log.error(\"[get-consumer-status] get consumer status exception. topic={}, group={}, offset={}\",new Object[]{topic,group},e);\n  }\n  if (!UtilAll.isBlank(originClientId) && originClientId.equals(clientId)) {\n    break;\n  }\n}\n}\nresult.setCode(ResponseCode.SUCCESS);\nGetConsumerStatusBody resBody=new GetConsumerStatusBody();\nresBody.setConsumerTable(consumerStatusTable);\nresult.setBody(resBody.encode());\nreturn result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 359,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 240,
        "startColumnNumber" : 58,
        "endLineNumber" : 241,
        "endColumnNumber" : 104
      },
      "nodeContext" : "channelInfoTable=this.brokerController.getConsumerManager().getConsumerGroupInfo(group).getChannelInfoTable()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "java.util.concurrent.ConcurrentMap<org.apache.rocketmq.remoting.RemotingChannel,org.apache.rocketmq.broker.client.ClientChannelInfo>"
  } ],
  "positionList" : [ {
    "charLength" : 92,
    "startLineNumber" : 241,
    "startColumnNumber" : 12,
    "endLineNumber" : 241,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ ]
}