{
  "id" : 51,
  "expression" : "'_'",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/jute/compiler/CppGenerator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'_'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 63,
      "startColumnNumber" : 62,
      "endLineNumber" : 63,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 63,
        "startColumnNumber" : 30,
        "endLineNumber" : 63,
        "endColumnNumber" : 66
      },
      "nodeContext" : "mName.toUpperCase().replace('.','_')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 63,
        "startColumnNumber" : 17,
        "endLineNumber" : 63,
        "endColumnNumber" : 73
      },
      "nodeContext" : "\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 74
      },
      "nodeContext" : "hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 75
      },
      "nodeContext" : "hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 75
      },
      "nodeContext" : "hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "char"
  }, {
    "nodeContext" : "'_'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 64,
      "startColumnNumber" : 62,
      "endLineNumber" : 64,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 64,
        "startColumnNumber" : 30,
        "endLineNumber" : 64,
        "endColumnNumber" : 66
      },
      "nodeContext" : "mName.toUpperCase().replace('.','_')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 64,
        "startColumnNumber" : 17,
        "endLineNumber" : 64,
        "endColumnNumber" : 73
      },
      "nodeContext" : "\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 74
      },
      "nodeContext" : "hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 75
      },
      "nodeContext" : "hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 75
      },
      "nodeContext" : "hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "char"
  }, {
    "nodeContext" : "'_'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 78,
      "startColumnNumber" : 61,
      "endLineNumber" : 78,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 78,
        "startColumnNumber" : 29,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mName.toUpperCase().replace('.','_')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 78,
        "startColumnNumber" : 17,
        "endLineNumber" : 78,
        "endColumnNumber" : 72
      },
      "nodeContext" : "\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 73
      },
      "nodeContext" : "hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 74
      },
      "nodeContext" : "hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1176,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Generate C++ code. This method only creates the requested file(s) and spits-out file-level elements (such as include statements etc.) record-level code is generated by JRecord.\n */\nvoid genCode() throws IOException {\n  outputDirectory.mkdirs();\n  FileWriter cc=new FileWriter(new File(outputDirectory,mName + \".cc\"));\n  FileWriter hh=new FileWriter(new File(outputDirectory,mName + \".hh\"));\n  hh.write(\"#ifndef __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#define __\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.write(\"#include \\\"recordio.hh\\\"\\n\");\n  for (Iterator i=mInclFiles.iterator(); i.hasNext(); ) {\n    JFile f=(JFile)i.next();\n    hh.write(\"#include \\\"\" + f.getName() + \".hh\\\"\\n\");\n  }\n  cc.write(\"#include \\\"\" + mName + \".hh\\\"\\n\");\n  for (Iterator i=mRecList.iterator(); i.hasNext(); ) {\n    JRecord jr=(JRecord)i.next();\n    jr.genCppCode(hh,cc);\n  }\n  hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n  hh.close();\n  cc.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 74
      },
      "nodeContext" : "hh.write(\"#endif //\" + mName.toUpperCase().replace('.','_') + \"__\\n\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 63,
    "startColumnNumber" : 62,
    "endLineNumber" : 63,
    "endColumnNumber" : 65
  }, {
    "charLength" : 3,
    "startLineNumber" : 64,
    "startColumnNumber" : 62,
    "endLineNumber" : 64,
    "endColumnNumber" : 65
  }, {
    "charLength" : 3,
    "startLineNumber" : 78,
    "startColumnNumber" : 61,
    "endLineNumber" : 78,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}