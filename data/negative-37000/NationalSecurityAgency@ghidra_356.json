{
  "id" : 356,
  "expression" : "input.getValue()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/Docking/src/test.slow/java/docking/widgets/textfield/HexOrDecimalInputTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "input.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 51,
      "startColumnNumber" : 13,
      "endLineNumber" : 51,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 45,
        "startColumnNumber" : 36,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testSetAllowNegative(){\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Long"
  }, {
    "nodeContext" : "input.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 54,
      "startColumnNumber" : 13,
      "endLineNumber" : 54,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(input.getValue(),nullValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 45,
        "startColumnNumber" : 36,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testSetAllowNegative(){\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 54,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Long"
  }, {
    "nodeContext" : "input.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 58,
      "startColumnNumber" : 13,
      "endLineNumber" : 58,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 45,
        "startColumnNumber" : 36,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testSetAllowNegative(){\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Long"
  }, {
    "nodeContext" : "input.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 62,
      "startColumnNumber" : 13,
      "endLineNumber" : 62,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertThat(input.getValue(),nullValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 45,
        "startColumnNumber" : 36,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testSetAllowNegative(){\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),nullValue());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Long"
  }, {
    "nodeContext" : "input.getValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 67,
      "startColumnNumber" : 13,
      "endLineNumber" : 67,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 572,
        "startLineNumber" : 45,
        "startColumnNumber" : 36,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 615,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 68,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testSetAllowNegative(){\n  HexOrDecimalInput input=new HexOrDecimalInput();\n  Long newValue=-1L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  input.setAllowNegative(false);\n  assertThat(input.getValue(),nullValue());\n  newValue=20L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),nullValue());\n  input.setAllowNegative(true);\n  newValue=-100L;\n  input.setValue(newValue);\n  assertThat(input.getValue(),is(newValue));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 67,
        "startColumnNumber" : 2,
        "endLineNumber" : 67,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(input.getValue(),is(newValue));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Long"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 51,
    "startColumnNumber" : 13,
    "endLineNumber" : 51,
    "endColumnNumber" : 29
  }, {
    "charLength" : 16,
    "startLineNumber" : 54,
    "startColumnNumber" : 13,
    "endLineNumber" : 54,
    "endColumnNumber" : 29
  }, {
    "charLength" : 16,
    "startLineNumber" : 58,
    "startColumnNumber" : 13,
    "endLineNumber" : 58,
    "endColumnNumber" : 29
  }, {
    "charLength" : 16,
    "startLineNumber" : 62,
    "startColumnNumber" : 13,
    "endLineNumber" : 62,
    "endColumnNumber" : 29
  }, {
    "charLength" : 16,
    "startLineNumber" : 67,
    "startColumnNumber" : 13,
    "endLineNumber" : 67,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}