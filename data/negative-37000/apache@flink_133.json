{
  "id" : 133,
  "expression" : "testFileContent",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/test/java/org/apache/flink/runtime/filecache/FileCacheDirectoriesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "testFileContent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 93,
      "startColumnNumber" : 40,
      "endLineNumber" : 93,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 93,
        "startColumnNumber" : 40,
        "endLineNumber" : 93,
        "endColumnNumber" : 88
      },
      "nodeContext" : "testFileContent.getBytes(StandardCharsets.UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 92,
        "startColumnNumber" : 32,
        "endLineNumber" : 93,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 91,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Files.copy(new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8)),containedFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 91,
        "startColumnNumber" : 24,
        "endLineNumber" : 94,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Files.copy(new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8)),containedFile);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 87,
        "startColumnNumber" : 54,
        "endLineNumber" : 100,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  final java.nio.file.Path directory=temporaryFolder.newFolder(\"zipArchive\").toPath();\n  final java.nio.file.Path containedFile=directory.resolve(\"cacheFile\");\n  Files.copy(new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8)),containedFile);\n  Path zipPath=FileUtils.compressDirectory(new Path(directory.toString()),new Path(directory + \".zip\"));\n  return new File(zipPath.getPath());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (key.equals(permanentBlobKey)) {\n  final java.nio.file.Path directory=temporaryFolder.newFolder(\"zipArchive\").toPath();\n  final java.nio.file.Path containedFile=directory.resolve(\"cacheFile\");\n  Files.copy(new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8)),containedFile);\n  Path zipPath=FileUtils.compressDirectory(new Path(directory.toString()),new Path(directory + \".zip\"));\n  return new File(zipPath.getPath());\n}\n else {\n  throw new IllegalArgumentException(\"This service contains only entry for \" + permanentBlobKey);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1055,
        "startLineNumber" : 86,
        "startColumnNumber" : 90,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (key.equals(permanentBlobKey)) {\n    final java.nio.file.Path directory=temporaryFolder.newFolder(\"zipArchive\").toPath();\n    final java.nio.file.Path containedFile=directory.resolve(\"cacheFile\");\n    Files.copy(new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8)),containedFile);\n    Path zipPath=FileUtils.compressDirectory(new Path(directory.toString()),new Path(directory + \".zip\"));\n    return new File(zipPath.getPath());\n  }\n else {\n    throw new IllegalArgumentException(\"This service contains only entry for \" + permanentBlobKey);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1155,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 104,
        "endColumnNumber" : 17
      },
      "nodeContext" : "@Override public File getFile(JobID jobId,PermanentBlobKey key) throws IOException {\n  if (key.equals(permanentBlobKey)) {\n    final java.nio.file.Path directory=temporaryFolder.newFolder(\"zipArchive\").toPath();\n    final java.nio.file.Path containedFile=directory.resolve(\"cacheFile\");\n    Files.copy(new ByteArrayInputStream(testFileContent.getBytes(StandardCharsets.UTF_8)),containedFile);\n    Path zipPath=FileUtils.compressDirectory(new Path(directory.toString()),new Path(directory + \".zip\"));\n    return new File(zipPath.getPath());\n  }\n else {\n    throw new IllegalArgumentException(\"This service contains only entry for \" + permanentBlobKey);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 93,
        "startColumnNumber" : 40,
        "endLineNumber" : 93,
        "endColumnNumber" : 88
      },
      "nodeContext" : "testFileContent.getBytes(StandardCharsets.UTF_8)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 93,
    "startColumnNumber" : 40,
    "endLineNumber" : 93,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}