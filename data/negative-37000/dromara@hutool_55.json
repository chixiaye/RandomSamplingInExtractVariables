{
  "id" : 55,
  "expression" : "false",
  "projectName" : "dromara@hutool",
  "commitID" : "c99b48a4c4a6121eaad38ca9706953d7ce7c3a77",
  "filePath" : "/hutool-core/src/main/java/cn/hutool/core/convert/NumberWordFormatter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 67,
      "startColumnNumber" : 7,
      "endLineNumber" : 67,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 67,
        "startColumnNumber" : 7,
        "endLineNumber" : 67,
        "endColumnNumber" : 34
      },
      "nodeContext" : "false == \"000\".equals(a[i])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 67,
        "startColumnNumber" : 3,
        "endLineNumber" : 78,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (false == \"000\".equals(a[i])) {\n  if (i != 0) {\n    lm.insert(0,transThree(a[i]) + \" \" + parseMore(i)+ \" \");\n  }\n else {\n    lm=new StringBuilder(transThree(a[i]));\n  }\n}\n else {\n  lm.append(transThree(a[i]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 65,
        "startColumnNumber" : 49,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  a[i]=StrUtil.reverse(lstrrev.substring(3 * i,3 * i + 3));\n  if (false == \"000\".equals(a[i])) {\n    if (i != 0) {\n      lm.insert(0,transThree(a[i]) + \" \" + parseMore(i)+ \" \");\n    }\n else {\n      lm=new StringBuilder(transThree(a[i]));\n    }\n  }\n else {\n    lm.append(transThree(a[i]));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 79,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lstrrev.length() / 3; i++) {\n  a[i]=StrUtil.reverse(lstrrev.substring(3 * i,3 * i + 3));\n  if (false == \"000\".equals(a[i])) {\n    if (i != 0) {\n      lm.insert(0,transThree(a[i]) + \" \" + parseMore(i)+ \" \");\n    }\n else {\n      lm=new StringBuilder(transThree(a[i]));\n    }\n  }\n else {\n    lm.append(transThree(a[i]));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 88,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1196,
        "startLineNumber" : 42,
        "startColumnNumber" : 40,
        "endLineNumber" : 87,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int z=x.indexOf(\".\");\n  String lstr, rstr=\"\";\n  if (z > -1) {\n    lstr=x.substring(0,z);\n    rstr=x.substring(z + 1);\n  }\n else {\n    lstr=x;\n  }\n  String lstrrev=StrUtil.reverse(lstr);\n  String[] a=new String[5];\nswitch (lstrrev.length() % 3) {\ncase 1:    lstrrev+=\"00\";\n  break;\ncase 2:lstrrev+=\"0\";\nbreak;\n}\nStringBuilder lm=new StringBuilder();\nfor (int i=0; i < lstrrev.length() / 3; i++) {\na[i]=StrUtil.reverse(lstrrev.substring(3 * i,3 * i + 3));\nif (false == \"000\".equals(a[i])) {\nif (i != 0) {\nlm.insert(0,transThree(a[i]) + \" \" + parseMore(i)+ \" \");\n}\n else {\nlm=new StringBuilder(transThree(a[i]));\n}\n}\n else {\nlm.append(transThree(a[i]));\n}\n}\nString xs=\"\";\nif (z > -1) {\nxs=\"AND CENTS \" + transTwo(rstr) + \" \";\n}\nreturn lm.toString().trim() + \" \" + xs+ \"ONLY\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 214,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1313,
        "startLineNumber" : 36,
        "startColumnNumber" : 1,
        "endLineNumber" : 87,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * 将阿拉伯数字转为英文表达式\n * @param x 阿拉伯数字字符串\n * @return 英文表达式\n */\nprivate static String format(String x){\n  int z=x.indexOf(\".\");\n  String lstr, rstr=\"\";\n  if (z > -1) {\n    lstr=x.substring(0,z);\n    rstr=x.substring(z + 1);\n  }\n else {\n    lstr=x;\n  }\n  String lstrrev=StrUtil.reverse(lstr);\n  String[] a=new String[5];\nswitch (lstrrev.length() % 3) {\ncase 1:    lstrrev+=\"00\";\n  break;\ncase 2:lstrrev+=\"0\";\nbreak;\n}\nStringBuilder lm=new StringBuilder();\nfor (int i=0; i < lstrrev.length() / 3; i++) {\na[i]=StrUtil.reverse(lstrrev.substring(3 * i,3 * i + 3));\nif (false == \"000\".equals(a[i])) {\nif (i != 0) {\nlm.insert(0,transThree(a[i]) + \" \" + parseMore(i)+ \" \");\n}\n else {\nlm=new StringBuilder(transThree(a[i]));\n}\n}\n else {\nlm.append(transThree(a[i]));\n}\n}\nString xs=\"\";\nif (z > -1) {\nxs=\"AND CENTS \" + transTwo(rstr) + \" \";\n}\nreturn lm.toString().trim() + \" \" + xs+ \"ONLY\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 225,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 67,
        "startColumnNumber" : 7,
        "endLineNumber" : 67,
        "endColumnNumber" : 34
      },
      "nodeContext" : "false == \"000\".equals(a[i])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 67,
    "startColumnNumber" : 7,
    "endLineNumber" : 67,
    "endColumnNumber" : 12
  } ],
  "layoutRelationDataList" : [ ]
}