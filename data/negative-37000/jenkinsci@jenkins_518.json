{
  "id" : 518,
  "expression" : "InsufficientAuthenticationException",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/org/acegisecurity/AuthenticationException.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "InsufficientAuthenticationException",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 90,
      "startColumnNumber" : 19,
      "endLineNumber" : 90,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 90,
        "startColumnNumber" : 19,
        "endLineNumber" : 90,
        "endColumnNumber" : 150
      },
      "nodeContext" : "InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 151
      },
      "nodeContext" : "return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 89,
        "startColumnNumber" : 113,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1211,
        "startLineNumber" : 89,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n else if (x instanceof org.springframework.security.authentication.LockedException) {\n  return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n}\n else if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n  return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n}\n else if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n  return (DataAccessException)x.getCause();\n}\n else if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n  return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n}\n else {\n  return new AuthenticationException(x.toString(),x){\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1426,
        "startLineNumber" : 87,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x instanceof org.springframework.security.authentication.DisabledException) {\n  return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n}\n else if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n else if (x instanceof org.springframework.security.authentication.LockedException) {\n  return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n}\n else if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n  return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n}\n else if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n  return (DataAccessException)x.getCause();\n}\n else if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n  return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n}\n else {\n  return new AuthenticationException(x.toString(),x){\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 184,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1671,
        "startLineNumber" : 85,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x instanceof org.springframework.security.authentication.CredentialsExpiredException) {\n  return CredentialsExpiredException.fromSpring((org.springframework.security.authentication.CredentialsExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.DisabledException) {\n  return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n}\n else if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n else if (x instanceof org.springframework.security.authentication.LockedException) {\n  return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n}\n else if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n  return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n}\n else if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n  return (DataAccessException)x.getCause();\n}\n else if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n  return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n}\n else {\n  return new AuthenticationException(x.toString(),x){\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 214,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1904,
        "startLineNumber" : 83,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x instanceof org.springframework.security.authentication.AccountExpiredException) {\n  return AccountExpiredException.fromSpring((org.springframework.security.authentication.AccountExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.CredentialsExpiredException) {\n  return CredentialsExpiredException.fromSpring((org.springframework.security.authentication.CredentialsExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.DisabledException) {\n  return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n}\n else if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n else if (x instanceof org.springframework.security.authentication.LockedException) {\n  return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n}\n else if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n  return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n}\n else if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n  return (DataAccessException)x.getCause();\n}\n else if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n  return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n}\n else {\n  return new AuthenticationException(x.toString(),x){\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 244,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2158,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x instanceof org.springframework.security.authentication.AuthenticationServiceException) {\n  return AuthenticationServiceException.fromSpring((org.springframework.security.authentication.AuthenticationServiceException)x);\n}\n else if (x instanceof org.springframework.security.authentication.AccountExpiredException) {\n  return AccountExpiredException.fromSpring((org.springframework.security.authentication.AccountExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.CredentialsExpiredException) {\n  return CredentialsExpiredException.fromSpring((org.springframework.security.authentication.CredentialsExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.DisabledException) {\n  return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n}\n else if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n else if (x instanceof org.springframework.security.authentication.LockedException) {\n  return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n}\n else if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n  return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n}\n else if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n  return (DataAccessException)x.getCause();\n}\n else if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n  return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n}\n else {\n  return new AuthenticationException(x.toString(),x){\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 274,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2391,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 101,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (x instanceof org.springframework.security.authentication.BadCredentialsException) {\n  return BadCredentialsException.fromSpring((org.springframework.security.authentication.BadCredentialsException)x);\n}\n else if (x instanceof org.springframework.security.authentication.AuthenticationServiceException) {\n  return AuthenticationServiceException.fromSpring((org.springframework.security.authentication.AuthenticationServiceException)x);\n}\n else if (x instanceof org.springframework.security.authentication.AccountExpiredException) {\n  return AccountExpiredException.fromSpring((org.springframework.security.authentication.AccountExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.CredentialsExpiredException) {\n  return CredentialsExpiredException.fromSpring((org.springframework.security.authentication.CredentialsExpiredException)x);\n}\n else if (x instanceof org.springframework.security.authentication.DisabledException) {\n  return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n}\n else if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n  return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n}\n else if (x instanceof org.springframework.security.authentication.LockedException) {\n  return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n}\n else if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n  return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n}\n else if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n  return (DataAccessException)x.getCause();\n}\n else if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n  return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n}\n else {\n  return new AuthenticationException(x.toString(),x){\n  }\n;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 304,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2409,
        "startLineNumber" : 78,
        "startColumnNumber" : 107,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (x instanceof org.springframework.security.authentication.BadCredentialsException) {\n    return BadCredentialsException.fromSpring((org.springframework.security.authentication.BadCredentialsException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.AuthenticationServiceException) {\n    return AuthenticationServiceException.fromSpring((org.springframework.security.authentication.AuthenticationServiceException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.AccountExpiredException) {\n    return AccountExpiredException.fromSpring((org.springframework.security.authentication.AccountExpiredException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.CredentialsExpiredException) {\n    return CredentialsExpiredException.fromSpring((org.springframework.security.authentication.CredentialsExpiredException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.DisabledException) {\n    return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n    return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.LockedException) {\n    return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n    return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n  }\n else   if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n    return (DataAccessException)x.getCause();\n  }\n else   if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n    return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n  }\n else {\n    return new AuthenticationException(x.toString(),x){\n    }\n;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2621,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @return either an {@link AuthenticationException} or a {@link DataAccessException}\n */\npublic static RuntimeException fromSpring(org.springframework.security.core.AuthenticationException x){\n  if (x instanceof org.springframework.security.authentication.BadCredentialsException) {\n    return BadCredentialsException.fromSpring((org.springframework.security.authentication.BadCredentialsException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.AuthenticationServiceException) {\n    return AuthenticationServiceException.fromSpring((org.springframework.security.authentication.AuthenticationServiceException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.AccountExpiredException) {\n    return AccountExpiredException.fromSpring((org.springframework.security.authentication.AccountExpiredException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.CredentialsExpiredException) {\n    return CredentialsExpiredException.fromSpring((org.springframework.security.authentication.CredentialsExpiredException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.DisabledException) {\n    return DisabledException.fromSpring((org.springframework.security.authentication.DisabledException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.InsufficientAuthenticationException) {\n    return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.LockedException) {\n    return LockedException.fromSpring((org.springframework.security.authentication.LockedException)x);\n  }\n else   if (x instanceof org.springframework.security.authentication.ProviderNotFoundException) {\n    return ProviderNotFoundException.fromSpring((org.springframework.security.authentication.ProviderNotFoundException)x);\n  }\n else   if (x instanceof UserMayOrMayNotExistException2 && x.getCause() instanceof DataAccessException) {\n    return (DataAccessException)x.getCause();\n  }\n else   if (x instanceof org.springframework.security.core.userdetails.UsernameNotFoundException) {\n    return UsernameNotFoundException.fromSpring((org.springframework.security.core.userdetails.UsernameNotFoundException)x);\n  }\n else {\n    return new AuthenticationException(x.toString(),x){\n    }\n;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 90,
        "endColumnNumber" : 151
      },
      "nodeContext" : "return InsufficientAuthenticationException.fromSpring((org.springframework.security.authentication.InsufficientAuthenticationException)x);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 16,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "org.acegisecurity.InsufficientAuthenticationException"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 90,
    "startColumnNumber" : 19,
    "endLineNumber" : 90,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}