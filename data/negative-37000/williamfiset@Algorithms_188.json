{
  "id" : 188,
  "expression" : "n",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/PrimeFactorization.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 10,
      "startColumnNumber" : 8,
      "endLineNumber" : 10,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 10,
        "startColumnNumber" : 8,
        "endLineNumber" : 10,
        "endColumnNumber" : 14
      },
      "nodeContext" : "n <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 10,
        "startColumnNumber" : 4,
        "endLineNumber" : 11,
        "endColumnNumber" : 36
      },
      "nodeContext" : "if (n <= 0) throw new IllegalArgumentException();\n else if (n == 1) return factors;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 8,
        "startColumnNumber" : 59,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 8,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 10,
        "startColumnNumber" : 8,
        "endLineNumber" : 10,
        "endColumnNumber" : 14
      },
      "nodeContext" : "n <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 11,
      "startColumnNumber" : 13,
      "endLineNumber" : 11,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 11,
        "startColumnNumber" : 13,
        "endLineNumber" : 11,
        "endColumnNumber" : 19
      },
      "nodeContext" : "n == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 11,
        "startColumnNumber" : 9,
        "endLineNumber" : 11,
        "endColumnNumber" : 36
      },
      "nodeContext" : "if (n == 1) return factors;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 10,
        "startColumnNumber" : 4,
        "endLineNumber" : 11,
        "endColumnNumber" : 36
      },
      "nodeContext" : "if (n <= 0) throw new IllegalArgumentException();\n else if (n == 1) return factors;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 8,
        "startColumnNumber" : 59,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 8,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 11,
        "startColumnNumber" : 9,
        "endLineNumber" : 11,
        "endColumnNumber" : 36
      },
      "nodeContext" : "if (n == 1) return factors;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "n",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 13,
      "startColumnNumber" : 21,
      "endLineNumber" : 13,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 13,
        "endColumnNumber" : 23
      },
      "nodeContext" : "divisorQueue.add(n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 13,
        "endColumnNumber" : 24
      },
      "nodeContext" : "divisorQueue.add(n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 8,
        "startColumnNumber" : 59,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 715,
        "startLineNumber" : 8,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 13,
        "endColumnNumber" : 24
      },
      "nodeContext" : "divisorQueue.add(n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 10,
    "startColumnNumber" : 8,
    "endLineNumber" : 10,
    "endColumnNumber" : 9
  }, {
    "charLength" : 1,
    "startLineNumber" : 11,
    "startColumnNumber" : 13,
    "endLineNumber" : 11,
    "endColumnNumber" : 14
  }, {
    "charLength" : 1,
    "startLineNumber" : 13,
    "startColumnNumber" : 21,
    "endLineNumber" : 13,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}