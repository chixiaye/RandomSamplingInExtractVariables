{
  "id" : 233,
  "expression" : "\"visitorName\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/python2/BasePython2Test.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"visitorName\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 105,
      "startColumnNumber" : 19,
      "endLineNumber" : 105,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 46
      },
      "nodeContext" : "outputFileST.add(\"visitorName\",visitorName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 47
      },
      "nodeContext" : "outputFileST.add(\"visitorName\",visitorName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2350,
        "startLineNumber" : 55,
        "startColumnNumber" : 61,
        "endLineNumber" : 108,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (!parserStartRuleName.endsWith(\")\"))   parserStartRuleName+=\"()\";\n  ST outputFileST=new ST(\"import sys\\n\" + \"import codecs\\n\" + \"from antlr4 import *\\n\"+ \"from <lexerName> import <lexerName>\\n\"+ \"from <parserName> import <parserName>\\n\"+ \"from <listenerName> import <listenerName>\\n\"+ \"from <visitorName> import <visitorName>\\n\"+ \"\\n\"+ \"class TreeShapeListener(ParseTreeListener):\\n\"+ \"\\n\"+ \"    def visitTerminal(self, node):\\n\"+ \"        pass\\n\"+ \"\\n\"+ \"    def visitErrorNode(self, node):\\n\"+ \"        pass\\n\"+ \"\\n\"+ \"    def exitEveryRule(self, ctx):\\n\"+ \"        pass\\n\"+ \"\\n\"+ \"    def enterEveryRule(self, ctx):\\n\"+ \"        for child in ctx.getChildren():\\n\"+ \"            parent = child.parentCtx\\n\"+ \"            if not isinstance(parent, RuleNode) or parent.getRuleContext() != ctx:\\n\"+ \"                raise IllegalStateException(\\\"Invalid parse tree shape detected.\\\")\\n\"+ \"\\n\"+ \"def main(argv):\\n\"+ \"    input = FileStream(argv[1], encoding='utf-8', errors='replace')\\n\"+ \"    with codecs.open(argv[2], 'w', 'utf-8', 'replace') as output:\\n\"+ \"        lexer = <lexerName>(input, output)\\n\"+ \"        stream = CommonTokenStream(lexer)\\n\"+ \"<createParser>\"+ \"        parser.buildParseTrees = True\\n\"+ \"        tree = parser.<parserStartRuleName>\\n\"+ \"        ParseTreeWalker.DEFAULT.walk(TreeShapeListener(), tree)\\n\"+ \"\\n\"+ \"if __name__ == '__main__':\\n\"+ \"    main(sys.argv)\\n\"+ \"\\n\");\n  String stSource=\"        parser = <parserName>(stream, output)\\n\";\n  if (debug)   stSource+=\"        parser.addErrorListener(DiagnosticErrorListener())\\n\";\n  if (trace)   stSource+=\"        parser.setTrace(True)\\n\";\n  ST createParserST=new ST(stSource);\n  outputFileST.add(\"createParser\",createParserST);\n  outputFileST.add(\"parserName\",parserName);\n  outputFileST.add(\"lexerName\",lexerName);\n  outputFileST.add(\"listenerName\",listenerName);\n  outputFileST.add(\"visitorName\",visitorName);\n  outputFileST.add(\"parserStartRuleName\",parserStartRuleName);\n  writeFile(getTempDirPath(),\"Test.py\",outputFileST.render());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2541,
        "startLineNumber" : 52,
        "startColumnNumber" : 1,
        "endLineNumber" : 108,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override protected void writeParserTestFile(String parserName,String lexerName,String listenerName,String visitorName,String parserStartRuleName,boolean debug,boolean trace){\n  if (!parserStartRuleName.endsWith(\")\"))   parserStartRuleName+=\"()\";\n  ST outputFileST=new ST(\"import sys\\n\" + \"import codecs\\n\" + \"from antlr4 import *\\n\"+ \"from <lexerName> import <lexerName>\\n\"+ \"from <parserName> import <parserName>\\n\"+ \"from <listenerName> import <listenerName>\\n\"+ \"from <visitorName> import <visitorName>\\n\"+ \"\\n\"+ \"class TreeShapeListener(ParseTreeListener):\\n\"+ \"\\n\"+ \"    def visitTerminal(self, node):\\n\"+ \"        pass\\n\"+ \"\\n\"+ \"    def visitErrorNode(self, node):\\n\"+ \"        pass\\n\"+ \"\\n\"+ \"    def exitEveryRule(self, ctx):\\n\"+ \"        pass\\n\"+ \"\\n\"+ \"    def enterEveryRule(self, ctx):\\n\"+ \"        for child in ctx.getChildren():\\n\"+ \"            parent = child.parentCtx\\n\"+ \"            if not isinstance(parent, RuleNode) or parent.getRuleContext() != ctx:\\n\"+ \"                raise IllegalStateException(\\\"Invalid parse tree shape detected.\\\")\\n\"+ \"\\n\"+ \"def main(argv):\\n\"+ \"    input = FileStream(argv[1], encoding='utf-8', errors='replace')\\n\"+ \"    with codecs.open(argv[2], 'w', 'utf-8', 'replace') as output:\\n\"+ \"        lexer = <lexerName>(input, output)\\n\"+ \"        stream = CommonTokenStream(lexer)\\n\"+ \"<createParser>\"+ \"        parser.buildParseTrees = True\\n\"+ \"        tree = parser.<parserStartRuleName>\\n\"+ \"        ParseTreeWalker.DEFAULT.walk(TreeShapeListener(), tree)\\n\"+ \"\\n\"+ \"if __name__ == '__main__':\\n\"+ \"    main(sys.argv)\\n\"+ \"\\n\");\n  String stSource=\"        parser = <parserName>(stream, output)\\n\";\n  if (debug)   stSource+=\"        parser.addErrorListener(DiagnosticErrorListener())\\n\";\n  if (trace)   stSource+=\"        parser.setTrace(True)\\n\";\n  ST createParserST=new ST(stSource);\n  outputFileST.add(\"createParser\",createParserST);\n  outputFileST.add(\"parserName\",parserName);\n  outputFileST.add(\"lexerName\",lexerName);\n  outputFileST.add(\"listenerName\",listenerName);\n  outputFileST.add(\"visitorName\",visitorName);\n  outputFileST.add(\"parserStartRuleName\",parserStartRuleName);\n  writeFile(getTempDirPath(),\"Test.py\",outputFileST.render());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 105,
        "endColumnNumber" : 47
      },
      "nodeContext" : "outputFileST.add(\"visitorName\",visitorName);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 105,
    "startColumnNumber" : 19,
    "endLineNumber" : 105,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}