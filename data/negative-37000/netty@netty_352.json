{
  "id" : 352,
  "expression" : "bindFuture",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/sctp/multihoming/SctpMultiHomingEchoClient.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bindFuture",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 73,
      "startColumnNumber" : 48,
      "endLineNumber" : 73,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 73,
        "startColumnNumber" : 48,
        "endLineNumber" : 73,
        "endColumnNumber" : 64
      },
      "nodeContext" : "bindFuture.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 73,
        "startColumnNumber" : 34,
        "endLineNumber" : 73,
        "endColumnNumber" : 64
      },
      "nodeContext" : "(SctpChannel)bindFuture.get()",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 73,
        "startColumnNumber" : 24,
        "endLineNumber" : 73,
        "endColumnNumber" : 64
      },
      "nodeContext" : "channel=(SctpChannel)bindFuture.get()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 65
      },
      "nodeContext" : "SctpChannel channel=(SctpChannel)bindFuture.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1647,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 85,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSctpChannel.class).option(SctpChannelOption.SCTP_NODELAY,true).handler(new ChannelInitializer<SctpChannel>(){\n    @Override public void initChannel(    SctpChannel ch) throws Exception {\n      ch.pipeline().addLast(new SctpEchoClientHandler());\n    }\n  }\n);\n  InetSocketAddress localAddress=SocketUtils.socketAddress(CLIENT_PRIMARY_HOST,CLIENT_PORT);\n  InetAddress localSecondaryAddress=SocketUtils.addressByName(CLIENT_SECONDARY_HOST);\n  InetSocketAddress remoteAddress=SocketUtils.socketAddress(SERVER_REMOTE_HOST,SERVER_REMOTE_PORT);\n  Future<Channel> bindFuture=b.bind(localAddress);\n  SctpChannel channel=(SctpChannel)bindFuture.get();\n  channel.bindAddress(localSecondaryAddress).sync();\n  Future<Void> connectFuture=channel.connect(remoteAddress).sync();\n  channel.closeFuture().sync();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1780,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 88,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Bootstrap b=new Bootstrap();\n  b.group(group).channel(NioSctpChannel.class).option(SctpChannelOption.SCTP_NODELAY,true).handler(new ChannelInitializer<SctpChannel>(){\n    @Override public void initChannel(    SctpChannel ch) throws Exception {\n      ch.pipeline().addLast(new SctpEchoClientHandler());\n    }\n  }\n);\n  InetSocketAddress localAddress=SocketUtils.socketAddress(CLIENT_PRIMARY_HOST,CLIENT_PORT);\n  InetAddress localSecondaryAddress=SocketUtils.addressByName(CLIENT_SECONDARY_HOST);\n  InetSocketAddress remoteAddress=SocketUtils.socketAddress(SERVER_REMOTE_HOST,SERVER_REMOTE_PORT);\n  Future<Channel> bindFuture=b.bind(localAddress);\n  SctpChannel channel=(SctpChannel)bindFuture.get();\n  channel.bindAddress(localSecondaryAddress).sync();\n  Future<Void> connectFuture=channel.connect(remoteAddress).sync();\n  channel.closeFuture().sync();\n}\n  finally {\n  group.shutdownGracefully();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 141,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1920,
        "startLineNumber" : 47,
        "startColumnNumber" : 60,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup group=new MultithreadEventLoopGroup(NioHandler.newFactory());\n  try {\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSctpChannel.class).option(SctpChannelOption.SCTP_NODELAY,true).handler(new ChannelInitializer<SctpChannel>(){\n      @Override public void initChannel(      SctpChannel ch) throws Exception {\n        ch.pipeline().addLast(new SctpEchoClientHandler());\n      }\n    }\n);\n    InetSocketAddress localAddress=SocketUtils.socketAddress(CLIENT_PRIMARY_HOST,CLIENT_PORT);\n    InetAddress localSecondaryAddress=SocketUtils.addressByName(CLIENT_SECONDARY_HOST);\n    InetSocketAddress remoteAddress=SocketUtils.socketAddress(SERVER_REMOTE_HOST,SERVER_REMOTE_PORT);\n    Future<Channel> bindFuture=b.bind(localAddress);\n    SctpChannel channel=(SctpChannel)bindFuture.get();\n    channel.bindAddress(localSecondaryAddress).sync();\n    Future<Void> connectFuture=channel.connect(remoteAddress).sync();\n    channel.closeFuture().sync();\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1976,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  EventLoopGroup group=new MultithreadEventLoopGroup(NioHandler.newFactory());\n  try {\n    Bootstrap b=new Bootstrap();\n    b.group(group).channel(NioSctpChannel.class).option(SctpChannelOption.SCTP_NODELAY,true).handler(new ChannelInitializer<SctpChannel>(){\n      @Override public void initChannel(      SctpChannel ch) throws Exception {\n        ch.pipeline().addLast(new SctpEchoClientHandler());\n      }\n    }\n);\n    InetSocketAddress localAddress=SocketUtils.socketAddress(CLIENT_PRIMARY_HOST,CLIENT_PORT);\n    InetAddress localSecondaryAddress=SocketUtils.addressByName(CLIENT_SECONDARY_HOST);\n    InetSocketAddress remoteAddress=SocketUtils.socketAddress(SERVER_REMOTE_HOST,SERVER_REMOTE_PORT);\n    Future<Channel> bindFuture=b.bind(localAddress);\n    SctpChannel channel=(SctpChannel)bindFuture.get();\n    channel.bindAddress(localSecondaryAddress).sync();\n    Future<Void> connectFuture=channel.connect(remoteAddress).sync();\n    channel.closeFuture().sync();\n  }\n  finally {\n    group.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 73,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 65
      },
      "nodeContext" : "SctpChannel channel=(SctpChannel)bindFuture.get();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.netty.util.concurrent.Future<io.netty.channel.Channel>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 73,
    "startColumnNumber" : 48,
    "endLineNumber" : 73,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}