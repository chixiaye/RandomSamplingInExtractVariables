{
  "id" : 410,
  "expression" : "value2",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 160,
      "startColumnNumber" : 17,
      "endLineNumber" : 160,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 24
      },
      "nodeContext" : "checkNotNull(value2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 25
      },
      "nodeContext" : "checkNotNull(value2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 157,
        "startColumnNumber" : 84,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(type);\n  checkNotNull(value1);\n  checkNotNull(value2);\n  checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n  distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n  setDefault(type,value1);\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets distinct values for  {@code type}, so that when a class  {@code Foo} is tested for {@link Object#equals} and {@link Object#hashCode}, and its construction requires a parameter of  {@code type}, the distinct values of  {@code type} can be passed as parameters to create {@code Foo}instances that are unequal. <p>Calling  {@code setDistinctValues(type, v1, v2)} also sets the default value for {@code type}that's used for  {@link #testNulls}. <p>Only necessary for types where  {@link ClassSanityTester} doesn't already know how to createdistinct values.\n * @return this tester instance\n * @since 17.0\n */\npublic <T>ClassSanityTester setDistinctValues(Class<T> type,T value1,T value2){\n  checkNotNull(type);\n  checkNotNull(value1);\n  checkNotNull(value2);\n  checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n  distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n  setDefault(type,value1);\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 25
      },
      "nodeContext" : "checkNotNull(value2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "T"
  }, {
    "nodeContext" : "value2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 161,
      "startColumnNumber" : 41,
      "endLineNumber" : 161,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 161,
        "startColumnNumber" : 19,
        "endLineNumber" : 161,
        "endColumnNumber" : 48
      },
      "nodeContext" : "Objects.equal(value1,value2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 161,
        "startColumnNumber" : 18,
        "endLineNumber" : 161,
        "endColumnNumber" : 48
      },
      "nodeContext" : "!Objects.equal(value1,value2)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 78
      },
      "nodeContext" : "checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 79
      },
      "nodeContext" : "checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 157,
        "startColumnNumber" : 84,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(type);\n  checkNotNull(value1);\n  checkNotNull(value2);\n  checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n  distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n  setDefault(type,value1);\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets distinct values for  {@code type}, so that when a class  {@code Foo} is tested for {@link Object#equals} and {@link Object#hashCode}, and its construction requires a parameter of  {@code type}, the distinct values of  {@code type} can be passed as parameters to create {@code Foo}instances that are unequal. <p>Calling  {@code setDistinctValues(type, v1, v2)} also sets the default value for {@code type}that's used for  {@link #testNulls}. <p>Only necessary for types where  {@link ClassSanityTester} doesn't already know how to createdistinct values.\n * @return this tester instance\n * @since 17.0\n */\npublic <T>ClassSanityTester setDistinctValues(Class<T> type,T value1,T value2){\n  checkNotNull(type);\n  checkNotNull(value1);\n  checkNotNull(value2);\n  checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n  distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n  setDefault(type,value1);\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 161,
        "startColumnNumber" : 4,
        "endLineNumber" : 161,
        "endColumnNumber" : 79
      },
      "nodeContext" : "checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "T"
  }, {
    "nodeContext" : "value2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 162,
      "startColumnNumber" : 64,
      "endLineNumber" : 162,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 162,
        "startColumnNumber" : 39,
        "endLineNumber" : 162,
        "endColumnNumber" : 71
      },
      "nodeContext" : "ImmutableList.of(value1,value2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 72
      },
      "nodeContext" : "distinctValues.replaceValues(type,ImmutableList.of(value1,value2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 73
      },
      "nodeContext" : "distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 157,
        "startColumnNumber" : 84,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNotNull(type);\n  checkNotNull(value1);\n  checkNotNull(value2);\n  checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n  distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n  setDefault(type,value1);\n  return this;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1059,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 165,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Sets distinct values for  {@code type}, so that when a class  {@code Foo} is tested for {@link Object#equals} and {@link Object#hashCode}, and its construction requires a parameter of  {@code type}, the distinct values of  {@code type} can be passed as parameters to create {@code Foo}instances that are unequal. <p>Calling  {@code setDistinctValues(type, v1, v2)} also sets the default value for {@code type}that's used for  {@link #testNulls}. <p>Only necessary for types where  {@link ClassSanityTester} doesn't already know how to createdistinct values.\n * @return this tester instance\n * @since 17.0\n */\npublic <T>ClassSanityTester setDistinctValues(Class<T> type,T value1,T value2){\n  checkNotNull(type);\n  checkNotNull(value1);\n  checkNotNull(value2);\n  checkArgument(!Objects.equal(value1,value2),\"Duplicate value provided.\");\n  distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n  setDefault(type,value1);\n  return this;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 162,
        "startColumnNumber" : 4,
        "endLineNumber" : 162,
        "endColumnNumber" : 73
      },
      "nodeContext" : "distinctValues.replaceValues(type,ImmutableList.of(value1,value2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "T"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 160,
    "startColumnNumber" : 17,
    "endLineNumber" : 160,
    "endColumnNumber" : 23
  }, {
    "charLength" : 6,
    "startLineNumber" : 161,
    "startColumnNumber" : 41,
    "endLineNumber" : 161,
    "endColumnNumber" : 47
  }, {
    "charLength" : 6,
    "startLineNumber" : 162,
    "startColumnNumber" : 64,
    "endLineNumber" : 162,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}