{
  "id" : 91,
  "expression" : "'='",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'='",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 107,
      "startColumnNumber" : 36,
      "endLineNumber" : 107,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 107,
        "startColumnNumber" : 25,
        "endLineNumber" : 107,
        "endColumnNumber" : 40
      },
      "nodeContext" : "cp.indexOf('=')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 107,
        "endColumnNumber" : 40
      },
      "nodeContext" : "divPos=cp.indexOf('=')",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int divPos=cp.indexOf('=');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4541,
        "startLineNumber" : 106,
        "startColumnNumber" : 36,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int divPos=cp.indexOf('=');\n  if (divPos == -1) {\n    continue;\n  }\n  String paramName=cp.substring(0,divPos);\n  String paramValue=cp.substring(divPos + 1);\nswitch (paramName) {\ncase PARAM_ID:    dsId=paramValue;\n  break;\ncase PARAM_DRIVER:driverName=paramValue;\nbreak;\ncase PARAM_NAME:dsName=paramValue;\nbreak;\ncase PARAM_URL:url=paramValue;\nbreak;\ncase PARAM_HOST:host=paramValue;\nbreak;\ncase PARAM_PORT:port=paramValue;\nbreak;\ncase PARAM_SERVER:server=paramValue;\nbreak;\ncase PARAM_DATABASE:database=paramValue;\nbreak;\ncase PARAM_USER:user=paramValue;\nbreak;\ncase PARAM_PASSWORD:password=paramValue;\nbreak;\ncase PARAM_AUTH_MODEL:authModelId=paramValue;\nbreak;\ncase PARAM_SAVE_PASSWORD:savePassword=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_SYSTEM_OBJECTS:showSystemObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_UTILITY_OBJECTS:showUtilityObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_ONLY_ENTITIES:showOnlyEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_FOLDERS:hideFolders=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_SCHEMAS:hideSchemas=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_MERGE_ENTITIES:mergeEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_FOLDER:folder=dsRegistry.getFolder(paramValue);\nbreak;\ncase PARAM_AUTO_COMMIT:autoCommit=CommonUtils.toBoolean(paramValue);\nbreak;\ndefault:boolean handled=false;\nif (paramName.length() > PREFIX_PROP.length() && paramName.startsWith(PREFIX_PROP)) {\nparamName=paramName.substring(PREFIX_PROP.length());\nconProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_AUTH_PROP.length() && paramName.startsWith(PREFIX_AUTH_PROP)) {\nparamName=paramName.substring(PREFIX_AUTH_PROP.length());\nauthProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_HANDLER.length() && paramName.startsWith(PREFIX_HANDLER)) {\nparamName=paramName.substring(PREFIX_HANDLER.length());\ndivPos=paramName.indexOf('.');\nif (divPos == -1) {\nlog.debug(\"Wrong handler parameter: '\" + paramName + \"'\");\ncontinue;\n}\nString handlerId=paramName.substring(0,divPos);\nparamName=paramName.substring(divPos + 1);\nMap<String,String> handlerPopMap=handlerProps.computeIfAbsent(handlerId,k -> new HashMap<>());\nhandlerPopMap.put(paramName,paramValue);\nhandled=true;\n}\n else if (parameterHandler != null) {\nhandled=parameterHandler.setParameter(paramName,paramValue);\n}\nif (!handled) {\nlog.debug(\"Unknown connection parameter '\" + paramName + \"'\");\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4569,
        "startLineNumber" : 106,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String cp : conParams) {\n  int divPos=cp.indexOf('=');\n  if (divPos == -1) {\n    continue;\n  }\n  String paramName=cp.substring(0,divPos);\n  String paramValue=cp.substring(divPos + 1);\nswitch (paramName) {\ncase PARAM_ID:    dsId=paramValue;\n  break;\ncase PARAM_DRIVER:driverName=paramValue;\nbreak;\ncase PARAM_NAME:dsName=paramValue;\nbreak;\ncase PARAM_URL:url=paramValue;\nbreak;\ncase PARAM_HOST:host=paramValue;\nbreak;\ncase PARAM_PORT:port=paramValue;\nbreak;\ncase PARAM_SERVER:server=paramValue;\nbreak;\ncase PARAM_DATABASE:database=paramValue;\nbreak;\ncase PARAM_USER:user=paramValue;\nbreak;\ncase PARAM_PASSWORD:password=paramValue;\nbreak;\ncase PARAM_AUTH_MODEL:authModelId=paramValue;\nbreak;\ncase PARAM_SAVE_PASSWORD:savePassword=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_SYSTEM_OBJECTS:showSystemObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_UTILITY_OBJECTS:showUtilityObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_ONLY_ENTITIES:showOnlyEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_FOLDERS:hideFolders=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_SCHEMAS:hideSchemas=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_MERGE_ENTITIES:mergeEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_FOLDER:folder=dsRegistry.getFolder(paramValue);\nbreak;\ncase PARAM_AUTO_COMMIT:autoCommit=CommonUtils.toBoolean(paramValue);\nbreak;\ndefault:boolean handled=false;\nif (paramName.length() > PREFIX_PROP.length() && paramName.startsWith(PREFIX_PROP)) {\nparamName=paramName.substring(PREFIX_PROP.length());\nconProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_AUTH_PROP.length() && paramName.startsWith(PREFIX_AUTH_PROP)) {\nparamName=paramName.substring(PREFIX_AUTH_PROP.length());\nauthProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_HANDLER.length() && paramName.startsWith(PREFIX_HANDLER)) {\nparamName=paramName.substring(PREFIX_HANDLER.length());\ndivPos=paramName.indexOf('.');\nif (divPos == -1) {\nlog.debug(\"Wrong handler parameter: '\" + paramName + \"'\");\ncontinue;\n}\nString handlerId=paramName.substring(0,divPos);\nparamName=paramName.substring(divPos + 1);\nMap<String,String> handlerPopMap=handlerProps.computeIfAbsent(handlerId,k -> new HashMap<>());\nhandlerPopMap.put(paramName,paramValue);\nhandled=true;\n}\n else if (parameterHandler != null) {\nhandled=parameterHandler.setParameter(paramName,paramValue);\n}\nif (!handled) {\nlog.debug(\"Unknown connection parameter '\" + paramName + \"'\");\n}\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 404,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 11887,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String driverName=null, url=null, host=null, port=null, server=null, database=null, user=null, password=null, authModelId=null;\n  boolean showSystemObjects=false, showUtilityObjects=false, showOnlyEntities=false, hideFolders=false, hideSchemas=false, mergeEntities=false, savePassword=true;\n  Boolean autoCommit=null;\n  Map<String,String> conProperties=new HashMap<>();\n  Map<String,Map<String,String>> handlerProps=new HashMap<>();\n  Map<String,String> authProperties=new HashMap<>();\n  DBPDataSourceFolder folder=null;\n  String dsId=null, dsName=null;\n  DBPDataSourceRegistry dsRegistry=project == null ? null : project.getDataSourceRegistry();\n  if (dsRegistry == null) {\n    log.debug(\"No datasource registry for project '\" + project.getName() + \"'\");\n    return null;\n  }\n  String[] conParams=connectionSpec.split(\"\\\\|\");\n  for (  String cp : conParams) {\n    int divPos=cp.indexOf('=');\n    if (divPos == -1) {\n      continue;\n    }\n    String paramName=cp.substring(0,divPos);\n    String paramValue=cp.substring(divPos + 1);\nswitch (paramName) {\ncase PARAM_ID:      dsId=paramValue;\n    break;\ncase PARAM_DRIVER:  driverName=paramValue;\nbreak;\ncase PARAM_NAME:dsName=paramValue;\nbreak;\ncase PARAM_URL:url=paramValue;\nbreak;\ncase PARAM_HOST:host=paramValue;\nbreak;\ncase PARAM_PORT:port=paramValue;\nbreak;\ncase PARAM_SERVER:server=paramValue;\nbreak;\ncase PARAM_DATABASE:database=paramValue;\nbreak;\ncase PARAM_USER:user=paramValue;\nbreak;\ncase PARAM_PASSWORD:password=paramValue;\nbreak;\ncase PARAM_AUTH_MODEL:authModelId=paramValue;\nbreak;\ncase PARAM_SAVE_PASSWORD:savePassword=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_SYSTEM_OBJECTS:showSystemObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_UTILITY_OBJECTS:showUtilityObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_ONLY_ENTITIES:showOnlyEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_FOLDERS:hideFolders=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_SCHEMAS:hideSchemas=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_MERGE_ENTITIES:mergeEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_FOLDER:folder=dsRegistry.getFolder(paramValue);\nbreak;\ncase PARAM_AUTO_COMMIT:autoCommit=CommonUtils.toBoolean(paramValue);\nbreak;\ndefault:boolean handled=false;\nif (paramName.length() > PREFIX_PROP.length() && paramName.startsWith(PREFIX_PROP)) {\nparamName=paramName.substring(PREFIX_PROP.length());\nconProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_AUTH_PROP.length() && paramName.startsWith(PREFIX_AUTH_PROP)) {\nparamName=paramName.substring(PREFIX_AUTH_PROP.length());\nauthProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_HANDLER.length() && paramName.startsWith(PREFIX_HANDLER)) {\nparamName=paramName.substring(PREFIX_HANDLER.length());\ndivPos=paramName.indexOf('.');\nif (divPos == -1) {\nlog.debug(\"Wrong handler parameter: '\" + paramName + \"'\");\ncontinue;\n}\nString handlerId=paramName.substring(0,divPos);\nparamName=paramName.substring(divPos + 1);\nMap<String,String> handlerPopMap=handlerProps.computeIfAbsent(handlerId,k -> new HashMap<>());\nhandlerPopMap.put(paramName,paramValue);\nhandled=true;\n}\n else if (parameterHandler != null) {\nhandled=parameterHandler.setParameter(paramName,paramValue);\n}\nif (!handled) {\nlog.debug(\"Unknown connection parameter '\" + paramName + \"'\");\n}\n}\n}\nDBPDataSourceContainer dataSource=null;\nif (dsId != null) {\ndataSource=dsRegistry.getDataSource(dsId);\n}\nif (dsName != null) {\ndataSource=dsRegistry.findDataSourceByName(dsName);\n}\nif (dataSource != null) {\nDBPConnectionConfiguration connConfig=dataSource.getConnectionConfiguration();\nif (!CommonUtils.isEmpty(database)) connConfig.setDatabaseName(database);\nif (!CommonUtils.isEmpty(user)) connConfig.setUserName(user);\nif (!CommonUtils.isEmpty(password)) connConfig.setUserPassword(password);\nif (!CommonUtils.isEmpty(conProperties)) connConfig.setProperties(conProperties);\nif (!CommonUtils.isEmpty(authProperties)) connConfig.setAuthProperties(authProperties);\nif (!CommonUtils.isEmpty(authModelId)) connConfig.setAuthModelId(authModelId);\nreturn dataSource;\n}\nif (searchByParameters) {\nif (url != null) {\nfor (DBPDataSourceContainer ds : dsRegistry.getDataSources()) {\nif (url.equals(ds.getConnectionConfiguration().getUrl())) {\nif (user == null || user.equals(ds.getConnectionConfiguration().getUserName())) {\nreturn ds;\n}\n}\n}\n}\n else {\nfor (DBPDataSourceContainer ds : dsRegistry.getDataSources()) {\nDBPConnectionConfiguration cfg=ds.getConnectionConfiguration();\nif (server != null && !server.equals(cfg.getServerName()) || host != null && !host.equals(cfg.getHostName()) || port != null && !port.equals(cfg.getHostPort()) || database != null && !database.equals(cfg.getDatabaseName()) || user != null && !user.equals(cfg.getUserName())) {\ncontinue;\n}\nboolean matched=true;\nif (!conProperties.isEmpty()) {\nfor (Map.Entry<String,String> prop : conProperties.entrySet()) {\nif (!CommonUtils.equalObjects(cfg.getProperty(prop.getKey()),prop.getValue())) {\nmatched=false;\nbreak;\n}\n}\nif (!matched) {\ncontinue;\n}\n}\nif (!handlerProps.isEmpty()) {\nfor (Map.Entry<String,Map<String,String>> handlerProp : handlerProps.entrySet()) {\nDBWHandlerConfiguration handler=cfg.getHandler(handlerProp.getKey());\nif (handler == null) {\nmatched=false;\nbreak;\n}\nfor (Map.Entry<String,String> prop : handlerProp.getValue().entrySet()) {\nif (!CommonUtils.equalObjects(handler.getProperty(prop.getKey()),prop.getValue())) {\nmatched=false;\nbreak;\n}\n}\nif (!matched) {\nbreak;\n}\n}\nif (!matched) {\ncontinue;\n}\n}\nreturn ds;\n}\n}\n}\nif (!createNewDataSource) {\nreturn null;\n}\nif (driverName == null) {\nlog.error(\"Driver name not specified - can't create new datasource\");\nreturn null;\n}\nDBPDriver driver=DBWorkbench.getPlatform().getDataSourceProviderRegistry().findDriver(driverName);\nif (driver == null) {\nlog.error(\"Driver '\" + driverName + \"' not found\");\nreturn null;\n}\nif (dsName == null) {\ndsName=\"Ext: \" + driver.getName();\nif (database != null) {\ndsName+=\" - \" + database;\n}\n else if (server != null) {\ndsName+=\" - \" + server;\n}\n}\nDBPConnectionConfiguration connConfig=new DBPConnectionConfiguration();\nconnConfig.setUrl(url);\nconnConfig.setHostName(host);\nconnConfig.setHostPort(port);\nconnConfig.setServerName(server);\nconnConfig.setDatabaseName(database);\nconnConfig.setUserName(user);\nconnConfig.setUserPassword(password);\nconnConfig.setProperties(conProperties);\nif (!CommonUtils.isEmpty(authProperties)) {\nconnConfig.setAuthProperties(authProperties);\n}\nif (!CommonUtils.isEmpty(authModelId)) {\nconnConfig.setAuthModelId(authModelId);\n}\nif (autoCommit != null) {\nconnConfig.getBootstrap().setDefaultAutoCommit(autoCommit);\n}\nDBPDataSourceContainer newDS=dsRegistry.createDataSource(driver,connConfig);\nnewDS.setName(dsName);\n((DataSourceDescriptor)newDS).setTemporary(true);\nif (savePassword) {\nnewDS.setSavePassword(true);\n}\nif (folder != null) {\nnewDS.setFolder(folder);\n}\nDataSourceNavigatorSettings navSettings=((DataSourceDescriptor)newDS).getNavigatorSettings();\nnavSettings.setShowSystemObjects(showSystemObjects);\nnavSettings.setShowUtilityObjects(showUtilityObjects);\nnavSettings.setShowOnlyEntities(showOnlyEntities);\nnavSettings.setHideSchemas(hideSchemas);\nnavSettings.setHideFolders(hideFolders);\nnavSettings.setMergeEntities(mergeEntities);\ndsRegistry.addDataSource(newDS);\nreturn newDS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1207,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 12166,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 352,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static DBPDataSourceContainer getDataSourceBySpec(@NotNull DBPProject project,@NotNull String connectionSpec,@Nullable GeneralUtils.IParameterHandler parameterHandler,boolean searchByParameters,boolean createNewDataSource){\n  String driverName=null, url=null, host=null, port=null, server=null, database=null, user=null, password=null, authModelId=null;\n  boolean showSystemObjects=false, showUtilityObjects=false, showOnlyEntities=false, hideFolders=false, hideSchemas=false, mergeEntities=false, savePassword=true;\n  Boolean autoCommit=null;\n  Map<String,String> conProperties=new HashMap<>();\n  Map<String,Map<String,String>> handlerProps=new HashMap<>();\n  Map<String,String> authProperties=new HashMap<>();\n  DBPDataSourceFolder folder=null;\n  String dsId=null, dsName=null;\n  DBPDataSourceRegistry dsRegistry=project == null ? null : project.getDataSourceRegistry();\n  if (dsRegistry == null) {\n    log.debug(\"No datasource registry for project '\" + project.getName() + \"'\");\n    return null;\n  }\n  String[] conParams=connectionSpec.split(\"\\\\|\");\n  for (  String cp : conParams) {\n    int divPos=cp.indexOf('=');\n    if (divPos == -1) {\n      continue;\n    }\n    String paramName=cp.substring(0,divPos);\n    String paramValue=cp.substring(divPos + 1);\nswitch (paramName) {\ncase PARAM_ID:      dsId=paramValue;\n    break;\ncase PARAM_DRIVER:  driverName=paramValue;\nbreak;\ncase PARAM_NAME:dsName=paramValue;\nbreak;\ncase PARAM_URL:url=paramValue;\nbreak;\ncase PARAM_HOST:host=paramValue;\nbreak;\ncase PARAM_PORT:port=paramValue;\nbreak;\ncase PARAM_SERVER:server=paramValue;\nbreak;\ncase PARAM_DATABASE:database=paramValue;\nbreak;\ncase PARAM_USER:user=paramValue;\nbreak;\ncase PARAM_PASSWORD:password=paramValue;\nbreak;\ncase PARAM_AUTH_MODEL:authModelId=paramValue;\nbreak;\ncase PARAM_SAVE_PASSWORD:savePassword=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_SYSTEM_OBJECTS:showSystemObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_UTILITY_OBJECTS:showUtilityObjects=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_SHOW_ONLY_ENTITIES:showOnlyEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_FOLDERS:hideFolders=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_HIDE_SCHEMAS:hideSchemas=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_MERGE_ENTITIES:mergeEntities=CommonUtils.toBoolean(paramValue);\nbreak;\ncase PARAM_FOLDER:folder=dsRegistry.getFolder(paramValue);\nbreak;\ncase PARAM_AUTO_COMMIT:autoCommit=CommonUtils.toBoolean(paramValue);\nbreak;\ndefault:boolean handled=false;\nif (paramName.length() > PREFIX_PROP.length() && paramName.startsWith(PREFIX_PROP)) {\nparamName=paramName.substring(PREFIX_PROP.length());\nconProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_AUTH_PROP.length() && paramName.startsWith(PREFIX_AUTH_PROP)) {\nparamName=paramName.substring(PREFIX_AUTH_PROP.length());\nauthProperties.put(paramName,paramValue);\nhandled=true;\n}\n else if (paramName.length() > PREFIX_HANDLER.length() && paramName.startsWith(PREFIX_HANDLER)) {\nparamName=paramName.substring(PREFIX_HANDLER.length());\ndivPos=paramName.indexOf('.');\nif (divPos == -1) {\nlog.debug(\"Wrong handler parameter: '\" + paramName + \"'\");\ncontinue;\n}\nString handlerId=paramName.substring(0,divPos);\nparamName=paramName.substring(divPos + 1);\nMap<String,String> handlerPopMap=handlerProps.computeIfAbsent(handlerId,k -> new HashMap<>());\nhandlerPopMap.put(paramName,paramValue);\nhandled=true;\n}\n else if (parameterHandler != null) {\nhandled=parameterHandler.setParameter(paramName,paramValue);\n}\nif (!handled) {\nlog.debug(\"Unknown connection parameter '\" + paramName + \"'\");\n}\n}\n}\nDBPDataSourceContainer dataSource=null;\nif (dsId != null) {\ndataSource=dsRegistry.getDataSource(dsId);\n}\nif (dsName != null) {\ndataSource=dsRegistry.findDataSourceByName(dsName);\n}\nif (dataSource != null) {\nDBPConnectionConfiguration connConfig=dataSource.getConnectionConfiguration();\nif (!CommonUtils.isEmpty(database)) connConfig.setDatabaseName(database);\nif (!CommonUtils.isEmpty(user)) connConfig.setUserName(user);\nif (!CommonUtils.isEmpty(password)) connConfig.setUserPassword(password);\nif (!CommonUtils.isEmpty(conProperties)) connConfig.setProperties(conProperties);\nif (!CommonUtils.isEmpty(authProperties)) connConfig.setAuthProperties(authProperties);\nif (!CommonUtils.isEmpty(authModelId)) connConfig.setAuthModelId(authModelId);\nreturn dataSource;\n}\nif (searchByParameters) {\nif (url != null) {\nfor (DBPDataSourceContainer ds : dsRegistry.getDataSources()) {\nif (url.equals(ds.getConnectionConfiguration().getUrl())) {\nif (user == null || user.equals(ds.getConnectionConfiguration().getUserName())) {\nreturn ds;\n}\n}\n}\n}\n else {\nfor (DBPDataSourceContainer ds : dsRegistry.getDataSources()) {\nDBPConnectionConfiguration cfg=ds.getConnectionConfiguration();\nif (server != null && !server.equals(cfg.getServerName()) || host != null && !host.equals(cfg.getHostName()) || port != null && !port.equals(cfg.getHostPort()) || database != null && !database.equals(cfg.getDatabaseName()) || user != null && !user.equals(cfg.getUserName())) {\ncontinue;\n}\nboolean matched=true;\nif (!conProperties.isEmpty()) {\nfor (Map.Entry<String,String> prop : conProperties.entrySet()) {\nif (!CommonUtils.equalObjects(cfg.getProperty(prop.getKey()),prop.getValue())) {\nmatched=false;\nbreak;\n}\n}\nif (!matched) {\ncontinue;\n}\n}\nif (!handlerProps.isEmpty()) {\nfor (Map.Entry<String,Map<String,String>> handlerProp : handlerProps.entrySet()) {\nDBWHandlerConfiguration handler=cfg.getHandler(handlerProp.getKey());\nif (handler == null) {\nmatched=false;\nbreak;\n}\nfor (Map.Entry<String,String> prop : handlerProp.getValue().entrySet()) {\nif (!CommonUtils.equalObjects(handler.getProperty(prop.getKey()),prop.getValue())) {\nmatched=false;\nbreak;\n}\n}\nif (!matched) {\nbreak;\n}\n}\nif (!matched) {\ncontinue;\n}\n}\nreturn ds;\n}\n}\n}\nif (!createNewDataSource) {\nreturn null;\n}\nif (driverName == null) {\nlog.error(\"Driver name not specified - can't create new datasource\");\nreturn null;\n}\nDBPDriver driver=DBWorkbench.getPlatform().getDataSourceProviderRegistry().findDriver(driverName);\nif (driver == null) {\nlog.error(\"Driver '\" + driverName + \"' not found\");\nreturn null;\n}\nif (dsName == null) {\ndsName=\"Ext: \" + driver.getName();\nif (database != null) {\ndsName+=\" - \" + database;\n}\n else if (server != null) {\ndsName+=\" - \" + server;\n}\n}\nDBPConnectionConfiguration connConfig=new DBPConnectionConfiguration();\nconnConfig.setUrl(url);\nconnConfig.setHostName(host);\nconnConfig.setHostPort(port);\nconnConfig.setServerName(server);\nconnConfig.setDatabaseName(database);\nconnConfig.setUserName(user);\nconnConfig.setUserPassword(password);\nconnConfig.setProperties(conProperties);\nif (!CommonUtils.isEmpty(authProperties)) {\nconnConfig.setAuthProperties(authProperties);\n}\nif (!CommonUtils.isEmpty(authModelId)) {\nconnConfig.setAuthModelId(authModelId);\n}\nif (autoCommit != null) {\nconnConfig.getBootstrap().setDefaultAutoCommit(autoCommit);\n}\nDBPDataSourceContainer newDS=dsRegistry.createDataSource(driver,connConfig);\nnewDS.setName(dsName);\n((DataSourceDescriptor)newDS).setTemporary(true);\nif (savePassword) {\nnewDS.setSavePassword(true);\n}\nif (folder != null) {\nnewDS.setFolder(folder);\n}\nDataSourceNavigatorSettings navSettings=((DataSourceDescriptor)newDS).getNavigatorSettings();\nnavSettings.setShowSystemObjects(showSystemObjects);\nnavSettings.setShowUtilityObjects(showUtilityObjects);\nnavSettings.setShowOnlyEntities(showOnlyEntities);\nnavSettings.setHideSchemas(hideSchemas);\nnavSettings.setHideFolders(hideFolders);\nnavSettings.setMergeEntities(mergeEntities);\ndsRegistry.addDataSource(newDS);\nreturn newDS;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1239,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 107,
        "endColumnNumber" : 41
      },
      "nodeContext" : "int divPos=cp.indexOf('=');\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 107,
    "startColumnNumber" : 36,
    "endLineNumber" : 107,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}