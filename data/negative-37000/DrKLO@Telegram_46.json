{
  "id" : 46,
  "expression" : "spans",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/Cells/TextSelectionHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "spans",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 203,
      "startColumnNumber" : 53,
      "endLineNumber" : 203,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 203,
        "startColumnNumber" : 20,
        "endLineNumber" : 211,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (Emoji.EmojiSpan emojiSpan : spans) {\n  int s=((Spanned)text).getSpanStart(emojiSpan);\n  int e=((Spanned)text).getSpanEnd(emojiSpan);\n  if (offset >= s && offset <= e) {\n    selectionStart=s;\n    selectionEnd=e;\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 576,
        "startLineNumber" : 201,
        "startColumnNumber" : 45,
        "endLineNumber" : 212,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Emoji.EmojiSpan[] spans=((Spanned)text).getSpans(0,text.length(),Emoji.EmojiSpan.class);\n  for (  Emoji.EmojiSpan emojiSpan : spans) {\n    int s=((Spanned)text).getSpanStart(emojiSpan);\n    int e=((Spanned)text).getSpanEnd(emojiSpan);\n    if (offset >= s && offset <= e) {\n      selectionStart=s;\n      selectionEnd=e;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 605,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 212,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (text instanceof Spanned) {\n  Emoji.EmojiSpan[] spans=((Spanned)text).getSpans(0,text.length(),Emoji.EmojiSpan.class);\n  for (  Emoji.EmojiSpan emojiSpan : spans) {\n    int s=((Spanned)text).getSpanStart(emojiSpan);\n    int e=((Spanned)text).getSpanEnd(emojiSpan);\n    if (offset >= s && offset <= e) {\n      selectionStart=s;\n      selectionEnd=e;\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2134,
        "startLineNumber" : 192,
        "startColumnNumber" : 86,
        "endLineNumber" : 246,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int maybeTextX=TextSelectionHelper.this.maybeTextX;\n  int maybeTextY=TextSelectionHelper.this.maybeTextY;\n  clear();\n  textSelectionOverlay.setVisibility(View.VISIBLE);\n  onTextSelected(newView,oldView);\n  selectionStart=offset;\n  selectionEnd=selectionStart;\n  if (text instanceof Spanned) {\n    Emoji.EmojiSpan[] spans=((Spanned)text).getSpans(0,text.length(),Emoji.EmojiSpan.class);\n    for (    Emoji.EmojiSpan emojiSpan : spans) {\n      int s=((Spanned)text).getSpanStart(emojiSpan);\n      int e=((Spanned)text).getSpanEnd(emojiSpan);\n      if (offset >= s && offset <= e) {\n        selectionStart=s;\n        selectionEnd=e;\n        break;\n      }\n    }\n  }\n  if (selectionStart == selectionEnd) {\n    while (selectionStart > 0 && isInterruptedCharacter(text.charAt(selectionStart - 1))) {\n      selectionStart--;\n    }\n    while (selectionEnd < text.length() && isInterruptedCharacter(text.charAt(selectionEnd))) {\n      selectionEnd++;\n    }\n  }\n  textX=maybeTextX;\n  textY=maybeTextY;\n  selectedView=newView;\n  textSelectionOverlay.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n  showActions();\n  invalidate();\n  if (oldView != null) {\n    oldView.invalidate();\n  }\n  if (callback != null) {\n    callback.onStateChanged(true);\n  }\n  movingHandle=true;\n  movingDirectionSettling=true;\n  isOneTouch=true;\n  movingOffsetY=0;\n  movingOffsetX=0;\n  onOffsetChanged();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2208,
        "startLineNumber" : 192,
        "startColumnNumber" : 12,
        "endLineNumber" : 246,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (offset >= 0 && offset < text.length() && text.charAt(offset) != '\\n') {\n  int maybeTextX=TextSelectionHelper.this.maybeTextX;\n  int maybeTextY=TextSelectionHelper.this.maybeTextY;\n  clear();\n  textSelectionOverlay.setVisibility(View.VISIBLE);\n  onTextSelected(newView,oldView);\n  selectionStart=offset;\n  selectionEnd=selectionStart;\n  if (text instanceof Spanned) {\n    Emoji.EmojiSpan[] spans=((Spanned)text).getSpans(0,text.length(),Emoji.EmojiSpan.class);\n    for (    Emoji.EmojiSpan emojiSpan : spans) {\n      int s=((Spanned)text).getSpanStart(emojiSpan);\n      int e=((Spanned)text).getSpanEnd(emojiSpan);\n      if (offset >= s && offset <= e) {\n        selectionStart=s;\n        selectionEnd=e;\n        break;\n      }\n    }\n  }\n  if (selectionStart == selectionEnd) {\n    while (selectionStart > 0 && isInterruptedCharacter(text.charAt(selectionStart - 1))) {\n      selectionStart--;\n    }\n    while (selectionEnd < text.length() && isInterruptedCharacter(text.charAt(selectionEnd))) {\n      selectionEnd++;\n    }\n  }\n  textX=maybeTextX;\n  textY=maybeTextY;\n  selectedView=newView;\n  textSelectionOverlay.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n  showActions();\n  invalidate();\n  if (oldView != null) {\n    oldView.invalidate();\n  }\n  if (callback != null) {\n    callback.onStateChanged(true);\n  }\n  movingHandle=true;\n  movingDirectionSettling=true;\n  isOneTouch=true;\n  movingOffsetY=0;\n  movingOffsetX=0;\n  onOffsetChanged();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 245,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3701,
        "startLineNumber" : 158,
        "startColumnNumber" : 26,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (maybeSelectedView == null || textSelectionOverlay == null) {\n    return;\n  }\n  Cell oldView=selectedView;\n  Cell newView=maybeSelectedView;\n  CharSequence text=getText(maybeSelectedView,true);\n  if (parentRecyclerView != null) {\n    parentRecyclerView.cancelClickRunnables(false);\n  }\n  int x=capturedX;\n  int y=capturedY;\n  if (!textArea.isEmpty()) {\n    if (x > textArea.right)     x=textArea.right - 1;\n    if (x < textArea.left)     x=textArea.left + 1;\n    if (y < textArea.top)     y=textArea.top + 1;\n    if (y > textArea.bottom)     y=textArea.bottom - 1;\n  }\n  int offset=getCharOffsetFromCord(x,y,maybeTextX,maybeTextY,newView,true);\n  if (offset >= text.length()) {\n    fillLayoutForOffset(offset,layoutBlock,true);\n    if (layoutBlock.layout == null) {\n      selectionStart=selectionEnd=-1;\n      return;\n    }\n    int endLine=layoutBlock.layout.getLineCount() - 1;\n    x-=maybeTextX;\n    if (x < layoutBlock.layout.getLineRight(endLine) + AndroidUtilities.dp(4) && x > layoutBlock.layout.getLineLeft(endLine)) {\n      offset=text.length() - 1;\n    }\n  }\n  if (offset >= 0 && offset < text.length() && text.charAt(offset) != '\\n') {\n    int maybeTextX=TextSelectionHelper.this.maybeTextX;\n    int maybeTextY=TextSelectionHelper.this.maybeTextY;\n    clear();\n    textSelectionOverlay.setVisibility(View.VISIBLE);\n    onTextSelected(newView,oldView);\n    selectionStart=offset;\n    selectionEnd=selectionStart;\n    if (text instanceof Spanned) {\n      Emoji.EmojiSpan[] spans=((Spanned)text).getSpans(0,text.length(),Emoji.EmojiSpan.class);\n      for (      Emoji.EmojiSpan emojiSpan : spans) {\n        int s=((Spanned)text).getSpanStart(emojiSpan);\n        int e=((Spanned)text).getSpanEnd(emojiSpan);\n        if (offset >= s && offset <= e) {\n          selectionStart=s;\n          selectionEnd=e;\n          break;\n        }\n      }\n    }\n    if (selectionStart == selectionEnd) {\n      while (selectionStart > 0 && isInterruptedCharacter(text.charAt(selectionStart - 1))) {\n        selectionStart--;\n      }\n      while (selectionEnd < text.length() && isInterruptedCharacter(text.charAt(selectionEnd))) {\n        selectionEnd++;\n      }\n    }\n    textX=maybeTextX;\n    textY=maybeTextY;\n    selectedView=newView;\n    textSelectionOverlay.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n    showActions();\n    invalidate();\n    if (oldView != null) {\n      oldView.invalidate();\n    }\n    if (callback != null) {\n      callback.onStateChanged(true);\n    }\n    movingHandle=true;\n    movingDirectionSettling=true;\n    isOneTouch=true;\n    movingOffsetY=0;\n    movingOffsetX=0;\n    onOffsetChanged();\n  }\n  tryCapture=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 450,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.AnonymousClassDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3737,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  if (maybeSelectedView == null || textSelectionOverlay == null) {\n    return;\n  }\n  Cell oldView=selectedView;\n  Cell newView=maybeSelectedView;\n  CharSequence text=getText(maybeSelectedView,true);\n  if (parentRecyclerView != null) {\n    parentRecyclerView.cancelClickRunnables(false);\n  }\n  int x=capturedX;\n  int y=capturedY;\n  if (!textArea.isEmpty()) {\n    if (x > textArea.right)     x=textArea.right - 1;\n    if (x < textArea.left)     x=textArea.left + 1;\n    if (y < textArea.top)     y=textArea.top + 1;\n    if (y > textArea.bottom)     y=textArea.bottom - 1;\n  }\n  int offset=getCharOffsetFromCord(x,y,maybeTextX,maybeTextY,newView,true);\n  if (offset >= text.length()) {\n    fillLayoutForOffset(offset,layoutBlock,true);\n    if (layoutBlock.layout == null) {\n      selectionStart=selectionEnd=-1;\n      return;\n    }\n    int endLine=layoutBlock.layout.getLineCount() - 1;\n    x-=maybeTextX;\n    if (x < layoutBlock.layout.getLineRight(endLine) + AndroidUtilities.dp(4) && x > layoutBlock.layout.getLineLeft(endLine)) {\n      offset=text.length() - 1;\n    }\n  }\n  if (offset >= 0 && offset < text.length() && text.charAt(offset) != '\\n') {\n    int maybeTextX=TextSelectionHelper.this.maybeTextX;\n    int maybeTextY=TextSelectionHelper.this.maybeTextY;\n    clear();\n    textSelectionOverlay.setVisibility(View.VISIBLE);\n    onTextSelected(newView,oldView);\n    selectionStart=offset;\n    selectionEnd=selectionStart;\n    if (text instanceof Spanned) {\n      Emoji.EmojiSpan[] spans=((Spanned)text).getSpans(0,text.length(),Emoji.EmojiSpan.class);\n      for (      Emoji.EmojiSpan emojiSpan : spans) {\n        int s=((Spanned)text).getSpanStart(emojiSpan);\n        int e=((Spanned)text).getSpanEnd(emojiSpan);\n        if (offset >= s && offset <= e) {\n          selectionStart=s;\n          selectionEnd=e;\n          break;\n        }\n      }\n    }\n    if (selectionStart == selectionEnd) {\n      while (selectionStart > 0 && isInterruptedCharacter(text.charAt(selectionStart - 1))) {\n        selectionStart--;\n      }\n      while (selectionEnd < text.length() && isInterruptedCharacter(text.charAt(selectionEnd))) {\n        selectionEnd++;\n      }\n    }\n    textX=maybeTextX;\n    textY=maybeTextY;\n    selectedView=newView;\n    textSelectionOverlay.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n    showActions();\n    invalidate();\n    if (oldView != null) {\n      oldView.invalidate();\n    }\n    if (callback != null) {\n      callback.onStateChanged(true);\n    }\n    movingHandle=true;\n    movingDirectionSettling=true;\n    isOneTouch=true;\n    movingOffsetY=0;\n    movingOffsetX=0;\n    onOffsetChanged();\n  }\n  tryCapture=false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 456,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 203,
        "startColumnNumber" : 20,
        "endLineNumber" : 211,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (Emoji.EmojiSpan emojiSpan : spans) {\n  int s=((Spanned)text).getSpanStart(emojiSpan);\n  int e=((Spanned)text).getSpanEnd(emojiSpan);\n  if (offset >= s && offset <= e) {\n    selectionStart=s;\n    selectionEnd=e;\n    break;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 51,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : "org.telegram.messenger.Emoji.EmojiSpan[]"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 203,
    "startColumnNumber" : 53,
    "endLineNumber" : 203,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}