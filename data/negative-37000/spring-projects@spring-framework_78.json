{
  "id" : 78,
  "expression" : "LeakAwareDataBuffer",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBufferFactory.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "LeakAwareDataBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 69,
      "startColumnNumber" : 12,
      "endLineNumber" : 69,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 44
      },
      "nodeContext" : "LeakAwareDataBuffer::isAllocated",
      "nodeType" : "ExpressionMethodReference",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 69,
        "endColumnNumber" : 45
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 16
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 6
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n  throw leakError;\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n  throw leakError;\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 67,
        "startColumnNumber" : 29,
        "endLineNumber" : 75,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n    throw leakError;\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 62,
        "startColumnNumber" : 1,
        "endLineNumber" : 75,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Checks whether all of the data buffers allocated by this factory have also been released. If not, then an  {@link AssertionError} is thrown. Typically used from a JUnit {@link After}method.\n */\npublic void checkForLeaks(){\n  this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n    throw leakError;\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 32,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 69,
        "endColumnNumber" : 44
      },
      "nodeContext" : "LeakAwareDataBuffer::isAllocated",
      "nodeType" : "ExpressionMethodReference",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.springframework.core.io.buffer.LeakAwareDataBuffer"
  }, {
    "nodeContext" : "LeakAwareDataBuffer",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 71,
      "startColumnNumber" : 9,
      "endLineNumber" : 71,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 71,
        "endColumnNumber" : 39
      },
      "nodeContext" : "LeakAwareDataBuffer::leakError",
      "nodeType" : "ExpressionMethodReference",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 71,
        "endColumnNumber" : 40
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 6
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n  throw leakError;\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 185,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 7
      },
      "nodeContext" : "this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n  throw leakError;\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 67,
        "startColumnNumber" : 29,
        "endLineNumber" : 75,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n    throw leakError;\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 432,
        "startLineNumber" : 62,
        "startColumnNumber" : 1,
        "endLineNumber" : 75,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Checks whether all of the data buffers allocated by this factory have also been released. If not, then an  {@link AssertionError} is thrown. Typically used from a JUnit {@link After}method.\n */\npublic void checkForLeaks(){\n  this.created.stream().filter(LeakAwareDataBuffer::isAllocated).findFirst().map(LeakAwareDataBuffer::leakError).ifPresent(leakError -> {\n    throw leakError;\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 32,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 71,
        "startColumnNumber" : 9,
        "endLineNumber" : 71,
        "endColumnNumber" : 39
      },
      "nodeContext" : "LeakAwareDataBuffer::leakError",
      "nodeType" : "ExpressionMethodReference",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.springframework.core.io.buffer.LeakAwareDataBuffer"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 69,
    "startColumnNumber" : 12,
    "endLineNumber" : 69,
    "endColumnNumber" : 31
  }, {
    "charLength" : 19,
    "startLineNumber" : 71,
    "startColumnNumber" : 9,
    "endLineNumber" : 71,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}