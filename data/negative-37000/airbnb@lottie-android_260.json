{
  "id" : 260,
  "expression" : "innerRadius",
  "projectName" : "airbnb@lottie-android",
  "commitID" : "54c2775bf2c8b67c8d24840424c13968255caea7",
  "filePath" : "/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "innerRadius",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 155,
      "startColumnNumber" : 27,
      "endLineNumber" : 155,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 155,
        "startColumnNumber" : 27,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "innerRadius + partialPointAmount * (outerRadius - innerRadius)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 155,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 155,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 90
      },
      "nodeContext" : "partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 154,
        "startColumnNumber" : 33,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n  x=(float)(partialPointRadius * Math.cos(currentAngle));\n  y=(float)(partialPointRadius * Math.sin(currentAngle));\n  path.moveTo(x,y);\n  currentAngle+=anglePerPoint * partialPointAmount / 2f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (partialPointAmount != 0) {\n  partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n  x=(float)(partialPointRadius * Math.cos(currentAngle));\n  y=(float)(partialPointRadius * Math.sin(currentAngle));\n  path.moveTo(x,y);\n  currentAngle+=anglePerPoint * partialPointAmount / 2f;\n}\n else {\n  x=(float)(outerRadius * Math.cos(currentAngle));\n  y=(float)(outerRadius * Math.sin(currentAngle));\n  path.moveTo(x,y);\n  currentAngle+=halfAnglePerPoint;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4027,
        "startLineNumber" : 121,
        "startColumnNumber" : 32,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4057,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void createStarPath(){\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 587,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 155,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 90
      },
      "nodeContext" : "partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "innerRadius",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 155,
      "startColumnNumber" : 77,
      "endLineNumber" : 155,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 155,
        "startColumnNumber" : 63,
        "endLineNumber" : 155,
        "endColumnNumber" : 88
      },
      "nodeContext" : "outerRadius - innerRadius",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 155,
        "startColumnNumber" : 62,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "(outerRadius - innerRadius)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 155,
        "startColumnNumber" : 41,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "partialPointAmount * (outerRadius - innerRadius)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 155,
        "startColumnNumber" : 27,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "innerRadius + partialPointAmount * (outerRadius - innerRadius)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 155,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 89
      },
      "nodeContext" : "partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 155,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 90
      },
      "nodeContext" : "partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 154,
        "startColumnNumber" : 33,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n  x=(float)(partialPointRadius * Math.cos(currentAngle));\n  y=(float)(partialPointRadius * Math.sin(currentAngle));\n  path.moveTo(x,y);\n  currentAngle+=anglePerPoint * partialPointAmount / 2f;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 540,
        "startLineNumber" : 154,
        "startColumnNumber" : 4,
        "endLineNumber" : 165,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (partialPointAmount != 0) {\n  partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n  x=(float)(partialPointRadius * Math.cos(currentAngle));\n  y=(float)(partialPointRadius * Math.sin(currentAngle));\n  path.moveTo(x,y);\n  currentAngle+=anglePerPoint * partialPointAmount / 2f;\n}\n else {\n  x=(float)(outerRadius * Math.cos(currentAngle));\n  y=(float)(outerRadius * Math.sin(currentAngle));\n  path.moveTo(x,y);\n  currentAngle+=halfAnglePerPoint;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4027,
        "startLineNumber" : 121,
        "startColumnNumber" : 32,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4057,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void createStarPath(){\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 587,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 155,
        "startColumnNumber" : 6,
        "endLineNumber" : 155,
        "endColumnNumber" : 90
      },
      "nodeContext" : "partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "innerRadius",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 171,
      "startColumnNumber" : 49,
      "endLineNumber" : 171,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 171,
        "startColumnNumber" : 21,
        "endLineNumber" : 171,
        "endColumnNumber" : 60
      },
      "nodeContext" : "longSegment ? outerRadius : innerRadius",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 60
      },
      "nodeContext" : "radius=longSegment ? outerRadius : innerRadius",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 171,
        "startColumnNumber" : 6,
        "endLineNumber" : 171,
        "endColumnNumber" : 61
      },
      "nodeContext" : "float radius=longSegment ? outerRadius : innerRadius;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2011,
        "startLineNumber" : 170,
        "startColumnNumber" : 40,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float radius=longSegment ? outerRadius : innerRadius;\n  float dTheta=halfAnglePerPoint;\n  if (partialPointRadius != 0 && i == numPoints - 2) {\n    dTheta=anglePerPoint * partialPointAmount / 2f;\n  }\n  if (partialPointRadius != 0 && i == numPoints - 1) {\n    radius=partialPointRadius;\n  }\n  previousX=x;\n  previousY=y;\n  x=(float)(radius * Math.cos(currentAngle));\n  y=(float)(radius * Math.sin(currentAngle));\n  if (innerRoundedness == 0 && outerRoundedness == 0) {\n    path.lineTo(x,y);\n  }\n else {\n    float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n    float cp1Dx=(float)Math.cos(cp1Theta);\n    float cp1Dy=(float)Math.sin(cp1Theta);\n    float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n    float cp2Dx=(float)Math.cos(cp2Theta);\n    float cp2Dy=(float)Math.sin(cp2Theta);\n    float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n    float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n    float cp1Radius=longSegment ? innerRadius : outerRadius;\n    float cp2Radius=longSegment ? outerRadius : innerRadius;\n    float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n    float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n    float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n    float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n    if (partialPointAmount != 0) {\n      if (i == 0) {\n        cp1x*=partialPointAmount;\n        cp1y*=partialPointAmount;\n      }\n else       if (i == numPoints - 1) {\n        cp2x*=partialPointAmount;\n        cp2y*=partialPointAmount;\n      }\n    }\n    path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n  }\n  currentAngle+=dTheta;\n  longSegment=!longSegment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numPoints; i++) {\n  float radius=longSegment ? outerRadius : innerRadius;\n  float dTheta=halfAnglePerPoint;\n  if (partialPointRadius != 0 && i == numPoints - 2) {\n    dTheta=anglePerPoint * partialPointAmount / 2f;\n  }\n  if (partialPointRadius != 0 && i == numPoints - 1) {\n    radius=partialPointRadius;\n  }\n  previousX=x;\n  previousY=y;\n  x=(float)(radius * Math.cos(currentAngle));\n  y=(float)(radius * Math.sin(currentAngle));\n  if (innerRoundedness == 0 && outerRoundedness == 0) {\n    path.lineTo(x,y);\n  }\n else {\n    float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n    float cp1Dx=(float)Math.cos(cp1Theta);\n    float cp1Dy=(float)Math.sin(cp1Theta);\n    float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n    float cp2Dx=(float)Math.cos(cp2Theta);\n    float cp2Dy=(float)Math.sin(cp2Theta);\n    float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n    float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n    float cp1Radius=longSegment ? innerRadius : outerRadius;\n    float cp2Radius=longSegment ? outerRadius : innerRadius;\n    float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n    float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n    float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n    float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n    if (partialPointAmount != 0) {\n      if (i == 0) {\n        cp1x*=partialPointAmount;\n        cp1y*=partialPointAmount;\n      }\n else       if (i == numPoints - 1) {\n        cp2x*=partialPointAmount;\n        cp2y*=partialPointAmount;\n      }\n    }\n    path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n  }\n  currentAngle+=dTheta;\n  longSegment=!longSegment;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 311,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4027,
        "startLineNumber" : 121,
        "startColumnNumber" : 32,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4057,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void createStarPath(){\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 587,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 171,
        "startColumnNumber" : 6,
        "endLineNumber" : 171,
        "endColumnNumber" : 61
      },
      "nodeContext" : "float radius=longSegment ? outerRadius : innerRadius;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "innerRadius",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 197,
      "startColumnNumber" : 40,
      "endLineNumber" : 197,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 197,
        "startColumnNumber" : 26,
        "endLineNumber" : 197,
        "endColumnNumber" : 65
      },
      "nodeContext" : "longSegment ? innerRadius : outerRadius",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 197,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 65
      },
      "nodeContext" : "cp1Radius=longSegment ? innerRadius : outerRadius",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 66
      },
      "nodeContext" : "float cp1Radius=longSegment ? innerRadius : outerRadius;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 186,
        "startColumnNumber" : 13,
        "endLineNumber" : 215,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n  float cp1Dx=(float)Math.cos(cp1Theta);\n  float cp1Dy=(float)Math.sin(cp1Theta);\n  float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n  float cp2Dx=(float)Math.cos(cp2Theta);\n  float cp2Dy=(float)Math.sin(cp2Theta);\n  float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n  float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n  float cp1Radius=longSegment ? innerRadius : outerRadius;\n  float cp2Radius=longSegment ? outerRadius : innerRadius;\n  float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n  float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n  float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n  float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n  if (partialPointAmount != 0) {\n    if (i == 0) {\n      cp1x*=partialPointAmount;\n      cp1y*=partialPointAmount;\n    }\n else     if (i == numPoints - 1) {\n      cp2x*=partialPointAmount;\n      cp2y*=partialPointAmount;\n    }\n  }\n  path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 184,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (innerRoundedness == 0 && outerRoundedness == 0) {\n  path.lineTo(x,y);\n}\n else {\n  float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n  float cp1Dx=(float)Math.cos(cp1Theta);\n  float cp1Dy=(float)Math.sin(cp1Theta);\n  float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n  float cp2Dx=(float)Math.cos(cp2Theta);\n  float cp2Dy=(float)Math.sin(cp2Theta);\n  float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n  float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n  float cp1Radius=longSegment ? innerRadius : outerRadius;\n  float cp2Radius=longSegment ? outerRadius : innerRadius;\n  float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n  float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n  float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n  float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n  if (partialPointAmount != 0) {\n    if (i == 0) {\n      cp1x*=partialPointAmount;\n      cp1y*=partialPointAmount;\n    }\n else     if (i == numPoints - 1) {\n      cp2x*=partialPointAmount;\n      cp2y*=partialPointAmount;\n    }\n  }\n  path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 211,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2011,
        "startLineNumber" : 170,
        "startColumnNumber" : 40,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float radius=longSegment ? outerRadius : innerRadius;\n  float dTheta=halfAnglePerPoint;\n  if (partialPointRadius != 0 && i == numPoints - 2) {\n    dTheta=anglePerPoint * partialPointAmount / 2f;\n  }\n  if (partialPointRadius != 0 && i == numPoints - 1) {\n    radius=partialPointRadius;\n  }\n  previousX=x;\n  previousY=y;\n  x=(float)(radius * Math.cos(currentAngle));\n  y=(float)(radius * Math.sin(currentAngle));\n  if (innerRoundedness == 0 && outerRoundedness == 0) {\n    path.lineTo(x,y);\n  }\n else {\n    float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n    float cp1Dx=(float)Math.cos(cp1Theta);\n    float cp1Dy=(float)Math.sin(cp1Theta);\n    float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n    float cp2Dx=(float)Math.cos(cp2Theta);\n    float cp2Dy=(float)Math.sin(cp2Theta);\n    float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n    float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n    float cp1Radius=longSegment ? innerRadius : outerRadius;\n    float cp2Radius=longSegment ? outerRadius : innerRadius;\n    float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n    float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n    float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n    float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n    if (partialPointAmount != 0) {\n      if (i == 0) {\n        cp1x*=partialPointAmount;\n        cp1y*=partialPointAmount;\n      }\n else       if (i == numPoints - 1) {\n        cp2x*=partialPointAmount;\n        cp2y*=partialPointAmount;\n      }\n    }\n    path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n  }\n  currentAngle+=dTheta;\n  longSegment=!longSegment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numPoints; i++) {\n  float radius=longSegment ? outerRadius : innerRadius;\n  float dTheta=halfAnglePerPoint;\n  if (partialPointRadius != 0 && i == numPoints - 2) {\n    dTheta=anglePerPoint * partialPointAmount / 2f;\n  }\n  if (partialPointRadius != 0 && i == numPoints - 1) {\n    radius=partialPointRadius;\n  }\n  previousX=x;\n  previousY=y;\n  x=(float)(radius * Math.cos(currentAngle));\n  y=(float)(radius * Math.sin(currentAngle));\n  if (innerRoundedness == 0 && outerRoundedness == 0) {\n    path.lineTo(x,y);\n  }\n else {\n    float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n    float cp1Dx=(float)Math.cos(cp1Theta);\n    float cp1Dy=(float)Math.sin(cp1Theta);\n    float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n    float cp2Dx=(float)Math.cos(cp2Theta);\n    float cp2Dy=(float)Math.sin(cp2Theta);\n    float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n    float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n    float cp1Radius=longSegment ? innerRadius : outerRadius;\n    float cp2Radius=longSegment ? outerRadius : innerRadius;\n    float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n    float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n    float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n    float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n    if (partialPointAmount != 0) {\n      if (i == 0) {\n        cp1x*=partialPointAmount;\n        cp1y*=partialPointAmount;\n      }\n else       if (i == numPoints - 1) {\n        cp2x*=partialPointAmount;\n        cp2y*=partialPointAmount;\n      }\n    }\n    path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n  }\n  currentAngle+=dTheta;\n  longSegment=!longSegment;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 311,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4027,
        "startLineNumber" : 121,
        "startColumnNumber" : 32,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4057,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void createStarPath(){\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 587,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 197,
        "endColumnNumber" : 66
      },
      "nodeContext" : "float cp1Radius=longSegment ? innerRadius : outerRadius;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "innerRadius",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 198,
      "startColumnNumber" : 54,
      "endLineNumber" : 198,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 198,
        "startColumnNumber" : 26,
        "endLineNumber" : 198,
        "endColumnNumber" : 65
      },
      "nodeContext" : "longSegment ? outerRadius : innerRadius",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 198,
        "startColumnNumber" : 14,
        "endLineNumber" : 198,
        "endColumnNumber" : 65
      },
      "nodeContext" : "cp2Radius=longSegment ? outerRadius : innerRadius",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 66
      },
      "nodeContext" : "float cp2Radius=longSegment ? outerRadius : innerRadius;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 186,
        "startColumnNumber" : 13,
        "endLineNumber" : 215,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n  float cp1Dx=(float)Math.cos(cp1Theta);\n  float cp1Dy=(float)Math.sin(cp1Theta);\n  float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n  float cp2Dx=(float)Math.cos(cp2Theta);\n  float cp2Dy=(float)Math.sin(cp2Theta);\n  float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n  float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n  float cp1Radius=longSegment ? innerRadius : outerRadius;\n  float cp2Radius=longSegment ? outerRadius : innerRadius;\n  float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n  float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n  float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n  float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n  if (partialPointAmount != 0) {\n    if (i == 0) {\n      cp1x*=partialPointAmount;\n      cp1y*=partialPointAmount;\n    }\n else     if (i == numPoints - 1) {\n      cp2x*=partialPointAmount;\n      cp2y*=partialPointAmount;\n    }\n  }\n  path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1452,
        "startLineNumber" : 184,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (innerRoundedness == 0 && outerRoundedness == 0) {\n  path.lineTo(x,y);\n}\n else {\n  float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n  float cp1Dx=(float)Math.cos(cp1Theta);\n  float cp1Dy=(float)Math.sin(cp1Theta);\n  float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n  float cp2Dx=(float)Math.cos(cp2Theta);\n  float cp2Dy=(float)Math.sin(cp2Theta);\n  float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n  float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n  float cp1Radius=longSegment ? innerRadius : outerRadius;\n  float cp2Radius=longSegment ? outerRadius : innerRadius;\n  float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n  float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n  float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n  float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n  if (partialPointAmount != 0) {\n    if (i == 0) {\n      cp1x*=partialPointAmount;\n      cp1y*=partialPointAmount;\n    }\n else     if (i == numPoints - 1) {\n      cp2x*=partialPointAmount;\n      cp2y*=partialPointAmount;\n    }\n  }\n  path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 211,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2011,
        "startLineNumber" : 170,
        "startColumnNumber" : 40,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float radius=longSegment ? outerRadius : innerRadius;\n  float dTheta=halfAnglePerPoint;\n  if (partialPointRadius != 0 && i == numPoints - 2) {\n    dTheta=anglePerPoint * partialPointAmount / 2f;\n  }\n  if (partialPointRadius != 0 && i == numPoints - 1) {\n    radius=partialPointRadius;\n  }\n  previousX=x;\n  previousY=y;\n  x=(float)(radius * Math.cos(currentAngle));\n  y=(float)(radius * Math.sin(currentAngle));\n  if (innerRoundedness == 0 && outerRoundedness == 0) {\n    path.lineTo(x,y);\n  }\n else {\n    float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n    float cp1Dx=(float)Math.cos(cp1Theta);\n    float cp1Dy=(float)Math.sin(cp1Theta);\n    float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n    float cp2Dx=(float)Math.cos(cp2Theta);\n    float cp2Dy=(float)Math.sin(cp2Theta);\n    float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n    float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n    float cp1Radius=longSegment ? innerRadius : outerRadius;\n    float cp2Radius=longSegment ? outerRadius : innerRadius;\n    float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n    float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n    float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n    float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n    if (partialPointAmount != 0) {\n      if (i == 0) {\n        cp1x*=partialPointAmount;\n        cp1y*=partialPointAmount;\n      }\n else       if (i == numPoints - 1) {\n        cp2x*=partialPointAmount;\n        cp2y*=partialPointAmount;\n      }\n    }\n    path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n  }\n  currentAngle+=dTheta;\n  longSegment=!longSegment;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2047,
        "startLineNumber" : 170,
        "startColumnNumber" : 4,
        "endLineNumber" : 219,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < numPoints; i++) {\n  float radius=longSegment ? outerRadius : innerRadius;\n  float dTheta=halfAnglePerPoint;\n  if (partialPointRadius != 0 && i == numPoints - 2) {\n    dTheta=anglePerPoint * partialPointAmount / 2f;\n  }\n  if (partialPointRadius != 0 && i == numPoints - 1) {\n    radius=partialPointRadius;\n  }\n  previousX=x;\n  previousY=y;\n  x=(float)(radius * Math.cos(currentAngle));\n  y=(float)(radius * Math.sin(currentAngle));\n  if (innerRoundedness == 0 && outerRoundedness == 0) {\n    path.lineTo(x,y);\n  }\n else {\n    float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n    float cp1Dx=(float)Math.cos(cp1Theta);\n    float cp1Dy=(float)Math.sin(cp1Theta);\n    float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n    float cp2Dx=(float)Math.cos(cp2Theta);\n    float cp2Dy=(float)Math.sin(cp2Theta);\n    float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n    float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n    float cp1Radius=longSegment ? innerRadius : outerRadius;\n    float cp2Radius=longSegment ? outerRadius : innerRadius;\n    float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n    float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n    float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n    float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n    if (partialPointAmount != 0) {\n      if (i == 0) {\n        cp1x*=partialPointAmount;\n        cp1y*=partialPointAmount;\n      }\n else       if (i == numPoints - 1) {\n        cp2x*=partialPointAmount;\n        cp2y*=partialPointAmount;\n      }\n    }\n    path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n  }\n  currentAngle+=dTheta;\n  longSegment=!longSegment;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 311,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4027,
        "startLineNumber" : 121,
        "startColumnNumber" : 32,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 583,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4057,
        "startLineNumber" : 121,
        "startColumnNumber" : 2,
        "endLineNumber" : 225,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void createStarPath(){\n  float points=pointsAnimation.getValue();\n  double currentAngle=rotationAnimation == null ? 0f : rotationAnimation.getValue();\n  currentAngle-=90;\n  currentAngle=Math.toRadians(currentAngle);\n  float anglePerPoint=(float)(2 * Math.PI / points);\n  float halfAnglePerPoint=anglePerPoint / 2.0f;\n  float partialPointAmount=points - (int)points;\n  if (partialPointAmount != 0) {\n    currentAngle+=halfAnglePerPoint * (1f - partialPointAmount);\n  }\n  float outerRadius=outerRadiusAnimation.getValue();\n  float innerRadius=innerRadiusAnimation.getValue();\n  float innerRoundedness=0f;\n  if (innerRoundednessAnimation != null) {\n    innerRoundedness=innerRoundednessAnimation.getValue() / 100f;\n  }\n  float outerRoundedness=0f;\n  if (outerRoundednessAnimation != null) {\n    outerRoundedness=outerRoundednessAnimation.getValue() / 100f;\n  }\n  float x;\n  float y;\n  float previousX;\n  float previousY;\n  float partialPointRadius=0;\n  if (partialPointAmount != 0) {\n    partialPointRadius=innerRadius + partialPointAmount * (outerRadius - innerRadius);\n    x=(float)(partialPointRadius * Math.cos(currentAngle));\n    y=(float)(partialPointRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=anglePerPoint * partialPointAmount / 2f;\n  }\n else {\n    x=(float)(outerRadius * Math.cos(currentAngle));\n    y=(float)(outerRadius * Math.sin(currentAngle));\n    path.moveTo(x,y);\n    currentAngle+=halfAnglePerPoint;\n  }\n  boolean longSegment=false;\n  double numPoints=Math.ceil(points) * 2;\n  for (int i=0; i < numPoints; i++) {\n    float radius=longSegment ? outerRadius : innerRadius;\n    float dTheta=halfAnglePerPoint;\n    if (partialPointRadius != 0 && i == numPoints - 2) {\n      dTheta=anglePerPoint * partialPointAmount / 2f;\n    }\n    if (partialPointRadius != 0 && i == numPoints - 1) {\n      radius=partialPointRadius;\n    }\n    previousX=x;\n    previousY=y;\n    x=(float)(radius * Math.cos(currentAngle));\n    y=(float)(radius * Math.sin(currentAngle));\n    if (innerRoundedness == 0 && outerRoundedness == 0) {\n      path.lineTo(x,y);\n    }\n else {\n      float cp1Theta=(float)(Math.atan2(previousY,previousX) - Math.PI / 2f);\n      float cp1Dx=(float)Math.cos(cp1Theta);\n      float cp1Dy=(float)Math.sin(cp1Theta);\n      float cp2Theta=(float)(Math.atan2(y,x) - Math.PI / 2f);\n      float cp2Dx=(float)Math.cos(cp2Theta);\n      float cp2Dy=(float)Math.sin(cp2Theta);\n      float cp1Roundedness=longSegment ? innerRoundedness : outerRoundedness;\n      float cp2Roundedness=longSegment ? outerRoundedness : innerRoundedness;\n      float cp1Radius=longSegment ? innerRadius : outerRadius;\n      float cp2Radius=longSegment ? outerRadius : innerRadius;\n      float cp1x=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dx;\n      float cp1y=cp1Radius * cp1Roundedness * POLYSTAR_MAGIC_NUMBER* cp1Dy;\n      float cp2x=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dx;\n      float cp2y=cp2Radius * cp2Roundedness * POLYSTAR_MAGIC_NUMBER* cp2Dy;\n      if (partialPointAmount != 0) {\n        if (i == 0) {\n          cp1x*=partialPointAmount;\n          cp1y*=partialPointAmount;\n        }\n else         if (i == numPoints - 1) {\n          cp2x*=partialPointAmount;\n          cp2y*=partialPointAmount;\n        }\n      }\n      path.cubicTo(previousX - cp1x,previousY - cp1y,x + cp2x,y + cp2y,x,y);\n    }\n    currentAngle+=dTheta;\n    longSegment=!longSegment;\n  }\n  PointF position=positionAnimation.getValue();\n  path.offset(position.x,position.y);\n  path.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 587,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 198,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 66
      },
      "nodeContext" : "float cp2Radius=longSegment ? outerRadius : innerRadius;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 155,
    "startColumnNumber" : 27,
    "endLineNumber" : 155,
    "endColumnNumber" : 38
  }, {
    "charLength" : 11,
    "startLineNumber" : 155,
    "startColumnNumber" : 77,
    "endLineNumber" : 155,
    "endColumnNumber" : 88
  }, {
    "charLength" : 11,
    "startLineNumber" : 171,
    "startColumnNumber" : 49,
    "endLineNumber" : 171,
    "endColumnNumber" : 60
  }, {
    "charLength" : 11,
    "startLineNumber" : 197,
    "startColumnNumber" : 40,
    "endLineNumber" : 197,
    "endColumnNumber" : 51
  }, {
    "charLength" : 11,
    "startLineNumber" : 198,
    "startColumnNumber" : 54,
    "endLineNumber" : 198,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}