{
  "id" : 58,
  "expression" : "\"00490171/123456\"",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/test/java/org/thoughtcrime/securesms/util/PhoneNumberFormatterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"00490171/123456\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 57,
      "startColumnNumber" : 64,
      "endLineNumber" : 57,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 57,
        "startColumnNumber" : 15,
        "endLineNumber" : 57,
        "endColumnNumber" : 82
      },
      "nodeContext" : "PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 83
      },
      "nodeContext" : "assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 111
      },
      "nodeContext" : "assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\")).isEqualTo(NUMBER_MOBILE_DE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 112
      },
      "nodeContext" : "assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1633,
        "startLineNumber" : 40,
        "startColumnNumber" : 78,
        "endLineNumber" : 59,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_UK,\"(020) 7946 0018\")).isEqualTo(NUMBER_UK);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_UK,\"+442079460018\")).isEqualTo(NUMBER_UK);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_CH,\"+41 44 668 18 00\")).isEqualTo(NUMBER_CH);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_CH,\"+41 (044) 6681800\")).isEqualTo(NUMBER_CH);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049 030 123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049 (0)30123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049((0)30)123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"+49 (0) 30  1 2  3 45 6 \")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"030 123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0171123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"+490171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1717,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 59,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testFormatNumberE164() throws Exception, InvalidNumberException {\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_UK,\"(020) 7946 0018\")).isEqualTo(NUMBER_UK);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_UK,\"+442079460018\")).isEqualTo(NUMBER_UK);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_CH,\"+41 44 668 18 00\")).isEqualTo(NUMBER_CH);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_CH,\"+41 (044) 6681800\")).isEqualTo(NUMBER_CH);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049 030 123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049 (0)30123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049((0)30)123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"+49 (0) 30  1 2  3 45 6 \")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"030 123456\")).isEqualTo(NUMBER_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0171123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"+490171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n  assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"0049171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 165,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 112
      },
      "nodeContext" : "assertThat(PhoneNumberFormatter.formatE164(COUNTRY_CODE_DE,\"00490171/123456\")).isEqualTo(NUMBER_MOBILE_DE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 57,
    "startColumnNumber" : 64,
    "endLineNumber" : 57,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}