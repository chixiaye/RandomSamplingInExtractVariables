{
  "id" : 463,
  "expression" : "chunkSampleCounts",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/extractor/mp4/FixedSampleSizeRechunker.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "chunkSampleCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 74,
      "startColumnNumber" : 32,
      "endLineNumber" : 74,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int chunkSampleCount : chunkSampleCounts) {\n  rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1585,
        "startLineNumber" : 69,
        "startColumnNumber" : 38,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;\n  int rechunkedSampleCount=0;\n  for (  int chunkSampleCount : chunkSampleCounts) {\n    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n  }\n  long[] offsets=new long[rechunkedSampleCount];\n  int[] sizes=new int[rechunkedSampleCount];\n  int maximumSize=0;\n  long[] timestamps=new long[rechunkedSampleCount];\n  int[] flags=new int[rechunkedSampleCount];\n  int originalSampleIndex=0;\n  int newSampleIndex=0;\n  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n    long sampleOffset=chunkOffsets[chunkIndex];\n    while (chunkSamplesRemaining > 0) {\n      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n      offsets[newSampleIndex]=sampleOffset;\n      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n      flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n      sampleOffset+=sizes[newSampleIndex];\n      originalSampleIndex+=bufferSampleCount;\n      chunkSamplesRemaining-=bufferSampleCount;\n      newSampleIndex++;\n    }\n  }\n  long duration=timestampDeltaInTimeUnits * originalSampleIndex;\n  return new Results(offsets,sizes,maximumSize,timestamps,flags,duration);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2119,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Rechunk the given fixed sample size input to produce a new sequence of samples.\n * @param fixedSampleSize Size in bytes of each sample.\n * @param chunkOffsets Chunk offsets in the MP4 stream to rechunk.\n * @param chunkSampleCounts Sample counts for each of the MP4 stream's chunks.\n * @param timestampDeltaInTimeUnits Timestamp delta between each sample in time units.\n */\npublic static Results rechunk(int fixedSampleSize,long[] chunkOffsets,int[] chunkSampleCounts,long timestampDeltaInTimeUnits){\n  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;\n  int rechunkedSampleCount=0;\n  for (  int chunkSampleCount : chunkSampleCounts) {\n    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n  }\n  long[] offsets=new long[rechunkedSampleCount];\n  int[] sizes=new int[rechunkedSampleCount];\n  int maximumSize=0;\n  long[] timestamps=new long[rechunkedSampleCount];\n  int[] flags=new int[rechunkedSampleCount];\n  int originalSampleIndex=0;\n  int newSampleIndex=0;\n  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n    long sampleOffset=chunkOffsets[chunkIndex];\n    while (chunkSamplesRemaining > 0) {\n      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n      offsets[newSampleIndex]=sampleOffset;\n      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n      flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n      sampleOffset+=sizes[newSampleIndex];\n      originalSampleIndex+=bufferSampleCount;\n      chunkSamplesRemaining-=bufferSampleCount;\n      newSampleIndex++;\n    }\n  }\n  long duration=timestampDeltaInTimeUnits * originalSampleIndex;\n  return new Results(offsets,sizes,maximumSize,timestamps,flags,duration);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int chunkSampleCount : chunkSampleCounts) {\n  rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "chunkSampleCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 86,
      "startColumnNumber" : 42,
      "endLineNumber" : 86,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 86,
        "startColumnNumber" : 42,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "chunkSampleCounts.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 86,
        "startColumnNumber" : 29,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "chunkIndex < chunkSampleCounts.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n  int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n  long sampleOffset=chunkOffsets[chunkIndex];\n  while (chunkSamplesRemaining > 0) {\n    int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n    offsets[newSampleIndex]=sampleOffset;\n    sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n    maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n    timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n    flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n    sampleOffset+=sizes[newSampleIndex];\n    originalSampleIndex+=bufferSampleCount;\n    chunkSamplesRemaining-=bufferSampleCount;\n    newSampleIndex++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1585,
        "startLineNumber" : 69,
        "startColumnNumber" : 38,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;\n  int rechunkedSampleCount=0;\n  for (  int chunkSampleCount : chunkSampleCounts) {\n    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n  }\n  long[] offsets=new long[rechunkedSampleCount];\n  int[] sizes=new int[rechunkedSampleCount];\n  int maximumSize=0;\n  long[] timestamps=new long[rechunkedSampleCount];\n  int[] flags=new int[rechunkedSampleCount];\n  int originalSampleIndex=0;\n  int newSampleIndex=0;\n  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n    long sampleOffset=chunkOffsets[chunkIndex];\n    while (chunkSamplesRemaining > 0) {\n      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n      offsets[newSampleIndex]=sampleOffset;\n      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n      flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n      sampleOffset+=sizes[newSampleIndex];\n      originalSampleIndex+=bufferSampleCount;\n      chunkSamplesRemaining-=bufferSampleCount;\n      newSampleIndex++;\n    }\n  }\n  long duration=timestampDeltaInTimeUnits * originalSampleIndex;\n  return new Results(offsets,sizes,maximumSize,timestamps,flags,duration);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2119,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Rechunk the given fixed sample size input to produce a new sequence of samples.\n * @param fixedSampleSize Size in bytes of each sample.\n * @param chunkOffsets Chunk offsets in the MP4 stream to rechunk.\n * @param chunkSampleCounts Sample counts for each of the MP4 stream's chunks.\n * @param timestampDeltaInTimeUnits Timestamp delta between each sample in time units.\n */\npublic static Results rechunk(int fixedSampleSize,long[] chunkOffsets,int[] chunkSampleCounts,long timestampDeltaInTimeUnits){\n  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;\n  int rechunkedSampleCount=0;\n  for (  int chunkSampleCount : chunkSampleCounts) {\n    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n  }\n  long[] offsets=new long[rechunkedSampleCount];\n  int[] sizes=new int[rechunkedSampleCount];\n  int maximumSize=0;\n  long[] timestamps=new long[rechunkedSampleCount];\n  int[] flags=new int[rechunkedSampleCount];\n  int originalSampleIndex=0;\n  int newSampleIndex=0;\n  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n    long sampleOffset=chunkOffsets[chunkIndex];\n    while (chunkSamplesRemaining > 0) {\n      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n      offsets[newSampleIndex]=sampleOffset;\n      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n      flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n      sampleOffset+=sizes[newSampleIndex];\n      originalSampleIndex+=bufferSampleCount;\n      chunkSamplesRemaining-=bufferSampleCount;\n      newSampleIndex++;\n    }\n  }\n  long duration=timestampDeltaInTimeUnits * originalSampleIndex;\n  return new Results(offsets,sizes,maximumSize,timestamps,flags,duration);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 86,
        "startColumnNumber" : 29,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "chunkIndex < chunkSampleCounts.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int[]"
  }, {
    "nodeContext" : "chunkSampleCounts",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 87,
      "startColumnNumber" : 34,
      "endLineNumber" : 87,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 87,
        "startColumnNumber" : 34,
        "endLineNumber" : 87,
        "endColumnNumber" : 63
      },
      "nodeContext" : "chunkSampleCounts[chunkIndex]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 10,
        "endLineNumber" : 87,
        "endColumnNumber" : 63
      },
      "nodeContext" : "chunkSamplesRemaining=chunkSampleCounts[chunkIndex]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 87,
        "startColumnNumber" : 6,
        "endLineNumber" : 87,
        "endColumnNumber" : 64
      },
      "nodeContext" : "int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 764,
        "startLineNumber" : 86,
        "startColumnNumber" : 82,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n  long sampleOffset=chunkOffsets[chunkIndex];\n  while (chunkSamplesRemaining > 0) {\n    int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n    offsets[newSampleIndex]=sampleOffset;\n    sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n    maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n    timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n    flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n    sampleOffset+=sizes[newSampleIndex];\n    originalSampleIndex+=bufferSampleCount;\n    chunkSamplesRemaining-=bufferSampleCount;\n    newSampleIndex++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n  int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n  long sampleOffset=chunkOffsets[chunkIndex];\n  while (chunkSamplesRemaining > 0) {\n    int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n    offsets[newSampleIndex]=sampleOffset;\n    sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n    maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n    timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n    flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n    sampleOffset+=sizes[newSampleIndex];\n    originalSampleIndex+=bufferSampleCount;\n    chunkSamplesRemaining-=bufferSampleCount;\n    newSampleIndex++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1585,
        "startLineNumber" : 69,
        "startColumnNumber" : 38,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;\n  int rechunkedSampleCount=0;\n  for (  int chunkSampleCount : chunkSampleCounts) {\n    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n  }\n  long[] offsets=new long[rechunkedSampleCount];\n  int[] sizes=new int[rechunkedSampleCount];\n  int maximumSize=0;\n  long[] timestamps=new long[rechunkedSampleCount];\n  int[] flags=new int[rechunkedSampleCount];\n  int originalSampleIndex=0;\n  int newSampleIndex=0;\n  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n    long sampleOffset=chunkOffsets[chunkIndex];\n    while (chunkSamplesRemaining > 0) {\n      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n      offsets[newSampleIndex]=sampleOffset;\n      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n      flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n      sampleOffset+=sizes[newSampleIndex];\n      originalSampleIndex+=bufferSampleCount;\n      chunkSamplesRemaining-=bufferSampleCount;\n      newSampleIndex++;\n    }\n  }\n  long duration=timestampDeltaInTimeUnits * originalSampleIndex;\n  return new Results(offsets,sizes,maximumSize,timestamps,flags,duration);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 203,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2119,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 109,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Rechunk the given fixed sample size input to produce a new sequence of samples.\n * @param fixedSampleSize Size in bytes of each sample.\n * @param chunkOffsets Chunk offsets in the MP4 stream to rechunk.\n * @param chunkSampleCounts Sample counts for each of the MP4 stream's chunks.\n * @param timestampDeltaInTimeUnits Timestamp delta between each sample in time units.\n */\npublic static Results rechunk(int fixedSampleSize,long[] chunkOffsets,int[] chunkSampleCounts,long timestampDeltaInTimeUnits){\n  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;\n  int rechunkedSampleCount=0;\n  for (  int chunkSampleCount : chunkSampleCounts) {\n    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);\n  }\n  long[] offsets=new long[rechunkedSampleCount];\n  int[] sizes=new int[rechunkedSampleCount];\n  int maximumSize=0;\n  long[] timestamps=new long[rechunkedSampleCount];\n  int[] flags=new int[rechunkedSampleCount];\n  int originalSampleIndex=0;\n  int newSampleIndex=0;\n  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {\n    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n    long sampleOffset=chunkOffsets[chunkIndex];\n    while (chunkSamplesRemaining > 0) {\n      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);\n      offsets[newSampleIndex]=sampleOffset;\n      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;\n      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);\n      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);\n      flags[newSampleIndex]=C.BUFFER_FLAG_KEY_FRAME;\n      sampleOffset+=sizes[newSampleIndex];\n      originalSampleIndex+=bufferSampleCount;\n      chunkSamplesRemaining-=bufferSampleCount;\n      newSampleIndex++;\n    }\n  }\n  long duration=timestampDeltaInTimeUnits * originalSampleIndex;\n  return new Results(offsets,sizes,maximumSize,timestamps,flags,duration);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 226,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 87,
        "startColumnNumber" : 6,
        "endLineNumber" : 87,
        "endColumnNumber" : 64
      },
      "nodeContext" : "int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int[]"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 74,
    "startColumnNumber" : 32,
    "endLineNumber" : 74,
    "endColumnNumber" : 49
  }, {
    "charLength" : 17,
    "startLineNumber" : 86,
    "startColumnNumber" : 42,
    "endLineNumber" : 86,
    "endColumnNumber" : 59
  }, {
    "charLength" : 17,
    "startLineNumber" : 87,
    "startColumnNumber" : 34,
    "endLineNumber" : 87,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}