{
  "id" : 429,
  "expression" : "NodeType.class",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/ColumnTypeEsMapping.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "NodeType.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 33,
      "startColumnNumber" : 68,
      "endLineNumber" : 33,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 33,
        "startColumnNumber" : 68,
        "endLineNumber" : 33,
        "endColumnNumber" : 95
      },
      "nodeContext" : "NodeType.class.equals(type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 33,
        "startColumnNumber" : 12,
        "endLineNumber" : 33,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1005,
        "startLineNumber" : 33,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n  return \"integer\";\n}\n else if (Long.class.equals(type) || long.class.equals(type)) {\n  return \"long\";\n}\n else if (Double.class.equals(type) || double.class.equals(type)) {\n  return \"double\";\n}\n else if (String.class.equals(type)) {\n  return \"keyword\";\n}\n else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n  return \"text\";\n}\n else if (byte[].class.equals(type)) {\n  return \"binary\";\n}\n else if (JsonObject.class.equals(type)) {\n  return \"text\";\n}\n else if (List.class.isAssignableFrom(type)) {\n  final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n  return transform((Class<?>)elementType,elementType);\n}\n else {\n  throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 138,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1021,
        "startLineNumber" : 32,
        "startColumnNumber" : 61,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n    return \"integer\";\n  }\n else   if (Long.class.equals(type) || long.class.equals(type)) {\n    return \"long\";\n  }\n else   if (Double.class.equals(type) || double.class.equals(type)) {\n    return \"double\";\n  }\n else   if (String.class.equals(type)) {\n    return \"keyword\";\n  }\n else   if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n    return \"text\";\n  }\n else   if (byte[].class.equals(type)) {\n    return \"binary\";\n  }\n else   if (JsonObject.class.equals(type)) {\n    return \"text\";\n  }\n else   if (List.class.isAssignableFrom(type)) {\n    final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n    return transform((Class<?>)elementType,elementType);\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1092,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String transform(Class<?> type,Type genericType){\n  if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n    return \"integer\";\n  }\n else   if (Long.class.equals(type) || long.class.equals(type)) {\n    return \"long\";\n  }\n else   if (Double.class.equals(type) || double.class.equals(type)) {\n    return \"double\";\n  }\n else   if (String.class.equals(type)) {\n    return \"keyword\";\n  }\n else   if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n    return \"text\";\n  }\n else   if (byte[].class.equals(type)) {\n    return \"binary\";\n  }\n else   if (JsonObject.class.equals(type)) {\n    return \"text\";\n  }\n else   if (List.class.isAssignableFrom(type)) {\n    final Type elementType=((ParameterizedType)genericType).getActualTypeArguments()[0];\n    return transform((Class<?>)elementType,elementType);\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 33,
        "startColumnNumber" : 12,
        "endLineNumber" : 33,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.skywalking.oap.server.core.analysis.NodeType>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 33,
    "startColumnNumber" : 68,
    "endLineNumber" : 33,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}