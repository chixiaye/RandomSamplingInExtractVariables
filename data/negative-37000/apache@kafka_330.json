{
  "id" : 330,
  "expression" : "0.5",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/protocol/types/ProtocolSerializationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0.5",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 95,
      "startColumnNumber" : 29,
      "endLineNumber" : 95,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 4,
        "startLineNumber" : 95,
        "startColumnNumber" : 28,
        "endLineNumber" : 95,
        "endColumnNumber" : 32
      },
      "nodeContext" : "-0.5",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 44
      },
      "nodeContext" : "check(Type.FLOAT64,-0.5,\"FLOAT64\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 45
      },
      "nodeContext" : "check(Type.FLOAT64,-0.5,\"FLOAT64\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3506,
        "startLineNumber" : 87,
        "startColumnNumber" : 29,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  check(Type.BOOLEAN,false,\"BOOLEAN\");\n  check(Type.BOOLEAN,true,\"BOOLEAN\");\n  check(Type.INT8,(byte)-111,\"INT8\");\n  check(Type.INT16,(short)-11111,\"INT16\");\n  check(Type.INT32,-11111111,\"INT32\");\n  check(Type.INT64,-11111111111L,\"INT64\");\n  check(Type.FLOAT64,2.5,\"FLOAT64\");\n  check(Type.FLOAT64,-0.5,\"FLOAT64\");\n  check(Type.FLOAT64,1e300,\"FLOAT64\");\n  check(Type.FLOAT64,0.0,\"FLOAT64\");\n  check(Type.FLOAT64,-0.0,\"FLOAT64\");\n  check(Type.FLOAT64,Double.MAX_VALUE,\"FLOAT64\");\n  check(Type.FLOAT64,Double.MIN_VALUE,\"FLOAT64\");\n  check(Type.FLOAT64,Double.NaN,\"FLOAT64\");\n  check(Type.FLOAT64,Double.NEGATIVE_INFINITY,\"FLOAT64\");\n  check(Type.FLOAT64,Double.POSITIVE_INFINITY,\"FLOAT64\");\n  check(Type.STRING,\"\",\"STRING\");\n  check(Type.STRING,\"hello\",\"STRING\");\n  check(Type.STRING,\"A\\u00ea\\u00f1\\u00fcC\",\"STRING\");\n  check(Type.COMPACT_STRING,\"\",\"COMPACT_STRING\");\n  check(Type.COMPACT_STRING,\"hello\",\"COMPACT_STRING\");\n  check(Type.COMPACT_STRING,\"A\\u00ea\\u00f1\\u00fcC\",\"COMPACT_STRING\");\n  check(Type.NULLABLE_STRING,null,\"NULLABLE_STRING\");\n  check(Type.NULLABLE_STRING,\"\",\"NULLABLE_STRING\");\n  check(Type.NULLABLE_STRING,\"hello\",\"NULLABLE_STRING\");\n  check(Type.COMPACT_NULLABLE_STRING,null,\"COMPACT_NULLABLE_STRING\");\n  check(Type.COMPACT_NULLABLE_STRING,\"\",\"COMPACT_NULLABLE_STRING\");\n  check(Type.COMPACT_NULLABLE_STRING,\"hello\",\"COMPACT_NULLABLE_STRING\");\n  check(Type.BYTES,ByteBuffer.allocate(0),\"BYTES\");\n  check(Type.BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"BYTES\");\n  check(Type.COMPACT_BYTES,ByteBuffer.allocate(0),\"COMPACT_BYTES\");\n  check(Type.COMPACT_BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"COMPACT_BYTES\");\n  check(Type.NULLABLE_BYTES,null,\"NULLABLE_BYTES\");\n  check(Type.NULLABLE_BYTES,ByteBuffer.allocate(0),\"NULLABLE_BYTES\");\n  check(Type.NULLABLE_BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"NULLABLE_BYTES\");\n  check(Type.COMPACT_NULLABLE_BYTES,null,\"COMPACT_NULLABLE_BYTES\");\n  check(Type.COMPACT_NULLABLE_BYTES,ByteBuffer.allocate(0),\"COMPACT_NULLABLE_BYTES\");\n  check(Type.COMPACT_NULLABLE_BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"COMPACT_NULLABLE_BYTES\");\n  check(Type.VARINT,Integer.MAX_VALUE,\"VARINT\");\n  check(Type.VARINT,Integer.MIN_VALUE,\"VARINT\");\n  check(Type.VARLONG,Long.MAX_VALUE,\"VARLONG\");\n  check(Type.VARLONG,Long.MIN_VALUE,\"VARLONG\");\n  check(new ArrayOf(Type.INT32),new Object[]{1,2,3,4},\"ARRAY(INT32)\");\n  check(new ArrayOf(Type.STRING),new Object[]{},\"ARRAY(STRING)\");\n  check(new ArrayOf(Type.STRING),new Object[]{\"hello\",\"there\",\"beautiful\"},\"ARRAY(STRING)\");\n  check(new CompactArrayOf(Type.INT32),new Object[]{1,2,3,4},\"COMPACT_ARRAY(INT32)\");\n  check(new CompactArrayOf(Type.COMPACT_STRING),new Object[]{},\"COMPACT_ARRAY(COMPACT_STRING)\");\n  check(new CompactArrayOf(Type.COMPACT_STRING),new Object[]{\"hello\",\"there\",\"beautiful\"},\"COMPACT_ARRAY(COMPACT_STRING)\");\n  check(ArrayOf.nullable(Type.STRING),null,\"ARRAY(STRING)\");\n  check(CompactArrayOf.nullable(Type.COMPACT_STRING),null,\"COMPACT_ARRAY(COMPACT_STRING)\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 529,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3541,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 145,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSimple(){\n  check(Type.BOOLEAN,false,\"BOOLEAN\");\n  check(Type.BOOLEAN,true,\"BOOLEAN\");\n  check(Type.INT8,(byte)-111,\"INT8\");\n  check(Type.INT16,(short)-11111,\"INT16\");\n  check(Type.INT32,-11111111,\"INT32\");\n  check(Type.INT64,-11111111111L,\"INT64\");\n  check(Type.FLOAT64,2.5,\"FLOAT64\");\n  check(Type.FLOAT64,-0.5,\"FLOAT64\");\n  check(Type.FLOAT64,1e300,\"FLOAT64\");\n  check(Type.FLOAT64,0.0,\"FLOAT64\");\n  check(Type.FLOAT64,-0.0,\"FLOAT64\");\n  check(Type.FLOAT64,Double.MAX_VALUE,\"FLOAT64\");\n  check(Type.FLOAT64,Double.MIN_VALUE,\"FLOAT64\");\n  check(Type.FLOAT64,Double.NaN,\"FLOAT64\");\n  check(Type.FLOAT64,Double.NEGATIVE_INFINITY,\"FLOAT64\");\n  check(Type.FLOAT64,Double.POSITIVE_INFINITY,\"FLOAT64\");\n  check(Type.STRING,\"\",\"STRING\");\n  check(Type.STRING,\"hello\",\"STRING\");\n  check(Type.STRING,\"A\\u00ea\\u00f1\\u00fcC\",\"STRING\");\n  check(Type.COMPACT_STRING,\"\",\"COMPACT_STRING\");\n  check(Type.COMPACT_STRING,\"hello\",\"COMPACT_STRING\");\n  check(Type.COMPACT_STRING,\"A\\u00ea\\u00f1\\u00fcC\",\"COMPACT_STRING\");\n  check(Type.NULLABLE_STRING,null,\"NULLABLE_STRING\");\n  check(Type.NULLABLE_STRING,\"\",\"NULLABLE_STRING\");\n  check(Type.NULLABLE_STRING,\"hello\",\"NULLABLE_STRING\");\n  check(Type.COMPACT_NULLABLE_STRING,null,\"COMPACT_NULLABLE_STRING\");\n  check(Type.COMPACT_NULLABLE_STRING,\"\",\"COMPACT_NULLABLE_STRING\");\n  check(Type.COMPACT_NULLABLE_STRING,\"hello\",\"COMPACT_NULLABLE_STRING\");\n  check(Type.BYTES,ByteBuffer.allocate(0),\"BYTES\");\n  check(Type.BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"BYTES\");\n  check(Type.COMPACT_BYTES,ByteBuffer.allocate(0),\"COMPACT_BYTES\");\n  check(Type.COMPACT_BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"COMPACT_BYTES\");\n  check(Type.NULLABLE_BYTES,null,\"NULLABLE_BYTES\");\n  check(Type.NULLABLE_BYTES,ByteBuffer.allocate(0),\"NULLABLE_BYTES\");\n  check(Type.NULLABLE_BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"NULLABLE_BYTES\");\n  check(Type.COMPACT_NULLABLE_BYTES,null,\"COMPACT_NULLABLE_BYTES\");\n  check(Type.COMPACT_NULLABLE_BYTES,ByteBuffer.allocate(0),\"COMPACT_NULLABLE_BYTES\");\n  check(Type.COMPACT_NULLABLE_BYTES,ByteBuffer.wrap(\"abcd\".getBytes()),\"COMPACT_NULLABLE_BYTES\");\n  check(Type.VARINT,Integer.MAX_VALUE,\"VARINT\");\n  check(Type.VARINT,Integer.MIN_VALUE,\"VARINT\");\n  check(Type.VARLONG,Long.MAX_VALUE,\"VARLONG\");\n  check(Type.VARLONG,Long.MIN_VALUE,\"VARLONG\");\n  check(new ArrayOf(Type.INT32),new Object[]{1,2,3,4},\"ARRAY(INT32)\");\n  check(new ArrayOf(Type.STRING),new Object[]{},\"ARRAY(STRING)\");\n  check(new ArrayOf(Type.STRING),new Object[]{\"hello\",\"there\",\"beautiful\"},\"ARRAY(STRING)\");\n  check(new CompactArrayOf(Type.INT32),new Object[]{1,2,3,4},\"COMPACT_ARRAY(INT32)\");\n  check(new CompactArrayOf(Type.COMPACT_STRING),new Object[]{},\"COMPACT_ARRAY(COMPACT_STRING)\");\n  check(new CompactArrayOf(Type.COMPACT_STRING),new Object[]{\"hello\",\"there\",\"beautiful\"},\"COMPACT_ARRAY(COMPACT_STRING)\");\n  check(ArrayOf.nullable(Type.STRING),null,\"ARRAY(STRING)\");\n  check(CompactArrayOf.nullable(Type.COMPACT_STRING),null,\"COMPACT_ARRAY(COMPACT_STRING)\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 535,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 45
      },
      "nodeContext" : "check(Type.FLOAT64,-0.5,\"FLOAT64\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 95,
    "startColumnNumber" : 29,
    "endLineNumber" : 95,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}