{
  "id" : 127,
  "expression" : "\"--pref\"",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/arduino-core/src/processing/app/helpers/CommandlineParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"--pref\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 179,
      "startColumnNumber" : 25,
      "endLineNumber" : 179,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 179,
        "startColumnNumber" : 10,
        "endLineNumber" : 179,
        "endColumnNumber" : 34
      },
      "nodeContext" : "args[i].equals(\"--pref\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 279,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 187,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (args[i].equals(\"--pref\")) {\n  i++;\n  if (i >= args.length)   BaseNoGui.showError(null,_(\"Argument required for --pref\"),3);\n  processPrefArgument(args[i]);\n  if (action == ACTION.GUI)   action=ACTION.NOOP;\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 4468,
        "startLineNumber" : 66,
        "startColumnNumber" : 42,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ACTION a=actions.get(args[i]);\n  if (a != null) {\n    if (action != ACTION.GUI && action != ACTION.NOOP) {\n      String[] valid=actions.keySet().toArray(new String[0]);\n      String mess=I18n.format(_(\"Can only pass one of: {0}\"),PApplet.join(valid,\", \"));\n      BaseNoGui.showError(null,mess,3);\n    }\n    if (a == ACTION.GET_PREF) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n      }\n      getPref=args[i];\n    }\n    if (a == ACTION.INSTALL_BOARD) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n      }\n      boardToInstall=args[i];\n    }\n    if (a == ACTION.INSTALL_LIBRARY) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n      }\n      libraryToInstall=args[i];\n    }\n    action=a;\n    continue;\n  }\n  if (args[i].startsWith(\"-psn\")) {\n    continue;\n  }\n  if (args[i].equals(\"--verbose\") || args[i].equals(\"-v\")) {\n    doVerboseBuild=true;\n    doVerboseUpload=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--preserve-temp-files\")) {\n    preserveTempFiles=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--verbose-build\")) {\n    doVerboseBuild=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--verbose-upload\")) {\n    doVerboseUpload=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--useprogrammer\")) {\n    doUseProgrammer=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--nouploadport\")) {\n    noUploadPort=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--board\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --board\"),3);\n    processBoardArgument(args[i]);\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--port\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --port\"),3);\n    BaseNoGui.selectSerialPort(args[i]);\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--curdir\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --curdir\"),3);\n    continue;\n  }\n  if (args[i].equals(\"--buildpath\")) {\n    i++;\n    if (i >= args.length) {\n      BaseNoGui.showError(null,\"Argument required for --buildpath\",3);\n    }\n    File buildFolder=new File(args[i]);\n    if (!buildFolder.exists()) {\n      BaseNoGui.showError(null,\"The build path doesn't exist\",3);\n    }\n    if (!buildFolder.isDirectory()) {\n      BaseNoGui.showError(null,\"The build path is not a folder\",3);\n    }\n    BaseNoGui.setBuildFolder(buildFolder);\n    continue;\n  }\n  if (args[i].equals(\"--pref\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --pref\"),3);\n    processPrefArgument(args[i]);\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--save-prefs\")) {\n    forceSavePrefs=true;\n    continue;\n  }\n  if (args[i].equals(\"--preferences-file\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --preferences-file\"),3);\n    continue;\n  }\n  if (args[i].startsWith(\"--\"))   BaseNoGui.showError(null,I18n.format(_(\"unknown option: {0}\"),args[i]),3);\n  filenames.add(args[i]);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 660,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4506,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < args.length; i++) {\n  ACTION a=actions.get(args[i]);\n  if (a != null) {\n    if (action != ACTION.GUI && action != ACTION.NOOP) {\n      String[] valid=actions.keySet().toArray(new String[0]);\n      String mess=I18n.format(_(\"Can only pass one of: {0}\"),PApplet.join(valid,\", \"));\n      BaseNoGui.showError(null,mess,3);\n    }\n    if (a == ACTION.GET_PREF) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n      }\n      getPref=args[i];\n    }\n    if (a == ACTION.INSTALL_BOARD) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n      }\n      boardToInstall=args[i];\n    }\n    if (a == ACTION.INSTALL_LIBRARY) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n      }\n      libraryToInstall=args[i];\n    }\n    action=a;\n    continue;\n  }\n  if (args[i].startsWith(\"-psn\")) {\n    continue;\n  }\n  if (args[i].equals(\"--verbose\") || args[i].equals(\"-v\")) {\n    doVerboseBuild=true;\n    doVerboseUpload=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--preserve-temp-files\")) {\n    preserveTempFiles=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--verbose-build\")) {\n    doVerboseBuild=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--verbose-upload\")) {\n    doVerboseUpload=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--useprogrammer\")) {\n    doUseProgrammer=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--nouploadport\")) {\n    noUploadPort=true;\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--board\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --board\"),3);\n    processBoardArgument(args[i]);\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--port\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --port\"),3);\n    BaseNoGui.selectSerialPort(args[i]);\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--curdir\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --curdir\"),3);\n    continue;\n  }\n  if (args[i].equals(\"--buildpath\")) {\n    i++;\n    if (i >= args.length) {\n      BaseNoGui.showError(null,\"Argument required for --buildpath\",3);\n    }\n    File buildFolder=new File(args[i]);\n    if (!buildFolder.exists()) {\n      BaseNoGui.showError(null,\"The build path doesn't exist\",3);\n    }\n    if (!buildFolder.isDirectory()) {\n      BaseNoGui.showError(null,\"The build path is not a folder\",3);\n    }\n    BaseNoGui.setBuildFolder(buildFolder);\n    continue;\n  }\n  if (args[i].equals(\"--pref\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --pref\"),3);\n    processPrefArgument(args[i]);\n    if (action == ACTION.GUI)     action=ACTION.NOOP;\n    continue;\n  }\n  if (args[i].equals(\"--save-prefs\")) {\n    forceSavePrefs=true;\n    continue;\n  }\n  if (args[i].equals(\"--preferences-file\")) {\n    i++;\n    if (i >= args.length)     BaseNoGui.showError(null,_(\"Argument required for --preferences-file\"),3);\n    continue;\n  }\n  if (args[i].startsWith(\"--\"))   BaseNoGui.showError(null,I18n.format(_(\"unknown option: {0}\"),args[i]),3);\n  filenames.add(args[i]);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 673,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4963,
        "startLineNumber" : 56,
        "startColumnNumber" : 45,
        "endLineNumber" : 204,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Map<String,ACTION> actions=new HashMap<String,ACTION>();\n  actions.put(\"--verify\",ACTION.VERIFY);\n  actions.put(\"--upload\",ACTION.UPLOAD);\n  actions.put(\"--get-pref\",ACTION.GET_PREF);\n  actions.put(\"--install-boards\",ACTION.INSTALL_BOARD);\n  actions.put(\"--install-library\",ACTION.INSTALL_LIBRARY);\n  for (int i=0; i < args.length; i++) {\n    ACTION a=actions.get(args[i]);\n    if (a != null) {\n      if (action != ACTION.GUI && action != ACTION.NOOP) {\n        String[] valid=actions.keySet().toArray(new String[0]);\n        String mess=I18n.format(_(\"Can only pass one of: {0}\"),PApplet.join(valid,\", \"));\n        BaseNoGui.showError(null,mess,3);\n      }\n      if (a == ACTION.GET_PREF) {\n        i++;\n        if (i >= args.length) {\n          BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n        }\n        getPref=args[i];\n      }\n      if (a == ACTION.INSTALL_BOARD) {\n        i++;\n        if (i >= args.length) {\n          BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n        }\n        boardToInstall=args[i];\n      }\n      if (a == ACTION.INSTALL_LIBRARY) {\n        i++;\n        if (i >= args.length) {\n          BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n        }\n        libraryToInstall=args[i];\n      }\n      action=a;\n      continue;\n    }\n    if (args[i].startsWith(\"-psn\")) {\n      continue;\n    }\n    if (args[i].equals(\"--verbose\") || args[i].equals(\"-v\")) {\n      doVerboseBuild=true;\n      doVerboseUpload=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--preserve-temp-files\")) {\n      preserveTempFiles=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--verbose-build\")) {\n      doVerboseBuild=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--verbose-upload\")) {\n      doVerboseUpload=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--useprogrammer\")) {\n      doUseProgrammer=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--nouploadport\")) {\n      noUploadPort=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--board\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --board\"),3);\n      processBoardArgument(args[i]);\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--port\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --port\"),3);\n      BaseNoGui.selectSerialPort(args[i]);\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--curdir\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --curdir\"),3);\n      continue;\n    }\n    if (args[i].equals(\"--buildpath\")) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,\"Argument required for --buildpath\",3);\n      }\n      File buildFolder=new File(args[i]);\n      if (!buildFolder.exists()) {\n        BaseNoGui.showError(null,\"The build path doesn't exist\",3);\n      }\n      if (!buildFolder.isDirectory()) {\n        BaseNoGui.showError(null,\"The build path is not a folder\",3);\n      }\n      BaseNoGui.setBuildFolder(buildFolder);\n      continue;\n    }\n    if (args[i].equals(\"--pref\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --pref\"),3);\n      processPrefArgument(args[i]);\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--save-prefs\")) {\n      forceSavePrefs=true;\n      continue;\n    }\n    if (args[i].equals(\"--preferences-file\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --preferences-file\"),3);\n      continue;\n    }\n    if (args[i].startsWith(\"--\"))     BaseNoGui.showError(null,I18n.format(_(\"unknown option: {0}\"),args[i]),3);\n    filenames.add(args[i]);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 733,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5006,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 204,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void parseArguments(String[] args){\n  final Map<String,ACTION> actions=new HashMap<String,ACTION>();\n  actions.put(\"--verify\",ACTION.VERIFY);\n  actions.put(\"--upload\",ACTION.UPLOAD);\n  actions.put(\"--get-pref\",ACTION.GET_PREF);\n  actions.put(\"--install-boards\",ACTION.INSTALL_BOARD);\n  actions.put(\"--install-library\",ACTION.INSTALL_LIBRARY);\n  for (int i=0; i < args.length; i++) {\n    ACTION a=actions.get(args[i]);\n    if (a != null) {\n      if (action != ACTION.GUI && action != ACTION.NOOP) {\n        String[] valid=actions.keySet().toArray(new String[0]);\n        String mess=I18n.format(_(\"Can only pass one of: {0}\"),PApplet.join(valid,\", \"));\n        BaseNoGui.showError(null,mess,3);\n      }\n      if (a == ACTION.GET_PREF) {\n        i++;\n        if (i >= args.length) {\n          BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n        }\n        getPref=args[i];\n      }\n      if (a == ACTION.INSTALL_BOARD) {\n        i++;\n        if (i >= args.length) {\n          BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n        }\n        boardToInstall=args[i];\n      }\n      if (a == ACTION.INSTALL_LIBRARY) {\n        i++;\n        if (i >= args.length) {\n          BaseNoGui.showError(null,I18n.format(_(\"Argument required for {0}\"),a.value),3);\n        }\n        libraryToInstall=args[i];\n      }\n      action=a;\n      continue;\n    }\n    if (args[i].startsWith(\"-psn\")) {\n      continue;\n    }\n    if (args[i].equals(\"--verbose\") || args[i].equals(\"-v\")) {\n      doVerboseBuild=true;\n      doVerboseUpload=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--preserve-temp-files\")) {\n      preserveTempFiles=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--verbose-build\")) {\n      doVerboseBuild=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--verbose-upload\")) {\n      doVerboseUpload=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--useprogrammer\")) {\n      doUseProgrammer=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--nouploadport\")) {\n      noUploadPort=true;\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--board\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --board\"),3);\n      processBoardArgument(args[i]);\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--port\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --port\"),3);\n      BaseNoGui.selectSerialPort(args[i]);\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--curdir\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --curdir\"),3);\n      continue;\n    }\n    if (args[i].equals(\"--buildpath\")) {\n      i++;\n      if (i >= args.length) {\n        BaseNoGui.showError(null,\"Argument required for --buildpath\",3);\n      }\n      File buildFolder=new File(args[i]);\n      if (!buildFolder.exists()) {\n        BaseNoGui.showError(null,\"The build path doesn't exist\",3);\n      }\n      if (!buildFolder.isDirectory()) {\n        BaseNoGui.showError(null,\"The build path is not a folder\",3);\n      }\n      BaseNoGui.setBuildFolder(buildFolder);\n      continue;\n    }\n    if (args[i].equals(\"--pref\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --pref\"),3);\n      processPrefArgument(args[i]);\n      if (action == ACTION.GUI)       action=ACTION.NOOP;\n      continue;\n    }\n    if (args[i].equals(\"--save-prefs\")) {\n      forceSavePrefs=true;\n      continue;\n    }\n    if (args[i].equals(\"--preferences-file\")) {\n      i++;\n      if (i >= args.length)       BaseNoGui.showError(null,_(\"Argument required for --preferences-file\"),3);\n      continue;\n    }\n    if (args[i].startsWith(\"--\"))     BaseNoGui.showError(null,I18n.format(_(\"unknown option: {0}\"),args[i]),3);\n    filenames.add(args[i]);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 743,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 179,
        "startColumnNumber" : 10,
        "endLineNumber" : 179,
        "endColumnNumber" : 34
      },
      "nodeContext" : "args[i].equals(\"--pref\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 179,
    "startColumnNumber" : 25,
    "endLineNumber" : 179,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}