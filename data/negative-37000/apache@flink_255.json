{
  "id" : 255,
  "expression" : "hasDirtyJobResultEntry(jobId) || hasCleanJobResultEntry(jobId)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-runtime/src/main/java/org/apache/flink/runtime/highavailability/JobResultStore.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "hasDirtyJobResultEntry(jobId) || hasCleanJobResultEntry(jobId)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 78,
      "startColumnNumber" : 15,
      "endLineNumber" : 78,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return hasDirtyJobResultEntry(jobId) || hasCleanJobResultEntry(jobId);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 77,
        "startColumnNumber" : 70,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return hasDirtyJobResultEntry(jobId) || hasCleanJobResultEntry(jobId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 593,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns whether the store already contains an entry for a job.\n * @param jobId Ident of the job we wish to check the store for.\n * @return {@code true} if a {@code dirty} or {@code clean} {@link JobResultEntry} exists forthe given  {@code JobID}; otherwise  {@code false}.\n * @throws IOException if determining whether a job entry is present in the store failed for IOreasons.\n */\ndefault boolean hasJobResultEntry(JobID jobId) throws IOException {\n  return hasDirtyJobResultEntry(jobId) || hasCleanJobResultEntry(jobId);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 20,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return hasDirtyJobResultEntry(jobId) || hasCleanJobResultEntry(jobId);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 62,
    "startLineNumber" : 78,
    "startColumnNumber" : 15,
    "endLineNumber" : 78,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}