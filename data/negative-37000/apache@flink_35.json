{
  "id" : 35,
  "expression" : "new Event(1,\"b\",1.0)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/NFAStatusChangeITCase.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Event(1,\"b\",1.0)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 127,
      "startColumnNumber" : 16,
      "endLineNumber" : 127,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 29
      },
      "nodeContext" : "nfa.process(sharedBufferAccessor,nfaState,new Event(1,\"b\",1.0),1L,skipStrategy,timerService)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 30
      },
      "nodeContext" : "nfa.process(sharedBufferAccessor,nfaState,new Event(1,\"b\",1.0),1L,skipStrategy,timerService);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6691,
        "startLineNumber" : 66,
        "startColumnNumber" : 49,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Pattern<Event,?> pattern=Pattern.<Event>begin(\"start\").where(new SimpleCondition<Event>(){\n    private static final long serialVersionUID=1858562682635302605L;\n    @Override public boolean filter(    Event value) throws Exception {\n      return value.getName().equals(\"a\");\n    }\n  }\n).followedByAny(\"middle\").where(new IterativeCondition<Event>(){\n    private static final long serialVersionUID=8061969839441121955L;\n    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {\n      return value.getName().equals(\"b\");\n    }\n  }\n).oneOrMore().optional().allowCombinations().followedBy(\"middle2\").where(new IterativeCondition<Event>(){\n    private static final long serialVersionUID=8061969839441121955L;\n    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {\n      return value.getName().equals(\"d\");\n    }\n  }\n).followedBy(\"end\").where(new IterativeCondition<Event>(){\n    private static final long serialVersionUID=8061969839441121955L;\n    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {\n      return value.getName().equals(\"e\");\n    }\n  }\n).within(Time.milliseconds(10));\n  NFA<Event> nfa=compile(pattern,true);\n  NFAState nfaState=nfa.createInitialNFAState();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(1,\"b\",1.0),1L,skipStrategy,timerService);\n  assertFalse(\"NFA status should not change as the event does not match the take condition of the 'start' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(2,\"a\",1.0),2L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the take condition of the 'start' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(3,\"f\",1.0),3L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the ignore condition and proceed condition of the 'middle:1' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(4,\"f\",1.0),4L,skipStrategy,timerService);\n  assertFalse(\"NFA status should not change as the event only matches the ignore condition of the 'middle:2' state and the target state is still 'middle:2'\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(5,\"b\",1.0),5L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the take condition of 'middle:2' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(6,\"d\",1.0),6L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the take condition of 'middle2' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.advanceTime(sharedBufferAccessor,nfaState,8L);\n  assertFalse(\"NFA status should not change as the timestamp is within the window\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  Collection<Tuple2<Map<String,List<Event>>,Long>> timeoutResults=nfa.advanceTime(sharedBufferAccessor,nfaState,12L);\n  assertTrue(\"NFA status should change as timeout happens\",nfaState.isStateChanged() && !timeoutResults.isEmpty());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6746,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 217,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNFAChange() throws Exception {\n  Pattern<Event,?> pattern=Pattern.<Event>begin(\"start\").where(new SimpleCondition<Event>(){\n    private static final long serialVersionUID=1858562682635302605L;\n    @Override public boolean filter(    Event value) throws Exception {\n      return value.getName().equals(\"a\");\n    }\n  }\n).followedByAny(\"middle\").where(new IterativeCondition<Event>(){\n    private static final long serialVersionUID=8061969839441121955L;\n    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {\n      return value.getName().equals(\"b\");\n    }\n  }\n).oneOrMore().optional().allowCombinations().followedBy(\"middle2\").where(new IterativeCondition<Event>(){\n    private static final long serialVersionUID=8061969839441121955L;\n    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {\n      return value.getName().equals(\"d\");\n    }\n  }\n).followedBy(\"end\").where(new IterativeCondition<Event>(){\n    private static final long serialVersionUID=8061969839441121955L;\n    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {\n      return value.getName().equals(\"e\");\n    }\n  }\n).within(Time.milliseconds(10));\n  NFA<Event> nfa=compile(pattern,true);\n  NFAState nfaState=nfa.createInitialNFAState();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(1,\"b\",1.0),1L,skipStrategy,timerService);\n  assertFalse(\"NFA status should not change as the event does not match the take condition of the 'start' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(2,\"a\",1.0),2L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the take condition of the 'start' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(3,\"f\",1.0),3L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the ignore condition and proceed condition of the 'middle:1' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(4,\"f\",1.0),4L,skipStrategy,timerService);\n  assertFalse(\"NFA status should not change as the event only matches the ignore condition of the 'middle:2' state and the target state is still 'middle:2'\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(5,\"b\",1.0),5L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the take condition of 'middle:2' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.process(sharedBufferAccessor,nfaState,new Event(6,\"d\",1.0),6L,skipStrategy,timerService);\n  assertTrue(\"NFA status should change as the event matches the take condition of 'middle2' state\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  nfa.advanceTime(sharedBufferAccessor,nfaState,8L);\n  assertFalse(\"NFA status should not change as the timestamp is within the window\",nfaState.isStateChanged());\n  nfaState.resetStateChanged();\n  Collection<Tuple2<Map<String,List<Event>>,Long>> timeoutResults=nfa.advanceTime(sharedBufferAccessor,nfaState,12L);\n  assertTrue(\"NFA status should change as timeout happens\",nfaState.isStateChanged() && !timeoutResults.isEmpty());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 447,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 29
      },
      "nodeContext" : "nfa.process(sharedBufferAccessor,nfaState,new Event(1,\"b\",1.0),1L,skipStrategy,timerService)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "org.apache.flink.cep.Event"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 127,
    "startColumnNumber" : 16,
    "endLineNumber" : 127,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}