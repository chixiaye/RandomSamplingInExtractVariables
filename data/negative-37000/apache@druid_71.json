{
  "id" : 71,
  "expression" : "new DefaultTaskConfig()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskQueueTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DefaultTaskConfig()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 74,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 71,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new TaskQueue(new TaskLockConfig(),new TaskQueueConfig(null,null,null,null),new DefaultTaskConfig(),getTaskStorage(),new SimpleTaskRunner(actionClientFactory),actionClientFactory,getLockbox(),new NoopServiceEmitter())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 28,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 309,
        "startLineNumber" : 71,
        "startColumnNumber" : 20,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "taskQueue=new TaskQueue(new TaskLockConfig(),new TaskQueueConfig(null,null,null,null),new DefaultTaskConfig(),getTaskStorage(),new SimpleTaskRunner(actionClientFactory),actionClientFactory,getLockbox(),new NoopServiceEmitter())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 30,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 6
      },
      "nodeContext" : "final TaskQueue taskQueue=new TaskQueue(new TaskLockConfig(),new TaskQueueConfig(null,null,null,null),new DefaultTaskConfig(),getTaskStorage(),new SimpleTaskRunner(actionClientFactory),actionClientFactory,getLockbox(),new NoopServiceEmitter());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1693,
        "startLineNumber" : 69,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final TaskActionClientFactory actionClientFactory=createActionClientFactory();\n  final TaskQueue taskQueue=new TaskQueue(new TaskLockConfig(),new TaskQueueConfig(null,null,null,null),new DefaultTaskConfig(),getTaskStorage(),new SimpleTaskRunner(actionClientFactory),actionClientFactory,getLockbox(),new NoopServiceEmitter());\n  taskQueue.setActive(true);\n  final TestTask task1=new TestTask(\"t1\",Intervals.of(\"2021-01/P1M\"));\n  prepareTaskForLocking(task1);\n  Assert.assertTrue(task1.isReady(actionClientFactory.create(task1)));\n  final TestTask task2=new TestTask(\"t2\",Intervals.of(\"2021-01-31/P1M\"));\n  taskQueue.add(task2);\n  taskQueue.manageInternal();\n  Assert.assertFalse(task2.isDone());\n  Assert.assertTrue(getLockbox().findLocksForTask(task2).isEmpty());\n  final TestTask task3=new TestTask(\"t3\",Intervals.of(\"2021-02-01/P1M\"));\n  taskQueue.add(task3);\n  taskQueue.manageInternal();\n  Assert.assertFalse(task2.isDone());\n  Assert.assertTrue(task3.isDone());\n  Assert.assertTrue(getLockbox().findLocksForTask(task2).isEmpty());\n  shutdownTask(task1);\n  taskQueue.shutdown(task3.getId(),\"Emulating shutdown of task3\");\n  taskQueue.manageInternal();\n  Assert.assertTrue(task2.isDone());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2244,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This test verifies releasing all locks of a task when it is not ready to run yet. This test uses 2 APIs,  {@link TaskQueue} APIs and {@link IngestionTestBase} APIsto emulate the scenario of deadlock. The IngestionTestBase provides low-leve APIs which you can manipulate  {@link TaskLockbox} manually. These APIs should be usedonly to emulate a certain deadlock scenario. All normal tasks should use TaskQueue APIs.\n */\n@Test public void testManageInternalReleaseLockWhenTaskIsNotReady() throws Exception {\n  final TaskActionClientFactory actionClientFactory=createActionClientFactory();\n  final TaskQueue taskQueue=new TaskQueue(new TaskLockConfig(),new TaskQueueConfig(null,null,null,null),new DefaultTaskConfig(),getTaskStorage(),new SimpleTaskRunner(actionClientFactory),actionClientFactory,getLockbox(),new NoopServiceEmitter());\n  taskQueue.setActive(true);\n  final TestTask task1=new TestTask(\"t1\",Intervals.of(\"2021-01/P1M\"));\n  prepareTaskForLocking(task1);\n  Assert.assertTrue(task1.isReady(actionClientFactory.create(task1)));\n  final TestTask task2=new TestTask(\"t2\",Intervals.of(\"2021-01-31/P1M\"));\n  taskQueue.add(task2);\n  taskQueue.manageInternal();\n  Assert.assertFalse(task2.isDone());\n  Assert.assertTrue(getLockbox().findLocksForTask(task2).isEmpty());\n  final TestTask task3=new TestTask(\"t3\",Intervals.of(\"2021-02-01/P1M\"));\n  taskQueue.add(task3);\n  taskQueue.manageInternal();\n  Assert.assertFalse(task2.isDone());\n  Assert.assertTrue(task3.isDone());\n  Assert.assertTrue(getLockbox().findLocksForTask(task2).isEmpty());\n  shutdownTask(task1);\n  taskQueue.shutdown(task3.getId(),\"Emulating shutdown of task3\");\n  taskQueue.manageInternal();\n  Assert.assertTrue(task2.isDone());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 198,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 71,
        "startColumnNumber" : 32,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "new TaskQueue(new TaskLockConfig(),new TaskQueueConfig(null,null,null,null),new DefaultTaskConfig(),getTaskStorage(),new SimpleTaskRunner(actionClientFactory),actionClientFactory,getLockbox(),new NoopServiceEmitter())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 28,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.indexing.overlord.config.DefaultTaskConfig"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 74,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}