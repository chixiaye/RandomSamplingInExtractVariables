{
  "id" : 316,
  "expression" : "queryResponse",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/main/java/org/apache/druid/server/QueryResource.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "queryResponse",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 214,
      "startColumnNumber" : 34,
      "endLineNumber" : 214,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 214,
        "startColumnNumber" : 34,
        "endLineNumber" : 214,
        "endColumnNumber" : 60
      },
      "nodeContext" : "queryResponse.getResults()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 214,
        "startColumnNumber" : 24,
        "endLineNumber" : 214,
        "endColumnNumber" : 60
      },
      "nodeContext" : "results=queryResponse.getResults()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 214,
        "startColumnNumber" : 6,
        "endLineNumber" : 214,
        "endColumnNumber" : 61
      },
      "nodeContext" : "final Sequence<?> results=queryResponse.getResults();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5613,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n  query=queryLifecycle.getQuery();\n  final String queryId=query.getId();\n  final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n  Thread.currentThread().setName(queryThreadName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Got query [%s]\",query);\n  }\n  final Access authResult=queryLifecycle.authorize(req);\n  if (!authResult.isAllowed()) {\n    throw new ForbiddenException(authResult.toString());\n  }\n  final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n  final Sequence<?> results=queryResponse.getResults();\n  final ResponseContext responseContext=queryResponse.getResponseContext();\n  final String prevEtag=getPreviousEtag(req);\n  if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n    queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n    successfulQueryCount.incrementAndGet();\n    return Response.notModified().build();\n  }\n  final Yielder<?> yielder=Yielders.each(results);\n  try {\n    boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n    boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n    final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n    Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n      @Override public void write(      OutputStream outputStream) throws WebApplicationException {\n        Exception e=null;\n        CountingOutputStream os=new CountingOutputStream(outputStream);\n        try {\n          jsonWriter.writeValue(os,yielder);\n          os.flush();\n          os.close();\n        }\n catch (        Exception ex) {\n          e=ex;\n          log.noStackTrace().error(ex,\"Unable to send query response.\");\n          throw new RuntimeException(ex);\n        }\n finally {\n          Thread.currentThread().setName(currThreadName);\n          queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n          if (e == null) {\n            successfulQueryCount.incrementAndGet();\n          }\n else {\n            failedQueryCount.incrementAndGet();\n          }\n        }\n      }\n    }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n    Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n    if (entityTag != null) {\n      responseBuilder.header(HEADER_ETAG,entityTag);\n    }\n    DirectDruidClient.removeMagicResponseContextFields(responseContext);\n    final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n    if (serializationResult.isTruncated()) {\n      final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n      if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n        log.error(logToPrint);\n        throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n      }\n else {\n        log.warn(logToPrint);\n      }\n    }\n    return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n  }\n catch (  QueryException e) {\n    yielder.close();\n    throw e;\n  }\ncatch (  Exception e) {\n    yielder.close();\n    throw new RuntimeException(e);\n  }\n finally {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7567,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 375,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n  query=queryLifecycle.getQuery();\n  final String queryId=query.getId();\n  final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n  Thread.currentThread().setName(queryThreadName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Got query [%s]\",query);\n  }\n  final Access authResult=queryLifecycle.authorize(req);\n  if (!authResult.isAllowed()) {\n    throw new ForbiddenException(authResult.toString());\n  }\n  final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n  final Sequence<?> results=queryResponse.getResults();\n  final ResponseContext responseContext=queryResponse.getResponseContext();\n  final String prevEtag=getPreviousEtag(req);\n  if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n    queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n    successfulQueryCount.incrementAndGet();\n    return Response.notModified().build();\n  }\n  final Yielder<?> yielder=Yielders.each(results);\n  try {\n    boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n    boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n    final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n    Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n      @Override public void write(      OutputStream outputStream) throws WebApplicationException {\n        Exception e=null;\n        CountingOutputStream os=new CountingOutputStream(outputStream);\n        try {\n          jsonWriter.writeValue(os,yielder);\n          os.flush();\n          os.close();\n        }\n catch (        Exception ex) {\n          e=ex;\n          log.noStackTrace().error(ex,\"Unable to send query response.\");\n          throw new RuntimeException(ex);\n        }\n finally {\n          Thread.currentThread().setName(currThreadName);\n          queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n          if (e == null) {\n            successfulQueryCount.incrementAndGet();\n          }\n else {\n            failedQueryCount.incrementAndGet();\n          }\n        }\n      }\n    }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n    Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n    if (entityTag != null) {\n      responseBuilder.header(HEADER_ETAG,entityTag);\n    }\n    DirectDruidClient.removeMagicResponseContextFields(responseContext);\n    final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n    if (serializationResult.isTruncated()) {\n      final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n      if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n        log.error(logToPrint);\n        throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n      }\n else {\n        log.warn(logToPrint);\n      }\n    }\n    return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n  }\n catch (  QueryException e) {\n    yielder.close();\n    throw e;\n  }\ncatch (  Exception e) {\n    yielder.close();\n    throw new RuntimeException(e);\n  }\n finally {\n  }\n}\n catch (QueryInterruptedException e) {\n  interruptedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotError(e);\n}\ncatch (QueryTimeoutException timeout) {\n  timedOutQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(timeout,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotTimeout(timeout);\n}\ncatch (QueryCapacityExceededException cap) {\n  failedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(cap,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotLimited(cap);\n}\ncatch (QueryUnsupportedException unsupported) {\n  failedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(unsupported,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotUnsupported(unsupported);\n}\ncatch (BadJsonQueryException|ResourceLimitExceededException e) {\n  interruptedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotBadQuery(e);\n}\ncatch (ForbiddenException e) {\n  throw e;\n}\ncatch (Exception e) {\n  failedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n  log.noStackTrace().makeAlert(e,\"Exception handling request\").addData(\"query\",query != null ? jsonMapper.writeValueAsString(query) : \"unparseable query\").addData(\"peer\",req.getRemoteAddr()).emit();\n  return ioReaderWriter.getResponseWriter().gotError(e);\n}\n finally {\n  Thread.currentThread().setName(currThreadName);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 687,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7852,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 376,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final QueryLifecycle queryLifecycle=queryLifecycleFactory.factorize();\n  Query<?> query=null;\n  final ResourceIOReaderWriter ioReaderWriter=createResourceIOReaderWriter(req,pretty != null);\n  final String currThreadName=Thread.currentThread().getName();\n  try {\n    queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n    query=queryLifecycle.getQuery();\n    final String queryId=query.getId();\n    final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n    Thread.currentThread().setName(queryThreadName);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Got query [%s]\",query);\n    }\n    final Access authResult=queryLifecycle.authorize(req);\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n    final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n    final Sequence<?> results=queryResponse.getResults();\n    final ResponseContext responseContext=queryResponse.getResponseContext();\n    final String prevEtag=getPreviousEtag(req);\n    if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n      queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n      successfulQueryCount.incrementAndGet();\n      return Response.notModified().build();\n    }\n    final Yielder<?> yielder=Yielders.each(results);\n    try {\n      boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n      boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n      final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n      Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n        @Override public void write(        OutputStream outputStream) throws WebApplicationException {\n          Exception e=null;\n          CountingOutputStream os=new CountingOutputStream(outputStream);\n          try {\n            jsonWriter.writeValue(os,yielder);\n            os.flush();\n            os.close();\n          }\n catch (          Exception ex) {\n            e=ex;\n            log.noStackTrace().error(ex,\"Unable to send query response.\");\n            throw new RuntimeException(ex);\n          }\n finally {\n            Thread.currentThread().setName(currThreadName);\n            queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n            if (e == null) {\n              successfulQueryCount.incrementAndGet();\n            }\n else {\n              failedQueryCount.incrementAndGet();\n            }\n          }\n        }\n      }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n      Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n      if (entityTag != null) {\n        responseBuilder.header(HEADER_ETAG,entityTag);\n      }\n      DirectDruidClient.removeMagicResponseContextFields(responseContext);\n      final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n      if (serializationResult.isTruncated()) {\n        final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n        if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n          log.error(logToPrint);\n          throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n        }\n else {\n          log.warn(logToPrint);\n        }\n      }\n      return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n    }\n catch (    QueryException e) {\n      yielder.close();\n      throw e;\n    }\ncatch (    Exception e) {\n      yielder.close();\n      throw new RuntimeException(e);\n    }\n finally {\n    }\n  }\n catch (  QueryInterruptedException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\ncatch (  QueryTimeoutException timeout) {\n    timedOutQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(timeout,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotTimeout(timeout);\n  }\ncatch (  QueryCapacityExceededException cap) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(cap,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotLimited(cap);\n  }\ncatch (  QueryUnsupportedException unsupported) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(unsupported,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotUnsupported(unsupported);\n  }\ncatch (  BadJsonQueryException|ResourceLimitExceededException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotBadQuery(e);\n  }\ncatch (  ForbiddenException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    log.noStackTrace().makeAlert(e,\"Exception handling request\").addData(\"query\",query != null ? jsonMapper.writeValueAsString(query) : \"unparseable query\").addData(\"peer\",req.getRemoteAddr()).emit();\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\n finally {\n    Thread.currentThread().setName(currThreadName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 728,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8317,
        "startLineNumber" : 172,
        "startColumnNumber" : 2,
        "endLineNumber" : 376,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@POST @Produces({MediaType.APPLICATION_JSON,SmileMediaTypes.APPLICATION_JACKSON_SMILE}) @Consumes({MediaType.APPLICATION_JSON,SmileMediaTypes.APPLICATION_JACKSON_SMILE,APPLICATION_SMILE}) public Response doPost(final InputStream in,@QueryParam(\"pretty\") final String pretty,@Context final HttpServletRequest req) throws IOException {\n  final QueryLifecycle queryLifecycle=queryLifecycleFactory.factorize();\n  Query<?> query=null;\n  final ResourceIOReaderWriter ioReaderWriter=createResourceIOReaderWriter(req,pretty != null);\n  final String currThreadName=Thread.currentThread().getName();\n  try {\n    queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n    query=queryLifecycle.getQuery();\n    final String queryId=query.getId();\n    final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n    Thread.currentThread().setName(queryThreadName);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Got query [%s]\",query);\n    }\n    final Access authResult=queryLifecycle.authorize(req);\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n    final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n    final Sequence<?> results=queryResponse.getResults();\n    final ResponseContext responseContext=queryResponse.getResponseContext();\n    final String prevEtag=getPreviousEtag(req);\n    if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n      queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n      successfulQueryCount.incrementAndGet();\n      return Response.notModified().build();\n    }\n    final Yielder<?> yielder=Yielders.each(results);\n    try {\n      boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n      boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n      final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n      Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n        @Override public void write(        OutputStream outputStream) throws WebApplicationException {\n          Exception e=null;\n          CountingOutputStream os=new CountingOutputStream(outputStream);\n          try {\n            jsonWriter.writeValue(os,yielder);\n            os.flush();\n            os.close();\n          }\n catch (          Exception ex) {\n            e=ex;\n            log.noStackTrace().error(ex,\"Unable to send query response.\");\n            throw new RuntimeException(ex);\n          }\n finally {\n            Thread.currentThread().setName(currThreadName);\n            queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n            if (e == null) {\n              successfulQueryCount.incrementAndGet();\n            }\n else {\n              failedQueryCount.incrementAndGet();\n            }\n          }\n        }\n      }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n      Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n      if (entityTag != null) {\n        responseBuilder.header(HEADER_ETAG,entityTag);\n      }\n      DirectDruidClient.removeMagicResponseContextFields(responseContext);\n      final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n      if (serializationResult.isTruncated()) {\n        final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n        if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n          log.error(logToPrint);\n          throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n        }\n else {\n          log.warn(logToPrint);\n        }\n      }\n      return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n    }\n catch (    QueryException e) {\n      yielder.close();\n      throw e;\n    }\ncatch (    Exception e) {\n      yielder.close();\n      throw new RuntimeException(e);\n    }\n finally {\n    }\n  }\n catch (  QueryInterruptedException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\ncatch (  QueryTimeoutException timeout) {\n    timedOutQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(timeout,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotTimeout(timeout);\n  }\ncatch (  QueryCapacityExceededException cap) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(cap,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotLimited(cap);\n  }\ncatch (  QueryUnsupportedException unsupported) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(unsupported,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotUnsupported(unsupported);\n  }\ncatch (  BadJsonQueryException|ResourceLimitExceededException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotBadQuery(e);\n  }\ncatch (  ForbiddenException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    log.noStackTrace().makeAlert(e,\"Exception handling request\").addData(\"query\",query != null ? jsonMapper.writeValueAsString(query) : \"unparseable query\").addData(\"peer\",req.getRemoteAddr()).emit();\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\n finally {\n    Thread.currentThread().setName(currThreadName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 776,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 214,
        "startColumnNumber" : 6,
        "endLineNumber" : 214,
        "endColumnNumber" : 61
      },
      "nodeContext" : "final Sequence<?> results=queryResponse.getResults();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.server.QueryLifecycle.QueryResponse"
  }, {
    "nodeContext" : "queryResponse",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 215,
      "startColumnNumber" : 46,
      "endLineNumber" : 215,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 215,
        "startColumnNumber" : 46,
        "endLineNumber" : 215,
        "endColumnNumber" : 80
      },
      "nodeContext" : "queryResponse.getResponseContext()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 215,
        "startColumnNumber" : 28,
        "endLineNumber" : 215,
        "endColumnNumber" : 80
      },
      "nodeContext" : "responseContext=queryResponse.getResponseContext()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 215,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 81
      },
      "nodeContext" : "final ResponseContext responseContext=queryResponse.getResponseContext();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5613,
        "startLineNumber" : 189,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n  query=queryLifecycle.getQuery();\n  final String queryId=query.getId();\n  final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n  Thread.currentThread().setName(queryThreadName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Got query [%s]\",query);\n  }\n  final Access authResult=queryLifecycle.authorize(req);\n  if (!authResult.isAllowed()) {\n    throw new ForbiddenException(authResult.toString());\n  }\n  final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n  final Sequence<?> results=queryResponse.getResults();\n  final ResponseContext responseContext=queryResponse.getResponseContext();\n  final String prevEtag=getPreviousEtag(req);\n  if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n    queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n    successfulQueryCount.incrementAndGet();\n    return Response.notModified().build();\n  }\n  final Yielder<?> yielder=Yielders.each(results);\n  try {\n    boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n    boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n    final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n    Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n      @Override public void write(      OutputStream outputStream) throws WebApplicationException {\n        Exception e=null;\n        CountingOutputStream os=new CountingOutputStream(outputStream);\n        try {\n          jsonWriter.writeValue(os,yielder);\n          os.flush();\n          os.close();\n        }\n catch (        Exception ex) {\n          e=ex;\n          log.noStackTrace().error(ex,\"Unable to send query response.\");\n          throw new RuntimeException(ex);\n        }\n finally {\n          Thread.currentThread().setName(currThreadName);\n          queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n          if (e == null) {\n            successfulQueryCount.incrementAndGet();\n          }\n else {\n            failedQueryCount.incrementAndGet();\n          }\n        }\n      }\n    }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n    Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n    if (entityTag != null) {\n      responseBuilder.header(HEADER_ETAG,entityTag);\n    }\n    DirectDruidClient.removeMagicResponseContextFields(responseContext);\n    final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n    if (serializationResult.isTruncated()) {\n      final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n      if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n        log.error(logToPrint);\n        throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n      }\n else {\n        log.warn(logToPrint);\n      }\n    }\n    return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n  }\n catch (  QueryException e) {\n    yielder.close();\n    throw e;\n  }\ncatch (  Exception e) {\n    yielder.close();\n    throw new RuntimeException(e);\n  }\n finally {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 477,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7567,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 375,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n  query=queryLifecycle.getQuery();\n  final String queryId=query.getId();\n  final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n  Thread.currentThread().setName(queryThreadName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Got query [%s]\",query);\n  }\n  final Access authResult=queryLifecycle.authorize(req);\n  if (!authResult.isAllowed()) {\n    throw new ForbiddenException(authResult.toString());\n  }\n  final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n  final Sequence<?> results=queryResponse.getResults();\n  final ResponseContext responseContext=queryResponse.getResponseContext();\n  final String prevEtag=getPreviousEtag(req);\n  if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n    queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n    successfulQueryCount.incrementAndGet();\n    return Response.notModified().build();\n  }\n  final Yielder<?> yielder=Yielders.each(results);\n  try {\n    boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n    boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n    final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n    Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n      @Override public void write(      OutputStream outputStream) throws WebApplicationException {\n        Exception e=null;\n        CountingOutputStream os=new CountingOutputStream(outputStream);\n        try {\n          jsonWriter.writeValue(os,yielder);\n          os.flush();\n          os.close();\n        }\n catch (        Exception ex) {\n          e=ex;\n          log.noStackTrace().error(ex,\"Unable to send query response.\");\n          throw new RuntimeException(ex);\n        }\n finally {\n          Thread.currentThread().setName(currThreadName);\n          queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n          if (e == null) {\n            successfulQueryCount.incrementAndGet();\n          }\n else {\n            failedQueryCount.incrementAndGet();\n          }\n        }\n      }\n    }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n    Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n    if (entityTag != null) {\n      responseBuilder.header(HEADER_ETAG,entityTag);\n    }\n    DirectDruidClient.removeMagicResponseContextFields(responseContext);\n    final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n    if (serializationResult.isTruncated()) {\n      final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n      if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n        log.error(logToPrint);\n        throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n      }\n else {\n        log.warn(logToPrint);\n      }\n    }\n    return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n  }\n catch (  QueryException e) {\n    yielder.close();\n    throw e;\n  }\ncatch (  Exception e) {\n    yielder.close();\n    throw new RuntimeException(e);\n  }\n finally {\n  }\n}\n catch (QueryInterruptedException e) {\n  interruptedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotError(e);\n}\ncatch (QueryTimeoutException timeout) {\n  timedOutQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(timeout,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotTimeout(timeout);\n}\ncatch (QueryCapacityExceededException cap) {\n  failedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(cap,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotLimited(cap);\n}\ncatch (QueryUnsupportedException unsupported) {\n  failedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(unsupported,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotUnsupported(unsupported);\n}\ncatch (BadJsonQueryException|ResourceLimitExceededException e) {\n  interruptedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n  return ioReaderWriter.getResponseWriter().gotBadQuery(e);\n}\ncatch (ForbiddenException e) {\n  throw e;\n}\ncatch (Exception e) {\n  failedQueryCount.incrementAndGet();\n  queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n  log.noStackTrace().makeAlert(e,\"Exception handling request\").addData(\"query\",query != null ? jsonMapper.writeValueAsString(query) : \"unparseable query\").addData(\"peer\",req.getRemoteAddr()).emit();\n  return ioReaderWriter.getResponseWriter().gotError(e);\n}\n finally {\n  Thread.currentThread().setName(currThreadName);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 687,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7852,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 376,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final QueryLifecycle queryLifecycle=queryLifecycleFactory.factorize();\n  Query<?> query=null;\n  final ResourceIOReaderWriter ioReaderWriter=createResourceIOReaderWriter(req,pretty != null);\n  final String currThreadName=Thread.currentThread().getName();\n  try {\n    queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n    query=queryLifecycle.getQuery();\n    final String queryId=query.getId();\n    final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n    Thread.currentThread().setName(queryThreadName);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Got query [%s]\",query);\n    }\n    final Access authResult=queryLifecycle.authorize(req);\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n    final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n    final Sequence<?> results=queryResponse.getResults();\n    final ResponseContext responseContext=queryResponse.getResponseContext();\n    final String prevEtag=getPreviousEtag(req);\n    if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n      queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n      successfulQueryCount.incrementAndGet();\n      return Response.notModified().build();\n    }\n    final Yielder<?> yielder=Yielders.each(results);\n    try {\n      boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n      boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n      final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n      Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n        @Override public void write(        OutputStream outputStream) throws WebApplicationException {\n          Exception e=null;\n          CountingOutputStream os=new CountingOutputStream(outputStream);\n          try {\n            jsonWriter.writeValue(os,yielder);\n            os.flush();\n            os.close();\n          }\n catch (          Exception ex) {\n            e=ex;\n            log.noStackTrace().error(ex,\"Unable to send query response.\");\n            throw new RuntimeException(ex);\n          }\n finally {\n            Thread.currentThread().setName(currThreadName);\n            queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n            if (e == null) {\n              successfulQueryCount.incrementAndGet();\n            }\n else {\n              failedQueryCount.incrementAndGet();\n            }\n          }\n        }\n      }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n      Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n      if (entityTag != null) {\n        responseBuilder.header(HEADER_ETAG,entityTag);\n      }\n      DirectDruidClient.removeMagicResponseContextFields(responseContext);\n      final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n      if (serializationResult.isTruncated()) {\n        final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n        if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n          log.error(logToPrint);\n          throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n        }\n else {\n          log.warn(logToPrint);\n        }\n      }\n      return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n    }\n catch (    QueryException e) {\n      yielder.close();\n      throw e;\n    }\ncatch (    Exception e) {\n      yielder.close();\n      throw new RuntimeException(e);\n    }\n finally {\n    }\n  }\n catch (  QueryInterruptedException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\ncatch (  QueryTimeoutException timeout) {\n    timedOutQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(timeout,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotTimeout(timeout);\n  }\ncatch (  QueryCapacityExceededException cap) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(cap,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotLimited(cap);\n  }\ncatch (  QueryUnsupportedException unsupported) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(unsupported,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotUnsupported(unsupported);\n  }\ncatch (  BadJsonQueryException|ResourceLimitExceededException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotBadQuery(e);\n  }\ncatch (  ForbiddenException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    log.noStackTrace().makeAlert(e,\"Exception handling request\").addData(\"query\",query != null ? jsonMapper.writeValueAsString(query) : \"unparseable query\").addData(\"peer\",req.getRemoteAddr()).emit();\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\n finally {\n    Thread.currentThread().setName(currThreadName);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 728,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8317,
        "startLineNumber" : 172,
        "startColumnNumber" : 2,
        "endLineNumber" : 376,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@POST @Produces({MediaType.APPLICATION_JSON,SmileMediaTypes.APPLICATION_JACKSON_SMILE}) @Consumes({MediaType.APPLICATION_JSON,SmileMediaTypes.APPLICATION_JACKSON_SMILE,APPLICATION_SMILE}) public Response doPost(final InputStream in,@QueryParam(\"pretty\") final String pretty,@Context final HttpServletRequest req) throws IOException {\n  final QueryLifecycle queryLifecycle=queryLifecycleFactory.factorize();\n  Query<?> query=null;\n  final ResourceIOReaderWriter ioReaderWriter=createResourceIOReaderWriter(req,pretty != null);\n  final String currThreadName=Thread.currentThread().getName();\n  try {\n    queryLifecycle.initialize(readQuery(req,in,ioReaderWriter));\n    query=queryLifecycle.getQuery();\n    final String queryId=query.getId();\n    final String queryThreadName=StringUtils.format(\"%s[%s_%s_%s]\",currThreadName,query.getType(),query.getDataSource().getTableNames(),queryId);\n    Thread.currentThread().setName(queryThreadName);\n    if (log.isDebugEnabled()) {\n      log.debug(\"Got query [%s]\",query);\n    }\n    final Access authResult=queryLifecycle.authorize(req);\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n    final QueryLifecycle.QueryResponse queryResponse=queryLifecycle.execute();\n    final Sequence<?> results=queryResponse.getResults();\n    final ResponseContext responseContext=queryResponse.getResponseContext();\n    final String prevEtag=getPreviousEtag(req);\n    if (prevEtag != null && prevEtag.equals(responseContext.get(ResponseContext.Key.ETAG))) {\n      queryLifecycle.emitLogsAndMetrics(null,req.getRemoteAddr(),-1);\n      successfulQueryCount.incrementAndGet();\n      return Response.notModified().build();\n    }\n    final Yielder<?> yielder=Yielders.each(results);\n    try {\n      boolean shouldFinalize=QueryContexts.isFinalize(query,true);\n      boolean serializeDateTimeAsLong=QueryContexts.isSerializeDateTimeAsLong(query,false) || (!shouldFinalize && QueryContexts.isSerializeDateTimeAsLongInner(query,false));\n      final ObjectWriter jsonWriter=ioReaderWriter.getResponseWriter().newOutputWriter(queryLifecycle.getToolChest(),queryLifecycle.getQuery(),serializeDateTimeAsLong);\n      Response.ResponseBuilder responseBuilder=Response.ok(new StreamingOutput(){\n        @Override public void write(        OutputStream outputStream) throws WebApplicationException {\n          Exception e=null;\n          CountingOutputStream os=new CountingOutputStream(outputStream);\n          try {\n            jsonWriter.writeValue(os,yielder);\n            os.flush();\n            os.close();\n          }\n catch (          Exception ex) {\n            e=ex;\n            log.noStackTrace().error(ex,\"Unable to send query response.\");\n            throw new RuntimeException(ex);\n          }\n finally {\n            Thread.currentThread().setName(currThreadName);\n            queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),os.getCount());\n            if (e == null) {\n              successfulQueryCount.incrementAndGet();\n            }\n else {\n              failedQueryCount.incrementAndGet();\n            }\n          }\n        }\n      }\n,ioReaderWriter.getResponseWriter().getResponseType()).header(\"X-Druid-Query-Id\",queryId);\n      Object entityTag=responseContext.remove(ResponseContext.Key.ETAG);\n      if (entityTag != null) {\n        responseBuilder.header(HEADER_ETAG,entityTag);\n      }\n      DirectDruidClient.removeMagicResponseContextFields(responseContext);\n      final ResponseContext.SerializationResult serializationResult=responseContext.serializeWith(jsonMapper,responseContextConfig.getMaxResponseContextHeaderSize());\n      if (serializationResult.isTruncated()) {\n        final String logToPrint=StringUtils.format(\"Response Context truncated for id [%s]. Full context is [%s].\",queryId,serializationResult.getFullResult());\n        if (responseContextConfig.shouldFailOnTruncatedResponseContext()) {\n          log.error(logToPrint);\n          throw new QueryInterruptedException(new TruncatedResponseContextException(\"Serialized response context exceeds the max size[%s]\",responseContextConfig.getMaxResponseContextHeaderSize()),selfNode.getHostAndPortToUse());\n        }\n else {\n          log.warn(logToPrint);\n        }\n      }\n      return responseBuilder.header(HEADER_RESPONSE_CONTEXT,serializationResult.getResult()).build();\n    }\n catch (    QueryException e) {\n      yielder.close();\n      throw e;\n    }\ncatch (    Exception e) {\n      yielder.close();\n      throw new RuntimeException(e);\n    }\n finally {\n    }\n  }\n catch (  QueryInterruptedException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\ncatch (  QueryTimeoutException timeout) {\n    timedOutQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(timeout,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotTimeout(timeout);\n  }\ncatch (  QueryCapacityExceededException cap) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(cap,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotLimited(cap);\n  }\ncatch (  QueryUnsupportedException unsupported) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(unsupported,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotUnsupported(unsupported);\n  }\ncatch (  BadJsonQueryException|ResourceLimitExceededException e) {\n    interruptedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    return ioReaderWriter.getResponseWriter().gotBadQuery(e);\n  }\ncatch (  ForbiddenException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    failedQueryCount.incrementAndGet();\n    queryLifecycle.emitLogsAndMetrics(e,req.getRemoteAddr(),-1);\n    log.noStackTrace().makeAlert(e,\"Exception handling request\").addData(\"query\",query != null ? jsonMapper.writeValueAsString(query) : \"unparseable query\").addData(\"peer\",req.getRemoteAddr()).emit();\n    return ioReaderWriter.getResponseWriter().gotError(e);\n  }\n finally {\n    Thread.currentThread().setName(currThreadName);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 776,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 215,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 81
      },
      "nodeContext" : "final ResponseContext responseContext=queryResponse.getResponseContext();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.druid.server.QueryLifecycle.QueryResponse"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 214,
    "startColumnNumber" : 34,
    "endLineNumber" : 214,
    "endColumnNumber" : 47
  }, {
    "charLength" : 13,
    "startLineNumber" : 215,
    "startColumnNumber" : 46,
    "endLineNumber" : 215,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}