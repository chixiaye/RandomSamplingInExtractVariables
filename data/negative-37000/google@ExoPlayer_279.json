{
  "id" : 279,
  "expression" : "new DataSpec.Builder().setUri(TEST_URL)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/extensions/cronet/src/test/java/com/google/android/exoplayer2/ext/cronet/CronetDataSourceTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 137,
      "startColumnNumber" : 8,
      "endLineNumber" : 138,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 140,
        "endColumnNumber" : 40
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 20
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 20
      },
      "nodeContext" : "testPostDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 196,
        "startLineNumber" : 136,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 21
      },
      "nodeContext" : "testPostDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1925,
        "startLineNumber" : 110,
        "startColumnNumber" : 22,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MockitoAnnotations.initMocks(this);\n  Map<String,String> defaultRequestProperties=new HashMap<>();\n  defaultRequestProperties.put(\"defaultHeader1\",\"defaultValue1\");\n  defaultRequestProperties.put(\"defaultHeader2\",\"defaultValue2\");\n  executorService=Executors.newSingleThreadExecutor();\n  dataSourceUnderTest=(CronetDataSource)new CronetDataSource.Factory(mockCronetEngine,executorService).setConnectionTimeoutMs(TEST_CONNECT_TIMEOUT_MS).setReadTimeoutMs(TEST_READ_TIMEOUT_MS).setResetTimeoutOnRedirects(true).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n  dataSourceUnderTest.addTransferListener(mockTransferListener);\n  when(mockCronetEngine.newUrlRequestBuilder(anyString(),any(UrlRequest.Callback.class),any(Executor.class))).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.setPriority(anyInt())).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.allowDirectExecutor()).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.build()).thenReturn(mockUrlRequest);\n  mockStatusResponse();\n  testDataSpec=new DataSpec(Uri.parse(TEST_URL));\n  testPostDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build();\n  testHeadDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build();\n  testResponseHeader=new HashMap<>();\n  testResponseHeader.put(\"Content-Type\",TEST_CONTENT_TYPE);\n  testResponseHeader.put(\"Content-Length\",Long.toString(TEST_CONTENT_LENGTH));\n  testUrlResponseInfo=createUrlResponseInfo(200);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1955,
        "startLineNumber" : 109,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void setUp(){\n  MockitoAnnotations.initMocks(this);\n  Map<String,String> defaultRequestProperties=new HashMap<>();\n  defaultRequestProperties.put(\"defaultHeader1\",\"defaultValue1\");\n  defaultRequestProperties.put(\"defaultHeader2\",\"defaultValue2\");\n  executorService=Executors.newSingleThreadExecutor();\n  dataSourceUnderTest=(CronetDataSource)new CronetDataSource.Factory(mockCronetEngine,executorService).setConnectionTimeoutMs(TEST_CONNECT_TIMEOUT_MS).setReadTimeoutMs(TEST_READ_TIMEOUT_MS).setResetTimeoutOnRedirects(true).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n  dataSourceUnderTest.addTransferListener(mockTransferListener);\n  when(mockCronetEngine.newUrlRequestBuilder(anyString(),any(UrlRequest.Callback.class),any(Executor.class))).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.setPriority(anyInt())).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.allowDirectExecutor()).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.build()).thenReturn(mockUrlRequest);\n  mockStatusResponse();\n  testDataSpec=new DataSpec(Uri.parse(TEST_URL));\n  testPostDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build();\n  testHeadDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build();\n  testResponseHeader=new HashMap<>();\n  testResponseHeader.put(\"Content-Type\",TEST_CONTENT_TYPE);\n  testResponseHeader.put(\"Content-Length\",Long.toString(TEST_CONTENT_LENGTH));\n  testUrlResponseInfo=createUrlResponseInfo(200);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 137,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 53
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 5,
    "type" : "com.google.android.exoplayer2.upstream.DataSpec.Builder"
  }, {
    "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 143,
      "startColumnNumber" : 8,
      "endLineNumber" : 143,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 96
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 115,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 96
      },
      "nodeContext" : "testHeadDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 143,
        "endColumnNumber" : 97
      },
      "nodeContext" : "testHeadDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1925,
        "startLineNumber" : 110,
        "startColumnNumber" : 22,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  MockitoAnnotations.initMocks(this);\n  Map<String,String> defaultRequestProperties=new HashMap<>();\n  defaultRequestProperties.put(\"defaultHeader1\",\"defaultValue1\");\n  defaultRequestProperties.put(\"defaultHeader2\",\"defaultValue2\");\n  executorService=Executors.newSingleThreadExecutor();\n  dataSourceUnderTest=(CronetDataSource)new CronetDataSource.Factory(mockCronetEngine,executorService).setConnectionTimeoutMs(TEST_CONNECT_TIMEOUT_MS).setReadTimeoutMs(TEST_READ_TIMEOUT_MS).setResetTimeoutOnRedirects(true).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n  dataSourceUnderTest.addTransferListener(mockTransferListener);\n  when(mockCronetEngine.newUrlRequestBuilder(anyString(),any(UrlRequest.Callback.class),any(Executor.class))).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.setPriority(anyInt())).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.allowDirectExecutor()).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.build()).thenReturn(mockUrlRequest);\n  mockStatusResponse();\n  testDataSpec=new DataSpec(Uri.parse(TEST_URL));\n  testPostDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build();\n  testHeadDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build();\n  testResponseHeader=new HashMap<>();\n  testResponseHeader.put(\"Content-Type\",TEST_CONTENT_TYPE);\n  testResponseHeader.put(\"Content-Length\",Long.toString(TEST_CONTENT_LENGTH));\n  testUrlResponseInfo=createUrlResponseInfo(200);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1955,
        "startLineNumber" : 109,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void setUp(){\n  MockitoAnnotations.initMocks(this);\n  Map<String,String> defaultRequestProperties=new HashMap<>();\n  defaultRequestProperties.put(\"defaultHeader1\",\"defaultValue1\");\n  defaultRequestProperties.put(\"defaultHeader2\",\"defaultValue2\");\n  executorService=Executors.newSingleThreadExecutor();\n  dataSourceUnderTest=(CronetDataSource)new CronetDataSource.Factory(mockCronetEngine,executorService).setConnectionTimeoutMs(TEST_CONNECT_TIMEOUT_MS).setReadTimeoutMs(TEST_READ_TIMEOUT_MS).setResetTimeoutOnRedirects(true).setDefaultRequestProperties(defaultRequestProperties).createDataSource();\n  dataSourceUnderTest.addTransferListener(mockTransferListener);\n  when(mockCronetEngine.newUrlRequestBuilder(anyString(),any(UrlRequest.Callback.class),any(Executor.class))).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.setPriority(anyInt())).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.allowDirectExecutor()).thenReturn(mockUrlRequestBuilder);\n  when(mockUrlRequestBuilder.build()).thenReturn(mockUrlRequest);\n  mockStatusResponse();\n  testDataSpec=new DataSpec(Uri.parse(TEST_URL));\n  testPostDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_POST).setHttpBody(TEST_POST_BODY).build();\n  testHeadDataSpec=new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build();\n  testResponseHeader=new HashMap<>();\n  testResponseHeader.put(\"Content-Type\",TEST_CONTENT_TYPE);\n  testResponseHeader.put(\"Content-Length\",Long.toString(TEST_CONTENT_LENGTH));\n  testUrlResponseInfo=createUrlResponseInfo(200);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 208,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 96
      },
      "nodeContext" : "new DataSpec.Builder().setUri(TEST_URL).setHttpMethod(DataSpec.HTTP_METHOD_HEAD).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 5,
    "type" : "com.google.android.exoplayer2.upstream.DataSpec.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 137,
    "startColumnNumber" : 8,
    "endLineNumber" : 138,
    "endColumnNumber" : 29
  }, {
    "charLength" : 39,
    "startLineNumber" : 143,
    "startColumnNumber" : 8,
    "endLineNumber" : 143,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}