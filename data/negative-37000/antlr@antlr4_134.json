{
  "id" : 134,
  "expression" : "Change.of(lexerGrammar,\"FOO: 'foo' ;\")",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/antlr4-maven-plugin/src/test/java/org/antlr/mojo/antlr4/Antlr4MojoTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Change.of(lexerGrammar,\"FOO: 'foo' ;\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 283,
      "startColumnNumber" : 28,
      "endLineNumber" : 283,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 283,
        "startColumnNumber" : 19,
        "endLineNumber" : 283,
        "endColumnNumber" : 67
      },
      "nodeContext" : "change=Change.of(lexerGrammar,\"FOO: 'foo' ;\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 283,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Change change=Change.of(lexerGrammar,\"FOO: 'foo' ;\")",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 373,
        "startLineNumber" : 283,
        "startColumnNumber" : 8,
        "endLineNumber" : 289,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (Change change=Change.of(lexerGrammar,\"FOO: 'foo' ;\")){\n  maven.executeMojo(session,project,exec);\n  assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6450,
        "startLineNumber" : 195,
        "startColumnNumber" : 57,
        "endLineNumber" : 313,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Path baseDir=resources.getBasedir(\"importsStandard\").toPath();\n  Path antlrDir=baseDir.resolve(\"src/main/antlr4\");\n  Path generatedSources=baseDir.resolve(\"target/generated-sources/antlr4\");\n  Path genTestLexer=generatedSources.resolve(\"test/TestLexer.java\");\n  Path genTestParser=generatedSources.resolve(\"test/TestParser.java\");\n  Path genHello=generatedSources.resolve(\"test/HelloParser.java\");\n  Path baseGrammar=antlrDir.resolve(\"imports/TestBaseLexer.g4\");\n  Path baseGrammar2=antlrDir.resolve(\"imports/TestBaseLexer2.g4\");\n  Path lexerGrammar=antlrDir.resolve(\"test/TestLexer.g4\");\n  Path parserGrammar=antlrDir.resolve(\"test/TestParser.g4\");\n  MavenProject project=maven.readMavenProject(baseDir.toFile());\n  MavenSession session=maven.newMavenSession(project);\n  MojoExecution exec=maven.newMojoExecution(\"antlr4\");\n  assertFalse(Files.exists(genHello));\n  assertFalse(Files.exists(genTestParser));\n  assertFalse(Files.exists(genTestLexer));\n  maven.executeMojo(session,project,exec);\n  assertTrue(Files.exists(genHello));\n  assertTrue(Files.exists(genTestParser));\n  assertTrue(Files.exists(genTestLexer));\n  byte[] origTestLexerSum=checksum(genTestLexer);\n  byte[] origTestParserSum=checksum(genTestParser);\n  byte[] origHelloSum=checksum(genHello);\n{\n    maven.executeMojo(session,project,exec);\n    assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n  try (Change change=Change.of(baseGrammar,\"DOT: '.' ;\")){\n    maven.executeMojo(session,project,exec);\n    assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  try (Change change=Change.of(baseGrammar2,\"BANG: '!' ;\")){\n    maven.executeMojo(session,project,exec);\n    assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  try (Change change=Change.of(lexerGrammar,\"FOO: 'foo' ;\")){\n    maven.executeMojo(session,project,exec);\n    assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  try (Change change=Change.of(parserGrammar,\" t : WS* ;\")){\n    maven.executeMojo(session,project,exec);\n    assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 580,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6514,
        "startLineNumber" : 194,
        "startColumnNumber" : 4,
        "endLineNumber" : 313,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void importsStandardLayout() throws Exception {\n  Path baseDir=resources.getBasedir(\"importsStandard\").toPath();\n  Path antlrDir=baseDir.resolve(\"src/main/antlr4\");\n  Path generatedSources=baseDir.resolve(\"target/generated-sources/antlr4\");\n  Path genTestLexer=generatedSources.resolve(\"test/TestLexer.java\");\n  Path genTestParser=generatedSources.resolve(\"test/TestParser.java\");\n  Path genHello=generatedSources.resolve(\"test/HelloParser.java\");\n  Path baseGrammar=antlrDir.resolve(\"imports/TestBaseLexer.g4\");\n  Path baseGrammar2=antlrDir.resolve(\"imports/TestBaseLexer2.g4\");\n  Path lexerGrammar=antlrDir.resolve(\"test/TestLexer.g4\");\n  Path parserGrammar=antlrDir.resolve(\"test/TestParser.g4\");\n  MavenProject project=maven.readMavenProject(baseDir.toFile());\n  MavenSession session=maven.newMavenSession(project);\n  MojoExecution exec=maven.newMojoExecution(\"antlr4\");\n  assertFalse(Files.exists(genHello));\n  assertFalse(Files.exists(genTestParser));\n  assertFalse(Files.exists(genTestLexer));\n  maven.executeMojo(session,project,exec);\n  assertTrue(Files.exists(genHello));\n  assertTrue(Files.exists(genTestParser));\n  assertTrue(Files.exists(genTestLexer));\n  byte[] origTestLexerSum=checksum(genTestLexer);\n  byte[] origTestParserSum=checksum(genTestParser);\n  byte[] origHelloSum=checksum(genHello);\n{\n    maven.executeMojo(session,project,exec);\n    assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n  try (Change change=Change.of(baseGrammar,\"DOT: '.' ;\")){\n    maven.executeMojo(session,project,exec);\n    assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  try (Change change=Change.of(baseGrammar2,\"BANG: '!' ;\")){\n    maven.executeMojo(session,project,exec);\n    assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  try (Change change=Change.of(lexerGrammar,\"FOO: 'foo' ;\")){\n    maven.executeMojo(session,project,exec);\n    assertFalse(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  try (Change change=Change.of(parserGrammar,\" t : WS* ;\")){\n    maven.executeMojo(session,project,exec);\n    assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n    assertFalse(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n    assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n  }\n   maven.executeMojo(session,project,exec);\n  assertTrue(Arrays.equals(origTestLexerSum,checksum(genTestLexer)));\n  assertTrue(Arrays.equals(origTestParserSum,checksum(genTestParser)));\n  assertTrue(Arrays.equals(origHelloSum,checksum(genHello)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 588,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 283,
        "startColumnNumber" : 12,
        "endLineNumber" : 283,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Change change=Change.of(lexerGrammar,\"FOO: 'foo' ;\")",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "org.antlr.mojo.antlr4.Antlr4MojoTest.Change"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 283,
    "startColumnNumber" : 28,
    "endLineNumber" : 283,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}