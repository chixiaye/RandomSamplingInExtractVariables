{
  "id" : 412,
  "expression" : "withSettings().defaultAnswer(defaultAnswer)",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/Mockito.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "withSettings().defaultAnswer(defaultAnswer)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 1923,
      "startColumnNumber" : 33,
      "endLineNumber" : 1923,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1923,
        "startColumnNumber" : 15,
        "endLineNumber" : 1923,
        "endColumnNumber" : 77
      },
      "nodeContext" : "mock(classToMock,withSettings().defaultAnswer(defaultAnswer))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 1923,
        "startColumnNumber" : 8,
        "endLineNumber" : 1923,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return mock(classToMock,withSettings().defaultAnswer(defaultAnswer));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 1922,
        "startColumnNumber" : 73,
        "endLineNumber" : 1924,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return mock(classToMock,withSettings().defaultAnswer(defaultAnswer));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 987,
        "startLineNumber" : 1902,
        "startColumnNumber" : 4,
        "endLineNumber" : 1924,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates mock with a specified strategy for its answers to interactions. It's quite an advanced feature and typically you don't need it to write decent tests. However it can be helpful when working with legacy systems. <p> It is the default answer so it will be used <b>only when you don't</b> stub the method call. <pre class=\"code\"><code class=\"java\"> Foo mock = mock(Foo.class, RETURNS_SMART_NULLS); Foo mockTwo = mock(Foo.class, new YourOwnAnswer()); </code></pre> <p>See examples in javadoc for  {@link Mockito} class</p>\n * @param classToMock class or interface to mock\n * @param defaultAnswer default answer for unstubbed methods\n * @return mock object\n */\n@CheckReturnValue public static <T>T mock(Class<T> classToMock,Answer defaultAnswer){\n  return mock(classToMock,withSettings().defaultAnswer(defaultAnswer));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 32,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 1923,
        "startColumnNumber" : 8,
        "endLineNumber" : 1923,
        "endColumnNumber" : 78
      },
      "nodeContext" : "return mock(classToMock,withSettings().defaultAnswer(defaultAnswer));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.mockito.MockSettings"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 1923,
    "startColumnNumber" : 33,
    "endLineNumber" : 1923,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}