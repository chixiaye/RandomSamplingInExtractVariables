{
  "id" : 9,
  "expression" : "systemLoad",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/profiler/CollectLocalResourceUsage.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "systemLoad",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 94,
      "startColumnNumber" : 27,
      "endLineNumber" : 94,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 94,
        "startColumnNumber" : 27,
        "endLineNumber" : 94,
        "endColumnNumber" : 53
      },
      "nodeContext" : "systemLoad * numProcessors",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 94,
        "startColumnNumber" : 13,
        "endLineNumber" : 94,
        "endColumnNumber" : 53
      },
      "nodeContext" : "systemUsage=systemLoad * numProcessors",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 94,
        "startColumnNumber" : 6,
        "endLineNumber" : 94,
        "endColumnNumber" : 54
      },
      "nodeContext" : "double systemUsage=systemLoad * numProcessors;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2557,
        "startLineNumber" : 84,
        "startColumnNumber" : 38,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    Thread.sleep(LOCAL_CPU_SLEEP_MILLIS);\n  }\n catch (  InterruptedException e) {\n    return;\n  }\n  Duration nextElapsed=stopwatch.elapsed();\n  long nextCpuTimeNanos=osBean.getProcessCpuTime();\n  double systemLoad=osBean.getSystemCpuLoad();\n  double systemUsage=systemLoad * numProcessors;\n  long systemMemoryUsageMb=-1;\n  if (OS.getCurrent() == OS.LINUX) {\n    try {\n      ProcMeminfoParser procMeminfoParser=new ProcMeminfoParser(\"/proc/meminfo\");\n      systemMemoryUsageMb=(procMeminfoParser.getTotalKb() - procMeminfoParser.getFreeRamKb()) / 1024;\n    }\n catch (    IOException e) {\n    }\n  }\n  if (systemMemoryUsageMb <= 0) {\n    systemMemoryUsageMb=(osBean.getTotalPhysicalMemorySize() - osBean.getFreePhysicalMemorySize()) / (1024 * 1024);\n  }\n  long memoryUsage;\n  try {\n    memoryUsage=memoryBean.getHeapMemoryUsage().getUsed() + memoryBean.getNonHeapMemoryUsage().getUsed();\n  }\n catch (  IllegalArgumentException e) {\n    bugReporter.sendBugReport(e);\n    memoryUsage=-1;\n  }\n  double deltaNanos=nextElapsed.minus(previousElapsed).toNanos();\n  double cpuLevel=(nextCpuTimeNanos - previousCpuTimeNanos) / deltaNanos;\nsynchronized (this) {\n    if (localCpuUsage != null) {\n      localCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),cpuLevel);\n    }\n    if (localMemoryUsage != null && memoryUsage != -1) {\n      long memoryUsageMb=memoryUsage / (1024 * 1024);\n      localMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),memoryUsageMb);\n    }\n    if (systemCpuUsage != null) {\n      systemCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemUsage);\n    }\n    if (systemMemoryUsage != null) {\n      systemMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemMemoryUsageMb);\n    }\n  }\n  previousElapsed=nextElapsed;\n  previousCpuTimeNanos=nextCpuTimeNanos;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 256,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2591,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!stopLocalUsageCollection) {\n  try {\n    Thread.sleep(LOCAL_CPU_SLEEP_MILLIS);\n  }\n catch (  InterruptedException e) {\n    return;\n  }\n  Duration nextElapsed=stopwatch.elapsed();\n  long nextCpuTimeNanos=osBean.getProcessCpuTime();\n  double systemLoad=osBean.getSystemCpuLoad();\n  double systemUsage=systemLoad * numProcessors;\n  long systemMemoryUsageMb=-1;\n  if (OS.getCurrent() == OS.LINUX) {\n    try {\n      ProcMeminfoParser procMeminfoParser=new ProcMeminfoParser(\"/proc/meminfo\");\n      systemMemoryUsageMb=(procMeminfoParser.getTotalKb() - procMeminfoParser.getFreeRamKb()) / 1024;\n    }\n catch (    IOException e) {\n    }\n  }\n  if (systemMemoryUsageMb <= 0) {\n    systemMemoryUsageMb=(osBean.getTotalPhysicalMemorySize() - osBean.getFreePhysicalMemorySize()) / (1024 * 1024);\n  }\n  long memoryUsage;\n  try {\n    memoryUsage=memoryBean.getHeapMemoryUsage().getUsed() + memoryBean.getNonHeapMemoryUsage().getUsed();\n  }\n catch (  IllegalArgumentException e) {\n    bugReporter.sendBugReport(e);\n    memoryUsage=-1;\n  }\n  double deltaNanos=nextElapsed.minus(previousElapsed).toNanos();\n  double cpuLevel=(nextCpuTimeNanos - previousCpuTimeNanos) / deltaNanos;\nsynchronized (this) {\n    if (localCpuUsage != null) {\n      localCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),cpuLevel);\n    }\n    if (localMemoryUsage != null && memoryUsage != -1) {\n      long memoryUsageMb=memoryUsage / (1024 * 1024);\n      localMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),memoryUsageMb);\n    }\n    if (systemCpuUsage != null) {\n      systemCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemUsage);\n    }\n    if (systemMemoryUsage != null) {\n      systemMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemMemoryUsageMb);\n    }\n  }\n  previousElapsed=nextElapsed;\n  previousCpuTimeNanos=nextCpuTimeNanos;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 259,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3657,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int numProcessors=Runtime.getRuntime().availableProcessors();\n  stopwatch=Stopwatch.createStarted();\nsynchronized (this) {\n    localCpuUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n    localMemoryUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n    systemCpuUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n    systemMemoryUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n  }\n  OperatingSystemMXBean osBean=(OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();\n  MemoryMXBean memoryBean=ManagementFactory.getMemoryMXBean();\n  Duration previousElapsed=stopwatch.elapsed();\n  long previousCpuTimeNanos=osBean.getProcessCpuTime();\n  profilingStarted=true;\n  while (!stopLocalUsageCollection) {\n    try {\n      Thread.sleep(LOCAL_CPU_SLEEP_MILLIS);\n    }\n catch (    InterruptedException e) {\n      return;\n    }\n    Duration nextElapsed=stopwatch.elapsed();\n    long nextCpuTimeNanos=osBean.getProcessCpuTime();\n    double systemLoad=osBean.getSystemCpuLoad();\n    double systemUsage=systemLoad * numProcessors;\n    long systemMemoryUsageMb=-1;\n    if (OS.getCurrent() == OS.LINUX) {\n      try {\n        ProcMeminfoParser procMeminfoParser=new ProcMeminfoParser(\"/proc/meminfo\");\n        systemMemoryUsageMb=(procMeminfoParser.getTotalKb() - procMeminfoParser.getFreeRamKb()) / 1024;\n      }\n catch (      IOException e) {\n      }\n    }\n    if (systemMemoryUsageMb <= 0) {\n      systemMemoryUsageMb=(osBean.getTotalPhysicalMemorySize() - osBean.getFreePhysicalMemorySize()) / (1024 * 1024);\n    }\n    long memoryUsage;\n    try {\n      memoryUsage=memoryBean.getHeapMemoryUsage().getUsed() + memoryBean.getNonHeapMemoryUsage().getUsed();\n    }\n catch (    IllegalArgumentException e) {\n      bugReporter.sendBugReport(e);\n      memoryUsage=-1;\n    }\n    double deltaNanos=nextElapsed.minus(previousElapsed).toNanos();\n    double cpuLevel=(nextCpuTimeNanos - previousCpuTimeNanos) / deltaNanos;\nsynchronized (this) {\n      if (localCpuUsage != null) {\n        localCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),cpuLevel);\n      }\n      if (localMemoryUsage != null && memoryUsage != -1) {\n        long memoryUsageMb=memoryUsage / (1024 * 1024);\n        localMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),memoryUsageMb);\n      }\n      if (systemCpuUsage != null) {\n        systemCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemUsage);\n      }\n      if (systemMemoryUsage != null) {\n        systemMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemMemoryUsageMb);\n      }\n    }\n    previousElapsed=nextElapsed;\n    previousCpuTimeNanos=nextCpuTimeNanos;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3687,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 149,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void run(){\n  int numProcessors=Runtime.getRuntime().availableProcessors();\n  stopwatch=Stopwatch.createStarted();\nsynchronized (this) {\n    localCpuUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n    localMemoryUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n    systemCpuUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n    systemMemoryUsage=new TimeSeries(stopwatch.elapsed().toMillis(),BUCKET_DURATION.toMillis());\n  }\n  OperatingSystemMXBean osBean=(OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();\n  MemoryMXBean memoryBean=ManagementFactory.getMemoryMXBean();\n  Duration previousElapsed=stopwatch.elapsed();\n  long previousCpuTimeNanos=osBean.getProcessCpuTime();\n  profilingStarted=true;\n  while (!stopLocalUsageCollection) {\n    try {\n      Thread.sleep(LOCAL_CPU_SLEEP_MILLIS);\n    }\n catch (    InterruptedException e) {\n      return;\n    }\n    Duration nextElapsed=stopwatch.elapsed();\n    long nextCpuTimeNanos=osBean.getProcessCpuTime();\n    double systemLoad=osBean.getSystemCpuLoad();\n    double systemUsage=systemLoad * numProcessors;\n    long systemMemoryUsageMb=-1;\n    if (OS.getCurrent() == OS.LINUX) {\n      try {\n        ProcMeminfoParser procMeminfoParser=new ProcMeminfoParser(\"/proc/meminfo\");\n        systemMemoryUsageMb=(procMeminfoParser.getTotalKb() - procMeminfoParser.getFreeRamKb()) / 1024;\n      }\n catch (      IOException e) {\n      }\n    }\n    if (systemMemoryUsageMb <= 0) {\n      systemMemoryUsageMb=(osBean.getTotalPhysicalMemorySize() - osBean.getFreePhysicalMemorySize()) / (1024 * 1024);\n    }\n    long memoryUsage;\n    try {\n      memoryUsage=memoryBean.getHeapMemoryUsage().getUsed() + memoryBean.getNonHeapMemoryUsage().getUsed();\n    }\n catch (    IllegalArgumentException e) {\n      bugReporter.sendBugReport(e);\n      memoryUsage=-1;\n    }\n    double deltaNanos=nextElapsed.minus(previousElapsed).toNanos();\n    double cpuLevel=(nextCpuTimeNanos - previousCpuTimeNanos) / deltaNanos;\nsynchronized (this) {\n      if (localCpuUsage != null) {\n        localCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),cpuLevel);\n      }\n      if (localMemoryUsage != null && memoryUsage != -1) {\n        long memoryUsageMb=memoryUsage / (1024 * 1024);\n        localMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),memoryUsageMb);\n      }\n      if (systemCpuUsage != null) {\n        systemCpuUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemUsage);\n      }\n      if (systemMemoryUsage != null) {\n        systemMemoryUsage.addRange(previousElapsed.toMillis(),nextElapsed.toMillis(),systemMemoryUsageMb);\n      }\n    }\n    previousElapsed=nextElapsed;\n    previousCpuTimeNanos=nextCpuTimeNanos;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 378,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 94,
        "startColumnNumber" : 6,
        "endLineNumber" : 94,
        "endColumnNumber" : 54
      },
      "nodeContext" : "double systemUsage=systemLoad * numProcessors;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 94,
    "startColumnNumber" : 27,
    "endLineNumber" : 94,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}