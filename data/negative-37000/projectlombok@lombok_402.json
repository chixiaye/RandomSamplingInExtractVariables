{
  "id" : 402,
  "expression" : "new Assignment(thisX,assignmentNameRef,(int)p)",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleConstructor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Assignment(thisX,assignmentNameRef,(int)p)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 251,
      "startColumnNumber" : 27,
      "endLineNumber" : 251,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 251,
        "startColumnNumber" : 14,
        "endLineNumber" : 251,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assignment=new Assignment(thisX,assignmentNameRef,(int)p)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 251,
        "startColumnNumber" : 3,
        "endLineNumber" : 251,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assignment assignment=new Assignment(thisX,assignmentNameRef,(int)p);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 242,
        "startColumnNumber" : 39,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  FieldDeclaration field=(FieldDeclaration)fieldNode.get();\n  FieldReference thisX=new FieldReference(field.name,p);\n  setGeneratedBy(thisX,source);\n  thisX.receiver=new ThisReference((int)(p >> 32),(int)p);\n  setGeneratedBy(thisX.receiver,source);\n  SingleNameReference assignmentNameRef=new SingleNameReference(field.name,p);\n  setGeneratedBy(assignmentNameRef,source);\n  Assignment assignment=new Assignment(thisX,assignmentNameRef,(int)p);\n  assignment.sourceStart=(int)(p >> 32);\n  assignment.sourceEnd=assignment.statementEnd=(int)(p >> 32);\n  setGeneratedBy(assignment,source);\n  assigns.add(assignment);\n  long fieldPos=(((long)field.sourceStart) << 32) | field.sourceEnd;\n  Argument parameter=new Argument(field.name,fieldPos,copyType(field.type,source),Modifier.FINAL);\n  setGeneratedBy(parameter,source);\n  Annotation[] nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  Annotation[] nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  if (nonNulls.length != 0) {\n    Statement nullCheck=generateNullCheck(field,source);\n    if (nullCheck != null)     nullChecks.add(nullCheck);\n  }\n  Annotation[] copiedAnnotations=copyAnnotations(source,nonNulls,nullables);\n  if (copiedAnnotations.length != 0)   parameter.annotations=copiedAnnotations;\n  params.add(parameter);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 242,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1427,
        "startLineNumber" : 242,
        "startColumnNumber" : 2,
        "endLineNumber" : 267,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (EclipseNode fieldNode : fields) {\n  FieldDeclaration field=(FieldDeclaration)fieldNode.get();\n  FieldReference thisX=new FieldReference(field.name,p);\n  setGeneratedBy(thisX,source);\n  thisX.receiver=new ThisReference((int)(p >> 32),(int)p);\n  setGeneratedBy(thisX.receiver,source);\n  SingleNameReference assignmentNameRef=new SingleNameReference(field.name,p);\n  setGeneratedBy(assignmentNameRef,source);\n  Assignment assignment=new Assignment(thisX,assignmentNameRef,(int)p);\n  assignment.sourceStart=(int)(p >> 32);\n  assignment.sourceEnd=assignment.statementEnd=(int)(p >> 32);\n  setGeneratedBy(assignment,source);\n  assigns.add(assignment);\n  long fieldPos=(((long)field.sourceStart) << 32) | field.sourceEnd;\n  Argument parameter=new Argument(field.name,fieldPos,copyType(field.type,source),Modifier.FINAL);\n  setGeneratedBy(parameter,source);\n  Annotation[] nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n  Annotation[] nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n  if (nonNulls.length != 0) {\n    Statement nullCheck=generateNullCheck(field,source);\n    if (nullCheck != null)     nullChecks.add(nullCheck);\n  }\n  Annotation[] copiedAnnotations=copyAnnotations(source,nonNulls,nullables);\n  if (copiedAnnotations.length != 0)   parameter.annotations=copiedAnnotations;\n  params.add(parameter);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 248,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3100,
        "startLineNumber" : 216,
        "startColumnNumber" : 108,
        "endLineNumber" : 278,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  long p=(long)source.sourceStart << 32 | source.sourceEnd;\n  boolean isEnum=(((TypeDeclaration)type.get()).modifiers & ClassFileConstants.AccEnum) != 0;\n  if (isEnum)   level=AccessLevel.PRIVATE;\n  ConstructorDeclaration constructor=new ConstructorDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(constructor,source);\n  constructor.modifiers=toEclipseModifier(level);\n  constructor.selector=((TypeDeclaration)type.get()).name;\n  constructor.constructorCall=new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);\n  setGeneratedBy(constructor.constructorCall,source);\n  constructor.thrownExceptions=null;\n  constructor.typeParameters=null;\n  constructor.bits|=ECLIPSE_DO_NOT_TOUCH_FLAG;\n  constructor.bodyStart=constructor.declarationSourceStart=constructor.sourceStart=source.sourceStart;\n  constructor.bodyEnd=constructor.declarationSourceEnd=constructor.sourceEnd=source.sourceEnd;\n  constructor.arguments=null;\n  List<Argument> params=new ArrayList<Argument>();\n  List<Statement> assigns=new ArrayList<Statement>();\n  List<Statement> nullChecks=new ArrayList<Statement>();\n  for (  EclipseNode fieldNode : fields) {\n    FieldDeclaration field=(FieldDeclaration)fieldNode.get();\n    FieldReference thisX=new FieldReference(field.name,p);\n    setGeneratedBy(thisX,source);\n    thisX.receiver=new ThisReference((int)(p >> 32),(int)p);\n    setGeneratedBy(thisX.receiver,source);\n    SingleNameReference assignmentNameRef=new SingleNameReference(field.name,p);\n    setGeneratedBy(assignmentNameRef,source);\n    Assignment assignment=new Assignment(thisX,assignmentNameRef,(int)p);\n    assignment.sourceStart=(int)(p >> 32);\n    assignment.sourceEnd=assignment.statementEnd=(int)(p >> 32);\n    setGeneratedBy(assignment,source);\n    assigns.add(assignment);\n    long fieldPos=(((long)field.sourceStart) << 32) | field.sourceEnd;\n    Argument parameter=new Argument(field.name,fieldPos,copyType(field.type,source),Modifier.FINAL);\n    setGeneratedBy(parameter,source);\n    Annotation[] nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n    Annotation[] nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n    if (nonNulls.length != 0) {\n      Statement nullCheck=generateNullCheck(field,source);\n      if (nullCheck != null)       nullChecks.add(nullCheck);\n    }\n    Annotation[] copiedAnnotations=copyAnnotations(source,nonNulls,nullables);\n    if (copiedAnnotations.length != 0)     parameter.annotations=copiedAnnotations;\n    params.add(parameter);\n  }\n  nullChecks.addAll(assigns);\n  constructor.statements=nullChecks.isEmpty() ? null : nullChecks.toArray(new Statement[nullChecks.size()]);\n  constructor.arguments=params.isEmpty() ? null : params.toArray(new Argument[params.size()]);\n  if (!suppressConstructorProperties && level != AccessLevel.PRIVATE && !isLocalType(type)) {\n    constructor.annotations=createConstructorProperties(source,constructor.annotations,fields);\n  }\n  return constructor;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 530,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3276,
        "startLineNumber" : 215,
        "startColumnNumber" : 1,
        "endLineNumber" : 278,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private ConstructorDeclaration createConstructor(AccessLevel level,EclipseNode type,Collection<EclipseNode> fields,boolean suppressConstructorProperties,ASTNode source){\n  long p=(long)source.sourceStart << 32 | source.sourceEnd;\n  boolean isEnum=(((TypeDeclaration)type.get()).modifiers & ClassFileConstants.AccEnum) != 0;\n  if (isEnum)   level=AccessLevel.PRIVATE;\n  ConstructorDeclaration constructor=new ConstructorDeclaration(((CompilationUnitDeclaration)type.top().get()).compilationResult);\n  setGeneratedBy(constructor,source);\n  constructor.modifiers=toEclipseModifier(level);\n  constructor.selector=((TypeDeclaration)type.get()).name;\n  constructor.constructorCall=new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);\n  setGeneratedBy(constructor.constructorCall,source);\n  constructor.thrownExceptions=null;\n  constructor.typeParameters=null;\n  constructor.bits|=ECLIPSE_DO_NOT_TOUCH_FLAG;\n  constructor.bodyStart=constructor.declarationSourceStart=constructor.sourceStart=source.sourceStart;\n  constructor.bodyEnd=constructor.declarationSourceEnd=constructor.sourceEnd=source.sourceEnd;\n  constructor.arguments=null;\n  List<Argument> params=new ArrayList<Argument>();\n  List<Statement> assigns=new ArrayList<Statement>();\n  List<Statement> nullChecks=new ArrayList<Statement>();\n  for (  EclipseNode fieldNode : fields) {\n    FieldDeclaration field=(FieldDeclaration)fieldNode.get();\n    FieldReference thisX=new FieldReference(field.name,p);\n    setGeneratedBy(thisX,source);\n    thisX.receiver=new ThisReference((int)(p >> 32),(int)p);\n    setGeneratedBy(thisX.receiver,source);\n    SingleNameReference assignmentNameRef=new SingleNameReference(field.name,p);\n    setGeneratedBy(assignmentNameRef,source);\n    Assignment assignment=new Assignment(thisX,assignmentNameRef,(int)p);\n    assignment.sourceStart=(int)(p >> 32);\n    assignment.sourceEnd=assignment.statementEnd=(int)(p >> 32);\n    setGeneratedBy(assignment,source);\n    assigns.add(assignment);\n    long fieldPos=(((long)field.sourceStart) << 32) | field.sourceEnd;\n    Argument parameter=new Argument(field.name,fieldPos,copyType(field.type,source),Modifier.FINAL);\n    setGeneratedBy(parameter,source);\n    Annotation[] nonNulls=findAnnotations(field,TransformationsUtil.NON_NULL_PATTERN);\n    Annotation[] nullables=findAnnotations(field,TransformationsUtil.NULLABLE_PATTERN);\n    if (nonNulls.length != 0) {\n      Statement nullCheck=generateNullCheck(field,source);\n      if (nullCheck != null)       nullChecks.add(nullCheck);\n    }\n    Annotation[] copiedAnnotations=copyAnnotations(source,nonNulls,nullables);\n    if (copiedAnnotations.length != 0)     parameter.annotations=copiedAnnotations;\n    params.add(parameter);\n  }\n  nullChecks.addAll(assigns);\n  constructor.statements=nullChecks.isEmpty() ? null : nullChecks.toArray(new Statement[nullChecks.size()]);\n  constructor.arguments=params.isEmpty() ? null : params.toArray(new Argument[params.size()]);\n  if (!suppressConstructorProperties && level != AccessLevel.PRIVATE && !isLocalType(type)) {\n    constructor.annotations=createConstructorProperties(source,constructor.annotations,fields);\n  }\n  return constructor;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 557,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 251,
        "startColumnNumber" : 3,
        "endLineNumber" : 251,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Assignment assignment=new Assignment(thisX,assignmentNameRef,(int)p);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "lombok.eclipse.handlers.Assignment"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 251,
    "startColumnNumber" : 27,
    "endLineNumber" : 251,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}