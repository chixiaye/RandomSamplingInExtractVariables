{
  "id" : 226,
  "expression" : "true",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/graph/GraphMutationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 53,
      "startColumnNumber" : 65,
      "endLineNumber" : 53,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 53,
        "startColumnNumber" : 36,
        "endLineNumber" : 53,
        "endColumnNumber" : 70
      },
      "nodeContext" : "graphBuilder.allowsSelfLoops(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 53,
        "startColumnNumber" : 36,
        "endLineNumber" : 53,
        "endColumnNumber" : 78
      },
      "nodeContext" : "graphBuilder.allowsSelfLoops(true).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 53,
        "startColumnNumber" : 28,
        "endLineNumber" : 53,
        "endColumnNumber" : 78
      },
      "nodeContext" : "graph=graphBuilder.allowsSelfLoops(true).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 53,
        "startColumnNumber" : 6,
        "endLineNumber" : 53,
        "endColumnNumber" : 79
      },
      "nodeContext" : "MutableGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2490,
        "startLineNumber" : 52,
        "startColumnNumber" : 53,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MutableGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();\n  assertThat(graph.nodes()).isEmpty();\n  assertThat(graph.edges()).isEmpty();\n  AbstractGraphTest.validateGraph(graph);\n  while (graph.nodes().size() < NUM_NODES) {\n    graph.addNode(gen.nextInt(NODE_POOL_SIZE));\n  }\n  ArrayList<Integer> nodeList=new ArrayList<>(graph.nodes());\n  while (graph.edges().size() < NUM_EDGES) {\n    graph.putEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen));\n  }\n  ArrayList<EndpointPair<Integer>> edgeList=new ArrayList<>(graph.edges());\n  assertThat(graph.nodes()).hasSize(NUM_NODES);\n  assertThat(graph.edges()).hasSize(NUM_EDGES);\n  AbstractGraphTest.validateGraph(graph);\n  Collections.shuffle(edgeList,gen);\n  int numEdgesToRemove=gen.nextInt(NUM_EDGES);\n  for (int i=0; i < numEdgesToRemove; ++i) {\n    EndpointPair<Integer> edge=edgeList.get(i);\n    assertThat(graph.removeEdge(edge.nodeU(),edge.nodeV())).isTrue();\n  }\n  assertThat(graph.nodes()).hasSize(NUM_NODES);\n  assertThat(graph.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n  AbstractGraphTest.validateGraph(graph);\n  Collections.shuffle(nodeList,gen);\n  int numNodesToRemove=gen.nextInt(NUM_NODES);\n  for (int i=0; i < numNodesToRemove; ++i) {\n    assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n  }\n  assertThat(graph.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n  AbstractGraphTest.validateGraph(graph);\n  for (int i=numNodesToRemove; i < NUM_NODES; ++i) {\n    assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n  }\n  assertThat(graph.nodes()).isEmpty();\n  assertThat(graph.edges()).isEmpty();\n  AbstractGraphTest.validateGraph(graph);\n  Collections.shuffle(nodeList,gen);\n  for (  Integer node : nodeList) {\n    assertThat(graph.addNode(node)).isTrue();\n  }\n  Collections.shuffle(edgeList,gen);\n  for (  EndpointPair<Integer> edge : edgeList) {\n    assertThat(graph.putEdge(edge.nodeU(),edge.nodeV())).isTrue();\n  }\n  assertThat(graph.nodes()).hasSize(NUM_NODES);\n  assertThat(graph.edges()).hasSize(NUM_EDGES);\n  AbstractGraphTest.validateGraph(graph);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 381,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2539,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int trial=0; trial < NUM_TRIALS; ++trial) {\n  MutableGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();\n  assertThat(graph.nodes()).isEmpty();\n  assertThat(graph.edges()).isEmpty();\n  AbstractGraphTest.validateGraph(graph);\n  while (graph.nodes().size() < NUM_NODES) {\n    graph.addNode(gen.nextInt(NODE_POOL_SIZE));\n  }\n  ArrayList<Integer> nodeList=new ArrayList<>(graph.nodes());\n  while (graph.edges().size() < NUM_EDGES) {\n    graph.putEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen));\n  }\n  ArrayList<EndpointPair<Integer>> edgeList=new ArrayList<>(graph.edges());\n  assertThat(graph.nodes()).hasSize(NUM_NODES);\n  assertThat(graph.edges()).hasSize(NUM_EDGES);\n  AbstractGraphTest.validateGraph(graph);\n  Collections.shuffle(edgeList,gen);\n  int numEdgesToRemove=gen.nextInt(NUM_EDGES);\n  for (int i=0; i < numEdgesToRemove; ++i) {\n    EndpointPair<Integer> edge=edgeList.get(i);\n    assertThat(graph.removeEdge(edge.nodeU(),edge.nodeV())).isTrue();\n  }\n  assertThat(graph.nodes()).hasSize(NUM_NODES);\n  assertThat(graph.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n  AbstractGraphTest.validateGraph(graph);\n  Collections.shuffle(nodeList,gen);\n  int numNodesToRemove=gen.nextInt(NUM_NODES);\n  for (int i=0; i < numNodesToRemove; ++i) {\n    assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n  }\n  assertThat(graph.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n  AbstractGraphTest.validateGraph(graph);\n  for (int i=numNodesToRemove; i < NUM_NODES; ++i) {\n    assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n  }\n  assertThat(graph.nodes()).isEmpty();\n  assertThat(graph.edges()).isEmpty();\n  AbstractGraphTest.validateGraph(graph);\n  Collections.shuffle(nodeList,gen);\n  for (  Integer node : nodeList) {\n    assertThat(graph.addNode(node)).isTrue();\n  }\n  Collections.shuffle(edgeList,gen);\n  for (  EndpointPair<Integer> edge : edgeList) {\n    assertThat(graph.putEdge(edge.nodeU(),edge.nodeV())).isTrue();\n  }\n  assertThat(graph.nodes()).hasSize(NUM_NODES);\n  assertThat(graph.edges()).hasSize(NUM_EDGES);\n  AbstractGraphTest.validateGraph(graph);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 392,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2636,
        "startLineNumber" : 49,
        "startColumnNumber" : 84,
        "endLineNumber" : 114,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Random gen=new Random(42);\n  for (int trial=0; trial < NUM_TRIALS; ++trial) {\n    MutableGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();\n    assertThat(graph.nodes()).isEmpty();\n    assertThat(graph.edges()).isEmpty();\n    AbstractGraphTest.validateGraph(graph);\n    while (graph.nodes().size() < NUM_NODES) {\n      graph.addNode(gen.nextInt(NODE_POOL_SIZE));\n    }\n    ArrayList<Integer> nodeList=new ArrayList<>(graph.nodes());\n    while (graph.edges().size() < NUM_EDGES) {\n      graph.putEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen));\n    }\n    ArrayList<EndpointPair<Integer>> edgeList=new ArrayList<>(graph.edges());\n    assertThat(graph.nodes()).hasSize(NUM_NODES);\n    assertThat(graph.edges()).hasSize(NUM_EDGES);\n    AbstractGraphTest.validateGraph(graph);\n    Collections.shuffle(edgeList,gen);\n    int numEdgesToRemove=gen.nextInt(NUM_EDGES);\n    for (int i=0; i < numEdgesToRemove; ++i) {\n      EndpointPair<Integer> edge=edgeList.get(i);\n      assertThat(graph.removeEdge(edge.nodeU(),edge.nodeV())).isTrue();\n    }\n    assertThat(graph.nodes()).hasSize(NUM_NODES);\n    assertThat(graph.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n    AbstractGraphTest.validateGraph(graph);\n    Collections.shuffle(nodeList,gen);\n    int numNodesToRemove=gen.nextInt(NUM_NODES);\n    for (int i=0; i < numNodesToRemove; ++i) {\n      assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n    }\n    assertThat(graph.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n    AbstractGraphTest.validateGraph(graph);\n    for (int i=numNodesToRemove; i < NUM_NODES; ++i) {\n      assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n    }\n    assertThat(graph.nodes()).isEmpty();\n    assertThat(graph.edges()).isEmpty();\n    AbstractGraphTest.validateGraph(graph);\n    Collections.shuffle(nodeList,gen);\n    for (    Integer node : nodeList) {\n      assertThat(graph.addNode(node)).isTrue();\n    }\n    Collections.shuffle(edgeList,gen);\n    for (    EndpointPair<Integer> edge : edgeList) {\n      assertThat(graph.putEdge(edge.nodeU(),edge.nodeV())).isTrue();\n    }\n    assertThat(graph.nodes()).hasSize(NUM_NODES);\n    assertThat(graph.edges()).hasSize(NUM_EDGES);\n    AbstractGraphTest.validateGraph(graph);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 402,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2718,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 114,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void testGraphMutation(GraphBuilder<? super Integer> graphBuilder){\n  Random gen=new Random(42);\n  for (int trial=0; trial < NUM_TRIALS; ++trial) {\n    MutableGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();\n    assertThat(graph.nodes()).isEmpty();\n    assertThat(graph.edges()).isEmpty();\n    AbstractGraphTest.validateGraph(graph);\n    while (graph.nodes().size() < NUM_NODES) {\n      graph.addNode(gen.nextInt(NODE_POOL_SIZE));\n    }\n    ArrayList<Integer> nodeList=new ArrayList<>(graph.nodes());\n    while (graph.edges().size() < NUM_EDGES) {\n      graph.putEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen));\n    }\n    ArrayList<EndpointPair<Integer>> edgeList=new ArrayList<>(graph.edges());\n    assertThat(graph.nodes()).hasSize(NUM_NODES);\n    assertThat(graph.edges()).hasSize(NUM_EDGES);\n    AbstractGraphTest.validateGraph(graph);\n    Collections.shuffle(edgeList,gen);\n    int numEdgesToRemove=gen.nextInt(NUM_EDGES);\n    for (int i=0; i < numEdgesToRemove; ++i) {\n      EndpointPair<Integer> edge=edgeList.get(i);\n      assertThat(graph.removeEdge(edge.nodeU(),edge.nodeV())).isTrue();\n    }\n    assertThat(graph.nodes()).hasSize(NUM_NODES);\n    assertThat(graph.edges()).hasSize(NUM_EDGES - numEdgesToRemove);\n    AbstractGraphTest.validateGraph(graph);\n    Collections.shuffle(nodeList,gen);\n    int numNodesToRemove=gen.nextInt(NUM_NODES);\n    for (int i=0; i < numNodesToRemove; ++i) {\n      assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n    }\n    assertThat(graph.nodes()).hasSize(NUM_NODES - numNodesToRemove);\n    AbstractGraphTest.validateGraph(graph);\n    for (int i=numNodesToRemove; i < NUM_NODES; ++i) {\n      assertThat(graph.removeNode(nodeList.get(i))).isTrue();\n    }\n    assertThat(graph.nodes()).isEmpty();\n    assertThat(graph.edges()).isEmpty();\n    AbstractGraphTest.validateGraph(graph);\n    Collections.shuffle(nodeList,gen);\n    for (    Integer node : nodeList) {\n      assertThat(graph.addNode(node)).isTrue();\n    }\n    Collections.shuffle(edgeList,gen);\n    for (    EndpointPair<Integer> edge : edgeList) {\n      assertThat(graph.putEdge(edge.nodeU(),edge.nodeV())).isTrue();\n    }\n    assertThat(graph.nodes()).hasSize(NUM_NODES);\n    assertThat(graph.edges()).hasSize(NUM_EDGES);\n    AbstractGraphTest.validateGraph(graph);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 415,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 53,
        "startColumnNumber" : 6,
        "endLineNumber" : 53,
        "endColumnNumber" : 79
      },
      "nodeContext" : "MutableGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 53,
    "startColumnNumber" : 65,
    "endLineNumber" : 53,
    "endColumnNumber" : 69
  } ],
  "layoutRelationDataList" : [ ]
}