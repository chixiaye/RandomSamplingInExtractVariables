{
  "id" : 57,
  "expression" : "message",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/influxdb/src/main/java/org/apache/pulsar/io/influxdb/v1/InfluxDBGenericRecordSink.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "message",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 51,
      "startColumnNumber" : 31,
      "endLineNumber" : 51,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 51,
        "startColumnNumber" : 31,
        "endLineNumber" : 51,
        "endColumnNumber" : 49
      },
      "nodeContext" : "message.getValue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 51,
        "startColumnNumber" : 22,
        "endLineNumber" : 51,
        "endColumnNumber" : 49
      },
      "nodeContext" : "record=message.getValue()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 50
      },
      "nodeContext" : "GenericRecord record=message.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1718,
        "startLineNumber" : 47,
        "startColumnNumber" : 79,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,String> tags;\n  Map<String,Object> fields=Maps.newHashMap();\n  GenericRecord record=message.getValue();\n  Object measurementField=getFiled(record,\"measurement\");\n  if (null == measurementField) {\n    throw new SchemaSerializationException(\"measurement is a required field.\");\n  }\n  String measurement=measurementField.toString();\n  Object tagsField=getFiled(record,\"tags\");\n  if (null == tagsField) {\n    tags=ImmutableMap.of();\n  }\n else   if (Map.class.isAssignableFrom(tagsField.getClass())) {\n    tags=((Map<Object,Object>)tagsField).entrySet().stream().collect(Collectors.toMap(entry -> entry.getKey().toString(),entry -> entry.getValue().toString()));\n  }\n else {\n    tags=ImmutableMap.of();\n  }\n  long timestamp=System.currentTimeMillis();\n  for (  Field field : record.getFields()) {\n    String fieldName=field.getName();\n    if (FIELDS_TO_SKIP.contains(fieldName)) {\n      continue;\n    }\n    Object fieldValue=record.getField(field);\n    if (null != fieldValue) {\n      fields.put(fieldName,fieldValue);\n    }\n  }\n  Point.Builder builder=Point.measurement(measurement).time(timestamp,TimeUnit.MILLISECONDS).tag(tags).fields(fields);\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1807,
        "startLineNumber" : 46,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected Point buildPoint(Record<GenericRecord> message) throws Exception {\n  Map<String,String> tags;\n  Map<String,Object> fields=Maps.newHashMap();\n  GenericRecord record=message.getValue();\n  Object measurementField=getFiled(record,\"measurement\");\n  if (null == measurementField) {\n    throw new SchemaSerializationException(\"measurement is a required field.\");\n  }\n  String measurement=measurementField.toString();\n  Object tagsField=getFiled(record,\"tags\");\n  if (null == tagsField) {\n    tags=ImmutableMap.of();\n  }\n else   if (Map.class.isAssignableFrom(tagsField.getClass())) {\n    tags=((Map<Object,Object>)tagsField).entrySet().stream().collect(Collectors.toMap(entry -> entry.getKey().toString(),entry -> entry.getValue().toString()));\n  }\n else {\n    tags=ImmutableMap.of();\n  }\n  long timestamp=System.currentTimeMillis();\n  for (  Field field : record.getFields()) {\n    String fieldName=field.getName();\n    if (FIELDS_TO_SKIP.contains(fieldName)) {\n      continue;\n    }\n    Object fieldValue=record.getField(field);\n    if (null != fieldValue) {\n      fields.put(fieldName,fieldValue);\n    }\n  }\n  Point.Builder builder=Point.measurement(measurement).time(timestamp,TimeUnit.MILLISECONDS).tag(tags).fields(fields);\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 50
      },
      "nodeContext" : "GenericRecord record=message.getValue();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.pulsar.functions.api.Record<org.apache.pulsar.client.api.schema.GenericRecord>"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 51,
    "startColumnNumber" : 31,
    "endLineNumber" : 51,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}