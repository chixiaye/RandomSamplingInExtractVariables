{
  "id" : 52,
  "expression" : "new Change<>(\"XXX1+YY1\",\"XX1+YY1\")",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Change<>(\"XXX1+YY1\",\"XX1+YY1\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 218,
      "startColumnNumber" : 43,
      "endLineNumber" : 218,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 370,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 84
      },
      "nodeContext" : "proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XXX0+YY0\",\"XX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6),new KeyValueTimestamp<>(2,new Change<>(\"XXX2+YY2\",\"XX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(\"XXX3+YY3\",\"XX3+YY3\"),15))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 51,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 216,
        "startColumnNumber" : 12,
        "endLineNumber" : 220,
        "endColumnNumber" : 85
      },
      "nodeContext" : "proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XXX0+YY0\",\"XX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6),new KeyValueTimestamp<>(2,new Change<>(\"XXX2+YY2\",\"XX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(\"XXX3+YY3\",\"XX3+YY3\"),15));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 52,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5790,
        "startLineNumber" : 159,
        "startColumnNumber" : 95,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final MockApiProcessor<Integer,String,Void,Void> proc=supplier.theCapturedProcessor();\n  assertTrue(((KTableImpl<?,?,?>)table1).sendingOldValueEnabled());\n  assertTrue(((KTableImpl<?,?,?>)table2).sendingOldValueEnabled());\n  assertTrue(((KTableImpl<?,?,?>)joined).sendingOldValueEnabled());\n  for (int i=0; i < 2; i++) {\n    inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n  }\n  inputTopic1.pipeInput(null,\"SomeVal\",42L);\n  proc.checkAndClearProcessResult(EMPTY);\n  for (int i=0; i < 2; i++) {\n    inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n  }\n  inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"X0+Y0\",null),5),new KeyValueTimestamp<>(1,new Change<>(\"X1+Y1\",null),10));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+Y0\",\"X0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+Y1\",\"X1+Y1\"),10));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+YY0\",\"XX0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+YY1\",\"XX1+Y1\"),7),new KeyValueTimestamp<>(2,new Change<>(\"XX2+YY2\",null),10),new KeyValueTimestamp<>(3,new Change<>(\"XX3+YY3\",null),15));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XXX0+YY0\",\"XX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6),new KeyValueTimestamp<>(2,new Change<>(\"XXX2+YY2\",\"XX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(\"XXX3+YY3\",\"XX3+YY3\"),15));\n  inputTopic2.pipeInput(expectedKeys[0],null,5L);\n  inputTopic2.pipeInput(expectedKeys[1],null,7L);\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(null,\"XXX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(null,\"XXX1+YY1\"),7));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(\"XXXX2+YY2\",\"XXX2+YY2\"),13),new KeyValueTimestamp<>(3,new Change<>(\"XXXX3+YY3\",\"XXX3+YY3\"),15));\n  inputTopic1.pipeInput(expectedKeys[0],null,0L);\n  inputTopic1.pipeInput(expectedKeys[1],null,42L);\n  inputTopic1.pipeInput(expectedKeys[2],null,5L);\n  inputTopic1.pipeInput(expectedKeys[3],null,20L);\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(null,\"XXXX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(null,\"XXXX3+YY3\"),20));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 562,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5877,
        "startLineNumber" : 159,
        "startColumnNumber" : 8,
        "endLineNumber" : 246,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){\n  final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n  final MockApiProcessor<Integer,String,Void,Void> proc=supplier.theCapturedProcessor();\n  assertTrue(((KTableImpl<?,?,?>)table1).sendingOldValueEnabled());\n  assertTrue(((KTableImpl<?,?,?>)table2).sendingOldValueEnabled());\n  assertTrue(((KTableImpl<?,?,?>)joined).sendingOldValueEnabled());\n  for (int i=0; i < 2; i++) {\n    inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n  }\n  inputTopic1.pipeInput(null,\"SomeVal\",42L);\n  proc.checkAndClearProcessResult(EMPTY);\n  for (int i=0; i < 2; i++) {\n    inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n  }\n  inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"X0+Y0\",null),5),new KeyValueTimestamp<>(1,new Change<>(\"X1+Y1\",null),10));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+Y0\",\"X0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+Y1\",\"X1+Y1\"),10));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+YY0\",\"XX0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+YY1\",\"XX1+Y1\"),7),new KeyValueTimestamp<>(2,new Change<>(\"XX2+YY2\",null),10),new KeyValueTimestamp<>(3,new Change<>(\"XX3+YY3\",null),15));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XXX0+YY0\",\"XX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6),new KeyValueTimestamp<>(2,new Change<>(\"XXX2+YY2\",\"XX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(\"XXX3+YY3\",\"XX3+YY3\"),15));\n  inputTopic2.pipeInput(expectedKeys[0],null,5L);\n  inputTopic2.pipeInput(expectedKeys[1],null,7L);\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(null,\"XXX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(null,\"XXX1+YY1\"),7));\n  for (  final int expectedKey : expectedKeys) {\n    inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n  }\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(\"XXXX2+YY2\",\"XXX2+YY2\"),13),new KeyValueTimestamp<>(3,new Change<>(\"XXXX3+YY3\",\"XXX3+YY3\"),15));\n  inputTopic1.pipeInput(expectedKeys[0],null,0L);\n  inputTopic1.pipeInput(expectedKeys[1],null,42L);\n  inputTopic1.pipeInput(expectedKeys[2],null,5L);\n  inputTopic1.pipeInput(expectedKeys[3],null,20L);\n  proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(null,\"XXXX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(null,\"XXXX3+YY3\"),20));\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 576,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6603,
        "startLineNumber" : 141,
        "startColumnNumber" : 39,
        "endLineNumber" : 247,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamsBuilder builder=new StreamsBuilder();\n  final int[] expectedKeys=new int[]{0,1,2,3};\n  final KTable<Integer,String> table1;\n  final KTable<Integer,String> table2;\n  final KTable<Integer,String> joined;\n  final MockApiProcessorSupplier<Integer,String,Void,Void> supplier=new MockApiProcessorSupplier<>();\n  table1=builder.table(topic1,consumed);\n  table2=builder.table(topic2,consumed);\n  joined=table1.join(table2,MockValueJoiner.TOSTRING_JOINER);\n  ((KTableImpl<?,?,?>)joined).enableSendingOldValues(true);\n  builder.build().addProcessor(\"proc\",supplier,((KTableImpl<?,?,?>)joined).name);\n  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){\n    final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final MockApiProcessor<Integer,String,Void,Void> proc=supplier.theCapturedProcessor();\n    assertTrue(((KTableImpl<?,?,?>)table1).sendingOldValueEnabled());\n    assertTrue(((KTableImpl<?,?,?>)table2).sendingOldValueEnabled());\n    assertTrue(((KTableImpl<?,?,?>)joined).sendingOldValueEnabled());\n    for (int i=0; i < 2; i++) {\n      inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n    }\n    inputTopic1.pipeInput(null,\"SomeVal\",42L);\n    proc.checkAndClearProcessResult(EMPTY);\n    for (int i=0; i < 2; i++) {\n      inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n    }\n    inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"X0+Y0\",null),5),new KeyValueTimestamp<>(1,new Change<>(\"X1+Y1\",null),10));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+Y0\",\"X0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+Y1\",\"X1+Y1\"),10));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+YY0\",\"XX0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+YY1\",\"XX1+Y1\"),7),new KeyValueTimestamp<>(2,new Change<>(\"XX2+YY2\",null),10),new KeyValueTimestamp<>(3,new Change<>(\"XX3+YY3\",null),15));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XXX0+YY0\",\"XX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6),new KeyValueTimestamp<>(2,new Change<>(\"XXX2+YY2\",\"XX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(\"XXX3+YY3\",\"XX3+YY3\"),15));\n    inputTopic2.pipeInput(expectedKeys[0],null,5L);\n    inputTopic2.pipeInput(expectedKeys[1],null,7L);\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(null,\"XXX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(null,\"XXX1+YY1\"),7));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(\"XXXX2+YY2\",\"XXX2+YY2\"),13),new KeyValueTimestamp<>(3,new Change<>(\"XXXX3+YY3\",\"XXX3+YY3\"),15));\n    inputTopic1.pipeInput(expectedKeys[0],null,0L);\n    inputTopic1.pipeInput(expectedKeys[1],null,42L);\n    inputTopic1.pipeInput(expectedKeys[2],null,5L);\n    inputTopic1.pipeInput(expectedKeys[3],null,20L);\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(null,\"XXXX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(null,\"XXXX3+YY3\"),20));\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 712,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6648,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 247,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSendingOldValues(){\n  final StreamsBuilder builder=new StreamsBuilder();\n  final int[] expectedKeys=new int[]{0,1,2,3};\n  final KTable<Integer,String> table1;\n  final KTable<Integer,String> table2;\n  final KTable<Integer,String> joined;\n  final MockApiProcessorSupplier<Integer,String,Void,Void> supplier=new MockApiProcessorSupplier<>();\n  table1=builder.table(topic1,consumed);\n  table2=builder.table(topic2,consumed);\n  joined=table1.join(table2,MockValueJoiner.TOSTRING_JOINER);\n  ((KTableImpl<?,?,?>)joined).enableSendingOldValues(true);\n  builder.build().addProcessor(\"proc\",supplier,((KTableImpl<?,?,?>)joined).name);\n  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){\n    final TestInputTopic<Integer,String> inputTopic1=driver.createInputTopic(topic1,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final TestInputTopic<Integer,String> inputTopic2=driver.createInputTopic(topic2,Serdes.Integer().serializer(),Serdes.String().serializer(),Instant.ofEpochMilli(0L),Duration.ZERO);\n    final MockApiProcessor<Integer,String,Void,Void> proc=supplier.theCapturedProcessor();\n    assertTrue(((KTableImpl<?,?,?>)table1).sendingOldValueEnabled());\n    assertTrue(((KTableImpl<?,?,?>)table2).sendingOldValueEnabled());\n    assertTrue(((KTableImpl<?,?,?>)joined).sendingOldValueEnabled());\n    for (int i=0; i < 2; i++) {\n      inputTopic1.pipeInput(expectedKeys[i],\"X\" + expectedKeys[i],5L + i);\n    }\n    inputTopic1.pipeInput(null,\"SomeVal\",42L);\n    proc.checkAndClearProcessResult(EMPTY);\n    for (int i=0; i < 2; i++) {\n      inputTopic2.pipeInput(expectedKeys[i],\"Y\" + expectedKeys[i],10L * i);\n    }\n    inputTopic2.pipeInput(null,\"AnotherVal\",73L);\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"X0+Y0\",null),5),new KeyValueTimestamp<>(1,new Change<>(\"X1+Y1\",null),10));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XX\" + expectedKey,7L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+Y0\",\"X0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+Y1\",\"X1+Y1\"),10));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic2.pipeInput(expectedKey,\"YY\" + expectedKey,expectedKey * 5L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XX0+YY0\",\"XX0+Y0\"),7),new KeyValueTimestamp<>(1,new Change<>(\"XX1+YY1\",\"XX1+Y1\"),7),new KeyValueTimestamp<>(2,new Change<>(\"XX2+YY2\",null),10),new KeyValueTimestamp<>(3,new Change<>(\"XX3+YY3\",null),15));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXX\" + expectedKey,6L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(\"XXX0+YY0\",\"XX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6),new KeyValueTimestamp<>(2,new Change<>(\"XXX2+YY2\",\"XX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(\"XXX3+YY3\",\"XX3+YY3\"),15));\n    inputTopic2.pipeInput(expectedKeys[0],null,5L);\n    inputTopic2.pipeInput(expectedKeys[1],null,7L);\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0,new Change<>(null,\"XXX0+YY0\"),6),new KeyValueTimestamp<>(1,new Change<>(null,\"XXX1+YY1\"),7));\n    for (    final int expectedKey : expectedKeys) {\n      inputTopic1.pipeInput(expectedKey,\"XXXX\" + expectedKey,13L);\n    }\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(\"XXXX2+YY2\",\"XXX2+YY2\"),13),new KeyValueTimestamp<>(3,new Change<>(\"XXXX3+YY3\",\"XXX3+YY3\"),15));\n    inputTopic1.pipeInput(expectedKeys[0],null,0L);\n    inputTopic1.pipeInput(expectedKeys[1],null,42L);\n    inputTopic1.pipeInput(expectedKeys[2],null,5L);\n    inputTopic1.pipeInput(expectedKeys[3],null,20L);\n    proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2,new Change<>(null,\"XXXX2+YY2\"),10),new KeyValueTimestamp<>(3,new Change<>(null,\"XXXX3+YY3\"),20));\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 718,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 218,
        "startColumnNumber" : 16,
        "endLineNumber" : 218,
        "endColumnNumber" : 82
      },
      "nodeContext" : "new KeyValueTimestamp<>(1,new Change<>(\"XXX1+YY1\",\"XX1+YY1\"),6)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.apache.kafka.streams.kstream.internals.Change<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 218,
    "startColumnNumber" : 43,
    "endLineNumber" : 218,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}