{
  "id" : 79,
  "expression" : "((retrofit.http.Header)annotation).value()",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/RequestBuilder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((retrofit.http.Header)annotation).value()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 43,
      "startLineNumber" : 255,
      "startColumnNumber" : 24,
      "endLineNumber" : 255,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 11,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 255,
        "startColumnNumber" : 17,
        "endLineNumber" : 255,
        "endColumnNumber" : 67
      },
      "nodeContext" : "name=((retrofit.http.Header)annotation).value()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 255,
        "startColumnNumber" : 10,
        "endLineNumber" : 255,
        "endColumnNumber" : 68
      },
      "nodeContext" : "String name=((retrofit.http.Header)annotation).value();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 254,
        "startColumnNumber" : 27,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=((retrofit.http.Header)annotation).value();\n  if (value instanceof Iterable) {\n    for (    Object iterableValue : (Iterable<?>)value) {\n      if (iterableValue != null) {\n        addHeader(name,iterableValue.toString());\n      }\n    }\n  }\n else   if (value.getClass().isArray()) {\n    for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n      Object arrayValue=Array.get(value,x);\n      if (arrayValue != null) {\n        addHeader(name,arrayValue.toString());\n      }\n    }\n  }\n else {\n    addHeader(name,value.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 272,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value != null) {\n  String name=((retrofit.http.Header)annotation).value();\n  if (value instanceof Iterable) {\n    for (    Object iterableValue : (Iterable<?>)value) {\n      if (iterableValue != null) {\n        addHeader(name,iterableValue.toString());\n      }\n    }\n  }\n else   if (value.getClass().isArray()) {\n    for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n      Object arrayValue=Array.get(value,x);\n      if (arrayValue != null) {\n        addHeader(name,arrayValue.toString());\n      }\n    }\n  }\n else {\n    addHeader(name,value.toString());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 253,
        "startColumnNumber" : 63,
        "endLineNumber" : 273,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (value != null) {\n    String name=((retrofit.http.Header)annotation).value();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          addHeader(name,iterableValue.toString());\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          addHeader(name,arrayValue.toString());\n        }\n      }\n    }\n else {\n      addHeader(name,value.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 4985,
        "startLineNumber" : 253,
        "startColumnNumber" : 13,
        "endLineNumber" : 361,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == retrofit.http.Header.class) {\n  if (value != null) {\n    String name=((retrofit.http.Header)annotation).value();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          addHeader(name,iterableValue.toString());\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          addHeader(name,arrayValue.toString());\n        }\n      }\n    }\n else {\n      addHeader(name,value.toString());\n    }\n  }\n}\n else if (annotationType == Field.class) {\n  if (value != null) {\n    Field field=(Field)annotation;\n    String name=field.value();\n    boolean encodeName=field.encodeName();\n    boolean encodeValue=field.encodeValue();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n        }\n      }\n    }\n else {\n      formBody.addField(name,encodeName,value.toString(),encodeValue);\n    }\n  }\n}\n else if (annotationType == FieldMap.class) {\n  if (value != null) {\n    FieldMap fieldMap=(FieldMap)annotation;\n    boolean encodeNames=fieldMap.encodeNames();\n    boolean encodeValues=fieldMap.encodeValues();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n      }\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n      }\n    }\n  }\n}\n else if (annotationType == Part.class) {\n  if (value != null) {\n    String name=((Part)annotation).value();\n    String transferEncoding=((Part)annotation).encoding();\n    if (value instanceof TypedOutput) {\n      multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n    }\n else     if (value instanceof String) {\n      multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n    }\n else {\n      multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n    }\n  }\n}\n else if (annotationType == PartMap.class) {\n  if (value != null) {\n    String transferEncoding=((PartMap)annotation).encoding();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n      }\n      String entryName=entryKey.toString();\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        if (entryValue instanceof TypedOutput) {\n          multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n        }\n else         if (entryValue instanceof String) {\n          multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n        }\n else {\n          multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n        }\n      }\n    }\n  }\n}\n else if (annotationType == Body.class) {\n  if (value == null) {\n    throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n  }\n  if (value instanceof TypedOutput) {\n    body=(TypedOutput)value;\n  }\n else {\n    body=converter.toBody(value);\n  }\n}\n else {\n  throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 625,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5250,
        "startLineNumber" : 248,
        "startColumnNumber" : 13,
        "endLineNumber" : 361,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == QueryMap.class) {\n  if (value != null) {\n    QueryMap queryMap=(QueryMap)annotation;\n    addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n  }\n}\n else if (annotationType == retrofit.http.Header.class) {\n  if (value != null) {\n    String name=((retrofit.http.Header)annotation).value();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          addHeader(name,iterableValue.toString());\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          addHeader(name,arrayValue.toString());\n        }\n      }\n    }\n else {\n      addHeader(name,value.toString());\n    }\n  }\n}\n else if (annotationType == Field.class) {\n  if (value != null) {\n    Field field=(Field)annotation;\n    String name=field.value();\n    boolean encodeName=field.encodeName();\n    boolean encodeValue=field.encodeValue();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n        }\n      }\n    }\n else {\n      formBody.addField(name,encodeName,value.toString(),encodeValue);\n    }\n  }\n}\n else if (annotationType == FieldMap.class) {\n  if (value != null) {\n    FieldMap fieldMap=(FieldMap)annotation;\n    boolean encodeNames=fieldMap.encodeNames();\n    boolean encodeValues=fieldMap.encodeValues();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n      }\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n      }\n    }\n  }\n}\n else if (annotationType == Part.class) {\n  if (value != null) {\n    String name=((Part)annotation).value();\n    String transferEncoding=((Part)annotation).encoding();\n    if (value instanceof TypedOutput) {\n      multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n    }\n else     if (value instanceof String) {\n      multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n    }\n else {\n      multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n    }\n  }\n}\n else if (annotationType == PartMap.class) {\n  if (value != null) {\n    String transferEncoding=((PartMap)annotation).encoding();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n      }\n      String entryName=entryKey.toString();\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        if (entryValue instanceof TypedOutput) {\n          multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n        }\n else         if (entryValue instanceof String) {\n          multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n        }\n else {\n          multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n        }\n      }\n    }\n  }\n}\n else if (annotationType == Body.class) {\n  if (value == null) {\n    throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n  }\n  if (value instanceof TypedOutput) {\n    body=(TypedOutput)value;\n  }\n else {\n    body=converter.toBody(value);\n  }\n}\n else {\n  throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 663,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5492,
        "startLineNumber" : 243,
        "startColumnNumber" : 13,
        "endLineNumber" : 361,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == Query.class) {\n  if (value != null) {\n    Query query=(Query)annotation;\n    addQueryParam(query.value(),value,query.encodeName(),query.encodeValue());\n  }\n}\n else if (annotationType == QueryMap.class) {\n  if (value != null) {\n    QueryMap queryMap=(QueryMap)annotation;\n    addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n  }\n}\n else if (annotationType == retrofit.http.Header.class) {\n  if (value != null) {\n    String name=((retrofit.http.Header)annotation).value();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          addHeader(name,iterableValue.toString());\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          addHeader(name,arrayValue.toString());\n        }\n      }\n    }\n else {\n      addHeader(name,value.toString());\n    }\n  }\n}\n else if (annotationType == Field.class) {\n  if (value != null) {\n    Field field=(Field)annotation;\n    String name=field.value();\n    boolean encodeName=field.encodeName();\n    boolean encodeValue=field.encodeValue();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n        }\n      }\n    }\n else {\n      formBody.addField(name,encodeName,value.toString(),encodeValue);\n    }\n  }\n}\n else if (annotationType == FieldMap.class) {\n  if (value != null) {\n    FieldMap fieldMap=(FieldMap)annotation;\n    boolean encodeNames=fieldMap.encodeNames();\n    boolean encodeValues=fieldMap.encodeValues();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n      }\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n      }\n    }\n  }\n}\n else if (annotationType == Part.class) {\n  if (value != null) {\n    String name=((Part)annotation).value();\n    String transferEncoding=((Part)annotation).encoding();\n    if (value instanceof TypedOutput) {\n      multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n    }\n else     if (value instanceof String) {\n      multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n    }\n else {\n      multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n    }\n  }\n}\n else if (annotationType == PartMap.class) {\n  if (value != null) {\n    String transferEncoding=((PartMap)annotation).encoding();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n      }\n      String entryName=entryKey.toString();\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        if (entryValue instanceof TypedOutput) {\n          multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n        }\n else         if (entryValue instanceof String) {\n          multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n        }\n else {\n          multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n        }\n      }\n    }\n  }\n}\n else if (annotationType == Body.class) {\n  if (value == null) {\n    throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n  }\n  if (value instanceof TypedOutput) {\n    body=(TypedOutput)value;\n  }\n else {\n    body=converter.toBody(value);\n  }\n}\n else {\n  throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 697,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5836,
        "startLineNumber" : 235,
        "startColumnNumber" : 6,
        "endLineNumber" : 361,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (annotationType == Path.class) {\n  Path path=(Path)annotation;\n  String name=path.value();\n  if (value == null) {\n    throw new IllegalArgumentException(\"Path parameter \\\"\" + name + \"\\\" value must not be null.\");\n  }\n  addPathParam(name,value.toString(),path.encode());\n}\n else if (annotationType == Query.class) {\n  if (value != null) {\n    Query query=(Query)annotation;\n    addQueryParam(query.value(),value,query.encodeName(),query.encodeValue());\n  }\n}\n else if (annotationType == QueryMap.class) {\n  if (value != null) {\n    QueryMap queryMap=(QueryMap)annotation;\n    addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n  }\n}\n else if (annotationType == retrofit.http.Header.class) {\n  if (value != null) {\n    String name=((retrofit.http.Header)annotation).value();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          addHeader(name,iterableValue.toString());\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          addHeader(name,arrayValue.toString());\n        }\n      }\n    }\n else {\n      addHeader(name,value.toString());\n    }\n  }\n}\n else if (annotationType == Field.class) {\n  if (value != null) {\n    Field field=(Field)annotation;\n    String name=field.value();\n    boolean encodeName=field.encodeName();\n    boolean encodeValue=field.encodeValue();\n    if (value instanceof Iterable) {\n      for (      Object iterableValue : (Iterable<?>)value) {\n        if (iterableValue != null) {\n          formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n        }\n      }\n    }\n else     if (value.getClass().isArray()) {\n      for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n        Object arrayValue=Array.get(value,x);\n        if (arrayValue != null) {\n          formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n        }\n      }\n    }\n else {\n      formBody.addField(name,encodeName,value.toString(),encodeValue);\n    }\n  }\n}\n else if (annotationType == FieldMap.class) {\n  if (value != null) {\n    FieldMap fieldMap=(FieldMap)annotation;\n    boolean encodeNames=fieldMap.encodeNames();\n    boolean encodeValues=fieldMap.encodeValues();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n      }\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n      }\n    }\n  }\n}\n else if (annotationType == Part.class) {\n  if (value != null) {\n    String name=((Part)annotation).value();\n    String transferEncoding=((Part)annotation).encoding();\n    if (value instanceof TypedOutput) {\n      multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n    }\n else     if (value instanceof String) {\n      multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n    }\n else {\n      multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n    }\n  }\n}\n else if (annotationType == PartMap.class) {\n  if (value != null) {\n    String transferEncoding=((PartMap)annotation).encoding();\n    for (    Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n      Object entryKey=entry.getKey();\n      if (entryKey == null) {\n        throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n      }\n      String entryName=entryKey.toString();\n      Object entryValue=entry.getValue();\n      if (entryValue != null) {\n        if (entryValue instanceof TypedOutput) {\n          multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n        }\n else         if (entryValue instanceof String) {\n          multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n        }\n else {\n          multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n        }\n      }\n    }\n  }\n}\n else if (annotationType == Body.class) {\n  if (value == null) {\n    throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n  }\n  if (value instanceof TypedOutput) {\n    body=(TypedOutput)value;\n  }\n else {\n    body=converter.toBody(value);\n  }\n}\n else {\n  throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 744,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 6012,
        "startLineNumber" : 230,
        "startColumnNumber" : 36,
        "endLineNumber" : 362,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object value=args[i];\n  Annotation annotation=paramAnnotations[i];\n  Class<? extends Annotation> annotationType=annotation.annotationType();\n  if (annotationType == Path.class) {\n    Path path=(Path)annotation;\n    String name=path.value();\n    if (value == null) {\n      throw new IllegalArgumentException(\"Path parameter \\\"\" + name + \"\\\" value must not be null.\");\n    }\n    addPathParam(name,value.toString(),path.encode());\n  }\n else   if (annotationType == Query.class) {\n    if (value != null) {\n      Query query=(Query)annotation;\n      addQueryParam(query.value(),value,query.encodeName(),query.encodeValue());\n    }\n  }\n else   if (annotationType == QueryMap.class) {\n    if (value != null) {\n      QueryMap queryMap=(QueryMap)annotation;\n      addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n    }\n  }\n else   if (annotationType == retrofit.http.Header.class) {\n    if (value != null) {\n      String name=((retrofit.http.Header)annotation).value();\n      if (value instanceof Iterable) {\n        for (        Object iterableValue : (Iterable<?>)value) {\n          if (iterableValue != null) {\n            addHeader(name,iterableValue.toString());\n          }\n        }\n      }\n else       if (value.getClass().isArray()) {\n        for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n          Object arrayValue=Array.get(value,x);\n          if (arrayValue != null) {\n            addHeader(name,arrayValue.toString());\n          }\n        }\n      }\n else {\n        addHeader(name,value.toString());\n      }\n    }\n  }\n else   if (annotationType == Field.class) {\n    if (value != null) {\n      Field field=(Field)annotation;\n      String name=field.value();\n      boolean encodeName=field.encodeName();\n      boolean encodeValue=field.encodeValue();\n      if (value instanceof Iterable) {\n        for (        Object iterableValue : (Iterable<?>)value) {\n          if (iterableValue != null) {\n            formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n          }\n        }\n      }\n else       if (value.getClass().isArray()) {\n        for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n          Object arrayValue=Array.get(value,x);\n          if (arrayValue != null) {\n            formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n          }\n        }\n      }\n else {\n        formBody.addField(name,encodeName,value.toString(),encodeValue);\n      }\n    }\n  }\n else   if (annotationType == FieldMap.class) {\n    if (value != null) {\n      FieldMap fieldMap=(FieldMap)annotation;\n      boolean encodeNames=fieldMap.encodeNames();\n      boolean encodeValues=fieldMap.encodeValues();\n      for (      Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n        Object entryKey=entry.getKey();\n        if (entryKey == null) {\n          throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n        }\n        Object entryValue=entry.getValue();\n        if (entryValue != null) {\n          formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n        }\n      }\n    }\n  }\n else   if (annotationType == Part.class) {\n    if (value != null) {\n      String name=((Part)annotation).value();\n      String transferEncoding=((Part)annotation).encoding();\n      if (value instanceof TypedOutput) {\n        multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n      }\n else       if (value instanceof String) {\n        multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n      }\n else {\n        multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n      }\n    }\n  }\n else   if (annotationType == PartMap.class) {\n    if (value != null) {\n      String transferEncoding=((PartMap)annotation).encoding();\n      for (      Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n        Object entryKey=entry.getKey();\n        if (entryKey == null) {\n          throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n        }\n        String entryName=entryKey.toString();\n        Object entryValue=entry.getValue();\n        if (entryValue != null) {\n          if (entryValue instanceof TypedOutput) {\n            multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n          }\n else           if (entryValue instanceof String) {\n            multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n          }\n else {\n            multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n          }\n        }\n      }\n    }\n  }\n else   if (annotationType == Body.class) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n    }\n    if (value instanceof TypedOutput) {\n      body=(TypedOutput)value;\n    }\n else {\n      body=converter.toBody(value);\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 773,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6044,
        "startLineNumber" : 230,
        "startColumnNumber" : 4,
        "endLineNumber" : 362,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  Object value=args[i];\n  Annotation annotation=paramAnnotations[i];\n  Class<? extends Annotation> annotationType=annotation.annotationType();\n  if (annotationType == Path.class) {\n    Path path=(Path)annotation;\n    String name=path.value();\n    if (value == null) {\n      throw new IllegalArgumentException(\"Path parameter \\\"\" + name + \"\\\" value must not be null.\");\n    }\n    addPathParam(name,value.toString(),path.encode());\n  }\n else   if (annotationType == Query.class) {\n    if (value != null) {\n      Query query=(Query)annotation;\n      addQueryParam(query.value(),value,query.encodeName(),query.encodeValue());\n    }\n  }\n else   if (annotationType == QueryMap.class) {\n    if (value != null) {\n      QueryMap queryMap=(QueryMap)annotation;\n      addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n    }\n  }\n else   if (annotationType == retrofit.http.Header.class) {\n    if (value != null) {\n      String name=((retrofit.http.Header)annotation).value();\n      if (value instanceof Iterable) {\n        for (        Object iterableValue : (Iterable<?>)value) {\n          if (iterableValue != null) {\n            addHeader(name,iterableValue.toString());\n          }\n        }\n      }\n else       if (value.getClass().isArray()) {\n        for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n          Object arrayValue=Array.get(value,x);\n          if (arrayValue != null) {\n            addHeader(name,arrayValue.toString());\n          }\n        }\n      }\n else {\n        addHeader(name,value.toString());\n      }\n    }\n  }\n else   if (annotationType == Field.class) {\n    if (value != null) {\n      Field field=(Field)annotation;\n      String name=field.value();\n      boolean encodeName=field.encodeName();\n      boolean encodeValue=field.encodeValue();\n      if (value instanceof Iterable) {\n        for (        Object iterableValue : (Iterable<?>)value) {\n          if (iterableValue != null) {\n            formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n          }\n        }\n      }\n else       if (value.getClass().isArray()) {\n        for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n          Object arrayValue=Array.get(value,x);\n          if (arrayValue != null) {\n            formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n          }\n        }\n      }\n else {\n        formBody.addField(name,encodeName,value.toString(),encodeValue);\n      }\n    }\n  }\n else   if (annotationType == FieldMap.class) {\n    if (value != null) {\n      FieldMap fieldMap=(FieldMap)annotation;\n      boolean encodeNames=fieldMap.encodeNames();\n      boolean encodeValues=fieldMap.encodeValues();\n      for (      Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n        Object entryKey=entry.getKey();\n        if (entryKey == null) {\n          throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n        }\n        Object entryValue=entry.getValue();\n        if (entryValue != null) {\n          formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n        }\n      }\n    }\n  }\n else   if (annotationType == Part.class) {\n    if (value != null) {\n      String name=((Part)annotation).value();\n      String transferEncoding=((Part)annotation).encoding();\n      if (value instanceof TypedOutput) {\n        multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n      }\n else       if (value instanceof String) {\n        multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n      }\n else {\n        multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n      }\n    }\n  }\n else   if (annotationType == PartMap.class) {\n    if (value != null) {\n      String transferEncoding=((PartMap)annotation).encoding();\n      for (      Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n        Object entryKey=entry.getKey();\n        if (entryKey == null) {\n          throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n        }\n        String entryName=entryKey.toString();\n        Object entryValue=entry.getValue();\n        if (entryValue != null) {\n          if (entryValue instanceof TypedOutput) {\n            multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n          }\n else           if (entryValue instanceof String) {\n            multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n          }\n else {\n            multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n          }\n        }\n      }\n    }\n  }\n else   if (annotationType == Body.class) {\n    if (value == null) {\n      throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n    }\n    if (value instanceof TypedOutput) {\n      body=(TypedOutput)value;\n    }\n else {\n      body=converter.toBody(value);\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 784,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6194,
        "startLineNumber" : 222,
        "startColumnNumber" : 35,
        "endLineNumber" : 363,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (args == null) {\n    return;\n  }\n  int count=args.length;\n  if (!isSynchronous && !isObservable) {\n    count-=1;\n  }\n  for (int i=0; i < count; i++) {\n    Object value=args[i];\n    Annotation annotation=paramAnnotations[i];\n    Class<? extends Annotation> annotationType=annotation.annotationType();\n    if (annotationType == Path.class) {\n      Path path=(Path)annotation;\n      String name=path.value();\n      if (value == null) {\n        throw new IllegalArgumentException(\"Path parameter \\\"\" + name + \"\\\" value must not be null.\");\n      }\n      addPathParam(name,value.toString(),path.encode());\n    }\n else     if (annotationType == Query.class) {\n      if (value != null) {\n        Query query=(Query)annotation;\n        addQueryParam(query.value(),value,query.encodeName(),query.encodeValue());\n      }\n    }\n else     if (annotationType == QueryMap.class) {\n      if (value != null) {\n        QueryMap queryMap=(QueryMap)annotation;\n        addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n      }\n    }\n else     if (annotationType == retrofit.http.Header.class) {\n      if (value != null) {\n        String name=((retrofit.http.Header)annotation).value();\n        if (value instanceof Iterable) {\n          for (          Object iterableValue : (Iterable<?>)value) {\n            if (iterableValue != null) {\n              addHeader(name,iterableValue.toString());\n            }\n          }\n        }\n else         if (value.getClass().isArray()) {\n          for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n            Object arrayValue=Array.get(value,x);\n            if (arrayValue != null) {\n              addHeader(name,arrayValue.toString());\n            }\n          }\n        }\n else {\n          addHeader(name,value.toString());\n        }\n      }\n    }\n else     if (annotationType == Field.class) {\n      if (value != null) {\n        Field field=(Field)annotation;\n        String name=field.value();\n        boolean encodeName=field.encodeName();\n        boolean encodeValue=field.encodeValue();\n        if (value instanceof Iterable) {\n          for (          Object iterableValue : (Iterable<?>)value) {\n            if (iterableValue != null) {\n              formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n            }\n          }\n        }\n else         if (value.getClass().isArray()) {\n          for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n            Object arrayValue=Array.get(value,x);\n            if (arrayValue != null) {\n              formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n            }\n          }\n        }\n else {\n          formBody.addField(name,encodeName,value.toString(),encodeValue);\n        }\n      }\n    }\n else     if (annotationType == FieldMap.class) {\n      if (value != null) {\n        FieldMap fieldMap=(FieldMap)annotation;\n        boolean encodeNames=fieldMap.encodeNames();\n        boolean encodeValues=fieldMap.encodeValues();\n        for (        Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n          Object entryKey=entry.getKey();\n          if (entryKey == null) {\n            throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n          }\n          Object entryValue=entry.getValue();\n          if (entryValue != null) {\n            formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n          }\n        }\n      }\n    }\n else     if (annotationType == Part.class) {\n      if (value != null) {\n        String name=((Part)annotation).value();\n        String transferEncoding=((Part)annotation).encoding();\n        if (value instanceof TypedOutput) {\n          multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n        }\n else         if (value instanceof String) {\n          multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n        }\n else {\n          multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n        }\n      }\n    }\n else     if (annotationType == PartMap.class) {\n      if (value != null) {\n        String transferEncoding=((PartMap)annotation).encoding();\n        for (        Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n          Object entryKey=entry.getKey();\n          if (entryKey == null) {\n            throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n          }\n          String entryName=entryKey.toString();\n          Object entryValue=entry.getValue();\n          if (entryValue != null) {\n            if (entryValue instanceof TypedOutput) {\n              multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n            }\n else             if (entryValue instanceof String) {\n              multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n            }\n else {\n              multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n            }\n          }\n        }\n      }\n    }\n else     if (annotationType == Body.class) {\n      if (value == null) {\n        throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n      }\n      if (value instanceof TypedOutput) {\n        body=(TypedOutput)value;\n      }\n else {\n        body=converter.toBody(value);\n      }\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 809,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6227,
        "startLineNumber" : 222,
        "startColumnNumber" : 2,
        "endLineNumber" : 363,
        "endColumnNumber" : 3
      },
      "nodeContext" : "void setArguments(Object[] args){\n  if (args == null) {\n    return;\n  }\n  int count=args.length;\n  if (!isSynchronous && !isObservable) {\n    count-=1;\n  }\n  for (int i=0; i < count; i++) {\n    Object value=args[i];\n    Annotation annotation=paramAnnotations[i];\n    Class<? extends Annotation> annotationType=annotation.annotationType();\n    if (annotationType == Path.class) {\n      Path path=(Path)annotation;\n      String name=path.value();\n      if (value == null) {\n        throw new IllegalArgumentException(\"Path parameter \\\"\" + name + \"\\\" value must not be null.\");\n      }\n      addPathParam(name,value.toString(),path.encode());\n    }\n else     if (annotationType == Query.class) {\n      if (value != null) {\n        Query query=(Query)annotation;\n        addQueryParam(query.value(),value,query.encodeName(),query.encodeValue());\n      }\n    }\n else     if (annotationType == QueryMap.class) {\n      if (value != null) {\n        QueryMap queryMap=(QueryMap)annotation;\n        addQueryParamMap(i,(Map<?,?>)value,queryMap.encodeNames(),queryMap.encodeValues());\n      }\n    }\n else     if (annotationType == retrofit.http.Header.class) {\n      if (value != null) {\n        String name=((retrofit.http.Header)annotation).value();\n        if (value instanceof Iterable) {\n          for (          Object iterableValue : (Iterable<?>)value) {\n            if (iterableValue != null) {\n              addHeader(name,iterableValue.toString());\n            }\n          }\n        }\n else         if (value.getClass().isArray()) {\n          for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n            Object arrayValue=Array.get(value,x);\n            if (arrayValue != null) {\n              addHeader(name,arrayValue.toString());\n            }\n          }\n        }\n else {\n          addHeader(name,value.toString());\n        }\n      }\n    }\n else     if (annotationType == Field.class) {\n      if (value != null) {\n        Field field=(Field)annotation;\n        String name=field.value();\n        boolean encodeName=field.encodeName();\n        boolean encodeValue=field.encodeValue();\n        if (value instanceof Iterable) {\n          for (          Object iterableValue : (Iterable<?>)value) {\n            if (iterableValue != null) {\n              formBody.addField(name,encodeName,iterableValue.toString(),encodeValue);\n            }\n          }\n        }\n else         if (value.getClass().isArray()) {\n          for (int x=0, arrayLength=Array.getLength(value); x < arrayLength; x++) {\n            Object arrayValue=Array.get(value,x);\n            if (arrayValue != null) {\n              formBody.addField(name,encodeName,arrayValue.toString(),encodeValue);\n            }\n          }\n        }\n else {\n          formBody.addField(name,encodeName,value.toString(),encodeValue);\n        }\n      }\n    }\n else     if (annotationType == FieldMap.class) {\n      if (value != null) {\n        FieldMap fieldMap=(FieldMap)annotation;\n        boolean encodeNames=fieldMap.encodeNames();\n        boolean encodeValues=fieldMap.encodeValues();\n        for (        Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n          Object entryKey=entry.getKey();\n          if (entryKey == null) {\n            throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" field map contained null key.\");\n          }\n          Object entryValue=entry.getValue();\n          if (entryValue != null) {\n            formBody.addField(entryKey.toString(),encodeNames,entryValue.toString(),encodeValues);\n          }\n        }\n      }\n    }\n else     if (annotationType == Part.class) {\n      if (value != null) {\n        String name=((Part)annotation).value();\n        String transferEncoding=((Part)annotation).encoding();\n        if (value instanceof TypedOutput) {\n          multipartBody.addPart(name,transferEncoding,(TypedOutput)value);\n        }\n else         if (value instanceof String) {\n          multipartBody.addPart(name,transferEncoding,new TypedString((String)value));\n        }\n else {\n          multipartBody.addPart(name,transferEncoding,converter.toBody(value));\n        }\n      }\n    }\n else     if (annotationType == PartMap.class) {\n      if (value != null) {\n        String transferEncoding=((PartMap)annotation).encoding();\n        for (        Map.Entry<?,?> entry : ((Map<?,?>)value).entrySet()) {\n          Object entryKey=entry.getKey();\n          if (entryKey == null) {\n            throw new IllegalArgumentException(\"Parameter #\" + (i + 1) + \" part map contained null key.\");\n          }\n          String entryName=entryKey.toString();\n          Object entryValue=entry.getValue();\n          if (entryValue != null) {\n            if (entryValue instanceof TypedOutput) {\n              multipartBody.addPart(entryName,transferEncoding,(TypedOutput)entryValue);\n            }\n else             if (entryValue instanceof String) {\n              multipartBody.addPart(entryName,transferEncoding,new TypedString((String)entryValue));\n            }\n else {\n              multipartBody.addPart(entryName,transferEncoding,converter.toBody(entryValue));\n            }\n          }\n        }\n      }\n    }\n else     if (annotationType == Body.class) {\n      if (value == null) {\n        throw new IllegalArgumentException(\"Body parameter value must not be null.\");\n      }\n      if (value instanceof TypedOutput) {\n        body=(TypedOutput)value;\n      }\n else {\n        body=converter.toBody(value);\n      }\n    }\n else {\n      throw new IllegalArgumentException(\"Unknown annotation: \" + annotationType.getCanonicalName());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 818,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 255,
        "startColumnNumber" : 10,
        "endLineNumber" : 255,
        "endColumnNumber" : 68
      },
      "nodeContext" : "String name=((retrofit.http.Header)annotation).value();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 9
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 43,
    "startLineNumber" : 255,
    "startColumnNumber" : 24,
    "endLineNumber" : 255,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}