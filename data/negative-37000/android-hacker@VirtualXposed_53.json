{
  "id" : 53,
  "expression" : "cls.getDeclaredConstructor(types)",
  "projectName" : "android-hacker@VirtualXposed",
  "commitID" : "8e98dd20e6a751089d4eb2642fa6bf088a3e7a79",
  "filePath" : "/VirtualApp/lib/src/main/java/mirror/RefConstructor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cls.getDeclaredConstructor(types)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 12,
      "startColumnNumber" : 19,
      "endLineNumber" : 12,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 12,
        "startColumnNumber" : 12,
        "endLineNumber" : 12,
        "endColumnNumber" : 52
      },
      "nodeContext" : "ctor=cls.getDeclaredConstructor(types)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 12,
        "startColumnNumber" : 12,
        "endLineNumber" : 12,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ctor=cls.getDeclaredConstructor(types);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 10,
        "startColumnNumber" : 59,
        "endLineNumber" : 13,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n  ctor=cls.getDeclaredConstructor(types);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 10,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (field.isAnnotationPresent(MethodParams.class)) {\n  Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n  ctor=cls.getDeclaredConstructor(types);\n}\n else if (field.isAnnotationPresent(MethodReflectParams.class)) {\n  String[] values=field.getAnnotation(MethodReflectParams.class).value();\n  Class[] parameterTypes=new Class[values.length];\n  int N=0;\n  while (N < values.length) {\n    try {\n      parameterTypes[N]=Class.forName(values[N]);\n      N++;\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n  ctor=cls.getDeclaredConstructor(parameterTypes);\n}\n else {\n  ctor=cls.getDeclaredConstructor();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 122,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 9,
        "startColumnNumber" : 82,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (field.isAnnotationPresent(MethodParams.class)) {\n    Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n    ctor=cls.getDeclaredConstructor(types);\n  }\n else   if (field.isAnnotationPresent(MethodReflectParams.class)) {\n    String[] values=field.getAnnotation(MethodReflectParams.class).value();\n    Class[] parameterTypes=new Class[values.length];\n    int N=0;\n    while (N < values.length) {\n      try {\n        parameterTypes[N]=Class.forName(values[N]);\n        N++;\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n    }\n    ctor=cls.getDeclaredConstructor(parameterTypes);\n  }\n else {\n    ctor=cls.getDeclaredConstructor();\n  }\n  if (ctor != null && !ctor.isAccessible()) {\n    ctor.setAccessible(true);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 9,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public RefConstructor(Class<?> cls,Field field) throws NoSuchMethodException {\n  if (field.isAnnotationPresent(MethodParams.class)) {\n    Class<?>[] types=field.getAnnotation(MethodParams.class).value();\n    ctor=cls.getDeclaredConstructor(types);\n  }\n else   if (field.isAnnotationPresent(MethodReflectParams.class)) {\n    String[] values=field.getAnnotation(MethodReflectParams.class).value();\n    Class[] parameterTypes=new Class[values.length];\n    int N=0;\n    while (N < values.length) {\n      try {\n        parameterTypes[N]=Class.forName(values[N]);\n        N++;\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n    }\n    ctor=cls.getDeclaredConstructor(parameterTypes);\n  }\n else {\n    ctor=cls.getDeclaredConstructor();\n  }\n  if (ctor != null && !ctor.isAccessible()) {\n    ctor.setAccessible(true);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 153,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 12,
        "startColumnNumber" : 12,
        "endLineNumber" : 12,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ctor=cls.getDeclaredConstructor(types);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.reflect.Constructor<>"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 12,
    "startColumnNumber" : 19,
    "endLineNumber" : 12,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}