{
  "id" : 241,
  "expression" : "actual",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestTest.java",
  "occurrences" : 9,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 76,
      "startColumnNumber" : 15,
      "endLineNumber" : 76,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 76,
        "startColumnNumber" : 15,
        "endLineNumber" : 76,
        "endColumnNumber" : 32
      },
      "nodeContext" : "actual.durationUs",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertThat(actual.durationUs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertThat(actual.durationUs).isEqualTo(expected.durationUs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 15,
      "endLineNumber" : 77,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 77,
        "startColumnNumber" : 15,
        "endLineNumber" : 77,
        "endColumnNumber" : 39
      },
      "nodeContext" : "actual.dvrWindowLengthUs",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertThat(actual.dvrWindowLengthUs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 77,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 78,
      "startColumnNumber" : 15,
      "endLineNumber" : 78,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 78,
        "startColumnNumber" : 15,
        "endLineNumber" : 78,
        "endColumnNumber" : 28
      },
      "nodeContext" : "actual.isLive",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertThat(actual.isLive)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertThat(actual.isLive).isEqualTo(expected.isLive)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(actual.isLive).isEqualTo(expected.isLive);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 78,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(actual.isLive).isEqualTo(expected.isLive);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 79,
      "startColumnNumber" : 15,
      "endLineNumber" : 79,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 79,
        "startColumnNumber" : 15,
        "endLineNumber" : 79,
        "endColumnNumber" : 36
      },
      "nodeContext" : "actual.lookAheadCount",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 37
      },
      "nodeContext" : "assertThat(actual.lookAheadCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 80,
      "startColumnNumber" : 15,
      "endLineNumber" : 80,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 80,
        "startColumnNumber" : 15,
        "endLineNumber" : 80,
        "endColumnNumber" : 34
      },
      "nodeContext" : "actual.majorVersion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 35
      },
      "nodeContext" : "assertThat(actual.majorVersion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(actual.majorVersion).isEqualTo(expected.majorVersion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 81,
      "startColumnNumber" : 15,
      "endLineNumber" : 81,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 81,
        "endColumnNumber" : 34
      },
      "nodeContext" : "actual.minorVersion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 35
      },
      "nodeContext" : "assertThat(actual.minorVersion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 68
      },
      "nodeContext" : "assertThat(actual.minorVersion).isEqualTo(expected.minorVersion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 69
      },
      "nodeContext" : "assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 82,
      "startColumnNumber" : 15,
      "endLineNumber" : 82,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 82,
        "startColumnNumber" : 15,
        "endLineNumber" : 82,
        "endColumnNumber" : 39
      },
      "nodeContext" : "actual.protectionElement",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 82,
        "startColumnNumber" : 15,
        "endLineNumber" : 82,
        "endColumnNumber" : 44
      },
      "nodeContext" : "actual.protectionElement.uuid",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 45
      },
      "nodeContext" : "assertThat(actual.protectionElement.uuid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 89
      },
      "nodeContext" : "assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 83,
      "startColumnNumber" : 15,
      "endLineNumber" : 83,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 83,
        "startColumnNumber" : 15,
        "endLineNumber" : 83,
        "endColumnNumber" : 39
      },
      "nodeContext" : "actual.protectionElement",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertThat(actual.protectionElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertThat(actual.protectionElement).isEqualTo(expected.protectionElement)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  }, {
    "nodeContext" : "actual",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 86,
      "startColumnNumber" : 42,
      "endLineNumber" : 86,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 86,
        "startColumnNumber" : 42,
        "endLineNumber" : 86,
        "endColumnNumber" : 63
      },
      "nodeContext" : "actual.streamElements",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 86,
        "startColumnNumber" : 42,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "actual.streamElements[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 86,
        "startColumnNumber" : 20,
        "endLineNumber" : 86,
        "endColumnNumber" : 66
      },
      "nodeContext" : "actualStreamElement=actual.streamElements[i]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 67
      },
      "nodeContext" : "StreamElement actualStreamElement=actual.streamElements[i];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1143,
        "startLineNumber" : 84,
        "startColumnNumber" : 61,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StreamElement expectedStreamElement=expected.streamElements[i];\n  StreamElement actualStreamElement=actual.streamElements[i];\n  assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n  assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n  assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n  assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n  assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n  assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n  assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n  assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n  assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n  assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n  assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1200,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < expected.streamElements.length; i++) {\n  StreamElement expectedStreamElement=expected.streamElements[i];\n  StreamElement actualStreamElement=actual.streamElements[i];\n  assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n  assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n  assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n  assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n  assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n  assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n  assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n  assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n  assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n  assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n  assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 157,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1798,
        "startLineNumber" : 75,
        "startColumnNumber" : 83,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 250,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1879,
        "startLineNumber" : 75,
        "startColumnNumber" : 2,
        "endLineNumber" : 99,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void assertManifestEquals(SsManifest expected,SsManifest actual){\n  assertThat(actual.durationUs).isEqualTo(expected.durationUs);\n  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);\n  assertThat(actual.isLive).isEqualTo(expected.isLive);\n  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);\n  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);\n  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);\n  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);\n  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);\n  for (int i=0; i < expected.streamElements.length; i++) {\n    StreamElement expectedStreamElement=expected.streamElements[i];\n    StreamElement actualStreamElement=actual.streamElements[i];\n    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);\n    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);\n    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);\n    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);\n    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);\n    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);\n    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);\n    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);\n    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);\n    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);\n    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 263,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 86,
        "startColumnNumber" : 6,
        "endLineNumber" : 86,
        "endColumnNumber" : 67
      },
      "nodeContext" : "StreamElement actualStreamElement=actual.streamElements[i];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 76,
    "startColumnNumber" : 15,
    "endLineNumber" : 76,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 15,
    "endLineNumber" : 77,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 78,
    "startColumnNumber" : 15,
    "endLineNumber" : 78,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 79,
    "startColumnNumber" : 15,
    "endLineNumber" : 79,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 80,
    "startColumnNumber" : 15,
    "endLineNumber" : 80,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 81,
    "startColumnNumber" : 15,
    "endLineNumber" : 81,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 82,
    "startColumnNumber" : 15,
    "endLineNumber" : 82,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 83,
    "startColumnNumber" : 15,
    "endLineNumber" : 83,
    "endColumnNumber" : 21
  }, {
    "charLength" : 6,
    "startLineNumber" : 86,
    "startColumnNumber" : 42,
    "endLineNumber" : 86,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 6
  } ]
}