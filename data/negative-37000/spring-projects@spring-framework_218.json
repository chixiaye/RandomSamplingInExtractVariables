{
  "id" : 218,
  "expression" : "valueAndAttributes.length",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/mock/web/test/MockCookie.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "valueAndAttributes.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 85,
      "startColumnNumber" : 5,
      "endLineNumber" : 85,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 85,
        "startColumnNumber" : 5,
        "endLineNumber" : 85,
        "endColumnNumber" : 34
      },
      "nodeContext" : "valueAndAttributes.length > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 85,
        "startColumnNumber" : 5,
        "endLineNumber" : 85,
        "endColumnNumber" : 93
      },
      "nodeContext" : "valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0]",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 94
      },
      "nodeContext" : "(valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0])",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 84,
        "startColumnNumber" : 11,
        "endLineNumber" : 85,
        "endColumnNumber" : 94
      },
      "nodeContext" : "attributes=(valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0])",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 84,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 95
      },
      "nodeContext" : "String[] attributes=(valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0]);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1292,
        "startLineNumber" : 76,
        "startColumnNumber" : 56,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Assert.notNull(setCookieHeader,\"Set-Cookie header must not be null\");\n  String[] cookieParts=setCookieHeader.split(\"\\\\s*=\\\\s*\",2);\n  Assert.isTrue(cookieParts.length == 2,() -> \"Invalid Set-Cookie header '\" + setCookieHeader + \"'\");\n  String name=cookieParts[0];\n  String[] valueAndAttributes=cookieParts[1].split(\"\\\\s*;\\\\s*\",2);\n  String value=valueAndAttributes[0];\n  String[] attributes=(valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0]);\n  MockCookie cookie=new MockCookie(name,value);\n  for (  String attribute : attributes) {\n    if (attribute.startsWith(\"Domain\")) {\n      cookie.setDomain(extractAttributeValue(attribute,setCookieHeader));\n    }\n else     if (attribute.startsWith(\"Max-Age\")) {\n      cookie.setMaxAge(Integer.parseInt(extractAttributeValue(attribute,setCookieHeader)));\n    }\n else     if (attribute.startsWith(\"Path\")) {\n      cookie.setPath(extractAttributeValue(attribute,setCookieHeader));\n    }\n else     if (attribute.startsWith(\"Secure\")) {\n      cookie.setSecure(true);\n    }\n else     if (attribute.startsWith(\"HttpOnly\")) {\n      cookie.setHttpOnly(true);\n    }\n else     if (attribute.startsWith(\"SameSite\")) {\n      cookie.setSameSite(extractAttributeValue(attribute,setCookieHeader));\n    }\n  }\n  return cookie;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 189,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1534,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Factory method that parses the value of a \"Set-Cookie\" header.\n * @param setCookieHeader the \"Set-Cookie\" value; never {@code null} or empty\n * @return the created cookie\n */\npublic static MockCookie parse(String setCookieHeader){\n  Assert.notNull(setCookieHeader,\"Set-Cookie header must not be null\");\n  String[] cookieParts=setCookieHeader.split(\"\\\\s*=\\\\s*\",2);\n  Assert.isTrue(cookieParts.length == 2,() -> \"Invalid Set-Cookie header '\" + setCookieHeader + \"'\");\n  String name=cookieParts[0];\n  String[] valueAndAttributes=cookieParts[1].split(\"\\\\s*;\\\\s*\",2);\n  String value=valueAndAttributes[0];\n  String[] attributes=(valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0]);\n  MockCookie cookie=new MockCookie(name,value);\n  for (  String attribute : attributes) {\n    if (attribute.startsWith(\"Domain\")) {\n      cookie.setDomain(extractAttributeValue(attribute,setCookieHeader));\n    }\n else     if (attribute.startsWith(\"Max-Age\")) {\n      cookie.setMaxAge(Integer.parseInt(extractAttributeValue(attribute,setCookieHeader)));\n    }\n else     if (attribute.startsWith(\"Path\")) {\n      cookie.setPath(extractAttributeValue(attribute,setCookieHeader));\n    }\n else     if (attribute.startsWith(\"Secure\")) {\n      cookie.setSecure(true);\n    }\n else     if (attribute.startsWith(\"HttpOnly\")) {\n      cookie.setHttpOnly(true);\n    }\n else     if (attribute.startsWith(\"SameSite\")) {\n      cookie.setSameSite(extractAttributeValue(attribute,setCookieHeader));\n    }\n  }\n  return cookie;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 200,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 94
      },
      "nodeContext" : "(valueAndAttributes.length > 1 ? valueAndAttributes[1].split(\"\\\\s*;\\\\s*\") : new String[0])",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 85,
    "startColumnNumber" : 5,
    "endLineNumber" : 85,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ ]
}