{
  "id" : 156,
  "expression" : "libraryToInstallParts.length == 2",
  "projectName" : "arduino@Arduino",
  "commitID" : "cf1879f948e0c1fa9ddd91f7348fbdd07fd870cb",
  "filePath" : "/app/src/processing/app/Base.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "libraryToInstallParts.length == 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 381,
      "startColumnNumber" : 12,
      "endLineNumber" : 381,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 381,
        "startColumnNumber" : 8,
        "endLineNumber" : 389,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (libraryToInstallParts.length == 2) {\n  selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n}\n else if (libraryToInstallParts.length == 1) {\n  List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n  Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n  if (!librariesByName.isEmpty()) {\n    selected=librariesByName.get(librariesByName.size() - 1);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1078,
        "startLineNumber" : 377,
        "startColumnNumber" : 69,
        "endLineNumber" : 401,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String[] libraryToInstallParts=library.split(\":\");\n  ContributedLibrary selected=null;\n  if (libraryToInstallParts.length == 2) {\n    selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n  }\n else   if (libraryToInstallParts.length == 1) {\n    List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n    Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n    if (!librariesByName.isEmpty()) {\n      selected=librariesByName.get(librariesByName.size() - 1);\n    }\n  }\n  if (selected == null) {\n    System.out.println(_(\"Selected library is not available\"));\n    System.exit(1);\n  }\n  ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n  if (selected.isReadOnly()) {\n    installer.remove(installed);\n  }\n else {\n    installer.install(selected,installed);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1141,
        "startLineNumber" : 377,
        "startColumnNumber" : 6,
        "endLineNumber" : 401,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (String library : parser.getLibraryToInstall().split(\",\")) {\n  String[] libraryToInstallParts=library.split(\":\");\n  ContributedLibrary selected=null;\n  if (libraryToInstallParts.length == 2) {\n    selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n  }\n else   if (libraryToInstallParts.length == 1) {\n    List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n    Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n    if (!librariesByName.isEmpty()) {\n      selected=librariesByName.get(librariesByName.size() - 1);\n    }\n  }\n  if (selected == null) {\n    System.out.println(_(\"Selected library is not available\"));\n    System.exit(1);\n  }\n  ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n  if (selected.isReadOnly()) {\n    installer.remove(installed);\n  }\n else {\n    installer.install(selected,installed);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 152,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1884,
        "startLineNumber" : 358,
        "startColumnNumber" : 42,
        "endLineNumber" : 405,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LibrariesIndexer indexer=new LibrariesIndexer(BaseNoGui.getSettingsFolder());\n  LibraryInstaller installer=new LibraryInstaller(indexer){\n    private String lastStatus=\"\";\n    @Override protected void onProgress(    Progress progress){\n      if (!lastStatus.equals(progress.getStatus())) {\n        System.out.println(progress.getStatus());\n      }\n      lastStatus=progress.getStatus();\n    }\n  }\n;\n  indexer.parseIndex();\n  BaseNoGui.onBoardOrPortChange();\n  indexer.setSketchbookLibrariesFolder(BaseNoGui.getSketchbookLibrariesFolder());\n  indexer.setLibrariesFolders(BaseNoGui.getLibrariesPath());\n  installer.updateIndex();\n  for (  String library : parser.getLibraryToInstall().split(\",\")) {\n    String[] libraryToInstallParts=library.split(\":\");\n    ContributedLibrary selected=null;\n    if (libraryToInstallParts.length == 2) {\n      selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n    }\n else     if (libraryToInstallParts.length == 1) {\n      List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n      Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n      if (!librariesByName.isEmpty()) {\n        selected=librariesByName.get(librariesByName.size() - 1);\n      }\n    }\n    if (selected == null) {\n      System.out.println(_(\"Selected library is not available\"));\n      System.exit(1);\n    }\n    ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n    if (selected.isReadOnly()) {\n      installer.remove(installed);\n    }\n else {\n      installer.install(selected,installed);\n    }\n  }\n  System.exit(0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3717,
        "startLineNumber" : 358,
        "startColumnNumber" : 11,
        "endLineNumber" : 459,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (parser.isInstallLibrary()) {\n  LibrariesIndexer indexer=new LibrariesIndexer(BaseNoGui.getSettingsFolder());\n  LibraryInstaller installer=new LibraryInstaller(indexer){\n    private String lastStatus=\"\";\n    @Override protected void onProgress(    Progress progress){\n      if (!lastStatus.equals(progress.getStatus())) {\n        System.out.println(progress.getStatus());\n      }\n      lastStatus=progress.getStatus();\n    }\n  }\n;\n  indexer.parseIndex();\n  BaseNoGui.onBoardOrPortChange();\n  indexer.setSketchbookLibrariesFolder(BaseNoGui.getSketchbookLibrariesFolder());\n  indexer.setLibrariesFolders(BaseNoGui.getLibrariesPath());\n  installer.updateIndex();\n  for (  String library : parser.getLibraryToInstall().split(\",\")) {\n    String[] libraryToInstallParts=library.split(\":\");\n    ContributedLibrary selected=null;\n    if (libraryToInstallParts.length == 2) {\n      selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n    }\n else     if (libraryToInstallParts.length == 1) {\n      List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n      Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n      if (!librariesByName.isEmpty()) {\n        selected=librariesByName.get(librariesByName.size() - 1);\n      }\n    }\n    if (selected == null) {\n      System.out.println(_(\"Selected library is not available\"));\n      System.exit(1);\n    }\n    ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n    if (selected.isReadOnly()) {\n      installer.remove(installed);\n    }\n else {\n      installer.install(selected,installed);\n    }\n  }\n  System.exit(0);\n}\n else if (parser.isVerifyOrUploadMode()) {\n  splashScreenHelper.close();\n  Preferences.set(\"build.verbose\",\"\" + parser.isDoVerboseBuild());\n  Preferences.set(\"upload.verbose\",\"\" + parser.isDoVerboseUpload());\n  Preferences.set(\"runtime.preserve.temp.files\",Boolean.toString(parser.isPreserveTempFiles()));\n  Preferences.setDoSave(false);\n  Editor editor=editors.get(0);\n  if (parser.isUploadMode()) {\n    splashScreenHelper.splashText(_(\"Verifying and uploading...\"));\n    editor.exportHandler.run();\n  }\n else {\n    splashScreenHelper.splashText(_(\"Verifying...\"));\n    editor.runHandler.run();\n  }\n  int res=editor.status.mode;\n  if (res == EditorStatus.ERR)   System.exit(1);\n  System.exit(0);\n}\n else if (parser.isGuiMode()) {\n  splashScreenHelper.splashText(_(\"Starting...\"));\n  restoreSketches();\n  if (editors.isEmpty()) {\n    handleNew();\n  }\n  if (Preferences.getBoolean(\"update.check\")) {\n    new UpdateCheck(this);\n  }\n}\n else if (parser.isNoOpMode()) {\n  System.exit(0);\n}\n else if (parser.isGetPrefMode()) {\n  String value=Preferences.get(parser.getGetPref(),null);\n  if (value != null) {\n    System.out.println(value);\n    System.exit(0);\n  }\n else {\n    System.exit(4);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 446,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5525,
        "startLineNumber" : 312,
        "startColumnNumber" : 4,
        "endLineNumber" : 459,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (parser.isInstallBoard()) {\n  ContributionsIndexer indexer=new ContributionsIndexer(BaseNoGui.getSettingsFolder());\n  ContributionInstaller installer=new ContributionInstaller(indexer){\n    private String lastStatus=\"\";\n    @Override protected void onProgress(    Progress progress){\n      if (!lastStatus.equals(progress.getStatus())) {\n        System.out.println(progress.getStatus());\n      }\n      lastStatus=progress.getStatus();\n    }\n  }\n;\n  installer.updateIndex();\n  indexer.parseIndex();\n  indexer.syncWithFilesystem(getHardwareFolder());\n  String[] boardToInstallParts=parser.getBoardToInstall().split(\":\");\n  ContributedPlatform selected=null;\n  if (boardToInstallParts.length == 3) {\n    selected=indexer.getIndex().findPlatform(boardToInstallParts[0],boardToInstallParts[1],VersionHelper.valueOf(boardToInstallParts[2]).toString());\n  }\n else   if (boardToInstallParts.length == 2) {\n    List<ContributedPlatform> platformsByName=indexer.getIndex().findPlatforms(boardToInstallParts[0],boardToInstallParts[1]);\n    Collections.sort(platformsByName,new DownloadableContributionVersionComparator());\n    if (!platformsByName.isEmpty()) {\n      selected=platformsByName.get(platformsByName.size() - 1);\n    }\n  }\n  if (selected == null) {\n    System.out.println(_(\"Selected board is not available\"));\n    System.exit(1);\n  }\n  ContributedPlatform installed=indexer.getInstalled(boardToInstallParts[0],boardToInstallParts[1]);\n  if (!selected.isReadOnly()) {\n    installer.install(selected);\n  }\n  if (installed != null && !installed.isReadOnly()) {\n    installer.remove(installed);\n  }\n  System.exit(0);\n}\n else if (parser.isInstallLibrary()) {\n  LibrariesIndexer indexer=new LibrariesIndexer(BaseNoGui.getSettingsFolder());\n  LibraryInstaller installer=new LibraryInstaller(indexer){\n    private String lastStatus=\"\";\n    @Override protected void onProgress(    Progress progress){\n      if (!lastStatus.equals(progress.getStatus())) {\n        System.out.println(progress.getStatus());\n      }\n      lastStatus=progress.getStatus();\n    }\n  }\n;\n  indexer.parseIndex();\n  BaseNoGui.onBoardOrPortChange();\n  indexer.setSketchbookLibrariesFolder(BaseNoGui.getSketchbookLibrariesFolder());\n  indexer.setLibrariesFolders(BaseNoGui.getLibrariesPath());\n  installer.updateIndex();\n  for (  String library : parser.getLibraryToInstall().split(\",\")) {\n    String[] libraryToInstallParts=library.split(\":\");\n    ContributedLibrary selected=null;\n    if (libraryToInstallParts.length == 2) {\n      selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n    }\n else     if (libraryToInstallParts.length == 1) {\n      List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n      Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n      if (!librariesByName.isEmpty()) {\n        selected=librariesByName.get(librariesByName.size() - 1);\n      }\n    }\n    if (selected == null) {\n      System.out.println(_(\"Selected library is not available\"));\n      System.exit(1);\n    }\n    ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n    if (selected.isReadOnly()) {\n      installer.remove(installed);\n    }\n else {\n      installer.install(selected,installed);\n    }\n  }\n  System.exit(0);\n}\n else if (parser.isVerifyOrUploadMode()) {\n  splashScreenHelper.close();\n  Preferences.set(\"build.verbose\",\"\" + parser.isDoVerboseBuild());\n  Preferences.set(\"upload.verbose\",\"\" + parser.isDoVerboseUpload());\n  Preferences.set(\"runtime.preserve.temp.files\",Boolean.toString(parser.isPreserveTempFiles()));\n  Preferences.setDoSave(false);\n  Editor editor=editors.get(0);\n  if (parser.isUploadMode()) {\n    splashScreenHelper.splashText(_(\"Verifying and uploading...\"));\n    editor.exportHandler.run();\n  }\n else {\n    splashScreenHelper.splashText(_(\"Verifying...\"));\n    editor.runHandler.run();\n  }\n  int res=editor.status.mode;\n  if (res == EditorStatus.ERR)   System.exit(1);\n  System.exit(0);\n}\n else if (parser.isGuiMode()) {\n  splashScreenHelper.splashText(_(\"Starting...\"));\n  restoreSketches();\n  if (editors.isEmpty()) {\n    handleNew();\n  }\n  if (Preferences.getBoolean(\"update.check\")) {\n    new UpdateCheck(this);\n  }\n}\n else if (parser.isNoOpMode()) {\n  System.exit(0);\n}\n else if (parser.isGetPrefMode()) {\n  String value=Preferences.get(parser.getGetPref(),null);\n  if (value != null) {\n    System.out.println(value);\n    System.exit(0);\n  }\n else {\n    System.exit(4);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 691,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7690,
        "startLineNumber" : 251,
        "startColumnNumber" : 46,
        "endLineNumber" : 460,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  getPlatform().init();\n  String sketchbookPath=BaseNoGui.getSketchbookPath();\n  if (sketchbookPath == null) {\n    File defaultFolder=getDefaultSketchbookFolderOrPromptForIt();\n    if (BaseNoGui.getPortableFolder() != null)     Preferences.set(\"sketchbook.path\",BaseNoGui.getPortableSketchbookFolder());\n else     Preferences.set(\"sketchbook.path\",defaultFolder.getAbsolutePath());\n    if (!defaultFolder.exists()) {\n      defaultFolder.mkdirs();\n    }\n  }\n  splashScreenHelper.splashText(_(\"Initializing packages...\"));\n  BaseNoGui.initPackages();\n  splashScreenHelper.splashText(_(\"Preparing boards...\"));\n  rebuildBoardsMenu();\n  onBoardOrPortChange();\n  CommandlineParser parser=CommandlineParser.newCommandlineParser(args);\n  for (  String path : parser.getFilenames()) {\n    File file=absoluteFile(path);\n    if (OSUtils.isWindows()) {\n      try {\n        file=file.getCanonicalFile();\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n    }\n    boolean showEditor=parser.isGuiMode();\n    if (!parser.isForceSavePrefs())     Preferences.setDoSave(showEditor);\n    if (handleOpen(file,nextEditorLocation(),showEditor) == null) {\n      String mess=I18n.format(_(\"Failed to open sketch: \\\"{0}\\\"\"),path);\n      if (parser.isVerifyOrUploadMode())       showError(null,mess,2);\n else       showWarning(null,mess,null);\n    }\n  }\n  Preferences.save();\n  if (parser.isInstallBoard()) {\n    ContributionsIndexer indexer=new ContributionsIndexer(BaseNoGui.getSettingsFolder());\n    ContributionInstaller installer=new ContributionInstaller(indexer){\n      private String lastStatus=\"\";\n      @Override protected void onProgress(      Progress progress){\n        if (!lastStatus.equals(progress.getStatus())) {\n          System.out.println(progress.getStatus());\n        }\n        lastStatus=progress.getStatus();\n      }\n    }\n;\n    installer.updateIndex();\n    indexer.parseIndex();\n    indexer.syncWithFilesystem(getHardwareFolder());\n    String[] boardToInstallParts=parser.getBoardToInstall().split(\":\");\n    ContributedPlatform selected=null;\n    if (boardToInstallParts.length == 3) {\n      selected=indexer.getIndex().findPlatform(boardToInstallParts[0],boardToInstallParts[1],VersionHelper.valueOf(boardToInstallParts[2]).toString());\n    }\n else     if (boardToInstallParts.length == 2) {\n      List<ContributedPlatform> platformsByName=indexer.getIndex().findPlatforms(boardToInstallParts[0],boardToInstallParts[1]);\n      Collections.sort(platformsByName,new DownloadableContributionVersionComparator());\n      if (!platformsByName.isEmpty()) {\n        selected=platformsByName.get(platformsByName.size() - 1);\n      }\n    }\n    if (selected == null) {\n      System.out.println(_(\"Selected board is not available\"));\n      System.exit(1);\n    }\n    ContributedPlatform installed=indexer.getInstalled(boardToInstallParts[0],boardToInstallParts[1]);\n    if (!selected.isReadOnly()) {\n      installer.install(selected);\n    }\n    if (installed != null && !installed.isReadOnly()) {\n      installer.remove(installed);\n    }\n    System.exit(0);\n  }\n else   if (parser.isInstallLibrary()) {\n    LibrariesIndexer indexer=new LibrariesIndexer(BaseNoGui.getSettingsFolder());\n    LibraryInstaller installer=new LibraryInstaller(indexer){\n      private String lastStatus=\"\";\n      @Override protected void onProgress(      Progress progress){\n        if (!lastStatus.equals(progress.getStatus())) {\n          System.out.println(progress.getStatus());\n        }\n        lastStatus=progress.getStatus();\n      }\n    }\n;\n    indexer.parseIndex();\n    BaseNoGui.onBoardOrPortChange();\n    indexer.setSketchbookLibrariesFolder(BaseNoGui.getSketchbookLibrariesFolder());\n    indexer.setLibrariesFolders(BaseNoGui.getLibrariesPath());\n    installer.updateIndex();\n    for (    String library : parser.getLibraryToInstall().split(\",\")) {\n      String[] libraryToInstallParts=library.split(\":\");\n      ContributedLibrary selected=null;\n      if (libraryToInstallParts.length == 2) {\n        selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n      }\n else       if (libraryToInstallParts.length == 1) {\n        List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n        Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n        if (!librariesByName.isEmpty()) {\n          selected=librariesByName.get(librariesByName.size() - 1);\n        }\n      }\n      if (selected == null) {\n        System.out.println(_(\"Selected library is not available\"));\n        System.exit(1);\n      }\n      ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n      if (selected.isReadOnly()) {\n        installer.remove(installed);\n      }\n else {\n        installer.install(selected,installed);\n      }\n    }\n    System.exit(0);\n  }\n else   if (parser.isVerifyOrUploadMode()) {\n    splashScreenHelper.close();\n    Preferences.set(\"build.verbose\",\"\" + parser.isDoVerboseBuild());\n    Preferences.set(\"upload.verbose\",\"\" + parser.isDoVerboseUpload());\n    Preferences.set(\"runtime.preserve.temp.files\",Boolean.toString(parser.isPreserveTempFiles()));\n    Preferences.setDoSave(false);\n    Editor editor=editors.get(0);\n    if (parser.isUploadMode()) {\n      splashScreenHelper.splashText(_(\"Verifying and uploading...\"));\n      editor.exportHandler.run();\n    }\n else {\n      splashScreenHelper.splashText(_(\"Verifying...\"));\n      editor.runHandler.run();\n    }\n    int res=editor.status.mode;\n    if (res == EditorStatus.ERR)     System.exit(1);\n    System.exit(0);\n  }\n else   if (parser.isGuiMode()) {\n    splashScreenHelper.splashText(_(\"Starting...\"));\n    restoreSketches();\n    if (editors.isEmpty()) {\n      handleNew();\n    }\n    if (Preferences.getBoolean(\"update.check\")) {\n      new UpdateCheck(this);\n    }\n  }\n else   if (parser.isNoOpMode()) {\n    System.exit(0);\n  }\n else   if (parser.isGetPrefMode()) {\n    String value=Preferences.get(parser.getGetPref(),null);\n    if (value != null) {\n      System.out.println(value);\n      System.exit(0);\n    }\n else {\n      System.exit(4);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 881,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7734,
        "startLineNumber" : 251,
        "startColumnNumber" : 2,
        "endLineNumber" : 460,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public Base(String[] args) throws Exception {\n  getPlatform().init();\n  String sketchbookPath=BaseNoGui.getSketchbookPath();\n  if (sketchbookPath == null) {\n    File defaultFolder=getDefaultSketchbookFolderOrPromptForIt();\n    if (BaseNoGui.getPortableFolder() != null)     Preferences.set(\"sketchbook.path\",BaseNoGui.getPortableSketchbookFolder());\n else     Preferences.set(\"sketchbook.path\",defaultFolder.getAbsolutePath());\n    if (!defaultFolder.exists()) {\n      defaultFolder.mkdirs();\n    }\n  }\n  splashScreenHelper.splashText(_(\"Initializing packages...\"));\n  BaseNoGui.initPackages();\n  splashScreenHelper.splashText(_(\"Preparing boards...\"));\n  rebuildBoardsMenu();\n  onBoardOrPortChange();\n  CommandlineParser parser=CommandlineParser.newCommandlineParser(args);\n  for (  String path : parser.getFilenames()) {\n    File file=absoluteFile(path);\n    if (OSUtils.isWindows()) {\n      try {\n        file=file.getCanonicalFile();\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n    }\n    boolean showEditor=parser.isGuiMode();\n    if (!parser.isForceSavePrefs())     Preferences.setDoSave(showEditor);\n    if (handleOpen(file,nextEditorLocation(),showEditor) == null) {\n      String mess=I18n.format(_(\"Failed to open sketch: \\\"{0}\\\"\"),path);\n      if (parser.isVerifyOrUploadMode())       showError(null,mess,2);\n else       showWarning(null,mess,null);\n    }\n  }\n  Preferences.save();\n  if (parser.isInstallBoard()) {\n    ContributionsIndexer indexer=new ContributionsIndexer(BaseNoGui.getSettingsFolder());\n    ContributionInstaller installer=new ContributionInstaller(indexer){\n      private String lastStatus=\"\";\n      @Override protected void onProgress(      Progress progress){\n        if (!lastStatus.equals(progress.getStatus())) {\n          System.out.println(progress.getStatus());\n        }\n        lastStatus=progress.getStatus();\n      }\n    }\n;\n    installer.updateIndex();\n    indexer.parseIndex();\n    indexer.syncWithFilesystem(getHardwareFolder());\n    String[] boardToInstallParts=parser.getBoardToInstall().split(\":\");\n    ContributedPlatform selected=null;\n    if (boardToInstallParts.length == 3) {\n      selected=indexer.getIndex().findPlatform(boardToInstallParts[0],boardToInstallParts[1],VersionHelper.valueOf(boardToInstallParts[2]).toString());\n    }\n else     if (boardToInstallParts.length == 2) {\n      List<ContributedPlatform> platformsByName=indexer.getIndex().findPlatforms(boardToInstallParts[0],boardToInstallParts[1]);\n      Collections.sort(platformsByName,new DownloadableContributionVersionComparator());\n      if (!platformsByName.isEmpty()) {\n        selected=platformsByName.get(platformsByName.size() - 1);\n      }\n    }\n    if (selected == null) {\n      System.out.println(_(\"Selected board is not available\"));\n      System.exit(1);\n    }\n    ContributedPlatform installed=indexer.getInstalled(boardToInstallParts[0],boardToInstallParts[1]);\n    if (!selected.isReadOnly()) {\n      installer.install(selected);\n    }\n    if (installed != null && !installed.isReadOnly()) {\n      installer.remove(installed);\n    }\n    System.exit(0);\n  }\n else   if (parser.isInstallLibrary()) {\n    LibrariesIndexer indexer=new LibrariesIndexer(BaseNoGui.getSettingsFolder());\n    LibraryInstaller installer=new LibraryInstaller(indexer){\n      private String lastStatus=\"\";\n      @Override protected void onProgress(      Progress progress){\n        if (!lastStatus.equals(progress.getStatus())) {\n          System.out.println(progress.getStatus());\n        }\n        lastStatus=progress.getStatus();\n      }\n    }\n;\n    indexer.parseIndex();\n    BaseNoGui.onBoardOrPortChange();\n    indexer.setSketchbookLibrariesFolder(BaseNoGui.getSketchbookLibrariesFolder());\n    indexer.setLibrariesFolders(BaseNoGui.getLibrariesPath());\n    installer.updateIndex();\n    for (    String library : parser.getLibraryToInstall().split(\",\")) {\n      String[] libraryToInstallParts=library.split(\":\");\n      ContributedLibrary selected=null;\n      if (libraryToInstallParts.length == 2) {\n        selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n      }\n else       if (libraryToInstallParts.length == 1) {\n        List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n        Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n        if (!librariesByName.isEmpty()) {\n          selected=librariesByName.get(librariesByName.size() - 1);\n        }\n      }\n      if (selected == null) {\n        System.out.println(_(\"Selected library is not available\"));\n        System.exit(1);\n      }\n      ContributedLibrary installed=indexer.getIndex().getInstalled(libraryToInstallParts[0]);\n      if (selected.isReadOnly()) {\n        installer.remove(installed);\n      }\n else {\n        installer.install(selected,installed);\n      }\n    }\n    System.exit(0);\n  }\n else   if (parser.isVerifyOrUploadMode()) {\n    splashScreenHelper.close();\n    Preferences.set(\"build.verbose\",\"\" + parser.isDoVerboseBuild());\n    Preferences.set(\"upload.verbose\",\"\" + parser.isDoVerboseUpload());\n    Preferences.set(\"runtime.preserve.temp.files\",Boolean.toString(parser.isPreserveTempFiles()));\n    Preferences.setDoSave(false);\n    Editor editor=editors.get(0);\n    if (parser.isUploadMode()) {\n      splashScreenHelper.splashText(_(\"Verifying and uploading...\"));\n      editor.exportHandler.run();\n    }\n else {\n      splashScreenHelper.splashText(_(\"Verifying...\"));\n      editor.runHandler.run();\n    }\n    int res=editor.status.mode;\n    if (res == EditorStatus.ERR)     System.exit(1);\n    System.exit(0);\n  }\n else   if (parser.isGuiMode()) {\n    splashScreenHelper.splashText(_(\"Starting...\"));\n    restoreSketches();\n    if (editors.isEmpty()) {\n      handleNew();\n    }\n    if (Preferences.getBoolean(\"update.check\")) {\n      new UpdateCheck(this);\n    }\n  }\n else   if (parser.isNoOpMode()) {\n    System.exit(0);\n  }\n else   if (parser.isGetPrefMode()) {\n    String value=Preferences.get(parser.getGetPref(),null);\n    if (value != null) {\n      System.out.println(value);\n      System.exit(0);\n    }\n else {\n      System.exit(4);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 892,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 564,
        "startLineNumber" : 381,
        "startColumnNumber" : 8,
        "endLineNumber" : 389,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (libraryToInstallParts.length == 2) {\n  selected=indexer.getIndex().find(libraryToInstallParts[0],VersionHelper.valueOf(libraryToInstallParts[1]).toString());\n}\n else if (libraryToInstallParts.length == 1) {\n  List<ContributedLibrary> librariesByName=indexer.getIndex().find(libraryToInstallParts[0]);\n  Collections.sort(librariesByName,new DownloadableContributionVersionComparator());\n  if (!librariesByName.isEmpty()) {\n    selected=librariesByName.get(librariesByName.size() - 1);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 74,
      "astHeight" : 11
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 381,
    "startColumnNumber" : 12,
    "endLineNumber" : 381,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}