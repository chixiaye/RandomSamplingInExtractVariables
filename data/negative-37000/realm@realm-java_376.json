{
  "id" : 376,
  "expression" : "10",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/internal/JNITableTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 116,
      "startColumnNumber" : 30,
      "endLineNumber" : 116,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 116,
        "startColumnNumber" : 18,
        "endLineNumber" : 116,
        "endColumnNumber" : 32
      },
      "nodeContext" : "TEST_SIZE=10",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 33
      },
      "nodeContext" : "final int TEST_SIZE=10;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2259,
        "startLineNumber" : 115,
        "startColumnNumber" : 28,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int TEST_SIZE=10;\n  Table t=TestHelper.createTableWithAllColumnTypes(sharedRealm);\n  long colKey1=t.getColumnKey(\"binary\");\n  long colKey2=t.getColumnKey(\"boolean\");\n  long colKey3=t.getColumnKey(\"date\");\n  long colKey4=t.getColumnKey(\"double\");\n  long colKey5=t.getColumnKey(\"float\");\n  long colKey6=t.getColumnKey(\"long\");\n  long colKey7=t.getColumnKey(\"string\");\n  long colKey8=t.getColumnKey(\"decimal128\");\n  long colKey9=t.getColumnKey(\"object_id\");\n  sharedRealm.beginTransaction();\n  for (int i=0; i < TEST_SIZE; i++) {\n    TestHelper.addRowWithValues(t,new long[]{colKey1,colKey2,colKey3,colKey4,colKey5,colKey6,colKey7,colKey8,colKey9},new Object[]{new byte[]{1,2,3},true,new Date(i),(double)i,(float)i,i,\"string \" + i,new Decimal128(i),new ObjectId(TestHelper.generateObjectIdHexString(i))});\n  }\n  TestHelper.addRowWithValues(t,new long[]{colKey1,colKey2,colKey3,colKey4,colKey5,colKey6,colKey7,colKey8,colKey9},new Object[]{new byte[]{1,2,3},true,new Date(TEST_SIZE),(double)TEST_SIZE,(float)TEST_SIZE,TEST_SIZE,\"\",new Decimal128(TEST_SIZE),new ObjectId(TestHelper.generateObjectIdHexString(TEST_SIZE))});\n  sharedRealm.commitTransaction();\n  assertEquals(0,t.findFirstBoolean(colKey2,true));\n  for (int i=0; i < TEST_SIZE; i++) {\n    assertEquals(i,t.findFirstDate(colKey3,new Date(i)));\n    assertEquals(i,t.findFirstDouble(colKey4,(double)i));\n    assertEquals(i,t.findFirstFloat(colKey5,(float)i));\n    assertEquals(i,t.findFirstLong(colKey6,i));\n    assertEquals(i,t.findFirstDecimal128(colKey8,new Decimal128(i)));\n    assertEquals(i,t.findFirstObjectId(colKey9,new ObjectId(TestHelper.generateObjectIdHexString(i))));\n  }\n  try {\n    t.findFirstString(colKey7,null);\n    fail();\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    t.findFirstDate(colKey3,null);\n    fail();\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2293,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 159,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void findFirst(){\n  final int TEST_SIZE=10;\n  Table t=TestHelper.createTableWithAllColumnTypes(sharedRealm);\n  long colKey1=t.getColumnKey(\"binary\");\n  long colKey2=t.getColumnKey(\"boolean\");\n  long colKey3=t.getColumnKey(\"date\");\n  long colKey4=t.getColumnKey(\"double\");\n  long colKey5=t.getColumnKey(\"float\");\n  long colKey6=t.getColumnKey(\"long\");\n  long colKey7=t.getColumnKey(\"string\");\n  long colKey8=t.getColumnKey(\"decimal128\");\n  long colKey9=t.getColumnKey(\"object_id\");\n  sharedRealm.beginTransaction();\n  for (int i=0; i < TEST_SIZE; i++) {\n    TestHelper.addRowWithValues(t,new long[]{colKey1,colKey2,colKey3,colKey4,colKey5,colKey6,colKey7,colKey8,colKey9},new Object[]{new byte[]{1,2,3},true,new Date(i),(double)i,(float)i,i,\"string \" + i,new Decimal128(i),new ObjectId(TestHelper.generateObjectIdHexString(i))});\n  }\n  TestHelper.addRowWithValues(t,new long[]{colKey1,colKey2,colKey3,colKey4,colKey5,colKey6,colKey7,colKey8,colKey9},new Object[]{new byte[]{1,2,3},true,new Date(TEST_SIZE),(double)TEST_SIZE,(float)TEST_SIZE,TEST_SIZE,\"\",new Decimal128(TEST_SIZE),new ObjectId(TestHelper.generateObjectIdHexString(TEST_SIZE))});\n  sharedRealm.commitTransaction();\n  assertEquals(0,t.findFirstBoolean(colKey2,true));\n  for (int i=0; i < TEST_SIZE; i++) {\n    assertEquals(i,t.findFirstDate(colKey3,new Date(i)));\n    assertEquals(i,t.findFirstDouble(colKey4,(double)i));\n    assertEquals(i,t.findFirstFloat(colKey5,(float)i));\n    assertEquals(i,t.findFirstLong(colKey6,i));\n    assertEquals(i,t.findFirstDecimal128(colKey8,new Decimal128(i)));\n    assertEquals(i,t.findFirstObjectId(colKey9,new ObjectId(TestHelper.generateObjectIdHexString(i))));\n  }\n  try {\n    t.findFirstString(colKey7,null);\n    fail();\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n  try {\n    t.findFirstDate(colKey3,null);\n    fail();\n  }\n catch (  IllegalArgumentException ignored) {\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 355,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 33
      },
      "nodeContext" : "final int TEST_SIZE=10;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 116,
    "startColumnNumber" : 30,
    "endLineNumber" : 116,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}