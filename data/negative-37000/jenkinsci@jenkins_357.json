{
  "id" : 357,
  "expression" : "\"JENKINS_API_TOKEN\"",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/cli/src/main/java/hudson/cli/CLI.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"JENKINS_API_TOKEN\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 127,
      "startColumnNumber" : 40,
      "endLineNumber" : 127,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 127,
        "startColumnNumber" : 26,
        "endLineNumber" : 127,
        "endColumnNumber" : 60
      },
      "nodeContext" : "System.getenv(\"JENKINS_API_TOKEN\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 127,
        "startColumnNumber" : 15,
        "endLineNumber" : 127,
        "endColumnNumber" : 60
      },
      "nodeContext" : "tokenEnv=System.getenv(\"JENKINS_API_TOKEN\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 61
      },
      "nodeContext" : "String tokenEnv=System.getenv(\"JENKINS_API_TOKEN\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8139,
        "startLineNumber" : 108,
        "startColumnNumber" : 61,
        "endLineNumber" : 320,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> args=Arrays.asList(_args);\n  PrivateKeyProvider provider=new PrivateKeyProvider();\n  String url=System.getenv(\"JENKINS_URL\");\n  if (url == null)   url=System.getenv(\"HUDSON_URL\");\n  boolean noKeyAuth=false;\n  Mode mode=null;\n  String user=null;\n  String auth=null;\n  String bearer=null;\n  String userIdEnv=System.getenv(\"JENKINS_USER_ID\");\n  String tokenEnv=System.getenv(\"JENKINS_API_TOKEN\");\n  boolean strictHostKey=false;\n  while (!args.isEmpty()) {\n    String head=args.get(0);\n    if (head.equals(\"-version\")) {\n      System.out.println(\"Version: \" + computeVersion());\n      return 0;\n    }\n    if (head.equals(\"-http\")) {\n      if (mode != null) {\n        printUsage(\"-http clashes with previously defined mode \" + mode);\n        return -1;\n      }\n      mode=Mode.HTTP;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-ssh\")) {\n      if (mode != null) {\n        printUsage(\"-ssh clashes with previously defined mode \" + mode);\n        return -1;\n      }\n      mode=Mode.SSH;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-webSocket\")) {\n      if (mode != null) {\n        printUsage(\"-webSocket clashes with previously defined mode \" + mode);\n        return -1;\n      }\n      mode=Mode.WEB_SOCKET;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-remoting\")) {\n      printUsage(\"-remoting mode is no longer supported\");\n      return -1;\n    }\n    if (head.equals(\"-s\") && args.size() >= 2) {\n      url=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-noCertificateCheck\")) {\n      LOGGER.info(\"Skipping HTTPS certificate checks altogether. Note that this is not secure at all.\");\n      SSLContext context=SSLContext.getInstance(\"TLS\");\n      context.init(null,new TrustManager[]{new NoCheckTrustManager()},new SecureRandom());\n      HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());\n      HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier(){\n        @SuppressFBWarnings(value=\"WEAK_HOSTNAME_VERIFIER\",justification=\"User set parameter to skip verifier.\") public boolean verify(        String s,        SSLSession sslSession){\n          return true;\n        }\n      }\n);\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-noKeyAuth\")) {\n      noKeyAuth=true;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-i\") && args.size() >= 2) {\n      File f=getFileFromArguments(args);\n      if (!f.exists()) {\n        printUsage(Messages.CLI_NoSuchFileExists(f));\n        return -1;\n      }\n      provider.readFrom(f);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-strictHostKey\")) {\n      strictHostKey=true;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-user\") && args.size() >= 2) {\n      user=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-auth\") && args.size() >= 2) {\n      auth=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-bearer\") && args.size() >= 2) {\n      bearer=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-logger\") && args.size() >= 2) {\n      Level level=parse(args.get(1));\n      for (      Handler h : Logger.getLogger(\"\").getHandlers()) {\n        h.setLevel(level);\n      }\n      for (      Logger logger : new Logger[]{LOGGER,FullDuplexHttpStream.LOGGER,PlainCLIProtocol.LOGGER,Logger.getLogger(\"org.apache.sshd\")}) {\n        logger.setLevel(level);\n      }\n      args=args.subList(2,args.size());\n      continue;\n    }\n    break;\n  }\n  if (url == null) {\n    printUsage(Messages.CLI_NoURL());\n    return -1;\n  }\n  if (auth != null && bearer != null) {\n    LOGGER.warning(\"-auth and -bearer are mutually exclusive\");\n  }\n  if (auth == null && bearer == null) {\n    if (StringUtils.isNotBlank(userIdEnv) && StringUtils.isNotBlank(tokenEnv)) {\n      auth=StringUtils.defaultString(userIdEnv).concat(\":\").concat(StringUtils.defaultString(tokenEnv));\n    }\n else     if (StringUtils.isNotBlank(userIdEnv) || StringUtils.isNotBlank(tokenEnv)) {\n      printUsage(Messages.CLI_BadAuth());\n      return -1;\n    }\n  }\n  if (!url.endsWith(\"/\")) {\n    url+='/';\n  }\n  if (args.isEmpty())   args=Collections.singletonList(\"help\");\n  if (mode == null) {\n    mode=Mode.HTTP;\n  }\n  LOGGER.log(FINE,\"using connection mode {0}\",mode);\n  if (user != null && auth != null) {\n    LOGGER.warning(\"-user and -auth are mutually exclusive\");\n  }\n  if (mode == Mode.SSH) {\n    if (user == null) {\n      LOGGER.warning(\"-user required when using -ssh\");\n      return -1;\n    }\n    if (!noKeyAuth && !provider.hasKeys()) {\n      provider.readFromDefaultLocations();\n    }\n    return SSHCLI.sshConnection(url,user,args,provider,strictHostKey);\n  }\n  if (strictHostKey) {\n    LOGGER.warning(\"-strictHostKey meaningful only with -ssh\");\n  }\n  if (noKeyAuth) {\n    LOGGER.warning(\"-noKeyAuth meaningful only with -ssh\");\n  }\n  if (user != null) {\n    LOGGER.warning(\"Warning: -user ignored unless using -ssh\");\n  }\n  CLIConnectionFactory factory=new CLIConnectionFactory();\n  String userInfo=new URL(url).getUserInfo();\n  if (userInfo != null) {\n    factory=factory.basicAuth(userInfo);\n  }\n else   if (auth != null) {\n    factory=factory.basicAuth(auth.startsWith(\"@\") ? readAuthFromFile(auth).trim() : auth);\n  }\n else   if (bearer != null) {\n    factory=factory.bearerAuth(bearer.startsWith(\"@\") ? readAuthFromFile(bearer).trim() : bearer);\n  }\n  if (mode == Mode.HTTP) {\n    return plainHttpConnection(url,args,factory);\n  }\n  if (mode == Mode.WEB_SOCKET) {\n    return webSocketConnection(url,args,factory);\n  }\n  throw new AssertionError();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 941,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8196,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 320,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static int _main(String[] _args) throws Exception {\n  List<String> args=Arrays.asList(_args);\n  PrivateKeyProvider provider=new PrivateKeyProvider();\n  String url=System.getenv(\"JENKINS_URL\");\n  if (url == null)   url=System.getenv(\"HUDSON_URL\");\n  boolean noKeyAuth=false;\n  Mode mode=null;\n  String user=null;\n  String auth=null;\n  String bearer=null;\n  String userIdEnv=System.getenv(\"JENKINS_USER_ID\");\n  String tokenEnv=System.getenv(\"JENKINS_API_TOKEN\");\n  boolean strictHostKey=false;\n  while (!args.isEmpty()) {\n    String head=args.get(0);\n    if (head.equals(\"-version\")) {\n      System.out.println(\"Version: \" + computeVersion());\n      return 0;\n    }\n    if (head.equals(\"-http\")) {\n      if (mode != null) {\n        printUsage(\"-http clashes with previously defined mode \" + mode);\n        return -1;\n      }\n      mode=Mode.HTTP;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-ssh\")) {\n      if (mode != null) {\n        printUsage(\"-ssh clashes with previously defined mode \" + mode);\n        return -1;\n      }\n      mode=Mode.SSH;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-webSocket\")) {\n      if (mode != null) {\n        printUsage(\"-webSocket clashes with previously defined mode \" + mode);\n        return -1;\n      }\n      mode=Mode.WEB_SOCKET;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-remoting\")) {\n      printUsage(\"-remoting mode is no longer supported\");\n      return -1;\n    }\n    if (head.equals(\"-s\") && args.size() >= 2) {\n      url=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-noCertificateCheck\")) {\n      LOGGER.info(\"Skipping HTTPS certificate checks altogether. Note that this is not secure at all.\");\n      SSLContext context=SSLContext.getInstance(\"TLS\");\n      context.init(null,new TrustManager[]{new NoCheckTrustManager()},new SecureRandom());\n      HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());\n      HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier(){\n        @SuppressFBWarnings(value=\"WEAK_HOSTNAME_VERIFIER\",justification=\"User set parameter to skip verifier.\") public boolean verify(        String s,        SSLSession sslSession){\n          return true;\n        }\n      }\n);\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-noKeyAuth\")) {\n      noKeyAuth=true;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-i\") && args.size() >= 2) {\n      File f=getFileFromArguments(args);\n      if (!f.exists()) {\n        printUsage(Messages.CLI_NoSuchFileExists(f));\n        return -1;\n      }\n      provider.readFrom(f);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-strictHostKey\")) {\n      strictHostKey=true;\n      args=args.subList(1,args.size());\n      continue;\n    }\n    if (head.equals(\"-user\") && args.size() >= 2) {\n      user=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-auth\") && args.size() >= 2) {\n      auth=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-bearer\") && args.size() >= 2) {\n      bearer=args.get(1);\n      args=args.subList(2,args.size());\n      continue;\n    }\n    if (head.equals(\"-logger\") && args.size() >= 2) {\n      Level level=parse(args.get(1));\n      for (      Handler h : Logger.getLogger(\"\").getHandlers()) {\n        h.setLevel(level);\n      }\n      for (      Logger logger : new Logger[]{LOGGER,FullDuplexHttpStream.LOGGER,PlainCLIProtocol.LOGGER,Logger.getLogger(\"org.apache.sshd\")}) {\n        logger.setLevel(level);\n      }\n      args=args.subList(2,args.size());\n      continue;\n    }\n    break;\n  }\n  if (url == null) {\n    printUsage(Messages.CLI_NoURL());\n    return -1;\n  }\n  if (auth != null && bearer != null) {\n    LOGGER.warning(\"-auth and -bearer are mutually exclusive\");\n  }\n  if (auth == null && bearer == null) {\n    if (StringUtils.isNotBlank(userIdEnv) && StringUtils.isNotBlank(tokenEnv)) {\n      auth=StringUtils.defaultString(userIdEnv).concat(\":\").concat(StringUtils.defaultString(tokenEnv));\n    }\n else     if (StringUtils.isNotBlank(userIdEnv) || StringUtils.isNotBlank(tokenEnv)) {\n      printUsage(Messages.CLI_BadAuth());\n      return -1;\n    }\n  }\n  if (!url.endsWith(\"/\")) {\n    url+='/';\n  }\n  if (args.isEmpty())   args=Collections.singletonList(\"help\");\n  if (mode == null) {\n    mode=Mode.HTTP;\n  }\n  LOGGER.log(FINE,\"using connection mode {0}\",mode);\n  if (user != null && auth != null) {\n    LOGGER.warning(\"-user and -auth are mutually exclusive\");\n  }\n  if (mode == Mode.SSH) {\n    if (user == null) {\n      LOGGER.warning(\"-user required when using -ssh\");\n      return -1;\n    }\n    if (!noKeyAuth && !provider.hasKeys()) {\n      provider.readFromDefaultLocations();\n    }\n    return SSHCLI.sshConnection(url,user,args,provider,strictHostKey);\n  }\n  if (strictHostKey) {\n    LOGGER.warning(\"-strictHostKey meaningful only with -ssh\");\n  }\n  if (noKeyAuth) {\n    LOGGER.warning(\"-noKeyAuth meaningful only with -ssh\");\n  }\n  if (user != null) {\n    LOGGER.warning(\"Warning: -user ignored unless using -ssh\");\n  }\n  CLIConnectionFactory factory=new CLIConnectionFactory();\n  String userInfo=new URL(url).getUserInfo();\n  if (userInfo != null) {\n    factory=factory.basicAuth(userInfo);\n  }\n else   if (auth != null) {\n    factory=factory.basicAuth(auth.startsWith(\"@\") ? readAuthFromFile(auth).trim() : auth);\n  }\n else   if (bearer != null) {\n    factory=factory.bearerAuth(bearer.startsWith(\"@\") ? readAuthFromFile(bearer).trim() : bearer);\n  }\n  if (mode == Mode.HTTP) {\n    return plainHttpConnection(url,args,factory);\n  }\n  if (mode == Mode.WEB_SOCKET) {\n    return webSocketConnection(url,args,factory);\n  }\n  throw new AssertionError();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 954,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 61
      },
      "nodeContext" : "String tokenEnv=System.getenv(\"JENKINS_API_TOKEN\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 127,
    "startColumnNumber" : 40,
    "endLineNumber" : 127,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ ]
}