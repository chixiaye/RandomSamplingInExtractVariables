{
  "id" : 35,
  "expression" : "octave",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/Others/PerlinNoise.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "octave",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 30,
      "startColumnNumber" : 28,
      "endLineNumber" : 30,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 30,
        "startColumnNumber" : 28,
        "endLineNumber" : 30,
        "endColumnNumber" : 48
      },
      "nodeContext" : "octave < octaveCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int octave=0; octave < octaveCount; octave++) {\n  noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 16,
        "startColumnNumber" : 111,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2068,
        "startLineNumber" : 8,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param width width of noise array\n * @param height height of noise array\n * @param octaveCount numbers of layers used for blending noise\n * @param persistence value of impact each layer get while blending\n * @param seed used for randomizer\n * @return float array containing calculated \"Perlin-Noise\" values\n */\nstatic float[][] generatePerlinNoise(int width,int height,int octaveCount,float persistence,long seed){\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 30,
        "startColumnNumber" : 28,
        "endLineNumber" : 30,
        "endColumnNumber" : 48
      },
      "nodeContext" : "octave < octaveCount",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "octave",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 31,
      "startColumnNumber" : 24,
      "endLineNumber" : 31,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 31
      },
      "nodeContext" : "noiseLayers[octave]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 87
      },
      "nodeContext" : "noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 88
      },
      "nodeContext" : "noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 30,
        "startColumnNumber" : 60,
        "endLineNumber" : 32,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int octave=0; octave < octaveCount; octave++) {\n  noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 16,
        "startColumnNumber" : 111,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2068,
        "startLineNumber" : 8,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param width width of noise array\n * @param height height of noise array\n * @param octaveCount numbers of layers used for blending noise\n * @param persistence value of impact each layer get while blending\n * @param seed used for randomizer\n * @return float array containing calculated \"Perlin-Noise\" values\n */\nstatic float[][] generatePerlinNoise(int width,int height,int octaveCount,float persistence,long seed){\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 88
      },
      "nodeContext" : "noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "octave",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 31,
      "startColumnNumber" : 80,
      "endLineNumber" : 31,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 31,
        "startColumnNumber" : 34,
        "endLineNumber" : 31,
        "endColumnNumber" : 87
      },
      "nodeContext" : "generatePerlinNoiseLayer(base,width,height,octave)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 87
      },
      "nodeContext" : "noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 88
      },
      "nodeContext" : "noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 30,
        "startColumnNumber" : 60,
        "endLineNumber" : 32,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 32,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int octave=0; octave < octaveCount; octave++) {\n  noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 16,
        "startColumnNumber" : 111,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2068,
        "startLineNumber" : 8,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param width width of noise array\n * @param height height of noise array\n * @param octaveCount numbers of layers used for blending noise\n * @param persistence value of impact each layer get while blending\n * @param seed used for randomizer\n * @return float array containing calculated \"Perlin-Noise\" values\n */\nstatic float[][] generatePerlinNoise(int width,int height,int octaveCount,float persistence,long seed){\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 31,
        "startColumnNumber" : 12,
        "endLineNumber" : 31,
        "endColumnNumber" : 88
      },
      "nodeContext" : "noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "octave",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 38,
      "startColumnNumber" : 42,
      "endLineNumber" : 38,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 38,
        "startColumnNumber" : 42,
        "endLineNumber" : 38,
        "endColumnNumber" : 53
      },
      "nodeContext" : "octave >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int octave=octaveCount - 1; octave >= 0; octave--) {\n  amplitude*=persistence;\n  totalAmplitude+=amplitude;\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 16,
        "startColumnNumber" : 111,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2068,
        "startLineNumber" : 8,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param width width of noise array\n * @param height height of noise array\n * @param octaveCount numbers of layers used for blending noise\n * @param persistence value of impact each layer get while blending\n * @param seed used for randomizer\n * @return float array containing calculated \"Perlin-Noise\" values\n */\nstatic float[][] generatePerlinNoise(int width,int height,int octaveCount,float persistence,long seed){\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 38,
        "startColumnNumber" : 42,
        "endLineNumber" : 38,
        "endColumnNumber" : 53
      },
      "nodeContext" : "octave >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "octave",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 46,
      "startColumnNumber" : 53,
      "endLineNumber" : 46,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 46,
        "startColumnNumber" : 41,
        "endLineNumber" : 46,
        "endColumnNumber" : 60
      },
      "nodeContext" : "noiseLayers[octave]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 46,
        "startColumnNumber" : 41,
        "endLineNumber" : 46,
        "endColumnNumber" : 63
      },
      "nodeContext" : "noiseLayers[octave][x]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 46,
        "startColumnNumber" : 41,
        "endLineNumber" : 46,
        "endColumnNumber" : 66
      },
      "nodeContext" : "noiseLayers[octave][x][y]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 46,
        "startColumnNumber" : 41,
        "endLineNumber" : 46,
        "endColumnNumber" : 78
      },
      "nodeContext" : "noiseLayers[octave][x][y] * amplitude",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 46,
        "startColumnNumber" : 20,
        "endLineNumber" : 46,
        "endColumnNumber" : 78
      },
      "nodeContext" : "perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 46,
        "startColumnNumber" : 20,
        "endLineNumber" : 46,
        "endColumnNumber" : 79
      },
      "nodeContext" : "perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 43,
        "startColumnNumber" : 48,
        "endLineNumber" : 47,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 43,
        "startColumnNumber" : 16,
        "endLineNumber" : 47,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int y=0; y < height; y++) {\n  perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 42,
        "startColumnNumber" : 43,
        "endLineNumber" : 48,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (int y=0; y < height; y++) {\n    perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 29,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 353,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 48,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int x=0; x < width; x++) {\n  for (int y=0; y < height; y++) {\n    perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 40,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 457,
        "startLineNumber" : 38,
        "startColumnNumber" : 65,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  amplitude*=persistence;\n  totalAmplitude+=amplitude;\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 49,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int octave=octaveCount - 1; octave >= 0; octave--) {\n  amplitude*=persistence;\n  totalAmplitude+=amplitude;\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1611,
        "startLineNumber" : 16,
        "startColumnNumber" : 111,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2068,
        "startLineNumber" : 8,
        "startColumnNumber" : 4,
        "endLineNumber" : 59,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param width width of noise array\n * @param height height of noise array\n * @param octaveCount numbers of layers used for blending noise\n * @param persistence value of impact each layer get while blending\n * @param seed used for randomizer\n * @return float array containing calculated \"Perlin-Noise\" values\n */\nstatic float[][] generatePerlinNoise(int width,int height,int octaveCount,float persistence,long seed){\n  final float[][] base=new float[width][height];\n  final float[][] perlinNoise=new float[width][height];\n  final float[][][] noiseLayers=new float[octaveCount][][];\n  Random random=new Random(seed);\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      base[x][y]=random.nextFloat();\n    }\n  }\n  for (int octave=0; octave < octaveCount; octave++) {\n    noiseLayers[octave]=generatePerlinNoiseLayer(base,width,height,octave);\n  }\n  float amplitude=1f;\n  float totalAmplitude=0f;\n  for (int octave=octaveCount - 1; octave >= 0; octave--) {\n    amplitude*=persistence;\n    totalAmplitude+=amplitude;\n    for (int x=0; x < width; x++) {\n      for (int y=0; y < height; y++) {\n        perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n      }\n    }\n  }\n  for (int x=0; x < width; x++) {\n    for (int y=0; y < height; y++) {\n      perlinNoise[x][y]/=totalAmplitude;\n    }\n  }\n  return perlinNoise;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 242,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 46,
        "startColumnNumber" : 20,
        "endLineNumber" : 46,
        "endColumnNumber" : 79
      },
      "nodeContext" : "perlinNoise[x][y]+=noiseLayers[octave][x][y] * amplitude;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 30,
    "startColumnNumber" : 28,
    "endLineNumber" : 30,
    "endColumnNumber" : 34
  }, {
    "charLength" : 6,
    "startLineNumber" : 31,
    "startColumnNumber" : 24,
    "endLineNumber" : 31,
    "endColumnNumber" : 30
  }, {
    "charLength" : 6,
    "startLineNumber" : 31,
    "startColumnNumber" : 80,
    "endLineNumber" : 31,
    "endColumnNumber" : 86
  }, {
    "charLength" : 6,
    "startLineNumber" : 38,
    "startColumnNumber" : 42,
    "endLineNumber" : 38,
    "endColumnNumber" : 48
  }, {
    "charLength" : 6,
    "startLineNumber" : 46,
    "startColumnNumber" : 53,
    "endLineNumber" : 46,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 11
  } ]
}