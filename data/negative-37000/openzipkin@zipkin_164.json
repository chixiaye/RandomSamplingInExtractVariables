{
  "id" : 164,
  "expression" : "Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT))",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/test/java/zipkin/SpanTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 235,
      "startLineNumber" : 39,
      "startColumnNumber" : 17,
      "endLineNumber" : 45,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 28,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 39,
        "startColumnNumber" : 17,
        "endLineNumber" : 46,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 350,
        "startLineNumber" : 39,
        "startColumnNumber" : 17,
        "endLineNumber" : 47,
        "endColumnNumber" : 16
      },
      "nodeContext" : "Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT)).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 358,
        "startLineNumber" : 39,
        "startColumnNumber" : 9,
        "endLineNumber" : 47,
        "endColumnNumber" : 16
      },
      "nodeContext" : "part2=Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT)).build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 42,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 47,
        "endColumnNumber" : 17
      },
      "nodeContext" : "Span part2=Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT)).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 45,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 31,
        "startColumnNumber" : 57,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Span part1=Span.builder().traceId(1L).name(\"\").id(1L).addBinaryAnnotation(BinaryAnnotation.address(Constants.SERVER_ADDR,APP_ENDPOINT)).build();\n  Span part2=Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT)).build();\n  Span expected=part2.toBuilder().addBinaryAnnotation(part1.binaryAnnotations.get(0)).build();\n  assertThat(part1.toBuilder().merge(part2).build()).isEqualTo(expected);\n  assertThat(part2.toBuilder().merge(part1).build()).isEqualTo(expected);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 906,
        "startLineNumber" : 30,
        "startColumnNumber" : 2,
        "endLineNumber" : 55,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void mergeWhenBinaryAnnotationsSentSeparately(){\n  Span part1=Span.builder().traceId(1L).name(\"\").id(1L).addBinaryAnnotation(BinaryAnnotation.address(Constants.SERVER_ADDR,APP_ENDPOINT)).build();\n  Span part2=Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT)).build();\n  Span expected=part2.toBuilder().addBinaryAnnotation(part1.binaryAnnotations.get(0)).build();\n  assertThat(part1.toBuilder().merge(part2).build()).isEqualTo(expected);\n  assertThat(part2.toBuilder().merge(part1).build()).isEqualTo(expected);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 126,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 333,
        "startLineNumber" : 39,
        "startColumnNumber" : 17,
        "endLineNumber" : 46,
        "endColumnNumber" : 97
      },
      "nodeContext" : "Span.builder().traceId(1L).name(\"get\").id(1L).timestamp(1444438900939000L).duration(376000L).addAnnotation(Annotation.create(1444438900939000L,Constants.SERVER_RECV,APP_ENDPOINT)).addAnnotation(Annotation.create(1444438901315000L,Constants.SERVER_SEND,APP_ENDPOINT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 38,
      "astHeight" : 9
    },
    "tokenLength" : 21,
    "type" : "zipkin.Span.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 235,
    "startLineNumber" : 39,
    "startColumnNumber" : 17,
    "endLineNumber" : 45,
    "endColumnNumber" : 97
  } ],
  "layoutRelationDataList" : [ ]
}