{
  "id" : 396,
  "expression" : "(long)value.getValue()",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/AggregationQueryEs7DAO.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(long)value.getValue()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 114,
      "startColumnNumber" : 43,
      "endLineNumber" : 114,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 114,
        "startColumnNumber" : 28,
        "endLineNumber" : 114,
        "endColumnNumber" : 67
      },
      "nodeContext" : "String.valueOf((long)value.getValue())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 68
      },
      "nodeContext" : "record.setValue(String.valueOf((long)value.getValue()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 69
      },
      "nodeContext" : "record.setValue(String.valueOf((long)value.getValue()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 110,
        "startColumnNumber" : 62,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SelectedRecord record=new SelectedRecord();\n  record.setId(termsBucket.getKeyAsString());\n  Avg value=termsBucket.getAggregations().get(valueColumnName);\n  record.setValue(String.valueOf((long)value.getValue()));\n  topNList.add(record);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Terms.Bucket termsBucket : idTerms.getBuckets()) {\n  SelectedRecord record=new SelectedRecord();\n  record.setId(termsBucket.getKeyAsString());\n  Avg value=termsBucket.getAggregations().get(valueColumnName);\n  record.setValue(String.valueOf((long)value.getValue()));\n  topNList.add(record);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3306,
        "startLineNumber" : 57,
        "startColumnNumber" : 106,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SearchSourceBuilder sourceBuilder=SearchSourceBuilder.searchSource();\n  final RangeQueryBuilder queryBuilder=QueryBuilders.rangeQuery(Metrics.TIME_BUCKET).lte(duration.getEndTimeBucket()).gte(duration.getStartTimeBucket());\n  boolean asc=false;\n  if (condition.getOrder().equals(Order.ASC)) {\n    asc=true;\n  }\n  String tableName=IndexController.LogicIndicesRegister.getPhysicalTableName(condition.getName());\n  if (CollectionUtils.isEmpty(additionalConditions) && IndexController.LogicIndicesRegister.isMetricTable(condition.getName())) {\n    BoolQueryBuilder boolQuery=QueryBuilders.boolQuery();\n    boolQuery.must().add(QueryBuilders.termQuery(IndexController.LogicIndicesRegister.METRIC_TABLE_NAME,condition.getName()));\n    boolQuery.must().add(queryBuilder);\n    sourceBuilder.query(boolQuery);\n  }\n else   if (CollectionUtils.isEmpty(additionalConditions)) {\n    sourceBuilder.query(queryBuilder);\n  }\n else   if (CollectionUtils.isNotEmpty(additionalConditions) && IndexController.LogicIndicesRegister.isMetricTable(condition.getName())) {\n    BoolQueryBuilder boolQuery=QueryBuilders.boolQuery();\n    boolQuery.must().add(QueryBuilders.termQuery(IndexController.LogicIndicesRegister.METRIC_TABLE_NAME,condition.getName()));\n    additionalConditions.forEach(additionalCondition -> boolQuery.must().add(QueryBuilders.termsQuery(additionalCondition.getKey(),additionalCondition.getValue())));\n    boolQuery.must().add(queryBuilder);\n    sourceBuilder.query(boolQuery);\n  }\n else {\n    BoolQueryBuilder boolQuery=QueryBuilders.boolQuery();\n    additionalConditions.forEach(additionalCondition -> boolQuery.must().add(QueryBuilders.termsQuery(additionalCondition.getKey(),additionalCondition.getValue())));\n    boolQuery.must().add(queryBuilder);\n    sourceBuilder.query(boolQuery);\n  }\n  sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).order(BucketOrder.aggregation(valueColumnName,asc)).size(condition.getTopN()).subAggregation(AggregationBuilders.avg(valueColumnName).field(valueColumnName)));\n  SearchResponse response=getClient().search(tableName,sourceBuilder);\n  List<SelectedRecord> topNList=new ArrayList<>();\n  Terms idTerms=response.getAggregations().get(Metrics.ENTITY_ID);\n  for (  Terms.Bucket termsBucket : idTerms.getBuckets()) {\n    SelectedRecord record=new SelectedRecord();\n    record.setId(termsBucket.getKeyAsString());\n    Avg value=termsBucket.getAggregations().get(valueColumnName);\n    record.setValue(String.valueOf((long)value.getValue()));\n    topNList.add(record);\n  }\n  return topNList;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 369,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3640,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public List<SelectedRecord> sortMetrics(final TopNCondition condition,final String valueColumnName,final Duration duration,final List<KeyValue> additionalConditions) throws IOException {\n  SearchSourceBuilder sourceBuilder=SearchSourceBuilder.searchSource();\n  final RangeQueryBuilder queryBuilder=QueryBuilders.rangeQuery(Metrics.TIME_BUCKET).lte(duration.getEndTimeBucket()).gte(duration.getStartTimeBucket());\n  boolean asc=false;\n  if (condition.getOrder().equals(Order.ASC)) {\n    asc=true;\n  }\n  String tableName=IndexController.LogicIndicesRegister.getPhysicalTableName(condition.getName());\n  if (CollectionUtils.isEmpty(additionalConditions) && IndexController.LogicIndicesRegister.isMetricTable(condition.getName())) {\n    BoolQueryBuilder boolQuery=QueryBuilders.boolQuery();\n    boolQuery.must().add(QueryBuilders.termQuery(IndexController.LogicIndicesRegister.METRIC_TABLE_NAME,condition.getName()));\n    boolQuery.must().add(queryBuilder);\n    sourceBuilder.query(boolQuery);\n  }\n else   if (CollectionUtils.isEmpty(additionalConditions)) {\n    sourceBuilder.query(queryBuilder);\n  }\n else   if (CollectionUtils.isNotEmpty(additionalConditions) && IndexController.LogicIndicesRegister.isMetricTable(condition.getName())) {\n    BoolQueryBuilder boolQuery=QueryBuilders.boolQuery();\n    boolQuery.must().add(QueryBuilders.termQuery(IndexController.LogicIndicesRegister.METRIC_TABLE_NAME,condition.getName()));\n    additionalConditions.forEach(additionalCondition -> boolQuery.must().add(QueryBuilders.termsQuery(additionalCondition.getKey(),additionalCondition.getValue())));\n    boolQuery.must().add(queryBuilder);\n    sourceBuilder.query(boolQuery);\n  }\n else {\n    BoolQueryBuilder boolQuery=QueryBuilders.boolQuery();\n    additionalConditions.forEach(additionalCondition -> boolQuery.must().add(QueryBuilders.termsQuery(additionalCondition.getKey(),additionalCondition.getValue())));\n    boolQuery.must().add(queryBuilder);\n    sourceBuilder.query(boolQuery);\n  }\n  sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).order(BucketOrder.aggregation(valueColumnName,asc)).size(condition.getTopN()).subAggregation(AggregationBuilders.avg(valueColumnName).field(valueColumnName)));\n  SearchResponse response=getClient().search(tableName,sourceBuilder);\n  List<SelectedRecord> topNList=new ArrayList<>();\n  Terms idTerms=response.getAggregations().get(Metrics.ENTITY_ID);\n  for (  Terms.Bucket termsBucket : idTerms.getBuckets()) {\n    SelectedRecord record=new SelectedRecord();\n    record.setId(termsBucket.getKeyAsString());\n    Avg value=termsBucket.getAggregations().get(valueColumnName);\n    record.setValue(String.valueOf((long)value.getValue()));\n    topNList.add(record);\n  }\n  return topNList;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 69
      },
      "nodeContext" : "record.setValue(String.valueOf((long)value.getValue()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 114,
    "startColumnNumber" : 43,
    "endLineNumber" : 114,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}