{
  "id" : 68,
  "expression" : "null",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-storage/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 57,
      "startColumnNumber" : 78,
      "endLineNumber" : 57,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 57,
        "startColumnNumber" : 33,
        "endLineNumber" : 57,
        "endColumnNumber" : 83
      },
      "nodeContext" : "mem.spanStore().getDependencies(TODAY + DAY,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 57,
        "startColumnNumber" : 25,
        "endLineNumber" : 57,
        "endColumnNumber" : 83
      },
      "nodeContext" : "links=mem.spanStore().getDependencies(TODAY + DAY,null)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 84
      },
      "nodeContext" : "List<DependencyLink> links=mem.spanStore().getDependencies(TODAY + DAY,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 54,
        "startColumnNumber" : 52,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  InMemoryStorage mem=new InMemoryStorage();\n  mem.spanConsumer().accept(spans);\n  List<DependencyLink> links=mem.spanStore().getDependencies(TODAY + DAY,null);\n  long midnight=midnightUTC(spans.get(0).timestamp / 1000);\n  new CassandraDependenciesWriter(storage.session.get()).write(links,midnight);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 784,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * The current implementation does not include dependency aggregation. It includes retrieval of pre-aggregated links. <p>This uses  {@link InMemorySpanStore} to prepare links and {@link CassandraDependenciesWriter}to store them. <p>Note: The zipkin-dependencies-spark doesn't use any of these classes: it reads and writes to the keyspace directly.\n */\n@Override public void processDependencies(List<Span> spans){\n  InMemoryStorage mem=new InMemoryStorage();\n  mem.spanConsumer().accept(spans);\n  List<DependencyLink> links=mem.spanStore().getDependencies(TODAY + DAY,null);\n  long midnight=midnightUTC(spans.get(0).timestamp / 1000);\n  new CassandraDependenciesWriter(storage.session.get()).write(links,midnight);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 74,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 84
      },
      "nodeContext" : "List<DependencyLink> links=mem.spanStore().getDependencies(TODAY + DAY,null);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 57,
    "startColumnNumber" : 78,
    "endLineNumber" : 57,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}